Index.PACKAGES = {"zio.internal.macros" : [{"name" : "zio.internal.macros.ExprGraphCompileVariants", "trait" : "zio\/internal\/macros\/ExprGraphCompileVariants.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/macros\/ExprGraphCompileVariants.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.internal.macros.Graph", "shortDescription" : "", "members_case class" : [{"label" : "map", "tail" : "(f: (A) => B): Graph[Key, B]", "member" : "zio.internal.macros.Graph.map", "link" : "zio\/internal\/macros\/Graph.html#map[B](f:A=>B):zio.internal.macros.Graph[Key,B]", "kind" : "def"}, {"label" : "buildComplete", "tail" : "(outputs: List[Key]): Either[::[GraphError[Key, A]], LayerCompose[A]]", "member" : "zio.internal.macros.Graph.buildComplete", "link" : "zio\/internal\/macros\/Graph.html#buildComplete(outputs:List[Key]):Either[::[zio.internal.macros.GraphError[Key,A]],zio.internal.macros.LayerCompose[A]]", "kind" : "def"}, {"member" : "zio.internal.macros.Graph#<init>", "error" : "unsupported entity"}, {"label" : "keyEquals", "tail" : ": (Key, Key) => Boolean", "member" : "zio.internal.macros.Graph.keyEquals", "link" : "zio\/internal\/macros\/Graph.html#keyEquals:(Key,Key)=>Boolean", "kind" : "val"}, {"label" : "nodes", "tail" : ": List[Node[Key, A]]", "member" : "zio.internal.macros.Graph.nodes", "link" : "zio\/internal\/macros\/Graph.html#nodes:List[zio.internal.macros.Node[Key,A]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/internal\/macros\/Graph.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/macros\/Graph.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/macros\/Graph.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/macros\/Graph.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/macros\/Graph.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/macros\/Graph.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/macros\/Graph.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/macros\/Graph.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/Graph.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/Graph.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/Graph.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/macros\/Graph.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/macros\/Graph.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/macros\/Graph.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/macros\/Graph.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/macros\/Graph.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/macros\/Graph.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/internal\/macros\/Graph.html", "kind" : "case class"}, {"name" : "zio.internal.macros.GraphError", "object" : "zio\/internal\/macros\/GraphError$.html", "members_object" : [{"label" : "CircularDependency", "tail" : "", "member" : "zio.internal.macros.GraphError.CircularDependency", "link" : "zio\/internal\/macros\/GraphError$.html#CircularDependency[+Key,+A]extendsGraphError[Key,A]withProductwithSerializable", "kind" : "case class"}, {"label" : "MissingTopLevelDependency", "tail" : "", "member" : "zio.internal.macros.GraphError.MissingTopLevelDependency", "link" : "zio\/internal\/macros\/GraphError$.html#MissingTopLevelDependency[+Key]extendsGraphError[Key,Nothing]withProductwithSerializable", "kind" : "case class"}, {"label" : "MissingTransitiveDependencies", "tail" : "", "member" : "zio.internal.macros.GraphError.MissingTransitiveDependencies", "link" : "zio\/internal\/macros\/GraphError$.html#MissingTransitiveDependencies[+Key,+A]extendsGraphError[Key,A]withProductwithSerializable", "kind" : "case class"}, {"label" : "missingTransitiveDependency", "tail" : "(node: Node[Key, A], dependency: Key): MissingTransitiveDependencies[Key, A]", "member" : "zio.internal.macros.GraphError.missingTransitiveDependency", "link" : "zio\/internal\/macros\/GraphError$.html#missingTransitiveDependency[Key,A](node:zio.internal.macros.Node[Key,A],dependency:Key):zio.internal.macros.GraphError.MissingTransitiveDependencies[Key,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/macros\/GraphError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/macros\/GraphError$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/macros\/GraphError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/macros\/GraphError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/macros\/GraphError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/macros\/GraphError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/macros\/GraphError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/GraphError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/GraphError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/GraphError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/macros\/GraphError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/macros\/GraphError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/macros\/GraphError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/macros\/GraphError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/macros\/GraphError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/macros\/GraphError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/macros\/GraphError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/macros\/GraphError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/macros\/GraphError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/internal\/macros\/GraphError.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/macros\/GraphError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/macros\/GraphError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/macros\/GraphError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/macros\/GraphError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/macros\/GraphError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/macros\/GraphError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/macros\/GraphError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/GraphError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/GraphError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/GraphError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/macros\/GraphError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/macros\/GraphError.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/macros\/GraphError.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/macros\/GraphError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/macros\/GraphError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/macros\/GraphError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/macros\/GraphError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/macros\/GraphError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/macros\/GraphError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.internal.macros.LayerCompose", "shortDescription" : "", "object" : "zio\/internal\/macros\/LayerCompose$.html", "members_class" : [{"label" : "toSet", "tail" : "(): Set[A1]", "member" : "zio.internal.macros.LayerCompose.toSet", "link" : "zio\/internal\/macros\/LayerCompose.html#toSet[A1>:A]:Set[A1]", "kind" : "def"}, {"label" : "fold", "tail" : "(z: B, value: (A) => B, composeH: (B, B) => B, composeV: (B, B) => B): B", "member" : "zio.internal.macros.LayerCompose.fold", "link" : "zio\/internal\/macros\/LayerCompose.html#fold[B](z:B,value:A=>B,composeH:(B,B)=>B,composeV:(B,B)=>B):B", "kind" : "def"}, {"label" : "++", "tail" : "(that: LayerCompose[A1]): LayerCompose[A1]", "member" : "zio.internal.macros.LayerCompose.++", "link" : "zio\/internal\/macros\/LayerCompose.html#++[A1>:A](that:zio.internal.macros.LayerCompose[A1]):zio.internal.macros.LayerCompose[A1]", "kind" : "def"}, {"label" : ">>>", "tail" : "(that: LayerCompose[A1]): LayerCompose[A1]", "member" : "zio.internal.macros.LayerCompose.>>>", "link" : "zio\/internal\/macros\/LayerCompose.html#>>>[A1>:A](that:zio.internal.macros.LayerCompose[A1]):zio.internal.macros.LayerCompose[A1]", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/internal\/macros\/LayerCompose.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "zio\/internal\/macros\/LayerCompose.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "zio\/internal\/macros\/LayerCompose.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "zio\/internal\/macros\/LayerCompose.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/macros\/LayerCompose.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/macros\/LayerCompose.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/macros\/LayerCompose.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/macros\/LayerCompose.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/macros\/LayerCompose.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/macros\/LayerCompose.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/macros\/LayerCompose.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/LayerCompose.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/LayerCompose.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/LayerCompose.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/macros\/LayerCompose.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/macros\/LayerCompose.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/macros\/LayerCompose.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/macros\/LayerCompose.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/macros\/LayerCompose.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/macros\/LayerCompose.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/macros\/LayerCompose.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/macros\/LayerCompose.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/macros\/LayerCompose.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "zio\/internal\/macros\/LayerCompose.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "zio\/internal\/macros\/LayerCompose.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "zio\/internal\/macros\/LayerCompose.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "LayerComposeIterableOps", "tail" : "", "member" : "zio.internal.macros.LayerCompose.LayerComposeIterableOps", "link" : "zio\/internal\/macros\/LayerCompose$.html#LayerComposeIterableOps[A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "ComposeV", "tail" : "", "member" : "zio.internal.macros.LayerCompose.ComposeV", "link" : "zio\/internal\/macros\/LayerCompose$.html#ComposeV[+A]extendsLayerCompose[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "ComposeH", "tail" : "", "member" : "zio.internal.macros.LayerCompose.ComposeH", "link" : "zio\/internal\/macros\/LayerCompose$.html#ComposeH[+A]extendsLayerCompose[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Value", "tail" : "", "member" : "zio.internal.macros.LayerCompose.Value", "link" : "zio\/internal\/macros\/LayerCompose$.html#Value[+A]extendsLayerCompose[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Empty", "tail" : "", "member" : "zio.internal.macros.LayerCompose.Empty", "link" : "zio\/internal\/macros\/LayerCompose$.html#Empty", "kind" : "case object"}, {"label" : "empty", "tail" : "(): LayerCompose[Nothing]", "member" : "zio.internal.macros.LayerCompose.empty", "link" : "zio\/internal\/macros\/LayerCompose$.html#empty:zio.internal.macros.LayerCompose[Nothing]", "kind" : "def"}, {"label" : "succeed", "tail" : "(value: A): LayerCompose[A]", "member" : "zio.internal.macros.LayerCompose.succeed", "link" : "zio\/internal\/macros\/LayerCompose$.html#succeed[A](value:A):zio.internal.macros.LayerCompose[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/macros\/LayerCompose$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/macros\/LayerCompose$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/macros\/LayerCompose$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/macros\/LayerCompose$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/macros\/LayerCompose$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/macros\/LayerCompose$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/macros\/LayerCompose$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/LayerCompose$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/LayerCompose$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/LayerCompose$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/macros\/LayerCompose$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/macros\/LayerCompose$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/macros\/LayerCompose$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/macros\/LayerCompose$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/macros\/LayerCompose$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/macros\/LayerCompose$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/macros\/LayerCompose$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/macros\/LayerCompose$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/macros\/LayerCompose$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/internal\/macros\/LayerCompose.html", "kind" : "class"}, {"name" : "zio.internal.macros.Node", "shortDescription" : "", "members_case class" : [{"label" : "map", "tail" : "(f: (A) => B): Node[Key, B]", "member" : "zio.internal.macros.Node.map", "link" : "zio\/internal\/macros\/Node.html#map[B](f:A=>B):zio.internal.macros.Node[Key,B]", "kind" : "def"}, {"member" : "zio.internal.macros.Node#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": A", "member" : "zio.internal.macros.Node.value", "link" : "zio\/internal\/macros\/Node.html#value:A", "kind" : "val"}, {"label" : "outputs", "tail" : ": List[Key]", "member" : "zio.internal.macros.Node.outputs", "link" : "zio\/internal\/macros\/Node.html#outputs:List[Key]", "kind" : "val"}, {"label" : "inputs", "tail" : ": List[Key]", "member" : "zio.internal.macros.Node.inputs", "link" : "zio\/internal\/macros\/Node.html#inputs:List[Key]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/internal\/macros\/Node.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/macros\/Node.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/macros\/Node.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/macros\/Node.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/macros\/Node.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/macros\/Node.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/macros\/Node.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/macros\/Node.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/Node.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/Node.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/Node.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/macros\/Node.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/macros\/Node.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/macros\/Node.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/macros\/Node.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/macros\/Node.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/macros\/Node.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/internal\/macros\/Node.html", "kind" : "case class"}, {"name" : "zio.internal.macros.WireMacros", "shortDescription" : "", "members_class" : [{"label" : "TreeOps", "tail" : "", "member" : "zio.internal.macros.LayerMacroUtils.TreeOps", "link" : "zio\/internal\/macros\/WireMacros.html#TreeOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "TypeOps", "tail" : "", "member" : "zio.internal.macros.LayerMacroUtils.TypeOps", "link" : "zio\/internal\/macros\/WireMacros.html#TypeOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "wireImpl", "tail" : "(layers: scala.reflect.macros.blackbox.Context.Expr[ZLayer[_, E, _]]*)(dummyKRemainder: scala.reflect.macros.blackbox.Context.Expr[DummyK[R0]], dummyK: scala.reflect.macros.blackbox.Context.Expr[DummyK[R]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[R0], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[R]): scala.reflect.macros.blackbox.Context.Expr[ZLayer[R0, E, R]]", "member" : "zio.internal.macros.WireMacros.wireImpl", "link" : "zio\/internal\/macros\/WireMacros.html#wireImpl[E,R0,R<:zio.Has[_]](layers:WireMacros.this.c.Expr[zio.ZLayer[_,E,_]]*)(dummyKRemainder:WireMacros.this.c.Expr[zio.internal.macros.DummyK[R0]],dummyK:WireMacros.this.c.Expr[zio.internal.macros.DummyK[R]])(implicitevidence$1:WireMacros.this.c.WeakTypeTag[R0],implicitevidence$2:WireMacros.this.c.WeakTypeTag[R]):WireMacros.this.c.Expr[zio.ZLayer[R0,E,R]]", "kind" : "def"}, {"member" : "zio.internal.macros.WireMacros#<init>", "error" : "unsupported entity"}, {"label" : "c", "tail" : ": Context", "member" : "zio.internal.macros.WireMacros.c", "link" : "zio\/internal\/macros\/WireMacros.html#c:scala.reflect.macros.blackbox.Context", "kind" : "val"}, {"label" : "assertProperVarArgs", "tail" : "(layers: Seq[scala.reflect.macros.blackbox.Context.Expr[_]]): Unit", "member" : "zio.internal.macros.LayerMacroUtils.assertProperVarArgs", "link" : "zio\/internal\/macros\/WireMacros.html#assertProperVarArgs(layers:Seq[LayerMacroUtils.this.c.Expr[_]]):Unit", "kind" : "def"}, {"label" : "getRequirements", "tail" : "(tpe: scala.reflect.macros.Universe.Type): List[scala.reflect.macros.blackbox.Context.Type]", "member" : "zio.internal.macros.LayerMacroUtils.getRequirements", "link" : "zio\/internal\/macros\/WireMacros.html#getRequirements(tpe:LayerMacroUtils.this.c.universe.Type):List[LayerMacroUtils.this.c.Type]", "kind" : "def"}, {"label" : "constructLayer", "tail" : "(layers0: Seq[scala.reflect.macros.blackbox.Context.Expr[ZLayer[_, E, _]]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[R0], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[R]): scala.reflect.macros.blackbox.Context.Expr[ZLayer[Any, E, R]]", "member" : "zio.internal.macros.LayerMacroUtils.constructLayer", "link" : "zio\/internal\/macros\/WireMacros.html#constructLayer[R0,R,E](layers0:Seq[LayerMacroUtils.this.c.Expr[zio.ZLayer[_,E,_]]])(implicitevidence$4:LayerMacroUtils.this.c.WeakTypeTag[R0],implicitevidence$5:LayerMacroUtils.this.c.WeakTypeTag[R]):LayerMacroUtils.this.c.Expr[zio.ZLayer[Any,E,R]]", "kind" : "def"}, {"label" : "injectBaseImpl", "tail" : "(layers: Seq[scala.reflect.macros.blackbox.Context.Expr[ZLayer[_, E, _]]], method: String)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[R0], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[R]): scala.reflect.macros.blackbox.Context.Expr[F[R0, E, A]]", "member" : "zio.internal.macros.LayerMacroUtils.injectBaseImpl", "link" : "zio\/internal\/macros\/WireMacros.html#injectBaseImpl[F[_,_,_],R0,R,E,A](layers:Seq[LayerMacroUtils.this.c.Expr[zio.ZLayer[_,E,_]]],method:String)(implicitevidence$2:LayerMacroUtils.this.c.WeakTypeTag[R0],implicitevidence$3:LayerMacroUtils.this.c.WeakTypeTag[R]):LayerMacroUtils.this.c.Expr[F[R0,E,A]]", "kind" : "def"}, {"label" : "isValidHasType", "tail" : "(tpe: scala.reflect.macros.Universe.Type): Boolean", "member" : "zio.internal.macros.LayerMacroUtils.isValidHasType", "link" : "zio\/internal\/macros\/WireMacros.html#isValidHasType(tpe:LayerMacroUtils.this.c.universe.Type):Boolean", "kind" : "def"}, {"label" : "getRequirements", "tail" : "(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): List[scala.reflect.macros.blackbox.Context.Type]", "member" : "zio.internal.macros.LayerMacroUtils.getRequirements", "link" : "zio\/internal\/macros\/WireMacros.html#getRequirements[T](implicitevidence$1:LayerMacroUtils.this.c.WeakTypeTag[T]):List[LayerMacroUtils.this.c.Type]", "kind" : "def"}, {"label" : "getNode", "tail" : "(layer: LayerExpr): Node[scala.reflect.macros.blackbox.Context.Type, LayerExpr]", "member" : "zio.internal.macros.LayerMacroUtils.getNode", "link" : "zio\/internal\/macros\/WireMacros.html#getNode(layer:LayerMacroUtils.this.LayerExpr):zio.internal.macros.Node[LayerMacroUtils.this.c.Type,LayerMacroUtils.this.LayerExpr]", "kind" : "def"}, {"label" : "buildMemoizedLayer", "tail" : "(exprGraph: ZLayerExprBuilder[scala.reflect.macros.blackbox.Context.Type, LayerExpr], requirements: List[scala.reflect.macros.blackbox.Context.Type]): LayerExpr", "member" : "zio.internal.macros.LayerMacroUtils.buildMemoizedLayer", "link" : "zio\/internal\/macros\/WireMacros.html#buildMemoizedLayer(exprGraph:zio.internal.macros.ZLayerExprBuilder[LayerMacroUtils.this.c.Type,LayerMacroUtils.this.LayerExpr],requirements:List[LayerMacroUtils.this.c.Type]):LayerMacroUtils.this.LayerExpr", "kind" : "def"}, {"label" : "generateExprGraph", "tail" : "(nodes: List[Node[scala.reflect.macros.blackbox.Context.Type, LayerExpr]]): ZLayerExprBuilder[scala.reflect.macros.blackbox.Context.Type, LayerExpr]", "member" : "zio.internal.macros.LayerMacroUtils.generateExprGraph", "link" : "zio\/internal\/macros\/WireMacros.html#generateExprGraph(nodes:List[zio.internal.macros.Node[LayerMacroUtils.this.c.Type,LayerMacroUtils.this.LayerExpr]]):zio.internal.macros.ZLayerExprBuilder[LayerMacroUtils.this.c.Type,LayerMacroUtils.this.LayerExpr]", "kind" : "def"}, {"label" : "generateExprGraph", "tail" : "(layers: Seq[LayerExpr]): ZLayerExprBuilder[scala.reflect.macros.blackbox.Context.Type, LayerExpr]", "member" : "zio.internal.macros.LayerMacroUtils.generateExprGraph", "link" : "zio\/internal\/macros\/WireMacros.html#generateExprGraph(layers:Seq[LayerMacroUtils.this.LayerExpr]):zio.internal.macros.ZLayerExprBuilder[LayerMacroUtils.this.c.Type,LayerMacroUtils.this.LayerExpr]", "kind" : "def"}, {"label" : "LayerExpr", "tail" : "", "member" : "zio.internal.macros.LayerMacroUtils.LayerExpr", "link" : "zio\/internal\/macros\/WireMacros.html#LayerExpr=LayerMacroUtils.this.c.Expr[zio.ZLayer[_,_,_]]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/macros\/WireMacros.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/macros\/WireMacros.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/macros\/WireMacros.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/macros\/WireMacros.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/macros\/WireMacros.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/macros\/WireMacros.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/macros\/WireMacros.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/WireMacros.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/WireMacros.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/WireMacros.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/macros\/WireMacros.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/macros\/WireMacros.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/macros\/WireMacros.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/macros\/WireMacros.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/macros\/WireMacros.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/macros\/WireMacros.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/macros\/WireMacros.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/macros\/WireMacros.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/macros\/WireMacros.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/internal\/macros\/WireMacros.html", "kind" : "class"}, {"name" : "zio.internal.macros.ZLayerExprBuilder", "shortDescription" : "", "object" : "zio\/internal\/macros\/ZLayerExprBuilder$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/macros\/ZLayerExprBuilder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "buildLayerFor", "tail" : "(output: List[Key]): A", "member" : "zio.internal.macros.ZLayerExprBuilder.buildLayerFor", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#buildLayerFor(output:List[Key]):A", "kind" : "def"}, {"member" : "zio.internal.macros.ZLayerExprBuilder#<init>", "error" : "unsupported entity"}, {"label" : "composeV", "tail" : ": (A, A) => A", "member" : "zio.internal.macros.ZLayerExprBuilder.composeV", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#composeV:(A,A)=>A", "kind" : "val"}, {"label" : "composeH", "tail" : ": (A, A) => A", "member" : "zio.internal.macros.ZLayerExprBuilder.composeH", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#composeH:(A,A)=>A", "kind" : "val"}, {"label" : "emptyExpr", "tail" : ": A", "member" : "zio.internal.macros.ZLayerExprBuilder.emptyExpr", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#emptyExpr:A", "kind" : "val"}, {"label" : "abort", "tail" : ": (String) => Nothing", "member" : "zio.internal.macros.ZLayerExprBuilder.abort", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#abort:String=>Nothing", "kind" : "val"}, {"label" : "showExpr", "tail" : ": (A) => String", "member" : "zio.internal.macros.ZLayerExprBuilder.showExpr", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#showExpr:A=>String", "kind" : "val"}, {"label" : "showKey", "tail" : ": (Key) => String", "member" : "zio.internal.macros.ZLayerExprBuilder.showKey", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#showKey:Key=>String", "kind" : "val"}, {"label" : "graph", "tail" : ": Graph[Key, A]", "member" : "zio.internal.macros.ZLayerExprBuilder.graph", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#graph:zio.internal.macros.Graph[Key,A]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/macros\/ZLayerExprBuilder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/internal\/macros\/ZLayerExprBuilder.html", "kind" : "case class"}], "zio.internal.metrics" : [{"name" : "zio.internal.metrics.ConcurrentSummaryBase", "trait" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html", "kind" : "trait", "members_trait" : [{"label" : "calculateQuantiles", "tail" : "(sortedSamples: Chunk[Double]): Chunk[(Double, Option[Double])]", "member" : "zio.internal.metrics.ConcurrentSummaryBase.calculateQuantiles", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#calculateQuantiles(sortedSamples:zio.Chunk[Double]):zio.Chunk[(Double,Option[Double])]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "sortedQuantiles", "tail" : ": Chunk[Double]", "member" : "zio.internal.metrics.ConcurrentSummaryBase.sortedQuantiles", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#sortedQuantiles:zio.Chunk[Double]", "kind" : "abstract val"}, {"label" : "error", "tail" : ": Double", "member" : "zio.internal.metrics.ConcurrentSummaryBase.error", "link" : "zio\/internal\/metrics\/ConcurrentSummaryBase.html#error:Double", "kind" : "abstract val"}], "shortDescription" : ""}], "zio.test.magnolia" : [{"name" : "zio.test.magnolia.DeriveGen", "object" : "zio\/test\/magnolia\/DeriveGen$.html", "members_object" : [{"label" : "gen", "tail" : "(): Typeclass[T]", "member" : "zio.test.magnolia.DeriveGen.gen", "link" : "zio\/test\/magnolia\/DeriveGen$.html#gen[T]:zio.test.magnolia.DeriveGen.Typeclass[T]", "kind" : "implicit macro def"}, {"label" : "dispatch", "tail" : "(sealedTrait: SealedTrait[Typeclass, T]): Typeclass[T]", "member" : "zio.test.magnolia.DeriveGen.dispatch", "link" : "zio\/test\/magnolia\/DeriveGen$.html#dispatch[T](sealedTrait:magnolia.SealedTrait[zio.test.magnolia.DeriveGen.Typeclass,T]):zio.test.magnolia.DeriveGen.Typeclass[T]", "kind" : "def"}, {"label" : "combine", "tail" : "(caseClass: CaseClass[Typeclass, T]): Typeclass[T]", "member" : "zio.test.magnolia.DeriveGen.combine", "link" : "zio\/test\/magnolia\/DeriveGen$.html#combine[T](caseClass:magnolia.CaseClass[zio.test.magnolia.DeriveGen.Typeclass,T]):zio.test.magnolia.DeriveGen.Typeclass[T]", "kind" : "def"}, {"label" : "Typeclass", "tail" : "", "member" : "zio.test.magnolia.DeriveGen.Typeclass", "link" : "zio\/test\/magnolia\/DeriveGen$.html#Typeclass[T]=zio.test.magnolia.DeriveGen[T]", "kind" : "type"}, {"label" : "genVector", "tail" : "(ev: DeriveGen[A]): DeriveGen[Vector[A]]", "member" : "zio.test.magnolia.DeriveGen.genVector", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genVector[A](implicitev:zio.test.magnolia.DeriveGen[A]):zio.test.magnolia.DeriveGen[Vector[A]]", "kind" : "implicit def"}, {"label" : "genTuple10", "tail" : "(ev1: DeriveGen[A], ev2: DeriveGen[B], ev3: DeriveGen[C], ev4: DeriveGen[D], ev5: DeriveGen[F], ev6: DeriveGen[G], ev7: DeriveGen[H], ev8: DeriveGen[I], ev9: DeriveGen[J], ev10: DeriveGen[K]): DeriveGen[(A, B, C, D, F, G, H, I, J, K)]", "member" : "zio.test.magnolia.DeriveGen.genTuple10", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genTuple10[A,B,C,D,F,G,H,I,J,K](implicitev1:zio.test.magnolia.DeriveGen[A],implicitev2:zio.test.magnolia.DeriveGen[B],implicitev3:zio.test.magnolia.DeriveGen[C],implicitev4:zio.test.magnolia.DeriveGen[D],implicitev5:zio.test.magnolia.DeriveGen[F],implicitev6:zio.test.magnolia.DeriveGen[G],implicitev7:zio.test.magnolia.DeriveGen[H],implicitev8:zio.test.magnolia.DeriveGen[I],implicitev9:zio.test.magnolia.DeriveGen[J],implicitev10:zio.test.magnolia.DeriveGen[K]):zio.test.magnolia.DeriveGen[(A,B,C,D,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "genTuple9", "tail" : "(ev1: DeriveGen[A], ev2: DeriveGen[B], ev3: DeriveGen[C], ev4: DeriveGen[D], ev5: DeriveGen[F], ev6: DeriveGen[G], ev7: DeriveGen[H], ev8: DeriveGen[I], ev9: DeriveGen[J]): DeriveGen[(A, B, C, D, F, G, H, I, J)]", "member" : "zio.test.magnolia.DeriveGen.genTuple9", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genTuple9[A,B,C,D,F,G,H,I,J](implicitev1:zio.test.magnolia.DeriveGen[A],implicitev2:zio.test.magnolia.DeriveGen[B],implicitev3:zio.test.magnolia.DeriveGen[C],implicitev4:zio.test.magnolia.DeriveGen[D],implicitev5:zio.test.magnolia.DeriveGen[F],implicitev6:zio.test.magnolia.DeriveGen[G],implicitev7:zio.test.magnolia.DeriveGen[H],implicitev8:zio.test.magnolia.DeriveGen[I],implicitev9:zio.test.magnolia.DeriveGen[J]):zio.test.magnolia.DeriveGen[(A,B,C,D,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "genTuple8", "tail" : "(ev1: DeriveGen[A], ev2: DeriveGen[B], ev3: DeriveGen[C], ev4: DeriveGen[D], ev5: DeriveGen[F], ev6: DeriveGen[G], ev7: DeriveGen[H], ev8: DeriveGen[I]): DeriveGen[(A, B, C, D, F, G, H, I)]", "member" : "zio.test.magnolia.DeriveGen.genTuple8", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genTuple8[A,B,C,D,F,G,H,I](implicitev1:zio.test.magnolia.DeriveGen[A],implicitev2:zio.test.magnolia.DeriveGen[B],implicitev3:zio.test.magnolia.DeriveGen[C],implicitev4:zio.test.magnolia.DeriveGen[D],implicitev5:zio.test.magnolia.DeriveGen[F],implicitev6:zio.test.magnolia.DeriveGen[G],implicitev7:zio.test.magnolia.DeriveGen[H],implicitev8:zio.test.magnolia.DeriveGen[I]):zio.test.magnolia.DeriveGen[(A,B,C,D,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "genTuple7", "tail" : "(ev1: DeriveGen[A], ev2: DeriveGen[B], ev3: DeriveGen[C], ev4: DeriveGen[D], ev5: DeriveGen[F], ev6: DeriveGen[G], ev7: DeriveGen[H]): DeriveGen[(A, B, C, D, F, G, H)]", "member" : "zio.test.magnolia.DeriveGen.genTuple7", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genTuple7[A,B,C,D,F,G,H](implicitev1:zio.test.magnolia.DeriveGen[A],implicitev2:zio.test.magnolia.DeriveGen[B],implicitev3:zio.test.magnolia.DeriveGen[C],implicitev4:zio.test.magnolia.DeriveGen[D],implicitev5:zio.test.magnolia.DeriveGen[F],implicitev6:zio.test.magnolia.DeriveGen[G],implicitev7:zio.test.magnolia.DeriveGen[H]):zio.test.magnolia.DeriveGen[(A,B,C,D,F,G,H)]", "kind" : "implicit def"}, {"label" : "genTuple6", "tail" : "(ev1: DeriveGen[A], ev2: DeriveGen[B], ev3: DeriveGen[C], ev4: DeriveGen[D], ev5: DeriveGen[F], ev6: DeriveGen[G]): DeriveGen[(A, B, C, D, F, G)]", "member" : "zio.test.magnolia.DeriveGen.genTuple6", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genTuple6[A,B,C,D,F,G](implicitev1:zio.test.magnolia.DeriveGen[A],implicitev2:zio.test.magnolia.DeriveGen[B],implicitev3:zio.test.magnolia.DeriveGen[C],implicitev4:zio.test.magnolia.DeriveGen[D],implicitev5:zio.test.magnolia.DeriveGen[F],implicitev6:zio.test.magnolia.DeriveGen[G]):zio.test.magnolia.DeriveGen[(A,B,C,D,F,G)]", "kind" : "implicit def"}, {"label" : "genTuple5", "tail" : "(ev1: DeriveGen[A], ev2: DeriveGen[B], ev3: DeriveGen[C], ev4: DeriveGen[D], ev5: DeriveGen[F]): DeriveGen[(A, B, C, D, F)]", "member" : "zio.test.magnolia.DeriveGen.genTuple5", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genTuple5[A,B,C,D,F](implicitev1:zio.test.magnolia.DeriveGen[A],implicitev2:zio.test.magnolia.DeriveGen[B],implicitev3:zio.test.magnolia.DeriveGen[C],implicitev4:zio.test.magnolia.DeriveGen[D],implicitev5:zio.test.magnolia.DeriveGen[F]):zio.test.magnolia.DeriveGen[(A,B,C,D,F)]", "kind" : "implicit def"}, {"label" : "genTuple4", "tail" : "(ev1: DeriveGen[A], ev2: DeriveGen[B], ev3: DeriveGen[C], ev4: DeriveGen[D]): DeriveGen[(A, B, C, D)]", "member" : "zio.test.magnolia.DeriveGen.genTuple4", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genTuple4[A,B,C,D](implicitev1:zio.test.magnolia.DeriveGen[A],implicitev2:zio.test.magnolia.DeriveGen[B],implicitev3:zio.test.magnolia.DeriveGen[C],implicitev4:zio.test.magnolia.DeriveGen[D]):zio.test.magnolia.DeriveGen[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "genTuple3", "tail" : "(ev1: DeriveGen[A], ev2: DeriveGen[B], ev3: DeriveGen[C]): DeriveGen[(A, B, C)]", "member" : "zio.test.magnolia.DeriveGen.genTuple3", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genTuple3[A,B,C](implicitev1:zio.test.magnolia.DeriveGen[A],implicitev2:zio.test.magnolia.DeriveGen[B],implicitev3:zio.test.magnolia.DeriveGen[C]):zio.test.magnolia.DeriveGen[(A,B,C)]", "kind" : "implicit def"}, {"label" : "genTuple2", "tail" : "(ev1: DeriveGen[A], ev2: DeriveGen[B]): DeriveGen[(A, B)]", "member" : "zio.test.magnolia.DeriveGen.genTuple2", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genTuple2[A,B](implicitev1:zio.test.magnolia.DeriveGen[A],implicitev2:zio.test.magnolia.DeriveGen[B]):zio.test.magnolia.DeriveGen[(A,B)]", "kind" : "implicit def"}, {"label" : "genSet", "tail" : "(ev: DeriveGen[A]): DeriveGen[Set[A]]", "member" : "zio.test.magnolia.DeriveGen.genSet", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genSet[A](implicitev:zio.test.magnolia.DeriveGen[A]):zio.test.magnolia.DeriveGen[Set[A]]", "kind" : "implicit def"}, {"label" : "genPartialFunction", "tail" : "(ev: DeriveGen[B]): DeriveGen[PartialFunction[A, B]]", "member" : "zio.test.magnolia.DeriveGen.genPartialFunction", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genPartialFunction[A,B](implicitev:zio.test.magnolia.DeriveGen[B]):zio.test.magnolia.DeriveGen[PartialFunction[A,B]]", "kind" : "implicit def"}, {"label" : "genSeq", "tail" : "(ev: DeriveGen[A]): DeriveGen[Seq[A]]", "member" : "zio.test.magnolia.DeriveGen.genSeq", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genSeq[A](implicitev:zio.test.magnolia.DeriveGen[A]):zio.test.magnolia.DeriveGen[Seq[A]]", "kind" : "implicit def"}, {"label" : "genOption", "tail" : "(ev: DeriveGen[A]): DeriveGen[Option[A]]", "member" : "zio.test.magnolia.DeriveGen.genOption", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genOption[A](implicitev:zio.test.magnolia.DeriveGen[A]):zio.test.magnolia.DeriveGen[Option[A]]", "kind" : "implicit def"}, {"label" : "genMap", "tail" : "(ev1: DeriveGen[A], ev2: DeriveGen[B]): DeriveGen[Map[A, B]]", "member" : "zio.test.magnolia.DeriveGen.genMap", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genMap[A,B](implicitev1:zio.test.magnolia.DeriveGen[A],implicitev2:zio.test.magnolia.DeriveGen[B]):zio.test.magnolia.DeriveGen[Map[A,B]]", "kind" : "implicit def"}, {"label" : "genList", "tail" : "(ev: DeriveGen[A]): DeriveGen[List[A]]", "member" : "zio.test.magnolia.DeriveGen.genList", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genList[A](implicitev:zio.test.magnolia.DeriveGen[A]):zio.test.magnolia.DeriveGen[List[A]]", "kind" : "implicit def"}, {"label" : "genIterable", "tail" : "(ev: DeriveGen[A]): DeriveGen[Iterable[A]]", "member" : "zio.test.magnolia.DeriveGen.genIterable", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genIterable[A](implicitev:zio.test.magnolia.DeriveGen[A]):zio.test.magnolia.DeriveGen[Iterable[A]]", "kind" : "implicit def"}, {"label" : "genFunction", "tail" : "(ev: DeriveGen[B]): DeriveGen[(A) => B]", "member" : "zio.test.magnolia.DeriveGen.genFunction", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genFunction[A,B](implicitev:zio.test.magnolia.DeriveGen[B]):zio.test.magnolia.DeriveGen[A=>B]", "kind" : "implicit def"}, {"label" : "genEither", "tail" : "(ev1: DeriveGen[A], ev2: DeriveGen[B]): DeriveGen[Either[A, B]]", "member" : "zio.test.magnolia.DeriveGen.genEither", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genEither[A,B](implicitev1:zio.test.magnolia.DeriveGen[A],implicitev2:zio.test.magnolia.DeriveGen[B]):zio.test.magnolia.DeriveGen[Either[A,B]]", "kind" : "implicit def"}, {"label" : "genBigDecimal", "tail" : ": DeriveGen[BigDecimal]", "member" : "zio.test.magnolia.DeriveGen.genBigDecimal", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genBigDecimal:zio.test.magnolia.DeriveGen[BigDecimal]", "kind" : "implicit val"}, {"label" : "genLocalDate", "tail" : ": DeriveGen[LocalDate]", "member" : "zio.test.magnolia.DeriveGen.genLocalDate", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genLocalDate:zio.test.magnolia.DeriveGen[java.time.LocalDate]", "kind" : "implicit val"}, {"label" : "genLocalDateTime", "tail" : ": DeriveGen[LocalDateTime]", "member" : "zio.test.magnolia.DeriveGen.genLocalDateTime", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genLocalDateTime:zio.test.magnolia.DeriveGen[java.time.LocalDateTime]", "kind" : "implicit val"}, {"label" : "genInstant", "tail" : ": DeriveGen[Instant]", "member" : "zio.test.magnolia.DeriveGen.genInstant", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genInstant:zio.test.magnolia.DeriveGen[java.time.Instant]", "kind" : "implicit val"}, {"label" : "genUUID", "tail" : ": DeriveGen[UUID]", "member" : "zio.test.magnolia.DeriveGen.genUUID", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genUUID:zio.test.magnolia.DeriveGen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "genUnit", "tail" : ": DeriveGen[Unit]", "member" : "zio.test.magnolia.DeriveGen.genUnit", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genUnit:zio.test.magnolia.DeriveGen[Unit]", "kind" : "implicit val"}, {"label" : "genString", "tail" : ": DeriveGen[String]", "member" : "zio.test.magnolia.DeriveGen.genString", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genString:zio.test.magnolia.DeriveGen[String]", "kind" : "implicit val"}, {"label" : "genShort", "tail" : ": DeriveGen[Short]", "member" : "zio.test.magnolia.DeriveGen.genShort", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genShort:zio.test.magnolia.DeriveGen[Short]", "kind" : "implicit val"}, {"label" : "genLong", "tail" : ": DeriveGen[Long]", "member" : "zio.test.magnolia.DeriveGen.genLong", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genLong:zio.test.magnolia.DeriveGen[Long]", "kind" : "implicit val"}, {"label" : "genInt", "tail" : ": DeriveGen[Int]", "member" : "zio.test.magnolia.DeriveGen.genInt", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genInt:zio.test.magnolia.DeriveGen[Int]", "kind" : "implicit val"}, {"label" : "genFloat", "tail" : ": DeriveGen[Float]", "member" : "zio.test.magnolia.DeriveGen.genFloat", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genFloat:zio.test.magnolia.DeriveGen[Float]", "kind" : "implicit val"}, {"label" : "genDouble", "tail" : ": DeriveGen[Double]", "member" : "zio.test.magnolia.DeriveGen.genDouble", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genDouble:zio.test.magnolia.DeriveGen[Double]", "kind" : "implicit val"}, {"label" : "genChar", "tail" : ": DeriveGen[Char]", "member" : "zio.test.magnolia.DeriveGen.genChar", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genChar:zio.test.magnolia.DeriveGen[Char]", "kind" : "implicit val"}, {"label" : "genByte", "tail" : ": DeriveGen[Byte]", "member" : "zio.test.magnolia.DeriveGen.genByte", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genByte:zio.test.magnolia.DeriveGen[Byte]", "kind" : "implicit val"}, {"label" : "genBoolean", "tail" : ": DeriveGen[Boolean]", "member" : "zio.test.magnolia.DeriveGen.genBoolean", "link" : "zio\/test\/magnolia\/DeriveGen$.html#genBoolean:zio.test.magnolia.DeriveGen[Boolean]", "kind" : "implicit val"}, {"label" : "instance", "tail" : "(gen: Gen[Has[Random] with Has[Sized], A]): DeriveGen[A]", "member" : "zio.test.magnolia.DeriveGen.instance", "link" : "zio\/test\/magnolia\/DeriveGen$.html#instance[A](gen:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],A]):zio.test.magnolia.DeriveGen[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: DeriveGen[A]): Gen[Has[Random] with Has[Sized], A]", "member" : "zio.test.magnolia.DeriveGen.apply", "link" : "zio\/test\/magnolia\/DeriveGen$.html#apply[A](implicitev:zio.test.magnolia.DeriveGen[A]):zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/magnolia\/DeriveGen$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/magnolia\/DeriveGen$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/magnolia\/DeriveGen$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/magnolia\/DeriveGen$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/magnolia\/DeriveGen$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/magnolia\/DeriveGen$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/magnolia\/DeriveGen$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/magnolia\/DeriveGen$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/magnolia\/DeriveGen$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/magnolia\/DeriveGen$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/magnolia\/DeriveGen$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/magnolia\/DeriveGen$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/magnolia\/DeriveGen$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/magnolia\/DeriveGen$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/magnolia\/DeriveGen$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/magnolia\/DeriveGen$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/magnolia\/DeriveGen$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/magnolia\/DeriveGen$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/magnolia\/DeriveGen$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/magnolia\/DeriveGen.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/magnolia\/DeriveGen.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/magnolia\/DeriveGen.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/magnolia\/DeriveGen.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/magnolia\/DeriveGen.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/magnolia\/DeriveGen.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/magnolia\/DeriveGen.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/magnolia\/DeriveGen.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/magnolia\/DeriveGen.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/magnolia\/DeriveGen.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/magnolia\/DeriveGen.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/magnolia\/DeriveGen.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/magnolia\/DeriveGen.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/magnolia\/DeriveGen.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/magnolia\/DeriveGen.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/magnolia\/DeriveGen.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/magnolia\/DeriveGen.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/magnolia\/DeriveGen.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/magnolia\/DeriveGen.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/magnolia\/DeriveGen.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "derive", "tail" : "(): Gen[Has[Random] with Has[Sized], A]", "member" : "zio.test.magnolia.DeriveGen.derive", "link" : "zio\/test\/magnolia\/DeriveGen.html#derive:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],A]", "kind" : "abstract def"}], "shortDescription" : "A DeriveGen[A] can derive a generator of A values."}], "zio.test.refined.types" : [{"name" : "zio.test.refined.types.all", "shortDescription" : "", "object" : "zio\/test\/refined\/types\/all$.html", "members_object" : [{"label" : "FiniteStringPartiallyApplied", "tail" : "", "member" : "zio.test.refined.types.StringInstance.FiniteStringPartiallyApplied", "link" : "zio\/test\/refined\/types\/StringInstance.html#FiniteStringPartiallyApplied[N<:Int,P]extendsAnyRef", "kind" : "class"}, {"label" : "millsDeriveGen", "tail" : "(): DeriveGen[Millis]", "member" : "zio.test.refined.types.TimeInstances.millsDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#millsDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Millis]", "kind" : "implicit def"}, {"label" : "secondDeriveGen", "tail" : "(): DeriveGen[Second]", "member" : "zio.test.refined.types.TimeInstances.secondDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#secondDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Second]", "kind" : "implicit def"}, {"label" : "minuteDeriveGen", "tail" : "(): DeriveGen[Minute]", "member" : "zio.test.refined.types.TimeInstances.minuteDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#minuteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Minute]", "kind" : "implicit def"}, {"label" : "hourDeriveGen", "tail" : "(): DeriveGen[Hour]", "member" : "zio.test.refined.types.TimeInstances.hourDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#hourDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Hour]", "kind" : "implicit def"}, {"label" : "dayDeriveGen", "tail" : "(): DeriveGen[Day]", "member" : "zio.test.refined.types.TimeInstances.dayDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#dayDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Day]", "kind" : "implicit def"}, {"label" : "monthDeriveGen", "tail" : "(): DeriveGen[Month]", "member" : "zio.test.refined.types.TimeInstances.monthDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#monthDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Month]", "kind" : "implicit def"}, {"label" : "millsGen", "tail" : ": Gen[Has[Random], Millis]", "member" : "zio.test.refined.types.TimeInstances.millsGen", "link" : "zio\/test\/refined\/types\/all$.html#millsGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Millis]", "kind" : "val"}, {"label" : "secondGen", "tail" : ": Gen[Has[Random], Second]", "member" : "zio.test.refined.types.TimeInstances.secondGen", "link" : "zio\/test\/refined\/types\/all$.html#secondGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Second]", "kind" : "val"}, {"label" : "minuteGen", "tail" : ": Gen[Has[Random], Minute]", "member" : "zio.test.refined.types.TimeInstances.minuteGen", "link" : "zio\/test\/refined\/types\/all$.html#minuteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Minute]", "kind" : "val"}, {"label" : "hourGen", "tail" : ": Gen[Has[Random], Hour]", "member" : "zio.test.refined.types.TimeInstances.hourGen", "link" : "zio\/test\/refined\/types\/all$.html#hourGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Hour]", "kind" : "val"}, {"label" : "dayGen", "tail" : ": Gen[Has[Random], Day]", "member" : "zio.test.refined.types.TimeInstances.dayGen", "link" : "zio\/test\/refined\/types\/all$.html#dayGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Day]", "kind" : "val"}, {"label" : "monthGen", "tail" : ": Gen[Has[Random], Month]", "member" : "zio.test.refined.types.TimeInstances.monthGen", "link" : "zio\/test\/refined\/types\/all$.html#monthGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Month]", "kind" : "val"}, {"label" : "hexStringDeriveGen", "tail" : "(): DeriveGen[HexString]", "member" : "zio.test.refined.types.StringInstance.hexStringDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#hexStringDeriveGen[R]:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.HexString]", "kind" : "implicit def"}, {"label" : "trimmedStringDeriveGen", "tail" : "(charGen: DeriveGen[Char]): DeriveGen[TrimmedString]", "member" : "zio.test.refined.types.StringInstance.trimmedStringDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#trimmedStringDeriveGen[R](implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.TrimmedString]", "kind" : "implicit def"}, {"label" : "nonEmptyFiniteStringDeriveGen", "tail" : "(ws: Aux[N], charGen: DeriveGen[Char]): DeriveGen[NonEmptyFiniteString[N]]", "member" : "zio.test.refined.types.StringInstance.nonEmptyFiniteStringDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonEmptyFiniteStringDeriveGen[N<:Int](implicitws:shapeless.Witness.Aux[N],implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.NonEmptyFiniteString[N]]", "kind" : "implicit def"}, {"label" : "nonEmptyStringDeriveGen", "tail" : "(charGen: DeriveGen[Char]): DeriveGen[NonEmptyString]", "member" : "zio.test.refined.types.StringInstance.nonEmptyStringDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonEmptyStringDeriveGen[R](implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.NonEmptyString]", "kind" : "implicit def"}, {"label" : "finiteStringDeriveGen", "tail" : "(ws: Aux[N], charGen: DeriveGen[Char]): DeriveGen[FiniteString[N]]", "member" : "zio.test.refined.types.StringInstance.finiteStringDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#finiteStringDeriveGen[N<:Int](implicitws:shapeless.Witness.Aux[N],implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.FiniteString[N]]", "kind" : "implicit def"}, {"label" : "hexStringGen", "tail" : "(): Gen[Has[Random] with Has[Sized], HexString]", "member" : "zio.test.refined.types.StringInstance.hexStringGen", "link" : "zio\/test\/refined\/types\/all$.html#hexStringGen:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.types.string.HexString]", "kind" : "def"}, {"label" : "trimmedStringGen", "tail" : "(charGen: Gen[R, Char]): Gen[R with Has[Random] with Has[Sized], TrimmedString]", "member" : "zio.test.refined.types.StringInstance.trimmedStringGen", "link" : "zio\/test\/refined\/types\/all$.html#trimmedStringGen[R](charGen:zio.test.Gen[R,Char]):zio.test.Gen[Rwithzio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.types.string.TrimmedString]", "kind" : "def"}, {"label" : "nonEmptyFiniteStringGen", "tail" : "(): FiniteStringPartiallyApplied[N, Size[Closed[shapeless.Nat._1, N]]]", "member" : "zio.test.refined.types.StringInstance.nonEmptyFiniteStringGen", "link" : "zio\/test\/refined\/types\/all$.html#nonEmptyFiniteStringGen[N<:Int]:StringInstance.this.FiniteStringPartiallyApplied[N,eu.timepit.refined.collection.Size[eu.timepit.refined.numeric.Interval.Closed[shapeless.Nat._1,N]]]", "kind" : "def"}, {"label" : "nonEmptyStringGen", "tail" : "(charGen: Gen[R, Char]): Gen[R with Has[Random] with Has[Sized], NonEmptyString]", "member" : "zio.test.refined.types.StringInstance.nonEmptyStringGen", "link" : "zio\/test\/refined\/types\/all$.html#nonEmptyStringGen[R](charGen:zio.test.Gen[R,Char]):zio.test.Gen[Rwithzio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.types.string.NonEmptyString]", "kind" : "def"}, {"label" : "finiteStringGen", "tail" : "(): FiniteStringPartiallyApplied[N, MaxSize[N]]", "member" : "zio.test.refined.types.StringInstance.finiteStringGen", "link" : "zio\/test\/refined\/types\/all$.html#finiteStringGen[N<:Int]:StringInstance.this.FiniteStringPartiallyApplied[N,eu.timepit.refined.collection.MaxSize[N]]", "kind" : "def"}, {"label" : "nonNanDoubleDeriveGen", "tail" : ": DeriveGen[NonNaNDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNanDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNanDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNaNDouble]", "kind" : "implicit val"}, {"label" : "nonNanFloatDeriveGen", "tail" : ": DeriveGen[NonNaNFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNanFloatDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNanFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNaNFloat]", "kind" : "implicit val"}, {"label" : "nonPosBigDecimalDeriveGen", "tail" : ": DeriveGen[NonPosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosBigDecimal]", "kind" : "implicit val"}, {"label" : "negBigDecimalDeriveGen", "tail" : ": DeriveGen[NegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.negBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#negBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegBigDecimal]", "kind" : "implicit val"}, {"label" : "nonNegBigDecimalDeriveGen", "tail" : ": DeriveGen[NonNegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegBigDecimal]", "kind" : "implicit val"}, {"label" : "posBigDecimalDeriveGen", "tail" : ": DeriveGen[PosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.posBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#posBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosBigDecimal]", "kind" : "implicit val"}, {"label" : "nonPosDoubleDeriveGen", "tail" : ": DeriveGen[NonPosDouble]", "member" : "zio.test.refined.types.NumericInstances.nonPosDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosDouble]", "kind" : "implicit val"}, {"label" : "negDoubleDeriveGen", "tail" : ": DeriveGen[NegDouble]", "member" : "zio.test.refined.types.NumericInstances.negDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#negDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegDouble]", "kind" : "implicit val"}, {"label" : "nonNegDoubleDeriveGen", "tail" : ": DeriveGen[NonNegDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNegDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegDouble]", "kind" : "implicit val"}, {"label" : "posDoubleDeriveGen", "tail" : ": DeriveGen[PosDouble]", "member" : "zio.test.refined.types.NumericInstances.posDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#posDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosDouble]", "kind" : "implicit val"}, {"label" : "nonPosFloatDeriveGen", "tail" : ": DeriveGen[NonPosFloat]", "member" : "zio.test.refined.types.NumericInstances.nonPosFloatDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosFloat]", "kind" : "implicit val"}, {"label" : "negFloatDeriveGen", "tail" : ": DeriveGen[NegFloat]", "member" : "zio.test.refined.types.NumericInstances.negFloatDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#negFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegFloat]", "kind" : "implicit val"}, {"label" : "nonNegFloatDeriveGen", "tail" : ": DeriveGen[NonNegFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNegFloatDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegFloat]", "kind" : "implicit val"}, {"label" : "posFloatDeriveGen", "tail" : ": DeriveGen[PosFloat]", "member" : "zio.test.refined.types.NumericInstances.posFloatDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#posFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosFloat]", "kind" : "implicit val"}, {"label" : "nonPosBigIntDeriveGen", "tail" : ": DeriveGen[NonPosBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosBigInt]", "kind" : "implicit val"}, {"label" : "negBigIntDeriveGen", "tail" : ": DeriveGen[NegBigInt]", "member" : "zio.test.refined.types.NumericInstances.negBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#negBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegBigInt]", "kind" : "implicit val"}, {"label" : "nonNegBigIntDeriveGen", "tail" : ": DeriveGen[NonNegBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegBigInt]", "kind" : "implicit val"}, {"label" : "posBigIntDeriveGen", "tail" : ": DeriveGen[PosBigInt]", "member" : "zio.test.refined.types.NumericInstances.posBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#posBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosBigInt]", "kind" : "implicit val"}, {"label" : "nonPosLongDeriveGen", "tail" : ": DeriveGen[NonPosLong]", "member" : "zio.test.refined.types.NumericInstances.nonPosLongDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosLong]", "kind" : "implicit val"}, {"label" : "negLongDeriveGen", "tail" : ": DeriveGen[NegLong]", "member" : "zio.test.refined.types.NumericInstances.negLongDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#negLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegLong]", "kind" : "implicit val"}, {"label" : "nonNegLongDeriveGen", "tail" : ": DeriveGen[NonNegLong]", "member" : "zio.test.refined.types.NumericInstances.nonNegLongDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegLong]", "kind" : "implicit val"}, {"label" : "posLongDeriveGen", "tail" : ": DeriveGen[PosLong]", "member" : "zio.test.refined.types.NumericInstances.posLongDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#posLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosLong]", "kind" : "implicit val"}, {"label" : "nonPosIntDeriveGen", "tail" : ": DeriveGen[NonPosInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosIntDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosInt]", "kind" : "implicit val"}, {"label" : "negIntDeriveGen", "tail" : ": DeriveGen[NegInt]", "member" : "zio.test.refined.types.NumericInstances.negIntDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#negIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegInt]", "kind" : "implicit val"}, {"label" : "nonNegIntDeriveGen", "tail" : ": DeriveGen[NonNegInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegIntDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegInt]", "kind" : "implicit val"}, {"label" : "posIntDeriveGen", "tail" : ": DeriveGen[PosInt]", "member" : "zio.test.refined.types.NumericInstances.posIntDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#posIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosInt]", "kind" : "implicit val"}, {"label" : "nonPosShortDeriveGen", "tail" : ": DeriveGen[NonPosShort]", "member" : "zio.test.refined.types.NumericInstances.nonPosShortDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosShort]", "kind" : "implicit val"}, {"label" : "negShortDeriveGen", "tail" : ": DeriveGen[NegShort]", "member" : "zio.test.refined.types.NumericInstances.negShortDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#negShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegShort]", "kind" : "implicit val"}, {"label" : "nonNegShortDeriveGen", "tail" : ": DeriveGen[NonNegShort]", "member" : "zio.test.refined.types.NumericInstances.nonNegShortDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegShort]", "kind" : "implicit val"}, {"label" : "posShortDeriveGen", "tail" : ": DeriveGen[PosShort]", "member" : "zio.test.refined.types.NumericInstances.posShortDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#posShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosShort]", "kind" : "implicit val"}, {"label" : "nonPosByteDeriveGen", "tail" : ": DeriveGen[NonPosByte]", "member" : "zio.test.refined.types.NumericInstances.nonPosByteDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosByte]", "kind" : "implicit val"}, {"label" : "negByteDeriveGen", "tail" : ": DeriveGen[NegByte]", "member" : "zio.test.refined.types.NumericInstances.negByteDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#negByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegByte]", "kind" : "implicit val"}, {"label" : "nonNegByteDeriveGen", "tail" : ": DeriveGen[NonNegByte]", "member" : "zio.test.refined.types.NumericInstances.nonNegByteDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegByte]", "kind" : "implicit val"}, {"label" : "posByteDeriveGen", "tail" : ": DeriveGen[PosByte]", "member" : "zio.test.refined.types.NumericInstances.posByteDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#posByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosByte]", "kind" : "implicit val"}, {"label" : "nonNanDoubleGen", "tail" : ": Gen[Has[Random], NonNaNDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNanDoubleGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNanDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNaNDouble]", "kind" : "val"}, {"label" : "nonNanFloatGen", "tail" : ": Gen[Has[Random], NonNaNFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNanFloatGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNanFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNaNFloat]", "kind" : "val"}, {"label" : "nonPosBigDecimalGen", "tail" : ": Gen[Has[Random], NonPosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigDecimalGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosBigDecimal]", "kind" : "val"}, {"label" : "negBigDecimalGen", "tail" : ": Gen[Has[Random], NegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.negBigDecimalGen", "link" : "zio\/test\/refined\/types\/all$.html#negBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegBigDecimal]", "kind" : "val"}, {"label" : "nonNegBigDecimalGen", "tail" : ": Gen[Has[Random], NonNegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigDecimalGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegBigDecimal]", "kind" : "val"}, {"label" : "posBigDecimalGen", "tail" : ": Gen[Has[Random], PosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.posBigDecimalGen", "link" : "zio\/test\/refined\/types\/all$.html#posBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosBigDecimal]", "kind" : "val"}, {"label" : "nonPosDoubleGen", "tail" : ": Gen[Has[Random], NonPosDouble]", "member" : "zio.test.refined.types.NumericInstances.nonPosDoubleGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosDouble]", "kind" : "val"}, {"label" : "negDoubleGen", "tail" : ": Gen[Has[Random], NegDouble]", "member" : "zio.test.refined.types.NumericInstances.negDoubleGen", "link" : "zio\/test\/refined\/types\/all$.html#negDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegDouble]", "kind" : "val"}, {"label" : "nonNegDoubleGen", "tail" : ": Gen[Has[Random], NonNegDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNegDoubleGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegDouble]", "kind" : "val"}, {"label" : "posDoubleGen", "tail" : ": Gen[Has[Random], PosDouble]", "member" : "zio.test.refined.types.NumericInstances.posDoubleGen", "link" : "zio\/test\/refined\/types\/all$.html#posDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosDouble]", "kind" : "val"}, {"label" : "nonPosFloatGen", "tail" : ": Gen[Has[Random], NonPosFloat]", "member" : "zio.test.refined.types.NumericInstances.nonPosFloatGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosFloat]", "kind" : "val"}, {"label" : "negFloatGen", "tail" : ": Gen[Has[Random], NegFloat]", "member" : "zio.test.refined.types.NumericInstances.negFloatGen", "link" : "zio\/test\/refined\/types\/all$.html#negFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegFloat]", "kind" : "val"}, {"label" : "nonNegFloatGen", "tail" : ": Gen[Has[Random], NonNegFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNegFloatGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegFloat]", "kind" : "val"}, {"label" : "posFloatGen", "tail" : ": Gen[Has[Random], PosFloat]", "member" : "zio.test.refined.types.NumericInstances.posFloatGen", "link" : "zio\/test\/refined\/types\/all$.html#posFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosFloat]", "kind" : "val"}, {"label" : "nonPosBigIntGen", "tail" : ": Gen[Has[Random], NonPosBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigIntGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosBigInt]", "kind" : "val"}, {"label" : "negBigIntGen", "tail" : ": Gen[Has[Random], NegBigInt]", "member" : "zio.test.refined.types.NumericInstances.negBigIntGen", "link" : "zio\/test\/refined\/types\/all$.html#negBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegBigInt]", "kind" : "val"}, {"label" : "nonNegBigIntGen", "tail" : ": Gen[Has[Random], NonNegBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigIntGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegBigInt]", "kind" : "val"}, {"label" : "posBigIntGen", "tail" : ": Gen[Has[Random], PosBigInt]", "member" : "zio.test.refined.types.NumericInstances.posBigIntGen", "link" : "zio\/test\/refined\/types\/all$.html#posBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosBigInt]", "kind" : "val"}, {"label" : "nonPosLongGen", "tail" : ": Gen[Has[Random], NonPosLong]", "member" : "zio.test.refined.types.NumericInstances.nonPosLongGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosLong]", "kind" : "val"}, {"label" : "negLongGen", "tail" : ": Gen[Has[Random], NegLong]", "member" : "zio.test.refined.types.NumericInstances.negLongGen", "link" : "zio\/test\/refined\/types\/all$.html#negLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegLong]", "kind" : "val"}, {"label" : "nonNegLongGen", "tail" : ": Gen[Has[Random], NonNegLong]", "member" : "zio.test.refined.types.NumericInstances.nonNegLongGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegLong]", "kind" : "val"}, {"label" : "posLongGen", "tail" : ": Gen[Has[Random], PosLong]", "member" : "zio.test.refined.types.NumericInstances.posLongGen", "link" : "zio\/test\/refined\/types\/all$.html#posLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosLong]", "kind" : "val"}, {"label" : "nonPosIntGen", "tail" : ": Gen[Has[Random], NonPosInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosIntGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosInt]", "kind" : "val"}, {"label" : "negIntGen", "tail" : ": Gen[Has[Random], NegInt]", "member" : "zio.test.refined.types.NumericInstances.negIntGen", "link" : "zio\/test\/refined\/types\/all$.html#negIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegInt]", "kind" : "val"}, {"label" : "nonNegIntGen", "tail" : ": Gen[Has[Random], NonNegInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegIntGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegInt]", "kind" : "val"}, {"label" : "posIntGen", "tail" : ": Gen[Has[Random], PosInt]", "member" : "zio.test.refined.types.NumericInstances.posIntGen", "link" : "zio\/test\/refined\/types\/all$.html#posIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosInt]", "kind" : "val"}, {"label" : "nonPosShortGen", "tail" : ": Gen[Has[Random], NonPosShort]", "member" : "zio.test.refined.types.NumericInstances.nonPosShortGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosShort]", "kind" : "val"}, {"label" : "negShortGen", "tail" : ": Gen[Has[Random], NegShort]", "member" : "zio.test.refined.types.NumericInstances.negShortGen", "link" : "zio\/test\/refined\/types\/all$.html#negShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegShort]", "kind" : "val"}, {"label" : "nonNegShortGen", "tail" : ": Gen[Has[Random], NonNegShort]", "member" : "zio.test.refined.types.NumericInstances.nonNegShortGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegShort]", "kind" : "val"}, {"label" : "posShortGen", "tail" : ": Gen[Has[Random], PosShort]", "member" : "zio.test.refined.types.NumericInstances.posShortGen", "link" : "zio\/test\/refined\/types\/all$.html#posShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosShort]", "kind" : "val"}, {"label" : "nonPosByteGen", "tail" : ": Gen[Has[Random], NonPosByte]", "member" : "zio.test.refined.types.NumericInstances.nonPosByteGen", "link" : "zio\/test\/refined\/types\/all$.html#nonPosByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosByte]", "kind" : "val"}, {"label" : "negByteGen", "tail" : ": Gen[Has[Random], NegByte]", "member" : "zio.test.refined.types.NumericInstances.negByteGen", "link" : "zio\/test\/refined\/types\/all$.html#negByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegByte]", "kind" : "val"}, {"label" : "nonNegByteGen", "tail" : ": Gen[Has[Random], NonNegByte]", "member" : "zio.test.refined.types.NumericInstances.nonNegByteGen", "link" : "zio\/test\/refined\/types\/all$.html#nonNegByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegByte]", "kind" : "val"}, {"label" : "posByteGen", "tail" : ": Gen[Has[Random], PosByte]", "member" : "zio.test.refined.types.NumericInstances.posByteGen", "link" : "zio\/test\/refined\/types\/all$.html#posByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosByte]", "kind" : "val"}, {"label" : "privateNetworkDeriveGen", "tail" : ": DeriveGen[PrivateNetwork]", "member" : "zio.test.refined.types.NetInstances.privateNetworkDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#privateNetworkDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.PrivateNetwork]", "kind" : "implicit val"}, {"label" : "rfc2544BenchmarkDeriveGen", "tail" : ": DeriveGen[Rfc2544Benchmark]", "member" : "zio.test.refined.types.NetInstances.rfc2544BenchmarkDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc2544BenchmarkDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc2544Benchmark]", "kind" : "implicit val"}, {"label" : "rfc3927LocalLinkDeriveGen", "tail" : ": DeriveGen[Rfc3927LocalLink]", "member" : "zio.test.refined.types.NetInstances.rfc3927LocalLinkDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc3927LocalLinkDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc3927LocalLink]", "kind" : "implicit val"}, {"label" : "rfc5737TestnetDeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet]", "member" : "zio.test.refined.types.NetInstances.rfc5737TestnetDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc5737TestnetDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet]", "kind" : "implicit val"}, {"label" : "rfc5737Testnet3DeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet3]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet3DeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc5737Testnet3DeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet3]", "kind" : "implicit val"}, {"label" : "rfc5737Testnet2DeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet2]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet2DeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc5737Testnet2DeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet2]", "kind" : "implicit val"}, {"label" : "rfc5737Testnet1DeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet1]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet1DeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc5737Testnet1DeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet1]", "kind" : "implicit val"}, {"label" : "rfc1918PrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918Private]", "member" : "zio.test.refined.types.NetInstances.rfc1918PrivateDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc1918PrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918Private]", "kind" : "implicit val"}, {"label" : "rfc1918ClassCPrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918ClassCPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassCPrivateDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc1918ClassCPrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918ClassCPrivate]", "kind" : "implicit val"}, {"label" : "rfc1918ClassBPrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918ClassBPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassBPrivateDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc1918ClassBPrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918ClassBPrivate]", "kind" : "implicit val"}, {"label" : "rfc1918ClassAPrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918ClassAPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassAPrivateDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc1918ClassAPrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918ClassAPrivate]", "kind" : "implicit val"}, {"label" : "nonSystemPortNumberDeriveGen", "tail" : ": DeriveGen[NonSystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.nonSystemPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#nonSystemPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.NonSystemPortNumber]", "kind" : "implicit val"}, {"label" : "dynamicPortNumberDeriveGen", "tail" : ": DeriveGen[DynamicPortNumber]", "member" : "zio.test.refined.types.NetInstances.dynamicPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#dynamicPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.DynamicPortNumber]", "kind" : "implicit val"}, {"label" : "userPortNumberDeriveGen", "tail" : ": DeriveGen[UserPortNumber]", "member" : "zio.test.refined.types.NetInstances.userPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#userPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.UserPortNumber]", "kind" : "implicit val"}, {"label" : "systemPortNumberDeriveGen", "tail" : ": DeriveGen[SystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.systemPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#systemPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.SystemPortNumber]", "kind" : "implicit val"}, {"label" : "portNumberDeriveGen", "tail" : ": DeriveGen[PortNumber]", "member" : "zio.test.refined.types.NetInstances.portNumberDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#portNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.PortNumber]", "kind" : "implicit val"}, {"label" : "privateNetworkGen", "tail" : ": Gen[Has[Random], PrivateNetwork]", "member" : "zio.test.refined.types.NetInstances.privateNetworkGen", "link" : "zio\/test\/refined\/types\/all$.html#privateNetworkGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.PrivateNetwork]", "kind" : "val"}, {"label" : "rfc2544BenchmarkGen", "tail" : ": Gen[Has[Random], Rfc2544Benchmark]", "member" : "zio.test.refined.types.NetInstances.rfc2544BenchmarkGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc2544BenchmarkGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc2544Benchmark]", "kind" : "val"}, {"label" : "rfc3927LocalLinkGen", "tail" : ": Gen[Has[Random], Rfc3927LocalLink]", "member" : "zio.test.refined.types.NetInstances.rfc3927LocalLinkGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc3927LocalLinkGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc3927LocalLink]", "kind" : "val"}, {"label" : "rfc5737TestnetGen", "tail" : ": Gen[Has[Random], Rfc5737Testnet]", "member" : "zio.test.refined.types.NetInstances.rfc5737TestnetGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc5737TestnetGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet]", "kind" : "val"}, {"label" : "rfc5737Testnet3Gen", "tail" : ": Gen[Has[Random], Rfc5737Testnet3]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet3Gen", "link" : "zio\/test\/refined\/types\/all$.html#rfc5737Testnet3Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet3]", "kind" : "val"}, {"label" : "rfc5737Testnet2Gen", "tail" : ": Gen[Has[Random], Rfc5737Testnet2]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet2Gen", "link" : "zio\/test\/refined\/types\/all$.html#rfc5737Testnet2Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet2]", "kind" : "val"}, {"label" : "rfc5737Testnet1Gen", "tail" : ": Gen[Has[Random], Rfc5737Testnet1]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet1Gen", "link" : "zio\/test\/refined\/types\/all$.html#rfc5737Testnet1Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet1]", "kind" : "val"}, {"label" : "rfc1918PrivateGen", "tail" : ": Gen[Has[Random], Rfc1918Private]", "member" : "zio.test.refined.types.NetInstances.rfc1918PrivateGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc1918PrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918Private]", "kind" : "val"}, {"label" : "rfc1918ClassCPrivateGen", "tail" : ": Gen[Has[Random], Rfc1918ClassCPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassCPrivateGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc1918ClassCPrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918ClassCPrivate]", "kind" : "val"}, {"label" : "rfc1918ClassBPrivateGen", "tail" : ": Gen[Has[Random], Rfc1918ClassBPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassBPrivateGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc1918ClassBPrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918ClassBPrivate]", "kind" : "val"}, {"label" : "rfc1918ClassAPrivateGen", "tail" : ": Gen[Has[Random], Rfc1918ClassAPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassAPrivateGen", "link" : "zio\/test\/refined\/types\/all$.html#rfc1918ClassAPrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918ClassAPrivate]", "kind" : "val"}, {"label" : "nonSystemPortNumberGen", "tail" : ": Gen[Has[Random], NonSystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.nonSystemPortNumberGen", "link" : "zio\/test\/refined\/types\/all$.html#nonSystemPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.NonSystemPortNumber]", "kind" : "val"}, {"label" : "dynamicPortNumberGen", "tail" : ": Gen[Has[Random], DynamicPortNumber]", "member" : "zio.test.refined.types.NetInstances.dynamicPortNumberGen", "link" : "zio\/test\/refined\/types\/all$.html#dynamicPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.DynamicPortNumber]", "kind" : "val"}, {"label" : "userPortNumberGen", "tail" : ": Gen[Has[Random], UserPortNumber]", "member" : "zio.test.refined.types.NetInstances.userPortNumberGen", "link" : "zio\/test\/refined\/types\/all$.html#userPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.UserPortNumber]", "kind" : "val"}, {"label" : "systemPortNumberGen", "tail" : ": Gen[Has[Random], SystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.systemPortNumberGen", "link" : "zio\/test\/refined\/types\/all$.html#systemPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.SystemPortNumber]", "kind" : "val"}, {"label" : "portNumberGen", "tail" : ": Gen[Has[Random], PortNumber]", "member" : "zio.test.refined.types.NetInstances.portNumberGen", "link" : "zio\/test\/refined\/types\/all$.html#portNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.PortNumber]", "kind" : "val"}, {"label" : "sha512Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA512]", "member" : "zio.test.refined.types.DigitInstances.sha512Arbitrary", "link" : "zio\/test\/refined\/types\/all$.html#sha512Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA512]", "kind" : "implicit val"}, {"label" : "sha384Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA384]", "member" : "zio.test.refined.types.DigitInstances.sha384Arbitrary", "link" : "zio\/test\/refined\/types\/all$.html#sha384Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA384]", "kind" : "implicit val"}, {"label" : "sha256Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA256]", "member" : "zio.test.refined.types.DigitInstances.sha256Arbitrary", "link" : "zio\/test\/refined\/types\/all$.html#sha256Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA256]", "kind" : "implicit val"}, {"label" : "sha224Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA224]", "member" : "zio.test.refined.types.DigitInstances.sha224Arbitrary", "link" : "zio\/test\/refined\/types\/all$.html#sha224Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA224]", "kind" : "implicit val"}, {"label" : "sha1Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA1]", "member" : "zio.test.refined.types.DigitInstances.sha1Arbitrary", "link" : "zio\/test\/refined\/types\/all$.html#sha1Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA1]", "kind" : "implicit val"}, {"label" : "md5Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.MD5]", "member" : "zio.test.refined.types.DigitInstances.md5Arbitrary", "link" : "zio\/test\/refined\/types\/all$.html#md5Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.MD5]", "kind" : "implicit val"}, {"label" : "sha512Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA512]", "member" : "zio.test.refined.types.DigitInstances.sha512Gen", "link" : "zio\/test\/refined\/types\/all$.html#sha512Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA512]", "kind" : "val"}, {"label" : "sha384Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA384]", "member" : "zio.test.refined.types.DigitInstances.sha384Gen", "link" : "zio\/test\/refined\/types\/all$.html#sha384Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA384]", "kind" : "val"}, {"label" : "sha256Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA256]", "member" : "zio.test.refined.types.DigitInstances.sha256Gen", "link" : "zio\/test\/refined\/types\/all$.html#sha256Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA256]", "kind" : "val"}, {"label" : "sha224Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA224]", "member" : "zio.test.refined.types.DigitInstances.sha224Gen", "link" : "zio\/test\/refined\/types\/all$.html#sha224Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA224]", "kind" : "val"}, {"label" : "sha1Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA1]", "member" : "zio.test.refined.types.DigitInstances.sha1Gen", "link" : "zio\/test\/refined\/types\/all$.html#sha1Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA1]", "kind" : "val"}, {"label" : "md5Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.MD5]", "member" : "zio.test.refined.types.DigitInstances.md5Gen", "link" : "zio\/test\/refined\/types\/all$.html#md5Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.MD5]", "kind" : "val"}, {"label" : "upperCaseCharDeriveGen", "tail" : ": DeriveGen[UpperCaseChar]", "member" : "zio.test.refined.types.CharInstances.upperCaseCharDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#upperCaseCharDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.char.UpperCaseChar]", "kind" : "implicit val"}, {"label" : "lowerCaseCharDeriveGen", "tail" : ": DeriveGen[LowerCaseChar]", "member" : "zio.test.refined.types.CharInstances.lowerCaseCharDeriveGen", "link" : "zio\/test\/refined\/types\/all$.html#lowerCaseCharDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.char.LowerCaseChar]", "kind" : "implicit val"}, {"label" : "upperCaseCharGen", "tail" : ": Gen[Has[Random], UpperCaseChar]", "member" : "zio.test.refined.types.CharInstances.upperCaseCharGen", "link" : "zio\/test\/refined\/types\/all$.html#upperCaseCharGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.char.UpperCaseChar]", "kind" : "val"}, {"label" : "lowerCaseCharGen", "tail" : ": Gen[Has[Random], LowerCaseChar]", "member" : "zio.test.refined.types.CharInstances.lowerCaseCharGen", "link" : "zio\/test\/refined\/types\/all$.html#lowerCaseCharGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.char.LowerCaseChar]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/types\/all$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/types\/all$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/types\/all$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/types\/all$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/types\/all$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/types\/all$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/types\/all$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/all$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/all$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/all$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/types\/all$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/types\/all$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/types\/all$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/types\/all$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/types\/all$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/types\/all$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/types\/all$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/types\/all$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/types\/all$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.refined.types.AllTypesInstances", "trait" : "zio\/test\/refined\/types\/AllTypesInstances.html", "kind" : "trait", "members_trait" : [{"label" : "FiniteStringPartiallyApplied", "tail" : "", "member" : "zio.test.refined.types.StringInstance.FiniteStringPartiallyApplied", "link" : "zio\/test\/refined\/types\/StringInstance.html#FiniteStringPartiallyApplied[N<:Int,P]extendsAnyRef", "kind" : "class"}, {"label" : "millsDeriveGen", "tail" : "(): DeriveGen[Millis]", "member" : "zio.test.refined.types.TimeInstances.millsDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#millsDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Millis]", "kind" : "implicit def"}, {"label" : "secondDeriveGen", "tail" : "(): DeriveGen[Second]", "member" : "zio.test.refined.types.TimeInstances.secondDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#secondDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Second]", "kind" : "implicit def"}, {"label" : "minuteDeriveGen", "tail" : "(): DeriveGen[Minute]", "member" : "zio.test.refined.types.TimeInstances.minuteDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#minuteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Minute]", "kind" : "implicit def"}, {"label" : "hourDeriveGen", "tail" : "(): DeriveGen[Hour]", "member" : "zio.test.refined.types.TimeInstances.hourDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#hourDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Hour]", "kind" : "implicit def"}, {"label" : "dayDeriveGen", "tail" : "(): DeriveGen[Day]", "member" : "zio.test.refined.types.TimeInstances.dayDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#dayDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Day]", "kind" : "implicit def"}, {"label" : "monthDeriveGen", "tail" : "(): DeriveGen[Month]", "member" : "zio.test.refined.types.TimeInstances.monthDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#monthDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Month]", "kind" : "implicit def"}, {"label" : "millsGen", "tail" : ": Gen[Has[Random], Millis]", "member" : "zio.test.refined.types.TimeInstances.millsGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#millsGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Millis]", "kind" : "val"}, {"label" : "secondGen", "tail" : ": Gen[Has[Random], Second]", "member" : "zio.test.refined.types.TimeInstances.secondGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#secondGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Second]", "kind" : "val"}, {"label" : "minuteGen", "tail" : ": Gen[Has[Random], Minute]", "member" : "zio.test.refined.types.TimeInstances.minuteGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#minuteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Minute]", "kind" : "val"}, {"label" : "hourGen", "tail" : ": Gen[Has[Random], Hour]", "member" : "zio.test.refined.types.TimeInstances.hourGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#hourGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Hour]", "kind" : "val"}, {"label" : "dayGen", "tail" : ": Gen[Has[Random], Day]", "member" : "zio.test.refined.types.TimeInstances.dayGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#dayGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Day]", "kind" : "val"}, {"label" : "monthGen", "tail" : ": Gen[Has[Random], Month]", "member" : "zio.test.refined.types.TimeInstances.monthGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#monthGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Month]", "kind" : "val"}, {"label" : "hexStringDeriveGen", "tail" : "(): DeriveGen[HexString]", "member" : "zio.test.refined.types.StringInstance.hexStringDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#hexStringDeriveGen[R]:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.HexString]", "kind" : "implicit def"}, {"label" : "trimmedStringDeriveGen", "tail" : "(charGen: DeriveGen[Char]): DeriveGen[TrimmedString]", "member" : "zio.test.refined.types.StringInstance.trimmedStringDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#trimmedStringDeriveGen[R](implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.TrimmedString]", "kind" : "implicit def"}, {"label" : "nonEmptyFiniteStringDeriveGen", "tail" : "(ws: Aux[N], charGen: DeriveGen[Char]): DeriveGen[NonEmptyFiniteString[N]]", "member" : "zio.test.refined.types.StringInstance.nonEmptyFiniteStringDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonEmptyFiniteStringDeriveGen[N<:Int](implicitws:shapeless.Witness.Aux[N],implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.NonEmptyFiniteString[N]]", "kind" : "implicit def"}, {"label" : "nonEmptyStringDeriveGen", "tail" : "(charGen: DeriveGen[Char]): DeriveGen[NonEmptyString]", "member" : "zio.test.refined.types.StringInstance.nonEmptyStringDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonEmptyStringDeriveGen[R](implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.NonEmptyString]", "kind" : "implicit def"}, {"label" : "finiteStringDeriveGen", "tail" : "(ws: Aux[N], charGen: DeriveGen[Char]): DeriveGen[FiniteString[N]]", "member" : "zio.test.refined.types.StringInstance.finiteStringDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#finiteStringDeriveGen[N<:Int](implicitws:shapeless.Witness.Aux[N],implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.FiniteString[N]]", "kind" : "implicit def"}, {"label" : "hexStringGen", "tail" : "(): Gen[Has[Random] with Has[Sized], HexString]", "member" : "zio.test.refined.types.StringInstance.hexStringGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#hexStringGen:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.types.string.HexString]", "kind" : "def"}, {"label" : "trimmedStringGen", "tail" : "(charGen: Gen[R, Char]): Gen[R with Has[Random] with Has[Sized], TrimmedString]", "member" : "zio.test.refined.types.StringInstance.trimmedStringGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#trimmedStringGen[R](charGen:zio.test.Gen[R,Char]):zio.test.Gen[Rwithzio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.types.string.TrimmedString]", "kind" : "def"}, {"label" : "nonEmptyFiniteStringGen", "tail" : "(): FiniteStringPartiallyApplied[N, Size[Closed[shapeless.Nat._1, N]]]", "member" : "zio.test.refined.types.StringInstance.nonEmptyFiniteStringGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonEmptyFiniteStringGen[N<:Int]:StringInstance.this.FiniteStringPartiallyApplied[N,eu.timepit.refined.collection.Size[eu.timepit.refined.numeric.Interval.Closed[shapeless.Nat._1,N]]]", "kind" : "def"}, {"label" : "nonEmptyStringGen", "tail" : "(charGen: Gen[R, Char]): Gen[R with Has[Random] with Has[Sized], NonEmptyString]", "member" : "zio.test.refined.types.StringInstance.nonEmptyStringGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonEmptyStringGen[R](charGen:zio.test.Gen[R,Char]):zio.test.Gen[Rwithzio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.types.string.NonEmptyString]", "kind" : "def"}, {"label" : "finiteStringGen", "tail" : "(): FiniteStringPartiallyApplied[N, MaxSize[N]]", "member" : "zio.test.refined.types.StringInstance.finiteStringGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#finiteStringGen[N<:Int]:StringInstance.this.FiniteStringPartiallyApplied[N,eu.timepit.refined.collection.MaxSize[N]]", "kind" : "def"}, {"label" : "nonNanDoubleDeriveGen", "tail" : ": DeriveGen[NonNaNDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNanDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNanDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNaNDouble]", "kind" : "implicit val"}, {"label" : "nonNanFloatDeriveGen", "tail" : ": DeriveGen[NonNaNFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNanFloatDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNanFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNaNFloat]", "kind" : "implicit val"}, {"label" : "nonPosBigDecimalDeriveGen", "tail" : ": DeriveGen[NonPosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosBigDecimal]", "kind" : "implicit val"}, {"label" : "negBigDecimalDeriveGen", "tail" : ": DeriveGen[NegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.negBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegBigDecimal]", "kind" : "implicit val"}, {"label" : "nonNegBigDecimalDeriveGen", "tail" : ": DeriveGen[NonNegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegBigDecimal]", "kind" : "implicit val"}, {"label" : "posBigDecimalDeriveGen", "tail" : ": DeriveGen[PosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.posBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosBigDecimal]", "kind" : "implicit val"}, {"label" : "nonPosDoubleDeriveGen", "tail" : ": DeriveGen[NonPosDouble]", "member" : "zio.test.refined.types.NumericInstances.nonPosDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosDouble]", "kind" : "implicit val"}, {"label" : "negDoubleDeriveGen", "tail" : ": DeriveGen[NegDouble]", "member" : "zio.test.refined.types.NumericInstances.negDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegDouble]", "kind" : "implicit val"}, {"label" : "nonNegDoubleDeriveGen", "tail" : ": DeriveGen[NonNegDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNegDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegDouble]", "kind" : "implicit val"}, {"label" : "posDoubleDeriveGen", "tail" : ": DeriveGen[PosDouble]", "member" : "zio.test.refined.types.NumericInstances.posDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosDouble]", "kind" : "implicit val"}, {"label" : "nonPosFloatDeriveGen", "tail" : ": DeriveGen[NonPosFloat]", "member" : "zio.test.refined.types.NumericInstances.nonPosFloatDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosFloat]", "kind" : "implicit val"}, {"label" : "negFloatDeriveGen", "tail" : ": DeriveGen[NegFloat]", "member" : "zio.test.refined.types.NumericInstances.negFloatDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegFloat]", "kind" : "implicit val"}, {"label" : "nonNegFloatDeriveGen", "tail" : ": DeriveGen[NonNegFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNegFloatDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegFloat]", "kind" : "implicit val"}, {"label" : "posFloatDeriveGen", "tail" : ": DeriveGen[PosFloat]", "member" : "zio.test.refined.types.NumericInstances.posFloatDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosFloat]", "kind" : "implicit val"}, {"label" : "nonPosBigIntDeriveGen", "tail" : ": DeriveGen[NonPosBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosBigInt]", "kind" : "implicit val"}, {"label" : "negBigIntDeriveGen", "tail" : ": DeriveGen[NegBigInt]", "member" : "zio.test.refined.types.NumericInstances.negBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegBigInt]", "kind" : "implicit val"}, {"label" : "nonNegBigIntDeriveGen", "tail" : ": DeriveGen[NonNegBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegBigInt]", "kind" : "implicit val"}, {"label" : "posBigIntDeriveGen", "tail" : ": DeriveGen[PosBigInt]", "member" : "zio.test.refined.types.NumericInstances.posBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosBigInt]", "kind" : "implicit val"}, {"label" : "nonPosLongDeriveGen", "tail" : ": DeriveGen[NonPosLong]", "member" : "zio.test.refined.types.NumericInstances.nonPosLongDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosLong]", "kind" : "implicit val"}, {"label" : "negLongDeriveGen", "tail" : ": DeriveGen[NegLong]", "member" : "zio.test.refined.types.NumericInstances.negLongDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegLong]", "kind" : "implicit val"}, {"label" : "nonNegLongDeriveGen", "tail" : ": DeriveGen[NonNegLong]", "member" : "zio.test.refined.types.NumericInstances.nonNegLongDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegLong]", "kind" : "implicit val"}, {"label" : "posLongDeriveGen", "tail" : ": DeriveGen[PosLong]", "member" : "zio.test.refined.types.NumericInstances.posLongDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosLong]", "kind" : "implicit val"}, {"label" : "nonPosIntDeriveGen", "tail" : ": DeriveGen[NonPosInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosIntDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosInt]", "kind" : "implicit val"}, {"label" : "negIntDeriveGen", "tail" : ": DeriveGen[NegInt]", "member" : "zio.test.refined.types.NumericInstances.negIntDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegInt]", "kind" : "implicit val"}, {"label" : "nonNegIntDeriveGen", "tail" : ": DeriveGen[NonNegInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegIntDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegInt]", "kind" : "implicit val"}, {"label" : "posIntDeriveGen", "tail" : ": DeriveGen[PosInt]", "member" : "zio.test.refined.types.NumericInstances.posIntDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosInt]", "kind" : "implicit val"}, {"label" : "nonPosShortDeriveGen", "tail" : ": DeriveGen[NonPosShort]", "member" : "zio.test.refined.types.NumericInstances.nonPosShortDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosShort]", "kind" : "implicit val"}, {"label" : "negShortDeriveGen", "tail" : ": DeriveGen[NegShort]", "member" : "zio.test.refined.types.NumericInstances.negShortDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegShort]", "kind" : "implicit val"}, {"label" : "nonNegShortDeriveGen", "tail" : ": DeriveGen[NonNegShort]", "member" : "zio.test.refined.types.NumericInstances.nonNegShortDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegShort]", "kind" : "implicit val"}, {"label" : "posShortDeriveGen", "tail" : ": DeriveGen[PosShort]", "member" : "zio.test.refined.types.NumericInstances.posShortDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosShort]", "kind" : "implicit val"}, {"label" : "nonPosByteDeriveGen", "tail" : ": DeriveGen[NonPosByte]", "member" : "zio.test.refined.types.NumericInstances.nonPosByteDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosByte]", "kind" : "implicit val"}, {"label" : "negByteDeriveGen", "tail" : ": DeriveGen[NegByte]", "member" : "zio.test.refined.types.NumericInstances.negByteDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegByte]", "kind" : "implicit val"}, {"label" : "nonNegByteDeriveGen", "tail" : ": DeriveGen[NonNegByte]", "member" : "zio.test.refined.types.NumericInstances.nonNegByteDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegByte]", "kind" : "implicit val"}, {"label" : "posByteDeriveGen", "tail" : ": DeriveGen[PosByte]", "member" : "zio.test.refined.types.NumericInstances.posByteDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosByte]", "kind" : "implicit val"}, {"label" : "nonNanDoubleGen", "tail" : ": Gen[Has[Random], NonNaNDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNanDoubleGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNanDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNaNDouble]", "kind" : "val"}, {"label" : "nonNanFloatGen", "tail" : ": Gen[Has[Random], NonNaNFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNanFloatGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNanFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNaNFloat]", "kind" : "val"}, {"label" : "nonPosBigDecimalGen", "tail" : ": Gen[Has[Random], NonPosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigDecimalGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosBigDecimal]", "kind" : "val"}, {"label" : "negBigDecimalGen", "tail" : ": Gen[Has[Random], NegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.negBigDecimalGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegBigDecimal]", "kind" : "val"}, {"label" : "nonNegBigDecimalGen", "tail" : ": Gen[Has[Random], NonNegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigDecimalGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegBigDecimal]", "kind" : "val"}, {"label" : "posBigDecimalGen", "tail" : ": Gen[Has[Random], PosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.posBigDecimalGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosBigDecimal]", "kind" : "val"}, {"label" : "nonPosDoubleGen", "tail" : ": Gen[Has[Random], NonPosDouble]", "member" : "zio.test.refined.types.NumericInstances.nonPosDoubleGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosDouble]", "kind" : "val"}, {"label" : "negDoubleGen", "tail" : ": Gen[Has[Random], NegDouble]", "member" : "zio.test.refined.types.NumericInstances.negDoubleGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegDouble]", "kind" : "val"}, {"label" : "nonNegDoubleGen", "tail" : ": Gen[Has[Random], NonNegDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNegDoubleGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegDouble]", "kind" : "val"}, {"label" : "posDoubleGen", "tail" : ": Gen[Has[Random], PosDouble]", "member" : "zio.test.refined.types.NumericInstances.posDoubleGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosDouble]", "kind" : "val"}, {"label" : "nonPosFloatGen", "tail" : ": Gen[Has[Random], NonPosFloat]", "member" : "zio.test.refined.types.NumericInstances.nonPosFloatGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosFloat]", "kind" : "val"}, {"label" : "negFloatGen", "tail" : ": Gen[Has[Random], NegFloat]", "member" : "zio.test.refined.types.NumericInstances.negFloatGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegFloat]", "kind" : "val"}, {"label" : "nonNegFloatGen", "tail" : ": Gen[Has[Random], NonNegFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNegFloatGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegFloat]", "kind" : "val"}, {"label" : "posFloatGen", "tail" : ": Gen[Has[Random], PosFloat]", "member" : "zio.test.refined.types.NumericInstances.posFloatGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosFloat]", "kind" : "val"}, {"label" : "nonPosBigIntGen", "tail" : ": Gen[Has[Random], NonPosBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigIntGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosBigInt]", "kind" : "val"}, {"label" : "negBigIntGen", "tail" : ": Gen[Has[Random], NegBigInt]", "member" : "zio.test.refined.types.NumericInstances.negBigIntGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegBigInt]", "kind" : "val"}, {"label" : "nonNegBigIntGen", "tail" : ": Gen[Has[Random], NonNegBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigIntGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegBigInt]", "kind" : "val"}, {"label" : "posBigIntGen", "tail" : ": Gen[Has[Random], PosBigInt]", "member" : "zio.test.refined.types.NumericInstances.posBigIntGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosBigInt]", "kind" : "val"}, {"label" : "nonPosLongGen", "tail" : ": Gen[Has[Random], NonPosLong]", "member" : "zio.test.refined.types.NumericInstances.nonPosLongGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosLong]", "kind" : "val"}, {"label" : "negLongGen", "tail" : ": Gen[Has[Random], NegLong]", "member" : "zio.test.refined.types.NumericInstances.negLongGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegLong]", "kind" : "val"}, {"label" : "nonNegLongGen", "tail" : ": Gen[Has[Random], NonNegLong]", "member" : "zio.test.refined.types.NumericInstances.nonNegLongGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegLong]", "kind" : "val"}, {"label" : "posLongGen", "tail" : ": Gen[Has[Random], PosLong]", "member" : "zio.test.refined.types.NumericInstances.posLongGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosLong]", "kind" : "val"}, {"label" : "nonPosIntGen", "tail" : ": Gen[Has[Random], NonPosInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosIntGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosInt]", "kind" : "val"}, {"label" : "negIntGen", "tail" : ": Gen[Has[Random], NegInt]", "member" : "zio.test.refined.types.NumericInstances.negIntGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegInt]", "kind" : "val"}, {"label" : "nonNegIntGen", "tail" : ": Gen[Has[Random], NonNegInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegIntGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegInt]", "kind" : "val"}, {"label" : "posIntGen", "tail" : ": Gen[Has[Random], PosInt]", "member" : "zio.test.refined.types.NumericInstances.posIntGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosInt]", "kind" : "val"}, {"label" : "nonPosShortGen", "tail" : ": Gen[Has[Random], NonPosShort]", "member" : "zio.test.refined.types.NumericInstances.nonPosShortGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosShort]", "kind" : "val"}, {"label" : "negShortGen", "tail" : ": Gen[Has[Random], NegShort]", "member" : "zio.test.refined.types.NumericInstances.negShortGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegShort]", "kind" : "val"}, {"label" : "nonNegShortGen", "tail" : ": Gen[Has[Random], NonNegShort]", "member" : "zio.test.refined.types.NumericInstances.nonNegShortGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegShort]", "kind" : "val"}, {"label" : "posShortGen", "tail" : ": Gen[Has[Random], PosShort]", "member" : "zio.test.refined.types.NumericInstances.posShortGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosShort]", "kind" : "val"}, {"label" : "nonPosByteGen", "tail" : ": Gen[Has[Random], NonPosByte]", "member" : "zio.test.refined.types.NumericInstances.nonPosByteGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonPosByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosByte]", "kind" : "val"}, {"label" : "negByteGen", "tail" : ": Gen[Has[Random], NegByte]", "member" : "zio.test.refined.types.NumericInstances.negByteGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#negByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegByte]", "kind" : "val"}, {"label" : "nonNegByteGen", "tail" : ": Gen[Has[Random], NonNegByte]", "member" : "zio.test.refined.types.NumericInstances.nonNegByteGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonNegByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegByte]", "kind" : "val"}, {"label" : "posByteGen", "tail" : ": Gen[Has[Random], PosByte]", "member" : "zio.test.refined.types.NumericInstances.posByteGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#posByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosByte]", "kind" : "val"}, {"label" : "privateNetworkDeriveGen", "tail" : ": DeriveGen[PrivateNetwork]", "member" : "zio.test.refined.types.NetInstances.privateNetworkDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#privateNetworkDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.PrivateNetwork]", "kind" : "implicit val"}, {"label" : "rfc2544BenchmarkDeriveGen", "tail" : ": DeriveGen[Rfc2544Benchmark]", "member" : "zio.test.refined.types.NetInstances.rfc2544BenchmarkDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc2544BenchmarkDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc2544Benchmark]", "kind" : "implicit val"}, {"label" : "rfc3927LocalLinkDeriveGen", "tail" : ": DeriveGen[Rfc3927LocalLink]", "member" : "zio.test.refined.types.NetInstances.rfc3927LocalLinkDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc3927LocalLinkDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc3927LocalLink]", "kind" : "implicit val"}, {"label" : "rfc5737TestnetDeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet]", "member" : "zio.test.refined.types.NetInstances.rfc5737TestnetDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc5737TestnetDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet]", "kind" : "implicit val"}, {"label" : "rfc5737Testnet3DeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet3]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet3DeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc5737Testnet3DeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet3]", "kind" : "implicit val"}, {"label" : "rfc5737Testnet2DeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet2]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet2DeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc5737Testnet2DeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet2]", "kind" : "implicit val"}, {"label" : "rfc5737Testnet1DeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet1]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet1DeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc5737Testnet1DeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet1]", "kind" : "implicit val"}, {"label" : "rfc1918PrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918Private]", "member" : "zio.test.refined.types.NetInstances.rfc1918PrivateDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc1918PrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918Private]", "kind" : "implicit val"}, {"label" : "rfc1918ClassCPrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918ClassCPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassCPrivateDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc1918ClassCPrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918ClassCPrivate]", "kind" : "implicit val"}, {"label" : "rfc1918ClassBPrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918ClassBPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassBPrivateDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc1918ClassBPrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918ClassBPrivate]", "kind" : "implicit val"}, {"label" : "rfc1918ClassAPrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918ClassAPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassAPrivateDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc1918ClassAPrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918ClassAPrivate]", "kind" : "implicit val"}, {"label" : "nonSystemPortNumberDeriveGen", "tail" : ": DeriveGen[NonSystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.nonSystemPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonSystemPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.NonSystemPortNumber]", "kind" : "implicit val"}, {"label" : "dynamicPortNumberDeriveGen", "tail" : ": DeriveGen[DynamicPortNumber]", "member" : "zio.test.refined.types.NetInstances.dynamicPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#dynamicPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.DynamicPortNumber]", "kind" : "implicit val"}, {"label" : "userPortNumberDeriveGen", "tail" : ": DeriveGen[UserPortNumber]", "member" : "zio.test.refined.types.NetInstances.userPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#userPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.UserPortNumber]", "kind" : "implicit val"}, {"label" : "systemPortNumberDeriveGen", "tail" : ": DeriveGen[SystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.systemPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#systemPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.SystemPortNumber]", "kind" : "implicit val"}, {"label" : "portNumberDeriveGen", "tail" : ": DeriveGen[PortNumber]", "member" : "zio.test.refined.types.NetInstances.portNumberDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#portNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.PortNumber]", "kind" : "implicit val"}, {"label" : "privateNetworkGen", "tail" : ": Gen[Has[Random], PrivateNetwork]", "member" : "zio.test.refined.types.NetInstances.privateNetworkGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#privateNetworkGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.PrivateNetwork]", "kind" : "val"}, {"label" : "rfc2544BenchmarkGen", "tail" : ": Gen[Has[Random], Rfc2544Benchmark]", "member" : "zio.test.refined.types.NetInstances.rfc2544BenchmarkGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc2544BenchmarkGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc2544Benchmark]", "kind" : "val"}, {"label" : "rfc3927LocalLinkGen", "tail" : ": Gen[Has[Random], Rfc3927LocalLink]", "member" : "zio.test.refined.types.NetInstances.rfc3927LocalLinkGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc3927LocalLinkGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc3927LocalLink]", "kind" : "val"}, {"label" : "rfc5737TestnetGen", "tail" : ": Gen[Has[Random], Rfc5737Testnet]", "member" : "zio.test.refined.types.NetInstances.rfc5737TestnetGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc5737TestnetGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet]", "kind" : "val"}, {"label" : "rfc5737Testnet3Gen", "tail" : ": Gen[Has[Random], Rfc5737Testnet3]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet3Gen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc5737Testnet3Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet3]", "kind" : "val"}, {"label" : "rfc5737Testnet2Gen", "tail" : ": Gen[Has[Random], Rfc5737Testnet2]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet2Gen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc5737Testnet2Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet2]", "kind" : "val"}, {"label" : "rfc5737Testnet1Gen", "tail" : ": Gen[Has[Random], Rfc5737Testnet1]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet1Gen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc5737Testnet1Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet1]", "kind" : "val"}, {"label" : "rfc1918PrivateGen", "tail" : ": Gen[Has[Random], Rfc1918Private]", "member" : "zio.test.refined.types.NetInstances.rfc1918PrivateGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc1918PrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918Private]", "kind" : "val"}, {"label" : "rfc1918ClassCPrivateGen", "tail" : ": Gen[Has[Random], Rfc1918ClassCPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassCPrivateGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc1918ClassCPrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918ClassCPrivate]", "kind" : "val"}, {"label" : "rfc1918ClassBPrivateGen", "tail" : ": Gen[Has[Random], Rfc1918ClassBPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassBPrivateGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc1918ClassBPrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918ClassBPrivate]", "kind" : "val"}, {"label" : "rfc1918ClassAPrivateGen", "tail" : ": Gen[Has[Random], Rfc1918ClassAPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassAPrivateGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#rfc1918ClassAPrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918ClassAPrivate]", "kind" : "val"}, {"label" : "nonSystemPortNumberGen", "tail" : ": Gen[Has[Random], NonSystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.nonSystemPortNumberGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#nonSystemPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.NonSystemPortNumber]", "kind" : "val"}, {"label" : "dynamicPortNumberGen", "tail" : ": Gen[Has[Random], DynamicPortNumber]", "member" : "zio.test.refined.types.NetInstances.dynamicPortNumberGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#dynamicPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.DynamicPortNumber]", "kind" : "val"}, {"label" : "userPortNumberGen", "tail" : ": Gen[Has[Random], UserPortNumber]", "member" : "zio.test.refined.types.NetInstances.userPortNumberGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#userPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.UserPortNumber]", "kind" : "val"}, {"label" : "systemPortNumberGen", "tail" : ": Gen[Has[Random], SystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.systemPortNumberGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#systemPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.SystemPortNumber]", "kind" : "val"}, {"label" : "portNumberGen", "tail" : ": Gen[Has[Random], PortNumber]", "member" : "zio.test.refined.types.NetInstances.portNumberGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#portNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.PortNumber]", "kind" : "val"}, {"label" : "sha512Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA512]", "member" : "zio.test.refined.types.DigitInstances.sha512Arbitrary", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#sha512Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA512]", "kind" : "implicit val"}, {"label" : "sha384Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA384]", "member" : "zio.test.refined.types.DigitInstances.sha384Arbitrary", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#sha384Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA384]", "kind" : "implicit val"}, {"label" : "sha256Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA256]", "member" : "zio.test.refined.types.DigitInstances.sha256Arbitrary", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#sha256Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA256]", "kind" : "implicit val"}, {"label" : "sha224Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA224]", "member" : "zio.test.refined.types.DigitInstances.sha224Arbitrary", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#sha224Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA224]", "kind" : "implicit val"}, {"label" : "sha1Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA1]", "member" : "zio.test.refined.types.DigitInstances.sha1Arbitrary", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#sha1Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA1]", "kind" : "implicit val"}, {"label" : "md5Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.MD5]", "member" : "zio.test.refined.types.DigitInstances.md5Arbitrary", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#md5Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.MD5]", "kind" : "implicit val"}, {"label" : "sha512Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA512]", "member" : "zio.test.refined.types.DigitInstances.sha512Gen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#sha512Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA512]", "kind" : "val"}, {"label" : "sha384Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA384]", "member" : "zio.test.refined.types.DigitInstances.sha384Gen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#sha384Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA384]", "kind" : "val"}, {"label" : "sha256Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA256]", "member" : "zio.test.refined.types.DigitInstances.sha256Gen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#sha256Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA256]", "kind" : "val"}, {"label" : "sha224Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA224]", "member" : "zio.test.refined.types.DigitInstances.sha224Gen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#sha224Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA224]", "kind" : "val"}, {"label" : "sha1Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA1]", "member" : "zio.test.refined.types.DigitInstances.sha1Gen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#sha1Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA1]", "kind" : "val"}, {"label" : "md5Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.MD5]", "member" : "zio.test.refined.types.DigitInstances.md5Gen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#md5Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.MD5]", "kind" : "val"}, {"label" : "upperCaseCharDeriveGen", "tail" : ": DeriveGen[UpperCaseChar]", "member" : "zio.test.refined.types.CharInstances.upperCaseCharDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#upperCaseCharDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.char.UpperCaseChar]", "kind" : "implicit val"}, {"label" : "lowerCaseCharDeriveGen", "tail" : ": DeriveGen[LowerCaseChar]", "member" : "zio.test.refined.types.CharInstances.lowerCaseCharDeriveGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#lowerCaseCharDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.char.LowerCaseChar]", "kind" : "implicit val"}, {"label" : "upperCaseCharGen", "tail" : ": Gen[Has[Random], UpperCaseChar]", "member" : "zio.test.refined.types.CharInstances.upperCaseCharGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#upperCaseCharGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.char.UpperCaseChar]", "kind" : "val"}, {"label" : "lowerCaseCharGen", "tail" : ": Gen[Has[Random], LowerCaseChar]", "member" : "zio.test.refined.types.CharInstances.lowerCaseCharGen", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#lowerCaseCharGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.char.LowerCaseChar]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/types\/AllTypesInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.refined.types.char", "shortDescription" : "", "object" : "zio\/test\/refined\/types\/char$.html", "members_object" : [{"label" : "upperCaseCharDeriveGen", "tail" : ": DeriveGen[UpperCaseChar]", "member" : "zio.test.refined.types.CharInstances.upperCaseCharDeriveGen", "link" : "zio\/test\/refined\/types\/char$.html#upperCaseCharDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.char.UpperCaseChar]", "kind" : "implicit val"}, {"label" : "lowerCaseCharDeriveGen", "tail" : ": DeriveGen[LowerCaseChar]", "member" : "zio.test.refined.types.CharInstances.lowerCaseCharDeriveGen", "link" : "zio\/test\/refined\/types\/char$.html#lowerCaseCharDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.char.LowerCaseChar]", "kind" : "implicit val"}, {"label" : "upperCaseCharGen", "tail" : ": Gen[Has[Random], UpperCaseChar]", "member" : "zio.test.refined.types.CharInstances.upperCaseCharGen", "link" : "zio\/test\/refined\/types\/char$.html#upperCaseCharGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.char.UpperCaseChar]", "kind" : "val"}, {"label" : "lowerCaseCharGen", "tail" : ": Gen[Has[Random], LowerCaseChar]", "member" : "zio.test.refined.types.CharInstances.lowerCaseCharGen", "link" : "zio\/test\/refined\/types\/char$.html#lowerCaseCharGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.char.LowerCaseChar]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/types\/char$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/types\/char$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/types\/char$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/types\/char$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/types\/char$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/types\/char$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/types\/char$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/char$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/char$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/char$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/types\/char$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/types\/char$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/types\/char$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/types\/char$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/types\/char$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/types\/char$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/types\/char$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/types\/char$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/types\/char$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.refined.types.CharInstances", "trait" : "zio\/test\/refined\/types\/CharInstances.html", "kind" : "trait", "members_trait" : [{"label" : "upperCaseCharDeriveGen", "tail" : ": DeriveGen[UpperCaseChar]", "member" : "zio.test.refined.types.CharInstances.upperCaseCharDeriveGen", "link" : "zio\/test\/refined\/types\/CharInstances.html#upperCaseCharDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.char.UpperCaseChar]", "kind" : "implicit val"}, {"label" : "lowerCaseCharDeriveGen", "tail" : ": DeriveGen[LowerCaseChar]", "member" : "zio.test.refined.types.CharInstances.lowerCaseCharDeriveGen", "link" : "zio\/test\/refined\/types\/CharInstances.html#lowerCaseCharDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.char.LowerCaseChar]", "kind" : "implicit val"}, {"label" : "upperCaseCharGen", "tail" : ": Gen[Has[Random], UpperCaseChar]", "member" : "zio.test.refined.types.CharInstances.upperCaseCharGen", "link" : "zio\/test\/refined\/types\/CharInstances.html#upperCaseCharGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.char.UpperCaseChar]", "kind" : "val"}, {"label" : "lowerCaseCharGen", "tail" : ": Gen[Has[Random], LowerCaseChar]", "member" : "zio.test.refined.types.CharInstances.lowerCaseCharGen", "link" : "zio\/test\/refined\/types\/CharInstances.html#lowerCaseCharGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.char.LowerCaseChar]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/types\/CharInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/types\/CharInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/types\/CharInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/types\/CharInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/types\/CharInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/types\/CharInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/types\/CharInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/CharInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/CharInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/CharInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/types\/CharInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/types\/CharInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/types\/CharInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/types\/CharInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/types\/CharInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/types\/CharInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/types\/CharInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/types\/CharInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/types\/CharInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.refined.types.digit", "shortDescription" : "", "object" : "zio\/test\/refined\/types\/digit$.html", "members_object" : [{"label" : "sha512Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA512]", "member" : "zio.test.refined.types.DigitInstances.sha512Arbitrary", "link" : "zio\/test\/refined\/types\/digit$.html#sha512Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA512]", "kind" : "implicit val"}, {"label" : "sha384Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA384]", "member" : "zio.test.refined.types.DigitInstances.sha384Arbitrary", "link" : "zio\/test\/refined\/types\/digit$.html#sha384Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA384]", "kind" : "implicit val"}, {"label" : "sha256Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA256]", "member" : "zio.test.refined.types.DigitInstances.sha256Arbitrary", "link" : "zio\/test\/refined\/types\/digit$.html#sha256Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA256]", "kind" : "implicit val"}, {"label" : "sha224Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA224]", "member" : "zio.test.refined.types.DigitInstances.sha224Arbitrary", "link" : "zio\/test\/refined\/types\/digit$.html#sha224Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA224]", "kind" : "implicit val"}, {"label" : "sha1Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA1]", "member" : "zio.test.refined.types.DigitInstances.sha1Arbitrary", "link" : "zio\/test\/refined\/types\/digit$.html#sha1Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA1]", "kind" : "implicit val"}, {"label" : "md5Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.MD5]", "member" : "zio.test.refined.types.DigitInstances.md5Arbitrary", "link" : "zio\/test\/refined\/types\/digit$.html#md5Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.MD5]", "kind" : "implicit val"}, {"label" : "sha512Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA512]", "member" : "zio.test.refined.types.DigitInstances.sha512Gen", "link" : "zio\/test\/refined\/types\/digit$.html#sha512Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA512]", "kind" : "val"}, {"label" : "sha384Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA384]", "member" : "zio.test.refined.types.DigitInstances.sha384Gen", "link" : "zio\/test\/refined\/types\/digit$.html#sha384Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA384]", "kind" : "val"}, {"label" : "sha256Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA256]", "member" : "zio.test.refined.types.DigitInstances.sha256Gen", "link" : "zio\/test\/refined\/types\/digit$.html#sha256Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA256]", "kind" : "val"}, {"label" : "sha224Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA224]", "member" : "zio.test.refined.types.DigitInstances.sha224Gen", "link" : "zio\/test\/refined\/types\/digit$.html#sha224Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA224]", "kind" : "val"}, {"label" : "sha1Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA1]", "member" : "zio.test.refined.types.DigitInstances.sha1Gen", "link" : "zio\/test\/refined\/types\/digit$.html#sha1Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA1]", "kind" : "val"}, {"label" : "md5Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.MD5]", "member" : "zio.test.refined.types.DigitInstances.md5Gen", "link" : "zio\/test\/refined\/types\/digit$.html#md5Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.MD5]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/types\/digit$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/types\/digit$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/types\/digit$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/types\/digit$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/types\/digit$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/types\/digit$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/types\/digit$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/digit$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/digit$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/digit$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/types\/digit$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/types\/digit$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/types\/digit$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/types\/digit$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/types\/digit$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/types\/digit$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/types\/digit$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/types\/digit$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/types\/digit$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.refined.types.DigitInstances", "trait" : "zio\/test\/refined\/types\/DigitInstances.html", "kind" : "trait", "members_trait" : [{"label" : "sha512Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA512]", "member" : "zio.test.refined.types.DigitInstances.sha512Arbitrary", "link" : "zio\/test\/refined\/types\/DigitInstances.html#sha512Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA512]", "kind" : "implicit val"}, {"label" : "sha384Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA384]", "member" : "zio.test.refined.types.DigitInstances.sha384Arbitrary", "link" : "zio\/test\/refined\/types\/DigitInstances.html#sha384Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA384]", "kind" : "implicit val"}, {"label" : "sha256Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA256]", "member" : "zio.test.refined.types.DigitInstances.sha256Arbitrary", "link" : "zio\/test\/refined\/types\/DigitInstances.html#sha256Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA256]", "kind" : "implicit val"}, {"label" : "sha224Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA224]", "member" : "zio.test.refined.types.DigitInstances.sha224Arbitrary", "link" : "zio\/test\/refined\/types\/DigitInstances.html#sha224Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA224]", "kind" : "implicit val"}, {"label" : "sha1Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA1]", "member" : "zio.test.refined.types.DigitInstances.sha1Arbitrary", "link" : "zio\/test\/refined\/types\/DigitInstances.html#sha1Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA1]", "kind" : "implicit val"}, {"label" : "md5Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.MD5]", "member" : "zio.test.refined.types.DigitInstances.md5Arbitrary", "link" : "zio\/test\/refined\/types\/DigitInstances.html#md5Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.MD5]", "kind" : "implicit val"}, {"label" : "sha512Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA512]", "member" : "zio.test.refined.types.DigitInstances.sha512Gen", "link" : "zio\/test\/refined\/types\/DigitInstances.html#sha512Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA512]", "kind" : "val"}, {"label" : "sha384Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA384]", "member" : "zio.test.refined.types.DigitInstances.sha384Gen", "link" : "zio\/test\/refined\/types\/DigitInstances.html#sha384Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA384]", "kind" : "val"}, {"label" : "sha256Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA256]", "member" : "zio.test.refined.types.DigitInstances.sha256Gen", "link" : "zio\/test\/refined\/types\/DigitInstances.html#sha256Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA256]", "kind" : "val"}, {"label" : "sha224Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA224]", "member" : "zio.test.refined.types.DigitInstances.sha224Gen", "link" : "zio\/test\/refined\/types\/DigitInstances.html#sha224Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA224]", "kind" : "val"}, {"label" : "sha1Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA1]", "member" : "zio.test.refined.types.DigitInstances.sha1Gen", "link" : "zio\/test\/refined\/types\/DigitInstances.html#sha1Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA1]", "kind" : "val"}, {"label" : "md5Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.MD5]", "member" : "zio.test.refined.types.DigitInstances.md5Gen", "link" : "zio\/test\/refined\/types\/DigitInstances.html#md5Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.MD5]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/types\/DigitInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/types\/DigitInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/types\/DigitInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/types\/DigitInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/types\/DigitInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/types\/DigitInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/types\/DigitInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/DigitInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/DigitInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/DigitInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/types\/DigitInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/types\/DigitInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/types\/DigitInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/types\/DigitInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/types\/DigitInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/types\/DigitInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/types\/DigitInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/types\/DigitInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/types\/DigitInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.refined.types.net", "shortDescription" : "", "object" : "zio\/test\/refined\/types\/net$.html", "members_object" : [{"label" : "privateNetworkDeriveGen", "tail" : ": DeriveGen[PrivateNetwork]", "member" : "zio.test.refined.types.NetInstances.privateNetworkDeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#privateNetworkDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.PrivateNetwork]", "kind" : "implicit val"}, {"label" : "rfc2544BenchmarkDeriveGen", "tail" : ": DeriveGen[Rfc2544Benchmark]", "member" : "zio.test.refined.types.NetInstances.rfc2544BenchmarkDeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc2544BenchmarkDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc2544Benchmark]", "kind" : "implicit val"}, {"label" : "rfc3927LocalLinkDeriveGen", "tail" : ": DeriveGen[Rfc3927LocalLink]", "member" : "zio.test.refined.types.NetInstances.rfc3927LocalLinkDeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc3927LocalLinkDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc3927LocalLink]", "kind" : "implicit val"}, {"label" : "rfc5737TestnetDeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet]", "member" : "zio.test.refined.types.NetInstances.rfc5737TestnetDeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc5737TestnetDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet]", "kind" : "implicit val"}, {"label" : "rfc5737Testnet3DeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet3]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet3DeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc5737Testnet3DeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet3]", "kind" : "implicit val"}, {"label" : "rfc5737Testnet2DeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet2]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet2DeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc5737Testnet2DeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet2]", "kind" : "implicit val"}, {"label" : "rfc5737Testnet1DeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet1]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet1DeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc5737Testnet1DeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet1]", "kind" : "implicit val"}, {"label" : "rfc1918PrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918Private]", "member" : "zio.test.refined.types.NetInstances.rfc1918PrivateDeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc1918PrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918Private]", "kind" : "implicit val"}, {"label" : "rfc1918ClassCPrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918ClassCPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassCPrivateDeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc1918ClassCPrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918ClassCPrivate]", "kind" : "implicit val"}, {"label" : "rfc1918ClassBPrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918ClassBPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassBPrivateDeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc1918ClassBPrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918ClassBPrivate]", "kind" : "implicit val"}, {"label" : "rfc1918ClassAPrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918ClassAPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassAPrivateDeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc1918ClassAPrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918ClassAPrivate]", "kind" : "implicit val"}, {"label" : "nonSystemPortNumberDeriveGen", "tail" : ": DeriveGen[NonSystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.nonSystemPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#nonSystemPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.NonSystemPortNumber]", "kind" : "implicit val"}, {"label" : "dynamicPortNumberDeriveGen", "tail" : ": DeriveGen[DynamicPortNumber]", "member" : "zio.test.refined.types.NetInstances.dynamicPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#dynamicPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.DynamicPortNumber]", "kind" : "implicit val"}, {"label" : "userPortNumberDeriveGen", "tail" : ": DeriveGen[UserPortNumber]", "member" : "zio.test.refined.types.NetInstances.userPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#userPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.UserPortNumber]", "kind" : "implicit val"}, {"label" : "systemPortNumberDeriveGen", "tail" : ": DeriveGen[SystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.systemPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#systemPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.SystemPortNumber]", "kind" : "implicit val"}, {"label" : "portNumberDeriveGen", "tail" : ": DeriveGen[PortNumber]", "member" : "zio.test.refined.types.NetInstances.portNumberDeriveGen", "link" : "zio\/test\/refined\/types\/net$.html#portNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.PortNumber]", "kind" : "implicit val"}, {"label" : "privateNetworkGen", "tail" : ": Gen[Has[Random], PrivateNetwork]", "member" : "zio.test.refined.types.NetInstances.privateNetworkGen", "link" : "zio\/test\/refined\/types\/net$.html#privateNetworkGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.PrivateNetwork]", "kind" : "val"}, {"label" : "rfc2544BenchmarkGen", "tail" : ": Gen[Has[Random], Rfc2544Benchmark]", "member" : "zio.test.refined.types.NetInstances.rfc2544BenchmarkGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc2544BenchmarkGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc2544Benchmark]", "kind" : "val"}, {"label" : "rfc3927LocalLinkGen", "tail" : ": Gen[Has[Random], Rfc3927LocalLink]", "member" : "zio.test.refined.types.NetInstances.rfc3927LocalLinkGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc3927LocalLinkGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc3927LocalLink]", "kind" : "val"}, {"label" : "rfc5737TestnetGen", "tail" : ": Gen[Has[Random], Rfc5737Testnet]", "member" : "zio.test.refined.types.NetInstances.rfc5737TestnetGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc5737TestnetGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet]", "kind" : "val"}, {"label" : "rfc5737Testnet3Gen", "tail" : ": Gen[Has[Random], Rfc5737Testnet3]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet3Gen", "link" : "zio\/test\/refined\/types\/net$.html#rfc5737Testnet3Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet3]", "kind" : "val"}, {"label" : "rfc5737Testnet2Gen", "tail" : ": Gen[Has[Random], Rfc5737Testnet2]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet2Gen", "link" : "zio\/test\/refined\/types\/net$.html#rfc5737Testnet2Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet2]", "kind" : "val"}, {"label" : "rfc5737Testnet1Gen", "tail" : ": Gen[Has[Random], Rfc5737Testnet1]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet1Gen", "link" : "zio\/test\/refined\/types\/net$.html#rfc5737Testnet1Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet1]", "kind" : "val"}, {"label" : "rfc1918PrivateGen", "tail" : ": Gen[Has[Random], Rfc1918Private]", "member" : "zio.test.refined.types.NetInstances.rfc1918PrivateGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc1918PrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918Private]", "kind" : "val"}, {"label" : "rfc1918ClassCPrivateGen", "tail" : ": Gen[Has[Random], Rfc1918ClassCPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassCPrivateGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc1918ClassCPrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918ClassCPrivate]", "kind" : "val"}, {"label" : "rfc1918ClassBPrivateGen", "tail" : ": Gen[Has[Random], Rfc1918ClassBPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassBPrivateGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc1918ClassBPrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918ClassBPrivate]", "kind" : "val"}, {"label" : "rfc1918ClassAPrivateGen", "tail" : ": Gen[Has[Random], Rfc1918ClassAPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassAPrivateGen", "link" : "zio\/test\/refined\/types\/net$.html#rfc1918ClassAPrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918ClassAPrivate]", "kind" : "val"}, {"label" : "nonSystemPortNumberGen", "tail" : ": Gen[Has[Random], NonSystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.nonSystemPortNumberGen", "link" : "zio\/test\/refined\/types\/net$.html#nonSystemPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.NonSystemPortNumber]", "kind" : "val"}, {"label" : "dynamicPortNumberGen", "tail" : ": Gen[Has[Random], DynamicPortNumber]", "member" : "zio.test.refined.types.NetInstances.dynamicPortNumberGen", "link" : "zio\/test\/refined\/types\/net$.html#dynamicPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.DynamicPortNumber]", "kind" : "val"}, {"label" : "userPortNumberGen", "tail" : ": Gen[Has[Random], UserPortNumber]", "member" : "zio.test.refined.types.NetInstances.userPortNumberGen", "link" : "zio\/test\/refined\/types\/net$.html#userPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.UserPortNumber]", "kind" : "val"}, {"label" : "systemPortNumberGen", "tail" : ": Gen[Has[Random], SystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.systemPortNumberGen", "link" : "zio\/test\/refined\/types\/net$.html#systemPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.SystemPortNumber]", "kind" : "val"}, {"label" : "portNumberGen", "tail" : ": Gen[Has[Random], PortNumber]", "member" : "zio.test.refined.types.NetInstances.portNumberGen", "link" : "zio\/test\/refined\/types\/net$.html#portNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.PortNumber]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/types\/net$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/types\/net$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/types\/net$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/types\/net$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/types\/net$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/types\/net$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/types\/net$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/net$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/net$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/net$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/types\/net$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/types\/net$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/types\/net$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/types\/net$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/types\/net$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/types\/net$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/types\/net$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/types\/net$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/types\/net$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.refined.types.NetInstances", "trait" : "zio\/test\/refined\/types\/NetInstances.html", "kind" : "trait", "members_trait" : [{"label" : "privateNetworkDeriveGen", "tail" : ": DeriveGen[PrivateNetwork]", "member" : "zio.test.refined.types.NetInstances.privateNetworkDeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#privateNetworkDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.PrivateNetwork]", "kind" : "implicit val"}, {"label" : "rfc2544BenchmarkDeriveGen", "tail" : ": DeriveGen[Rfc2544Benchmark]", "member" : "zio.test.refined.types.NetInstances.rfc2544BenchmarkDeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc2544BenchmarkDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc2544Benchmark]", "kind" : "implicit val"}, {"label" : "rfc3927LocalLinkDeriveGen", "tail" : ": DeriveGen[Rfc3927LocalLink]", "member" : "zio.test.refined.types.NetInstances.rfc3927LocalLinkDeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc3927LocalLinkDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc3927LocalLink]", "kind" : "implicit val"}, {"label" : "rfc5737TestnetDeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet]", "member" : "zio.test.refined.types.NetInstances.rfc5737TestnetDeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc5737TestnetDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet]", "kind" : "implicit val"}, {"label" : "rfc5737Testnet3DeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet3]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet3DeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc5737Testnet3DeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet3]", "kind" : "implicit val"}, {"label" : "rfc5737Testnet2DeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet2]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet2DeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc5737Testnet2DeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet2]", "kind" : "implicit val"}, {"label" : "rfc5737Testnet1DeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet1]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet1DeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc5737Testnet1DeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet1]", "kind" : "implicit val"}, {"label" : "rfc1918PrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918Private]", "member" : "zio.test.refined.types.NetInstances.rfc1918PrivateDeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc1918PrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918Private]", "kind" : "implicit val"}, {"label" : "rfc1918ClassCPrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918ClassCPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassCPrivateDeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc1918ClassCPrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918ClassCPrivate]", "kind" : "implicit val"}, {"label" : "rfc1918ClassBPrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918ClassBPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassBPrivateDeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc1918ClassBPrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918ClassBPrivate]", "kind" : "implicit val"}, {"label" : "rfc1918ClassAPrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918ClassAPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassAPrivateDeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc1918ClassAPrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918ClassAPrivate]", "kind" : "implicit val"}, {"label" : "nonSystemPortNumberDeriveGen", "tail" : ": DeriveGen[NonSystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.nonSystemPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#nonSystemPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.NonSystemPortNumber]", "kind" : "implicit val"}, {"label" : "dynamicPortNumberDeriveGen", "tail" : ": DeriveGen[DynamicPortNumber]", "member" : "zio.test.refined.types.NetInstances.dynamicPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#dynamicPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.DynamicPortNumber]", "kind" : "implicit val"}, {"label" : "userPortNumberDeriveGen", "tail" : ": DeriveGen[UserPortNumber]", "member" : "zio.test.refined.types.NetInstances.userPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#userPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.UserPortNumber]", "kind" : "implicit val"}, {"label" : "systemPortNumberDeriveGen", "tail" : ": DeriveGen[SystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.systemPortNumberDeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#systemPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.SystemPortNumber]", "kind" : "implicit val"}, {"label" : "portNumberDeriveGen", "tail" : ": DeriveGen[PortNumber]", "member" : "zio.test.refined.types.NetInstances.portNumberDeriveGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#portNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.PortNumber]", "kind" : "implicit val"}, {"label" : "privateNetworkGen", "tail" : ": Gen[Has[Random], PrivateNetwork]", "member" : "zio.test.refined.types.NetInstances.privateNetworkGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#privateNetworkGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.PrivateNetwork]", "kind" : "val"}, {"label" : "rfc2544BenchmarkGen", "tail" : ": Gen[Has[Random], Rfc2544Benchmark]", "member" : "zio.test.refined.types.NetInstances.rfc2544BenchmarkGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc2544BenchmarkGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc2544Benchmark]", "kind" : "val"}, {"label" : "rfc3927LocalLinkGen", "tail" : ": Gen[Has[Random], Rfc3927LocalLink]", "member" : "zio.test.refined.types.NetInstances.rfc3927LocalLinkGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc3927LocalLinkGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc3927LocalLink]", "kind" : "val"}, {"label" : "rfc5737TestnetGen", "tail" : ": Gen[Has[Random], Rfc5737Testnet]", "member" : "zio.test.refined.types.NetInstances.rfc5737TestnetGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc5737TestnetGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet]", "kind" : "val"}, {"label" : "rfc5737Testnet3Gen", "tail" : ": Gen[Has[Random], Rfc5737Testnet3]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet3Gen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc5737Testnet3Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet3]", "kind" : "val"}, {"label" : "rfc5737Testnet2Gen", "tail" : ": Gen[Has[Random], Rfc5737Testnet2]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet2Gen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc5737Testnet2Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet2]", "kind" : "val"}, {"label" : "rfc5737Testnet1Gen", "tail" : ": Gen[Has[Random], Rfc5737Testnet1]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet1Gen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc5737Testnet1Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet1]", "kind" : "val"}, {"label" : "rfc1918PrivateGen", "tail" : ": Gen[Has[Random], Rfc1918Private]", "member" : "zio.test.refined.types.NetInstances.rfc1918PrivateGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc1918PrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918Private]", "kind" : "val"}, {"label" : "rfc1918ClassCPrivateGen", "tail" : ": Gen[Has[Random], Rfc1918ClassCPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassCPrivateGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc1918ClassCPrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918ClassCPrivate]", "kind" : "val"}, {"label" : "rfc1918ClassBPrivateGen", "tail" : ": Gen[Has[Random], Rfc1918ClassBPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassBPrivateGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc1918ClassBPrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918ClassBPrivate]", "kind" : "val"}, {"label" : "rfc1918ClassAPrivateGen", "tail" : ": Gen[Has[Random], Rfc1918ClassAPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassAPrivateGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#rfc1918ClassAPrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918ClassAPrivate]", "kind" : "val"}, {"label" : "nonSystemPortNumberGen", "tail" : ": Gen[Has[Random], NonSystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.nonSystemPortNumberGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#nonSystemPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.NonSystemPortNumber]", "kind" : "val"}, {"label" : "dynamicPortNumberGen", "tail" : ": Gen[Has[Random], DynamicPortNumber]", "member" : "zio.test.refined.types.NetInstances.dynamicPortNumberGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#dynamicPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.DynamicPortNumber]", "kind" : "val"}, {"label" : "userPortNumberGen", "tail" : ": Gen[Has[Random], UserPortNumber]", "member" : "zio.test.refined.types.NetInstances.userPortNumberGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#userPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.UserPortNumber]", "kind" : "val"}, {"label" : "systemPortNumberGen", "tail" : ": Gen[Has[Random], SystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.systemPortNumberGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#systemPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.SystemPortNumber]", "kind" : "val"}, {"label" : "portNumberGen", "tail" : ": Gen[Has[Random], PortNumber]", "member" : "zio.test.refined.types.NetInstances.portNumberGen", "link" : "zio\/test\/refined\/types\/NetInstances.html#portNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.PortNumber]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/types\/NetInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/types\/NetInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/types\/NetInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/types\/NetInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/types\/NetInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/types\/NetInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/types\/NetInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/NetInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/NetInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/NetInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/types\/NetInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/types\/NetInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/types\/NetInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/types\/NetInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/types\/NetInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/types\/NetInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/types\/NetInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/types\/NetInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/types\/NetInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.refined.types.numeric", "shortDescription" : "", "object" : "zio\/test\/refined\/types\/numeric$.html", "members_object" : [{"label" : "nonNanDoubleDeriveGen", "tail" : ": DeriveGen[NonNaNDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNanDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNanDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNaNDouble]", "kind" : "implicit val"}, {"label" : "nonNanFloatDeriveGen", "tail" : ": DeriveGen[NonNaNFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNanFloatDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNanFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNaNFloat]", "kind" : "implicit val"}, {"label" : "nonPosBigDecimalDeriveGen", "tail" : ": DeriveGen[NonPosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosBigDecimal]", "kind" : "implicit val"}, {"label" : "negBigDecimalDeriveGen", "tail" : ": DeriveGen[NegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.negBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegBigDecimal]", "kind" : "implicit val"}, {"label" : "nonNegBigDecimalDeriveGen", "tail" : ": DeriveGen[NonNegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegBigDecimal]", "kind" : "implicit val"}, {"label" : "posBigDecimalDeriveGen", "tail" : ": DeriveGen[PosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.posBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosBigDecimal]", "kind" : "implicit val"}, {"label" : "nonPosDoubleDeriveGen", "tail" : ": DeriveGen[NonPosDouble]", "member" : "zio.test.refined.types.NumericInstances.nonPosDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosDouble]", "kind" : "implicit val"}, {"label" : "negDoubleDeriveGen", "tail" : ": DeriveGen[NegDouble]", "member" : "zio.test.refined.types.NumericInstances.negDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegDouble]", "kind" : "implicit val"}, {"label" : "nonNegDoubleDeriveGen", "tail" : ": DeriveGen[NonNegDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNegDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegDouble]", "kind" : "implicit val"}, {"label" : "posDoubleDeriveGen", "tail" : ": DeriveGen[PosDouble]", "member" : "zio.test.refined.types.NumericInstances.posDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosDouble]", "kind" : "implicit val"}, {"label" : "nonPosFloatDeriveGen", "tail" : ": DeriveGen[NonPosFloat]", "member" : "zio.test.refined.types.NumericInstances.nonPosFloatDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosFloat]", "kind" : "implicit val"}, {"label" : "negFloatDeriveGen", "tail" : ": DeriveGen[NegFloat]", "member" : "zio.test.refined.types.NumericInstances.negFloatDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegFloat]", "kind" : "implicit val"}, {"label" : "nonNegFloatDeriveGen", "tail" : ": DeriveGen[NonNegFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNegFloatDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegFloat]", "kind" : "implicit val"}, {"label" : "posFloatDeriveGen", "tail" : ": DeriveGen[PosFloat]", "member" : "zio.test.refined.types.NumericInstances.posFloatDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosFloat]", "kind" : "implicit val"}, {"label" : "nonPosBigIntDeriveGen", "tail" : ": DeriveGen[NonPosBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosBigInt]", "kind" : "implicit val"}, {"label" : "negBigIntDeriveGen", "tail" : ": DeriveGen[NegBigInt]", "member" : "zio.test.refined.types.NumericInstances.negBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegBigInt]", "kind" : "implicit val"}, {"label" : "nonNegBigIntDeriveGen", "tail" : ": DeriveGen[NonNegBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegBigInt]", "kind" : "implicit val"}, {"label" : "posBigIntDeriveGen", "tail" : ": DeriveGen[PosBigInt]", "member" : "zio.test.refined.types.NumericInstances.posBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosBigInt]", "kind" : "implicit val"}, {"label" : "nonPosLongDeriveGen", "tail" : ": DeriveGen[NonPosLong]", "member" : "zio.test.refined.types.NumericInstances.nonPosLongDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosLong]", "kind" : "implicit val"}, {"label" : "negLongDeriveGen", "tail" : ": DeriveGen[NegLong]", "member" : "zio.test.refined.types.NumericInstances.negLongDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegLong]", "kind" : "implicit val"}, {"label" : "nonNegLongDeriveGen", "tail" : ": DeriveGen[NonNegLong]", "member" : "zio.test.refined.types.NumericInstances.nonNegLongDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegLong]", "kind" : "implicit val"}, {"label" : "posLongDeriveGen", "tail" : ": DeriveGen[PosLong]", "member" : "zio.test.refined.types.NumericInstances.posLongDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosLong]", "kind" : "implicit val"}, {"label" : "nonPosIntDeriveGen", "tail" : ": DeriveGen[NonPosInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosIntDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosInt]", "kind" : "implicit val"}, {"label" : "negIntDeriveGen", "tail" : ": DeriveGen[NegInt]", "member" : "zio.test.refined.types.NumericInstances.negIntDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegInt]", "kind" : "implicit val"}, {"label" : "nonNegIntDeriveGen", "tail" : ": DeriveGen[NonNegInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegIntDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegInt]", "kind" : "implicit val"}, {"label" : "posIntDeriveGen", "tail" : ": DeriveGen[PosInt]", "member" : "zio.test.refined.types.NumericInstances.posIntDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosInt]", "kind" : "implicit val"}, {"label" : "nonPosShortDeriveGen", "tail" : ": DeriveGen[NonPosShort]", "member" : "zio.test.refined.types.NumericInstances.nonPosShortDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosShort]", "kind" : "implicit val"}, {"label" : "negShortDeriveGen", "tail" : ": DeriveGen[NegShort]", "member" : "zio.test.refined.types.NumericInstances.negShortDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegShort]", "kind" : "implicit val"}, {"label" : "nonNegShortDeriveGen", "tail" : ": DeriveGen[NonNegShort]", "member" : "zio.test.refined.types.NumericInstances.nonNegShortDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegShort]", "kind" : "implicit val"}, {"label" : "posShortDeriveGen", "tail" : ": DeriveGen[PosShort]", "member" : "zio.test.refined.types.NumericInstances.posShortDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosShort]", "kind" : "implicit val"}, {"label" : "nonPosByteDeriveGen", "tail" : ": DeriveGen[NonPosByte]", "member" : "zio.test.refined.types.NumericInstances.nonPosByteDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosByte]", "kind" : "implicit val"}, {"label" : "negByteDeriveGen", "tail" : ": DeriveGen[NegByte]", "member" : "zio.test.refined.types.NumericInstances.negByteDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegByte]", "kind" : "implicit val"}, {"label" : "nonNegByteDeriveGen", "tail" : ": DeriveGen[NonNegByte]", "member" : "zio.test.refined.types.NumericInstances.nonNegByteDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegByte]", "kind" : "implicit val"}, {"label" : "posByteDeriveGen", "tail" : ": DeriveGen[PosByte]", "member" : "zio.test.refined.types.NumericInstances.posByteDeriveGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosByte]", "kind" : "implicit val"}, {"label" : "nonNanDoubleGen", "tail" : ": Gen[Has[Random], NonNaNDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNanDoubleGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNanDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNaNDouble]", "kind" : "val"}, {"label" : "nonNanFloatGen", "tail" : ": Gen[Has[Random], NonNaNFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNanFloatGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNanFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNaNFloat]", "kind" : "val"}, {"label" : "nonPosBigDecimalGen", "tail" : ": Gen[Has[Random], NonPosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigDecimalGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosBigDecimal]", "kind" : "val"}, {"label" : "negBigDecimalGen", "tail" : ": Gen[Has[Random], NegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.negBigDecimalGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegBigDecimal]", "kind" : "val"}, {"label" : "nonNegBigDecimalGen", "tail" : ": Gen[Has[Random], NonNegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigDecimalGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegBigDecimal]", "kind" : "val"}, {"label" : "posBigDecimalGen", "tail" : ": Gen[Has[Random], PosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.posBigDecimalGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosBigDecimal]", "kind" : "val"}, {"label" : "nonPosDoubleGen", "tail" : ": Gen[Has[Random], NonPosDouble]", "member" : "zio.test.refined.types.NumericInstances.nonPosDoubleGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosDouble]", "kind" : "val"}, {"label" : "negDoubleGen", "tail" : ": Gen[Has[Random], NegDouble]", "member" : "zio.test.refined.types.NumericInstances.negDoubleGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegDouble]", "kind" : "val"}, {"label" : "nonNegDoubleGen", "tail" : ": Gen[Has[Random], NonNegDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNegDoubleGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegDouble]", "kind" : "val"}, {"label" : "posDoubleGen", "tail" : ": Gen[Has[Random], PosDouble]", "member" : "zio.test.refined.types.NumericInstances.posDoubleGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosDouble]", "kind" : "val"}, {"label" : "nonPosFloatGen", "tail" : ": Gen[Has[Random], NonPosFloat]", "member" : "zio.test.refined.types.NumericInstances.nonPosFloatGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosFloat]", "kind" : "val"}, {"label" : "negFloatGen", "tail" : ": Gen[Has[Random], NegFloat]", "member" : "zio.test.refined.types.NumericInstances.negFloatGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegFloat]", "kind" : "val"}, {"label" : "nonNegFloatGen", "tail" : ": Gen[Has[Random], NonNegFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNegFloatGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegFloat]", "kind" : "val"}, {"label" : "posFloatGen", "tail" : ": Gen[Has[Random], PosFloat]", "member" : "zio.test.refined.types.NumericInstances.posFloatGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosFloat]", "kind" : "val"}, {"label" : "nonPosBigIntGen", "tail" : ": Gen[Has[Random], NonPosBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigIntGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosBigInt]", "kind" : "val"}, {"label" : "negBigIntGen", "tail" : ": Gen[Has[Random], NegBigInt]", "member" : "zio.test.refined.types.NumericInstances.negBigIntGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegBigInt]", "kind" : "val"}, {"label" : "nonNegBigIntGen", "tail" : ": Gen[Has[Random], NonNegBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigIntGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegBigInt]", "kind" : "val"}, {"label" : "posBigIntGen", "tail" : ": Gen[Has[Random], PosBigInt]", "member" : "zio.test.refined.types.NumericInstances.posBigIntGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosBigInt]", "kind" : "val"}, {"label" : "nonPosLongGen", "tail" : ": Gen[Has[Random], NonPosLong]", "member" : "zio.test.refined.types.NumericInstances.nonPosLongGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosLong]", "kind" : "val"}, {"label" : "negLongGen", "tail" : ": Gen[Has[Random], NegLong]", "member" : "zio.test.refined.types.NumericInstances.negLongGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegLong]", "kind" : "val"}, {"label" : "nonNegLongGen", "tail" : ": Gen[Has[Random], NonNegLong]", "member" : "zio.test.refined.types.NumericInstances.nonNegLongGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegLong]", "kind" : "val"}, {"label" : "posLongGen", "tail" : ": Gen[Has[Random], PosLong]", "member" : "zio.test.refined.types.NumericInstances.posLongGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosLong]", "kind" : "val"}, {"label" : "nonPosIntGen", "tail" : ": Gen[Has[Random], NonPosInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosIntGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosInt]", "kind" : "val"}, {"label" : "negIntGen", "tail" : ": Gen[Has[Random], NegInt]", "member" : "zio.test.refined.types.NumericInstances.negIntGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegInt]", "kind" : "val"}, {"label" : "nonNegIntGen", "tail" : ": Gen[Has[Random], NonNegInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegIntGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegInt]", "kind" : "val"}, {"label" : "posIntGen", "tail" : ": Gen[Has[Random], PosInt]", "member" : "zio.test.refined.types.NumericInstances.posIntGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosInt]", "kind" : "val"}, {"label" : "nonPosShortGen", "tail" : ": Gen[Has[Random], NonPosShort]", "member" : "zio.test.refined.types.NumericInstances.nonPosShortGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosShort]", "kind" : "val"}, {"label" : "negShortGen", "tail" : ": Gen[Has[Random], NegShort]", "member" : "zio.test.refined.types.NumericInstances.negShortGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegShort]", "kind" : "val"}, {"label" : "nonNegShortGen", "tail" : ": Gen[Has[Random], NonNegShort]", "member" : "zio.test.refined.types.NumericInstances.nonNegShortGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegShort]", "kind" : "val"}, {"label" : "posShortGen", "tail" : ": Gen[Has[Random], PosShort]", "member" : "zio.test.refined.types.NumericInstances.posShortGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosShort]", "kind" : "val"}, {"label" : "nonPosByteGen", "tail" : ": Gen[Has[Random], NonPosByte]", "member" : "zio.test.refined.types.NumericInstances.nonPosByteGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonPosByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosByte]", "kind" : "val"}, {"label" : "negByteGen", "tail" : ": Gen[Has[Random], NegByte]", "member" : "zio.test.refined.types.NumericInstances.negByteGen", "link" : "zio\/test\/refined\/types\/numeric$.html#negByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegByte]", "kind" : "val"}, {"label" : "nonNegByteGen", "tail" : ": Gen[Has[Random], NonNegByte]", "member" : "zio.test.refined.types.NumericInstances.nonNegByteGen", "link" : "zio\/test\/refined\/types\/numeric$.html#nonNegByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegByte]", "kind" : "val"}, {"label" : "posByteGen", "tail" : ": Gen[Has[Random], PosByte]", "member" : "zio.test.refined.types.NumericInstances.posByteGen", "link" : "zio\/test\/refined\/types\/numeric$.html#posByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosByte]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/types\/numeric$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/types\/numeric$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/types\/numeric$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/types\/numeric$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/types\/numeric$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/types\/numeric$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/types\/numeric$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/numeric$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/numeric$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/numeric$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/types\/numeric$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/types\/numeric$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/types\/numeric$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/types\/numeric$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/types\/numeric$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/types\/numeric$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/types\/numeric$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/types\/numeric$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/types\/numeric$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.refined.types.NumericInstances", "trait" : "zio\/test\/refined\/types\/NumericInstances.html", "kind" : "trait", "members_trait" : [{"label" : "nonNanDoubleDeriveGen", "tail" : ": DeriveGen[NonNaNDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNanDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNanDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNaNDouble]", "kind" : "implicit val"}, {"label" : "nonNanFloatDeriveGen", "tail" : ": DeriveGen[NonNaNFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNanFloatDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNanFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNaNFloat]", "kind" : "implicit val"}, {"label" : "nonPosBigDecimalDeriveGen", "tail" : ": DeriveGen[NonPosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosBigDecimal]", "kind" : "implicit val"}, {"label" : "negBigDecimalDeriveGen", "tail" : ": DeriveGen[NegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.negBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegBigDecimal]", "kind" : "implicit val"}, {"label" : "nonNegBigDecimalDeriveGen", "tail" : ": DeriveGen[NonNegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegBigDecimal]", "kind" : "implicit val"}, {"label" : "posBigDecimalDeriveGen", "tail" : ": DeriveGen[PosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.posBigDecimalDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosBigDecimal]", "kind" : "implicit val"}, {"label" : "nonPosDoubleDeriveGen", "tail" : ": DeriveGen[NonPosDouble]", "member" : "zio.test.refined.types.NumericInstances.nonPosDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosDouble]", "kind" : "implicit val"}, {"label" : "negDoubleDeriveGen", "tail" : ": DeriveGen[NegDouble]", "member" : "zio.test.refined.types.NumericInstances.negDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegDouble]", "kind" : "implicit val"}, {"label" : "nonNegDoubleDeriveGen", "tail" : ": DeriveGen[NonNegDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNegDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegDouble]", "kind" : "implicit val"}, {"label" : "posDoubleDeriveGen", "tail" : ": DeriveGen[PosDouble]", "member" : "zio.test.refined.types.NumericInstances.posDoubleDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosDouble]", "kind" : "implicit val"}, {"label" : "nonPosFloatDeriveGen", "tail" : ": DeriveGen[NonPosFloat]", "member" : "zio.test.refined.types.NumericInstances.nonPosFloatDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosFloat]", "kind" : "implicit val"}, {"label" : "negFloatDeriveGen", "tail" : ": DeriveGen[NegFloat]", "member" : "zio.test.refined.types.NumericInstances.negFloatDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegFloat]", "kind" : "implicit val"}, {"label" : "nonNegFloatDeriveGen", "tail" : ": DeriveGen[NonNegFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNegFloatDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegFloat]", "kind" : "implicit val"}, {"label" : "posFloatDeriveGen", "tail" : ": DeriveGen[PosFloat]", "member" : "zio.test.refined.types.NumericInstances.posFloatDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosFloat]", "kind" : "implicit val"}, {"label" : "nonPosBigIntDeriveGen", "tail" : ": DeriveGen[NonPosBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosBigInt]", "kind" : "implicit val"}, {"label" : "negBigIntDeriveGen", "tail" : ": DeriveGen[NegBigInt]", "member" : "zio.test.refined.types.NumericInstances.negBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegBigInt]", "kind" : "implicit val"}, {"label" : "nonNegBigIntDeriveGen", "tail" : ": DeriveGen[NonNegBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegBigInt]", "kind" : "implicit val"}, {"label" : "posBigIntDeriveGen", "tail" : ": DeriveGen[PosBigInt]", "member" : "zio.test.refined.types.NumericInstances.posBigIntDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosBigInt]", "kind" : "implicit val"}, {"label" : "nonPosLongDeriveGen", "tail" : ": DeriveGen[NonPosLong]", "member" : "zio.test.refined.types.NumericInstances.nonPosLongDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosLong]", "kind" : "implicit val"}, {"label" : "negLongDeriveGen", "tail" : ": DeriveGen[NegLong]", "member" : "zio.test.refined.types.NumericInstances.negLongDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegLong]", "kind" : "implicit val"}, {"label" : "nonNegLongDeriveGen", "tail" : ": DeriveGen[NonNegLong]", "member" : "zio.test.refined.types.NumericInstances.nonNegLongDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegLong]", "kind" : "implicit val"}, {"label" : "posLongDeriveGen", "tail" : ": DeriveGen[PosLong]", "member" : "zio.test.refined.types.NumericInstances.posLongDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosLong]", "kind" : "implicit val"}, {"label" : "nonPosIntDeriveGen", "tail" : ": DeriveGen[NonPosInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosIntDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosInt]", "kind" : "implicit val"}, {"label" : "negIntDeriveGen", "tail" : ": DeriveGen[NegInt]", "member" : "zio.test.refined.types.NumericInstances.negIntDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegInt]", "kind" : "implicit val"}, {"label" : "nonNegIntDeriveGen", "tail" : ": DeriveGen[NonNegInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegIntDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegInt]", "kind" : "implicit val"}, {"label" : "posIntDeriveGen", "tail" : ": DeriveGen[PosInt]", "member" : "zio.test.refined.types.NumericInstances.posIntDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosInt]", "kind" : "implicit val"}, {"label" : "nonPosShortDeriveGen", "tail" : ": DeriveGen[NonPosShort]", "member" : "zio.test.refined.types.NumericInstances.nonPosShortDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosShort]", "kind" : "implicit val"}, {"label" : "negShortDeriveGen", "tail" : ": DeriveGen[NegShort]", "member" : "zio.test.refined.types.NumericInstances.negShortDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegShort]", "kind" : "implicit val"}, {"label" : "nonNegShortDeriveGen", "tail" : ": DeriveGen[NonNegShort]", "member" : "zio.test.refined.types.NumericInstances.nonNegShortDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegShort]", "kind" : "implicit val"}, {"label" : "posShortDeriveGen", "tail" : ": DeriveGen[PosShort]", "member" : "zio.test.refined.types.NumericInstances.posShortDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosShort]", "kind" : "implicit val"}, {"label" : "nonPosByteDeriveGen", "tail" : ": DeriveGen[NonPosByte]", "member" : "zio.test.refined.types.NumericInstances.nonPosByteDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosByte]", "kind" : "implicit val"}, {"label" : "negByteDeriveGen", "tail" : ": DeriveGen[NegByte]", "member" : "zio.test.refined.types.NumericInstances.negByteDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegByte]", "kind" : "implicit val"}, {"label" : "nonNegByteDeriveGen", "tail" : ": DeriveGen[NonNegByte]", "member" : "zio.test.refined.types.NumericInstances.nonNegByteDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegByte]", "kind" : "implicit val"}, {"label" : "posByteDeriveGen", "tail" : ": DeriveGen[PosByte]", "member" : "zio.test.refined.types.NumericInstances.posByteDeriveGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosByte]", "kind" : "implicit val"}, {"label" : "nonNanDoubleGen", "tail" : ": Gen[Has[Random], NonNaNDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNanDoubleGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNanDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNaNDouble]", "kind" : "val"}, {"label" : "nonNanFloatGen", "tail" : ": Gen[Has[Random], NonNaNFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNanFloatGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNanFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNaNFloat]", "kind" : "val"}, {"label" : "nonPosBigDecimalGen", "tail" : ": Gen[Has[Random], NonPosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigDecimalGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosBigDecimal]", "kind" : "val"}, {"label" : "negBigDecimalGen", "tail" : ": Gen[Has[Random], NegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.negBigDecimalGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegBigDecimal]", "kind" : "val"}, {"label" : "nonNegBigDecimalGen", "tail" : ": Gen[Has[Random], NonNegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigDecimalGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegBigDecimal]", "kind" : "val"}, {"label" : "posBigDecimalGen", "tail" : ": Gen[Has[Random], PosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.posBigDecimalGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosBigDecimal]", "kind" : "val"}, {"label" : "nonPosDoubleGen", "tail" : ": Gen[Has[Random], NonPosDouble]", "member" : "zio.test.refined.types.NumericInstances.nonPosDoubleGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosDouble]", "kind" : "val"}, {"label" : "negDoubleGen", "tail" : ": Gen[Has[Random], NegDouble]", "member" : "zio.test.refined.types.NumericInstances.negDoubleGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegDouble]", "kind" : "val"}, {"label" : "nonNegDoubleGen", "tail" : ": Gen[Has[Random], NonNegDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNegDoubleGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegDouble]", "kind" : "val"}, {"label" : "posDoubleGen", "tail" : ": Gen[Has[Random], PosDouble]", "member" : "zio.test.refined.types.NumericInstances.posDoubleGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosDouble]", "kind" : "val"}, {"label" : "nonPosFloatGen", "tail" : ": Gen[Has[Random], NonPosFloat]", "member" : "zio.test.refined.types.NumericInstances.nonPosFloatGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosFloat]", "kind" : "val"}, {"label" : "negFloatGen", "tail" : ": Gen[Has[Random], NegFloat]", "member" : "zio.test.refined.types.NumericInstances.negFloatGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegFloat]", "kind" : "val"}, {"label" : "nonNegFloatGen", "tail" : ": Gen[Has[Random], NonNegFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNegFloatGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegFloat]", "kind" : "val"}, {"label" : "posFloatGen", "tail" : ": Gen[Has[Random], PosFloat]", "member" : "zio.test.refined.types.NumericInstances.posFloatGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosFloat]", "kind" : "val"}, {"label" : "nonPosBigIntGen", "tail" : ": Gen[Has[Random], NonPosBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigIntGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosBigInt]", "kind" : "val"}, {"label" : "negBigIntGen", "tail" : ": Gen[Has[Random], NegBigInt]", "member" : "zio.test.refined.types.NumericInstances.negBigIntGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegBigInt]", "kind" : "val"}, {"label" : "nonNegBigIntGen", "tail" : ": Gen[Has[Random], NonNegBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigIntGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegBigInt]", "kind" : "val"}, {"label" : "posBigIntGen", "tail" : ": Gen[Has[Random], PosBigInt]", "member" : "zio.test.refined.types.NumericInstances.posBigIntGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosBigInt]", "kind" : "val"}, {"label" : "nonPosLongGen", "tail" : ": Gen[Has[Random], NonPosLong]", "member" : "zio.test.refined.types.NumericInstances.nonPosLongGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosLong]", "kind" : "val"}, {"label" : "negLongGen", "tail" : ": Gen[Has[Random], NegLong]", "member" : "zio.test.refined.types.NumericInstances.negLongGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegLong]", "kind" : "val"}, {"label" : "nonNegLongGen", "tail" : ": Gen[Has[Random], NonNegLong]", "member" : "zio.test.refined.types.NumericInstances.nonNegLongGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegLong]", "kind" : "val"}, {"label" : "posLongGen", "tail" : ": Gen[Has[Random], PosLong]", "member" : "zio.test.refined.types.NumericInstances.posLongGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosLong]", "kind" : "val"}, {"label" : "nonPosIntGen", "tail" : ": Gen[Has[Random], NonPosInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosIntGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosInt]", "kind" : "val"}, {"label" : "negIntGen", "tail" : ": Gen[Has[Random], NegInt]", "member" : "zio.test.refined.types.NumericInstances.negIntGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegInt]", "kind" : "val"}, {"label" : "nonNegIntGen", "tail" : ": Gen[Has[Random], NonNegInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegIntGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegInt]", "kind" : "val"}, {"label" : "posIntGen", "tail" : ": Gen[Has[Random], PosInt]", "member" : "zio.test.refined.types.NumericInstances.posIntGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosInt]", "kind" : "val"}, {"label" : "nonPosShortGen", "tail" : ": Gen[Has[Random], NonPosShort]", "member" : "zio.test.refined.types.NumericInstances.nonPosShortGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosShort]", "kind" : "val"}, {"label" : "negShortGen", "tail" : ": Gen[Has[Random], NegShort]", "member" : "zio.test.refined.types.NumericInstances.negShortGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegShort]", "kind" : "val"}, {"label" : "nonNegShortGen", "tail" : ": Gen[Has[Random], NonNegShort]", "member" : "zio.test.refined.types.NumericInstances.nonNegShortGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegShort]", "kind" : "val"}, {"label" : "posShortGen", "tail" : ": Gen[Has[Random], PosShort]", "member" : "zio.test.refined.types.NumericInstances.posShortGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosShort]", "kind" : "val"}, {"label" : "nonPosByteGen", "tail" : ": Gen[Has[Random], NonPosByte]", "member" : "zio.test.refined.types.NumericInstances.nonPosByteGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonPosByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosByte]", "kind" : "val"}, {"label" : "negByteGen", "tail" : ": Gen[Has[Random], NegByte]", "member" : "zio.test.refined.types.NumericInstances.negByteGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#negByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegByte]", "kind" : "val"}, {"label" : "nonNegByteGen", "tail" : ": Gen[Has[Random], NonNegByte]", "member" : "zio.test.refined.types.NumericInstances.nonNegByteGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#nonNegByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegByte]", "kind" : "val"}, {"label" : "posByteGen", "tail" : ": Gen[Has[Random], PosByte]", "member" : "zio.test.refined.types.NumericInstances.posByteGen", "link" : "zio\/test\/refined\/types\/NumericInstances.html#posByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosByte]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/types\/NumericInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/types\/NumericInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/types\/NumericInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/types\/NumericInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/types\/NumericInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/types\/NumericInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/types\/NumericInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/NumericInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/NumericInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/NumericInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/types\/NumericInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/types\/NumericInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/types\/NumericInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/types\/NumericInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/types\/NumericInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/types\/NumericInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/types\/NumericInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/types\/NumericInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/types\/NumericInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.refined.types.string", "shortDescription" : "", "object" : "zio\/test\/refined\/types\/string$.html", "members_object" : [{"label" : "FiniteStringPartiallyApplied", "tail" : "", "member" : "zio.test.refined.types.StringInstance.FiniteStringPartiallyApplied", "link" : "zio\/test\/refined\/types\/StringInstance.html#FiniteStringPartiallyApplied[N<:Int,P]extendsAnyRef", "kind" : "class"}, {"label" : "hexStringDeriveGen", "tail" : "(): DeriveGen[HexString]", "member" : "zio.test.refined.types.StringInstance.hexStringDeriveGen", "link" : "zio\/test\/refined\/types\/string$.html#hexStringDeriveGen[R]:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.HexString]", "kind" : "implicit def"}, {"label" : "trimmedStringDeriveGen", "tail" : "(charGen: DeriveGen[Char]): DeriveGen[TrimmedString]", "member" : "zio.test.refined.types.StringInstance.trimmedStringDeriveGen", "link" : "zio\/test\/refined\/types\/string$.html#trimmedStringDeriveGen[R](implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.TrimmedString]", "kind" : "implicit def"}, {"label" : "nonEmptyFiniteStringDeriveGen", "tail" : "(ws: Aux[N], charGen: DeriveGen[Char]): DeriveGen[NonEmptyFiniteString[N]]", "member" : "zio.test.refined.types.StringInstance.nonEmptyFiniteStringDeriveGen", "link" : "zio\/test\/refined\/types\/string$.html#nonEmptyFiniteStringDeriveGen[N<:Int](implicitws:shapeless.Witness.Aux[N],implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.NonEmptyFiniteString[N]]", "kind" : "implicit def"}, {"label" : "nonEmptyStringDeriveGen", "tail" : "(charGen: DeriveGen[Char]): DeriveGen[NonEmptyString]", "member" : "zio.test.refined.types.StringInstance.nonEmptyStringDeriveGen", "link" : "zio\/test\/refined\/types\/string$.html#nonEmptyStringDeriveGen[R](implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.NonEmptyString]", "kind" : "implicit def"}, {"label" : "finiteStringDeriveGen", "tail" : "(ws: Aux[N], charGen: DeriveGen[Char]): DeriveGen[FiniteString[N]]", "member" : "zio.test.refined.types.StringInstance.finiteStringDeriveGen", "link" : "zio\/test\/refined\/types\/string$.html#finiteStringDeriveGen[N<:Int](implicitws:shapeless.Witness.Aux[N],implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.FiniteString[N]]", "kind" : "implicit def"}, {"label" : "hexStringGen", "tail" : "(): Gen[Has[Random] with Has[Sized], HexString]", "member" : "zio.test.refined.types.StringInstance.hexStringGen", "link" : "zio\/test\/refined\/types\/string$.html#hexStringGen:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.types.string.HexString]", "kind" : "def"}, {"label" : "trimmedStringGen", "tail" : "(charGen: Gen[R, Char]): Gen[R with Has[Random] with Has[Sized], TrimmedString]", "member" : "zio.test.refined.types.StringInstance.trimmedStringGen", "link" : "zio\/test\/refined\/types\/string$.html#trimmedStringGen[R](charGen:zio.test.Gen[R,Char]):zio.test.Gen[Rwithzio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.types.string.TrimmedString]", "kind" : "def"}, {"label" : "nonEmptyFiniteStringGen", "tail" : "(): FiniteStringPartiallyApplied[N, Size[Closed[shapeless.Nat._1, N]]]", "member" : "zio.test.refined.types.StringInstance.nonEmptyFiniteStringGen", "link" : "zio\/test\/refined\/types\/string$.html#nonEmptyFiniteStringGen[N<:Int]:StringInstance.this.FiniteStringPartiallyApplied[N,eu.timepit.refined.collection.Size[eu.timepit.refined.numeric.Interval.Closed[shapeless.Nat._1,N]]]", "kind" : "def"}, {"label" : "nonEmptyStringGen", "tail" : "(charGen: Gen[R, Char]): Gen[R with Has[Random] with Has[Sized], NonEmptyString]", "member" : "zio.test.refined.types.StringInstance.nonEmptyStringGen", "link" : "zio\/test\/refined\/types\/string$.html#nonEmptyStringGen[R](charGen:zio.test.Gen[R,Char]):zio.test.Gen[Rwithzio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.types.string.NonEmptyString]", "kind" : "def"}, {"label" : "finiteStringGen", "tail" : "(): FiniteStringPartiallyApplied[N, MaxSize[N]]", "member" : "zio.test.refined.types.StringInstance.finiteStringGen", "link" : "zio\/test\/refined\/types\/string$.html#finiteStringGen[N<:Int]:StringInstance.this.FiniteStringPartiallyApplied[N,eu.timepit.refined.collection.MaxSize[N]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/types\/string$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/types\/string$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/types\/string$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/types\/string$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/types\/string$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/types\/string$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/types\/string$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/string$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/string$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/string$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/types\/string$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/types\/string$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/types\/string$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/types\/string$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/types\/string$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/types\/string$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/types\/string$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/types\/string$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/types\/string$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.refined.types.StringInstance", "trait" : "zio\/test\/refined\/types\/StringInstance.html", "kind" : "trait", "members_trait" : [{"label" : "hexStringDeriveGen", "tail" : "(): DeriveGen[HexString]", "member" : "zio.test.refined.types.StringInstance.hexStringDeriveGen", "link" : "zio\/test\/refined\/types\/StringInstance.html#hexStringDeriveGen[R]:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.HexString]", "kind" : "implicit def"}, {"label" : "trimmedStringDeriveGen", "tail" : "(charGen: DeriveGen[Char]): DeriveGen[TrimmedString]", "member" : "zio.test.refined.types.StringInstance.trimmedStringDeriveGen", "link" : "zio\/test\/refined\/types\/StringInstance.html#trimmedStringDeriveGen[R](implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.TrimmedString]", "kind" : "implicit def"}, {"label" : "nonEmptyFiniteStringDeriveGen", "tail" : "(ws: Aux[N], charGen: DeriveGen[Char]): DeriveGen[NonEmptyFiniteString[N]]", "member" : "zio.test.refined.types.StringInstance.nonEmptyFiniteStringDeriveGen", "link" : "zio\/test\/refined\/types\/StringInstance.html#nonEmptyFiniteStringDeriveGen[N<:Int](implicitws:shapeless.Witness.Aux[N],implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.NonEmptyFiniteString[N]]", "kind" : "implicit def"}, {"label" : "nonEmptyStringDeriveGen", "tail" : "(charGen: DeriveGen[Char]): DeriveGen[NonEmptyString]", "member" : "zio.test.refined.types.StringInstance.nonEmptyStringDeriveGen", "link" : "zio\/test\/refined\/types\/StringInstance.html#nonEmptyStringDeriveGen[R](implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.NonEmptyString]", "kind" : "implicit def"}, {"label" : "finiteStringDeriveGen", "tail" : "(ws: Aux[N], charGen: DeriveGen[Char]): DeriveGen[FiniteString[N]]", "member" : "zio.test.refined.types.StringInstance.finiteStringDeriveGen", "link" : "zio\/test\/refined\/types\/StringInstance.html#finiteStringDeriveGen[N<:Int](implicitws:shapeless.Witness.Aux[N],implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.FiniteString[N]]", "kind" : "implicit def"}, {"label" : "hexStringGen", "tail" : "(): Gen[Has[Random] with Has[Sized], HexString]", "member" : "zio.test.refined.types.StringInstance.hexStringGen", "link" : "zio\/test\/refined\/types\/StringInstance.html#hexStringGen:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.types.string.HexString]", "kind" : "def"}, {"label" : "trimmedStringGen", "tail" : "(charGen: Gen[R, Char]): Gen[R with Has[Random] with Has[Sized], TrimmedString]", "member" : "zio.test.refined.types.StringInstance.trimmedStringGen", "link" : "zio\/test\/refined\/types\/StringInstance.html#trimmedStringGen[R](charGen:zio.test.Gen[R,Char]):zio.test.Gen[Rwithzio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.types.string.TrimmedString]", "kind" : "def"}, {"label" : "nonEmptyFiniteStringGen", "tail" : "(): FiniteStringPartiallyApplied[N, Size[Closed[shapeless.Nat._1, N]]]", "member" : "zio.test.refined.types.StringInstance.nonEmptyFiniteStringGen", "link" : "zio\/test\/refined\/types\/StringInstance.html#nonEmptyFiniteStringGen[N<:Int]:StringInstance.this.FiniteStringPartiallyApplied[N,eu.timepit.refined.collection.Size[eu.timepit.refined.numeric.Interval.Closed[shapeless.Nat._1,N]]]", "kind" : "def"}, {"label" : "nonEmptyStringGen", "tail" : "(charGen: Gen[R, Char]): Gen[R with Has[Random] with Has[Sized], NonEmptyString]", "member" : "zio.test.refined.types.StringInstance.nonEmptyStringGen", "link" : "zio\/test\/refined\/types\/StringInstance.html#nonEmptyStringGen[R](charGen:zio.test.Gen[R,Char]):zio.test.Gen[Rwithzio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.types.string.NonEmptyString]", "kind" : "def"}, {"label" : "finiteStringGen", "tail" : "(): FiniteStringPartiallyApplied[N, MaxSize[N]]", "member" : "zio.test.refined.types.StringInstance.finiteStringGen", "link" : "zio\/test\/refined\/types\/StringInstance.html#finiteStringGen[N<:Int]:StringInstance.this.FiniteStringPartiallyApplied[N,eu.timepit.refined.collection.MaxSize[N]]", "kind" : "def"}, {"label" : "FiniteStringPartiallyApplied", "tail" : "", "member" : "zio.test.refined.types.StringInstance.FiniteStringPartiallyApplied", "link" : "zio\/test\/refined\/types\/StringInstance.html#FiniteStringPartiallyApplied[N<:Int,P]extendsAnyRef", "kind" : "class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/types\/StringInstance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/types\/StringInstance.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/types\/StringInstance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/types\/StringInstance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/types\/StringInstance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/types\/StringInstance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/types\/StringInstance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/StringInstance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/StringInstance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/StringInstance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/types\/StringInstance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/types\/StringInstance.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/types\/StringInstance.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/types\/StringInstance.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/types\/StringInstance.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/types\/StringInstance.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/types\/StringInstance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/types\/StringInstance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/types\/StringInstance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.refined.types.time", "shortDescription" : "", "object" : "zio\/test\/refined\/types\/time$.html", "members_object" : [{"label" : "millsDeriveGen", "tail" : "(): DeriveGen[Millis]", "member" : "zio.test.refined.types.TimeInstances.millsDeriveGen", "link" : "zio\/test\/refined\/types\/time$.html#millsDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Millis]", "kind" : "implicit def"}, {"label" : "secondDeriveGen", "tail" : "(): DeriveGen[Second]", "member" : "zio.test.refined.types.TimeInstances.secondDeriveGen", "link" : "zio\/test\/refined\/types\/time$.html#secondDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Second]", "kind" : "implicit def"}, {"label" : "minuteDeriveGen", "tail" : "(): DeriveGen[Minute]", "member" : "zio.test.refined.types.TimeInstances.minuteDeriveGen", "link" : "zio\/test\/refined\/types\/time$.html#minuteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Minute]", "kind" : "implicit def"}, {"label" : "hourDeriveGen", "tail" : "(): DeriveGen[Hour]", "member" : "zio.test.refined.types.TimeInstances.hourDeriveGen", "link" : "zio\/test\/refined\/types\/time$.html#hourDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Hour]", "kind" : "implicit def"}, {"label" : "dayDeriveGen", "tail" : "(): DeriveGen[Day]", "member" : "zio.test.refined.types.TimeInstances.dayDeriveGen", "link" : "zio\/test\/refined\/types\/time$.html#dayDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Day]", "kind" : "implicit def"}, {"label" : "monthDeriveGen", "tail" : "(): DeriveGen[Month]", "member" : "zio.test.refined.types.TimeInstances.monthDeriveGen", "link" : "zio\/test\/refined\/types\/time$.html#monthDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Month]", "kind" : "implicit def"}, {"label" : "millsGen", "tail" : ": Gen[Has[Random], Millis]", "member" : "zio.test.refined.types.TimeInstances.millsGen", "link" : "zio\/test\/refined\/types\/time$.html#millsGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Millis]", "kind" : "val"}, {"label" : "secondGen", "tail" : ": Gen[Has[Random], Second]", "member" : "zio.test.refined.types.TimeInstances.secondGen", "link" : "zio\/test\/refined\/types\/time$.html#secondGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Second]", "kind" : "val"}, {"label" : "minuteGen", "tail" : ": Gen[Has[Random], Minute]", "member" : "zio.test.refined.types.TimeInstances.minuteGen", "link" : "zio\/test\/refined\/types\/time$.html#minuteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Minute]", "kind" : "val"}, {"label" : "hourGen", "tail" : ": Gen[Has[Random], Hour]", "member" : "zio.test.refined.types.TimeInstances.hourGen", "link" : "zio\/test\/refined\/types\/time$.html#hourGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Hour]", "kind" : "val"}, {"label" : "dayGen", "tail" : ": Gen[Has[Random], Day]", "member" : "zio.test.refined.types.TimeInstances.dayGen", "link" : "zio\/test\/refined\/types\/time$.html#dayGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Day]", "kind" : "val"}, {"label" : "monthGen", "tail" : ": Gen[Has[Random], Month]", "member" : "zio.test.refined.types.TimeInstances.monthGen", "link" : "zio\/test\/refined\/types\/time$.html#monthGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Month]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/types\/time$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/types\/time$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/types\/time$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/types\/time$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/types\/time$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/types\/time$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/types\/time$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/time$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/time$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/time$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/types\/time$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/types\/time$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/types\/time$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/types\/time$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/types\/time$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/types\/time$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/types\/time$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/types\/time$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/types\/time$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.refined.types.TimeInstances", "trait" : "zio\/test\/refined\/types\/TimeInstances.html", "kind" : "trait", "members_trait" : [{"label" : "millsDeriveGen", "tail" : "(): DeriveGen[Millis]", "member" : "zio.test.refined.types.TimeInstances.millsDeriveGen", "link" : "zio\/test\/refined\/types\/TimeInstances.html#millsDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Millis]", "kind" : "implicit def"}, {"label" : "secondDeriveGen", "tail" : "(): DeriveGen[Second]", "member" : "zio.test.refined.types.TimeInstances.secondDeriveGen", "link" : "zio\/test\/refined\/types\/TimeInstances.html#secondDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Second]", "kind" : "implicit def"}, {"label" : "minuteDeriveGen", "tail" : "(): DeriveGen[Minute]", "member" : "zio.test.refined.types.TimeInstances.minuteDeriveGen", "link" : "zio\/test\/refined\/types\/TimeInstances.html#minuteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Minute]", "kind" : "implicit def"}, {"label" : "hourDeriveGen", "tail" : "(): DeriveGen[Hour]", "member" : "zio.test.refined.types.TimeInstances.hourDeriveGen", "link" : "zio\/test\/refined\/types\/TimeInstances.html#hourDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Hour]", "kind" : "implicit def"}, {"label" : "dayDeriveGen", "tail" : "(): DeriveGen[Day]", "member" : "zio.test.refined.types.TimeInstances.dayDeriveGen", "link" : "zio\/test\/refined\/types\/TimeInstances.html#dayDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Day]", "kind" : "implicit def"}, {"label" : "monthDeriveGen", "tail" : "(): DeriveGen[Month]", "member" : "zio.test.refined.types.TimeInstances.monthDeriveGen", "link" : "zio\/test\/refined\/types\/TimeInstances.html#monthDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Month]", "kind" : "implicit def"}, {"label" : "millsGen", "tail" : ": Gen[Has[Random], Millis]", "member" : "zio.test.refined.types.TimeInstances.millsGen", "link" : "zio\/test\/refined\/types\/TimeInstances.html#millsGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Millis]", "kind" : "val"}, {"label" : "secondGen", "tail" : ": Gen[Has[Random], Second]", "member" : "zio.test.refined.types.TimeInstances.secondGen", "link" : "zio\/test\/refined\/types\/TimeInstances.html#secondGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Second]", "kind" : "val"}, {"label" : "minuteGen", "tail" : ": Gen[Has[Random], Minute]", "member" : "zio.test.refined.types.TimeInstances.minuteGen", "link" : "zio\/test\/refined\/types\/TimeInstances.html#minuteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Minute]", "kind" : "val"}, {"label" : "hourGen", "tail" : ": Gen[Has[Random], Hour]", "member" : "zio.test.refined.types.TimeInstances.hourGen", "link" : "zio\/test\/refined\/types\/TimeInstances.html#hourGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Hour]", "kind" : "val"}, {"label" : "dayGen", "tail" : ": Gen[Has[Random], Day]", "member" : "zio.test.refined.types.TimeInstances.dayGen", "link" : "zio\/test\/refined\/types\/TimeInstances.html#dayGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Day]", "kind" : "val"}, {"label" : "monthGen", "tail" : ": Gen[Has[Random], Month]", "member" : "zio.test.refined.types.TimeInstances.monthGen", "link" : "zio\/test\/refined\/types\/TimeInstances.html#monthGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Month]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/types\/TimeInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/types\/TimeInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/types\/TimeInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/types\/TimeInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/types\/TimeInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/types\/TimeInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/types\/TimeInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/TimeInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/TimeInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/types\/TimeInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/types\/TimeInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/types\/TimeInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/types\/TimeInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/types\/TimeInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/types\/TimeInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/types\/TimeInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/types\/TimeInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/types\/TimeInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/types\/TimeInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "zio" : [{"name" : "zio.=!=", "shortDescription" : "Evidence type A is not equal to type B.", "object" : "zio\/$eq$bang$eq$.html", "members_class" : [{"member" : "zio.=!=#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/$eq$bang$eq.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/$eq$bang$eq.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/$eq$bang$eq.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/$eq$bang$eq.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/$eq$bang$eq.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/$eq$bang$eq.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/$eq$bang$eq.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/$eq$bang$eq.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/$eq$bang$eq.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/$eq$bang$eq.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/$eq$bang$eq.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/$eq$bang$eq.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/$eq$bang$eq.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/$eq$bang$eq.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/$eq$bang$eq.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/$eq$bang$eq.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/$eq$bang$eq.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/$eq$bang$eq.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/$eq$bang$eq.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "neqAmbig2", "tail" : "(): =!=[A, A]", "member" : "zio.=!=.neqAmbig2", "link" : "zio\/$eq$bang$eq$.html#neqAmbig2[A]:A=!=A", "kind" : "implicit def"}, {"label" : "neqAmbig1", "tail" : "(): =!=[A, A]", "member" : "zio.=!=.neqAmbig1", "link" : "zio\/$eq$bang$eq$.html#neqAmbig1[A]:A=!=A", "kind" : "implicit def"}, {"label" : "neq", "tail" : "(): =!=[A, B]", "member" : "zio.=!=.neq", "link" : "zio\/$eq$bang$eq$.html#neq[A,B]:A=!=B", "kind" : "implicit def"}, {"label" : "unexpected", "tail" : "(): Nothing", "member" : "zio.=!=.unexpected", "link" : "zio\/$eq$bang$eq$.html#unexpected:Nothing", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/$eq$bang$eq$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/$eq$bang$eq$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/$eq$bang$eq$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/$eq$bang$eq$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/$eq$bang$eq$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/$eq$bang$eq$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/$eq$bang$eq$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/$eq$bang$eq$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/$eq$bang$eq$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/$eq$bang$eq$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/$eq$bang$eq$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/$eq$bang$eq$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/$eq$bang$eq$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/$eq$bang$eq$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/$eq$bang$eq$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/$eq$bang$eq$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/$eq$bang$eq$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/$eq$bang$eq$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/$eq$bang$eq$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/$eq$bang$eq.html", "kind" : "class"}, {"name" : "zio.Accessible", "object" : "zio\/Accessible$.html", "members_object" : [{"label" : "anyIsAny", "tail" : ": IsAny[Any]", "member" : "zio.Accessible.anyIsAny", "link" : "zio\/Accessible$.html#anyIsAny:zio.Accessible.IsAny[Any]", "kind" : "implicit val"}, {"label" : "IsAny", "tail" : "", "member" : "zio.Accessible.IsAny", "link" : "zio\/Accessible$.html#IsAny[R]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Accessible$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Accessible$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Accessible$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Accessible$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Accessible$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Accessible$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Accessible$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Accessible$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Accessible$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Accessible$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Accessible$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Accessible$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Accessible$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Accessible$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Accessible$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Accessible$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Accessible$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Accessible$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Accessible$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/Accessible.html", "kind" : "trait", "members_trait" : [{"label" : "apply", "tail" : "(f: (R) => ZIO[R0, E, A])(tag: zio.Tag[R], isAny: IsAny[R0]): ZIO[Has[R], E, A]", "member" : "zio.Accessible.apply", "link" : "zio\/Accessible.html#apply[R0,E,A](f:R=>zio.ZIO[R0,E,A])(implicittag:zio.Tag[R],implicitisAny:zio.Accessible.IsAny[R0]):zio.ZIO[zio.Has[R],E,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Accessible.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Accessible.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Accessible.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Accessible.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Accessible.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Accessible.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Accessible.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Accessible.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Accessible.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Accessible.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Accessible.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Accessible.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Accessible.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Accessible.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Accessible.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Accessible.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Accessible.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Accessible.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Accessible.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "A simple, macro-less means of creating accessors from Services."}, {"name" : "zio.App", "trait" : "zio\/App.html", "kind" : "trait", "members_trait" : [{"label" : "environment", "tail" : "(): zio.ZEnv", "member" : "zio.BootstrapRuntime.environment", "link" : "zio\/App.html#environment:zio.ZEnv", "kind" : "def"}, {"label" : "main", "tail" : "(args0: Array[String]): Unit", "member" : "zio.ZApp.main", "link" : "zio\/App.html#main(args0:Array[String]):Unit", "kind" : "final def"}, {"label" : "runtimeConfig", "tail" : "(): RuntimeConfig", "member" : "zio.ZBootstrapRuntime.runtimeConfig", "link" : "zio\/App.html#runtimeConfig:zio.RuntimeConfig", "kind" : "def"}, {"label" : "withTracing", "tail" : "(t: Tracing): Runtime[zio.ZEnv]", "member" : "zio.Runtime.withTracing", "link" : "zio\/App.html#withTracing(t:zio.internal.Tracing):zio.Runtime[R]", "kind" : "def"}, {"label" : "withReportFatal", "tail" : "(f: (Throwable) => Nothing): Runtime[zio.ZEnv]", "member" : "zio.Runtime.withReportFatal", "link" : "zio\/App.html#withReportFatal(f:Throwable=>Nothing):zio.Runtime[R]", "kind" : "def"}, {"label" : "withFatal", "tail" : "(f: (Throwable) => Boolean): Runtime[zio.ZEnv]", "member" : "zio.Runtime.withFatal", "link" : "zio\/App.html#withFatal(f:Throwable=>Boolean):zio.Runtime[R]", "kind" : "def"}, {"label" : "withExecutor", "tail" : "(e: Executor): Runtime[zio.ZEnv]", "member" : "zio.Runtime.withExecutor", "link" : "zio\/App.html#withExecutor(e:zio.Executor):zio.Runtime[R]", "kind" : "def"}, {"label" : "withBlockingExecutor", "tail" : "(e: Executor): Runtime[zio.ZEnv]", "member" : "zio.Runtime.withBlockingExecutor", "link" : "zio\/App.html#withBlockingExecutor(e:zio.Executor):zio.Runtime[R]", "kind" : "def"}, {"label" : "unsafeRunToFuture", "tail" : "(zio: ZIO[zio.ZEnv, E, A]): CancelableFuture[A]", "member" : "zio.Runtime.unsafeRunToFuture", "link" : "zio\/App.html#unsafeRunToFuture[E<:Throwable,A](zio:zio.ZIO[R,E,A]):zio.CancelableFuture[A]", "kind" : "final def"}, {"label" : "unsafeRunTask", "tail" : "(task: => RIO[zio.ZEnv, A]): A", "member" : "zio.Runtime.unsafeRunTask", "link" : "zio\/App.html#unsafeRunTask[A](task:=>zio.RIO[R,A]):A", "kind" : "final def"}, {"label" : "unsafeRunAsyncCancelable", "tail" : "(zio: => ZIO[zio.ZEnv, E, A])(k: (Exit[E, A]) => Any): (FiberId) => Exit[E, A]", "member" : "zio.Runtime.unsafeRunAsyncCancelable", "link" : "zio\/App.html#unsafeRunAsyncCancelable[E,A](zio:=>zio.ZIO[R,E,A])(k:zio.Exit[E,A]=>Any):zio.FiberId=>zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunAsyncWith", "tail" : "(zio: => ZIO[zio.ZEnv, E, A])(k: (Exit[E, A]) => Any): Unit", "member" : "zio.Runtime.unsafeRunAsyncWith", "link" : "zio\/App.html#unsafeRunAsyncWith[E,A](zio:=>zio.ZIO[R,E,A])(k:zio.Exit[E,A]=>Any):Unit", "kind" : "final def"}, {"label" : "tryFastUnsafeRunSync", "tail" : "(zio: ZIO[zio.ZEnv, E, A], stack: Int): Exit[E, A]", "member" : "zio.Runtime.tryFastUnsafeRunSync", "link" : "zio\/App.html#tryFastUnsafeRunSync[E,A](zio:zio.ZIO[R,E,A],stack:Int):zio.Exit[E,A]", "kind" : "def"}, {"label" : "defaultUnsafeRunSync", "tail" : "(zio: => ZIO[zio.ZEnv, E, A]): Exit[E, A]", "member" : "zio.Runtime.defaultUnsafeRunSync", "link" : "zio\/App.html#defaultUnsafeRunSync[E,A](zio:=>zio.ZIO[R,E,A]):zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunSync", "tail" : "(zio0: => ZIO[zio.ZEnv, E, A]): Exit[E, A]", "member" : "zio.Runtime.unsafeRunSync", "link" : "zio\/App.html#unsafeRunSync[E,A](zio0:=>zio.ZIO[R,E,A]):zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunAsync", "tail" : "(zio: ZIO[zio.ZEnv, E, A]): Unit", "member" : "zio.Runtime.unsafeRunAsync", "link" : "zio\/App.html#unsafeRunAsync[E,A](zio:zio.ZIO[R,E,A]):Unit", "kind" : "final def"}, {"label" : "unsafeRun", "tail" : "(zio: => ZIO[zio.ZEnv, E, A]): A", "member" : "zio.Runtime.unsafeRun", "link" : "zio\/App.html#unsafeRun[E,A](zio:=>zio.ZIO[R,E,A]):A", "kind" : "final def"}, {"label" : "run", "tail" : "(zio: ZIO[zio.ZEnv, E, A]): IO[E, A]", "member" : "zio.Runtime.run", "link" : "zio\/App.html#run[E,A](zio:zio.ZIO[R,E,A]):zio.IO[E,A]", "kind" : "final def"}, {"label" : "platform", "tail" : "(): Platform", "member" : "zio.Runtime.platform", "link" : "zio\/App.html#platform:zio.internal.Platform", "kind" : "def"}, {"label" : "mapRuntimeConfig", "tail" : "(f: (RuntimeConfig) => RuntimeConfig): Runtime[zio.ZEnv]", "member" : "zio.Runtime.mapRuntimeConfig", "link" : "zio\/App.html#mapRuntimeConfig(f:zio.RuntimeConfig=>zio.RuntimeConfig):zio.Runtime[R]", "kind" : "def"}, {"label" : "mapPlatform", "tail" : "(f: (Platform) => Platform): Runtime[zio.ZEnv]", "member" : "zio.Runtime.mapPlatform", "link" : "zio\/App.html#mapPlatform(f:zio.internal.Platform=>zio.internal.Platform):zio.Runtime[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (zio.ZEnv) => R1): Runtime[R1]", "member" : "zio.Runtime.map", "link" : "zio\/App.html#map[R1](f:R=>R1):zio.Runtime[R1]", "kind" : "def"}, {"label" : "as", "tail" : "(r1: R1): Runtime[R1]", "member" : "zio.Runtime.as", "link" : "zio\/App.html#as[R1](r1:R1):zio.Runtime[R1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/App.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/App.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/App.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/App.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/App.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/App.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/App.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/App.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/App.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/App.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/App.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/App.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/App.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/App.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/App.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/App.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/App.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/App.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/App.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(args: List[String]): URIO[zio.ZEnv, ExitCode]", "member" : "zio.ZApp.run", "link" : "zio\/App.html#run(args:List[String]):zio.URIO[R,zio.ExitCode]", "kind" : "abstract def"}], "shortDescription" : "The entry point for a purely-functional application on the JVM."}, {"name" : "zio.BootstrapRuntime", "trait" : "zio\/BootstrapRuntime.html", "kind" : "trait", "members_trait" : [{"label" : "environment", "tail" : "(): zio.ZEnv", "member" : "zio.BootstrapRuntime.environment", "link" : "zio\/BootstrapRuntime.html#environment:zio.ZEnv", "kind" : "def"}, {"label" : "runtimeConfig", "tail" : "(): RuntimeConfig", "member" : "zio.ZBootstrapRuntime.runtimeConfig", "link" : "zio\/BootstrapRuntime.html#runtimeConfig:zio.RuntimeConfig", "kind" : "def"}, {"label" : "withTracing", "tail" : "(t: Tracing): Runtime[zio.ZEnv]", "member" : "zio.Runtime.withTracing", "link" : "zio\/BootstrapRuntime.html#withTracing(t:zio.internal.Tracing):zio.Runtime[R]", "kind" : "def"}, {"label" : "withReportFatal", "tail" : "(f: (Throwable) => Nothing): Runtime[zio.ZEnv]", "member" : "zio.Runtime.withReportFatal", "link" : "zio\/BootstrapRuntime.html#withReportFatal(f:Throwable=>Nothing):zio.Runtime[R]", "kind" : "def"}, {"label" : "withFatal", "tail" : "(f: (Throwable) => Boolean): Runtime[zio.ZEnv]", "member" : "zio.Runtime.withFatal", "link" : "zio\/BootstrapRuntime.html#withFatal(f:Throwable=>Boolean):zio.Runtime[R]", "kind" : "def"}, {"label" : "withExecutor", "tail" : "(e: Executor): Runtime[zio.ZEnv]", "member" : "zio.Runtime.withExecutor", "link" : "zio\/BootstrapRuntime.html#withExecutor(e:zio.Executor):zio.Runtime[R]", "kind" : "def"}, {"label" : "withBlockingExecutor", "tail" : "(e: Executor): Runtime[zio.ZEnv]", "member" : "zio.Runtime.withBlockingExecutor", "link" : "zio\/BootstrapRuntime.html#withBlockingExecutor(e:zio.Executor):zio.Runtime[R]", "kind" : "def"}, {"label" : "unsafeRunToFuture", "tail" : "(zio: ZIO[zio.ZEnv, E, A]): CancelableFuture[A]", "member" : "zio.Runtime.unsafeRunToFuture", "link" : "zio\/BootstrapRuntime.html#unsafeRunToFuture[E<:Throwable,A](zio:zio.ZIO[R,E,A]):zio.CancelableFuture[A]", "kind" : "final def"}, {"label" : "unsafeRunTask", "tail" : "(task: => RIO[zio.ZEnv, A]): A", "member" : "zio.Runtime.unsafeRunTask", "link" : "zio\/BootstrapRuntime.html#unsafeRunTask[A](task:=>zio.RIO[R,A]):A", "kind" : "final def"}, {"label" : "unsafeRunAsyncCancelable", "tail" : "(zio: => ZIO[zio.ZEnv, E, A])(k: (Exit[E, A]) => Any): (FiberId) => Exit[E, A]", "member" : "zio.Runtime.unsafeRunAsyncCancelable", "link" : "zio\/BootstrapRuntime.html#unsafeRunAsyncCancelable[E,A](zio:=>zio.ZIO[R,E,A])(k:zio.Exit[E,A]=>Any):zio.FiberId=>zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunAsyncWith", "tail" : "(zio: => ZIO[zio.ZEnv, E, A])(k: (Exit[E, A]) => Any): Unit", "member" : "zio.Runtime.unsafeRunAsyncWith", "link" : "zio\/BootstrapRuntime.html#unsafeRunAsyncWith[E,A](zio:=>zio.ZIO[R,E,A])(k:zio.Exit[E,A]=>Any):Unit", "kind" : "final def"}, {"label" : "tryFastUnsafeRunSync", "tail" : "(zio: ZIO[zio.ZEnv, E, A], stack: Int): Exit[E, A]", "member" : "zio.Runtime.tryFastUnsafeRunSync", "link" : "zio\/BootstrapRuntime.html#tryFastUnsafeRunSync[E,A](zio:zio.ZIO[R,E,A],stack:Int):zio.Exit[E,A]", "kind" : "def"}, {"label" : "defaultUnsafeRunSync", "tail" : "(zio: => ZIO[zio.ZEnv, E, A]): Exit[E, A]", "member" : "zio.Runtime.defaultUnsafeRunSync", "link" : "zio\/BootstrapRuntime.html#defaultUnsafeRunSync[E,A](zio:=>zio.ZIO[R,E,A]):zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunSync", "tail" : "(zio0: => ZIO[zio.ZEnv, E, A]): Exit[E, A]", "member" : "zio.Runtime.unsafeRunSync", "link" : "zio\/BootstrapRuntime.html#unsafeRunSync[E,A](zio0:=>zio.ZIO[R,E,A]):zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunAsync", "tail" : "(zio: ZIO[zio.ZEnv, E, A]): Unit", "member" : "zio.Runtime.unsafeRunAsync", "link" : "zio\/BootstrapRuntime.html#unsafeRunAsync[E,A](zio:zio.ZIO[R,E,A]):Unit", "kind" : "final def"}, {"label" : "unsafeRun", "tail" : "(zio: => ZIO[zio.ZEnv, E, A]): A", "member" : "zio.Runtime.unsafeRun", "link" : "zio\/BootstrapRuntime.html#unsafeRun[E,A](zio:=>zio.ZIO[R,E,A]):A", "kind" : "final def"}, {"label" : "run", "tail" : "(zio: ZIO[zio.ZEnv, E, A]): IO[E, A]", "member" : "zio.Runtime.run", "link" : "zio\/BootstrapRuntime.html#run[E,A](zio:zio.ZIO[R,E,A]):zio.IO[E,A]", "kind" : "final def"}, {"label" : "platform", "tail" : "(): Platform", "member" : "zio.Runtime.platform", "link" : "zio\/BootstrapRuntime.html#platform:zio.internal.Platform", "kind" : "def"}, {"label" : "mapRuntimeConfig", "tail" : "(f: (RuntimeConfig) => RuntimeConfig): Runtime[zio.ZEnv]", "member" : "zio.Runtime.mapRuntimeConfig", "link" : "zio\/BootstrapRuntime.html#mapRuntimeConfig(f:zio.RuntimeConfig=>zio.RuntimeConfig):zio.Runtime[R]", "kind" : "def"}, {"label" : "mapPlatform", "tail" : "(f: (Platform) => Platform): Runtime[zio.ZEnv]", "member" : "zio.Runtime.mapPlatform", "link" : "zio\/BootstrapRuntime.html#mapPlatform(f:zio.internal.Platform=>zio.internal.Platform):zio.Runtime[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (zio.ZEnv) => R1): Runtime[R1]", "member" : "zio.Runtime.map", "link" : "zio\/BootstrapRuntime.html#map[R1](f:R=>R1):zio.Runtime[R1]", "kind" : "def"}, {"label" : "as", "tail" : "(r1: R1): Runtime[R1]", "member" : "zio.Runtime.as", "link" : "zio\/BootstrapRuntime.html#as[R1](r1:R1):zio.Runtime[R1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/BootstrapRuntime.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/BootstrapRuntime.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/BootstrapRuntime.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/BootstrapRuntime.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/BootstrapRuntime.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/BootstrapRuntime.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/BootstrapRuntime.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/BootstrapRuntime.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/BootstrapRuntime.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/BootstrapRuntime.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/BootstrapRuntime.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/BootstrapRuntime.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/BootstrapRuntime.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/BootstrapRuntime.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/BootstrapRuntime.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/BootstrapRuntime.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/BootstrapRuntime.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/BootstrapRuntime.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/BootstrapRuntime.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.BuildInfo", "case object" : "zio\/BuildInfo$.html", "shortDescription" : "This object was generated by sbt-buildinfo.", "members_case object" : [{"label" : "toString", "tail" : ": String", "member" : "zio.BuildInfo.toString", "link" : "zio\/BuildInfo$.html#toString:String", "kind" : "val"}, {"label" : "isSnapshot", "tail" : ": Boolean", "member" : "zio.BuildInfo.isSnapshot", "link" : "zio\/BuildInfo$.html#isSnapshot:Boolean", "kind" : "val"}, {"label" : "sbtVersion", "tail" : ": String", "member" : "zio.BuildInfo.sbtVersion", "link" : "zio\/BuildInfo$.html#sbtVersion:String", "kind" : "val"}, {"label" : "scalaVersion", "tail" : ": String", "member" : "zio.BuildInfo.scalaVersion", "link" : "zio\/BuildInfo$.html#scalaVersion:String", "kind" : "val"}, {"label" : "version", "tail" : ": String", "member" : "zio.BuildInfo.version", "link" : "zio\/BuildInfo$.html#version:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "zio.BuildInfo.name", "link" : "zio\/BuildInfo$.html#name:String", "kind" : "val"}, {"label" : "moduleName", "tail" : ": String", "member" : "zio.BuildInfo.moduleName", "link" : "zio\/BuildInfo$.html#moduleName:String", "kind" : "val"}, {"label" : "organization", "tail" : ": String", "member" : "zio.BuildInfo.organization", "link" : "zio\/BuildInfo$.html#organization:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/BuildInfo$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "zio\/BuildInfo$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/BuildInfo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/BuildInfo$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/BuildInfo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/BuildInfo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/BuildInfo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/BuildInfo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/BuildInfo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/BuildInfo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/BuildInfo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/BuildInfo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/BuildInfo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/BuildInfo$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/BuildInfo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/BuildInfo$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/BuildInfo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/BuildInfo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/BuildInfo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}, {"name" : "zio.CancelableFuture", "shortDescription" : "", "members_class" : [{"label" : "result", "tail" : "(atMost: scala.concurrent.duration.Duration)(permit: CanAwait): A", "member" : "zio.CancelableFuture.result", "link" : "zio\/CancelableFuture.html#result(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):A", "kind" : "final def"}, {"label" : "ready", "tail" : "(atMost: scala.concurrent.duration.Duration)(permit: CanAwait): CancelableFuture.this.type", "member" : "zio.CancelableFuture.ready", "link" : "zio\/CancelableFuture.html#ready(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):CancelableFuture.this.type", "kind" : "final def"}, {"label" : "value", "tail" : "(): Option[Try[A]]", "member" : "zio.CancelableFuture.value", "link" : "zio\/CancelableFuture.html#value:Option[scala.util.Try[A]]", "kind" : "final def"}, {"label" : "isCompleted", "tail" : "(): Boolean", "member" : "zio.CancelableFuture.isCompleted", "link" : "zio\/CancelableFuture.html#isCompleted:Boolean", "kind" : "final def"}, {"label" : "onComplete", "tail" : "(f: (Try[A]) => U)(executor: ExecutionContext): Unit", "member" : "zio.CancelableFuture.onComplete", "link" : "zio\/CancelableFuture.html#onComplete[U](f:scala.util.Try[A]=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "final def"}, {"member" : "zio.CancelableFuture#<init>", "error" : "unsupported entity"}, {"label" : "future", "tail" : ": Future[A]", "member" : "zio.CancelableFuture.future", "link" : "zio\/CancelableFuture.html#future:scala.concurrent.Future[A]", "kind" : "val"}, {"label" : "transformWith", "tail" : "(f: (Try[A]) => Future[S])(executor: ExecutionContext): Future[S]", "member" : "zio.FutureTransformCompat.transformWith", "link" : "zio\/CancelableFuture.html#transformWith[S](f:scala.util.Try[A]=>scala.concurrent.Future[S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (Try[A]) => Try[S])(executor: ExecutionContext): Future[S]", "member" : "zio.FutureTransformCompat.transform", "link" : "zio\/CancelableFuture.html#transform[S](f:scala.util.Try[A]=>scala.util.Try[S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "andThen", "tail" : "(pf: PartialFunction[Try[A], U])(executor: ExecutionContext): Future[A]", "member" : "scala.concurrent.Future.andThen", "link" : "zio\/CancelableFuture.html#andThen[U](pf:PartialFunction[scala.util.Try[T],U])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "mapTo", "tail" : "(tag: ClassTag[S]): Future[S]", "member" : "scala.concurrent.Future.mapTo", "link" : "zio\/CancelableFuture.html#mapTo[S](implicittag:scala.reflect.ClassTag[S]):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "fallbackTo", "tail" : "(that: Future[U]): Future[U]", "member" : "scala.concurrent.Future.fallbackTo", "link" : "zio\/CancelableFuture.html#fallbackTo[U>:T](that:scala.concurrent.Future[U]):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "zipWith", "tail" : "(that: Future[U])(f: (A, U) => R)(executor: ExecutionContext): Future[R]", "member" : "scala.concurrent.Future.zipWith", "link" : "zio\/CancelableFuture.html#zipWith[U,R](that:scala.concurrent.Future[U])(f:(T,U)=>R)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Future[U]): Future[(A, U)]", "member" : "scala.concurrent.Future.zip", "link" : "zio\/CancelableFuture.html#zip[U](that:scala.concurrent.Future[U]):scala.concurrent.Future[(T,U)]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[Throwable, Future[U]])(executor: ExecutionContext): Future[U]", "member" : "scala.concurrent.Future.recoverWith", "link" : "zio\/CancelableFuture.html#recoverWith[U>:T](pf:PartialFunction[Throwable,scala.concurrent.Future[U]])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[Throwable, U])(executor: ExecutionContext): Future[U]", "member" : "scala.concurrent.Future.recover", "link" : "zio\/CancelableFuture.html#recover[U>:T](pf:PartialFunction[Throwable,U])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, S])(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.collect", "link" : "zio\/CancelableFuture.html#collect[S](pf:PartialFunction[T,S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean)(executor: ExecutionContext): Future[A]", "member" : "scala.concurrent.Future.withFilter", "link" : "zio\/CancelableFuture.html#withFilter(p:T=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean)(executor: ExecutionContext): Future[A]", "member" : "scala.concurrent.Future.filter", "link" : "zio\/CancelableFuture.html#filter(p:T=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Future[S]]): Future[S]", "member" : "scala.concurrent.Future.flatten", "link" : "zio\/CancelableFuture.html#flatten[S](implicitev:T<:<scala.concurrent.Future[S]):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => Future[S])(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.flatMap", "link" : "zio\/CancelableFuture.html#flatMap[S](f:T=>scala.concurrent.Future[S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => S)(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.map", "link" : "zio\/CancelableFuture.html#map[S](f:T=>S)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "transform", "tail" : "(s: (A) => S, f: (Throwable) => Throwable)(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.transform", "link" : "zio\/CancelableFuture.html#transform[S](s:T=>S,f:Throwable=>Throwable)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => U)(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.foreach", "link" : "zio\/CancelableFuture.html#foreach[U](f:T=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "failed", "tail" : "(): Future[Throwable]", "member" : "scala.concurrent.Future.failed", "link" : "zio\/CancelableFuture.html#failed:scala.concurrent.Future[Throwable]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/CancelableFuture.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/CancelableFuture.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/CancelableFuture.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/CancelableFuture.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/CancelableFuture.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/CancelableFuture.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/CancelableFuture.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/CancelableFuture.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/CancelableFuture.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/CancelableFuture.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/CancelableFuture.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/CancelableFuture.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/CancelableFuture.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/CancelableFuture.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/CancelableFuture.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/CancelableFuture.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/CancelableFuture.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/CancelableFuture.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/CancelableFuture.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cancel", "tail" : "(): Future[Exit[Throwable, A]]", "member" : "zio.CancelableFuture.cancel", "link" : "zio\/CancelableFuture.html#cancel():scala.concurrent.Future[zio.Exit[Throwable,A]]", "kind" : "abstract def"}], "class" : "zio\/CancelableFuture.html", "kind" : "class"}, {"name" : "zio.CanFail", "shortDescription" : "A value of type CanFail[E] provides implicit evidence that an effect witherror type E can fail, that is, that E is not equal to Nothing.", "object" : "zio\/CanFail$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/CanFail.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/CanFail.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/CanFail.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/CanFail.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/CanFail.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/CanFail.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/CanFail.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/CanFail.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/CanFail.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/CanFail.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/CanFail.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/CanFail.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/CanFail.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/CanFail.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/CanFail.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/CanFail.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/CanFail.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/CanFail.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/CanFail.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "canFailAmbiguous2", "tail" : ": CanFail[Nothing]", "member" : "zio.CanFail.canFailAmbiguous2", "link" : "zio\/CanFail$.html#canFailAmbiguous2:zio.CanFail[Nothing]", "kind" : "implicit val"}, {"label" : "canFailAmbiguous1", "tail" : ": CanFail[Nothing]", "member" : "zio.CanFail.canFailAmbiguous1", "link" : "zio\/CanFail$.html#canFailAmbiguous1:zio.CanFail[Nothing]", "kind" : "implicit val"}, {"label" : "canFail", "tail" : "(): CanFail[E]", "member" : "zio.CanFail.canFail", "link" : "zio\/CanFail$.html#canFail[E]:zio.CanFail[E]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/CanFail$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/CanFail$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/CanFail$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/CanFail$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/CanFail$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/CanFail$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/CanFail$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/CanFail$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/CanFail$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/CanFail$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/CanFail$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/CanFail$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/CanFail$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/CanFail$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/CanFail$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/CanFail$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/CanFail$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/CanFail$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/CanFail$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/CanFail.html", "kind" : "class"}, {"name" : "zio.Cause", "shortDescription" : "", "object" : "zio\/Cause$.html", "members_class" : [{"label" : "foldLeft", "tail" : "(z: Z)(f: PartialFunction[(Z, Cause[E]), Z]): Z", "member" : "zio.Cause.foldLeft", "link" : "zio\/Cause.html#foldLeft[Z](z:Z)(f:PartialFunction[(Z,zio.Cause[E]),Z]):Z", "kind" : "final def"}, {"label" : "find", "tail" : "(f: PartialFunction[Cause[E], Z]): Option[Z]", "member" : "zio.Cause.find", "link" : "zio\/Cause.html#find[Z](f:PartialFunction[zio.Cause[E],Z]):Option[Z]", "kind" : "final def"}, {"label" : "traces", "tail" : "(): List[ZTrace]", "member" : "zio.Cause.traces", "link" : "zio\/Cause.html#traces:List[zio.ZTrace]", "kind" : "final def"}, {"label" : "stripSomeDefects", "tail" : "(pf: PartialFunction[Throwable, Any]): Option[Cause[E]]", "member" : "zio.Cause.stripSomeDefects", "link" : "zio\/Cause.html#stripSomeDefects(pf:PartialFunction[Throwable,Any]):Option[zio.Cause[E]]", "kind" : "final def"}, {"label" : "stripFailures", "tail" : "(): Cause[Nothing]", "member" : "zio.Cause.stripFailures", "link" : "zio\/Cause.html#stripFailures:zio.Cause[Nothing]", "kind" : "final def"}, {"label" : "squashTraceWith", "tail" : "(f: (E) => Throwable): Throwable", "member" : "zio.Cause.squashTraceWith", "link" : "zio\/Cause.html#squashTraceWith(f:E=>Throwable):Throwable", "kind" : "final def"}, {"label" : "squashTrace", "tail" : "(ev: IsSubtypeOfError[E, Throwable]): Throwable", "member" : "zio.Cause.squashTrace", "link" : "zio\/Cause.html#squashTrace(implicitev:zio.IsSubtypeOfError[E,Throwable]):Throwable", "kind" : "final def"}, {"label" : "squashWith", "tail" : "(f: (E) => Throwable): Throwable", "member" : "zio.Cause.squashWith", "link" : "zio\/Cause.html#squashWith(f:E=>Throwable):Throwable", "kind" : "final def"}, {"label" : "squash", "tail" : "(ev: IsSubtypeOfError[E, Throwable]): Throwable", "member" : "zio.Cause.squash", "link" : "zio\/Cause.html#squash(implicitev:zio.IsSubtypeOfError[E,Throwable]):Throwable", "kind" : "final def"}, {"label" : "prettyPrint", "tail" : "(): String", "member" : "zio.Cause.prettyPrint", "link" : "zio\/Cause.html#prettyPrint:String", "kind" : "final def"}, {"label" : "untraced", "tail" : "(): Cause[E]", "member" : "zio.Cause.untraced", "link" : "zio\/Cause.html#untraced:zio.Cause[E]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (E) => E1): Cause[E1]", "member" : "zio.Cause.map", "link" : "zio\/Cause.html#map[E1](f:E=>E1):zio.Cause[E1]", "kind" : "final def"}, {"label" : "keepDefects", "tail" : "(): Option[Cause[Nothing]]", "member" : "zio.Cause.keepDefects", "link" : "zio\/Cause.html#keepDefects:Option[zio.Cause[Nothing]]", "kind" : "final def"}, {"label" : "fold", "tail" : "(empty: => Z, failCase: (E) => Z, dieCase: (Throwable) => Z, interruptCase: (FiberId) => Z)(thenCase: (Z, Z) => Z, bothCase: (Z, Z) => Z, tracedCase: (Z, ZTrace) => Z): Z", "member" : "zio.Cause.fold", "link" : "zio\/Cause.html#fold[Z](empty:=>Z,failCase:E=>Z,dieCase:Throwable=>Z,interruptCase:zio.FiberId=>Z)(thenCase:(Z,Z)=>Z,bothCase:(Z,Z)=>Z,tracedCase:(Z,zio.ZTrace)=>Z):Z", "kind" : "final def"}, {"label" : "isInterruptedOnly", "tail" : "(): Boolean", "member" : "zio.Cause.isInterruptedOnly", "link" : "zio\/Cause.html#isInterruptedOnly:Boolean", "kind" : "final def"}, {"label" : "isInterrupted", "tail" : "(): Boolean", "member" : "zio.Cause.isInterrupted", "link" : "zio\/Cause.html#isInterrupted:Boolean", "kind" : "final def"}, {"label" : "isFailure", "tail" : "(): Boolean", "member" : "zio.Cause.isFailure", "link" : "zio\/Cause.html#isFailure:Boolean", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "zio.Cause.isEmpty", "link" : "zio\/Cause.html#isEmpty:Boolean", "kind" : "final def"}, {"label" : "isDie", "tail" : "(): Boolean", "member" : "zio.Cause.isDie", "link" : "zio\/Cause.html#isDie:Boolean", "kind" : "final def"}, {"label" : "interruptors", "tail" : "(): Set[FiberId]", "member" : "zio.Cause.interruptors", "link" : "zio\/Cause.html#interruptors:Set[zio.FiberId]", "kind" : "final def"}, {"label" : "interruptedOnly", "tail" : "(): Boolean", "member" : "zio.Cause.interruptedOnly", "link" : "zio\/Cause.html#interruptedOnly:Boolean", "kind" : "final def"}, {"label" : "interrupted", "tail" : "(): Boolean", "member" : "zio.Cause.interrupted", "link" : "zio\/Cause.html#interrupted:Boolean", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[E, Cause[E1]]): Cause[E1]", "member" : "zio.Cause.flatten", "link" : "zio\/Cause.html#flatten[E1](implicitev:E<:<zio.Cause[E1]):zio.Cause[E1]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (E) => Cause[E1]): Cause[E1]", "member" : "zio.Cause.flatMap", "link" : "zio\/Cause.html#flatMap[E1](f:E=>zio.Cause[E1]):zio.Cause[E1]", "kind" : "final def"}, {"label" : "failures", "tail" : "(): List[E]", "member" : "zio.Cause.failures", "link" : "zio\/Cause.html#failures:List[E]", "kind" : "final def"}, {"label" : "failureTraceOrCause", "tail" : "(): Either[(E, Option[ZTrace]), Cause[Nothing]]", "member" : "zio.Cause.failureTraceOrCause", "link" : "zio\/Cause.html#failureTraceOrCause:Either[(E,Option[zio.ZTrace]),zio.Cause[Nothing]]", "kind" : "final def"}, {"label" : "failureOrCause", "tail" : "(): Either[E, Cause[Nothing]]", "member" : "zio.Cause.failureOrCause", "link" : "zio\/Cause.html#failureOrCause:Either[E,zio.Cause[Nothing]]", "kind" : "final def"}, {"label" : "failureTraceOption", "tail" : "(): Option[(E, Option[ZTrace])]", "member" : "zio.Cause.failureTraceOption", "link" : "zio\/Cause.html#failureTraceOption:Option[(E,Option[zio.ZTrace])]", "kind" : "def"}, {"label" : "failureOption", "tail" : "(): Option[E]", "member" : "zio.Cause.failureOption", "link" : "zio\/Cause.html#failureOption:Option[E]", "kind" : "def"}, {"label" : "failed", "tail" : "(): Boolean", "member" : "zio.Cause.failed", "link" : "zio\/Cause.html#failed:Boolean", "kind" : "final def"}, {"label" : "dieOption", "tail" : "(): Option[Throwable]", "member" : "zio.Cause.dieOption", "link" : "zio\/Cause.html#dieOption:Option[Throwable]", "kind" : "final def"}, {"label" : "died", "tail" : "(): Boolean", "member" : "zio.Cause.died", "link" : "zio\/Cause.html#died:Boolean", "kind" : "final def"}, {"label" : "defects", "tail" : "(): List[Throwable]", "member" : "zio.Cause.defects", "link" : "zio\/Cause.html#defects:List[Throwable]", "kind" : "final def"}, {"label" : "contains", "tail" : "(that: Cause[E1]): Boolean", "member" : "zio.Cause.contains", "link" : "zio\/Cause.html#contains[E1>:E](that:zio.Cause[E1]):Boolean", "kind" : "final def"}, {"label" : "as", "tail" : "(e: => E1): Cause[E1]", "member" : "zio.Cause.as", "link" : "zio\/Cause.html#as[E1](e:=>E1):zio.Cause[E1]", "kind" : "final def"}, {"label" : "++", "tail" : "(that: Cause[E1]): Cause[E1]", "member" : "zio.Cause.++", "link" : "zio\/Cause.html#++[E1>:E](that:zio.Cause[E1]):zio.Cause[E1]", "kind" : "final def"}, {"label" : "&&", "tail" : "(that: Cause[E1]): Cause[E1]", "member" : "zio.Cause.&&", "link" : "zio\/Cause.html#&&[E1>:E](that:zio.Cause[E1]):zio.Cause[E1]", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/Cause.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "zio\/Cause.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "zio\/Cause.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "zio\/Cause.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Cause.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Cause.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Cause.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Cause.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Cause.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Cause.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Cause.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Cause.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Cause.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Cause.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Cause.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Cause.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Cause.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Cause.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Cause.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Cause.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Cause.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Cause.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Cause.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "zio\/Cause.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "zio\/Cause.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "zio\/Cause.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "Data", "tail" : "", "member" : "zio.Cause.Data", "link" : "zio\/Cause$.html#DataextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "Both", "tail" : "", "member" : "zio.Cause.Both", "link" : "zio\/Cause$.html#Both[+E]extendsCause[E]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Then", "tail" : "", "member" : "zio.Cause.Then", "link" : "zio\/Cause$.html#Then[+E]extendsCause[E]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Meta", "tail" : "", "member" : "zio.Cause.Meta", "link" : "zio\/Cause$.html#Meta[+E]extendsCause[E]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Traced", "tail" : "", "member" : "zio.Cause.Traced", "link" : "zio\/Cause$.html#Traced[+E]extendsCause[E]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Interrupt", "tail" : "", "member" : "zio.Cause.Interrupt", "link" : "zio\/Cause$.html#InterruptextendsCause[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Die", "tail" : "", "member" : "zio.Cause.Die", "link" : "zio\/Cause$.html#DieextendsCause[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Fail", "tail" : "", "member" : "zio.Cause.Fail", "link" : "zio\/Cause$.html#Fail[+E]extendsCause[E]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Empty", "tail" : "", "member" : "zio.Cause.Empty", "link" : "zio\/Cause$.html#Empty", "kind" : "case object"}, {"label" : "flipCauseEither", "tail" : "(c: Cause[Either[E, A]]): Either[Cause[E], A]", "member" : "zio.Cause.flipCauseEither", "link" : "zio\/Cause$.html#flipCauseEither[E,A](c:zio.Cause[Either[E,A]]):Either[zio.Cause[E],A]", "kind" : "def"}, {"label" : "flipCauseOption", "tail" : "(c: Cause[Option[E]]): Option[Cause[E]]", "member" : "zio.Cause.flipCauseOption", "link" : "zio\/Cause$.html#flipCauseOption[E](c:zio.Cause[Option[E]]):Option[zio.Cause[E]]", "kind" : "def"}, {"label" : "traced", "tail" : "(cause: Cause[E], trace: ZTrace): Cause[E]", "member" : "zio.Cause.traced", "link" : "zio\/Cause$.html#traced[E](cause:zio.Cause[E],trace:zio.ZTrace):zio.Cause[E]", "kind" : "def"}, {"label" : "stackless", "tail" : "(cause: Cause[E]): Cause[E]", "member" : "zio.Cause.stackless", "link" : "zio\/Cause$.html#stackless[E](cause:zio.Cause[E]):zio.Cause[E]", "kind" : "def"}, {"label" : "stack", "tail" : "(cause: Cause[E]): Cause[E]", "member" : "zio.Cause.stack", "link" : "zio\/Cause$.html#stack[E](cause:zio.Cause[E]):zio.Cause[E]", "kind" : "def"}, {"label" : "interrupt", "tail" : "(fiberId: FiberId): Cause[Nothing]", "member" : "zio.Cause.interrupt", "link" : "zio\/Cause$.html#interrupt(fiberId:zio.FiberId):zio.Cause[Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(error: E): Cause[E]", "member" : "zio.Cause.fail", "link" : "zio\/Cause$.html#fail[E](error:E):zio.Cause[E]", "kind" : "def"}, {"label" : "die", "tail" : "(defect: Throwable): Cause[Nothing]", "member" : "zio.Cause.die", "link" : "zio\/Cause$.html#die(defect:Throwable):zio.Cause[Nothing]", "kind" : "def"}, {"label" : "empty", "tail" : ": Cause[Nothing]", "member" : "zio.Cause.empty", "link" : "zio\/Cause$.html#empty:zio.Cause[Nothing]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Cause$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Cause$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Cause$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Cause$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Cause$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Cause$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Cause$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Cause$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Cause$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Cause$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Cause$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Cause$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Cause$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Cause$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Cause$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Cause$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Cause$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Cause$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Cause$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/Cause.html", "kind" : "class"}, {"name" : "zio.Chunk", "shortDescription" : "A Chunk[A] represents a chunk of values of type A.", "object" : "zio\/Chunk$.html", "members_class" : [{"label" : "update", "tail" : "(index: Int, a1: A1): Chunk[A1]", "member" : "zio.Chunk.update", "link" : "zio\/Chunk.html#update[A1>:A](index:Int,a1:A1):zio.Chunk[A1]", "kind" : "def"}, {"label" : "right", "tail" : "(): Chunk[A]", "member" : "zio.Chunk.right", "link" : "zio\/Chunk.html#right:zio.Chunk[A]", "kind" : "def"}, {"label" : "prepend", "tail" : "(a1: A1): Chunk[A1]", "member" : "zio.Chunk.prepend", "link" : "zio\/Chunk.html#prepend[A1>:A](a1:A1):zio.Chunk[A1]", "kind" : "def"}, {"label" : "mapChunk", "tail" : "(f: (A) => B): Chunk[B]", "member" : "zio.Chunk.mapChunk", "link" : "zio\/Chunk.html#mapChunk[B](f:A=>B):zio.Chunk[B]", "kind" : "def"}, {"label" : "left", "tail" : "(): Chunk[A]", "member" : "zio.Chunk.left", "link" : "zio\/Chunk.html#left:zio.Chunk[A]", "kind" : "def"}, {"label" : "depth", "tail" : "(): Int", "member" : "zio.Chunk.depth", "link" : "zio\/Chunk.html#depth:Int", "kind" : "def"}, {"label" : "collectChunk", "tail" : "(pf: PartialFunction[A, B]): Chunk[B]", "member" : "zio.Chunk.collectChunk", "link" : "zio\/Chunk.html#collectChunk[B](pf:PartialFunction[A,B]):zio.Chunk[B]", "kind" : "def"}, {"label" : "append", "tail" : "(a1: A1): Chunk[A1]", "member" : "zio.Chunk.append", "link" : "zio\/Chunk.html#append[A1>:A](a1:A1):zio.Chunk[A1]", "kind" : "def"}, {"label" : "toArray", "tail" : "(n: Int, dest: Array[A1]): Unit", "member" : "zio.Chunk.toArray", "link" : "zio\/Chunk.html#toArray[A1>:A](n:Int,dest:Array[A1]):Unit", "kind" : "def"}, {"label" : "zipWithIndexFrom", "tail" : "(indexOffset: Int): Chunk[(A, Int)]", "member" : "zio.Chunk.zipWithIndexFrom", "link" : "zio\/Chunk.html#zipWithIndexFrom(indexOffset:Int):zio.Chunk[(A,Int)]", "kind" : "final def"}, {"label" : "zipWith", "tail" : "(that: Chunk[B])(f: (A, B) => C): Chunk[C]", "member" : "zio.Chunk.zipWith", "link" : "zio\/Chunk.html#zipWith[B,C](that:zio.Chunk[B])(f:(A,B)=>C):zio.Chunk[C]", "kind" : "final def"}, {"label" : "zipAllWith", "tail" : "(that: Chunk[B])(left: (A) => C, right: (B) => C)(both: (A, B) => C): Chunk[C]", "member" : "zio.Chunk.zipAllWith", "link" : "zio\/Chunk.html#zipAllWith[B,C](that:zio.Chunk[B])(left:A=>C,right:B=>C)(both:(A,B)=>C):zio.Chunk[C]", "kind" : "final def"}, {"label" : "zipAll", "tail" : "(that: Chunk[B]): Chunk[(Option[A], Option[B])]", "member" : "zio.Chunk.zipAll", "link" : "zio\/Chunk.html#zipAll[B](that:zio.Chunk[B]):zio.Chunk[(Option[A],Option[B])]", "kind" : "final def"}, {"label" : "zip", "tail" : "(that: Chunk[B])(zippable: Zippable[A, B]): Chunk[Out]", "member" : "zio.Chunk.zip", "link" : "zio\/Chunk.html#zip[B](that:zio.Chunk[B])(implicitzippable:zio.Zippable[A,B]):zio.Chunk[zippable.Out]", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "zio.Chunk.toString", "link" : "zio\/Chunk.html#toString():String", "kind" : "final def"}, {"label" : "toVector", "tail" : "(): Vector[A]", "member" : "zio.Chunk.toVector", "link" : "zio\/Chunk.html#toVector:Vector[A]", "kind" : "final def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "zio.Chunk.toList", "link" : "zio\/Chunk.html#toList:List[A]", "kind" : "final def"}, {"label" : "toBinaryString", "tail" : "(ev: <:<[A, Boolean]): String", "member" : "zio.Chunk.toBinaryString", "link" : "zio\/Chunk.html#toBinaryString(implicitev:A<:<Boolean):String", "kind" : "final def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[A1]): Array[A1]", "member" : "zio.Chunk.toArray", "link" : "zio\/Chunk.html#toArray[A1>:A](implicitevidence$1:scala.reflect.ClassTag[A1]):Array[A1]", "kind" : "def"}, {"label" : "takeWhileZIO", "tail" : "(p: (A) => ZIO[R, E, Boolean]): ZIO[R, E, Chunk[A]]", "member" : "zio.Chunk.takeWhileZIO", "link" : "zio\/Chunk.html#takeWhileZIO[R,E](p:A=>zio.ZIO[R,E,Boolean]):zio.ZIO[R,E,zio.Chunk[A]]", "kind" : "def"}, {"label" : "takeWhileM", "tail" : "(p: (A) => ZIO[R, E, Boolean]): ZIO[R, E, Chunk[A]]", "member" : "zio.Chunk.takeWhileM", "link" : "zio\/Chunk.html#takeWhileM[R,E](p:A=>zio.ZIO[R,E,Boolean]):zio.ZIO[R,E,zio.Chunk[A]]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(f: (A) => Boolean): Chunk[A]", "member" : "zio.Chunk.takeWhile", "link" : "zio\/Chunk.html#takeWhile(f:A=>Boolean):zio.Chunk[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Chunk[A]", "member" : "zio.Chunk.take", "link" : "zio\/Chunk.html#take(n:Int):zio.Chunk[A]", "kind" : "def"}, {"label" : "splitWhere", "tail" : "(f: (A) => Boolean): (Chunk[A], Chunk[A])", "member" : "zio.Chunk.splitWhere", "link" : "zio\/Chunk.html#splitWhere(f:A=>Boolean):(zio.Chunk[A],zio.Chunk[A])", "kind" : "final def"}, {"label" : "splitAt", "tail" : "(n: Int): (Chunk[A], Chunk[A])", "member" : "zio.Chunk.splitAt", "link" : "zio\/Chunk.html#splitAt(n:Int):(zio.Chunk[A],zio.Chunk[A])", "kind" : "final def"}, {"label" : "split", "tail" : "(n: Int): Chunk[Chunk[A]]", "member" : "zio.Chunk.split", "link" : "zio\/Chunk.html#split(n:Int):zio.Chunk[zio.Chunk[A]]", "kind" : "final def"}, {"label" : "short", "tail" : "(index: Int)(ev: <:<[A, Short]): Short", "member" : "zio.Chunk.short", "link" : "zio\/Chunk.html#short(index:Int)(implicitev:A<:<Short):Short", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(f: (A) => Either[B, C]): (Chunk[B], Chunk[C])", "member" : "zio.Chunk.partitionMap", "link" : "zio\/Chunk.html#partitionMap[B,C](f:A=>Either[B,C]):(zio.Chunk[B],zio.Chunk[C])", "kind" : "final def"}, {"label" : "nonEmptyOrElse", "tail" : "(ifEmpty: => B)(fn: (NonEmptyChunk[A]) => B): B", "member" : "zio.Chunk.nonEmptyOrElse", "link" : "zio\/Chunk.html#nonEmptyOrElse[B](ifEmpty:=>B)(fn:zio.NonEmptyChunk[A]=>B):B", "kind" : "def"}, {"label" : "materialize", "tail" : "(): Chunk[A1]", "member" : "zio.Chunk.materialize", "link" : "zio\/Chunk.html#materialize[A1>:A]:zio.Chunk[A1]", "kind" : "def"}, {"label" : "mapZIOParDiscard", "tail" : "(f: (A) => ZIO[R, E, Any]): ZIO[R, E, Unit]", "member" : "zio.Chunk.mapZIOParDiscard", "link" : "zio\/Chunk.html#mapZIOParDiscard[R,E](f:A=>zio.ZIO[R,E,Any]):zio.ZIO[R,E,Unit]", "kind" : "final def"}, {"label" : "mapZIOPar", "tail" : "(f: (A) => ZIO[R, E, B]): ZIO[R, E, Chunk[B]]", "member" : "zio.Chunk.mapZIOPar", "link" : "zio\/Chunk.html#mapZIOPar[R,E,B](f:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,zio.Chunk[B]]", "kind" : "final def"}, {"label" : "mapZIODiscard", "tail" : "(f: (A) => ZIO[R, E, Any]): ZIO[R, E, Unit]", "member" : "zio.Chunk.mapZIODiscard", "link" : "zio\/Chunk.html#mapZIODiscard[R,E](f:A=>zio.ZIO[R,E,Any]):zio.ZIO[R,E,Unit]", "kind" : "final def"}, {"label" : "mapZIO", "tail" : "(f: (A) => ZIO[R, E, B]): ZIO[R, E, Chunk[B]]", "member" : "zio.Chunk.mapZIO", "link" : "zio\/Chunk.html#mapZIO[R,E,B](f:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,zio.Chunk[B]]", "kind" : "final def"}, {"label" : "mapMPar_", "tail" : "(f: (A) => ZIO[R, E, Any]): ZIO[R, E, Unit]", "member" : "zio.Chunk.mapMPar_", "link" : "zio\/Chunk.html#mapMPar_[R,E](f:A=>zio.ZIO[R,E,Any]):zio.ZIO[R,E,Unit]", "kind" : "final def"}, {"label" : "mapMPar", "tail" : "(f: (A) => ZIO[R, E, B]): ZIO[R, E, Chunk[B]]", "member" : "zio.Chunk.mapMPar", "link" : "zio\/Chunk.html#mapMPar[R,E,B](f:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,zio.Chunk[B]]", "kind" : "final def"}, {"label" : "mapM_", "tail" : "(f: (A) => ZIO[R, E, Any]): ZIO[R, E, Unit]", "member" : "zio.Chunk.mapM_", "link" : "zio\/Chunk.html#mapM_[R,E](f:A=>zio.ZIO[R,E,Any]):zio.ZIO[R,E,Unit]", "kind" : "final def"}, {"label" : "mapM", "tail" : "(f: (A) => ZIO[R, E, B]): ZIO[R, E, Chunk[B]]", "member" : "zio.Chunk.mapM", "link" : "zio\/Chunk.html#mapM[R,E,B](f:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,zio.Chunk[B]]", "kind" : "final def"}, {"label" : "mapAccumZIO", "tail" : "(s1: S1)(f1: (S1, A) => ZIO[R, E, (S1, B)]): ZIO[R, E, (S1, Chunk[B])]", "member" : "zio.Chunk.mapAccumZIO", "link" : "zio\/Chunk.html#mapAccumZIO[R,E,S1,B](s1:S1)(f1:(S1,A)=>zio.ZIO[R,E,(S1,B)]):zio.ZIO[R,E,(S1,zio.Chunk[B])]", "kind" : "final def"}, {"label" : "mapAccumM", "tail" : "(s1: S1)(f1: (S1, A) => ZIO[R, E, (S1, B)]): ZIO[R, E, (S1, Chunk[B])]", "member" : "zio.Chunk.mapAccumM", "link" : "zio\/Chunk.html#mapAccumM[R,E,S1,B](s1:S1)(f1:(S1,A)=>zio.ZIO[R,E,(S1,B)]):zio.ZIO[R,E,(S1,zio.Chunk[B])]", "kind" : "final def"}, {"label" : "mapAccum", "tail" : "(s1: S1)(f1: (S1, A) => (S1, B)): (S1, Chunk[B])", "member" : "zio.Chunk.mapAccum", "link" : "zio\/Chunk.html#mapAccum[S1,B](s1:S1)(f1:(S1,A)=>(S1,B)):(S1,zio.Chunk[B])", "kind" : "final def"}, {"label" : "long", "tail" : "(index: Int)(ev: <:<[A, Long]): Long", "member" : "zio.Chunk.long", "link" : "zio\/Chunk.html#long(index:Int)(implicitev:A<:<Long):Long", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[A]", "member" : "zio.Chunk.lastOption", "link" : "zio\/Chunk.html#lastOption:Option[A]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "zio.Chunk.isEmpty", "link" : "zio\/Chunk.html#isEmpty:Boolean", "kind" : "final def"}, {"label" : "int", "tail" : "(index: Int)(ev: <:<[A, Int]): Int", "member" : "zio.Chunk.int", "link" : "zio\/Chunk.html#int(index:Int)(implicitev:A<:<Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(f: (A) => Boolean, from: Int): Int", "member" : "zio.Chunk.indexWhere", "link" : "zio\/Chunk.html#indexWhere(f:A=>Boolean,from:Int):Int", "kind" : "final def"}, {"label" : "headOption", "tail" : "(): Option[A]", "member" : "zio.Chunk.headOption", "link" : "zio\/Chunk.html#headOption:Option[A]", "kind" : "final def"}, {"label" : "head", "tail" : "(): A", "member" : "zio.Chunk.head", "link" : "zio\/Chunk.html#head:A", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "zio.Chunk.hashCode", "link" : "zio\/Chunk.html#hashCode():Int", "kind" : "final def"}, {"label" : "forall", "tail" : "(f: (A) => Boolean): Boolean", "member" : "zio.Chunk.forall", "link" : "zio\/Chunk.html#forall(f:A=>Boolean):Boolean", "kind" : "final def"}, {"label" : "foldWhileZIO", "tail" : "(z: S)(pred: (S) => Boolean)(f: (S, A) => ZIO[R, E, S]): ZIO[R, E, S]", "member" : "zio.Chunk.foldWhileZIO", "link" : "zio\/Chunk.html#foldWhileZIO[R,E,S](z:S)(pred:S=>Boolean)(f:(S,A)=>zio.ZIO[R,E,S]):zio.ZIO[R,E,S]", "kind" : "final def"}, {"label" : "foldWhileM", "tail" : "(z: S)(pred: (S) => Boolean)(f: (S, A) => ZIO[R, E, S]): ZIO[R, E, S]", "member" : "zio.Chunk.foldWhileM", "link" : "zio\/Chunk.html#foldWhileM[R,E,S](z:S)(pred:S=>Boolean)(f:(S,A)=>zio.ZIO[R,E,S]):zio.ZIO[R,E,S]", "kind" : "final def"}, {"label" : "foldWhile", "tail" : "(s0: S)(pred: (S) => Boolean)(f: (S, A) => S): S", "member" : "zio.Chunk.foldWhile", "link" : "zio\/Chunk.html#foldWhile[S](s0:S)(pred:S=>Boolean)(f:(S,A)=>S):S", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(s0: S)(f: (A, S) => S): S", "member" : "zio.Chunk.foldRight", "link" : "zio\/Chunk.html#foldRight[S](s0:S)(f:(A,S)=>S):S", "kind" : "def"}, {"label" : "foldZIO", "tail" : "(s: S)(f: (S, A) => ZIO[R, E, S]): ZIO[R, E, S]", "member" : "zio.Chunk.foldZIO", "link" : "zio\/Chunk.html#foldZIO[R,E,S](s:S)(f:(S,A)=>zio.ZIO[R,E,S]):zio.ZIO[R,E,S]", "kind" : "final def"}, {"label" : "foldM", "tail" : "(s: S)(f: (S, A) => ZIO[R, E, S]): ZIO[R, E, S]", "member" : "zio.Chunk.foldM", "link" : "zio\/Chunk.html#foldM[R,E,S](s:S)(f:(S,A)=>zio.ZIO[R,E,S]):zio.ZIO[R,E,S]", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(s0: S)(f: (S, A) => S): S", "member" : "zio.Chunk.foldLeft", "link" : "zio\/Chunk.html#foldLeft[S](s0:S)(f:(S,A)=>S):S", "kind" : "def"}, {"label" : "float", "tail" : "(index: Int)(ev: <:<[A, Float]): Float", "member" : "zio.Chunk.float", "link" : "zio\/Chunk.html#float(index:Int)(implicitev:A<:<Float):Float", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Chunk[B]]): Chunk[B]", "member" : "zio.Chunk.flatten", "link" : "zio\/Chunk.html#flatten[B](implicitev:A<:<zio.Chunk[B]):zio.Chunk[B]", "kind" : "final def"}, {"label" : "findZIO", "tail" : "(f: (A) => ZIO[R, E, Boolean]): ZIO[R, E, Option[A]]", "member" : "zio.Chunk.findZIO", "link" : "zio\/Chunk.html#findZIO[R,E](f:A=>zio.ZIO[R,E,Boolean]):zio.ZIO[R,E,Option[A]]", "kind" : "final def"}, {"label" : "findM", "tail" : "(f: (A) => ZIO[R, E, Boolean]): ZIO[R, E, Option[A]]", "member" : "zio.Chunk.findM", "link" : "zio\/Chunk.html#findM[R,E](f:A=>zio.ZIO[R,E,Boolean]):zio.ZIO[R,E,Option[A]]", "kind" : "final def"}, {"label" : "find", "tail" : "(f: (A) => Boolean): Option[A]", "member" : "zio.Chunk.find", "link" : "zio\/Chunk.html#find(f:A=>Boolean):Option[A]", "kind" : "final def"}, {"label" : "filterZIO", "tail" : "(f: (A) => ZIO[R, E, Boolean]): ZIO[R, E, Chunk[A]]", "member" : "zio.Chunk.filterZIO", "link" : "zio\/Chunk.html#filterZIO[R,E](f:A=>zio.ZIO[R,E,Boolean]):zio.ZIO[R,E,zio.Chunk[A]]", "kind" : "final def"}, {"label" : "filterM", "tail" : "(f: (A) => ZIO[R, E, Boolean]): ZIO[R, E, Chunk[A]]", "member" : "zio.Chunk.filterM", "link" : "zio\/Chunk.html#filterM[R,E](f:A=>zio.ZIO[R,E,Boolean]):zio.ZIO[R,E,zio.Chunk[A]]", "kind" : "final def"}, {"label" : "filter", "tail" : "(f: (A) => Boolean): Chunk[A]", "member" : "zio.Chunk.filter", "link" : "zio\/Chunk.html#filter(f:A=>Boolean):zio.Chunk[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (A) => Boolean): Boolean", "member" : "zio.Chunk.exists", "link" : "zio\/Chunk.html#exists(f:A=>Boolean):Boolean", "kind" : "final def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "zio.Chunk.equals", "link" : "zio\/Chunk.html#equals(that:Any):Boolean", "kind" : "final def"}, {"label" : "dropWhileZIO", "tail" : "(p: (A) => ZIO[R, E, Boolean]): ZIO[R, E, Chunk[A]]", "member" : "zio.Chunk.dropWhileZIO", "link" : "zio\/Chunk.html#dropWhileZIO[R,E](p:A=>zio.ZIO[R,E,Boolean]):zio.ZIO[R,E,zio.Chunk[A]]", "kind" : "def"}, {"label" : "dropWhileM", "tail" : "(p: (A) => ZIO[R, E, Boolean]): ZIO[R, E, Chunk[A]]", "member" : "zio.Chunk.dropWhileM", "link" : "zio\/Chunk.html#dropWhileM[R,E](p:A=>zio.ZIO[R,E,Boolean]):zio.ZIO[R,E,zio.Chunk[A]]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(f: (A) => Boolean): Chunk[A]", "member" : "zio.Chunk.dropWhile", "link" : "zio\/Chunk.html#dropWhile(f:A=>Boolean):zio.Chunk[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Chunk[A]", "member" : "zio.Chunk.drop", "link" : "zio\/Chunk.html#drop(n:Int):zio.Chunk[A]", "kind" : "def"}, {"label" : "double", "tail" : "(index: Int)(ev: <:<[A, Double]): Double", "member" : "zio.Chunk.double", "link" : "zio\/Chunk.html#double(index:Int)(implicitev:A<:<Double):Double", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: Chunk[B])(f: (A, B) => Boolean): Boolean", "member" : "zio.Chunk.corresponds", "link" : "zio\/Chunk.html#corresponds[B](that:zio.Chunk[B])(f:(A,B)=>Boolean):Boolean", "kind" : "final def"}, {"label" : "collectZIO", "tail" : "(pf: PartialFunction[A, ZIO[R, E, B]]): ZIO[R, E, Chunk[B]]", "member" : "zio.Chunk.collectZIO", "link" : "zio\/Chunk.html#collectZIO[R,E,B](pf:PartialFunction[A,zio.ZIO[R,E,B]]):zio.ZIO[R,E,zio.Chunk[B]]", "kind" : "def"}, {"label" : "collectWhileZIO", "tail" : "(pf: PartialFunction[A, ZIO[R, E, B]]): ZIO[R, E, Chunk[B]]", "member" : "zio.Chunk.collectWhileZIO", "link" : "zio\/Chunk.html#collectWhileZIO[R,E,B](pf:PartialFunction[A,zio.ZIO[R,E,B]]):zio.ZIO[R,E,zio.Chunk[B]]", "kind" : "def"}, {"label" : "collectWhileM", "tail" : "(pf: PartialFunction[A, ZIO[R, E, B]]): ZIO[R, E, Chunk[B]]", "member" : "zio.Chunk.collectWhileM", "link" : "zio\/Chunk.html#collectWhileM[R,E,B](pf:PartialFunction[A,zio.ZIO[R,E,B]]):zio.ZIO[R,E,zio.Chunk[B]]", "kind" : "def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[A, B]): Chunk[B]", "member" : "zio.Chunk.collectWhile", "link" : "zio\/Chunk.html#collectWhile[B](pf:PartialFunction[A,B]):zio.Chunk[B]", "kind" : "def"}, {"label" : "collectM", "tail" : "(pf: PartialFunction[A, ZIO[R, E, B]]): ZIO[R, E, Chunk[B]]", "member" : "zio.Chunk.collectM", "link" : "zio\/Chunk.html#collectM[R,E,B](pf:PartialFunction[A,zio.ZIO[R,E,B]]):zio.ZIO[R,E,zio.Chunk[B]]", "kind" : "def"}, {"label" : "char", "tail" : "(index: Int)(ev: <:<[A, Char]): Char", "member" : "zio.Chunk.char", "link" : "zio\/Chunk.html#char(index:Int)(implicitev:A<:<Char):Char", "kind" : "def"}, {"label" : "byte", "tail" : "(index: Int)(ev: <:<[A, Byte]): Byte", "member" : "zio.Chunk.byte", "link" : "zio\/Chunk.html#byte(index:Int)(implicitev:A<:<Byte):Byte", "kind" : "def"}, {"label" : "boolean", "tail" : "(index: Int)(ev: <:<[A, Boolean]): Boolean", "member" : "zio.Chunk.boolean", "link" : "zio\/Chunk.html#boolean(index:Int)(implicitev:A<:<Boolean):Boolean", "kind" : "def"}, {"label" : "asBits", "tail" : "(ev: <:<[A, Byte]): Chunk[Boolean]", "member" : "zio.Chunk.asBits", "link" : "zio\/Chunk.html#asBits(implicitev:A<:<Byte):zio.Chunk[Boolean]", "kind" : "final def"}, {"label" : "++", "tail" : "(that: NonEmptyChunk[A1]): NonEmptyChunk[A1]", "member" : "zio.Chunk.++", "link" : "zio\/Chunk.html#++[A1>:A](that:zio.NonEmptyChunk[A1]):zio.NonEmptyChunk[A1]", "kind" : "final def"}, {"label" : "++", "tail" : "(that: Chunk[A1]): Chunk[A1]", "member" : "zio.Chunk.++", "link" : "zio\/Chunk.html#++[A1>:A](that:zio.Chunk[A1]):zio.Chunk[A1]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): Chunk[(A, Int)]", "member" : "zio.ChunkLike.zipWithIndex", "link" : "zio\/Chunk.html#zipWithIndex:zio.Chunk[(A,Int)]", "kind" : "final def"}, {"label" : "updated", "tail" : "(index: Int, elem: A1): Chunk[A1]", "member" : "zio.ChunkLike.updated", "link" : "zio\/Chunk.html#updated[A1>:A](index:Int,elem:A1):zio.Chunk[A1]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Chunk[B]", "member" : "zio.ChunkLike.map", "link" : "zio\/Chunk.html#map[B](f:A=>B):zio.Chunk[B]", "kind" : "final def"}, {"label" : "iterableFactory", "tail" : ": SeqFactory[Chunk]", "member" : "zio.ChunkLike.iterableFactory", "link" : "zio\/Chunk.html#iterableFactory:scala.collection.SeqFactory[zio.Chunk]", "kind" : "val"}, {"label" : "flatMap", "tail" : "(f: (A) => IterableOnce[B]): Chunk[B]", "member" : "zio.ChunkLike.flatMap", "link" : "zio\/Chunk.html#flatMap[B](f:A=>IterableOnce[B]):zio.Chunk[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Chunk[B]", "member" : "zio.ChunkLike.collect", "link" : "zio\/Chunk.html#collect[B](pf:PartialFunction[A,B]):zio.Chunk[B]", "kind" : "def"}, {"label" : "prepended", "tail" : "(a1: A1): Chunk[A1]", "member" : "zio.ChunkLike.prepended", "link" : "zio\/Chunk.html#prepended[A1>:A](a1:A1):zio.Chunk[A1]", "kind" : "final def"}, {"label" : "appended", "tail" : "(a1: A1): Chunk[A1]", "member" : "zio.ChunkLike.appended", "link" : "zio\/Chunk.html#appended[A1>:A](a1:A1):zio.Chunk[A1]", "kind" : "final def"}, {"label" : "sorted", "tail" : "(ord: Ordering[B]): Chunk[A]", "member" : "scala.collection.immutable.StrictOptimizedSeqOps.sorted", "link" : "zio\/Chunk.html#sorted[B>:A](implicitord:Ordering[B]):C", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, other: IterableOnce[B], replaced: Int): Chunk[B]", "member" : "scala.collection.immutable.StrictOptimizedSeqOps.patch", "link" : "zio\/Chunk.html#patch[B>:A](from:Int,other:scala.collection.IterableOnce[B],replaced:Int):CC[B]", "kind" : "def"}, {"label" : "distinctBy", "tail" : "(f: (A) => B): Chunk[A]", "member" : "scala.collection.immutable.StrictOptimizedSeqOps.distinctBy", "link" : "zio\/Chunk.html#distinctBy[B](f:A=>B):C", "kind" : "def"}, {"label" : "intersect", "tail" : "(that: Seq[B]): Chunk[A]", "member" : "scala.collection.StrictOptimizedSeqOps.intersect", "link" : "zio\/Chunk.html#intersect[B>:A](that:scala.collection.Seq[B]):C", "kind" : "def"}, {"label" : "diff", "tail" : "(that: Seq[B]): Chunk[A]", "member" : "scala.collection.StrictOptimizedSeqOps.diff", "link" : "zio\/Chunk.html#diff[B>:A](that:scala.collection.Seq[B]):C", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: B): Chunk[B]", "member" : "scala.collection.StrictOptimizedSeqOps.padTo", "link" : "zio\/Chunk.html#padTo[B>:A](len:Int,elem:B):CC[B]", "kind" : "def"}, {"label" : "prependedAll", "tail" : "(prefix: IterableOnce[B]): Chunk[B]", "member" : "scala.collection.StrictOptimizedSeqOps.prependedAll", "link" : "zio\/Chunk.html#prependedAll[B>:A](prefix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "appendedAll", "tail" : "(suffix: IterableOnce[B]): Chunk[B]", "member" : "scala.collection.StrictOptimizedSeqOps.appendedAll", "link" : "zio\/Chunk.html#appendedAll[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Chunk[A]", "member" : "scala.collection.StrictOptimizedIterableOps.dropRight", "link" : "zio\/Chunk.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Chunk[A]", "member" : "scala.collection.StrictOptimizedIterableOps.takeRight", "link" : "zio\/Chunk.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (A) => U): Chunk[A]", "member" : "scala.collection.StrictOptimizedIterableOps.tapEach", "link" : "zio\/Chunk.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "filterImpl", "tail" : "(pred: (A) => Boolean, isFlipped: Boolean): Chunk[A]", "member" : "scala.collection.StrictOptimizedIterableOps.filterImpl", "link" : "zio\/Chunk.html#filterImpl(pred:A=>Boolean,isFlipped:Boolean):C", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (A) => Boolean): Chunk[A]", "member" : "scala.collection.StrictOptimizedIterableOps.filterNot", "link" : "zio\/Chunk.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, A) => B): Chunk[B]", "member" : "scala.collection.StrictOptimizedIterableOps.scanLeft", "link" : "zio\/Chunk.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "strictOptimizedZip", "tail" : "(that: IterableOnce[B], b: Builder[(A, B), C2]): C2", "member" : "scala.collection.StrictOptimizedIterableOps.strictOptimizedZip", "link" : "zio\/Chunk.html#strictOptimizedZip[B,C2](that:scala.collection.IterableOnce[B],b:scala.collection.mutable.Builder[(A,B),C2]):C2", "kind" : "final def"}, {"label" : "zip", "tail" : "(that: IterableOnce[B]): Chunk[(A, B)]", "member" : "scala.collection.StrictOptimizedIterableOps.zip", "link" : "zio\/Chunk.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "strictOptimizedFlatten", "tail" : "(b: Builder[B, C2])(toIterableOnce: (A) => IterableOnce[B]): C2", "member" : "scala.collection.StrictOptimizedIterableOps.strictOptimizedFlatten", "link" : "zio\/Chunk.html#strictOptimizedFlatten[B,C2](b:scala.collection.mutable.Builder[B,C2])(implicittoIterableOnce:A=>scala.collection.IterableOnce[B]):C2", "kind" : "final def"}, {"label" : "flatten", "tail" : "(toIterableOnce: (A) => IterableOnce[B]): Chunk[B]", "member" : "scala.collection.StrictOptimizedIterableOps.flatten", "link" : "zio\/Chunk.html#flatten[B](implicittoIterableOnce:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "strictOptimizedCollect", "tail" : "(b: Builder[B, C2], pf: PartialFunction[A, B]): C2", "member" : "scala.collection.StrictOptimizedIterableOps.strictOptimizedCollect", "link" : "zio\/Chunk.html#strictOptimizedCollect[B,C2](b:scala.collection.mutable.Builder[B,C2],pf:PartialFunction[A,B]):C2", "kind" : "final def"}, {"label" : "strictOptimizedConcat", "tail" : "(that: IterableOnce[B], b: Builder[B, C2]): C2", "member" : "scala.collection.StrictOptimizedIterableOps.strictOptimizedConcat", "link" : "zio\/Chunk.html#strictOptimizedConcat[B>:A,C2](that:scala.collection.IterableOnce[B],b:scala.collection.mutable.Builder[B,C2]):C2", "kind" : "final def"}, {"label" : "strictOptimizedFlatMap", "tail" : "(b: Builder[B, C2], f: (A) => IterableOnce[B]): C2", "member" : "scala.collection.StrictOptimizedIterableOps.strictOptimizedFlatMap", "link" : "zio\/Chunk.html#strictOptimizedFlatMap[B,C2](b:scala.collection.mutable.Builder[B,C2],f:A=>scala.collection.IterableOnce[B]):C2", "kind" : "final def"}, {"label" : "strictOptimizedMap", "tail" : "(b: Builder[B, C2], f: (A) => B): C2", "member" : "scala.collection.StrictOptimizedIterableOps.strictOptimizedMap", "link" : "zio\/Chunk.html#strictOptimizedMap[B,C2](b:scala.collection.mutable.Builder[B,C2],f:A=>B):C2", "kind" : "final def"}, {"label" : "unzip3", "tail" : "(asTriple: (A) => (A1, A2, A3)): (Chunk[A1], Chunk[A2], Chunk[A3])", "member" : "scala.collection.StrictOptimizedIterableOps.unzip3", "link" : "zio\/Chunk.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (A) => (A1, A2)): (Chunk[A1], Chunk[A2])", "member" : "scala.collection.StrictOptimizedIterableOps.unzip", "link" : "zio\/Chunk.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "span", "tail" : "(p: (A) => Boolean): (Chunk[A], Chunk[A])", "member" : "scala.collection.StrictOptimizedIterableOps.span", "link" : "zio\/Chunk.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (A) => Boolean): (Chunk[A], Chunk[A])", "member" : "scala.collection.StrictOptimizedIterableOps.partition", "link" : "zio\/Chunk.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "applyPreferredMaxLength", "tail" : "(): Int", "member" : "scala.collection.immutable.IndexedSeq.applyPreferredMaxLength", "link" : "zio\/Chunk.html#applyPreferredMaxLength:Int", "kind" : "def"}, {"label" : "sameElements", "tail" : "(o: IterableOnce[B]): Boolean", "member" : "scala.collection.immutable.IndexedSeq.sameElements", "link" : "zio\/Chunk.html#sameElements[B>:A](o:scala.collection.IterableOnce[B]):Boolean", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.immutable.IndexedSeq.canEqual", "link" : "zio\/Chunk.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[A]", "member" : "scala.collection.immutable.IndexedSeq.toIndexedSeq", "link" : "zio\/Chunk.html#toIndexedSeq:IndexedSeq[A]", "kind" : "final def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Chunk[A]", "member" : "scala.collection.immutable.IndexedSeqOps.slice", "link" : "zio\/Chunk.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.IndexedSeq.stringPrefix", "link" : "zio\/Chunk.html#stringPrefix:String", "kind" : "def"}, {"label" : "search", "tail" : "(elem: B, from: Int, to: Int)(ord: Ordering[B]): SearchResult", "member" : "scala.collection.IndexedSeqOps.search", "link" : "zio\/Chunk.html#search[B>:A](elem:B,from:Int,to:Int)(implicitord:scala.math.Ordering[B]):collection.Searching.SearchResult", "kind" : "def"}, {"label" : "search", "tail" : "(elem: B)(ord: Ordering[B]): SearchResult", "member" : "scala.collection.IndexedSeqOps.search", "link" : "zio\/Chunk.html#search[B>:A](elem:B)(implicitord:scala.math.Ordering[B]):collection.Searching.SearchResult", "kind" : "def"}, {"label" : "lengthCompare", "tail" : "(that: Iterable[_]): Int", "member" : "scala.collection.IndexedSeqOps.lengthCompare", "link" : "zio\/Chunk.html#lengthCompare(that:Iterable[_]):Int", "kind" : "final def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IndexedSeqOps.knownSize", "link" : "zio\/Chunk.html#knownSize:Int", "kind" : "def"}, {"label" : "lengthCompare", "tail" : "(len: Int): Int", "member" : "scala.collection.IndexedSeqOps.lengthCompare", "link" : "zio\/Chunk.html#lengthCompare(len:Int):Int", "kind" : "final def"}, {"label" : "last", "tail" : "(): A", "member" : "scala.collection.IndexedSeqOps.last", "link" : "zio\/Chunk.html#last:A", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Chunk[A]", "member" : "scala.collection.IndexedSeqOps.reverse", "link" : "zio\/Chunk.html#reverse:C", "kind" : "def"}, {"label" : "reversed", "tail" : "(): Iterable[A]", "member" : "scala.collection.IndexedSeqOps.reversed", "link" : "zio\/Chunk.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): IndexedSeqView[A]", "member" : "scala.collection.IndexedSeqOps.view", "link" : "zio\/Chunk.html#view(from:Int,until:Int):scala.collection.IndexedSeqView[A]", "kind" : "def"}, {"label" : "view", "tail" : "(): IndexedSeqView[A]", "member" : "scala.collection.IndexedSeqOps.view", "link" : "zio\/Chunk.html#view:scala.collection.IndexedSeqView[A]", "kind" : "def"}, {"label" : "reverseIterator", "tail" : "(): Iterator[A]", "member" : "scala.collection.IndexedSeqOps.reverseIterator", "link" : "zio\/Chunk.html#reverseIterator:Iterator[A]", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[A, S]): S with EfficientSplit", "member" : "scala.collection.IndexedSeqOps.stepper", "link" : "zio\/Chunk.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):Swithcollection.Stepper.EfficientSplit", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[A]", "member" : "scala.collection.IndexedSeqOps.iterator", "link" : "zio\/Chunk.html#iterator:Iterator[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Chunk.this.type", "member" : "scala.collection.immutable.Seq.toSeq", "link" : "zio\/Chunk.html#toSeq:Seq.this.type", "kind" : "final def"}, {"label" : "occCounts", "tail" : "(sq: Seq[B]): Map[B, Int]", "member" : "scala.collection.SeqOps.occCounts", "link" : "zio\/Chunk.html#occCounts[B](sq:scala.collection.Seq[B]):scala.collection.mutable.Map[B,Int]", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: Seq[B])(p: (A, B) => Boolean): Boolean", "member" : "scala.collection.SeqOps.corresponds", "link" : "zio\/Chunk.html#corresponds[B](that:scala.collection.Seq[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "lengthIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.SeqOps.lengthIs", "link" : "zio\/Chunk.html#lengthIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(that: Iterable[_]): Int", "member" : "scala.collection.SeqOps.sizeCompare", "link" : "zio\/Chunk.html#sizeCompare(that:Iterable[_]):Int", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.SeqOps.sizeCompare", "link" : "zio\/Chunk.html#sizeCompare(otherSize:Int):Int", "kind" : "final def"}, {"label" : "indices", "tail" : "(): Range", "member" : "scala.collection.SeqOps.indices", "link" : "zio\/Chunk.html#indices:scala.collection.immutable.Range", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (A) => B)(ord: Ordering[B]): Chunk[A]", "member" : "scala.collection.SeqOps.sortBy", "link" : "zio\/Chunk.html#sortBy[B](f:A=>B)(implicitord:Ordering[B]):C", "kind" : "def"}, {"label" : "sortWith", "tail" : "(lt: (A, A) => Boolean): Chunk[A]", "member" : "scala.collection.SeqOps.sortWith", "link" : "zio\/Chunk.html#sortWith(lt:(A,A)=>Boolean):C", "kind" : "def"}, {"label" : "combinations", "tail" : "(n: Int): Iterator[Chunk[A]]", "member" : "scala.collection.SeqOps.combinations", "link" : "zio\/Chunk.html#combinations(n:Int):Iterator[C]", "kind" : "def"}, {"label" : "permutations", "tail" : "(): Iterator[Chunk[A]]", "member" : "scala.collection.SeqOps.permutations", "link" : "zio\/Chunk.html#permutations:Iterator[C]", "kind" : "def"}, {"label" : "reverseMap", "tail" : "(f: (A) => B): Chunk[B]", "member" : "scala.collection.SeqOps.reverseMap", "link" : "zio\/Chunk.html#reverseMap[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: A1): Boolean", "member" : "scala.collection.SeqOps.contains", "link" : "zio\/Chunk.html#contains[A1>:A](elem:A1):Boolean", "kind" : "def"}, {"label" : "containsSlice", "tail" : "(that: Seq[B]): Boolean", "member" : "scala.collection.SeqOps.containsSlice", "link" : "zio\/Chunk.html#containsSlice[B>:A](that:scala.collection.Seq[B]):Boolean", "kind" : "def"}, {"label" : "findLast", "tail" : "(p: (A) => Boolean): Option[A]", "member" : "scala.collection.SeqOps.findLast", "link" : "zio\/Chunk.html#findLast(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: Seq[B]): Int", "member" : "scala.collection.SeqOps.lastIndexOfSlice", "link" : "zio\/Chunk.html#lastIndexOfSlice[B>:A](that:scala.collection.Seq[B]):Int", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: Seq[B], end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexOfSlice", "link" : "zio\/Chunk.html#lastIndexOfSlice[B>:A](that:scala.collection.Seq[B],end:Int):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: Seq[B]): Int", "member" : "scala.collection.SeqOps.indexOfSlice", "link" : "zio\/Chunk.html#indexOfSlice[B>:A](that:scala.collection.Seq[B]):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: Seq[B], from: Int): Int", "member" : "scala.collection.SeqOps.indexOfSlice", "link" : "zio\/Chunk.html#indexOfSlice[B>:A](that:scala.collection.Seq[B],from:Int):Int", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.SeqOps.lastIndexWhere", "link" : "zio\/Chunk.html#lastIndexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (A) => Boolean, end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexWhere", "link" : "zio\/Chunk.html#lastIndexWhere(p:A=>Boolean,end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B, end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexOf", "link" : "zio\/Chunk.html#lastIndexOf[B>:A](elem:B,end:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.SeqOps.indexOf", "link" : "zio\/Chunk.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.SeqOps.indexOf", "link" : "zio\/Chunk.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.SeqOps.indexWhere", "link" : "zio\/Chunk.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "prefixLength", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.SeqOps.prefixLength", "link" : "zio\/Chunk.html#prefixLength(p:A=>Boolean):Int", "kind" : "final def"}, {"label" : "segmentLength", "tail" : "(p: (A) => Boolean, from: Int): Int", "member" : "scala.collection.SeqOps.segmentLength", "link" : "zio\/Chunk.html#segmentLength(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "segmentLength", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.SeqOps.segmentLength", "link" : "zio\/Chunk.html#segmentLength(p:A=>Boolean):Int", "kind" : "final def"}, {"label" : "isDefinedAt", "tail" : "(idx: Int): Boolean", "member" : "scala.collection.SeqOps.isDefinedAt", "link" : "zio\/Chunk.html#isDefinedAt(idx:Int):Boolean", "kind" : "def"}, {"label" : "endsWith", "tail" : "(that: Iterable[B]): Boolean", "member" : "scala.collection.SeqOps.endsWith", "link" : "zio\/Chunk.html#endsWith[B>:A](that:Iterable[B]):Boolean", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: IterableOnce[B], offset: Int): Boolean", "member" : "scala.collection.SeqOps.startsWith", "link" : "zio\/Chunk.html#startsWith[B>:A](that:scala.collection.IterableOnce[B],offset:Int):Boolean", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Chunk[A]", "member" : "scala.collection.SeqOps.distinct", "link" : "zio\/Chunk.html#distinct:C", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.SeqOps.size", "link" : "zio\/Chunk.html#size:Int", "kind" : "final def"}, {"label" : "union", "tail" : "(that: Seq[B]): Chunk[B]", "member" : "scala.collection.SeqOps.union", "link" : "zio\/Chunk.html#union[B>:A](that:scala.collection.Seq[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: IterableOnce[B]): Chunk[B]", "member" : "scala.collection.SeqOps.concat", "link" : "zio\/Chunk.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : ":++", "tail" : "(suffix: IterableOnce[B]): Chunk[B]", "member" : "scala.collection.SeqOps.:++", "link" : "zio\/Chunk.html#:++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "++:", "tail" : "(prefix: IterableOnce[B]): Chunk[B]", "member" : "scala.collection.SeqOps.++:", "link" : "zio\/Chunk.html#++:[B>:A](prefix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Chunk[B]", "member" : "scala.collection.SeqOps.:+", "link" : "zio\/Chunk.html#:+[B>:A](elem:B):CC[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Chunk[B]", "member" : "scala.collection.SeqOps.+:", "link" : "zio\/Chunk.html#+:[B>:A](elem:B):CC[B]", "kind" : "final def"}, {"label" : "runWith", "tail" : "(action: (A) => U): (Int) => Boolean", "member" : "scala.PartialFunction.runWith", "link" : "zio\/Chunk.html#runWith[U](action:B=>U):A=>Boolean", "kind" : "def"}, {"label" : "applyOrElse", "tail" : "(x: A1, default: (A1) => B1): B1", "member" : "scala.PartialFunction.applyOrElse", "link" : "zio\/Chunk.html#applyOrElse[A1<:A,B1>:B](x:A1,default:A1=>B1):B1", "kind" : "def"}, {"label" : "lift", "tail" : "(): (Int) => Option[A]", "member" : "scala.PartialFunction.lift", "link" : "zio\/Chunk.html#lift:A=>Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(k: PartialFunction[R, Int]): PartialFunction[R, A]", "member" : "scala.PartialFunction.compose", "link" : "zio\/Chunk.html#compose[R](k:PartialFunction[R,A]):PartialFunction[R,B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: PartialFunction[A, C]): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "zio\/Chunk.html#andThen[C](k:PartialFunction[B,C]):PartialFunction[A,C]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: (A) => C): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "zio\/Chunk.html#andThen[C](k:B=>C):PartialFunction[A,C]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: PartialFunction[A1, B1]): PartialFunction[A1, B1]", "member" : "scala.PartialFunction.orElse", "link" : "zio\/Chunk.html#orElse[A1<:A,B1>:B](that:PartialFunction[A1,B1]):PartialFunction[A1,B1]", "kind" : "def"}, {"label" : "elementWise", "tail" : "(): ElementWiseExtractor[Int, A]", "member" : "scala.PartialFunction.elementWise", "link" : "zio\/Chunk.html#elementWise:PartialFunction.ElementWiseExtractor[A,B]", "kind" : "def"}, {"label" : "unapply", "tail" : "(a: Int): Option[A]", "member" : "scala.PartialFunction.unapply", "link" : "zio\/Chunk.html#unapply(a:A):Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Int): (A) => A", "member" : "scala.Function1.compose", "link" : "zio\/Chunk.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: Iterable[B]): LazyZip2[A, B, Chunk.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "zio\/Chunk.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "zio\/Chunk.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): Chunk.this.type", "member" : "scala.collection.Iterable.seq", "link" : "zio\/Chunk.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "coll", "tail" : "(): Chunk.this.type", "member" : "scala.collection.Iterable.coll", "link" : "zio\/Chunk.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): Chunk.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "zio\/Chunk.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): Chunk[A]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "zio\/Chunk.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[A, Chunk[A]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "zio\/Chunk.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: IterableOnce[A]): Chunk[A]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "zio\/Chunk.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Chunk[A]]", "member" : "scala.collection.IterableOps.inits", "link" : "zio\/Chunk.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Chunk[A]]", "member" : "scala.collection.IterableOps.tails", "link" : "zio\/Chunk.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Iterable[B], thisElem: A1, thatElem: B): Chunk[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "zio\/Chunk.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: IterableOnce[B]): Chunk[B]", "member" : "scala.collection.IterableOps.++", "link" : "zio\/Chunk.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (A, B) => B): Chunk[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "zio\/Chunk.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): Chunk[B]", "member" : "scala.collection.IterableOps.scan", "link" : "zio\/Chunk.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: (A) => K)(f: (A) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "zio\/Chunk.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: (A) => K)(f: (A) => B): Map[K, Chunk[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "zio\/Chunk.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (A) => K): Map[K, Chunk[A]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "zio\/Chunk.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "init", "tail" : "(): Chunk[A]", "member" : "scala.collection.IterableOps.init", "link" : "zio\/Chunk.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): Chunk[A]", "member" : "scala.collection.IterableOps.tail", "link" : "zio\/Chunk.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[Chunk[A]]", "member" : "scala.collection.IterableOps.sliding", "link" : "zio\/Chunk.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[Chunk[A]]", "member" : "scala.collection.IterableOps.sliding", "link" : "zio\/Chunk.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[Chunk[A]]", "member" : "scala.collection.IterableOps.grouped", "link" : "zio\/Chunk.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): WithFilter[A, [_]Chunk[_]]", "member" : "scala.collection.IterableOps.withFilter", "link" : "zio\/Chunk.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: (A) => Iterable[B]): Chunk[Chunk[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "zio\/Chunk.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "zio\/Chunk.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "companion", "tail" : "(): IterableFactory[[_]Chunk[_]]", "member" : "scala.collection.IterableOps.companion", "link" : "zio\/Chunk.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): Chunk[A]", "member" : "scala.collection.IterableOps.repr", "link" : "zio\/Chunk.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "zio\/Chunk.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[A]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "zio\/Chunk.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "zio\/Chunk.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): Stream[A]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "zio\/Chunk.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "zio\/Chunk.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[A, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "zio\/Chunk.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[A]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "zio\/Chunk.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[A, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "zio\/Chunk.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "zio\/Chunk.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "zio\/Chunk.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "zio\/Chunk.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "zio\/Chunk.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "zio\/Chunk.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "zio\/Chunk.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: IterableOnce[B])(p: (A, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "zio\/Chunk.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, A) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "zio\/Chunk.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[A, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "zio\/Chunk.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (A) => B)(cmp: Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "zio\/Chunk.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (A) => B)(cmp: Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "zio\/Chunk.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (A) => B)(cmp: Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "zio\/Chunk.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (A) => B)(cmp: Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "zio\/Chunk.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "zio\/Chunk.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.max", "link" : "zio\/Chunk.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "zio\/Chunk.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.min", "link" : "zio\/Chunk.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "zio\/Chunk.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "zio\/Chunk.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "zio\/Chunk.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "zio\/Chunk.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "zio\/Chunk.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "zio\/Chunk.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "zio\/Chunk.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (A, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "zio\/Chunk.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, A) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "zio\/Chunk.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "zio\/Chunk.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "zio\/Chunk.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "zio\/Chunk.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "zio\/Chunk.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "zio\/Chunk.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "zio\/Chunk.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "zio\/Chunk.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "count", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "zio\/Chunk.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "zio\/Chunk.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "zio\/Chunk.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Chunk.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Chunk.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Chunk.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Chunk.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Chunk.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Chunk.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Chunk.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Chunk.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Chunk.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Chunk.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Chunk.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Chunk.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Chunk.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Chunk.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Chunk.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Chunk.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.SeqOps.length", "link" : "zio\/Chunk.html#length:Int", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(i: Int): A", "member" : "scala.collection.SeqOps.apply", "link" : "zio\/Chunk.html#apply(i:Int):A", "kind" : "abstract def"}], "members_object" : [{"label" : "BooleanArray", "tail" : "", "member" : "zio.Chunk.BooleanArray", "link" : "zio\/Chunk$.html#BooleanArrayextendsChunk.Arr[Boolean]withProductwithSerializable", "kind" : "final case class"}, {"label" : "ShortArray", "tail" : "", "member" : "zio.Chunk.ShortArray", "link" : "zio\/Chunk$.html#ShortArrayextendsChunk.Arr[Short]withProductwithSerializable", "kind" : "final case class"}, {"label" : "FloatArray", "tail" : "", "member" : "zio.Chunk.FloatArray", "link" : "zio\/Chunk$.html#FloatArrayextendsChunk.Arr[Float]withProductwithSerializable", "kind" : "final case class"}, {"label" : "DoubleArray", "tail" : "", "member" : "zio.Chunk.DoubleArray", "link" : "zio\/Chunk$.html#DoubleArrayextendsChunk.Arr[Double]withProductwithSerializable", "kind" : "final case class"}, {"label" : "LongArray", "tail" : "", "member" : "zio.Chunk.LongArray", "link" : "zio\/Chunk$.html#LongArrayextendsChunk.Arr[Long]withProductwithSerializable", "kind" : "final case class"}, {"label" : "IntArray", "tail" : "", "member" : "zio.Chunk.IntArray", "link" : "zio\/Chunk$.html#IntArrayextendsChunk.Arr[Int]withProductwithSerializable", "kind" : "final case class"}, {"label" : "CharArray", "tail" : "", "member" : "zio.Chunk.CharArray", "link" : "zio\/Chunk$.html#CharArrayextendsChunk.Arr[Char]withProductwithSerializable", "kind" : "final case class"}, {"label" : "ByteArray", "tail" : "", "member" : "zio.Chunk.ByteArray", "link" : "zio\/Chunk$.html#ByteArrayextendsChunk.Arr[Byte]withProductwithSerializable", "kind" : "final case class"}, {"label" : "AnyRefArray", "tail" : "", "member" : "zio.Chunk.AnyRefArray", "link" : "zio\/Chunk$.html#AnyRefArray[A<:AnyRef]extendsChunk.Arr[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "unit", "tail" : ": Chunk[Unit]", "member" : "zio.Chunk.unit", "link" : "zio\/Chunk$.html#unit:zio.Chunk[Unit]", "kind" : "val"}, {"label" : "unfoldZIO", "tail" : "(s: S)(f: (S) => ZIO[R, E, Option[(A, S)]]): ZIO[R, E, Chunk[A]]", "member" : "zio.Chunk.unfoldZIO", "link" : "zio\/Chunk$.html#unfoldZIO[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,Option[(A,S)]]):zio.ZIO[R,E,zio.Chunk[A]]", "kind" : "def"}, {"label" : "unfoldM", "tail" : "(s: S)(f: (S) => ZIO[R, E, Option[(A, S)]]): ZIO[R, E, Chunk[A]]", "member" : "zio.Chunk.unfoldM", "link" : "zio\/Chunk$.html#unfoldM[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,Option[(A,S)]]):zio.ZIO[R,E,zio.Chunk[A]]", "kind" : "def"}, {"label" : "unfold", "tail" : "(s: S)(f: (S) => Option[(A, S)]): Chunk[A]", "member" : "zio.Chunk.unfold", "link" : "zio\/Chunk$.html#unfold[S,A](s:S)(f:S=>Option[(A,S)]):zio.Chunk[A]", "kind" : "def"}, {"label" : "succeed", "tail" : "(a: A): Chunk[A]", "member" : "zio.Chunk.succeed", "link" : "zio\/Chunk$.html#succeed[A](a:A):zio.Chunk[A]", "kind" : "def"}, {"label" : "single", "tail" : "(a: A): Chunk[A]", "member" : "zio.Chunk.single", "link" : "zio\/Chunk$.html#single[A](a:A):zio.Chunk[A]", "kind" : "def"}, {"label" : "fill", "tail" : "(n: Int)(elem: => A): Chunk[A]", "member" : "zio.Chunk.fill", "link" : "zio\/Chunk$.html#fill[A](n:Int)(elem:=>A):zio.Chunk[A]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(iterator: Iterator[A]): Chunk[A]", "member" : "zio.Chunk.fromIterator", "link" : "zio\/Chunk$.html#fromIterator[A](iterator:Iterator[A]):zio.Chunk[A]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(it: Iterable[A]): Chunk[A]", "member" : "zio.Chunk.fromIterable", "link" : "zio\/Chunk$.html#fromIterable[A](it:Iterable[A]):zio.Chunk[A]", "kind" : "def"}, {"label" : "fromShortBuffer", "tail" : "(buffer: ShortBuffer): Chunk[Short]", "member" : "zio.Chunk.fromShortBuffer", "link" : "zio\/Chunk$.html#fromShortBuffer(buffer:java.nio.ShortBuffer):zio.Chunk[Short]", "kind" : "def"}, {"label" : "fromLongBuffer", "tail" : "(buffer: LongBuffer): Chunk[Long]", "member" : "zio.Chunk.fromLongBuffer", "link" : "zio\/Chunk$.html#fromLongBuffer(buffer:java.nio.LongBuffer):zio.Chunk[Long]", "kind" : "def"}, {"label" : "fromIntBuffer", "tail" : "(buffer: IntBuffer): Chunk[Int]", "member" : "zio.Chunk.fromIntBuffer", "link" : "zio\/Chunk$.html#fromIntBuffer(buffer:java.nio.IntBuffer):zio.Chunk[Int]", "kind" : "def"}, {"label" : "fromFloatBuffer", "tail" : "(buffer: FloatBuffer): Chunk[Float]", "member" : "zio.Chunk.fromFloatBuffer", "link" : "zio\/Chunk$.html#fromFloatBuffer(buffer:java.nio.FloatBuffer):zio.Chunk[Float]", "kind" : "def"}, {"label" : "fromDoubleBuffer", "tail" : "(buffer: DoubleBuffer): Chunk[Double]", "member" : "zio.Chunk.fromDoubleBuffer", "link" : "zio\/Chunk$.html#fromDoubleBuffer(buffer:java.nio.DoubleBuffer):zio.Chunk[Double]", "kind" : "def"}, {"label" : "fromCharBuffer", "tail" : "(buffer: CharBuffer): Chunk[Char]", "member" : "zio.Chunk.fromCharBuffer", "link" : "zio\/Chunk$.html#fromCharBuffer(buffer:java.nio.CharBuffer):zio.Chunk[Char]", "kind" : "def"}, {"label" : "fromByteBuffer", "tail" : "(buffer: ByteBuffer): Chunk[Byte]", "member" : "zio.Chunk.fromByteBuffer", "link" : "zio\/Chunk$.html#fromByteBuffer(buffer:java.nio.ByteBuffer):zio.Chunk[Byte]", "kind" : "def"}, {"label" : "fromArray", "tail" : "(array: Array[A]): Chunk[A]", "member" : "zio.Chunk.fromArray", "link" : "zio\/Chunk$.html#fromArray[A](array:Array[A]):zio.Chunk[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(as: A*): Chunk[A]", "member" : "zio.Chunk.apply", "link" : "zio\/Chunk$.html#apply[A](as:A*):zio.Chunk[A]", "kind" : "def"}, {"label" : "empty", "tail" : ": Chunk[Nothing]", "member" : "zio.Chunk.empty", "link" : "zio\/Chunk$.html#empty:zio.Chunk[Nothing]", "kind" : "val"}, {"label" : "unapplySeq", "tail" : "(chunk: Chunk[A]): Some[Chunk[A]]", "member" : "zio.ChunkFactory.unapplySeq", "link" : "zio\/Chunk$.html#unapplySeq[A](chunk:zio.Chunk[A]):Some[zio.Chunk[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Chunk$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Chunk$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Chunk$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Chunk$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Chunk$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Chunk$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Chunk$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Chunk$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Chunk$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Chunk$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Chunk$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Chunk$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Chunk$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Chunk$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Chunk$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Chunk$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Chunk$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Chunk$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Chunk$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/Chunk.html", "kind" : "class"}, {"name" : "zio.ChunkBuilder", "shortDescription" : "A ChunkBuilder[A] can build a Chunk[A] given elements of type A.", "object" : "zio\/ChunkBuilder$.html", "members_class" : [{"label" : "mapResult", "tail" : "(f: (Chunk[A]) => NewTo): Builder[A, NewTo]", "member" : "scala.collection.mutable.Builder.mapResult", "link" : "zio\/ChunkBuilder.html#mapResult[NewTo](f:To=>NewTo):scala.collection.mutable.Builder[A,NewTo]", "kind" : "def"}, {"label" : "sizeHintBounded", "tail" : "(size: Int, boundingColl: Iterable[_]): Unit", "member" : "scala.collection.mutable.Builder.sizeHintBounded", "link" : "zio\/ChunkBuilder.html#sizeHintBounded(size:Int,boundingColl:Iterable[_]):Unit", "kind" : "final def"}, {"label" : "sizeHint", "tail" : "(coll: IterableOnce[_], delta: Int): Unit", "member" : "scala.collection.mutable.Builder.sizeHint", "link" : "zio\/ChunkBuilder.html#sizeHint(coll:scala.collection.IterableOnce[_],delta:Int):Unit", "kind" : "final def"}, {"label" : "sizeHint", "tail" : "(size: Int): Unit", "member" : "scala.collection.mutable.Builder.sizeHint", "link" : "zio\/ChunkBuilder.html#sizeHint(size:Int):Unit", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.mutable.Growable.knownSize", "link" : "zio\/ChunkBuilder.html#knownSize:Int", "kind" : "def"}, {"label" : "++=", "tail" : "(xs: IterableOnce[A]): ChunkBuilder.this.type", "member" : "scala.collection.mutable.Growable.++=", "link" : "zio\/ChunkBuilder.html#++=(xs:scala.collection.IterableOnce[A]):Growable.this.type", "kind" : "final def"}, {"label" : "addAll", "tail" : "(xs: IterableOnce[A]): ChunkBuilder.this.type", "member" : "scala.collection.mutable.Growable.addAll", "link" : "zio\/ChunkBuilder.html#addAll(xs:scala.collection.IterableOnce[A]):Growable.this.type", "kind" : "def"}, {"label" : "+=", "tail" : "(elem1: A, elem2: A, elems: A*): ChunkBuilder.this.type", "member" : "scala.collection.mutable.Growable.+=", "link" : "zio\/ChunkBuilder.html#+=(elem1:A,elem2:A,elems:A*):Growable.this.type", "kind" : "final def"}, {"label" : "+=", "tail" : "(elem: A): ChunkBuilder.this.type", "member" : "scala.collection.mutable.Growable.+=", "link" : "zio\/ChunkBuilder.html#+=(elem:A):Growable.this.type", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ChunkBuilder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ChunkBuilder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ChunkBuilder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ChunkBuilder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ChunkBuilder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ChunkBuilder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ChunkBuilder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ChunkBuilder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ChunkBuilder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ChunkBuilder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ChunkBuilder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ChunkBuilder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ChunkBuilder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ChunkBuilder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ChunkBuilder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ChunkBuilder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ChunkBuilder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ChunkBuilder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ChunkBuilder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "result", "tail" : "(): Chunk[A]", "member" : "scala.collection.mutable.Builder.result", "link" : "zio\/ChunkBuilder.html#result():To", "kind" : "abstract def"}, {"label" : "clear", "tail" : "(): Unit", "member" : "scala.collection.mutable.Builder.clear", "link" : "zio\/ChunkBuilder.html#clear():Unit", "kind" : "abstract def"}, {"label" : "addOne", "tail" : "(elem: A): ChunkBuilder.this.type", "member" : "scala.collection.mutable.Growable.addOne", "link" : "zio\/ChunkBuilder.html#addOne(elem:A):Growable.this.type", "kind" : "abstract def"}], "members_object" : [{"label" : "Short", "tail" : "", "member" : "zio.ChunkBuilder.Short", "link" : "zio\/ChunkBuilder$.html#ShortextendsChunkBuilder[Short]", "kind" : "final class"}, {"label" : "Long", "tail" : "", "member" : "zio.ChunkBuilder.Long", "link" : "zio\/ChunkBuilder$.html#LongextendsChunkBuilder[Long]", "kind" : "final class"}, {"label" : "Int", "tail" : "", "member" : "zio.ChunkBuilder.Int", "link" : "zio\/ChunkBuilder$.html#IntextendsChunkBuilder[Int]", "kind" : "final class"}, {"label" : "Float", "tail" : "", "member" : "zio.ChunkBuilder.Float", "link" : "zio\/ChunkBuilder$.html#FloatextendsChunkBuilder[Float]", "kind" : "final class"}, {"label" : "Double", "tail" : "", "member" : "zio.ChunkBuilder.Double", "link" : "zio\/ChunkBuilder$.html#DoubleextendsChunkBuilder[Double]", "kind" : "final class"}, {"label" : "Char", "tail" : "", "member" : "zio.ChunkBuilder.Char", "link" : "zio\/ChunkBuilder$.html#CharextendsChunkBuilder[Char]", "kind" : "final class"}, {"label" : "Byte", "tail" : "", "member" : "zio.ChunkBuilder.Byte", "link" : "zio\/ChunkBuilder$.html#ByteextendsChunkBuilder[Byte]", "kind" : "final class"}, {"label" : "Boolean", "tail" : "", "member" : "zio.ChunkBuilder.Boolean", "link" : "zio\/ChunkBuilder$.html#BooleanextendsChunkBuilder[Boolean]", "kind" : "final class"}, {"label" : "make", "tail" : "(sizeHint: scala.Int): ChunkBuilder[A]", "member" : "zio.ChunkBuilder.make", "link" : "zio\/ChunkBuilder$.html#make[A](sizeHint:Int):zio.ChunkBuilder[A]", "kind" : "def"}, {"label" : "make", "tail" : "(): ChunkBuilder[A]", "member" : "zio.ChunkBuilder.make", "link" : "zio\/ChunkBuilder$.html#make[A]():zio.ChunkBuilder[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ChunkBuilder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): scala.Int", "member" : "scala.AnyRef.##", "link" : "zio\/ChunkBuilder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): scala.Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ChunkBuilder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): scala.Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ChunkBuilder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): scala.Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ChunkBuilder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): scala.Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ChunkBuilder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ChunkBuilder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ChunkBuilder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: scala.Long, arg1: scala.Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ChunkBuilder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: scala.Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ChunkBuilder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ChunkBuilder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ChunkBuilder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ChunkBuilder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ChunkBuilder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): scala.Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ChunkBuilder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): scala.Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ChunkBuilder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ChunkBuilder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ChunkBuilder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): scala.Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ChunkBuilder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/ChunkBuilder.html", "kind" : "class"}, {"name" : "zio.ChunkLike", "object" : "zio\/ChunkLike$.html", "members_object" : [{"label" : "newBuilder", "tail" : "(): ChunkBuilder[A]", "member" : "zio.ChunkLike.newBuilder", "link" : "zio\/ChunkLike$.html#newBuilder[A]:zio.ChunkBuilder[A]", "kind" : "def"}, {"label" : "from", "tail" : "(source: IterableOnce[A]): Chunk[A]", "member" : "zio.ChunkLike.from", "link" : "zio\/ChunkLike$.html#from[A](source:IterableOnce[A]):zio.Chunk[A]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Chunk[A]", "member" : "zio.ChunkLike.empty", "link" : "zio\/ChunkLike$.html#empty[A]:zio.Chunk[A]", "kind" : "def"}, {"label" : "unapplySeq", "tail" : "(x: Chunk[A]): UnapplySeqWrapper[A]", "member" : "scala.collection.SeqFactory.unapplySeq", "link" : "zio\/ChunkLike$.html#unapplySeq[A](x:CC[A]@scala.annotation.unchecked.uncheckedVariance):scala.collection.SeqFactory.UnapplySeqWrapper[A]", "kind" : "final def"}, {"label" : "iterableFactory", "tail" : "(): Factory[A, Chunk[A]]", "member" : "scala.collection.IterableFactory.iterableFactory", "link" : "zio\/ChunkLike$.html#iterableFactory[A]:scala.collection.Factory[A,CC[A]]", "kind" : "implicit def"}, {"label" : "concat", "tail" : "(xss: Iterable[A]*): Chunk[A]", "member" : "scala.collection.IterableFactory.concat", "link" : "zio\/ChunkLike$.html#concat[A](xss:Iterable[A]*):CC[A]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(f: (Int, Int, Int, Int, Int) => A): Chunk[Chunk[Chunk[Chunk[Chunk[A]]]]]", "member" : "scala.collection.IterableFactory.tabulate", "link" : "zio\/ChunkLike$.html#tabulate[A](n1:Int,n2:Int,n3:Int,n4:Int,n5:Int)(f:(Int,Int,Int,Int,Int)=>A):CC[CC[CC[CC[CC[A]]]]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(n1: Int, n2: Int, n3: Int, n4: Int)(f: (Int, Int, Int, Int) => A): Chunk[Chunk[Chunk[Chunk[A]]]]", "member" : "scala.collection.IterableFactory.tabulate", "link" : "zio\/ChunkLike$.html#tabulate[A](n1:Int,n2:Int,n3:Int,n4:Int)(f:(Int,Int,Int,Int)=>A):CC[CC[CC[CC[A]]]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(n1: Int, n2: Int, n3: Int)(f: (Int, Int, Int) => A): Chunk[Chunk[Chunk[A]]]", "member" : "scala.collection.IterableFactory.tabulate", "link" : "zio\/ChunkLike$.html#tabulate[A](n1:Int,n2:Int,n3:Int)(f:(Int,Int,Int)=>A):CC[CC[CC[A]]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(n1: Int, n2: Int)(f: (Int, Int) => A): Chunk[Chunk[A]]", "member" : "scala.collection.IterableFactory.tabulate", "link" : "zio\/ChunkLike$.html#tabulate[A](n1:Int,n2:Int)(f:(Int,Int)=>A):CC[CC[A]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "tabulate", "tail" : "(n: Int)(f: (Int) => A): Chunk[A]", "member" : "scala.collection.IterableFactory.tabulate", "link" : "zio\/ChunkLike$.html#tabulate[A](n:Int)(f:Int=>A):CC[A]", "kind" : "def"}, {"label" : "fill", "tail" : "(n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(elem: => A): Chunk[Chunk[Chunk[Chunk[Chunk[A]]]]]", "member" : "scala.collection.IterableFactory.fill", "link" : "zio\/ChunkLike$.html#fill[A](n1:Int,n2:Int,n3:Int,n4:Int,n5:Int)(elem:=>A):CC[CC[CC[CC[CC[A]]]]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "fill", "tail" : "(n1: Int, n2: Int, n3: Int, n4: Int)(elem: => A): Chunk[Chunk[Chunk[Chunk[A]]]]", "member" : "scala.collection.IterableFactory.fill", "link" : "zio\/ChunkLike$.html#fill[A](n1:Int,n2:Int,n3:Int,n4:Int)(elem:=>A):CC[CC[CC[CC[A]]]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "fill", "tail" : "(n1: Int, n2: Int, n3: Int)(elem: => A): Chunk[Chunk[Chunk[A]]]", "member" : "scala.collection.IterableFactory.fill", "link" : "zio\/ChunkLike$.html#fill[A](n1:Int,n2:Int,n3:Int)(elem:=>A):CC[CC[CC[A]]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "fill", "tail" : "(n1: Int, n2: Int)(elem: => A): Chunk[Chunk[A]]", "member" : "scala.collection.IterableFactory.fill", "link" : "zio\/ChunkLike$.html#fill[A](n1:Int,n2:Int)(elem:=>A):CC[CC[A]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "fill", "tail" : "(n: Int)(elem: => A): Chunk[A]", "member" : "scala.collection.IterableFactory.fill", "link" : "zio\/ChunkLike$.html#fill[A](n:Int)(elem:=>A):CC[A]", "kind" : "def"}, {"label" : "range", "tail" : "(start: A, end: A, step: A)(arg0: Integral[A]): Chunk[A]", "member" : "scala.collection.IterableFactory.range", "link" : "zio\/ChunkLike$.html#range[A](start:A,end:A,step:A)(implicitevidence$4:Integral[A]):CC[A]", "kind" : "def"}, {"label" : "range", "tail" : "(start: A, end: A)(arg0: Integral[A]): Chunk[A]", "member" : "scala.collection.IterableFactory.range", "link" : "zio\/ChunkLike$.html#range[A](start:A,end:A)(implicitevidence$3:Integral[A]):CC[A]", "kind" : "def"}, {"label" : "unfold", "tail" : "(init: S)(f: (S) => Option[(A, S)]): Chunk[A]", "member" : "scala.collection.IterableFactory.unfold", "link" : "zio\/ChunkLike$.html#unfold[A,S](init:S)(f:S=>Option[(A,S)]):CC[A]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: A, len: Int)(f: (A) => A): Chunk[A]", "member" : "scala.collection.IterableFactory.iterate", "link" : "zio\/ChunkLike$.html#iterate[A](start:A,len:Int)(f:A=>A):CC[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(elems: A*): Chunk[A]", "member" : "scala.collection.IterableFactory.apply", "link" : "zio\/ChunkLike$.html#apply[A](elems:A*):CC[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ChunkLike$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ChunkLike$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ChunkLike$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ChunkLike$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ChunkLike$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ChunkLike$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ChunkLike$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ChunkLike$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ChunkLike$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ChunkLike$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ChunkLike$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ChunkLike$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ChunkLike$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ChunkLike$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ChunkLike$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ChunkLike$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ChunkLike$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ChunkLike$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ChunkLike$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/ChunkLike.html", "kind" : "trait", "members_trait" : [{"label" : "zipWithIndex", "tail" : "(): Chunk[(A, Int)]", "member" : "zio.ChunkLike.zipWithIndex", "link" : "zio\/ChunkLike.html#zipWithIndex:zio.Chunk[(A,Int)]", "kind" : "final def"}, {"label" : "updated", "tail" : "(index: Int, elem: A1): Chunk[A1]", "member" : "zio.ChunkLike.updated", "link" : "zio\/ChunkLike.html#updated[A1>:A](index:Int,elem:A1):zio.Chunk[A1]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Chunk[B]", "member" : "zio.ChunkLike.map", "link" : "zio\/ChunkLike.html#map[B](f:A=>B):zio.Chunk[B]", "kind" : "final def"}, {"label" : "iterableFactory", "tail" : ": SeqFactory[Chunk]", "member" : "zio.ChunkLike.iterableFactory", "link" : "zio\/ChunkLike.html#iterableFactory:scala.collection.SeqFactory[zio.Chunk]", "kind" : "val"}, {"label" : "flatMap", "tail" : "(f: (A) => IterableOnce[B]): Chunk[B]", "member" : "zio.ChunkLike.flatMap", "link" : "zio\/ChunkLike.html#flatMap[B](f:A=>IterableOnce[B]):zio.Chunk[B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Chunk[B]", "member" : "zio.ChunkLike.collect", "link" : "zio\/ChunkLike.html#collect[B](pf:PartialFunction[A,B]):zio.Chunk[B]", "kind" : "def"}, {"label" : "prepended", "tail" : "(a1: A1): Chunk[A1]", "member" : "zio.ChunkLike.prepended", "link" : "zio\/ChunkLike.html#prepended[A1>:A](a1:A1):zio.Chunk[A1]", "kind" : "final def"}, {"label" : "appended", "tail" : "(a1: A1): Chunk[A1]", "member" : "zio.ChunkLike.appended", "link" : "zio\/ChunkLike.html#appended[A1>:A](a1:A1):zio.Chunk[A1]", "kind" : "final def"}, {"label" : "sorted", "tail" : "(ord: Ordering[B]): Chunk[A]", "member" : "scala.collection.immutable.StrictOptimizedSeqOps.sorted", "link" : "zio\/ChunkLike.html#sorted[B>:A](implicitord:Ordering[B]):C", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, other: IterableOnce[B], replaced: Int): Chunk[B]", "member" : "scala.collection.immutable.StrictOptimizedSeqOps.patch", "link" : "zio\/ChunkLike.html#patch[B>:A](from:Int,other:scala.collection.IterableOnce[B],replaced:Int):CC[B]", "kind" : "def"}, {"label" : "distinctBy", "tail" : "(f: (A) => B): Chunk[A]", "member" : "scala.collection.immutable.StrictOptimizedSeqOps.distinctBy", "link" : "zio\/ChunkLike.html#distinctBy[B](f:A=>B):C", "kind" : "def"}, {"label" : "intersect", "tail" : "(that: Seq[B]): Chunk[A]", "member" : "scala.collection.StrictOptimizedSeqOps.intersect", "link" : "zio\/ChunkLike.html#intersect[B>:A](that:scala.collection.Seq[B]):C", "kind" : "def"}, {"label" : "diff", "tail" : "(that: Seq[B]): Chunk[A]", "member" : "scala.collection.StrictOptimizedSeqOps.diff", "link" : "zio\/ChunkLike.html#diff[B>:A](that:scala.collection.Seq[B]):C", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: B): Chunk[B]", "member" : "scala.collection.StrictOptimizedSeqOps.padTo", "link" : "zio\/ChunkLike.html#padTo[B>:A](len:Int,elem:B):CC[B]", "kind" : "def"}, {"label" : "prependedAll", "tail" : "(prefix: IterableOnce[B]): Chunk[B]", "member" : "scala.collection.StrictOptimizedSeqOps.prependedAll", "link" : "zio\/ChunkLike.html#prependedAll[B>:A](prefix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "appendedAll", "tail" : "(suffix: IterableOnce[B]): Chunk[B]", "member" : "scala.collection.StrictOptimizedSeqOps.appendedAll", "link" : "zio\/ChunkLike.html#appendedAll[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Chunk[A]", "member" : "scala.collection.StrictOptimizedIterableOps.dropRight", "link" : "zio\/ChunkLike.html#dropRight(n:Int):C", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Chunk[A]", "member" : "scala.collection.StrictOptimizedIterableOps.takeRight", "link" : "zio\/ChunkLike.html#takeRight(n:Int):C", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (A) => U): Chunk[A]", "member" : "scala.collection.StrictOptimizedIterableOps.tapEach", "link" : "zio\/ChunkLike.html#tapEach[U](f:A=>U):C", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(f: (A) => Either[A1, A2]): (Chunk[A1], Chunk[A2])", "member" : "scala.collection.StrictOptimizedIterableOps.partitionMap", "link" : "zio\/ChunkLike.html#partitionMap[A1,A2](f:A=>Either[A1,A2]):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "filterImpl", "tail" : "(pred: (A) => Boolean, isFlipped: Boolean): Chunk[A]", "member" : "scala.collection.StrictOptimizedIterableOps.filterImpl", "link" : "zio\/ChunkLike.html#filterImpl(pred:A=>Boolean,isFlipped:Boolean):C", "kind" : "def"}, {"label" : "filterNot", "tail" : "(pred: (A) => Boolean): Chunk[A]", "member" : "scala.collection.StrictOptimizedIterableOps.filterNot", "link" : "zio\/ChunkLike.html#filterNot(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (A) => Boolean): Chunk[A]", "member" : "scala.collection.StrictOptimizedIterableOps.filter", "link" : "zio\/ChunkLike.html#filter(pred:A=>Boolean):C", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, A) => B): Chunk[B]", "member" : "scala.collection.StrictOptimizedIterableOps.scanLeft", "link" : "zio\/ChunkLike.html#scanLeft[B](z:B)(op:(B,A)=>B):CC[B]", "kind" : "def"}, {"label" : "strictOptimizedZip", "tail" : "(that: IterableOnce[B], b: Builder[(A, B), C2]): C2", "member" : "scala.collection.StrictOptimizedIterableOps.strictOptimizedZip", "link" : "zio\/ChunkLike.html#strictOptimizedZip[B,C2](that:scala.collection.IterableOnce[B],b:scala.collection.mutable.Builder[(A,B),C2]):C2", "kind" : "final def"}, {"label" : "zip", "tail" : "(that: IterableOnce[B]): Chunk[(A, B)]", "member" : "scala.collection.StrictOptimizedIterableOps.zip", "link" : "zio\/ChunkLike.html#zip[B](that:scala.collection.IterableOnce[B]):CC[(A@scala.annotation.unchecked.uncheckedVariance,B)]", "kind" : "def"}, {"label" : "strictOptimizedFlatten", "tail" : "(b: Builder[B, C2])(toIterableOnce: (A) => IterableOnce[B]): C2", "member" : "scala.collection.StrictOptimizedIterableOps.strictOptimizedFlatten", "link" : "zio\/ChunkLike.html#strictOptimizedFlatten[B,C2](b:scala.collection.mutable.Builder[B,C2])(implicittoIterableOnce:A=>scala.collection.IterableOnce[B]):C2", "kind" : "final def"}, {"label" : "flatten", "tail" : "(toIterableOnce: (A) => IterableOnce[B]): Chunk[B]", "member" : "scala.collection.StrictOptimizedIterableOps.flatten", "link" : "zio\/ChunkLike.html#flatten[B](implicittoIterableOnce:A=>scala.collection.IterableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "strictOptimizedCollect", "tail" : "(b: Builder[B, C2], pf: PartialFunction[A, B]): C2", "member" : "scala.collection.StrictOptimizedIterableOps.strictOptimizedCollect", "link" : "zio\/ChunkLike.html#strictOptimizedCollect[B,C2](b:scala.collection.mutable.Builder[B,C2],pf:PartialFunction[A,B]):C2", "kind" : "final def"}, {"label" : "strictOptimizedConcat", "tail" : "(that: IterableOnce[B], b: Builder[B, C2]): C2", "member" : "scala.collection.StrictOptimizedIterableOps.strictOptimizedConcat", "link" : "zio\/ChunkLike.html#strictOptimizedConcat[B>:A,C2](that:scala.collection.IterableOnce[B],b:scala.collection.mutable.Builder[B,C2]):C2", "kind" : "final def"}, {"label" : "strictOptimizedFlatMap", "tail" : "(b: Builder[B, C2], f: (A) => IterableOnce[B]): C2", "member" : "scala.collection.StrictOptimizedIterableOps.strictOptimizedFlatMap", "link" : "zio\/ChunkLike.html#strictOptimizedFlatMap[B,C2](b:scala.collection.mutable.Builder[B,C2],f:A=>scala.collection.IterableOnce[B]):C2", "kind" : "final def"}, {"label" : "strictOptimizedMap", "tail" : "(b: Builder[B, C2], f: (A) => B): C2", "member" : "scala.collection.StrictOptimizedIterableOps.strictOptimizedMap", "link" : "zio\/ChunkLike.html#strictOptimizedMap[B,C2](b:scala.collection.mutable.Builder[B,C2],f:A=>B):C2", "kind" : "final def"}, {"label" : "unzip3", "tail" : "(asTriple: (A) => (A1, A2, A3)): (Chunk[A1], Chunk[A2], Chunk[A3])", "member" : "scala.collection.StrictOptimizedIterableOps.unzip3", "link" : "zio\/ChunkLike.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (A) => (A1, A2)): (Chunk[A1], Chunk[A2])", "member" : "scala.collection.StrictOptimizedIterableOps.unzip", "link" : "zio\/ChunkLike.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "span", "tail" : "(p: (A) => Boolean): (Chunk[A], Chunk[A])", "member" : "scala.collection.StrictOptimizedIterableOps.span", "link" : "zio\/ChunkLike.html#span(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (A) => Boolean): (Chunk[A], Chunk[A])", "member" : "scala.collection.StrictOptimizedIterableOps.partition", "link" : "zio\/ChunkLike.html#partition(p:A=>Boolean):(C,C)", "kind" : "def"}, {"label" : "applyPreferredMaxLength", "tail" : "(): Int", "member" : "scala.collection.immutable.IndexedSeq.applyPreferredMaxLength", "link" : "zio\/ChunkLike.html#applyPreferredMaxLength:Int", "kind" : "def"}, {"label" : "sameElements", "tail" : "(o: IterableOnce[B]): Boolean", "member" : "scala.collection.immutable.IndexedSeq.sameElements", "link" : "zio\/ChunkLike.html#sameElements[B>:A](o:scala.collection.IterableOnce[B]):Boolean", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.immutable.IndexedSeq.canEqual", "link" : "zio\/ChunkLike.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[A]", "member" : "scala.collection.immutable.IndexedSeq.toIndexedSeq", "link" : "zio\/ChunkLike.html#toIndexedSeq:IndexedSeq[A]", "kind" : "final def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Chunk[A]", "member" : "scala.collection.immutable.IndexedSeqOps.slice", "link" : "zio\/ChunkLike.html#slice(from:Int,until:Int):C", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.IndexedSeq.stringPrefix", "link" : "zio\/ChunkLike.html#stringPrefix:String", "kind" : "def"}, {"label" : "search", "tail" : "(elem: B, from: Int, to: Int)(ord: Ordering[B]): SearchResult", "member" : "scala.collection.IndexedSeqOps.search", "link" : "zio\/ChunkLike.html#search[B>:A](elem:B,from:Int,to:Int)(implicitord:scala.math.Ordering[B]):collection.Searching.SearchResult", "kind" : "def"}, {"label" : "search", "tail" : "(elem: B)(ord: Ordering[B]): SearchResult", "member" : "scala.collection.IndexedSeqOps.search", "link" : "zio\/ChunkLike.html#search[B>:A](elem:B)(implicitord:scala.math.Ordering[B]):collection.Searching.SearchResult", "kind" : "def"}, {"label" : "lengthCompare", "tail" : "(that: Iterable[_]): Int", "member" : "scala.collection.IndexedSeqOps.lengthCompare", "link" : "zio\/ChunkLike.html#lengthCompare(that:Iterable[_]):Int", "kind" : "final def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IndexedSeqOps.knownSize", "link" : "zio\/ChunkLike.html#knownSize:Int", "kind" : "def"}, {"label" : "lengthCompare", "tail" : "(len: Int): Int", "member" : "scala.collection.IndexedSeqOps.lengthCompare", "link" : "zio\/ChunkLike.html#lengthCompare(len:Int):Int", "kind" : "final def"}, {"label" : "last", "tail" : "(): A", "member" : "scala.collection.IndexedSeqOps.last", "link" : "zio\/ChunkLike.html#last:A", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[A]", "member" : "scala.collection.IndexedSeqOps.headOption", "link" : "zio\/ChunkLike.html#headOption:Option[A]", "kind" : "def"}, {"label" : "head", "tail" : "(): A", "member" : "scala.collection.IndexedSeqOps.head", "link" : "zio\/ChunkLike.html#head:A", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Chunk[A]", "member" : "scala.collection.IndexedSeqOps.reverse", "link" : "zio\/ChunkLike.html#reverse:C", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Chunk[A]", "member" : "scala.collection.IndexedSeqOps.drop", "link" : "zio\/ChunkLike.html#drop(n:Int):C", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Chunk[A]", "member" : "scala.collection.IndexedSeqOps.take", "link" : "zio\/ChunkLike.html#take(n:Int):C", "kind" : "def"}, {"label" : "reversed", "tail" : "(): Iterable[A]", "member" : "scala.collection.IndexedSeqOps.reversed", "link" : "zio\/ChunkLike.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): IndexedSeqView[A]", "member" : "scala.collection.IndexedSeqOps.view", "link" : "zio\/ChunkLike.html#view(from:Int,until:Int):scala.collection.IndexedSeqView[A]", "kind" : "def"}, {"label" : "view", "tail" : "(): IndexedSeqView[A]", "member" : "scala.collection.IndexedSeqOps.view", "link" : "zio\/ChunkLike.html#view:scala.collection.IndexedSeqView[A]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "scala.collection.IndexedSeqOps.foldRight", "link" : "zio\/ChunkLike.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reverseIterator", "tail" : "(): Iterator[A]", "member" : "scala.collection.IndexedSeqOps.reverseIterator", "link" : "zio\/ChunkLike.html#reverseIterator:Iterator[A]", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[A, S]): S with EfficientSplit", "member" : "scala.collection.IndexedSeqOps.stepper", "link" : "zio\/ChunkLike.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):Swithcollection.Stepper.EfficientSplit", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[A]", "member" : "scala.collection.IndexedSeqOps.iterator", "link" : "zio\/ChunkLike.html#iterator:Iterator[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): ChunkLike.this.type", "member" : "scala.collection.immutable.Seq.toSeq", "link" : "zio\/ChunkLike.html#toSeq:Seq.this.type", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Seq.toString", "link" : "zio\/ChunkLike.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.collection.Seq.hashCode", "link" : "zio\/ChunkLike.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "scala.collection.Seq.equals", "link" : "zio\/ChunkLike.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "occCounts", "tail" : "(sq: Seq[B]): Map[B, Int]", "member" : "scala.collection.SeqOps.occCounts", "link" : "zio\/ChunkLike.html#occCounts[B](sq:scala.collection.Seq[B]):scala.collection.mutable.Map[B,Int]", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: Seq[B])(p: (A, B) => Boolean): Boolean", "member" : "scala.collection.SeqOps.corresponds", "link" : "zio\/ChunkLike.html#corresponds[B](that:scala.collection.Seq[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.SeqOps.isEmpty", "link" : "zio\/ChunkLike.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "lengthIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.SeqOps.lengthIs", "link" : "zio\/ChunkLike.html#lengthIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(that: Iterable[_]): Int", "member" : "scala.collection.SeqOps.sizeCompare", "link" : "zio\/ChunkLike.html#sizeCompare(that:Iterable[_]):Int", "kind" : "final def"}, {"label" : "sizeCompare", "tail" : "(otherSize: Int): Int", "member" : "scala.collection.SeqOps.sizeCompare", "link" : "zio\/ChunkLike.html#sizeCompare(otherSize:Int):Int", "kind" : "final def"}, {"label" : "indices", "tail" : "(): Range", "member" : "scala.collection.SeqOps.indices", "link" : "zio\/ChunkLike.html#indices:scala.collection.immutable.Range", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (A) => B)(ord: Ordering[B]): Chunk[A]", "member" : "scala.collection.SeqOps.sortBy", "link" : "zio\/ChunkLike.html#sortBy[B](f:A=>B)(implicitord:Ordering[B]):C", "kind" : "def"}, {"label" : "sortWith", "tail" : "(lt: (A, A) => Boolean): Chunk[A]", "member" : "scala.collection.SeqOps.sortWith", "link" : "zio\/ChunkLike.html#sortWith(lt:(A,A)=>Boolean):C", "kind" : "def"}, {"label" : "combinations", "tail" : "(n: Int): Iterator[Chunk[A]]", "member" : "scala.collection.SeqOps.combinations", "link" : "zio\/ChunkLike.html#combinations(n:Int):Iterator[C]", "kind" : "def"}, {"label" : "permutations", "tail" : "(): Iterator[Chunk[A]]", "member" : "scala.collection.SeqOps.permutations", "link" : "zio\/ChunkLike.html#permutations:Iterator[C]", "kind" : "def"}, {"label" : "reverseMap", "tail" : "(f: (A) => B): Chunk[B]", "member" : "scala.collection.SeqOps.reverseMap", "link" : "zio\/ChunkLike.html#reverseMap[B](f:A=>B):CC[B]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: A1): Boolean", "member" : "scala.collection.SeqOps.contains", "link" : "zio\/ChunkLike.html#contains[A1>:A](elem:A1):Boolean", "kind" : "def"}, {"label" : "containsSlice", "tail" : "(that: Seq[B]): Boolean", "member" : "scala.collection.SeqOps.containsSlice", "link" : "zio\/ChunkLike.html#containsSlice[B>:A](that:scala.collection.Seq[B]):Boolean", "kind" : "def"}, {"label" : "findLast", "tail" : "(p: (A) => Boolean): Option[A]", "member" : "scala.collection.SeqOps.findLast", "link" : "zio\/ChunkLike.html#findLast(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: Seq[B]): Int", "member" : "scala.collection.SeqOps.lastIndexOfSlice", "link" : "zio\/ChunkLike.html#lastIndexOfSlice[B>:A](that:scala.collection.Seq[B]):Int", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: Seq[B], end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexOfSlice", "link" : "zio\/ChunkLike.html#lastIndexOfSlice[B>:A](that:scala.collection.Seq[B],end:Int):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: Seq[B]): Int", "member" : "scala.collection.SeqOps.indexOfSlice", "link" : "zio\/ChunkLike.html#indexOfSlice[B>:A](that:scala.collection.Seq[B]):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: Seq[B], from: Int): Int", "member" : "scala.collection.SeqOps.indexOfSlice", "link" : "zio\/ChunkLike.html#indexOfSlice[B>:A](that:scala.collection.Seq[B],from:Int):Int", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.SeqOps.lastIndexWhere", "link" : "zio\/ChunkLike.html#lastIndexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (A) => Boolean, end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexWhere", "link" : "zio\/ChunkLike.html#lastIndexWhere(p:A=>Boolean,end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B, end: Int): Int", "member" : "scala.collection.SeqOps.lastIndexOf", "link" : "zio\/ChunkLike.html#lastIndexOf[B>:A](elem:B,end:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.SeqOps.indexOf", "link" : "zio\/ChunkLike.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.SeqOps.indexOf", "link" : "zio\/ChunkLike.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.SeqOps.indexWhere", "link" : "zio\/ChunkLike.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (A) => Boolean, from: Int): Int", "member" : "scala.collection.SeqOps.indexWhere", "link" : "zio\/ChunkLike.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "prefixLength", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.SeqOps.prefixLength", "link" : "zio\/ChunkLike.html#prefixLength(p:A=>Boolean):Int", "kind" : "final def"}, {"label" : "segmentLength", "tail" : "(p: (A) => Boolean, from: Int): Int", "member" : "scala.collection.SeqOps.segmentLength", "link" : "zio\/ChunkLike.html#segmentLength(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "segmentLength", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.SeqOps.segmentLength", "link" : "zio\/ChunkLike.html#segmentLength(p:A=>Boolean):Int", "kind" : "final def"}, {"label" : "isDefinedAt", "tail" : "(idx: Int): Boolean", "member" : "scala.collection.SeqOps.isDefinedAt", "link" : "zio\/ChunkLike.html#isDefinedAt(idx:Int):Boolean", "kind" : "def"}, {"label" : "endsWith", "tail" : "(that: Iterable[B]): Boolean", "member" : "scala.collection.SeqOps.endsWith", "link" : "zio\/ChunkLike.html#endsWith[B>:A](that:Iterable[B]):Boolean", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: IterableOnce[B], offset: Int): Boolean", "member" : "scala.collection.SeqOps.startsWith", "link" : "zio\/ChunkLike.html#startsWith[B>:A](that:scala.collection.IterableOnce[B],offset:Int):Boolean", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Chunk[A]", "member" : "scala.collection.SeqOps.distinct", "link" : "zio\/ChunkLike.html#distinct:C", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.SeqOps.size", "link" : "zio\/ChunkLike.html#size:Int", "kind" : "final def"}, {"label" : "union", "tail" : "(that: Seq[B]): Chunk[B]", "member" : "scala.collection.SeqOps.union", "link" : "zio\/ChunkLike.html#union[B>:A](that:scala.collection.Seq[B]):CC[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(suffix: IterableOnce[B]): Chunk[B]", "member" : "scala.collection.SeqOps.concat", "link" : "zio\/ChunkLike.html#concat[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : ":++", "tail" : "(suffix: IterableOnce[B]): Chunk[B]", "member" : "scala.collection.SeqOps.:++", "link" : "zio\/ChunkLike.html#:++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "++:", "tail" : "(prefix: IterableOnce[B]): Chunk[B]", "member" : "scala.collection.SeqOps.++:", "link" : "zio\/ChunkLike.html#++:[B>:A](prefix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : ":+", "tail" : "(elem: B): Chunk[B]", "member" : "scala.collection.SeqOps.:+", "link" : "zio\/ChunkLike.html#:+[B>:A](elem:B):CC[B]", "kind" : "final def"}, {"label" : "+:", "tail" : "(elem: B): Chunk[B]", "member" : "scala.collection.SeqOps.+:", "link" : "zio\/ChunkLike.html#+:[B>:A](elem:B):CC[B]", "kind" : "final def"}, {"label" : "runWith", "tail" : "(action: (A) => U): (Int) => Boolean", "member" : "scala.PartialFunction.runWith", "link" : "zio\/ChunkLike.html#runWith[U](action:B=>U):A=>Boolean", "kind" : "def"}, {"label" : "applyOrElse", "tail" : "(x: A1, default: (A1) => B1): B1", "member" : "scala.PartialFunction.applyOrElse", "link" : "zio\/ChunkLike.html#applyOrElse[A1<:A,B1>:B](x:A1,default:A1=>B1):B1", "kind" : "def"}, {"label" : "lift", "tail" : "(): (Int) => Option[A]", "member" : "scala.PartialFunction.lift", "link" : "zio\/ChunkLike.html#lift:A=>Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(k: PartialFunction[R, Int]): PartialFunction[R, A]", "member" : "scala.PartialFunction.compose", "link" : "zio\/ChunkLike.html#compose[R](k:PartialFunction[R,A]):PartialFunction[R,B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: PartialFunction[A, C]): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "zio\/ChunkLike.html#andThen[C](k:PartialFunction[B,C]):PartialFunction[A,C]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: (A) => C): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "zio\/ChunkLike.html#andThen[C](k:B=>C):PartialFunction[A,C]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: PartialFunction[A1, B1]): PartialFunction[A1, B1]", "member" : "scala.PartialFunction.orElse", "link" : "zio\/ChunkLike.html#orElse[A1<:A,B1>:B](that:PartialFunction[A1,B1]):PartialFunction[A1,B1]", "kind" : "def"}, {"label" : "elementWise", "tail" : "(): ElementWiseExtractor[Int, A]", "member" : "scala.PartialFunction.elementWise", "link" : "zio\/ChunkLike.html#elementWise:PartialFunction.ElementWiseExtractor[A,B]", "kind" : "def"}, {"label" : "unapply", "tail" : "(a: Int): Option[A]", "member" : "scala.PartialFunction.unapply", "link" : "zio\/ChunkLike.html#unapply(a:A):Option[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Int): (A) => A", "member" : "scala.Function1.compose", "link" : "zio\/ChunkLike.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "lazyZip", "tail" : "(that: Iterable[B]): LazyZip2[A, B, ChunkLike.this.type]", "member" : "scala.collection.Iterable.lazyZip", "link" : "zio\/ChunkLike.html#lazyZip[B](that:Iterable[B]):scala.collection.LazyZip2[A,B,Iterable.this.type]", "kind" : "def"}, {"label" : "className", "tail" : "(): String", "member" : "scala.collection.Iterable.className", "link" : "zio\/ChunkLike.html#className:String", "kind" : "def"}, {"label" : "seq", "tail" : "(): ChunkLike.this.type", "member" : "scala.collection.Iterable.seq", "link" : "zio\/ChunkLike.html#seq:Iterable.this.type", "kind" : "def"}, {"label" : "coll", "tail" : "(): ChunkLike.this.type", "member" : "scala.collection.Iterable.coll", "link" : "zio\/ChunkLike.html#coll:Iterable.this.type", "kind" : "final def"}, {"label" : "toIterable", "tail" : "(): ChunkLike.this.type", "member" : "scala.collection.Iterable.toIterable", "link" : "zio\/ChunkLike.html#toIterable:Iterable.this.type", "kind" : "final def"}, {"label" : "empty", "tail" : "(): Chunk[A]", "member" : "scala.collection.IterableFactoryDefaults.empty", "link" : "zio\/ChunkLike.html#empty:CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "newSpecificBuilder", "tail" : "(): Builder[A, Chunk[A]]", "member" : "scala.collection.IterableFactoryDefaults.newSpecificBuilder", "link" : "zio\/ChunkLike.html#newSpecificBuilder:scala.collection.mutable.Builder[A@scala.annotation.unchecked.uncheckedVariance,CC[A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "def"}, {"label" : "fromSpecific", "tail" : "(coll: IterableOnce[A]): Chunk[A]", "member" : "scala.collection.IterableFactoryDefaults.fromSpecific", "link" : "zio\/ChunkLike.html#fromSpecific(coll:scala.collection.IterableOnce[A@scala.annotation.unchecked.uncheckedVariance]):CC[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Chunk[A]]", "member" : "scala.collection.IterableOps.inits", "link" : "zio\/ChunkLike.html#inits:Iterator[C]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Chunk[A]]", "member" : "scala.collection.IterableOps.tails", "link" : "zio\/ChunkLike.html#tails:Iterator[C]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Iterable[B], thisElem: A1, thatElem: B): Chunk[(A1, B)]", "member" : "scala.collection.IterableOps.zipAll", "link" : "zio\/ChunkLike.html#zipAll[A1>:A,B](that:Iterable[B],thisElem:A1,thatElem:B):CC[(A1,B)]", "kind" : "def"}, {"label" : "++", "tail" : "(suffix: IterableOnce[B]): Chunk[B]", "member" : "scala.collection.IterableOps.++", "link" : "zio\/ChunkLike.html#++[B>:A](suffix:scala.collection.IterableOnce[B]):CC[B]", "kind" : "final def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (A, B) => B): Chunk[B]", "member" : "scala.collection.IterableOps.scanRight", "link" : "zio\/ChunkLike.html#scanRight[B](z:B)(op:(A,B)=>B):CC[B]", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) => B): Chunk[B]", "member" : "scala.collection.IterableOps.scan", "link" : "zio\/ChunkLike.html#scan[B>:A](z:B)(op:(B,B)=>B):CC[B]", "kind" : "def"}, {"label" : "groupMapReduce", "tail" : "(key: (A) => K)(f: (A) => B)(reduce: (B, B) => B): Map[K, B]", "member" : "scala.collection.IterableOps.groupMapReduce", "link" : "zio\/ChunkLike.html#groupMapReduce[K,B](key:A=>K)(f:A=>B)(reduce:(B,B)=>B):scala.collection.immutable.Map[K,B]", "kind" : "def"}, {"label" : "groupMap", "tail" : "(key: (A) => K)(f: (A) => B): Map[K, Chunk[B]]", "member" : "scala.collection.IterableOps.groupMap", "link" : "zio\/ChunkLike.html#groupMap[K,B](key:A=>K)(f:A=>B):scala.collection.immutable.Map[K,CC[B]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (A) => K): Map[K, Chunk[A]]", "member" : "scala.collection.IterableOps.groupBy", "link" : "zio\/ChunkLike.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,C]", "kind" : "def"}, {"label" : "init", "tail" : "(): Chunk[A]", "member" : "scala.collection.IterableOps.init", "link" : "zio\/ChunkLike.html#init:C", "kind" : "def"}, {"label" : "tail", "tail" : "(): Chunk[A]", "member" : "scala.collection.IterableOps.tail", "link" : "zio\/ChunkLike.html#tail:C", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[Chunk[A]]", "member" : "scala.collection.IterableOps.sliding", "link" : "zio\/ChunkLike.html#sliding(size:Int,step:Int):Iterator[C]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[Chunk[A]]", "member" : "scala.collection.IterableOps.sliding", "link" : "zio\/ChunkLike.html#sliding(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[Chunk[A]]", "member" : "scala.collection.IterableOps.grouped", "link" : "zio\/ChunkLike.html#grouped(size:Int):Iterator[C]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): Chunk[A]", "member" : "scala.collection.IterableOps.dropWhile", "link" : "zio\/ChunkLike.html#dropWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): Chunk[A]", "member" : "scala.collection.IterableOps.takeWhile", "link" : "zio\/ChunkLike.html#takeWhile(p:A=>Boolean):C", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Chunk[A], Chunk[A])", "member" : "scala.collection.IterableOps.splitAt", "link" : "zio\/ChunkLike.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): WithFilter[A, [_]Chunk[_]]", "member" : "scala.collection.IterableOps.withFilter", "link" : "zio\/ChunkLike.html#withFilter(p:A=>Boolean):scala.collection.WithFilter[A,CC]", "kind" : "def"}, {"label" : "transpose", "tail" : "(asIterable: (A) => Iterable[B]): Chunk[Chunk[B]]", "member" : "scala.collection.IterableOps.transpose", "link" : "zio\/ChunkLike.html#transpose[B](implicitasIterable:A=>Iterable[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "sizeIs", "tail" : "(): SizeCompareOps", "member" : "scala.collection.IterableOps.sizeIs", "link" : "zio\/ChunkLike.html#sizeIs:scala.collection.IterableOps.SizeCompareOps", "kind" : "final def"}, {"label" : "lastOption", "tail" : "(): Option[A]", "member" : "scala.collection.IterableOps.lastOption", "link" : "zio\/ChunkLike.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "companion", "tail" : "(): IterableFactory[[_]Chunk[_]]", "member" : "scala.collection.IterableOps.companion", "link" : "zio\/ChunkLike.html#companion:scala.collection.IterableFactory[CC]", "kind" : "def"}, {"label" : "repr", "tail" : "(): Chunk[A]", "member" : "scala.collection.IterableOps.repr", "link" : "zio\/ChunkLike.html#repr:C", "kind" : "final def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOps.isTraversableAgain", "link" : "zio\/ChunkLike.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[A]", "member" : "scala.collection.IterableOps.toTraversable", "link" : "zio\/ChunkLike.html#toTraversable:scala.collection.Traversable[A]", "kind" : "final def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "zio\/ChunkLike.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "zio\/ChunkLike.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): Stream[A]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "zio\/ChunkLike.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "zio\/ChunkLike.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[A, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "zio\/ChunkLike.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[A]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "zio\/ChunkLike.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "zio\/ChunkLike.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[A]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "zio\/ChunkLike.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[A, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "zio\/ChunkLike.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "zio\/ChunkLike.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "zio\/ChunkLike.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "zio\/ChunkLike.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "zio\/ChunkLike.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "zio\/ChunkLike.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "zio\/ChunkLike.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: IterableOnce[B])(p: (A, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "zio\/ChunkLike.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, A) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "zio\/ChunkLike.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[A, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "zio\/ChunkLike.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (A) => B)(cmp: Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "zio\/ChunkLike.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (A) => B)(cmp: Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "zio\/ChunkLike.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (A) => B)(cmp: Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "zio\/ChunkLike.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (A) => B)(cmp: Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "zio\/ChunkLike.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "zio\/ChunkLike.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.max", "link" : "zio\/ChunkLike.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "zio\/ChunkLike.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.min", "link" : "zio\/ChunkLike.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "zio\/ChunkLike.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "zio\/ChunkLike.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "zio\/ChunkLike.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "zio\/ChunkLike.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "zio\/ChunkLike.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "zio\/ChunkLike.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "zio\/ChunkLike.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (A, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "zio\/ChunkLike.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, A) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "zio\/ChunkLike.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "zio\/ChunkLike.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "zio\/ChunkLike.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "zio\/ChunkLike.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "zio\/ChunkLike.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "zio\/ChunkLike.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "zio\/ChunkLike.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "zio\/ChunkLike.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "zio\/ChunkLike.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Option[A]", "member" : "scala.collection.IterableOnceOps.find", "link" : "zio\/ChunkLike.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "zio\/ChunkLike.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "zio\/ChunkLike.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "zio\/ChunkLike.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "zio\/ChunkLike.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.hasDefiniteSize", "link" : "zio\/ChunkLike.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ChunkLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ChunkLike.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ChunkLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ChunkLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ChunkLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ChunkLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ChunkLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ChunkLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ChunkLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ChunkLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ChunkLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ChunkLike.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ChunkLike.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ChunkLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ChunkLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ChunkLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.SeqOps.length", "link" : "zio\/ChunkLike.html#length:Int", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(i: Int): A", "member" : "scala.collection.SeqOps.apply", "link" : "zio\/ChunkLike.html#apply(i:Int):A", "kind" : "abstract def"}], "shortDescription" : "ChunkLike represents the capability for a Chunk to extend Scala'scollection library."}, {"name" : "zio.Clock", "object" : "zio\/Clock$.html", "members_object" : [{"label" : "sleep", "tail" : "(duration: => zio.Duration): URIO[Has[Clock], Unit]", "member" : "zio.Clock.sleep", "link" : "zio\/Clock$.html#sleep(duration:=>zio.Duration):zio.URIO[zio.Has[zio.Clock],Unit]", "kind" : "def"}, {"label" : "scheduleFrom", "tail" : "(zio: => ZIO[R, E, A])(a: => A1)(schedule: => Schedule[R1, A1, B]): ZIO[R1 with Has[Clock], E, B]", "member" : "zio.Clock.scheduleFrom", "link" : "zio\/Clock$.html#scheduleFrom[R,R1<:R,E,A,A1>:A,B](zio:=>zio.ZIO[R,E,A])(a:=>A1)(schedule:=>zio.Schedule[R1,A1,B]):zio.ZIO[R1withzio.Has[zio.Clock],E,B]", "kind" : "final def"}, {"label" : "schedule", "tail" : "(zio: => ZIO[R, E, A])(schedule: => Schedule[R1, Any, B]): ZIO[R1 with Has[Clock], E, B]", "member" : "zio.Clock.schedule", "link" : "zio\/Clock$.html#schedule[R,R1<:R,E,A,B](zio:=>zio.ZIO[R,E,A])(schedule:=>zio.Schedule[R1,Any,B]):zio.ZIO[R1withzio.Has[zio.Clock],E,B]", "kind" : "final def"}, {"label" : "retryOrElseEither", "tail" : "(zio: => ZIO[R, E, A])(schedule: => Schedule[R1, E, Out], orElse: (E, Out) => ZIO[R1, E1, B])(ev: CanFail[E]): ZIO[R1 with Has[Clock], E1, Either[B, A]]", "member" : "zio.Clock.retryOrElseEither", "link" : "zio\/Clock$.html#retryOrElseEither[R,R1<:R,E,E1,A,B,Out](zio:=>zio.ZIO[R,E,A])(schedule:=>zio.Schedule[R1,E,Out],orElse:(E,Out)=>zio.ZIO[R1,E1,B])(implicitev:zio.CanFail[E]):zio.ZIO[R1withzio.Has[zio.Clock],E1,Either[B,A]]", "kind" : "final def"}, {"label" : "retryOrElse", "tail" : "(zio: => ZIO[R, E, A])(policy: => Schedule[R1, E, S], orElse: (E, S) => ZIO[R1, E1, A1])(ev: CanFail[E]): ZIO[R1 with Has[Clock], E1, A1]", "member" : "zio.Clock.retryOrElse", "link" : "zio\/Clock$.html#retryOrElse[R,R1<:R,E,E1,A,A1>:A,S](zio:=>zio.ZIO[R,E,A])(policy:=>zio.Schedule[R1,E,S],orElse:(E,S)=>zio.ZIO[R1,E1,A1])(implicitev:zio.CanFail[E]):zio.ZIO[R1withzio.Has[zio.Clock],E1,A1]", "kind" : "final def"}, {"label" : "retry", "tail" : "(zio: => ZIO[R, E, A])(policy: => Schedule[R1, E, S])(ev: CanFail[E]): ZIO[R1 with Has[Clock], E, A]", "member" : "zio.Clock.retry", "link" : "zio\/Clock$.html#retry[R,R1<:R,E,A,S](zio:=>zio.ZIO[R,E,A])(policy:=>zio.Schedule[R1,E,S])(implicitev:zio.CanFail[E]):zio.ZIO[R1withzio.Has[zio.Clock],E,A]", "kind" : "final def"}, {"label" : "repeatOrElseEither", "tail" : "(zio: => ZIO[R, E, A])(schedule: => Schedule[R1, A, B], orElse: (E, Option[B]) => ZIO[R1, E2, C]): ZIO[R1 with Has[Clock], E2, Either[C, B]]", "member" : "zio.Clock.repeatOrElseEither", "link" : "zio\/Clock$.html#repeatOrElseEither[R,R1<:R,E,E2,A,B,C](zio:=>zio.ZIO[R,E,A])(schedule:=>zio.Schedule[R1,A,B],orElse:(E,Option[B])=>zio.ZIO[R1,E2,C]):zio.ZIO[R1withzio.Has[zio.Clock],E2,Either[C,B]]", "kind" : "final def"}, {"label" : "repeatOrElse", "tail" : "(zio: => ZIO[R, E, A])(schedule: => Schedule[R1, A, B], orElse: (E, Option[B]) => ZIO[R1, E2, B]): ZIO[R1 with Has[Clock], E2, B]", "member" : "zio.Clock.repeatOrElse", "link" : "zio\/Clock$.html#repeatOrElse[R,R1<:R,E,E2,A,B](zio:=>zio.ZIO[R,E,A])(schedule:=>zio.Schedule[R1,A,B],orElse:(E,Option[B])=>zio.ZIO[R1,E2,B]):zio.ZIO[R1withzio.Has[zio.Clock],E2,B]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(zio: => ZIO[R, E, A])(schedule: => Schedule[R1, A, B]): ZIO[R1 with Has[Clock], E, B]", "member" : "zio.Clock.repeat", "link" : "zio\/Clock$.html#repeat[R,R1<:R,E,A,B](zio:=>zio.ZIO[R,E,A])(schedule:=>zio.Schedule[R1,A,B]):zio.ZIO[R1withzio.Has[zio.Clock],E,B]", "kind" : "def"}, {"label" : "nanoTime", "tail" : ": URIO[Has[Clock], Long]", "member" : "zio.Clock.nanoTime", "link" : "zio\/Clock$.html#nanoTime:zio.URIO[zio.Has[zio.Clock],Long]", "kind" : "val"}, {"label" : "instant", "tail" : ": ZIO[Has[Clock], Nothing, Instant]", "member" : "zio.Clock.instant", "link" : "zio\/Clock$.html#instant:zio.ZIO[zio.Has[zio.Clock],Nothing,java.time.Instant]", "kind" : "val"}, {"label" : "driver", "tail" : "(schedule: Schedule[Env, In, Out]): URIO[Has[Clock], Driver[State, Env, In, Out]]", "member" : "zio.Clock.driver", "link" : "zio\/Clock$.html#driver[Env,In,Out](schedule:zio.Schedule[Env,In,Out]):zio.URIO[zio.Has[zio.Clock],zio.Schedule.Driver[schedule.State,Env,In,Out]]", "kind" : "def"}, {"label" : "currentDateTime", "tail" : ": URIO[Has[Clock], OffsetDateTime]", "member" : "zio.Clock.currentDateTime", "link" : "zio\/Clock$.html#currentDateTime:zio.URIO[zio.Has[zio.Clock],java.time.OffsetDateTime]", "kind" : "val"}, {"label" : "currentTime", "tail" : "(unit: => TimeUnit): URIO[Has[Clock], Long]", "member" : "zio.Clock.currentTime", "link" : "zio\/Clock$.html#currentTime(unit:=>java.util.concurrent.TimeUnit):zio.URIO[zio.Has[zio.Clock],Long]", "kind" : "def"}, {"label" : "ClockLive", "tail" : "", "member" : "zio.Clock.ClockLive", "link" : "zio\/Clock$.html#ClockLive", "kind" : "object"}, {"label" : "ClockJava", "tail" : "", "member" : "zio.Clock.ClockJava", "link" : "zio\/Clock$.html#ClockJavaextendsClockwithProductwithSerializable", "kind" : "final case class"}, {"label" : "live", "tail" : ": Layer[Nothing, Has[Clock]]", "member" : "zio.Clock.live", "link" : "zio\/Clock$.html#live:zio.Layer[Nothing,zio.Has[zio.Clock]]", "kind" : "val"}, {"label" : "javaClock", "tail" : ": ZLayer[Has[java.time.Clock], Nothing, Has[Clock]]", "member" : "zio.Clock.javaClock", "link" : "zio\/Clock$.html#javaClock:zio.ZLayer[zio.Has[java.time.Clock],Nothing,zio.Has[zio.Clock]]", "kind" : "val"}, {"label" : "any", "tail" : ": ZLayer[Has[Clock], Nothing, Has[Clock]]", "member" : "zio.Clock.any", "link" : "zio\/Clock$.html#any:zio.ZLayer[zio.Has[zio.Clock],Nothing,zio.Has[zio.Clock]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Clock$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Clock$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Clock$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Clock$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Clock$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Clock$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Clock$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Clock$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Clock$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Clock$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Clock$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Clock$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Clock$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Clock$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Clock$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Clock$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Clock$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Clock$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Clock$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/Clock.html", "kind" : "trait", "members_trait" : [{"label" : "scheduleFrom", "tail" : "(zio0: => ZIO[R, E, A])(a: => A1)(schedule0: => Schedule[R1, A1, B]): ZIO[R1, E, B]", "member" : "zio.Clock.scheduleFrom", "link" : "zio\/Clock.html#scheduleFrom[R,R1<:R,E,A,A1>:A,B](zio0:=>zio.ZIO[R,E,A])(a:=>A1)(schedule0:=>zio.Schedule[R1,A1,B]):zio.ZIO[R1,E,B]", "kind" : "final def"}, {"label" : "schedule", "tail" : "(zio: => ZIO[R, E, A])(schedule: => Schedule[R1, Any, B]): ZIO[R1, E, B]", "member" : "zio.Clock.schedule", "link" : "zio\/Clock.html#schedule[R,R1<:R,E,A,B](zio:=>zio.ZIO[R,E,A])(schedule:=>zio.Schedule[R1,Any,B]):zio.ZIO[R1,E,B]", "kind" : "final def"}, {"label" : "retryOrElseEither", "tail" : "(zio0: => ZIO[R, E, A])(schedule0: => Schedule[R1, E, Out], orElse: (E, Out) => ZIO[R1, E1, B])(ev: CanFail[E]): ZIO[R1, E1, Either[B, A]]", "member" : "zio.Clock.retryOrElseEither", "link" : "zio\/Clock.html#retryOrElseEither[R,R1<:R,E,E1,A,B,Out](zio0:=>zio.ZIO[R,E,A])(schedule0:=>zio.Schedule[R1,E,Out],orElse:(E,Out)=>zio.ZIO[R1,E1,B])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E1,Either[B,A]]", "kind" : "final def"}, {"label" : "retryOrElse", "tail" : "(zio: => ZIO[R, E, A])(policy: => Schedule[R1, E, S], orElse: (E, S) => ZIO[R1, E1, A1])(ev: CanFail[E]): ZIO[R1, E1, A1]", "member" : "zio.Clock.retryOrElse", "link" : "zio\/Clock.html#retryOrElse[R,R1<:R,E,E1,A,A1>:A,S](zio:=>zio.ZIO[R,E,A])(policy:=>zio.Schedule[R1,E,S],orElse:(E,S)=>zio.ZIO[R1,E1,A1])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E1,A1]", "kind" : "final def"}, {"label" : "retry", "tail" : "(zio: => ZIO[R, E, A])(policy: Schedule[R1, E, S])(ev: CanFail[E]): ZIO[R1, E, A]", "member" : "zio.Clock.retry", "link" : "zio\/Clock.html#retry[R,R1<:R,E,A,S](zio:=>zio.ZIO[R,E,A])(policy:zio.Schedule[R1,E,S])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "repeatOrElseEither", "tail" : "(zio0: => ZIO[R, E, A])(schedule0: => Schedule[R1, A, B], orElse: (E, Option[B]) => ZIO[R1, E2, C]): ZIO[R1, E2, Either[C, B]]", "member" : "zio.Clock.repeatOrElseEither", "link" : "zio\/Clock.html#repeatOrElseEither[R,R1<:R,E,E2,A,B,C](zio0:=>zio.ZIO[R,E,A])(schedule0:=>zio.Schedule[R1,A,B],orElse:(E,Option[B])=>zio.ZIO[R1,E2,C]):zio.ZIO[R1,E2,Either[C,B]]", "kind" : "final def"}, {"label" : "repeatOrElse", "tail" : "(zio: => ZIO[R, E, A])(schedule: => Schedule[R1, A, B], orElse: (E, Option[B]) => ZIO[R1, E2, B]): ZIO[R1, E2, B]", "member" : "zio.Clock.repeatOrElse", "link" : "zio\/Clock.html#repeatOrElse[R,R1<:R,E,E2,A,B](zio:=>zio.ZIO[R,E,A])(schedule:=>zio.Schedule[R1,A,B],orElse:(E,Option[B])=>zio.ZIO[R1,E2,B]):zio.ZIO[R1,E2,B]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(zio: => ZIO[R, E, A])(schedule: => Schedule[R1, A, B]): ZIO[R1, E, B]", "member" : "zio.Clock.repeat", "link" : "zio\/Clock.html#repeat[R,R1<:R,E,A,B](zio:=>zio.ZIO[R,E,A])(schedule:=>zio.Schedule[R1,A,B]):zio.ZIO[R1,E,B]", "kind" : "final def"}, {"label" : "driver", "tail" : "(schedule: Schedule[Env, In, Out]): UIO[Driver[State, Env, In, Out]]", "member" : "zio.Clock.driver", "link" : "zio\/Clock.html#driver[Env,In,Out](schedule:zio.Schedule[Env,In,Out]):zio.UIO[zio.Schedule.Driver[schedule.State,Env,In,Out]]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Clock.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Clock.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Clock.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Clock.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Clock.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Clock.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Clock.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Clock.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Clock.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Clock.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Clock.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Clock.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Clock.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Clock.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Clock.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Clock.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Clock.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Clock.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Clock.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "sleep", "tail" : "(duration: => zio.Duration): UIO[Unit]", "member" : "zio.Clock.sleep", "link" : "zio\/Clock.html#sleep(duration:=>zio.Duration):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "nanoTime", "tail" : "(): UIO[Long]", "member" : "zio.Clock.nanoTime", "link" : "zio\/Clock.html#nanoTime:zio.UIO[Long]", "kind" : "abstract def"}, {"label" : "localDateTime", "tail" : "(): UIO[LocalDateTime]", "member" : "zio.Clock.localDateTime", "link" : "zio\/Clock.html#localDateTime:zio.UIO[java.time.LocalDateTime]", "kind" : "abstract def"}, {"label" : "instant", "tail" : "(): UIO[Instant]", "member" : "zio.Clock.instant", "link" : "zio\/Clock.html#instant:zio.UIO[java.time.Instant]", "kind" : "abstract def"}, {"label" : "currentDateTime", "tail" : "(): UIO[OffsetDateTime]", "member" : "zio.Clock.currentDateTime", "link" : "zio\/Clock.html#currentDateTime:zio.UIO[java.time.OffsetDateTime]", "kind" : "abstract def"}, {"label" : "currentTime", "tail" : "(unit: => TimeUnit): UIO[Long]", "member" : "zio.Clock.currentTime", "link" : "zio\/Clock.html#currentTime(unit:=>java.util.concurrent.TimeUnit):zio.UIO[Long]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.Console", "object" : "zio\/Console$.html", "members_object" : [{"label" : "getStrLn", "tail" : ": ZIO[Has[Console], IOException, String]", "member" : "zio.Console.getStrLn", "link" : "zio\/Console$.html#getStrLn:zio.ZIO[zio.Has[zio.Console],java.io.IOException,String]", "kind" : "val"}, {"label" : "putStrLnErr", "tail" : "(line: => Any): ZIO[Has[Console], IOException, Unit]", "member" : "zio.Console.putStrLnErr", "link" : "zio\/Console$.html#putStrLnErr(line:=>Any):zio.ZIO[zio.Has[zio.Console],java.io.IOException,Unit]", "kind" : "def"}, {"label" : "putStrLn", "tail" : "(line: => Any): ZIO[Has[Console], IOException, Unit]", "member" : "zio.Console.putStrLn", "link" : "zio\/Console$.html#putStrLn(line:=>Any):zio.ZIO[zio.Has[zio.Console],java.io.IOException,Unit]", "kind" : "def"}, {"label" : "putStrErr", "tail" : "(line: => Any): ZIO[Has[Console], IOException, Unit]", "member" : "zio.Console.putStrErr", "link" : "zio\/Console$.html#putStrErr(line:=>Any):zio.ZIO[zio.Has[zio.Console],java.io.IOException,Unit]", "kind" : "def"}, {"label" : "putStr", "tail" : "(line: => Any): ZIO[Has[Console], IOException, Unit]", "member" : "zio.Console.putStr", "link" : "zio\/Console$.html#putStr(line:=>Any):zio.ZIO[zio.Has[zio.Console],java.io.IOException,Unit]", "kind" : "def"}, {"label" : "readLine", "tail" : ": ZIO[Has[Console], IOException, String]", "member" : "zio.Console.readLine", "link" : "zio\/Console$.html#readLine:zio.ZIO[zio.Has[zio.Console],java.io.IOException,String]", "kind" : "val"}, {"label" : "printLineError", "tail" : "(line: => Any): ZIO[Has[Console], IOException, Unit]", "member" : "zio.Console.printLineError", "link" : "zio\/Console$.html#printLineError(line:=>Any):zio.ZIO[zio.Has[zio.Console],java.io.IOException,Unit]", "kind" : "def"}, {"label" : "printLine", "tail" : "(line: => Any): ZIO[Has[Console], IOException, Unit]", "member" : "zio.Console.printLine", "link" : "zio\/Console$.html#printLine(line:=>Any):zio.ZIO[zio.Has[zio.Console],java.io.IOException,Unit]", "kind" : "def"}, {"label" : "printError", "tail" : "(line: => Any): ZIO[Has[Console], IOException, Unit]", "member" : "zio.Console.printError", "link" : "zio\/Console$.html#printError(line:=>Any):zio.ZIO[zio.Has[zio.Console],java.io.IOException,Unit]", "kind" : "def"}, {"label" : "print", "tail" : "(line: => Any): ZIO[Has[Console], IOException, Unit]", "member" : "zio.Console.print", "link" : "zio\/Console$.html#print(line:=>Any):zio.ZIO[zio.Has[zio.Console],java.io.IOException,Unit]", "kind" : "def"}, {"label" : "ConsoleLive", "tail" : "", "member" : "zio.Console.ConsoleLive", "link" : "zio\/Console$.html#ConsoleLive", "kind" : "object"}, {"label" : "live", "tail" : ": Layer[Nothing, Has[Console]]", "member" : "zio.Console.live", "link" : "zio\/Console$.html#live:zio.Layer[Nothing,zio.Has[zio.Console]]", "kind" : "val"}, {"label" : "any", "tail" : ": ZLayer[Has[Console], Nothing, Has[Console]]", "member" : "zio.Console.any", "link" : "zio\/Console$.html#any:zio.ZLayer[zio.Has[zio.Console],Nothing,zio.Has[zio.Console]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Console$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Console$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Console$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Console$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Console$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Console$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Console$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Console$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Console$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Console$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Console$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Console$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Console$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Console$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Console$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Console$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Console$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Console$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Console$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/Console.html", "kind" : "trait", "members_trait" : [{"label" : "getStrLn", "tail" : "(): IO[IOException, String]", "member" : "zio.Console.getStrLn", "link" : "zio\/Console.html#getStrLn:zio.IO[java.io.IOException,String]", "kind" : "def"}, {"label" : "putStrLnErr", "tail" : "(line: => String): IO[IOException, Unit]", "member" : "zio.Console.putStrLnErr", "link" : "zio\/Console.html#putStrLnErr(line:=>String):zio.IO[java.io.IOException,Unit]", "kind" : "def"}, {"label" : "putStrLn", "tail" : "(line: => String): IO[IOException, Unit]", "member" : "zio.Console.putStrLn", "link" : "zio\/Console.html#putStrLn(line:=>String):zio.IO[java.io.IOException,Unit]", "kind" : "def"}, {"label" : "putStrErr", "tail" : "(line: => String): IO[IOException, Unit]", "member" : "zio.Console.putStrErr", "link" : "zio\/Console.html#putStrErr(line:=>String):zio.IO[java.io.IOException,Unit]", "kind" : "def"}, {"label" : "putStr", "tail" : "(line: => String): IO[IOException, Unit]", "member" : "zio.Console.putStr", "link" : "zio\/Console.html#putStr(line:=>String):zio.IO[java.io.IOException,Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Console.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Console.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Console.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Console.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Console.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Console.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Console.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Console.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Console.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Console.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Console.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Console.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Console.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Console.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Console.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Console.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Console.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Console.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Console.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "readLine", "tail" : "(): IO[IOException, String]", "member" : "zio.Console.readLine", "link" : "zio\/Console.html#readLine:zio.IO[java.io.IOException,String]", "kind" : "abstract def"}, {"label" : "printLineError", "tail" : "(line: => Any): IO[IOException, Unit]", "member" : "zio.Console.printLineError", "link" : "zio\/Console.html#printLineError(line:=>Any):zio.IO[java.io.IOException,Unit]", "kind" : "abstract def"}, {"label" : "printLine", "tail" : "(line: => Any): IO[IOException, Unit]", "member" : "zio.Console.printLine", "link" : "zio\/Console.html#printLine(line:=>Any):zio.IO[java.io.IOException,Unit]", "kind" : "abstract def"}, {"label" : "printError", "tail" : "(line: => Any): IO[IOException, Unit]", "member" : "zio.Console.printError", "link" : "zio\/Console.html#printError(line:=>Any):zio.IO[java.io.IOException,Unit]", "kind" : "abstract def"}, {"label" : "print", "tail" : "(line: => Any): IO[IOException, Unit]", "member" : "zio.Console.print", "link" : "zio\/Console.html#print(line:=>Any):zio.IO[java.io.IOException,Unit]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.Duration", "shortDescription" : "", "object" : "zio\/Duration$.html", "members_object" : [{"label" : "fromJava", "tail" : "(duration: java.time.Duration): zio.Duration", "member" : "zio.Duration.fromJava", "link" : "zio\/Duration$.html#fromJava(duration:java.time.Duration):zio.Duration", "kind" : "def"}, {"label" : "fromScala", "tail" : "(duration: scala.concurrent.duration.Duration): zio.Duration", "member" : "zio.Duration.fromScala", "link" : "zio\/Duration$.html#fromScala(duration:scala.concurrent.duration.Duration):zio.Duration", "kind" : "def"}, {"label" : "fromInstant", "tail" : "(instant: Instant): zio.Duration", "member" : "zio.Duration.fromInstant", "link" : "zio\/Duration$.html#fromInstant(instant:java.time.Instant):zio.Duration", "kind" : "def"}, {"label" : "fromInterval", "tail" : "(start: OffsetDateTime, end: OffsetDateTime): zio.Duration", "member" : "zio.Duration.fromInterval", "link" : "zio\/Duration$.html#fromInterval(start:java.time.OffsetDateTime,end:java.time.OffsetDateTime):zio.Duration", "kind" : "def"}, {"label" : "fromInterval", "tail" : "(start: Instant, end: Instant): zio.Duration", "member" : "zio.Duration.fromInterval", "link" : "zio\/Duration$.html#fromInterval(start:java.time.Instant,end:java.time.Instant):zio.Duration", "kind" : "def"}, {"label" : "fromNanos", "tail" : "(nanos: Long): zio.Duration", "member" : "zio.Duration.fromNanos", "link" : "zio\/Duration$.html#fromNanos(nanos:Long):zio.Duration", "kind" : "def"}, {"label" : "fromMillis", "tail" : "(millis: Long): zio.Duration", "member" : "zio.Duration.fromMillis", "link" : "zio\/Duration$.html#fromMillis(millis:Long):zio.Duration", "kind" : "def"}, {"label" : "apply", "tail" : "(amount: Long, unit: TimeUnit): zio.Duration", "member" : "zio.Duration.apply", "link" : "zio\/Duration$.html#apply(amount:Long,unit:java.util.concurrent.TimeUnit):zio.Duration", "kind" : "def"}, {"label" : "Finite", "tail" : "", "member" : "zio.Duration.Finite", "link" : "zio\/Duration$.html#Finite", "kind" : "object"}, {"label" : "Zero", "tail" : ": java.time.Duration", "member" : "zio.Duration.Zero", "link" : "zio\/Duration$.html#Zero:java.time.Duration", "kind" : "val"}, {"label" : "Infinity", "tail" : ": zio.Duration", "member" : "zio.Duration.Infinity", "link" : "zio\/Duration$.html#Infinity:zio.Duration", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Duration$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Duration$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Duration$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Duration$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Duration$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Duration$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Duration$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Duration$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Duration$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Duration$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Duration$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Duration$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Duration$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Duration$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Duration$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Duration$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Duration$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Duration$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Duration$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.DurationModule", "trait" : "zio\/DurationModule.html", "kind" : "trait", "members_trait" : [{"label" : "durationOrdering", "tail" : ": Ordering[Duration]", "member" : "zio.DurationModule.durationOrdering", "link" : "zio\/DurationModule.html#durationOrdering:Ordering[DurationModule.this.Duration]", "kind" : "implicit val"}, {"label" : "duration2DurationOps", "tail" : "(duration: Duration): DurationOps", "member" : "zio.DurationModule.duration2DurationOps", "link" : "zio\/DurationModule.html#duration2DurationOps(duration:DurationModule.this.Duration):zio.DurationOps", "kind" : "implicit def"}, {"label" : "durationLong", "tail" : "(n: Long): DurationSyntax", "member" : "zio.DurationModule.durationLong", "link" : "zio\/DurationModule.html#durationLong(n:Long):zio.DurationSyntax", "kind" : "implicit def"}, {"label" : "durationInt", "tail" : "(n: Int): DurationSyntax", "member" : "zio.DurationModule.durationInt", "link" : "zio\/DurationModule.html#durationInt(n:Int):zio.DurationSyntax", "kind" : "implicit def"}, {"label" : "Duration", "tail" : "", "member" : "zio.DurationModule.Duration", "link" : "zio\/DurationModule.html#Duration=java.time.Duration", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/DurationModule.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/DurationModule.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/DurationModule.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/DurationModule.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/DurationModule.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/DurationModule.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/DurationModule.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/DurationModule.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/DurationModule.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/DurationModule.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/DurationModule.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/DurationModule.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/DurationModule.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/DurationModule.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/DurationModule.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/DurationModule.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/DurationModule.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/DurationModule.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/DurationModule.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.DurationOps", "shortDescription" : "", "members_class" : [{"label" : "fold", "tail" : "(infinity: => Z, finite: (zio.Duration) => Z): Z", "member" : "zio.DurationOps.fold", "link" : "zio\/DurationOps.html#fold[Z](infinity:=>Z,finite:zio.Duration=>Z):Z", "kind" : "def"}, {"label" : "compare", "tail" : "(other: zio.Duration): Int", "member" : "zio.DurationOps.compare", "link" : "zio\/DurationOps.html#compare(other:zio.Duration):Int", "kind" : "def"}, {"label" : "min", "tail" : "(other: zio.Duration): zio.Duration", "member" : "zio.DurationOps.min", "link" : "zio\/DurationOps.html#min(other:zio.Duration):zio.Duration", "kind" : "def"}, {"label" : "max", "tail" : "(other: zio.Duration): zio.Duration", "member" : "zio.DurationOps.max", "link" : "zio\/DurationOps.html#max(other:zio.Duration):zio.Duration", "kind" : "def"}, {"label" : "asJava", "tail" : "(): java.time.Duration", "member" : "zio.DurationOps.asJava", "link" : "zio\/DurationOps.html#asJava:java.time.Duration", "kind" : "def"}, {"label" : "asScala", "tail" : "(): scala.concurrent.duration.Duration", "member" : "zio.DurationOps.asScala", "link" : "zio\/DurationOps.html#asScala:scala.concurrent.duration.Duration", "kind" : "def"}, {"label" : "render", "tail" : "(): String", "member" : "zio.DurationOps.render", "link" : "zio\/DurationOps.html#render:String", "kind" : "def"}, {"label" : "==", "tail" : "(other: zio.Duration): Boolean", "member" : "zio.DurationOps.==", "link" : "zio\/DurationOps.html#==(other:zio.Duration):Boolean", "kind" : "def"}, {"label" : "<", "tail" : "(other: zio.Duration): Boolean", "member" : "zio.DurationOps.<", "link" : "zio\/DurationOps.html#<(other:zio.Duration):Boolean", "kind" : "def"}, {"label" : ">", "tail" : "(other: zio.Duration): Boolean", "member" : "zio.DurationOps.>", "link" : "zio\/DurationOps.html#>(other:zio.Duration):Boolean", "kind" : "def"}, {"label" : "<=", "tail" : "(other: zio.Duration): Boolean", "member" : "zio.DurationOps.<=", "link" : "zio\/DurationOps.html#<=(other:zio.Duration):Boolean", "kind" : "def"}, {"label" : ">=", "tail" : "(other: zio.Duration): Boolean", "member" : "zio.DurationOps.>=", "link" : "zio\/DurationOps.html#>=(other:zio.Duration):Boolean", "kind" : "def"}, {"label" : "*", "tail" : "(factor: Double): zio.Duration", "member" : "zio.DurationOps.*", "link" : "zio\/DurationOps.html#*(factor:Double):zio.Duration", "kind" : "def"}, {"label" : "+", "tail" : "(other: zio.Duration): zio.Duration", "member" : "zio.DurationOps.+", "link" : "zio\/DurationOps.html#+(other:zio.Duration):zio.Duration", "kind" : "def"}, {"member" : "zio.DurationOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "zio\/DurationOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "zio\/DurationOps.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/DurationOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/DurationOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "zio\/DurationOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "zio\/DurationOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "zio\/DurationOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "zio\/DurationOps.html", "kind" : "class"}, {"name" : "zio.DurationSyntax", "shortDescription" : "", "members_class" : [{"label" : "day", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.day", "link" : "zio\/DurationSyntax.html#day:zio.Duration", "kind" : "def"}, {"label" : "days", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.days", "link" : "zio\/DurationSyntax.html#days:zio.Duration", "kind" : "def"}, {"label" : "hour", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.hour", "link" : "zio\/DurationSyntax.html#hour:zio.Duration", "kind" : "def"}, {"label" : "hours", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.hours", "link" : "zio\/DurationSyntax.html#hours:zio.Duration", "kind" : "def"}, {"label" : "minute", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.minute", "link" : "zio\/DurationSyntax.html#minute:zio.Duration", "kind" : "def"}, {"label" : "minutes", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.minutes", "link" : "zio\/DurationSyntax.html#minutes:zio.Duration", "kind" : "def"}, {"label" : "second", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.second", "link" : "zio\/DurationSyntax.html#second:zio.Duration", "kind" : "def"}, {"label" : "seconds", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.seconds", "link" : "zio\/DurationSyntax.html#seconds:zio.Duration", "kind" : "def"}, {"label" : "milli", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.milli", "link" : "zio\/DurationSyntax.html#milli:zio.Duration", "kind" : "def"}, {"label" : "millisecond", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.millisecond", "link" : "zio\/DurationSyntax.html#millisecond:zio.Duration", "kind" : "def"}, {"label" : "millis", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.millis", "link" : "zio\/DurationSyntax.html#millis:zio.Duration", "kind" : "def"}, {"label" : "milliseconds", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.milliseconds", "link" : "zio\/DurationSyntax.html#milliseconds:zio.Duration", "kind" : "def"}, {"label" : "micro", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.micro", "link" : "zio\/DurationSyntax.html#micro:zio.Duration", "kind" : "def"}, {"label" : "microsecond", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.microsecond", "link" : "zio\/DurationSyntax.html#microsecond:zio.Duration", "kind" : "def"}, {"label" : "micros", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.micros", "link" : "zio\/DurationSyntax.html#micros:zio.Duration", "kind" : "def"}, {"label" : "microseconds", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.microseconds", "link" : "zio\/DurationSyntax.html#microseconds:zio.Duration", "kind" : "def"}, {"label" : "nano", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.nano", "link" : "zio\/DurationSyntax.html#nano:zio.Duration", "kind" : "def"}, {"label" : "nanosecond", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.nanosecond", "link" : "zio\/DurationSyntax.html#nanosecond:zio.Duration", "kind" : "def"}, {"label" : "nanos", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.nanos", "link" : "zio\/DurationSyntax.html#nanos:zio.Duration", "kind" : "def"}, {"label" : "nanoseconds", "tail" : "(): zio.Duration", "member" : "zio.DurationSyntax.nanoseconds", "link" : "zio\/DurationSyntax.html#nanoseconds:zio.Duration", "kind" : "def"}, {"member" : "zio.DurationSyntax#<init>", "error" : "unsupported entity"}, {"label" : "n", "tail" : ": Long", "member" : "zio.DurationSyntax.n", "link" : "zio\/DurationSyntax.html#n:Long", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "zio\/DurationSyntax.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "zio\/DurationSyntax.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/DurationSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/DurationSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "zio\/DurationSyntax.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "zio\/DurationSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "zio\/DurationSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "zio\/DurationSyntax.html", "kind" : "class"}, {"name" : "zio.ExecutionStrategy", "shortDescription" : "Describes a strategy for evaluating multiple effects, potentially inparallel.", "object" : "zio\/ExecutionStrategy$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ExecutionStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ExecutionStrategy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ExecutionStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ExecutionStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ExecutionStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ExecutionStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ExecutionStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ExecutionStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ExecutionStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ExecutionStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ExecutionStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ExecutionStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ExecutionStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ExecutionStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ExecutionStrategy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ExecutionStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ExecutionStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ExecutionStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ExecutionStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "ParallelN", "tail" : "", "member" : "zio.ExecutionStrategy.ParallelN", "link" : "zio\/ExecutionStrategy$.html#ParallelNextendsExecutionStrategywithProductwithSerializable", "kind" : "final case class"}, {"label" : "Parallel", "tail" : "", "member" : "zio.ExecutionStrategy.Parallel", "link" : "zio\/ExecutionStrategy$.html#Parallel", "kind" : "case object"}, {"label" : "Sequential", "tail" : "", "member" : "zio.ExecutionStrategy.Sequential", "link" : "zio\/ExecutionStrategy$.html#Sequential", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ExecutionStrategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ExecutionStrategy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ExecutionStrategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ExecutionStrategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ExecutionStrategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ExecutionStrategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ExecutionStrategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ExecutionStrategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ExecutionStrategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ExecutionStrategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ExecutionStrategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ExecutionStrategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ExecutionStrategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ExecutionStrategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ExecutionStrategy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ExecutionStrategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ExecutionStrategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ExecutionStrategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ExecutionStrategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/ExecutionStrategy.html", "kind" : "class"}, {"name" : "zio.Executor", "shortDescription" : "An executor is responsible for executing actions.", "object" : "zio\/Executor$.html", "members_class" : [{"label" : "asJava", "tail" : ": java.util.concurrent.Executor", "member" : "zio.Executor.asJava", "link" : "zio\/Executor.html#asJava:java.util.concurrent.Executor", "kind" : "lazy val"}, {"label" : "asExecutionContext", "tail" : ": ExecutionContext", "member" : "zio.Executor.asExecutionContext", "link" : "zio\/Executor.html#asExecutionContext:scala.concurrent.ExecutionContext", "kind" : "lazy val"}, {"label" : "asEC", "tail" : ": ExecutionContext", "member" : "zio.Executor.asEC", "link" : "zio\/Executor.html#asEC:scala.concurrent.ExecutionContext", "kind" : "lazy val"}, {"label" : "submitOrThrow", "tail" : "(runnable: Runnable): Unit", "member" : "zio.Executor.submitOrThrow", "link" : "zio\/Executor.html#submitOrThrow(runnable:Runnable):Unit", "kind" : "final def"}, {"member" : "zio.Executor#<init>", "error" : "unsupported entity"}, {"label" : "asExecutionContextExecutorService", "tail" : ": ExecutionContextExecutorService", "member" : "zio.ExecutorPlatformSpecific.asExecutionContextExecutorService", "link" : "zio\/Executor.html#asExecutionContextExecutorService:scala.concurrent.ExecutionContextExecutorService", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Executor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Executor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Executor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Executor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Executor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Executor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Executor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Executor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Executor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Executor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Executor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Executor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Executor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Executor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Executor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Executor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Executor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Executor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Executor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "submit", "tail" : "(runnable: Runnable): Boolean", "member" : "zio.Executor.submit", "link" : "zio\/Executor.html#submit(runnable:Runnable):Boolean", "kind" : "abstract def"}, {"label" : "metrics", "tail" : "(): Option[ExecutionMetrics]", "member" : "zio.Executor.metrics", "link" : "zio\/Executor.html#metrics:Option[zio.internal.ExecutionMetrics]", "kind" : "abstract def"}, {"label" : "yieldOpCount", "tail" : "(): Int", "member" : "zio.Executor.yieldOpCount", "link" : "zio\/Executor.html#yieldOpCount:Int", "kind" : "abstract def"}], "members_object" : [{"label" : "fromExecutionContext", "tail" : "(yieldOpCount0: Int)(ec: ExecutionContext): Executor", "member" : "zio.Executor.fromExecutionContext", "link" : "zio\/Executor$.html#fromExecutionContext(yieldOpCount0:Int)(ec:scala.concurrent.ExecutionContext):zio.Executor", "kind" : "def"}, {"label" : "fromThreadPoolExecutor", "tail" : "(yieldOpCount0: (ExecutionMetrics) => Int)(es: ThreadPoolExecutor): Executor", "member" : "zio.internal.DefaultExecutors.fromThreadPoolExecutor", "link" : "zio\/Executor$.html#fromThreadPoolExecutor(yieldOpCount0:zio.internal.ExecutionMetrics=>Int)(es:java.util.concurrent.ThreadPoolExecutor):zio.Executor", "kind" : "final def"}, {"label" : "makeDefault", "tail" : "(yieldOpCount: Int): Executor", "member" : "zio.internal.DefaultExecutors.makeDefault", "link" : "zio\/Executor$.html#makeDefault(yieldOpCount:Int):zio.Executor", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Executor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Executor$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Executor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Executor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Executor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Executor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Executor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Executor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Executor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Executor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Executor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Executor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Executor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Executor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Executor$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Executor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Executor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Executor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Executor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/Executor.html", "kind" : "class"}, {"name" : "zio.ExecutorPlatformSpecific", "trait" : "zio\/ExecutorPlatformSpecific.html", "kind" : "trait", "members_trait" : [{"label" : "asExecutionContextExecutorService", "tail" : ": ExecutionContextExecutorService", "member" : "zio.ExecutorPlatformSpecific.asExecutionContextExecutorService", "link" : "zio\/ExecutorPlatformSpecific.html#asExecutionContextExecutorService:scala.concurrent.ExecutionContextExecutorService", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ExecutorPlatformSpecific.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ExecutorPlatformSpecific.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ExecutorPlatformSpecific.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ExecutorPlatformSpecific.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ExecutorPlatformSpecific.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ExecutorPlatformSpecific.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ExecutorPlatformSpecific.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ExecutorPlatformSpecific.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ExecutorPlatformSpecific.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ExecutorPlatformSpecific.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ExecutorPlatformSpecific.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ExecutorPlatformSpecific.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ExecutorPlatformSpecific.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ExecutorPlatformSpecific.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ExecutorPlatformSpecific.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ExecutorPlatformSpecific.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ExecutorPlatformSpecific.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ExecutorPlatformSpecific.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ExecutorPlatformSpecific.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.Exit", "shortDescription" : "An Exit[E, A] describes the result of executing an IO value.", "object" : "zio\/Exit$.html", "members_class" : [{"label" : "zipWith", "tail" : "(that: Exit[E1, B])(f: (A, B) => C, g: (Cause[E], Cause[E1]) => Cause[E1]): Exit[E1, C]", "member" : "zio.Exit.zipWith", "link" : "zio\/Exit.html#zipWith[E1>:E,B,C](that:zio.Exit[E1,B])(f:(A,B)=>C,g:(zio.Cause[E],zio.Cause[E1])=>zio.Cause[E1]):zio.Exit[E1,C]", "kind" : "final def"}, {"label" : "zipRight", "tail" : "(that: Exit[E1, B]): Exit[E1, B]", "member" : "zio.Exit.zipRight", "link" : "zio\/Exit.html#zipRight[E1>:E,B](that:zio.Exit[E1,B]):zio.Exit[E1,B]", "kind" : "final def"}, {"label" : "zipParRight", "tail" : "(that: Exit[E1, B]): Exit[E1, B]", "member" : "zio.Exit.zipParRight", "link" : "zio\/Exit.html#zipParRight[E1>:E,B](that:zio.Exit[E1,B]):zio.Exit[E1,B]", "kind" : "final def"}, {"label" : "zipParLeft", "tail" : "(that: Exit[E1, B]): Exit[E1, A]", "member" : "zio.Exit.zipParLeft", "link" : "zio\/Exit.html#zipParLeft[E1>:E,B](that:zio.Exit[E1,B]):zio.Exit[E1,A]", "kind" : "final def"}, {"label" : "zipPar", "tail" : "(that: Exit[E1, B])(zippable: Zippable[A, B]): Exit[E1, Out]", "member" : "zio.Exit.zipPar", "link" : "zio\/Exit.html#zipPar[E1>:E,B](that:zio.Exit[E1,B])(implicitzippable:zio.Zippable[A,B]):zio.Exit[E1,zippable.Out]", "kind" : "final def"}, {"label" : "zipLeft", "tail" : "(that: Exit[E1, B]): Exit[E1, A]", "member" : "zio.Exit.zipLeft", "link" : "zio\/Exit.html#zipLeft[E1>:E,B](that:zio.Exit[E1,B]):zio.Exit[E1,A]", "kind" : "final def"}, {"label" : "zip", "tail" : "(that: Exit[E1, B])(zippable: Zippable[A, B]): Exit[E1, Out]", "member" : "zio.Exit.zip", "link" : "zio\/Exit.html#zip[E1>:E,B](that:zio.Exit[E1,B])(implicitzippable:zio.Zippable[A,B]):zio.Exit[E1,zippable.Out]", "kind" : "final def"}, {"label" : "untraced", "tail" : "(): Exit[E, A]", "member" : "zio.Exit.untraced", "link" : "zio\/Exit.html#untraced:zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unit", "tail" : "(): Exit[E, Unit]", "member" : "zio.Exit.unit", "link" : "zio\/Exit.html#unit:zio.Exit[E,Unit]", "kind" : "final def"}, {"label" : "toEither", "tail" : "(): Either[Throwable, A]", "member" : "zio.Exit.toEither", "link" : "zio\/Exit.html#toEither:Either[Throwable,A]", "kind" : "final def"}, {"label" : "succeeded", "tail" : "(): Boolean", "member" : "zio.Exit.succeeded", "link" : "zio\/Exit.html#succeeded:Boolean", "kind" : "final def"}, {"label" : "orElseFail", "tail" : "(e1: => E1): Exit[E1, A]", "member" : "zio.Exit.orElseFail", "link" : "zio\/Exit.html#orElseFail[E1](e1:=>E1):zio.Exit[E1,A]", "kind" : "final def"}, {"label" : "mapErrorCause", "tail" : "(f: (Cause[E]) => Cause[E1]): Exit[E1, A]", "member" : "zio.Exit.mapErrorCause", "link" : "zio\/Exit.html#mapErrorCause[E1](f:zio.Cause[E]=>zio.Cause[E1]):zio.Exit[E1,A]", "kind" : "final def"}, {"label" : "mapError", "tail" : "(f: (E) => E1): Exit[E1, A]", "member" : "zio.Exit.mapError", "link" : "zio\/Exit.html#mapError[E1](f:E=>E1):zio.Exit[E1,A]", "kind" : "final def"}, {"label" : "mapBoth", "tail" : "(f: (E) => E1, g: (A) => A1): Exit[E1, A1]", "member" : "zio.Exit.mapBoth", "link" : "zio\/Exit.html#mapBoth[E1,A1](f:E=>E1,g:A=>A1):zio.Exit[E1,A1]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => A1): Exit[E, A1]", "member" : "zio.Exit.map", "link" : "zio\/Exit.html#map[A1](f:A=>A1):zio.Exit[E,A1]", "kind" : "final def"}, {"label" : "isSuccess", "tail" : "(): Boolean", "member" : "zio.Exit.isSuccess", "link" : "zio\/Exit.html#isSuccess:Boolean", "kind" : "final def"}, {"label" : "isInterrupted", "tail" : "(): Boolean", "member" : "zio.Exit.isInterrupted", "link" : "zio\/Exit.html#isInterrupted:Boolean", "kind" : "final def"}, {"label" : "interrupted", "tail" : "(): Boolean", "member" : "zio.Exit.interrupted", "link" : "zio\/Exit.html#interrupted:Boolean", "kind" : "final def"}, {"label" : "getOrElse", "tail" : "(orElse: (Cause[E]) => A1): A1", "member" : "zio.Exit.getOrElse", "link" : "zio\/Exit.html#getOrElse[A1>:A](orElse:zio.Cause[E]=>A1):A1", "kind" : "final def"}, {"label" : "foreach", "tail" : "(f: (A) => ZIO[R, E1, B]): ZIO[R, Nothing, Exit[E1, B]]", "member" : "zio.Exit.foreach", "link" : "zio\/Exit.html#foreach[R,E1>:E,B](f:A=>zio.ZIO[R,E1,B]):zio.ZIO[R,Nothing,zio.Exit[E1,B]]", "kind" : "final def"}, {"label" : "foldZIO", "tail" : "(failed: (Cause[E]) => ZIO[R, E1, B], completed: (A) => ZIO[R, E1, B]): ZIO[R, E1, B]", "member" : "zio.Exit.foldZIO", "link" : "zio\/Exit.html#foldZIO[R,E1,B](failed:zio.Cause[E]=>zio.ZIO[R,E1,B],completed:A=>zio.ZIO[R,E1,B]):zio.ZIO[R,E1,B]", "kind" : "final def"}, {"label" : "foldM", "tail" : "(failed: (Cause[E]) => ZIO[R, E1, B], completed: (A) => ZIO[R, E1, B]): ZIO[R, E1, B]", "member" : "zio.Exit.foldM", "link" : "zio\/Exit.html#foldM[R,E1,B](failed:zio.Cause[E]=>zio.ZIO[R,E1,B],completed:A=>zio.ZIO[R,E1,B]):zio.ZIO[R,E1,B]", "kind" : "final def"}, {"label" : "fold", "tail" : "(failed: (Cause[E]) => Z, completed: (A) => Z): Z", "member" : "zio.Exit.fold", "link" : "zio\/Exit.html#fold[Z](failed:zio.Cause[E]=>Z,completed:A=>Z):Z", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Exit[E1, B]]): Exit[E1, B]", "member" : "zio.Exit.flatten", "link" : "zio\/Exit.html#flatten[E1>:E,B](implicitev:A<:<zio.Exit[E1,B]):zio.Exit[E1,B]", "kind" : "final def"}, {"label" : "flatMapZIO", "tail" : "(f: (A) => ZIO[R, E2, Exit[E1, A1]]): ZIO[R, E2, Exit[E1, A1]]", "member" : "zio.Exit.flatMapZIO", "link" : "zio\/Exit.html#flatMapZIO[E1>:E,R,E2,A1](f:A=>zio.ZIO[R,E2,zio.Exit[E1,A1]]):zio.ZIO[R,E2,zio.Exit[E1,A1]]", "kind" : "final def"}, {"label" : "flatMapM", "tail" : "(f: (A) => ZIO[R, E2, Exit[E1, A1]]): ZIO[R, E2, Exit[E1, A1]]", "member" : "zio.Exit.flatMapM", "link" : "zio\/Exit.html#flatMapM[E1>:E,R,E2,A1](f:A=>zio.ZIO[R,E2,zio.Exit[E1,A1]]):zio.ZIO[R,E2,zio.Exit[E1,A1]]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Exit[E1, A1]): Exit[E1, A1]", "member" : "zio.Exit.flatMap", "link" : "zio\/Exit.html#flatMap[E1>:E,A1](f:A=>zio.Exit[E1,A1]):zio.Exit[E1,A1]", "kind" : "final def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Boolean", "member" : "zio.Exit.exists", "link" : "zio\/Exit.html#exists(p:A=>Boolean):Boolean", "kind" : "final def"}, {"label" : "bimap", "tail" : "(f: (E) => E1, g: (A) => A1): Exit[E1, A1]", "member" : "zio.Exit.bimap", "link" : "zio\/Exit.html#bimap[E1,A1](f:E=>E1,g:A=>A1):zio.Exit[E1,A1]", "kind" : "final def"}, {"label" : "as", "tail" : "(b: B): Exit[E, B]", "member" : "zio.Exit.as", "link" : "zio\/Exit.html#as[B](b:B):zio.Exit[E,B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(that: Exit[E1, B])(zippable: Zippable[A, B]): Exit[E1, Out]", "member" : "zio.Exit.<*>", "link" : "zio\/Exit.html#<*>[E1>:E,B](that:zio.Exit[E1,B])(implicitzippable:zio.Zippable[A,B]):zio.Exit[E1,zippable.Out]", "kind" : "final def"}, {"label" : "<*", "tail" : "(that: Exit[E1, B]): Exit[E1, A]", "member" : "zio.Exit.<*", "link" : "zio\/Exit.html#<*[E1>:E,B](that:zio.Exit[E1,B]):zio.Exit[E1,A]", "kind" : "final def"}, {"label" : "<&>", "tail" : "(that: Exit[E1, B])(zippable: Zippable[A, B]): Exit[E1, Out]", "member" : "zio.Exit.<&>", "link" : "zio\/Exit.html#<&>[E1>:E,B](that:zio.Exit[E1,B])(implicitzippable:zio.Zippable[A,B]):zio.Exit[E1,zippable.Out]", "kind" : "final def"}, {"label" : "<&", "tail" : "(that: Exit[E1, B]): Exit[E1, A]", "member" : "zio.Exit.<&", "link" : "zio\/Exit.html#<&[E1>:E,B](that:zio.Exit[E1,B]):zio.Exit[E1,A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(that: Exit[E1, B]): Exit[E1, B]", "member" : "zio.Exit.*>", "link" : "zio\/Exit.html#*>[E1>:E,B](that:zio.Exit[E1,B]):zio.Exit[E1,B]", "kind" : "final def"}, {"label" : "&>", "tail" : "(that: Exit[E1, B]): Exit[E1, B]", "member" : "zio.Exit.&>", "link" : "zio\/Exit.html#&>[E1>:E,B](that:zio.Exit[E1,B]):zio.Exit[E1,B]", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/Exit.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "zio\/Exit.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "zio\/Exit.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "zio\/Exit.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Exit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Exit.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Exit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Exit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Exit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Exit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Exit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Exit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Exit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Exit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Exit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Exit.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Exit.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Exit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Exit.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Exit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Exit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Exit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Exit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "zio\/Exit.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "zio\/Exit.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "zio\/Exit.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "unit", "tail" : ": Exit[Nothing, Unit]", "member" : "zio.Exit.unit", "link" : "zio\/Exit$.html#unit:zio.Exit[Nothing,Unit]", "kind" : "val"}, {"label" : "succeed", "tail" : "(a: A): Exit[Nothing, A]", "member" : "zio.Exit.succeed", "link" : "zio\/Exit$.html#succeed[A](a:A):zio.Exit[Nothing,A]", "kind" : "def"}, {"label" : "halt", "tail" : "(cause: Cause[E]): Exit[E, Nothing]", "member" : "zio.Exit.halt", "link" : "zio\/Exit$.html#halt[E](cause:zio.Cause[E]):zio.Exit[E,Nothing]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A]): Exit[Throwable, A]", "member" : "zio.Exit.fromTry", "link" : "zio\/Exit$.html#fromTry[A](t:scala.util.Try[A]):zio.Exit[Throwable,A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(o: Option[A]): Exit[Unit, A]", "member" : "zio.Exit.fromOption", "link" : "zio\/Exit$.html#fromOption[A](o:Option[A]):zio.Exit[Unit,A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(e: Either[E, A]): Exit[E, A]", "member" : "zio.Exit.fromEither", "link" : "zio\/Exit$.html#fromEither[E,A](e:Either[E,A]):zio.Exit[E,A]", "kind" : "def"}, {"label" : "flatten", "tail" : "(exit: Exit[E, Exit[E, A]]): Exit[E, A]", "member" : "zio.Exit.flatten", "link" : "zio\/Exit$.html#flatten[E,A](exit:zio.Exit[E,zio.Exit[E,A]]):zio.Exit[E,A]", "kind" : "def"}, {"label" : "failCause", "tail" : "(cause: Cause[E]): Exit[E, Nothing]", "member" : "zio.Exit.failCause", "link" : "zio\/Exit$.html#failCause[E](cause:zio.Cause[E]):zio.Exit[E,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(error: E): Exit[E, Nothing]", "member" : "zio.Exit.fail", "link" : "zio\/Exit$.html#fail[E](error:E):zio.Exit[E,Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(t: Throwable): Exit[Nothing, Nothing]", "member" : "zio.Exit.die", "link" : "zio\/Exit$.html#die(t:Throwable):zio.Exit[Nothing,Nothing]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(exits: Iterable[Exit[E, A]]): Option[Exit[E, List[A]]]", "member" : "zio.Exit.collectAllPar", "link" : "zio\/Exit$.html#collectAllPar[E,A](exits:Iterable[zio.Exit[E,A]]):Option[zio.Exit[E,List[A]]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(exits: Iterable[Exit[E, A]]): Option[Exit[E, List[A]]]", "member" : "zio.Exit.collectAll", "link" : "zio\/Exit$.html#collectAll[E,A](exits:Iterable[zio.Exit[E,A]]):Option[zio.Exit[E,List[A]]]", "kind" : "def"}, {"label" : "interrupt", "tail" : "(id: FiberId): Exit[Nothing, Nothing]", "member" : "zio.Exit.interrupt", "link" : "zio\/Exit$.html#interrupt(id:zio.FiberId):zio.Exit[Nothing,Nothing]", "kind" : "def"}, {"label" : "Failure", "tail" : "", "member" : "zio.Exit.Failure", "link" : "zio\/Exit$.html#Failure[+E]extendsExit[E,Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Success", "tail" : "", "member" : "zio.Exit.Success", "link" : "zio\/Exit$.html#Success[+A]extendsExit[Nothing,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Exit$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Exit$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Exit$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Exit$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Exit$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Exit$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Exit$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Exit$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Exit$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Exit$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Exit$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Exit$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Exit$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Exit$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Exit$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Exit$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Exit$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Exit$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Exit$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/Exit.html", "kind" : "class"}, {"name" : "zio.ExitCode", "shortDescription" : "", "object" : "zio\/ExitCode$.html", "members_object" : [{"label" : "failure", "tail" : ": ExitCode", "member" : "zio.ExitCode.failure", "link" : "zio\/ExitCode$.html#failure:zio.ExitCode", "kind" : "val"}, {"label" : "success", "tail" : ": ExitCode", "member" : "zio.ExitCode.success", "link" : "zio\/ExitCode$.html#success:zio.ExitCode", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ExitCode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ExitCode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ExitCode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ExitCode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ExitCode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ExitCode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ExitCode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ExitCode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ExitCode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ExitCode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ExitCode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ExitCode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ExitCode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ExitCode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ExitCode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ExitCode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ExitCode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ExitCode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ExitCode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "zio.ExitCode#<init>", "error" : "unsupported entity"}, {"label" : "code", "tail" : ": Int", "member" : "zio.ExitCode.code", "link" : "zio\/ExitCode.html#code:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/ExitCode.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ExitCode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ExitCode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ExitCode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ExitCode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ExitCode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ExitCode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ExitCode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ExitCode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ExitCode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ExitCode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ExitCode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ExitCode.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ExitCode.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ExitCode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ExitCode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ExitCode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/ExitCode.html", "kind" : "case class"}, {"name" : "zio.Fiber", "shortDescription" : "A fiber is a lightweight thread of execution that never consumes more than awhole thread (but may consume much less, depending on contention andasynchronicity).", "object" : "zio\/Fiber$.html", "members_class" : [{"label" : "zipWith", "tail" : "(that: => Fiber[E1, B])(f: (A, B) => C): Synthetic[E1, C]", "member" : "zio.Fiber.zipWith", "link" : "zio\/Fiber.html#zipWith[E1>:E,B,C](that:=>zio.Fiber[E1,B])(f:(A,B)=>C):zio.Fiber.Synthetic[E1,C]", "kind" : "final def"}, {"label" : "zipRight", "tail" : "(that: Fiber[E1, B]): Synthetic[E1, B]", "member" : "zio.Fiber.zipRight", "link" : "zio\/Fiber.html#zipRight[E1>:E,B](that:zio.Fiber[E1,B]):zio.Fiber.Synthetic[E1,B]", "kind" : "final def"}, {"label" : "zipLeft", "tail" : "(that: Fiber[E1, B]): Synthetic[E1, A]", "member" : "zio.Fiber.zipLeft", "link" : "zio\/Fiber.html#zipLeft[E1>:E,B](that:zio.Fiber[E1,B]):zio.Fiber.Synthetic[E1,A]", "kind" : "final def"}, {"label" : "zip", "tail" : "(that: => Fiber[E1, B])(zippable: Zippable[A, B]): Synthetic[E1, Out]", "member" : "zio.Fiber.zip", "link" : "zio\/Fiber.html#zip[E1>:E,B](that:=>zio.Fiber[E1,B])(implicitzippable:zio.Zippable[A,B]):zio.Fiber.Synthetic[E1,zippable.Out]", "kind" : "final def"}, {"label" : "unit", "tail" : "(): Synthetic[E, Unit]", "member" : "zio.Fiber.unit", "link" : "zio\/Fiber.html#unit:zio.Fiber.Synthetic[E,Unit]", "kind" : "final def"}, {"label" : "toManaged", "tail" : "(): ZManaged[Any, Nothing, Fiber[E, A]]", "member" : "zio.Fiber.toManaged", "link" : "zio\/Fiber.html#toManaged:zio.ZManaged[Any,Nothing,zio.Fiber[E,A]]", "kind" : "final def"}, {"label" : "toFutureWith", "tail" : "(f: (E) => Throwable): UIO[CancelableFuture[A]]", "member" : "zio.Fiber.toFutureWith", "link" : "zio\/Fiber.html#toFutureWith(f:E=>Throwable):zio.UIO[zio.CancelableFuture[A]]", "kind" : "final def"}, {"label" : "toFuture", "tail" : "(ev: IsSubtypeOfError[E, Throwable]): UIO[CancelableFuture[A]]", "member" : "zio.Fiber.toFuture", "link" : "zio\/Fiber.html#toFuture(implicitev:zio.IsSubtypeOfError[E,Throwable]):zio.UIO[zio.CancelableFuture[A]]", "kind" : "final def"}, {"label" : "orElseEither", "tail" : "(that: => Fiber[E1, B]): Synthetic[E1, Either[A, B]]", "member" : "zio.Fiber.orElseEither", "link" : "zio\/Fiber.html#orElseEither[E1,B](that:=>zio.Fiber[E1,B]):zio.Fiber.Synthetic[E1,Either[A,B]]", "kind" : "final def"}, {"label" : "orElse", "tail" : "(that: => Fiber[E1, A1])(ev: CanFail[E]): Synthetic[E1, A1]", "member" : "zio.Fiber.orElse", "link" : "zio\/Fiber.html#orElse[E1,A1>:A](that:=>zio.Fiber[E1,A1])(implicitev:zio.CanFail[E]):zio.Fiber.Synthetic[E1,A1]", "kind" : "def"}, {"label" : "mapZIO", "tail" : "(f: (A) => IO[E1, B]): Synthetic[E1, B]", "member" : "zio.Fiber.mapZIO", "link" : "zio\/Fiber.html#mapZIO[E1>:E,B](f:A=>zio.IO[E1,B]):zio.Fiber.Synthetic[E1,B]", "kind" : "final def"}, {"label" : "mapM", "tail" : "(f: (A) => IO[E1, B]): Synthetic[E1, B]", "member" : "zio.Fiber.mapM", "link" : "zio\/Fiber.html#mapM[E1>:E,B](f:A=>zio.IO[E1,B]):zio.Fiber.Synthetic[E1,B]", "kind" : "final def"}, {"label" : "mapFiber", "tail" : "(f: (A) => Fiber[E1, B]): UIO[Fiber[E1, B]]", "member" : "zio.Fiber.mapFiber", "link" : "zio\/Fiber.html#mapFiber[E1>:E,B](f:A=>zio.Fiber[E1,B]):zio.UIO[zio.Fiber[E1,B]]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Synthetic[E, B]", "member" : "zio.Fiber.map", "link" : "zio\/Fiber.html#map[B](f:A=>B):zio.Fiber.Synthetic[E,B]", "kind" : "final def"}, {"label" : "join", "tail" : "(): IO[E, A]", "member" : "zio.Fiber.join", "link" : "zio\/Fiber.html#join:zio.IO[E,A]", "kind" : "final def"}, {"label" : "interruptFork", "tail" : "(): UIO[Unit]", "member" : "zio.Fiber.interruptFork", "link" : "zio\/Fiber.html#interruptFork:zio.UIO[Unit]", "kind" : "final def"}, {"label" : "interrupt", "tail" : "(): UIO[Exit[E, A]]", "member" : "zio.Fiber.interrupt", "link" : "zio\/Fiber.html#interrupt:zio.UIO[zio.Exit[E,A]]", "kind" : "final def"}, {"label" : "fold", "tail" : "(runtime: (Fiber.Runtime[E, A]) => Z, synthetic: (Synthetic[E, A]) => Z): Z", "member" : "zio.Fiber.fold", "link" : "zio\/Fiber.html#fold[Z](runtime:zio.Fiber.Runtime[E,A]=>Z,synthetic:zio.Fiber.Synthetic[E,A]=>Z):Z", "kind" : "final def"}, {"label" : "as", "tail" : "(b: => B): Synthetic[E, B]", "member" : "zio.Fiber.as", "link" : "zio\/Fiber.html#as[B](b:=>B):zio.Fiber.Synthetic[E,B]", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: => Fiber[E1, A1])(ev: CanFail[E]): Synthetic[E1, A1]", "member" : "zio.Fiber.<>", "link" : "zio\/Fiber.html#<>[E1,A1>:A](that:=>zio.Fiber[E1,A1])(implicitev:zio.CanFail[E]):zio.Fiber.Synthetic[E1,A1]", "kind" : "def"}, {"label" : "<+>", "tail" : "(that: => Fiber[E1, B])(ev: CanFail[E]): Synthetic[E1, Either[A, B]]", "member" : "zio.Fiber.<+>", "link" : "zio\/Fiber.html#<+>[E1>:E,B](that:=>zio.Fiber[E1,B])(implicitev:zio.CanFail[E]):zio.Fiber.Synthetic[E1,Either[A,B]]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(that: => Fiber[E1, B])(zippable: Zippable[A, B]): Synthetic[E1, Out]", "member" : "zio.Fiber.<*>", "link" : "zio\/Fiber.html#<*>[E1>:E,B](that:=>zio.Fiber[E1,B])(implicitzippable:zio.Zippable[A,B]):zio.Fiber.Synthetic[E1,zippable.Out]", "kind" : "final def"}, {"label" : "<*", "tail" : "(that: Fiber[E1, B]): Synthetic[E1, A]", "member" : "zio.Fiber.<*", "link" : "zio\/Fiber.html#<*[E1>:E,B](that:zio.Fiber[E1,B]):zio.Fiber.Synthetic[E1,A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(that: Fiber[E1, B]): Synthetic[E1, B]", "member" : "zio.Fiber.*>", "link" : "zio\/Fiber.html#*>[E1>:E,B](that:zio.Fiber[E1,B]):zio.Fiber.Synthetic[E1,B]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Fiber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Fiber.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Fiber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Fiber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Fiber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Fiber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Fiber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Fiber.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Fiber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Fiber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Fiber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Fiber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Fiber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Fiber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Fiber.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Fiber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Fiber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Fiber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Fiber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "poll", "tail" : "(): UIO[Option[Exit[E, A]]]", "member" : "zio.Fiber.poll", "link" : "zio\/Fiber.html#poll:zio.UIO[Option[zio.Exit[E,A]]]", "kind" : "abstract def"}, {"label" : "interruptAs", "tail" : "(fiberId: FiberId): UIO[Exit[E, A]]", "member" : "zio.Fiber.interruptAs", "link" : "zio\/Fiber.html#interruptAs(fiberId:zio.FiberId):zio.UIO[zio.Exit[E,A]]", "kind" : "abstract def"}, {"label" : "inheritRefs", "tail" : "(): UIO[Unit]", "member" : "zio.Fiber.inheritRefs", "link" : "zio\/Fiber.html#inheritRefs:zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "getRef", "tail" : "(ref: ZFiberRef.Runtime[A]): UIO[A]", "member" : "zio.Fiber.getRef", "link" : "zio\/Fiber.html#getRef[A](ref:zio.FiberRef.Runtime[A]):zio.UIO[A]", "kind" : "abstract def"}, {"label" : "await", "tail" : "(): UIO[Exit[E, A]]", "member" : "zio.Fiber.await", "link" : "zio\/Fiber.html#await:zio.UIO[zio.Exit[E,A]]", "kind" : "abstract def"}], "members_object" : [{"label" : "unsafeCurrentFiber", "tail" : "(): Option[Fiber[Any, Any]]", "member" : "zio.Fiber.unsafeCurrentFiber", "link" : "zio\/Fiber$.html#unsafeCurrentFiber():Option[zio.Fiber[Any,Any]]", "kind" : "def"}, {"label" : "unit", "tail" : ": Synthetic[Nothing, Unit]", "member" : "zio.Fiber.unit", "link" : "zio\/Fiber$.html#unit:zio.Fiber.Synthetic[Nothing,Unit]", "kind" : "val"}, {"label" : "succeed", "tail" : "(a: A): Synthetic[Nothing, A]", "member" : "zio.Fiber.succeed", "link" : "zio\/Fiber$.html#succeed[A](a:A):zio.Fiber.Synthetic[Nothing,A]", "kind" : "def"}, {"label" : "putDumpStr", "tail" : "(label: String, fibers: Runtime[_, _]*): ZIO[Has[Console], IOException, Unit]", "member" : "zio.Fiber.putDumpStr", "link" : "zio\/Fiber$.html#putDumpStr(label:String,fibers:zio.Fiber.Runtime[_,_]*):zio.ZIO[zio.Has[zio.Console],java.io.IOException,Unit]", "kind" : "def"}, {"label" : "never", "tail" : ": Synthetic[Nothing, Nothing]", "member" : "zio.Fiber.never", "link" : "zio\/Fiber$.html#never:zio.Fiber.Synthetic[Nothing,Nothing]", "kind" : "val"}, {"label" : "joinAll", "tail" : "(fs: Iterable[Fiber[E, Any]]): IO[E, Unit]", "member" : "zio.Fiber.joinAll", "link" : "zio\/Fiber$.html#joinAll[E](fs:Iterable[zio.Fiber[E,Any]]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "interruptAs", "tail" : "(id: FiberId): Synthetic[Nothing, Nothing]", "member" : "zio.Fiber.interruptAs", "link" : "zio\/Fiber$.html#interruptAs(id:zio.FiberId):zio.Fiber.Synthetic[Nothing,Nothing]", "kind" : "def"}, {"label" : "interruptAllAs", "tail" : "(fiberId: FiberId)(fs: Iterable[Fiber[Any, Any]]): UIO[Unit]", "member" : "zio.Fiber.interruptAllAs", "link" : "zio\/Fiber$.html#interruptAllAs(fiberId:zio.FiberId)(fs:Iterable[zio.Fiber[Any,Any]]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "interruptAll", "tail" : "(fs: Iterable[Fiber[Any, Any]]): UIO[Unit]", "member" : "zio.Fiber.interruptAll", "link" : "zio\/Fiber$.html#interruptAll(fs:Iterable[zio.Fiber[Any,Any]]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "halt", "tail" : "(cause: Cause[E]): Synthetic[E, Nothing]", "member" : "zio.Fiber.halt", "link" : "zio\/Fiber$.html#halt[E](cause:zio.Cause[E]):zio.Fiber.Synthetic[E,Nothing]", "kind" : "def"}, {"label" : "fromZIO", "tail" : "(io: IO[E, A]): UIO[Synthetic[E, A]]", "member" : "zio.Fiber.fromZIO", "link" : "zio\/Fiber$.html#fromZIO[E,A](io:zio.IO[E,A]):zio.UIO[zio.Fiber.Synthetic[E,A]]", "kind" : "def"}, {"label" : "fromFuture", "tail" : "(thunk: => Future[A]): Synthetic[Throwable, A]", "member" : "zio.Fiber.fromFuture", "link" : "zio\/Fiber$.html#fromFuture[A](thunk:=>scala.concurrent.Future[A]):zio.Fiber.Synthetic[Throwable,A]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(io: IO[E, A]): UIO[Synthetic[E, A]]", "member" : "zio.Fiber.fromEffect", "link" : "zio\/Fiber$.html#fromEffect[E,A](io:zio.IO[E,A]):zio.UIO[zio.Fiber.Synthetic[E,A]]", "kind" : "def"}, {"label" : "fiberName", "tail" : ": ZFiberRef.Runtime[Option[String]]", "member" : "zio.Fiber.fiberName", "link" : "zio\/Fiber$.html#fiberName:zio.FiberRef.Runtime[Option[String]]", "kind" : "val"}, {"label" : "failCause", "tail" : "(cause: Cause[E]): Synthetic[E, Nothing]", "member" : "zio.Fiber.failCause", "link" : "zio\/Fiber$.html#failCause[E](cause:zio.Cause[E]):zio.Fiber.Synthetic[E,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: E): Synthetic[E, Nothing]", "member" : "zio.Fiber.fail", "link" : "zio\/Fiber$.html#fail[E](e:E):zio.Fiber.Synthetic[E,Nothing]", "kind" : "def"}, {"label" : "dumpStr", "tail" : "(fibers: Runtime[_, _]*): UIO[String]", "member" : "zio.Fiber.dumpStr", "link" : "zio\/Fiber$.html#dumpStr(fibers:zio.Fiber.Runtime[_,_]*):zio.UIO[String]", "kind" : "def"}, {"label" : "dump", "tail" : "(fibers: Runtime[_, _]*): UIO[Iterable[Dump]]", "member" : "zio.Fiber.dump", "link" : "zio\/Fiber$.html#dump(fibers:zio.Fiber.Runtime[_,_]*):zio.UIO[Iterable[zio.Fiber.Dump]]", "kind" : "def"}, {"label" : "done", "tail" : "(exit: => Exit[E, A]): Synthetic[E, A]", "member" : "zio.Fiber.done", "link" : "zio\/Fiber$.html#done[E,A](exit:=>zio.Exit[E,A]):zio.Fiber.Synthetic[E,A]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(fibers: Collection[Fiber[E, A]])(bf: zio.BuildFrom[Collection[Fiber[E, A]], A, Collection[A]]): Synthetic[E, Collection[A]]", "member" : "zio.Fiber.collectAll", "link" : "zio\/Fiber$.html#collectAll[E,A,Collection[+Element]<:Iterable[Element]](fibers:Collection[zio.Fiber[E,A]])(implicitbf:zio.BuildFrom[Collection[zio.Fiber[E,A]],A,Collection[A]]):zio.Fiber.Synthetic[E,Collection[A]]", "kind" : "def"}, {"label" : "awaitAll", "tail" : "(fs: Iterable[Fiber[Any, Any]]): UIO[Unit]", "member" : "zio.Fiber.awaitAll", "link" : "zio\/Fiber$.html#awaitAll(fs:Iterable[zio.Fiber[Any,Any]]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "Status", "tail" : "", "member" : "zio.Fiber.Status", "link" : "zio\/Fiber$.html#Status", "kind" : "object"}, {"label" : "Status", "tail" : "", "member" : "zio.Fiber.Status", "link" : "zio\/Fiber$.html#StatusextendsSerializablewithProduct", "kind" : "sealed abstract class"}, {"label" : "Id", "tail" : ": FiberId.type", "member" : "zio.Fiber.Id", "link" : "zio\/Fiber$.html#Id:zio.FiberId.type", "kind" : "val"}, {"label" : "Id", "tail" : "", "member" : "zio.Fiber.Id", "link" : "zio\/Fiber$.html#Id=zio.FiberId", "kind" : "type"}, {"label" : "Dump", "tail" : "", "member" : "zio.Fiber.Dump", "link" : "zio\/Fiber$.html#Dump", "kind" : "object"}, {"label" : "Dump", "tail" : "", "member" : "zio.Fiber.Dump", "link" : "zio\/Fiber$.html#DumpextendsSerializable", "kind" : "sealed abstract class"}, {"label" : "Descriptor", "tail" : "", "member" : "zio.Fiber.Descriptor", "link" : "zio\/Fiber$.html#Descriptor", "kind" : "object"}, {"label" : "Descriptor", "tail" : "", "member" : "zio.Fiber.Descriptor", "link" : "zio\/Fiber$.html#DescriptorextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "Synthetic", "tail" : "", "member" : "zio.Fiber.Synthetic", "link" : "zio\/Fiber$.html#Synthetic[+E,+A]extendsFiber[E,A]", "kind" : "sealed abstract class"}, {"label" : "Runtime", "tail" : "", "member" : "zio.Fiber.Runtime", "link" : "zio\/Fiber$.html#Runtime[+E,+A]extendsFiber[E,A]", "kind" : "sealed abstract class"}, {"label" : "fromFutureJava", "tail" : "(thunk: => Future[A]): Fiber[Throwable, A]", "member" : "zio.FiberPlatformSpecific.fromFutureJava", "link" : "zio\/Fiber$.html#fromFutureJava[A](thunk:=>java.util.concurrent.Future[A]):zio.Fiber[Throwable,A]", "kind" : "def"}, {"label" : "fromCompletionStage", "tail" : "(thunk: => CompletionStage[A]): Fiber[Throwable, A]", "member" : "zio.FiberPlatformSpecific.fromCompletionStage", "link" : "zio\/Fiber$.html#fromCompletionStage[A](thunk:=>java.util.concurrent.CompletionStage[A]):zio.Fiber[Throwable,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Fiber$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Fiber$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Fiber$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Fiber$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Fiber$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Fiber$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Fiber$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Fiber$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Fiber$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Fiber$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Fiber$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Fiber$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Fiber$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Fiber$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Fiber$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Fiber$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Fiber$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Fiber$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Fiber$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/Fiber.html", "kind" : "class"}, {"name" : "zio.FiberFailure", "shortDescription" : "Represents a failure in a fiber.", "members_case class" : [{"label" : "getMessage", "tail" : "(): String", "member" : "zio.FiberFailure.getMessage", "link" : "zio\/FiberFailure.html#getMessage():String", "kind" : "def"}, {"member" : "zio.FiberFailure#<init>", "error" : "unsupported entity"}, {"label" : "cause", "tail" : ": Cause[Any]", "member" : "zio.FiberFailure.cause", "link" : "zio\/FiberFailure.html#cause:zio.Cause[Any]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/FiberFailure.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "zio\/FiberFailure.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "zio\/FiberFailure.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "zio\/FiberFailure.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "zio\/FiberFailure.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "zio\/FiberFailure.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "zio\/FiberFailure.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "zio\/FiberFailure.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "zio\/FiberFailure.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "zio\/FiberFailure.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "zio\/FiberFailure.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "zio\/FiberFailure.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "zio\/FiberFailure.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FiberFailure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FiberFailure.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FiberFailure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FiberFailure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FiberFailure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FiberFailure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FiberFailure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FiberFailure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FiberFailure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FiberFailure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FiberFailure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FiberFailure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FiberFailure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FiberFailure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FiberFailure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FiberFailure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/FiberFailure.html", "kind" : "case class"}, {"name" : "zio.FiberId", "shortDescription" : "The identity of a Fiber, described by the time it began life, and amonotonically increasing sequence number generated from an atomic counter.", "object" : "zio\/FiberId$.html", "members_object" : [{"label" : "None", "tail" : ": FiberId", "member" : "zio.FiberId.None", "link" : "zio\/FiberId$.html#None:zio.FiberId", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FiberId$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FiberId$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FiberId$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FiberId$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FiberId$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FiberId$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FiberId$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FiberId$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FiberId$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FiberId$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FiberId$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FiberId$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FiberId$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FiberId$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FiberId$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FiberId$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FiberId$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FiberId$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FiberId$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "zio.FiberId#<init>", "error" : "unsupported entity"}, {"label" : "seqNumber", "tail" : ": Long", "member" : "zio.FiberId.seqNumber", "link" : "zio\/FiberId.html#seqNumber:Long", "kind" : "val"}, {"label" : "startTimeMillis", "tail" : ": Long", "member" : "zio.FiberId.startTimeMillis", "link" : "zio\/FiberId.html#startTimeMillis:Long", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/FiberId.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FiberId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FiberId.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FiberId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FiberId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FiberId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FiberId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FiberId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FiberId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FiberId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FiberId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FiberId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FiberId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FiberId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FiberId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FiberId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FiberId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/FiberId.html", "kind" : "case class"}, {"name" : "zio.FunctionToLayerOps", "trait" : "zio\/FunctionToLayerOps.html", "kind" : "trait", "members_trait" : [{"label" : "Function21ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function21ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function21ToLayerSyntax[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function20ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function20ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function20ToLayerSyntax[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function19ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function19ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function19ToLayerSyntax[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function18ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function18ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function18ToLayerSyntax[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function17ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function17ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function17ToLayerSyntax[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function16ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function16ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function16ToLayerSyntax[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function15ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function15ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function15ToLayerSyntax[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function14ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function14ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function14ToLayerSyntax[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function13ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function13ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function13ToLayerSyntax[A,B,C,D,E,F,G,H,I,J,K,L,M,N]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function12ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function12ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function12ToLayerSyntax[A,B,C,D,E,F,G,H,I,J,K,L,M]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function11ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function11ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function11ToLayerSyntax[A,B,C,D,E,F,G,H,I,J,K,L]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function10ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function10ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function10ToLayerSyntax[A,B,C,D,E,F,G,H,I,J,K]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function9ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function9ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function9ToLayerSyntax[A,B,C,D,E,F,G,H,I,J]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function8ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function8ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function8ToLayerSyntax[A,B,C,D,E,F,G,H,I]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function7ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function7ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function7ToLayerSyntax[A,B,C,D,E,F,G,H]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function6ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function6ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function6ToLayerSyntax[A,B,C,D,E,F,G]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function5ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function5ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function5ToLayerSyntax[A,B,C,D,E,F]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function4ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function4ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function4ToLayerSyntax[A,B,C,D,E]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function3ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function3ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function3ToLayerSyntax[A,B,C,D]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function2ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function2ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function2ToLayerSyntax[A,B,C]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function1ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function1ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function1ToLayerSyntax[A,B]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Function0ToLayerSyntax", "tail" : "", "member" : "zio.FunctionToLayerOps.Function0ToLayerSyntax", "link" : "zio\/FunctionToLayerOps.html#Function0ToLayerSyntax[A]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.FunctionToLayerOps.Function0ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[A1]): URLayer[Any, Has[A1]]", "member" : "zio.FunctionToLayerOps.Function0ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#toLayer[A1>:A](implicitevidence$2:zio.Tag[A1]):zio.URLayer[Any,zio.Has[A1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function0ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function0ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function10ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[K1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J], Has[K1]]", "member" : "zio.FunctionToLayerOps.Function10ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#toLayer[K1>:K](implicitevidence$77:zio.Tag[K1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J],zio.Has[K1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function10ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function10ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function11ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[L1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K], Has[L1]]", "member" : "zio.FunctionToLayerOps.Function11ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#toLayer[L1>:L](implicitevidence$90:zio.Tag[L1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K],zio.Has[L1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function11ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function11ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function12ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[M1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L], Has[M1]]", "member" : "zio.FunctionToLayerOps.Function12ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#toLayer[M1>:M](implicitevidence$104:zio.Tag[M1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L],zio.Has[M1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function12ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function12ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function13ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[N1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M], Has[N1]]", "member" : "zio.FunctionToLayerOps.Function13ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#toLayer[N1>:N](implicitevidence$119:zio.Tag[N1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M],zio.Has[N1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function13ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function13ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function14ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[O1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N], Has[O1]]", "member" : "zio.FunctionToLayerOps.Function14ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#toLayer[O1>:O](implicitevidence$135:zio.Tag[O1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N],zio.Has[O1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function14ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function14ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function15ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[P1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N] with Has[O], Has[P1]]", "member" : "zio.FunctionToLayerOps.Function15ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#toLayer[P1>:P](implicitevidence$152:zio.Tag[P1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]withzio.Has[O],zio.Has[P1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function15ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function15ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function16ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[Q1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N] with Has[O] with Has[P], Has[Q1]]", "member" : "zio.FunctionToLayerOps.Function16ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#toLayer[Q1>:Q](implicitevidence$170:zio.Tag[Q1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]withzio.Has[O]withzio.Has[P],zio.Has[Q1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function16ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function16ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function17ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[R1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N] with Has[O] with Has[P] with Has[Q], Has[R1]]", "member" : "zio.FunctionToLayerOps.Function17ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#toLayer[R1>:R](implicitevidence$189:zio.Tag[R1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]withzio.Has[O]withzio.Has[P]withzio.Has[Q],zio.Has[R1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function17ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function17ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function18ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[S1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N] with Has[O] with Has[P] with Has[Q] with Has[R], Has[S1]]", "member" : "zio.FunctionToLayerOps.Function18ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#toLayer[S1>:S](implicitevidence$209:zio.Tag[S1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]withzio.Has[O]withzio.Has[P]withzio.Has[Q]withzio.Has[R],zio.Has[S1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function18ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function18ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function19ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[T1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N] with Has[O] with Has[P] with Has[Q] with Has[R] with Has[S], Has[T1]]", "member" : "zio.FunctionToLayerOps.Function19ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#toLayer[T1>:T](implicitevidence$230:zio.Tag[T1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]withzio.Has[O]withzio.Has[P]withzio.Has[Q]withzio.Has[R]withzio.Has[S],zio.Has[T1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function19ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function19ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function1ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[B1]): URLayer[Has[A], Has[B1]]", "member" : "zio.FunctionToLayerOps.Function1ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#toLayer[B1>:B](implicitevidence$5:zio.Tag[B1]):zio.URLayer[zio.Has[A],zio.Has[B1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function1ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function1ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function20ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[U1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N] with Has[O] with Has[P] with Has[Q] with Has[R] with Has[S] with Has[T], Has[U1]]", "member" : "zio.FunctionToLayerOps.Function20ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#toLayer[U1>:U](implicitevidence$252:zio.Tag[U1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]withzio.Has[O]withzio.Has[P]withzio.Has[Q]withzio.Has[R]withzio.Has[S]withzio.Has[T],zio.Has[U1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function20ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function20ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function21ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[V1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N] with Has[O] with Has[P] with Has[Q] with Has[R] with Has[S] with Has[T] with Has[U], Has[V1]]", "member" : "zio.FunctionToLayerOps.Function21ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#toLayer[V1>:V](implicitevidence$275:zio.Tag[V1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]withzio.Has[O]withzio.Has[P]withzio.Has[Q]withzio.Has[R]withzio.Has[S]withzio.Has[T]withzio.Has[U],zio.Has[V1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function21ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function21ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function2ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[C1]): URLayer[Has[A] with Has[B], Has[C1]]", "member" : "zio.FunctionToLayerOps.Function2ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#toLayer[C1>:C](implicitevidence$9:zio.Tag[C1]):zio.URLayer[zio.Has[A]withzio.Has[B],zio.Has[C1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function2ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function2ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function3ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[D1]): URLayer[Has[A] with Has[B] with Has[C], Has[D1]]", "member" : "zio.FunctionToLayerOps.Function3ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#toLayer[D1>:D](implicitevidence$14:zio.Tag[D1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C],zio.Has[D1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function3ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function3ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function4ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[E1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D], Has[E1]]", "member" : "zio.FunctionToLayerOps.Function4ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#toLayer[E1>:E](implicitevidence$20:zio.Tag[E1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D],zio.Has[E1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function4ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function4ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function5ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[F1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E], Has[F1]]", "member" : "zio.FunctionToLayerOps.Function5ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#toLayer[F1>:F](implicitevidence$27:zio.Tag[F1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E],zio.Has[F1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function5ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function5ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function6ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[G1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F], Has[G1]]", "member" : "zio.FunctionToLayerOps.Function6ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#toLayer[G1>:G](implicitevidence$35:zio.Tag[G1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F],zio.Has[G1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function6ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function6ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function7ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[H1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G], Has[H1]]", "member" : "zio.FunctionToLayerOps.Function7ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#toLayer[H1>:H](implicitevidence$44:zio.Tag[H1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G],zio.Has[H1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function7ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function7ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function8ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[I1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H], Has[I1]]", "member" : "zio.FunctionToLayerOps.Function8ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#toLayer[I1>:I](implicitevidence$54:zio.Tag[I1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H],zio.Has[I1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function8ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function8ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.FunctionToLayerOps.Function9ToLayerSyntax", "shortDescription" : "", "members_class" : [{"label" : "toLayer", "tail" : "(arg0: zio.Tag[J1]): URLayer[Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I], Has[J1]]", "member" : "zio.FunctionToLayerOps.Function9ToLayerSyntax.toLayer", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#toLayer[J1>:J](implicitevidence$65:zio.Tag[J1]):zio.URLayer[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I],zio.Has[J1]]", "kind" : "def"}, {"member" : "zio.FunctionToLayerOps.Function9ToLayerSyntax#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/FunctionToLayerOps$Function9ToLayerSyntax.html", "kind" : "class"}, {"name" : "zio.Has", "shortDescription" : "The trait Has[A] is used with ZIO environment to express an effect'sdependency on a service of type A.", "object" : "zio\/Has$.html", "members_class" : [{"label" : "size", "tail" : "(): Int", "member" : "zio.Has.size", "link" : "zio\/Has.html#size:Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "zio.Has.toString", "link" : "zio\/Has.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "zio.Has.hashCode", "link" : "zio\/Has.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "zio.Has.equals", "link" : "zio\/Has.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Has.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Has.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Has.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Has.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Has.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Has.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Has.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Has.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Has.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Has.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Has.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Has.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Has.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Has.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Has.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Has.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Scoped", "tail" : "", "member" : "zio.Has.Scoped", "link" : "zio\/Has$.html#Scoped[M]extendsAnyRef", "kind" : "class"}, {"label" : "scoped", "tail" : "(f: (A) => A)(arg0: zio.Tag[A]): Scoped[A]", "member" : "zio.Has.scoped", "link" : "zio\/Has$.html#scoped[A](f:A=>A)(implicitevidence$265:zio.Tag[A]):zio.Has.Scoped[A]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T, u: U, v: V)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G], arg7: zio.Tag[H], arg8: zio.Tag[I], arg9: zio.Tag[J], arg10: zio.Tag[K], arg11: zio.Tag[L], arg12: zio.Tag[M], arg13: zio.Tag[N], arg14: zio.Tag[O], arg15: zio.Tag[P], arg16: zio.Tag[Q], arg17: zio.Tag[R], arg18: zio.Tag[S], arg19: zio.Tag[T], arg20: zio.Tag[U], arg21: zio.Tag[V]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N] with Has[O] with Has[P] with Has[Q] with Has[R] with Has[S] with Has[T] with Has[U] with Has[V]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q,r:R,s:S,t:T,u:U,v:V)(implicitevidence$243:zio.Tag[A],implicitevidence$244:zio.Tag[B],implicitevidence$245:zio.Tag[C],implicitevidence$246:zio.Tag[D],implicitevidence$247:zio.Tag[E],implicitevidence$248:zio.Tag[F],implicitevidence$249:zio.Tag[G],implicitevidence$250:zio.Tag[H],implicitevidence$251:zio.Tag[I],implicitevidence$252:zio.Tag[J],implicitevidence$253:zio.Tag[K],implicitevidence$254:zio.Tag[L],implicitevidence$255:zio.Tag[M],implicitevidence$256:zio.Tag[N],implicitevidence$257:zio.Tag[O],implicitevidence$258:zio.Tag[P],implicitevidence$259:zio.Tag[Q],implicitevidence$260:zio.Tag[R],implicitevidence$261:zio.Tag[S],implicitevidence$262:zio.Tag[T],implicitevidence$263:zio.Tag[U],implicitevidence$264:zio.Tag[V]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]withzio.Has[O]withzio.Has[P]withzio.Has[Q]withzio.Has[R]withzio.Has[S]withzio.Has[T]withzio.Has[U]withzio.Has[V]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T, u: U)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G], arg7: zio.Tag[H], arg8: zio.Tag[I], arg9: zio.Tag[J], arg10: zio.Tag[K], arg11: zio.Tag[L], arg12: zio.Tag[M], arg13: zio.Tag[N], arg14: zio.Tag[O], arg15: zio.Tag[P], arg16: zio.Tag[Q], arg17: zio.Tag[R], arg18: zio.Tag[S], arg19: zio.Tag[T], arg20: zio.Tag[U]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N] with Has[O] with Has[P] with Has[Q] with Has[R] with Has[S] with Has[T] with Has[U]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q,r:R,s:S,t:T,u:U)(implicitevidence$222:zio.Tag[A],implicitevidence$223:zio.Tag[B],implicitevidence$224:zio.Tag[C],implicitevidence$225:zio.Tag[D],implicitevidence$226:zio.Tag[E],implicitevidence$227:zio.Tag[F],implicitevidence$228:zio.Tag[G],implicitevidence$229:zio.Tag[H],implicitevidence$230:zio.Tag[I],implicitevidence$231:zio.Tag[J],implicitevidence$232:zio.Tag[K],implicitevidence$233:zio.Tag[L],implicitevidence$234:zio.Tag[M],implicitevidence$235:zio.Tag[N],implicitevidence$236:zio.Tag[O],implicitevidence$237:zio.Tag[P],implicitevidence$238:zio.Tag[Q],implicitevidence$239:zio.Tag[R],implicitevidence$240:zio.Tag[S],implicitevidence$241:zio.Tag[T],implicitevidence$242:zio.Tag[U]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]withzio.Has[O]withzio.Has[P]withzio.Has[Q]withzio.Has[R]withzio.Has[S]withzio.Has[T]withzio.Has[U]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G], arg7: zio.Tag[H], arg8: zio.Tag[I], arg9: zio.Tag[J], arg10: zio.Tag[K], arg11: zio.Tag[L], arg12: zio.Tag[M], arg13: zio.Tag[N], arg14: zio.Tag[O], arg15: zio.Tag[P], arg16: zio.Tag[Q], arg17: zio.Tag[R], arg18: zio.Tag[S], arg19: zio.Tag[T]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N] with Has[O] with Has[P] with Has[Q] with Has[R] with Has[S] with Has[T]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q,r:R,s:S,t:T)(implicitevidence$202:zio.Tag[A],implicitevidence$203:zio.Tag[B],implicitevidence$204:zio.Tag[C],implicitevidence$205:zio.Tag[D],implicitevidence$206:zio.Tag[E],implicitevidence$207:zio.Tag[F],implicitevidence$208:zio.Tag[G],implicitevidence$209:zio.Tag[H],implicitevidence$210:zio.Tag[I],implicitevidence$211:zio.Tag[J],implicitevidence$212:zio.Tag[K],implicitevidence$213:zio.Tag[L],implicitevidence$214:zio.Tag[M],implicitevidence$215:zio.Tag[N],implicitevidence$216:zio.Tag[O],implicitevidence$217:zio.Tag[P],implicitevidence$218:zio.Tag[Q],implicitevidence$219:zio.Tag[R],implicitevidence$220:zio.Tag[S],implicitevidence$221:zio.Tag[T]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]withzio.Has[O]withzio.Has[P]withzio.Has[Q]withzio.Has[R]withzio.Has[S]withzio.Has[T]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G], arg7: zio.Tag[H], arg8: zio.Tag[I], arg9: zio.Tag[J], arg10: zio.Tag[K], arg11: zio.Tag[L], arg12: zio.Tag[M], arg13: zio.Tag[N], arg14: zio.Tag[O], arg15: zio.Tag[P], arg16: zio.Tag[Q], arg17: zio.Tag[R], arg18: zio.Tag[S]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N] with Has[O] with Has[P] with Has[Q] with Has[R] with Has[S]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q,r:R,s:S)(implicitevidence$183:zio.Tag[A],implicitevidence$184:zio.Tag[B],implicitevidence$185:zio.Tag[C],implicitevidence$186:zio.Tag[D],implicitevidence$187:zio.Tag[E],implicitevidence$188:zio.Tag[F],implicitevidence$189:zio.Tag[G],implicitevidence$190:zio.Tag[H],implicitevidence$191:zio.Tag[I],implicitevidence$192:zio.Tag[J],implicitevidence$193:zio.Tag[K],implicitevidence$194:zio.Tag[L],implicitevidence$195:zio.Tag[M],implicitevidence$196:zio.Tag[N],implicitevidence$197:zio.Tag[O],implicitevidence$198:zio.Tag[P],implicitevidence$199:zio.Tag[Q],implicitevidence$200:zio.Tag[R],implicitevidence$201:zio.Tag[S]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]withzio.Has[O]withzio.Has[P]withzio.Has[Q]withzio.Has[R]withzio.Has[S]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G], arg7: zio.Tag[H], arg8: zio.Tag[I], arg9: zio.Tag[J], arg10: zio.Tag[K], arg11: zio.Tag[L], arg12: zio.Tag[M], arg13: zio.Tag[N], arg14: zio.Tag[O], arg15: zio.Tag[P], arg16: zio.Tag[Q], arg17: zio.Tag[R]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N] with Has[O] with Has[P] with Has[Q] with Has[R]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q,r:R)(implicitevidence$165:zio.Tag[A],implicitevidence$166:zio.Tag[B],implicitevidence$167:zio.Tag[C],implicitevidence$168:zio.Tag[D],implicitevidence$169:zio.Tag[E],implicitevidence$170:zio.Tag[F],implicitevidence$171:zio.Tag[G],implicitevidence$172:zio.Tag[H],implicitevidence$173:zio.Tag[I],implicitevidence$174:zio.Tag[J],implicitevidence$175:zio.Tag[K],implicitevidence$176:zio.Tag[L],implicitevidence$177:zio.Tag[M],implicitevidence$178:zio.Tag[N],implicitevidence$179:zio.Tag[O],implicitevidence$180:zio.Tag[P],implicitevidence$181:zio.Tag[Q],implicitevidence$182:zio.Tag[R]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]withzio.Has[O]withzio.Has[P]withzio.Has[Q]withzio.Has[R]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G], arg7: zio.Tag[H], arg8: zio.Tag[I], arg9: zio.Tag[J], arg10: zio.Tag[K], arg11: zio.Tag[L], arg12: zio.Tag[M], arg13: zio.Tag[N], arg14: zio.Tag[O], arg15: zio.Tag[P], arg16: zio.Tag[Q]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N] with Has[O] with Has[P] with Has[Q]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q)(implicitevidence$148:zio.Tag[A],implicitevidence$149:zio.Tag[B],implicitevidence$150:zio.Tag[C],implicitevidence$151:zio.Tag[D],implicitevidence$152:zio.Tag[E],implicitevidence$153:zio.Tag[F],implicitevidence$154:zio.Tag[G],implicitevidence$155:zio.Tag[H],implicitevidence$156:zio.Tag[I],implicitevidence$157:zio.Tag[J],implicitevidence$158:zio.Tag[K],implicitevidence$159:zio.Tag[L],implicitevidence$160:zio.Tag[M],implicitevidence$161:zio.Tag[N],implicitevidence$162:zio.Tag[O],implicitevidence$163:zio.Tag[P],implicitevidence$164:zio.Tag[Q]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]withzio.Has[O]withzio.Has[P]withzio.Has[Q]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G], arg7: zio.Tag[H], arg8: zio.Tag[I], arg9: zio.Tag[J], arg10: zio.Tag[K], arg11: zio.Tag[L], arg12: zio.Tag[M], arg13: zio.Tag[N], arg14: zio.Tag[O], arg15: zio.Tag[P]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N] with Has[O] with Has[P]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P)(implicitevidence$132:zio.Tag[A],implicitevidence$133:zio.Tag[B],implicitevidence$134:zio.Tag[C],implicitevidence$135:zio.Tag[D],implicitevidence$136:zio.Tag[E],implicitevidence$137:zio.Tag[F],implicitevidence$138:zio.Tag[G],implicitevidence$139:zio.Tag[H],implicitevidence$140:zio.Tag[I],implicitevidence$141:zio.Tag[J],implicitevidence$142:zio.Tag[K],implicitevidence$143:zio.Tag[L],implicitevidence$144:zio.Tag[M],implicitevidence$145:zio.Tag[N],implicitevidence$146:zio.Tag[O],implicitevidence$147:zio.Tag[P]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]withzio.Has[O]withzio.Has[P]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G], arg7: zio.Tag[H], arg8: zio.Tag[I], arg9: zio.Tag[J], arg10: zio.Tag[K], arg11: zio.Tag[L], arg12: zio.Tag[M], arg13: zio.Tag[N], arg14: zio.Tag[O]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N] with Has[O]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O)(implicitevidence$117:zio.Tag[A],implicitevidence$118:zio.Tag[B],implicitevidence$119:zio.Tag[C],implicitevidence$120:zio.Tag[D],implicitevidence$121:zio.Tag[E],implicitevidence$122:zio.Tag[F],implicitevidence$123:zio.Tag[G],implicitevidence$124:zio.Tag[H],implicitevidence$125:zio.Tag[I],implicitevidence$126:zio.Tag[J],implicitevidence$127:zio.Tag[K],implicitevidence$128:zio.Tag[L],implicitevidence$129:zio.Tag[M],implicitevidence$130:zio.Tag[N],implicitevidence$131:zio.Tag[O]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]withzio.Has[O]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G], arg7: zio.Tag[H], arg8: zio.Tag[I], arg9: zio.Tag[J], arg10: zio.Tag[K], arg11: zio.Tag[L], arg12: zio.Tag[M], arg13: zio.Tag[N]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M] with Has[N]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G,H,I,J,K,L,M,N](a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N)(implicitevidence$103:zio.Tag[A],implicitevidence$104:zio.Tag[B],implicitevidence$105:zio.Tag[C],implicitevidence$106:zio.Tag[D],implicitevidence$107:zio.Tag[E],implicitevidence$108:zio.Tag[F],implicitevidence$109:zio.Tag[G],implicitevidence$110:zio.Tag[H],implicitevidence$111:zio.Tag[I],implicitevidence$112:zio.Tag[J],implicitevidence$113:zio.Tag[K],implicitevidence$114:zio.Tag[L],implicitevidence$115:zio.Tag[M],implicitevidence$116:zio.Tag[N]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]withzio.Has[N]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G], arg7: zio.Tag[H], arg8: zio.Tag[I], arg9: zio.Tag[J], arg10: zio.Tag[K], arg11: zio.Tag[L], arg12: zio.Tag[M]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L] with Has[M]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G,H,I,J,K,L,M](a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M)(implicitevidence$90:zio.Tag[A],implicitevidence$91:zio.Tag[B],implicitevidence$92:zio.Tag[C],implicitevidence$93:zio.Tag[D],implicitevidence$94:zio.Tag[E],implicitevidence$95:zio.Tag[F],implicitevidence$96:zio.Tag[G],implicitevidence$97:zio.Tag[H],implicitevidence$98:zio.Tag[I],implicitevidence$99:zio.Tag[J],implicitevidence$100:zio.Tag[K],implicitevidence$101:zio.Tag[L],implicitevidence$102:zio.Tag[M]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]withzio.Has[M]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G], arg7: zio.Tag[H], arg8: zio.Tag[I], arg9: zio.Tag[J], arg10: zio.Tag[K], arg11: zio.Tag[L]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K] with Has[L]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G,H,I,J,K,L](a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L)(implicitevidence$78:zio.Tag[A],implicitevidence$79:zio.Tag[B],implicitevidence$80:zio.Tag[C],implicitevidence$81:zio.Tag[D],implicitevidence$82:zio.Tag[E],implicitevidence$83:zio.Tag[F],implicitevidence$84:zio.Tag[G],implicitevidence$85:zio.Tag[H],implicitevidence$86:zio.Tag[I],implicitevidence$87:zio.Tag[J],implicitevidence$88:zio.Tag[K],implicitevidence$89:zio.Tag[L]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]withzio.Has[L]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G], arg7: zio.Tag[H], arg8: zio.Tag[I], arg9: zio.Tag[J], arg10: zio.Tag[K]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J] with Has[K]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G,H,I,J,K](a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K)(implicitevidence$67:zio.Tag[A],implicitevidence$68:zio.Tag[B],implicitevidence$69:zio.Tag[C],implicitevidence$70:zio.Tag[D],implicitevidence$71:zio.Tag[E],implicitevidence$72:zio.Tag[F],implicitevidence$73:zio.Tag[G],implicitevidence$74:zio.Tag[H],implicitevidence$75:zio.Tag[I],implicitevidence$76:zio.Tag[J],implicitevidence$77:zio.Tag[K]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]withzio.Has[K]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G], arg7: zio.Tag[H], arg8: zio.Tag[I], arg9: zio.Tag[J]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I] with Has[J]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G,H,I,J](a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J)(implicitevidence$57:zio.Tag[A],implicitevidence$58:zio.Tag[B],implicitevidence$59:zio.Tag[C],implicitevidence$60:zio.Tag[D],implicitevidence$61:zio.Tag[E],implicitevidence$62:zio.Tag[F],implicitevidence$63:zio.Tag[G],implicitevidence$64:zio.Tag[H],implicitevidence$65:zio.Tag[I],implicitevidence$66:zio.Tag[J]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]withzio.Has[J]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G], arg7: zio.Tag[H], arg8: zio.Tag[I]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H] with Has[I]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G,H,I](a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I)(implicitevidence$48:zio.Tag[A],implicitevidence$49:zio.Tag[B],implicitevidence$50:zio.Tag[C],implicitevidence$51:zio.Tag[D],implicitevidence$52:zio.Tag[E],implicitevidence$53:zio.Tag[F],implicitevidence$54:zio.Tag[G],implicitevidence$55:zio.Tag[H],implicitevidence$56:zio.Tag[I]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]withzio.Has[I]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G], arg7: zio.Tag[H]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G] with Has[H]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G,H](a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H)(implicitevidence$40:zio.Tag[A],implicitevidence$41:zio.Tag[B],implicitevidence$42:zio.Tag[C],implicitevidence$43:zio.Tag[D],implicitevidence$44:zio.Tag[E],implicitevidence$45:zio.Tag[F],implicitevidence$46:zio.Tag[G],implicitevidence$47:zio.Tag[H]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]withzio.Has[H]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F, g: G)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F], arg6: zio.Tag[G]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F] with Has[G]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F,G](a:A,b:B,c:C,d:D,e:E,f:F,g:G)(implicitevidence$33:zio.Tag[A],implicitevidence$34:zio.Tag[B],implicitevidence$35:zio.Tag[C],implicitevidence$36:zio.Tag[D],implicitevidence$37:zio.Tag[E],implicitevidence$38:zio.Tag[F],implicitevidence$39:zio.Tag[G]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]withzio.Has[G]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E, f: F)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E], arg5: zio.Tag[F]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E] with Has[F]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E,F](a:A,b:B,c:C,d:D,e:E,f:F)(implicitevidence$27:zio.Tag[A],implicitevidence$28:zio.Tag[B],implicitevidence$29:zio.Tag[C],implicitevidence$30:zio.Tag[D],implicitevidence$31:zio.Tag[E],implicitevidence$32:zio.Tag[F]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]withzio.Has[F]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D, e: E)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D], arg4: zio.Tag[E]): Has[A] with Has[B] with Has[C] with Has[D] with Has[E]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D,E](a:A,b:B,c:C,d:D,e:E)(implicitevidence$22:zio.Tag[A],implicitevidence$23:zio.Tag[B],implicitevidence$24:zio.Tag[C],implicitevidence$25:zio.Tag[D],implicitevidence$26:zio.Tag[E]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]withzio.Has[E]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C, d: D)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D]): Has[A] with Has[B] with Has[C] with Has[D]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C,D](a:A,b:B,c:C,d:D)(implicitevidence$18:zio.Tag[A],implicitevidence$19:zio.Tag[B],implicitevidence$20:zio.Tag[C],implicitevidence$21:zio.Tag[D]):zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B, c: C)(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C]): Has[A] with Has[B] with Has[C]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B,C](a:A,b:B,c:C)(implicitevidence$15:zio.Tag[A],implicitevidence$16:zio.Tag[B],implicitevidence$17:zio.Tag[C]):zio.Has[A]withzio.Has[B]withzio.Has[C]", "kind" : "def"}, {"label" : "allOf", "tail" : "(a: A, b: B)(arg0: zio.Tag[A], arg1: zio.Tag[B]): Has[A] with Has[B]", "member" : "zio.Has.allOf", "link" : "zio\/Has$.html#allOf[A,B](a:A,b:B)(implicitevidence$13:zio.Tag[A],implicitevidence$14:zio.Tag[B]):zio.Has[A]withzio.Has[B]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: A)(arg0: zio.Tag[A]): Has[A]", "member" : "zio.Has.apply", "link" : "zio\/Has$.html#apply[A](a:A)(implicitevidence$12:zio.Tag[A]):zio.Has[A]", "kind" : "def"}, {"label" : "HasManySyntax", "tail" : "", "member" : "zio.Has.HasManySyntax", "link" : "zio\/Has$.html#HasManySyntax[Self<:zio.Has[Map[_,_]]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "HasSyntax", "tail" : "", "member" : "zio.Has.HasSyntax", "link" : "zio\/Has$.html#HasSyntax[Self<:zio.Has[_]]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "LowPriorityUnionAllImplicits", "tail" : "", "member" : "zio.Has.LowPriorityUnionAllImplicits", "link" : "zio\/Has$.html#LowPriorityUnionAllImplicitsextendsAnyRef", "kind" : "abstract class"}, {"label" : "UnionAll", "tail" : "", "member" : "zio.Has.UnionAll", "link" : "zio\/Has$.html#UnionAll", "kind" : "object"}, {"label" : "UnionAll", "tail" : "", "member" : "zio.Has.UnionAll", "link" : "zio\/Has$.html#UnionAll[R,R1]extendsAnyRef", "kind" : "abstract class"}, {"label" : "LowPriorityUnionImplicits", "tail" : "", "member" : "zio.Has.LowPriorityUnionImplicits", "link" : "zio\/Has$.html#LowPriorityUnionImplicitsextendsAnyRef", "kind" : "abstract class"}, {"label" : "Union", "tail" : "", "member" : "zio.Has.Union", "link" : "zio\/Has$.html#Union", "kind" : "object"}, {"label" : "Union", "tail" : "", "member" : "zio.Has.Union", "link" : "zio\/Has$.html#Union[R,R1]extendsAnyRef", "kind" : "abstract class"}, {"label" : "IsHas", "tail" : "", "member" : "zio.Has.IsHas", "link" : "zio\/Has$.html#IsHas", "kind" : "object"}, {"label" : "IsHas", "tail" : "", "member" : "zio.Has.IsHas", "link" : "zio\/Has$.html#IsHas[-R]extendsAnyRef", "kind" : "abstract class"}, {"label" : "MustHave", "tail" : "", "member" : "zio.Has.MustHave", "link" : "zio\/Has$.html#MustHave[A,B]=A<:<zio.Has[B]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Has$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Has$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Has$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Has$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Has$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Has$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Has$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Has$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Has$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Has$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Has$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Has$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Has$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Has$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Has$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Has$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Has$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Has$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Has$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/Has.html", "kind" : "class"}, {"name" : "zio.InterruptStatus", "shortDescription" : "The InterruptStatus of a fiber determines whether or not it can beinterrupted.", "object" : "zio\/InterruptStatus$.html", "members_class" : [{"label" : "isUninterruptible", "tail" : "(): Boolean", "member" : "zio.InterruptStatus.isUninterruptible", "link" : "zio\/InterruptStatus.html#isUninterruptible:Boolean", "kind" : "final def"}, {"label" : "isInterruptible", "tail" : ": Boolean", "member" : "zio.InterruptStatus.isInterruptible", "link" : "zio\/InterruptStatus.html#isInterruptible:Boolean", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/InterruptStatus.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "zio\/InterruptStatus.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "zio\/InterruptStatus.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "zio\/InterruptStatus.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/InterruptStatus.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/InterruptStatus.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/InterruptStatus.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/InterruptStatus.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/InterruptStatus.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/InterruptStatus.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/InterruptStatus.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/InterruptStatus.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/InterruptStatus.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/InterruptStatus.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/InterruptStatus.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/InterruptStatus.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/InterruptStatus.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/InterruptStatus.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/InterruptStatus.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/InterruptStatus.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/InterruptStatus.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/InterruptStatus.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/InterruptStatus.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "zio\/InterruptStatus.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "zio\/InterruptStatus.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "zio\/InterruptStatus.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "Uninterruptible", "tail" : "", "member" : "zio.InterruptStatus.Uninterruptible", "link" : "zio\/InterruptStatus$.html#Uninterruptible", "kind" : "case object"}, {"label" : "Interruptible", "tail" : "", "member" : "zio.InterruptStatus.Interruptible", "link" : "zio\/InterruptStatus$.html#Interruptible", "kind" : "case object"}, {"label" : "uninterruptible", "tail" : "(): InterruptStatus", "member" : "zio.InterruptStatus.uninterruptible", "link" : "zio\/InterruptStatus$.html#uninterruptible:zio.InterruptStatus", "kind" : "def"}, {"label" : "interruptible", "tail" : "(): InterruptStatus", "member" : "zio.InterruptStatus.interruptible", "link" : "zio\/InterruptStatus$.html#interruptible:zio.InterruptStatus", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/InterruptStatus$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/InterruptStatus$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/InterruptStatus$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/InterruptStatus$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/InterruptStatus$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/InterruptStatus$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/InterruptStatus$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/InterruptStatus$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/InterruptStatus$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/InterruptStatus$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/InterruptStatus$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/InterruptStatus$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/InterruptStatus$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/InterruptStatus$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/InterruptStatus$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/InterruptStatus$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/InterruptStatus$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/InterruptStatus$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/InterruptStatus$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/InterruptStatus.html", "kind" : "class"}, {"name" : "zio.IO", "shortDescription" : "", "object" : "zio\/IO$.html", "members_object" : [{"label" : "yieldNow", "tail" : ": UIO[Unit]", "member" : "zio.IO.yieldNow", "link" : "zio\/IO$.html#yieldNow:zio.UIO[Unit]", "kind" : "val"}, {"label" : "withRuntimeConfig", "tail" : "(runtimeConfig: => RuntimeConfig)(io: => IO[E, A]): IO[E, A]", "member" : "zio.IO.withRuntimeConfig", "link" : "zio\/IO$.html#withRuntimeConfig[E,A](runtimeConfig:=>zio.RuntimeConfig)(io:=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "whenZIO", "tail" : "(b: => IO[E, Boolean]): WhenZIO[Any, E]", "member" : "zio.IO.whenZIO", "link" : "zio\/IO$.html#whenZIO[E](b:=>zio.IO[E,Boolean]):zio.ZIO.WhenZIO[Any,E]", "kind" : "def"}, {"label" : "whenM", "tail" : "(b: => IO[E, Boolean]): WhenZIO[Any, E]", "member" : "zio.IO.whenM", "link" : "zio\/IO$.html#whenM[E](b:=>zio.IO[E,Boolean]):zio.ZIO.WhenZIO[Any,E]", "kind" : "def"}, {"label" : "whenCaseZIO", "tail" : "(a: => IO[E, A])(pf: PartialFunction[A, IO[E, B]]): IO[E, Option[B]]", "member" : "zio.IO.whenCaseZIO", "link" : "zio\/IO$.html#whenCaseZIO[E,A,B](a:=>zio.IO[E,A])(pf:PartialFunction[A,zio.IO[E,B]]):zio.IO[E,Option[B]]", "kind" : "def"}, {"label" : "whenCaseM", "tail" : "(a: => IO[E, A])(pf: PartialFunction[A, IO[E, B]]): IO[E, Option[B]]", "member" : "zio.IO.whenCaseM", "link" : "zio\/IO$.html#whenCaseM[E,A,B](a:=>zio.IO[E,A])(pf:PartialFunction[A,zio.IO[E,B]]):zio.IO[E,Option[B]]", "kind" : "def"}, {"label" : "whenCase", "tail" : "(a: => A)(pf: PartialFunction[A, IO[E, B]]): IO[E, Option[B]]", "member" : "zio.IO.whenCase", "link" : "zio\/IO$.html#whenCase[E,A,B](a:=>A)(pf:PartialFunction[A,zio.IO[E,B]]):zio.IO[E,Option[B]]", "kind" : "def"}, {"label" : "when", "tail" : "(b: => Boolean)(io: => IO[E, A]): IO[E, Option[A]]", "member" : "zio.IO.when", "link" : "zio\/IO$.html#when[E,A](b:=>Boolean)(io:=>zio.IO[E,A]):zio.IO[E,Option[A]]", "kind" : "def"}, {"label" : "validateFirstPar", "tail" : "(in: Collection[A])(f: (A) => IO[E, B])(bf: zio.BuildFrom[Collection[A], E, Collection[E]], ev: CanFail[E]): IO[Collection[E], B]", "member" : "zio.IO.validateFirstPar", "link" : "zio\/IO$.html#validateFirstPar[E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.IO[E,B])(implicitbf:zio.BuildFrom[Collection[A],E,Collection[E]],implicitev:zio.CanFail[E]):zio.IO[Collection[E],B]", "kind" : "def"}, {"label" : "validateFirst", "tail" : "(in: Collection[A])(f: (A) => IO[E, B])(bf: zio.BuildFrom[Collection[A], E, Collection[E]], ev: CanFail[E]): IO[Collection[E], B]", "member" : "zio.IO.validateFirst", "link" : "zio\/IO$.html#validateFirst[E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.IO[E,B])(implicitbf:zio.BuildFrom[Collection[A],E,Collection[E]],implicitev:zio.CanFail[E]):zio.IO[Collection[E],B]", "kind" : "def"}, {"label" : "validateParDiscard", "tail" : "(in: => Iterable[A])(f: (A) => IO[E, Any])(ev: CanFail[E]): IO[::[E], Unit]", "member" : "zio.IO.validateParDiscard", "link" : "zio\/IO$.html#validateParDiscard[E,A](in:=>Iterable[A])(f:A=>zio.IO[E,Any])(implicitev:zio.CanFail[E]):zio.IO[::[E],Unit]", "kind" : "def"}, {"label" : "validatePar_", "tail" : "(in: => Iterable[A])(f: (A) => IO[E, Any])(ev: CanFail[E]): IO[::[E], Unit]", "member" : "zio.IO.validatePar_", "link" : "zio\/IO$.html#validatePar_[E,A](in:=>Iterable[A])(f:A=>zio.IO[E,Any])(implicitev:zio.CanFail[E]):zio.IO[::[E],Unit]", "kind" : "def"}, {"label" : "validatePar", "tail" : "(in: NonEmptyChunk[A])(f: (A) => IO[E, B])(ev: CanFail[E]): IO[::[E], NonEmptyChunk[B]]", "member" : "zio.IO.validatePar", "link" : "zio\/IO$.html#validatePar[E,A,B](in:zio.NonEmptyChunk[A])(f:A=>zio.IO[E,B])(implicitev:zio.CanFail[E]):zio.IO[::[E],zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "validatePar", "tail" : "(in: Collection[A])(f: (A) => IO[E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]], ev: CanFail[E]): IO[::[E], Collection[B]]", "member" : "zio.IO.validatePar", "link" : "zio\/IO$.html#validatePar[E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.IO[E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]],implicitev:zio.CanFail[E]):zio.IO[::[E],Collection[B]]", "kind" : "def"}, {"label" : "validateDiscard", "tail" : "(in: => Iterable[A])(f: (A) => IO[E, Any])(ev: CanFail[E]): IO[::[E], Unit]", "member" : "zio.IO.validateDiscard", "link" : "zio\/IO$.html#validateDiscard[E,A](in:=>Iterable[A])(f:A=>zio.IO[E,Any])(implicitev:zio.CanFail[E]):zio.IO[::[E],Unit]", "kind" : "def"}, {"label" : "validate_", "tail" : "(in: => Iterable[A])(f: (A) => IO[E, Any])(ev: CanFail[E]): IO[::[E], Unit]", "member" : "zio.IO.validate_", "link" : "zio\/IO$.html#validate_[E,A](in:=>Iterable[A])(f:A=>zio.IO[E,Any])(implicitev:zio.CanFail[E]):zio.IO[::[E],Unit]", "kind" : "def"}, {"label" : "validate", "tail" : "(in: NonEmptyChunk[A])(f: (A) => IO[E, B])(ev: CanFail[E]): IO[::[E], NonEmptyChunk[B]]", "member" : "zio.IO.validate", "link" : "zio\/IO$.html#validate[E,A,B](in:zio.NonEmptyChunk[A])(f:A=>zio.IO[E,B])(implicitev:zio.CanFail[E]):zio.IO[::[E],zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "validate", "tail" : "(in: Collection[A])(f: (A) => IO[E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]], ev: CanFail[E]): IO[::[E], Collection[B]]", "member" : "zio.IO.validate", "link" : "zio\/IO$.html#validate[E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.IO[E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]],implicitev:zio.CanFail[E]):zio.IO[::[E],Collection[B]]", "kind" : "def"}, {"label" : "untraced", "tail" : "(zio: => IO[E, A]): IO[E, A]", "member" : "zio.IO.untraced", "link" : "zio\/IO$.html#untraced[E,A](zio:=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "unsandbox", "tail" : "(v: => IO[Cause[E], A]): IO[E, A]", "member" : "zio.IO.unsandbox", "link" : "zio\/IO$.html#unsandbox[E,A](v:=>zio.IO[zio.Cause[E],A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "unlessZIO", "tail" : "(b: => IO[E, Boolean]): UnlessZIO[Any, E]", "member" : "zio.IO.unlessZIO", "link" : "zio\/IO$.html#unlessZIO[E](b:=>zio.IO[E,Boolean]):zio.ZIO.UnlessZIO[Any,E]", "kind" : "def"}, {"label" : "unlessM", "tail" : "(b: => IO[E, Boolean]): UnlessZIO[Any, E]", "member" : "zio.IO.unlessM", "link" : "zio\/IO$.html#unlessM[E](b:=>zio.IO[E,Boolean]):zio.ZIO.UnlessZIO[Any,E]", "kind" : "def"}, {"label" : "unless", "tail" : "(b: => Boolean)(zio: => IO[E, A]): IO[E, Option[A]]", "member" : "zio.IO.unless", "link" : "zio\/IO$.html#unless[E,A](b:=>Boolean)(zio:=>zio.IO[E,A]):zio.IO[E,Option[A]]", "kind" : "def"}, {"label" : "uninterruptibleMask", "tail" : "(k: (InterruptStatusRestore) => IO[E, A]): IO[E, A]", "member" : "zio.IO.uninterruptibleMask", "link" : "zio\/IO$.html#uninterruptibleMask[E,A](k:zio.ZIO.InterruptStatusRestore=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "uninterruptible", "tail" : "(io: => IO[E, A]): IO[E, A]", "member" : "zio.IO.uninterruptible", "link" : "zio\/IO$.html#uninterruptible[E,A](io:=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "unit", "tail" : ": UIO[Unit]", "member" : "zio.IO.unit", "link" : "zio\/IO$.html#unit:zio.UIO[Unit]", "kind" : "val"}, {"label" : "traced", "tail" : "(zio: => IO[E, A]): IO[E, A]", "member" : "zio.IO.traced", "link" : "zio\/IO$.html#traced[E,A](zio:=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "trace", "tail" : "(): UIO[ZTrace]", "member" : "zio.IO.trace", "link" : "zio\/IO$.html#trace:zio.UIO[zio.ZTrace]", "kind" : "def"}, {"label" : "suspendSucceedWith", "tail" : "(f: (RuntimeConfig, FiberId) => IO[E, A]): IO[E, A]", "member" : "zio.IO.suspendSucceedWith", "link" : "zio\/IO$.html#suspendSucceedWith[E,A](f:(zio.RuntimeConfig,zio.FiberId)=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "suspendSucceed", "tail" : "(io: => IO[E, A]): IO[E, A]", "member" : "zio.IO.suspendSucceed", "link" : "zio\/IO$.html#suspendSucceed[E,A](io:=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "suspendWith", "tail" : "(f: (RuntimeConfig, FiberId) => IO[Throwable, A]): IO[Throwable, A]", "member" : "zio.IO.suspendWith", "link" : "zio\/IO$.html#suspendWith[A](f:(zio.RuntimeConfig,zio.FiberId)=>zio.IO[Throwable,A]):zio.IO[Throwable,A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(io: => IO[Throwable, A]): IO[Throwable, A]", "member" : "zio.IO.suspend", "link" : "zio\/IO$.html#suspend[A](io:=>zio.IO[Throwable,A]):zio.IO[Throwable,A]", "kind" : "def"}, {"label" : "succeedBlocking", "tail" : "(a: => A): UIO[A]", "member" : "zio.IO.succeedBlocking", "link" : "zio\/IO$.html#succeedBlocking[A](a:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "succeed", "tail" : "(a: => A): UIO[A]", "member" : "zio.IO.succeed", "link" : "zio\/IO$.html#succeed[A](a:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "some", "tail" : "(a: => A): IO[E, Option[A]]", "member" : "zio.IO.some", "link" : "zio\/IO$.html#some[E,A](a:=>A):zio.IO[E,Option[A]]", "kind" : "def"}, {"label" : "runtimeConfig", "tail" : ": UIO[RuntimeConfig]", "member" : "zio.IO.runtimeConfig", "link" : "zio\/IO$.html#runtimeConfig:zio.UIO[zio.RuntimeConfig]", "kind" : "val"}, {"label" : "runtime", "tail" : "(): UIO[Runtime[Any]]", "member" : "zio.IO.runtime", "link" : "zio\/IO$.html#runtime:zio.UIO[zio.Runtime[Any]]", "kind" : "def"}, {"label" : "right", "tail" : "(b: => B): IO[E, Either[Nothing, B]]", "member" : "zio.IO.right", "link" : "zio\/IO$.html#right[E,B](b:=>B):zio.IO[E,Either[Nothing,B]]", "kind" : "def"}, {"label" : "reserve", "tail" : "(reservation: => IO[E, Reservation[Any, E, A]])(use: (A) => IO[E, B]): IO[E, B]", "member" : "zio.IO.reserve", "link" : "zio\/IO$.html#reserve[E,A,B](reservation:=>zio.IO[E,zio.Reservation[Any,E,A]])(use:A=>zio.IO[E,B]):zio.IO[E,B]", "kind" : "def"}, {"label" : "require", "tail" : "(error: => E): (IO[E, Option[A]]) => IO[E, A]", "member" : "zio.IO.require", "link" : "zio\/IO$.html#require[E,A](error:=>E):zio.IO[E,Option[A]]=>zio.IO[E,A]", "kind" : "def"}, {"label" : "replicateZIODiscard", "tail" : "(n: => Int)(effect: => IO[E, A]): IO[E, Unit]", "member" : "zio.IO.replicateZIODiscard", "link" : "zio\/IO$.html#replicateZIODiscard[E,A](n:=>Int)(effect:=>zio.IO[E,A]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "replicateZIO", "tail" : "(n: => Int)(effect: => IO[E, A]): IO[E, Iterable[A]]", "member" : "zio.IO.replicateZIO", "link" : "zio\/IO$.html#replicateZIO[E,A](n:=>Int)(effect:=>zio.IO[E,A]):zio.IO[E,Iterable[A]]", "kind" : "def"}, {"label" : "replicateM_", "tail" : "(n: => Int)(effect: => IO[E, A]): IO[E, Unit]", "member" : "zio.IO.replicateM_", "link" : "zio\/IO$.html#replicateM_[E,A](n:=>Int)(effect:=>zio.IO[E,A]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "replicateM", "tail" : "(n: => Int)(effect: => IO[E, A]): IO[E, Iterable[A]]", "member" : "zio.IO.replicateM", "link" : "zio\/IO$.html#replicateM[E,A](n:=>Int)(effect:=>zio.IO[E,A]):zio.IO[E,Iterable[A]]", "kind" : "def"}, {"label" : "replicate", "tail" : "(n: => Int)(effect: => IO[E, A]): Iterable[IO[E, A]]", "member" : "zio.IO.replicate", "link" : "zio\/IO$.html#replicate[E,A](n:=>Int)(effect:=>zio.IO[E,A]):Iterable[zio.IO[E,A]]", "kind" : "def"}, {"label" : "reduceAllPar", "tail" : "(a: => IO[E, A], as: => Iterable[IO[E, A]])(f: (A, A) => A): IO[E, A]", "member" : "zio.IO.reduceAllPar", "link" : "zio\/IO$.html#reduceAllPar[E,A](a:=>zio.IO[E,A],as:=>Iterable[zio.IO[E,A]])(f:(A,A)=>A):zio.IO[E,A]", "kind" : "def"}, {"label" : "reduceAll", "tail" : "(a: => IO[E, A], as: => Iterable[IO[E, A]])(f: (A, A) => A): IO[E, A]", "member" : "zio.IO.reduceAll", "link" : "zio\/IO$.html#reduceAll[E,A](a:=>zio.IO[E,A],as:=>Iterable[zio.IO[E,A]])(f:(A,A)=>A):zio.IO[E,A]", "kind" : "def"}, {"label" : "raceAll", "tail" : "(io: => IO[E, A], ios: => Iterable[IO[E, A]]): IO[E, A]", "member" : "zio.IO.raceAll", "link" : "zio\/IO$.html#raceAll[E,A](io:=>zio.IO[E,A],ios:=>Iterable[zio.IO[E,A]]):zio.IO[E,A]", "kind" : "def"}, {"label" : "partitionParN", "tail" : "(n: => Int)(in: => Iterable[A])(f: (A) => IO[E, B])(ev: CanFail[E]): UIO[(Iterable[E], Iterable[B])]", "member" : "zio.IO.partitionParN", "link" : "zio\/IO$.html#partitionParN[E,A,B](n:=>Int)(in:=>Iterable[A])(f:A=>zio.IO[E,B])(implicitev:zio.CanFail[E]):zio.UIO[(Iterable[E],Iterable[B])]", "kind" : "def"}, {"label" : "partitionPar", "tail" : "(in: => Iterable[A])(f: (A) => IO[E, B])(ev: CanFail[E]): UIO[(Iterable[E], Iterable[B])]", "member" : "zio.IO.partitionPar", "link" : "zio\/IO$.html#partitionPar[E,A,B](in:=>Iterable[A])(f:A=>zio.IO[E,B])(implicitev:zio.CanFail[E]):zio.UIO[(Iterable[E],Iterable[B])]", "kind" : "def"}, {"label" : "partition", "tail" : "(in: => Iterable[A])(f: (A) => IO[E, B])(ev: CanFail[E]): UIO[(Iterable[E], Iterable[B])]", "member" : "zio.IO.partition", "link" : "zio\/IO$.html#partition[E,A,B](in:=>Iterable[A])(f:A=>zio.IO[E,B])(implicitev:zio.CanFail[E]):zio.UIO[(Iterable[E],Iterable[B])]", "kind" : "def"}, {"label" : "onExecutor", "tail" : "(executor: => Executor)(io: IO[E, A]): IO[E, A]", "member" : "zio.IO.onExecutor", "link" : "zio\/IO$.html#onExecutor[E,A](executor:=>zio.Executor)(io:zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "not", "tail" : "(effect: => IO[E, Boolean]): IO[E, Boolean]", "member" : "zio.IO.not", "link" : "zio\/IO$.html#not[E](effect:=>zio.IO[E,Boolean]):zio.IO[E,Boolean]", "kind" : "def"}, {"label" : "noneOrFailWith", "tail" : "(o: => Option[O])(f: (O) => E): IO[E, Unit]", "member" : "zio.IO.noneOrFailWith", "link" : "zio\/IO$.html#noneOrFailWith[E,O](o:=>Option[O])(f:O=>E):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "noneOrFail", "tail" : "(o: => Option[E]): IO[E, Unit]", "member" : "zio.IO.noneOrFail", "link" : "zio\/IO$.html#noneOrFail[E](o:=>Option[E]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "none", "tail" : ": UIO[Option[Nothing]]", "member" : "zio.IO.none", "link" : "zio\/IO$.html#none:zio.UIO[Option[Nothing]]", "kind" : "val"}, {"label" : "never", "tail" : ": UIO[Nothing]", "member" : "zio.IO.never", "link" : "zio\/IO$.html#never:zio.UIO[Nothing]", "kind" : "val"}, {"label" : "mergeAllPar", "tail" : "(in: => Iterable[IO[E, A]])(zero: => B)(f: (B, A) => B): IO[E, B]", "member" : "zio.IO.mergeAllPar", "link" : "zio\/IO$.html#mergeAllPar[E,A,B](in:=>Iterable[zio.IO[E,A]])(zero:=>B)(f:(B,A)=>B):zio.IO[E,B]", "kind" : "def"}, {"label" : "mergeAll", "tail" : "(in: => Iterable[IO[E, A]])(zero: => B)(f: (B, A) => B): IO[E, B]", "member" : "zio.IO.mergeAll", "link" : "zio\/IO$.html#mergeAll[E,A,B](in:=>Iterable[zio.IO[E,A]])(zero:=>B)(f:(B,A)=>B):zio.IO[E,B]", "kind" : "def"}, {"label" : "memoize", "tail" : "(f: (A) => IO[E, B]): UIO[(A) => IO[E, B]]", "member" : "zio.IO.memoize", "link" : "zio\/IO$.html#memoize[E,A,B](f:A=>zio.IO[E,B]):zio.UIO[A=>zio.IO[E,B]]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(io1: => IO[E, A], io2: => IO[E, B], io3: => IO[E, C], io4: => IO[E, D])(f: (A, B, C, D) => F): IO[E, F]", "member" : "zio.IO.mapParN", "link" : "zio\/IO$.html#mapParN[E,A,B,C,D,F](io1:=>zio.IO[E,A],io2:=>zio.IO[E,B],io3:=>zio.IO[E,C],io4:=>zio.IO[E,D])(f:(A,B,C,D)=>F):zio.IO[E,F]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(io1: => IO[E, A], io2: => IO[E, B], io3: => IO[E, C])(f: (A, B, C) => D): IO[E, D]", "member" : "zio.IO.mapParN", "link" : "zio\/IO$.html#mapParN[E,A,B,C,D](io1:=>zio.IO[E,A],io2:=>zio.IO[E,B],io3:=>zio.IO[E,C])(f:(A,B,C)=>D):zio.IO[E,D]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(io1: => IO[E, A], io2: => IO[E, B])(f: (A, B) => C): IO[E, C]", "member" : "zio.IO.mapParN", "link" : "zio\/IO$.html#mapParN[E,A,B,C](io1:=>zio.IO[E,A],io2:=>zio.IO[E,B])(f:(A,B)=>C):zio.IO[E,C]", "kind" : "def"}, {"label" : "mapN", "tail" : "(io1: => IO[E, A], io2: => IO[E, B], io3: => IO[E, C], io4: => IO[E, D])(f: (A, B, C, D) => F): IO[E, F]", "member" : "zio.IO.mapN", "link" : "zio\/IO$.html#mapN[E,A,B,C,D,F](io1:=>zio.IO[E,A],io2:=>zio.IO[E,B],io3:=>zio.IO[E,C],io4:=>zio.IO[E,D])(f:(A,B,C,D)=>F):zio.IO[E,F]", "kind" : "def"}, {"label" : "mapN", "tail" : "(io1: => IO[E, A], io2: => IO[E, B], io3: => IO[E, C])(f: (A, B, C) => D): IO[E, D]", "member" : "zio.IO.mapN", "link" : "zio\/IO$.html#mapN[E,A,B,C,D](io1:=>zio.IO[E,A],io2:=>zio.IO[E,B],io3:=>zio.IO[E,C])(f:(A,B,C)=>D):zio.IO[E,D]", "kind" : "def"}, {"label" : "mapN", "tail" : "(io1: => IO[E, A], io2: => IO[E, B])(f: (A, B) => C): IO[E, C]", "member" : "zio.IO.mapN", "link" : "zio\/IO$.html#mapN[E,A,B,C](io1:=>zio.IO[E,A],io2:=>zio.IO[E,B])(f:(A,B)=>C):zio.IO[E,C]", "kind" : "def"}, {"label" : "loopDiscard", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => IO[E, Any]): IO[E, Unit]", "member" : "zio.IO.loopDiscard", "link" : "zio\/IO$.html#loopDiscard[E,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.IO[E,Any]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "loop_", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => IO[E, Any]): IO[E, Unit]", "member" : "zio.IO.loop_", "link" : "zio\/IO$.html#loop_[E,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.IO[E,Any]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "loop", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => IO[E, A]): IO[E, List[A]]", "member" : "zio.IO.loop", "link" : "zio\/IO$.html#loop[E,A,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.IO[E,A]):zio.IO[E,List[A]]", "kind" : "def"}, {"label" : "lock", "tail" : "(executor: => Executor)(io: => IO[E, A]): IO[E, A]", "member" : "zio.IO.lock", "link" : "zio\/IO$.html#lock[E,A](executor:=>zio.Executor)(io:=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "left", "tail" : "(a: => A): IO[E, Either[A, Nothing]]", "member" : "zio.IO.left", "link" : "zio\/IO$.html#left[E,A](a:=>A):zio.IO[E,Either[A,Nothing]]", "kind" : "def"}, {"label" : "iterate", "tail" : "(initial: => S)(cont: (S) => Boolean)(body: (S) => IO[E, S]): IO[E, S]", "member" : "zio.IO.iterate", "link" : "zio\/IO$.html#iterate[E,S](initial:=>S)(cont:S=>Boolean)(body:S=>zio.IO[E,S]):zio.IO[E,S]", "kind" : "def"}, {"label" : "interruptibleMask", "tail" : "(k: (InterruptStatusRestore) => IO[E, A]): IO[E, A]", "member" : "zio.IO.interruptibleMask", "link" : "zio\/IO$.html#interruptibleMask[E,A](k:zio.ZIO.InterruptStatusRestore=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "interruptible", "tail" : "(io: => IO[E, A]): IO[E, A]", "member" : "zio.IO.interruptible", "link" : "zio\/IO$.html#interruptible[E,A](io:=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "interruptAs", "tail" : "(fiberId: => FiberId): UIO[Nothing]", "member" : "zio.IO.interruptAs", "link" : "zio\/IO$.html#interruptAs(fiberId:=>zio.FiberId):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "interrupt", "tail" : ": UIO[Nothing]", "member" : "zio.IO.interrupt", "link" : "zio\/IO$.html#interrupt:zio.UIO[Nothing]", "kind" : "val"}, {"label" : "ifZIO", "tail" : "(b: => IO[E, Boolean]): IfZIO[Any, E]", "member" : "zio.IO.ifZIO", "link" : "zio\/IO$.html#ifZIO[E](b:=>zio.IO[E,Boolean]):zio.ZIO.IfZIO[Any,E]", "kind" : "def"}, {"label" : "ifM", "tail" : "(b: => IO[E, Boolean]): IfZIO[Any, E]", "member" : "zio.IO.ifM", "link" : "zio\/IO$.html#ifM[E](b:=>zio.IO[E,Boolean]):zio.ZIO.IfZIO[Any,E]", "kind" : "def"}, {"label" : "haltWith", "tail" : "(function: (() => ZTrace) => Cause[E]): IO[E, Nothing]", "member" : "zio.IO.haltWith", "link" : "zio\/IO$.html#haltWith[E](function:(()=>zio.ZTrace)=>zio.Cause[E]):zio.IO[E,Nothing]", "kind" : "def"}, {"label" : "halt", "tail" : "(cause: => Cause[E]): IO[E, Nothing]", "member" : "zio.IO.halt", "link" : "zio\/IO$.html#halt[E](cause:=>zio.Cause[E]):zio.IO[E,Nothing]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(value: => Try[A]): Task[A]", "member" : "zio.IO.fromTry", "link" : "zio\/IO$.html#fromTry[A](value:=>scala.util.Try[A]):zio.Task[A]", "kind" : "def"}, {"label" : "getOrFailUnit", "tail" : "(v: => Option[A]): IO[Unit, A]", "member" : "zio.IO.getOrFailUnit", "link" : "zio\/IO$.html#getOrFailUnit[A](v:=>Option[A]):zio.IO[Unit,A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(v: => Option[A]): IO[Option[Nothing], A]", "member" : "zio.IO.fromOption", "link" : "zio\/IO$.html#fromOption[A](v:=>Option[A]):zio.IO[Option[Nothing],A]", "kind" : "def"}, {"label" : "fromFutureInterrupt", "tail" : "(make: (ExecutionContext) => Future[A]): Task[A]", "member" : "zio.IO.fromFutureInterrupt", "link" : "zio\/IO$.html#fromFutureInterrupt[A](make:scala.concurrent.ExecutionContext=>scala.concurrent.Future[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromFuture", "tail" : "(make: (ExecutionContext) => Future[A]): Task[A]", "member" : "zio.IO.fromFuture", "link" : "zio\/IO$.html#fromFuture[A](make:scala.concurrent.ExecutionContext=>scala.concurrent.Future[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromFiberZIO", "tail" : "(fiber: => IO[E, Fiber[E, A]]): IO[E, A]", "member" : "zio.IO.fromFiberZIO", "link" : "zio\/IO$.html#fromFiberZIO[E,A](fiber:=>zio.IO[E,zio.Fiber[E,A]]):zio.IO[E,A]", "kind" : "def"}, {"label" : "fromFiberM", "tail" : "(fiber: => IO[E, Fiber[E, A]]): IO[E, A]", "member" : "zio.IO.fromFiberM", "link" : "zio\/IO$.html#fromFiberM[E,A](fiber:=>zio.IO[E,zio.Fiber[E,A]]):zio.IO[E,A]", "kind" : "def"}, {"label" : "fromFiber", "tail" : "(fiber: => Fiber[E, A]): IO[E, A]", "member" : "zio.IO.fromFiber", "link" : "zio\/IO$.html#fromFiber[E,A](fiber:=>zio.Fiber[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(v: => Either[E, A]): IO[E, A]", "member" : "zio.IO.fromEither", "link" : "zio\/IO$.html#fromEither[E,A](v:=>Either[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "from", "tail" : "(input: => Input)(constructor: ZIOConstructor[Any, Any, Input]): ZIO[OutEnvironment, OutError, OutSuccess]", "member" : "zio.IO.from", "link" : "zio\/IO$.html#from[Input](input:=>Input)(implicitconstructor:zio.ZIO.ZIOConstructor[Any,Any,Input]):zio.ZIO[constructor.OutEnvironment,constructor.OutError,constructor.OutSuccess]", "kind" : "def"}, {"label" : "forkAllDiscard", "tail" : "(as: => Iterable[IO[E, A]]): UIO[Unit]", "member" : "zio.IO.forkAllDiscard", "link" : "zio\/IO$.html#forkAllDiscard[E,A](as:=>Iterable[zio.IO[E,A]]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "forkAll_", "tail" : "(as: => Iterable[IO[E, A]]): UIO[Unit]", "member" : "zio.IO.forkAll_", "link" : "zio\/IO$.html#forkAll_[E,A](as:=>Iterable[zio.IO[E,A]]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "forkAll", "tail" : "(as: Collection[IO[E, A]])(bf: zio.BuildFrom[Collection[IO[E, A]], A, Collection[A]]): UIO[Fiber[E, Collection[A]]]", "member" : "zio.IO.forkAll", "link" : "zio\/IO$.html#forkAll[E,A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.IO[E,A]])(implicitbf:zio.BuildFrom[Collection[zio.IO[E,A]],A,Collection[A]]):zio.UIO[zio.Fiber[E,Collection[A]]]", "kind" : "def"}, {"label" : "foreachParNDiscard", "tail" : "(n: => Int)(as: => Iterable[A])(f: (A) => IO[E, Any]): IO[E, Unit]", "member" : "zio.IO.foreachParNDiscard", "link" : "zio\/IO$.html#foreachParNDiscard[E,A,B](n:=>Int)(as:=>Iterable[A])(f:A=>zio.IO[E,Any]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "foreachParN_", "tail" : "(n: => Int)(as: => Iterable[A])(f: (A) => IO[E, Any]): IO[E, Unit]", "member" : "zio.IO.foreachParN_", "link" : "zio\/IO$.html#foreachParN_[E,A,B](n:=>Int)(as:=>Iterable[A])(f:A=>zio.IO[E,Any]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "foreachParDiscard", "tail" : "(as: => Iterable[A])(f: (A) => IO[E, Any]): IO[E, Unit]", "member" : "zio.IO.foreachParDiscard", "link" : "zio\/IO$.html#foreachParDiscard[E,A,B](as:=>Iterable[A])(f:A=>zio.IO[E,Any]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "foreachPar_", "tail" : "(as: => Iterable[A])(f: (A) => IO[E, Any]): IO[E, Unit]", "member" : "zio.IO.foreachPar_", "link" : "zio\/IO$.html#foreachPar_[E,A,B](as:=>Iterable[A])(f:A=>zio.IO[E,Any]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "foreachDiscard", "tail" : "(as: => Iterable[A])(f: (A) => IO[E, Any]): IO[E, Unit]", "member" : "zio.IO.foreachDiscard", "link" : "zio\/IO$.html#foreachDiscard[E,A](as:=>Iterable[A])(f:A=>zio.IO[E,Any]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "foreach_", "tail" : "(as: => Iterable[A])(f: (A) => IO[E, Any]): IO[E, Unit]", "member" : "zio.IO.foreach_", "link" : "zio\/IO$.html#foreach_[E,A](as:=>Iterable[A])(f:A=>zio.IO[E,Any]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "foreachParN", "tail" : "(n: => Int)(as: Collection[A])(fn: (A) => IO[E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): IO[E, Collection[B]]", "member" : "zio.IO.foreachParN", "link" : "zio\/IO$.html#foreachParN[E,A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[A])(fn:A=>zio.IO[E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.IO[E,Collection[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: NonEmptyChunk[A])(fn: (A) => IO[E, B]): IO[E, NonEmptyChunk[B]]", "member" : "zio.IO.foreachPar", "link" : "zio\/IO$.html#foreachPar[E,A,B](as:zio.NonEmptyChunk[A])(fn:A=>zio.IO[E,B]):zio.IO[E,zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => IO[E, (Key2, Value2)]): IO[E, Map[Key2, Value2]]", "member" : "zio.IO.foreachPar", "link" : "zio\/IO$.html#foreachPar[E,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.IO[E,(Key2,Value2)]):zio.IO[E,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: Array[A])(fn: (A) => IO[E, B])(arg0: ClassTag[B]): IO[E, Array[B]]", "member" : "zio.IO.foreachPar", "link" : "zio\/IO$.html#foreachPar[E,A,B](as:Array[A])(fn:A=>zio.IO[E,B])(implicitevidence$4:scala.reflect.ClassTag[B]):zio.IO[E,Array[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: Set[A])(fn: (A) => IO[E, B]): IO[E, Set[B]]", "member" : "zio.IO.foreachPar", "link" : "zio\/IO$.html#foreachPar[E,A,B](as:Set[A])(fn:A=>zio.IO[E,B]):zio.IO[E,Set[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: Collection[A])(fn: (A) => IO[E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): IO[E, Collection[B]]", "member" : "zio.IO.foreachPar", "link" : "zio\/IO$.html#foreachPar[E,A,B,Collection[+Element]<:Iterable[Element]](as:Collection[A])(fn:A=>zio.IO[E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.IO[E,Collection[B]]", "kind" : "def"}, {"label" : "foreachExec", "tail" : "(as: Collection[A])(exec: => ExecutionStrategy)(f: (A) => IO[E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): IO[E, Collection[B]]", "member" : "zio.IO.foreachExec", "link" : "zio\/IO$.html#foreachExec[E,A,B,Collection[+Element]<:Iterable[Element]](as:Collection[A])(exec:=>zio.ExecutionStrategy)(f:A=>zio.IO[E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.IO[E,Collection[B]]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(in: NonEmptyChunk[A])(f: (A) => IO[E, B]): IO[E, NonEmptyChunk[B]]", "member" : "zio.IO.foreach", "link" : "zio\/IO$.html#foreach[E,A,B](in:zio.NonEmptyChunk[A])(f:A=>zio.IO[E,B]):zio.IO[E,zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Option[A])(f: (A) => IO[E, B]): IO[E, Option[B]]", "member" : "zio.IO.foreach", "link" : "zio\/IO$.html#foreach[E,A,B](in:Option[A])(f:A=>zio.IO[E,B]):zio.IO[E,Option[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => IO[E, (Key2, Value2)]): IO[E, Map[Key2, Value2]]", "member" : "zio.IO.foreach", "link" : "zio\/IO$.html#foreach[E,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.IO[E,(Key2,Value2)]):zio.IO[E,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Array[A])(f: (A) => IO[E, B])(arg0: ClassTag[B]): IO[E, Array[B]]", "member" : "zio.IO.foreach", "link" : "zio\/IO$.html#foreach[E,A,B](in:Array[A])(f:A=>zio.IO[E,B])(implicitevidence$3:scala.reflect.ClassTag[B]):zio.IO[E,Array[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Set[A])(f: (A) => IO[E, B]): IO[E, Set[B]]", "member" : "zio.IO.foreach", "link" : "zio\/IO$.html#foreach[E,A,B](in:Set[A])(f:A=>zio.IO[E,B]):zio.IO[E,Set[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Collection[A])(f: (A) => IO[E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): IO[E, Collection[B]]", "member" : "zio.IO.foreach", "link" : "zio\/IO$.html#foreach[E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.IO[E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.IO[E,Collection[B]]", "kind" : "def"}, {"label" : "forall", "tail" : "(as: => Iterable[A])(f: (A) => IO[E, Boolean]): IO[E, Boolean]", "member" : "zio.IO.forall", "link" : "zio\/IO$.html#forall[E,A](as:=>Iterable[A])(f:A=>zio.IO[E,Boolean]):zio.IO[E,Boolean]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(in: => Iterable[A])(zero: => S)(f: (A, S) => IO[E, S]): IO[E, S]", "member" : "zio.IO.foldRight", "link" : "zio\/IO$.html#foldRight[E,S,A](in:=>Iterable[A])(zero:=>S)(f:(A,S)=>zio.IO[E,S]):zio.IO[E,S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(in: => Iterable[A])(zero: => S)(f: (S, A) => IO[E, S]): IO[E, S]", "member" : "zio.IO.foldLeft", "link" : "zio\/IO$.html#foldLeft[E,S,A](in:=>Iterable[A])(zero:=>S)(f:(S,A)=>zio.IO[E,S]):zio.IO[E,S]", "kind" : "def"}, {"label" : "flatten", "tail" : "(io: => IO[E, IO[E, A]]): IO[E, A]", "member" : "zio.IO.flatten", "link" : "zio\/IO$.html#flatten[E,A](io:=>zio.IO[E,zio.IO[E,A]]):zio.IO[E,A]", "kind" : "def"}, {"label" : "firstSuccessOf", "tail" : "(io: => IO[E, A], rest: => Iterable[IO[E, A]]): IO[E, A]", "member" : "zio.IO.firstSuccessOf", "link" : "zio\/IO$.html#firstSuccessOf[E,A](io:=>zio.IO[E,A],rest:=>Iterable[zio.IO[E,A]]):zio.IO[E,A]", "kind" : "def"}, {"label" : "filterNotPar", "tail" : "(as: Set[A])(f: (A) => IO[E, Boolean]): IO[E, Set[A]]", "member" : "zio.IO.filterNotPar", "link" : "zio\/IO$.html#filterNotPar[E,A](as:Set[A])(f:A=>zio.IO[E,Boolean]):zio.IO[E,Set[A]]", "kind" : "def"}, {"label" : "filterNotPar", "tail" : "(as: Collection[A])(f: (A) => IO[E, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): IO[E, Collection[A]]", "member" : "zio.IO.filterNotPar", "link" : "zio\/IO$.html#filterNotPar[E,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.IO[E,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.IO[E,Collection[A]]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Set[A])(f: (A) => IO[E, Boolean]): IO[E, Set[A]]", "member" : "zio.IO.filterNot", "link" : "zio\/IO$.html#filterNot[E,A](as:Set[A])(f:A=>zio.IO[E,Boolean]):zio.IO[E,Set[A]]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Collection[A])(f: (A) => IO[E, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): IO[E, Collection[A]]", "member" : "zio.IO.filterNot", "link" : "zio\/IO$.html#filterNot[E,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.IO[E,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.IO[E,Collection[A]]", "kind" : "def"}, {"label" : "filterPar", "tail" : "(as: Set[A])(f: (A) => IO[E, Boolean]): IO[E, Set[A]]", "member" : "zio.IO.filterPar", "link" : "zio\/IO$.html#filterPar[E,A](as:Set[A])(f:A=>zio.IO[E,Boolean]):zio.IO[E,Set[A]]", "kind" : "def"}, {"label" : "filterPar", "tail" : "(as: Collection[A])(f: (A) => IO[E, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): IO[E, Collection[A]]", "member" : "zio.IO.filterPar", "link" : "zio\/IO$.html#filterPar[E,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.IO[E,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.IO[E,Collection[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Set[A])(f: (A) => IO[E, Boolean]): IO[E, Set[A]]", "member" : "zio.IO.filter", "link" : "zio\/IO$.html#filter[E,A](as:Set[A])(f:A=>zio.IO[E,Boolean]):zio.IO[E,Set[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Collection[A])(f: (A) => IO[E, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): IO[E, Collection[A]]", "member" : "zio.IO.filter", "link" : "zio\/IO$.html#filter[E,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.IO[E,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.IO[E,Collection[A]]", "kind" : "def"}, {"label" : "fiberId", "tail" : ": UIO[FiberId]", "member" : "zio.IO.fiberId", "link" : "zio\/IO$.html#fiberId:zio.UIO[zio.FiberId]", "kind" : "val"}, {"label" : "failCauseWith", "tail" : "(function: (() => ZTrace) => Cause[E]): IO[E, Nothing]", "member" : "zio.IO.failCauseWith", "link" : "zio\/IO$.html#failCauseWith[E](function:(()=>zio.ZTrace)=>zio.Cause[E]):zio.IO[E,Nothing]", "kind" : "def"}, {"label" : "failCause", "tail" : "(cause: => Cause[E]): IO[E, Nothing]", "member" : "zio.IO.failCause", "link" : "zio\/IO$.html#failCause[E](cause:=>zio.Cause[E]):zio.IO[E,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(error: => E): IO[E, Nothing]", "member" : "zio.IO.fail", "link" : "zio\/IO$.html#fail[E](error:=>E):zio.IO[E,Nothing]", "kind" : "def"}, {"label" : "exists", "tail" : "(as: => Iterable[A])(f: (A) => IO[E, Boolean]): IO[E, Boolean]", "member" : "zio.IO.exists", "link" : "zio\/IO$.html#exists[E,A](as:=>Iterable[A])(f:A=>zio.IO[E,Boolean]):zio.IO[E,Boolean]", "kind" : "def"}, {"label" : "executor", "tail" : "(): UIO[Executor]", "member" : "zio.IO.executor", "link" : "zio\/IO$.html#executor:zio.UIO[zio.Executor]", "kind" : "def"}, {"label" : "effectTotal", "tail" : "(effect: => A): UIO[A]", "member" : "zio.IO.effectTotal", "link" : "zio\/IO$.html#effectTotal[A](effect:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "effectSuspendTotalWith", "tail" : "(p: (Platform, Id) => IO[E, A]): IO[E, A]", "member" : "zio.IO.effectSuspendTotalWith", "link" : "zio\/IO$.html#effectSuspendTotalWith[E,A](p:(zio.internal.Platform,zio.Fiber.Id)=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "effectSuspendTotal", "tail" : "(io: => IO[E, A]): IO[E, A]", "member" : "zio.IO.effectSuspendTotal", "link" : "zio\/IO$.html#effectSuspendTotal[E,A](io:=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "effectSuspendWith", "tail" : "(p: (Platform, Id) => IO[Throwable, A]): IO[Throwable, A]", "member" : "zio.IO.effectSuspendWith", "link" : "zio\/IO$.html#effectSuspendWith[A](p:(zio.internal.Platform,zio.Fiber.Id)=>zio.IO[Throwable,A]):zio.IO[Throwable,A]", "kind" : "def"}, {"label" : "effectSuspend", "tail" : "(io: => IO[Throwable, A]): IO[Throwable, A]", "member" : "zio.IO.effectSuspend", "link" : "zio\/IO$.html#effectSuspend[A](io:=>zio.IO[Throwable,A]):zio.IO[Throwable,A]", "kind" : "def"}, {"label" : "effectBlockingInterrupt", "tail" : "(effect: => A): Task[A]", "member" : "zio.IO.effectBlockingInterrupt", "link" : "zio\/IO$.html#effectBlockingInterrupt[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "effectBlockingIO", "tail" : "(effect: => A): IO[IOException, A]", "member" : "zio.IO.effectBlockingIO", "link" : "zio\/IO$.html#effectBlockingIO[A](effect:=>A):zio.IO[java.io.IOException,A]", "kind" : "def"}, {"label" : "effectBlockingCancelable", "tail" : "(effect: => A)(cancel: => UIO[Any]): Task[A]", "member" : "zio.IO.effectBlockingCancelable", "link" : "zio\/IO$.html#effectBlockingCancelable[A](effect:=>A)(cancel:=>zio.UIO[Any]):zio.Task[A]", "kind" : "def"}, {"label" : "effectBlocking", "tail" : "(effect: => A): Task[A]", "member" : "zio.IO.effectBlocking", "link" : "zio\/IO$.html#effectBlocking[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "effectAsyncMaybe", "tail" : "(register: ((IO[E, A]) => Unit) => Option[IO[E, A]], blockingOn: => FiberId): IO[E, A]", "member" : "zio.IO.effectAsyncMaybe", "link" : "zio\/IO$.html#effectAsyncMaybe[E,A](register:(zio.IO[E,A]=>Unit)=>Option[zio.IO[E,A]],blockingOn:=>zio.FiberId):zio.IO[E,A]", "kind" : "def"}, {"label" : "effectAsyncM", "tail" : "(register: ((IO[E, A]) => Unit) => IO[E, Any]): IO[E, A]", "member" : "zio.IO.effectAsyncM", "link" : "zio\/IO$.html#effectAsyncM[E,A](register:(zio.IO[E,A]=>Unit)=>zio.IO[E,Any]):zio.IO[E,A]", "kind" : "def"}, {"label" : "effectAsyncInterrupt", "tail" : "(register: ((IO[E, A]) => Unit) => Either[Canceler[Any], IO[E, A]], blockingOn: => FiberId): IO[E, A]", "member" : "zio.IO.effectAsyncInterrupt", "link" : "zio\/IO$.html#effectAsyncInterrupt[E,A](register:(zio.IO[E,A]=>Unit)=>Either[zio.Canceler[Any],zio.IO[E,A]],blockingOn:=>zio.FiberId):zio.IO[E,A]", "kind" : "def"}, {"label" : "effectAsync", "tail" : "(register: ((IO[E, A]) => Unit) => Any, blockingOn: => FiberId): IO[E, A]", "member" : "zio.IO.effectAsync", "link" : "zio\/IO$.html#effectAsync[E,A](register:(zio.IO[E,A]=>Unit)=>Any,blockingOn:=>zio.FiberId):zio.IO[E,A]", "kind" : "def"}, {"label" : "effect", "tail" : "(effect: => A): Task[A]", "member" : "zio.IO.effect", "link" : "zio\/IO$.html#effect[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "done", "tail" : "(r: => Exit[E, A]): IO[E, A]", "member" : "zio.IO.done", "link" : "zio\/IO$.html#done[E,A](r:=>zio.Exit[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "dieMessage", "tail" : "(message: => String): UIO[Nothing]", "member" : "zio.IO.dieMessage", "link" : "zio\/IO$.html#dieMessage(message:=>String):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(t: => Throwable): UIO[Nothing]", "member" : "zio.IO.die", "link" : "zio\/IO$.html#die(t:=>Throwable):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "descriptorWith", "tail" : "(f: (Descriptor) => IO[E, A]): IO[E, A]", "member" : "zio.IO.descriptorWith", "link" : "zio\/IO$.html#descriptorWith[E,A](f:zio.Fiber.Descriptor=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "descriptor", "tail" : "(): UIO[Descriptor]", "member" : "zio.IO.descriptor", "link" : "zio\/IO$.html#descriptor:zio.UIO[zio.Fiber.Descriptor]", "kind" : "def"}, {"label" : "debug", "tail" : "(value: => Any): UIO[Unit]", "member" : "zio.IO.debug", "link" : "zio\/IO$.html#debug(value:=>Any):zio.UIO[Unit]", "kind" : "def"}, {"label" : "cond", "tail" : "(predicate: => Boolean, result: => A, error: => E): IO[E, A]", "member" : "zio.IO.cond", "link" : "zio\/IO$.html#cond[E,A](predicate:=>Boolean,result:=>A,error:=>E):zio.IO[E,A]", "kind" : "def"}, {"label" : "collectParN", "tail" : "(n: => Int)(in: Collection[A])(f: (A) => IO[Option[E], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): IO[E, Collection[B]]", "member" : "zio.IO.collectParN", "link" : "zio\/IO$.html#collectParN[E,A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(in:Collection[A])(f:A=>zio.IO[Option[E],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.IO[E,Collection[B]]", "kind" : "def"}, {"label" : "collectPar", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => IO[Option[E], (Key2, Value2)]): IO[E, Map[Key2, Value2]]", "member" : "zio.IO.collectPar", "link" : "zio\/IO$.html#collectPar[E,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.IO[Option[E],(Key2,Value2)]):zio.IO[E,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "collectPar", "tail" : "(in: Collection[A])(f: (A) => IO[Option[E], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): IO[E, Collection[B]]", "member" : "zio.IO.collectPar", "link" : "zio\/IO$.html#collectPar[E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.IO[Option[E],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.IO[E,Collection[B]]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(as: => Iterable[A])(f: (A) => IO[E, Option[B]]): IO[E, Option[B]]", "member" : "zio.IO.collectFirst", "link" : "zio\/IO$.html#collectFirst[E,A,B](as:=>Iterable[A])(f:A=>zio.IO[E,Option[B]]):zio.IO[E,Option[B]]", "kind" : "def"}, {"label" : "collectAllWithParN", "tail" : "(n: => Int)(as: Collection[IO[E, A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[IO[E, A]], B, Collection[B]]): IO[E, Collection[B]]", "member" : "zio.IO.collectAllWithParN", "link" : "zio\/IO$.html#collectAllWithParN[E,A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.IO[E,A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.IO[E,A]],B,Collection[B]]):zio.IO[E,Collection[B]]", "kind" : "def"}, {"label" : "collectAllWithPar", "tail" : "(as: Collection[IO[E, A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[IO[E, A]], B, Collection[B]]): IO[E, Collection[B]]", "member" : "zio.IO.collectAllWithPar", "link" : "zio\/IO$.html#collectAllWithPar[E,A,B,Collection[+Element]<:Iterable[Element]](as:Collection[zio.IO[E,A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.IO[E,A]],B,Collection[B]]):zio.IO[E,Collection[B]]", "kind" : "def"}, {"label" : "collectAllWith", "tail" : "(in: Collection[IO[E, A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[IO[E, A]], B, Collection[B]]): IO[E, Collection[B]]", "member" : "zio.IO.collectAllWith", "link" : "zio\/IO$.html#collectAllWith[E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[zio.IO[E,A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.IO[E,A]],B,Collection[B]]):zio.IO[E,Collection[B]]", "kind" : "def"}, {"label" : "collectAllSuccessesParN", "tail" : "(n: => Int)(as: Collection[IO[E, A]])(bf: zio.BuildFrom[Collection[IO[E, A]], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.IO.collectAllSuccessesParN", "link" : "zio\/IO$.html#collectAllSuccessesParN[E,A,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.IO[E,A]])(implicitbf:zio.BuildFrom[Collection[zio.IO[E,A]],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "collectAllSuccessesPar", "tail" : "(as: Collection[IO[E, A]])(bf: zio.BuildFrom[Collection[IO[E, A]], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.IO.collectAllSuccessesPar", "link" : "zio\/IO$.html#collectAllSuccessesPar[E,A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.IO[E,A]])(implicitbf:zio.BuildFrom[Collection[zio.IO[E,A]],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "collectAllSuccesses", "tail" : "(in: Collection[IO[E, A]])(bf: zio.BuildFrom[Collection[IO[E, A]], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.IO.collectAllSuccesses", "link" : "zio\/IO$.html#collectAllSuccesses[E,A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.IO[E,A]])(implicitbf:zio.BuildFrom[Collection[zio.IO[E,A]],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "collectAllParNDiscard", "tail" : "(n: => Int)(as: => Iterable[IO[E, A]]): IO[E, Unit]", "member" : "zio.IO.collectAllParNDiscard", "link" : "zio\/IO$.html#collectAllParNDiscard[E,A](n:=>Int)(as:=>Iterable[zio.IO[E,A]]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "collectAllParN_", "tail" : "(n: => Int)(as: => Iterable[IO[E, A]]): IO[E, Unit]", "member" : "zio.IO.collectAllParN_", "link" : "zio\/IO$.html#collectAllParN_[E,A](n:=>Int)(as:=>Iterable[zio.IO[E,A]]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "collectAllParN", "tail" : "(n: => Int)(as: Collection[IO[E, A]])(bf: zio.BuildFrom[Collection[IO[E, A]], A, Collection[A]]): IO[E, Collection[A]]", "member" : "zio.IO.collectAllParN", "link" : "zio\/IO$.html#collectAllParN[E,A,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.IO[E,A]])(implicitbf:zio.BuildFrom[Collection[zio.IO[E,A]],A,Collection[A]]):zio.IO[E,Collection[A]]", "kind" : "def"}, {"label" : "collectAllParDiscard", "tail" : "(in: => Iterable[IO[E, A]]): IO[E, Unit]", "member" : "zio.IO.collectAllParDiscard", "link" : "zio\/IO$.html#collectAllParDiscard[E,A](in:=>Iterable[zio.IO[E,A]]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "collectAllPar_", "tail" : "(in: => Iterable[IO[E, A]]): IO[E, Unit]", "member" : "zio.IO.collectAllPar_", "link" : "zio\/IO$.html#collectAllPar_[E,A](in:=>Iterable[zio.IO[E,A]]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: NonEmptyChunk[IO[E, A]]): IO[E, NonEmptyChunk[A]]", "member" : "zio.IO.collectAllPar", "link" : "zio\/IO$.html#collectAllPar[E,A](as:zio.NonEmptyChunk[zio.IO[E,A]]):zio.IO[E,zio.NonEmptyChunk[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Array[IO[E, A]])(arg0: ClassTag[A]): IO[E, Array[A]]", "member" : "zio.IO.collectAllPar", "link" : "zio\/IO$.html#collectAllPar[E,A](as:Array[zio.IO[E,A]])(implicitevidence$2:scala.reflect.ClassTag[A]):zio.IO[E,Array[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Set[IO[E, A]]): IO[E, Set[A]]", "member" : "zio.IO.collectAllPar", "link" : "zio\/IO$.html#collectAllPar[E,A](as:Set[zio.IO[E,A]]):zio.IO[E,Set[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Collection[IO[E, A]])(bf: zio.BuildFrom[Collection[IO[E, A]], A, Collection[A]]): IO[E, Collection[A]]", "member" : "zio.IO.collectAllPar", "link" : "zio\/IO$.html#collectAllPar[E,A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.IO[E,A]])(implicitbf:zio.BuildFrom[Collection[zio.IO[E,A]],A,Collection[A]]):zio.IO[E,Collection[A]]", "kind" : "def"}, {"label" : "collectAllDiscard", "tail" : "(in: => Iterable[IO[E, A]]): IO[E, Unit]", "member" : "zio.IO.collectAllDiscard", "link" : "zio\/IO$.html#collectAllDiscard[E,A](in:=>Iterable[zio.IO[E,A]]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "collectAll_", "tail" : "(in: => Iterable[IO[E, A]]): IO[E, Unit]", "member" : "zio.IO.collectAll_", "link" : "zio\/IO$.html#collectAll_[E,A](in:=>Iterable[zio.IO[E,A]]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: NonEmptyChunk[IO[E, A]]): IO[E, NonEmptyChunk[A]]", "member" : "zio.IO.collectAll", "link" : "zio\/IO$.html#collectAll[E,A](in:zio.NonEmptyChunk[zio.IO[E,A]]):zio.IO[E,zio.NonEmptyChunk[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Array[IO[E, A]])(arg0: ClassTag[A]): IO[E, Array[A]]", "member" : "zio.IO.collectAll", "link" : "zio\/IO$.html#collectAll[E,A](in:Array[zio.IO[E,A]])(implicitevidence$1:scala.reflect.ClassTag[A]):zio.IO[E,Array[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Set[IO[E, A]]): IO[E, Set[A]]", "member" : "zio.IO.collectAll", "link" : "zio\/IO$.html#collectAll[E,A](in:Set[zio.IO[E,A]]):zio.IO[E,Set[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Collection[IO[E, A]])(bf: zio.BuildFrom[Collection[IO[E, A]], A, Collection[A]]): IO[E, Collection[A]]", "member" : "zio.IO.collectAll", "link" : "zio\/IO$.html#collectAll[E,A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.IO[E,A]])(implicitbf:zio.BuildFrom[Collection[zio.IO[E,A]],A,Collection[A]]):zio.IO[E,Collection[A]]", "kind" : "def"}, {"label" : "collect", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => IO[Option[E], (Key2, Value2)]): IO[E, Map[Key2, Value2]]", "member" : "zio.IO.collect", "link" : "zio\/IO$.html#collect[E,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.IO[Option[E],(Key2,Value2)]):zio.IO[E,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "collect", "tail" : "(in: Collection[A])(f: (A) => IO[Option[E], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): IO[E, Collection[B]]", "member" : "zio.IO.collect", "link" : "zio\/IO$.html#collect[E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.IO[Option[E],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.IO[E,Collection[B]]", "kind" : "def"}, {"label" : "checkTraced", "tail" : "(f: (TracingStatus) => IO[E, A]): IO[E, A]", "member" : "zio.IO.checkTraced", "link" : "zio\/IO$.html#checkTraced[E,A](f:zio.TracingStatus=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "checkInterruptible", "tail" : "(f: (InterruptStatus) => IO[E, A]): IO[E, A]", "member" : "zio.IO.checkInterruptible", "link" : "zio\/IO$.html#checkInterruptible[E,A](f:zio.InterruptStatus=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "bracketExit", "tail" : "(acquire: => IO[E, A], release: (A, Exit[E, B]) => UIO[Any], use: (A) => IO[E, B]): IO[E, B]", "member" : "zio.IO.bracketExit", "link" : "zio\/IO$.html#bracketExit[E,A,B](acquire:=>zio.IO[E,A],release:(A,zio.Exit[E,B])=>zio.UIO[Any],use:A=>zio.IO[E,B]):zio.IO[E,B]", "kind" : "def"}, {"label" : "bracketExit", "tail" : "(acquire: => IO[E, A]): BracketExitAcquire[Any, E, A]", "member" : "zio.IO.bracketExit", "link" : "zio\/IO$.html#bracketExit[E,A](acquire:=>zio.IO[E,A]):zio.ZIO.BracketExitAcquire[Any,E,A]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: => IO[E, A], release: (A) => UIO[Any], use: (A) => IO[E, B]): IO[E, B]", "member" : "zio.IO.bracket", "link" : "zio\/IO$.html#bracket[E,A,B](acquire:=>zio.IO[E,A],release:A=>zio.UIO[Any],use:A=>zio.IO[E,B]):zio.IO[E,B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: => IO[E, A]): BracketAcquire[Any, E, A]", "member" : "zio.IO.bracket", "link" : "zio\/IO$.html#bracket[E,A](acquire:=>zio.IO[E,A]):zio.ZIO.BracketAcquire[Any,E,A]", "kind" : "def"}, {"label" : "blockingExecutor", "tail" : "(): UIO[Executor]", "member" : "zio.IO.blockingExecutor", "link" : "zio\/IO$.html#blockingExecutor:zio.UIO[zio.Executor]", "kind" : "def"}, {"label" : "blocking", "tail" : "(zio: => IO[E, A]): IO[E, A]", "member" : "zio.IO.blocking", "link" : "zio\/IO$.html#blocking[E,A](zio:=>zio.IO[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "attemptBlockingInterrupt", "tail" : "(effect: => A): Task[A]", "member" : "zio.IO.attemptBlockingInterrupt", "link" : "zio\/IO$.html#attemptBlockingInterrupt[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "attemptBlockingIO", "tail" : "(effect: => A): IO[IOException, A]", "member" : "zio.IO.attemptBlockingIO", "link" : "zio\/IO$.html#attemptBlockingIO[A](effect:=>A):zio.IO[java.io.IOException,A]", "kind" : "def"}, {"label" : "attemptBlockingCancelable", "tail" : "(effect: => A)(cancel: => UIO[Any]): Task[A]", "member" : "zio.IO.attemptBlockingCancelable", "link" : "zio\/IO$.html#attemptBlockingCancelable[A](effect:=>A)(cancel:=>zio.UIO[Any]):zio.Task[A]", "kind" : "def"}, {"label" : "attemptBlocking", "tail" : "(effect: => A): Task[A]", "member" : "zio.IO.attemptBlocking", "link" : "zio\/IO$.html#attemptBlocking[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(effect: => A): Task[A]", "member" : "zio.IO.attempt", "link" : "zio\/IO$.html#attempt[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "asyncMaybe", "tail" : "(register: ((IO[E, A]) => Unit) => Option[IO[E, A]], blockingOn: => FiberId): IO[E, A]", "member" : "zio.IO.asyncMaybe", "link" : "zio\/IO$.html#asyncMaybe[E,A](register:(zio.IO[E,A]=>Unit)=>Option[zio.IO[E,A]],blockingOn:=>zio.FiberId):zio.IO[E,A]", "kind" : "def"}, {"label" : "asyncZIO", "tail" : "(register: ((IO[E, A]) => Unit) => IO[E, Any]): IO[E, A]", "member" : "zio.IO.asyncZIO", "link" : "zio\/IO$.html#asyncZIO[E,A](register:(zio.IO[E,A]=>Unit)=>zio.IO[E,Any]):zio.IO[E,A]", "kind" : "def"}, {"label" : "asyncInterrupt", "tail" : "(register: ((IO[E, A]) => Unit) => Either[Canceler[Any], IO[E, A]], blockingOn: => FiberId): IO[E, A]", "member" : "zio.IO.asyncInterrupt", "link" : "zio\/IO$.html#asyncInterrupt[E,A](register:(zio.IO[E,A]=>Unit)=>Either[zio.Canceler[Any],zio.IO[E,A]],blockingOn:=>zio.FiberId):zio.IO[E,A]", "kind" : "def"}, {"label" : "async", "tail" : "(register: ((IO[E, A]) => Unit) => Any, blockingOn: => FiberId): IO[E, A]", "member" : "zio.IO.async", "link" : "zio\/IO$.html#async[E,A](register:(zio.IO[E,A]=>Unit)=>Any,blockingOn:=>zio.FiberId):zio.IO[E,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: => A): Task[A]", "member" : "zio.IO.apply", "link" : "zio\/IO$.html#apply[A](a:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "allowInterrupt", "tail" : "(): UIO[Unit]", "member" : "zio.IO.allowInterrupt", "link" : "zio\/IO$.html#allowInterrupt:zio.UIO[Unit]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: => IO[E, A], release: (A, Exit[E, B]) => UIO[Any], use: (A) => IO[E, B]): IO[E, B]", "member" : "zio.IO.acquireReleaseExitWith", "link" : "zio\/IO$.html#acquireReleaseExitWith[E,A,B](acquire:=>zio.IO[E,A],release:(A,zio.Exit[E,B])=>zio.UIO[Any],use:A=>zio.IO[E,B]):zio.IO[E,B]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: => IO[E, A]): BracketExitAcquire[Any, E, A]", "member" : "zio.IO.acquireReleaseExitWith", "link" : "zio\/IO$.html#acquireReleaseExitWith[E,A](acquire:=>zio.IO[E,A]):zio.ZIO.BracketExitAcquire[Any,E,A]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: => IO[E, A], release: (A) => UIO[Any], use: (A) => IO[E, B]): IO[E, B]", "member" : "zio.IO.acquireReleaseWith", "link" : "zio\/IO$.html#acquireReleaseWith[E,A,B](acquire:=>zio.IO[E,A],release:A=>zio.UIO[Any],use:A=>zio.IO[E,B]):zio.IO[E,B]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: => IO[E, A]): BracketAcquire[Any, E, A]", "member" : "zio.IO.acquireReleaseWith", "link" : "zio\/IO$.html#acquireReleaseWith[E,A](acquire:=>zio.IO[E,A]):zio.ZIO.BracketAcquire[Any,E,A]", "kind" : "def"}, {"label" : "absolve", "tail" : "(v: => IO[E, Either[E, A]]): IO[E, A]", "member" : "zio.IO.absolve", "link" : "zio\/IO$.html#absolve[E,A](v:=>zio.IO[E,Either[E,A]]):zio.IO[E,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/IO$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/IO$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/IO$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/IO$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/IO$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/IO$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/IO$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/IO$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/IO$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/IO$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/IO$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/IO$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/IO$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/IO$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/IO$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/IO$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/IO$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/IO$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/IO$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.IsSubtypeOfError", "shortDescription" : "", "object" : "zio\/IsSubtypeOfError$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "zio\/IsSubtypeOfError.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (B) => A): (A) => A", "member" : "scala.Function1.andThen", "link" : "zio\/IsSubtypeOfError.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => A): (A) => B", "member" : "scala.Function1.compose", "link" : "zio\/IsSubtypeOfError.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/IsSubtypeOfError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/IsSubtypeOfError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/IsSubtypeOfError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/IsSubtypeOfError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/IsSubtypeOfError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/IsSubtypeOfError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/IsSubtypeOfError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/IsSubtypeOfError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/IsSubtypeOfError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/IsSubtypeOfError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/IsSubtypeOfError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/IsSubtypeOfError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/IsSubtypeOfError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/IsSubtypeOfError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/IsSubtypeOfError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/IsSubtypeOfError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/IsSubtypeOfError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/IsSubtypeOfError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(v1: A): B", "member" : "scala.Function1.apply", "link" : "zio\/IsSubtypeOfError.html#apply(v1:T1):R", "kind" : "abstract def"}], "members_object" : [{"label" : "implNothing", "tail" : "(): IsSubtypeOfError[Nothing, B]", "member" : "zio.IsSubtypeOfError.implNothing", "link" : "zio\/IsSubtypeOfError$.html#implNothing[B]:zio.IsSubtypeOfError[Nothing,B]", "kind" : "implicit def"}, {"label" : "impl", "tail" : "(subtype: <:<[A, B]): IsSubtypeOfError[A, B]", "member" : "zio.IsSubtypeOfError.impl", "link" : "zio\/IsSubtypeOfError$.html#impl[A,B](implicitsubtype:A<:<B):zio.IsSubtypeOfError[A,B]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/IsSubtypeOfError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/IsSubtypeOfError$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/IsSubtypeOfError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/IsSubtypeOfError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/IsSubtypeOfError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/IsSubtypeOfError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/IsSubtypeOfError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/IsSubtypeOfError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/IsSubtypeOfError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/IsSubtypeOfError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/IsSubtypeOfError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/IsSubtypeOfError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/IsSubtypeOfError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/IsSubtypeOfError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/IsSubtypeOfError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/IsSubtypeOfError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/IsSubtypeOfError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/IsSubtypeOfError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/IsSubtypeOfError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/IsSubtypeOfError.html", "kind" : "class"}, {"name" : "zio.IsSubtypeOfOutput", "shortDescription" : "", "object" : "zio\/IsSubtypeOfOutput$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "zio\/IsSubtypeOfOutput.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (B) => A): (A) => A", "member" : "scala.Function1.andThen", "link" : "zio\/IsSubtypeOfOutput.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => A): (A) => B", "member" : "scala.Function1.compose", "link" : "zio\/IsSubtypeOfOutput.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/IsSubtypeOfOutput.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/IsSubtypeOfOutput.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/IsSubtypeOfOutput.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/IsSubtypeOfOutput.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/IsSubtypeOfOutput.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/IsSubtypeOfOutput.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/IsSubtypeOfOutput.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/IsSubtypeOfOutput.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/IsSubtypeOfOutput.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/IsSubtypeOfOutput.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/IsSubtypeOfOutput.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/IsSubtypeOfOutput.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/IsSubtypeOfOutput.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/IsSubtypeOfOutput.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/IsSubtypeOfOutput.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/IsSubtypeOfOutput.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/IsSubtypeOfOutput.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/IsSubtypeOfOutput.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(v1: A): B", "member" : "scala.Function1.apply", "link" : "zio\/IsSubtypeOfOutput.html#apply(v1:T1):R", "kind" : "abstract def"}], "members_object" : [{"label" : "implNothing", "tail" : "(): IsSubtypeOfOutput[Nothing, B]", "member" : "zio.IsSubtypeOfOutput.implNothing", "link" : "zio\/IsSubtypeOfOutput$.html#implNothing[B]:zio.IsSubtypeOfOutput[Nothing,B]", "kind" : "implicit def"}, {"label" : "impl", "tail" : "(subtype: <:<[A, B]): IsSubtypeOfOutput[A, B]", "member" : "zio.IsSubtypeOfOutput.impl", "link" : "zio\/IsSubtypeOfOutput$.html#impl[A,B](implicitsubtype:A<:<B):zio.IsSubtypeOfOutput[A,B]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/IsSubtypeOfOutput$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/IsSubtypeOfOutput$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/IsSubtypeOfOutput$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/IsSubtypeOfOutput$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/IsSubtypeOfOutput$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/IsSubtypeOfOutput$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/IsSubtypeOfOutput$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/IsSubtypeOfOutput$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/IsSubtypeOfOutput$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/IsSubtypeOfOutput$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/IsSubtypeOfOutput$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/IsSubtypeOfOutput$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/IsSubtypeOfOutput$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/IsSubtypeOfOutput$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/IsSubtypeOfOutput$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/IsSubtypeOfOutput$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/IsSubtypeOfOutput$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/IsSubtypeOfOutput$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/IsSubtypeOfOutput$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/IsSubtypeOfOutput.html", "kind" : "class"}, {"name" : "zio.LogLevel", "shortDescription" : "LogLevel represents the log level associated with an individual loggingoperation.", "object" : "zio\/LogLevel$.html", "members_object" : [{"label" : "orderingLogLevel", "tail" : ": Ordering[LogLevel]", "member" : "zio.LogLevel.orderingLogLevel", "link" : "zio\/LogLevel$.html#orderingLogLevel:Ordering[zio.LogLevel]", "kind" : "implicit val"}, {"label" : "None", "tail" : ": LogLevel", "member" : "zio.LogLevel.None", "link" : "zio\/LogLevel$.html#None:zio.LogLevel", "kind" : "val"}, {"label" : "Debug", "tail" : ": LogLevel", "member" : "zio.LogLevel.Debug", "link" : "zio\/LogLevel$.html#Debug:zio.LogLevel", "kind" : "val"}, {"label" : "Info", "tail" : ": LogLevel", "member" : "zio.LogLevel.Info", "link" : "zio\/LogLevel$.html#Info:zio.LogLevel", "kind" : "val"}, {"label" : "Warning", "tail" : ": LogLevel", "member" : "zio.LogLevel.Warning", "link" : "zio\/LogLevel$.html#Warning:zio.LogLevel", "kind" : "val"}, {"label" : "Error", "tail" : ": LogLevel", "member" : "zio.LogLevel.Error", "link" : "zio\/LogLevel$.html#Error:zio.LogLevel", "kind" : "val"}, {"label" : "Fatal", "tail" : ": LogLevel", "member" : "zio.LogLevel.Fatal", "link" : "zio\/LogLevel$.html#Fatal:zio.LogLevel", "kind" : "val"}, {"label" : "All", "tail" : ": LogLevel", "member" : "zio.LogLevel.All", "link" : "zio\/LogLevel$.html#All:zio.LogLevel", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/LogLevel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/LogLevel$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/LogLevel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/LogLevel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/LogLevel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/LogLevel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/LogLevel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/LogLevel$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/LogLevel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/LogLevel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/LogLevel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/LogLevel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/LogLevel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/LogLevel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/LogLevel$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/LogLevel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/LogLevel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/LogLevel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/LogLevel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "apply", "tail" : "(zio: ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.LogLevel.apply", "link" : "zio\/LogLevel.html#apply[R,E,A](zio:zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : ">", "tail" : "(that: LogLevel): Boolean", "member" : "zio.LogLevel.>", "link" : "zio\/LogLevel.html#>(that:zio.LogLevel):Boolean", "kind" : "def"}, {"label" : ">=", "tail" : "(that: LogLevel): Boolean", "member" : "zio.LogLevel.>=", "link" : "zio\/LogLevel.html#>=(that:zio.LogLevel):Boolean", "kind" : "def"}, {"label" : "<=", "tail" : "(that: LogLevel): Boolean", "member" : "zio.LogLevel.<=", "link" : "zio\/LogLevel.html#<=(that:zio.LogLevel):Boolean", "kind" : "def"}, {"label" : "<", "tail" : "(that: LogLevel): Boolean", "member" : "zio.LogLevel.<", "link" : "zio\/LogLevel.html#<(that:zio.LogLevel):Boolean", "kind" : "def"}, {"member" : "zio.LogLevel#<init>", "error" : "unsupported entity"}, {"label" : "syslog", "tail" : ": Int", "member" : "zio.LogLevel.syslog", "link" : "zio\/LogLevel.html#syslog:Int", "kind" : "val"}, {"label" : "label", "tail" : ": String", "member" : "zio.LogLevel.label", "link" : "zio\/LogLevel.html#label:String", "kind" : "val"}, {"label" : "ordinal", "tail" : ": Int", "member" : "zio.LogLevel.ordinal", "link" : "zio\/LogLevel.html#ordinal:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/LogLevel.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "andThen", "tail" : "(that: ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]): ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]", "member" : "zio.ZIOAspect.andThen", "link" : "zio\/LogLevel.html#andThen[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE,LowerA1>:LowerA,UpperA1<:UpperA](that:zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]):zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]", "kind" : "def"}, {"label" : "@@", "tail" : "(that: ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]): ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]", "member" : "zio.ZIOAspect.@@", "link" : "zio\/LogLevel.html#@@[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE,LowerA1>:LowerA,UpperA1<:UpperA](that:zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]):zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]", "kind" : "def"}, {"label" : ">>>", "tail" : "(that: ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]): ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]", "member" : "zio.ZIOAspect.>>>", "link" : "zio\/LogLevel.html#>>>[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE,LowerA1>:LowerA,UpperA1<:UpperA](that:zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]):zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/LogLevel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/LogLevel.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/LogLevel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/LogLevel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/LogLevel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/LogLevel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/LogLevel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/LogLevel.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/LogLevel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/LogLevel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/LogLevel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/LogLevel.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/LogLevel.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/LogLevel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/LogLevel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/LogLevel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/LogLevel.html", "kind" : "case class"}, {"name" : "zio.LogSpan", "shortDescription" : "", "members_case class" : [{"label" : "render", "tail" : "(now: Long): String", "member" : "zio.LogSpan.render", "link" : "zio\/LogSpan.html#render(now:Long):String", "kind" : "def"}, {"member" : "zio.LogSpan#<init>", "error" : "unsupported entity"}, {"label" : "startTime", "tail" : ": Long", "member" : "zio.LogSpan.startTime", "link" : "zio\/LogSpan.html#startTime:Long", "kind" : "val"}, {"label" : "label", "tail" : ": String", "member" : "zio.LogSpan.label", "link" : "zio\/LogSpan.html#label:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/LogSpan.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/LogSpan.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/LogSpan.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/LogSpan.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/LogSpan.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/LogSpan.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/LogSpan.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/LogSpan.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/LogSpan.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/LogSpan.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/LogSpan.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/LogSpan.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/LogSpan.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/LogSpan.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/LogSpan.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/LogSpan.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/LogSpan.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/LogSpan.html", "kind" : "case class"}, {"name" : "zio.ManagedApp", "trait" : "zio\/ManagedApp.html", "kind" : "trait", "members_trait" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "zio.ManagedApp.main", "link" : "zio\/ManagedApp.html#main(args:Array[String]):Unit", "kind" : "final def"}, {"label" : "environment", "tail" : "(): zio.ZEnv", "member" : "zio.BootstrapRuntime.environment", "link" : "zio\/ManagedApp.html#environment:zio.ZEnv", "kind" : "def"}, {"label" : "runtimeConfig", "tail" : "(): RuntimeConfig", "member" : "zio.ZBootstrapRuntime.runtimeConfig", "link" : "zio\/ManagedApp.html#runtimeConfig:zio.RuntimeConfig", "kind" : "def"}, {"label" : "withTracing", "tail" : "(t: Tracing): Runtime[zio.ZEnv]", "member" : "zio.Runtime.withTracing", "link" : "zio\/ManagedApp.html#withTracing(t:zio.internal.Tracing):zio.Runtime[R]", "kind" : "def"}, {"label" : "withReportFatal", "tail" : "(f: (Throwable) => Nothing): Runtime[zio.ZEnv]", "member" : "zio.Runtime.withReportFatal", "link" : "zio\/ManagedApp.html#withReportFatal(f:Throwable=>Nothing):zio.Runtime[R]", "kind" : "def"}, {"label" : "withFatal", "tail" : "(f: (Throwable) => Boolean): Runtime[zio.ZEnv]", "member" : "zio.Runtime.withFatal", "link" : "zio\/ManagedApp.html#withFatal(f:Throwable=>Boolean):zio.Runtime[R]", "kind" : "def"}, {"label" : "withExecutor", "tail" : "(e: Executor): Runtime[zio.ZEnv]", "member" : "zio.Runtime.withExecutor", "link" : "zio\/ManagedApp.html#withExecutor(e:zio.Executor):zio.Runtime[R]", "kind" : "def"}, {"label" : "withBlockingExecutor", "tail" : "(e: Executor): Runtime[zio.ZEnv]", "member" : "zio.Runtime.withBlockingExecutor", "link" : "zio\/ManagedApp.html#withBlockingExecutor(e:zio.Executor):zio.Runtime[R]", "kind" : "def"}, {"label" : "unsafeRunToFuture", "tail" : "(zio: ZIO[zio.ZEnv, E, A]): CancelableFuture[A]", "member" : "zio.Runtime.unsafeRunToFuture", "link" : "zio\/ManagedApp.html#unsafeRunToFuture[E<:Throwable,A](zio:zio.ZIO[R,E,A]):zio.CancelableFuture[A]", "kind" : "final def"}, {"label" : "unsafeRunTask", "tail" : "(task: => RIO[zio.ZEnv, A]): A", "member" : "zio.Runtime.unsafeRunTask", "link" : "zio\/ManagedApp.html#unsafeRunTask[A](task:=>zio.RIO[R,A]):A", "kind" : "final def"}, {"label" : "unsafeRunAsyncCancelable", "tail" : "(zio: => ZIO[zio.ZEnv, E, A])(k: (Exit[E, A]) => Any): (FiberId) => Exit[E, A]", "member" : "zio.Runtime.unsafeRunAsyncCancelable", "link" : "zio\/ManagedApp.html#unsafeRunAsyncCancelable[E,A](zio:=>zio.ZIO[R,E,A])(k:zio.Exit[E,A]=>Any):zio.FiberId=>zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunAsyncWith", "tail" : "(zio: => ZIO[zio.ZEnv, E, A])(k: (Exit[E, A]) => Any): Unit", "member" : "zio.Runtime.unsafeRunAsyncWith", "link" : "zio\/ManagedApp.html#unsafeRunAsyncWith[E,A](zio:=>zio.ZIO[R,E,A])(k:zio.Exit[E,A]=>Any):Unit", "kind" : "final def"}, {"label" : "tryFastUnsafeRunSync", "tail" : "(zio: ZIO[zio.ZEnv, E, A], stack: Int): Exit[E, A]", "member" : "zio.Runtime.tryFastUnsafeRunSync", "link" : "zio\/ManagedApp.html#tryFastUnsafeRunSync[E,A](zio:zio.ZIO[R,E,A],stack:Int):zio.Exit[E,A]", "kind" : "def"}, {"label" : "defaultUnsafeRunSync", "tail" : "(zio: => ZIO[zio.ZEnv, E, A]): Exit[E, A]", "member" : "zio.Runtime.defaultUnsafeRunSync", "link" : "zio\/ManagedApp.html#defaultUnsafeRunSync[E,A](zio:=>zio.ZIO[R,E,A]):zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunSync", "tail" : "(zio0: => ZIO[zio.ZEnv, E, A]): Exit[E, A]", "member" : "zio.Runtime.unsafeRunSync", "link" : "zio\/ManagedApp.html#unsafeRunSync[E,A](zio0:=>zio.ZIO[R,E,A]):zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunAsync", "tail" : "(zio: ZIO[zio.ZEnv, E, A]): Unit", "member" : "zio.Runtime.unsafeRunAsync", "link" : "zio\/ManagedApp.html#unsafeRunAsync[E,A](zio:zio.ZIO[R,E,A]):Unit", "kind" : "final def"}, {"label" : "unsafeRun", "tail" : "(zio: => ZIO[zio.ZEnv, E, A]): A", "member" : "zio.Runtime.unsafeRun", "link" : "zio\/ManagedApp.html#unsafeRun[E,A](zio:=>zio.ZIO[R,E,A]):A", "kind" : "final def"}, {"label" : "run", "tail" : "(zio: ZIO[zio.ZEnv, E, A]): IO[E, A]", "member" : "zio.Runtime.run", "link" : "zio\/ManagedApp.html#run[E,A](zio:zio.ZIO[R,E,A]):zio.IO[E,A]", "kind" : "final def"}, {"label" : "platform", "tail" : "(): Platform", "member" : "zio.Runtime.platform", "link" : "zio\/ManagedApp.html#platform:zio.internal.Platform", "kind" : "def"}, {"label" : "mapRuntimeConfig", "tail" : "(f: (RuntimeConfig) => RuntimeConfig): Runtime[zio.ZEnv]", "member" : "zio.Runtime.mapRuntimeConfig", "link" : "zio\/ManagedApp.html#mapRuntimeConfig(f:zio.RuntimeConfig=>zio.RuntimeConfig):zio.Runtime[R]", "kind" : "def"}, {"label" : "mapPlatform", "tail" : "(f: (Platform) => Platform): Runtime[zio.ZEnv]", "member" : "zio.Runtime.mapPlatform", "link" : "zio\/ManagedApp.html#mapPlatform(f:zio.internal.Platform=>zio.internal.Platform):zio.Runtime[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (zio.ZEnv) => R1): Runtime[R1]", "member" : "zio.Runtime.map", "link" : "zio\/ManagedApp.html#map[R1](f:R=>R1):zio.Runtime[R1]", "kind" : "def"}, {"label" : "as", "tail" : "(r1: R1): Runtime[R1]", "member" : "zio.Runtime.as", "link" : "zio\/ManagedApp.html#as[R1](r1:R1):zio.Runtime[R1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ManagedApp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ManagedApp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ManagedApp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ManagedApp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ManagedApp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ManagedApp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ManagedApp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ManagedApp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ManagedApp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ManagedApp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ManagedApp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ManagedApp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ManagedApp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ManagedApp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ManagedApp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ManagedApp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ManagedApp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ManagedApp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ManagedApp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(args: List[String]): ZManaged[zio.ZEnv, Nothing, ExitCode]", "member" : "zio.ManagedApp.run", "link" : "zio\/ManagedApp.html#run(args:List[String]):zio.ZManaged[zio.ZEnv,Nothing,zio.ExitCode]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.MetricLabel", "shortDescription" : "A MetricLabel represents a key value pair that allows analyzing metrics atan additional level of granularity.", "members_case class" : [{"member" : "zio.MetricLabel#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": String", "member" : "zio.MetricLabel.value", "link" : "zio\/MetricLabel.html#value:String", "kind" : "val"}, {"label" : "key", "tail" : ": String", "member" : "zio.MetricLabel.key", "link" : "zio\/MetricLabel.html#key:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/MetricLabel.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/MetricLabel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/MetricLabel.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/MetricLabel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/MetricLabel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/MetricLabel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/MetricLabel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/MetricLabel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/MetricLabel.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/MetricLabel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/MetricLabel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/MetricLabel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/MetricLabel.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/MetricLabel.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/MetricLabel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/MetricLabel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/MetricLabel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/MetricLabel.html", "kind" : "case class"}, {"name" : "zio.NeedsEnv", "shortDescription" : "A value of type NeedsEnv[R] provides implicit evidence that an effect withenvironment type R needs an environment, that is, that R is not equal toAny.", "object" : "zio\/NeedsEnv$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/NeedsEnv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/NeedsEnv.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/NeedsEnv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/NeedsEnv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/NeedsEnv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/NeedsEnv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/NeedsEnv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/NeedsEnv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/NeedsEnv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/NeedsEnv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/NeedsEnv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/NeedsEnv.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/NeedsEnv.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/NeedsEnv.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/NeedsEnv.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/NeedsEnv.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/NeedsEnv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/NeedsEnv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/NeedsEnv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "needsEnvAmbiguous2", "tail" : ": NeedsEnv[Any]", "member" : "zio.NeedsEnv.needsEnvAmbiguous2", "link" : "zio\/NeedsEnv$.html#needsEnvAmbiguous2:zio.NeedsEnv[Any]", "kind" : "implicit val"}, {"label" : "needsEnvAmbiguous1", "tail" : ": NeedsEnv[Any]", "member" : "zio.NeedsEnv.needsEnvAmbiguous1", "link" : "zio\/NeedsEnv$.html#needsEnvAmbiguous1:zio.NeedsEnv[Any]", "kind" : "implicit val"}, {"label" : "needsEnv", "tail" : "(): NeedsEnv[R]", "member" : "zio.NeedsEnv.needsEnv", "link" : "zio\/NeedsEnv$.html#needsEnv[R]:zio.NeedsEnv[R]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/NeedsEnv$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/NeedsEnv$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/NeedsEnv$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/NeedsEnv$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/NeedsEnv$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/NeedsEnv$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/NeedsEnv$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/NeedsEnv$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/NeedsEnv$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/NeedsEnv$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/NeedsEnv$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/NeedsEnv$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/NeedsEnv$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/NeedsEnv$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/NeedsEnv$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/NeedsEnv$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/NeedsEnv$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/NeedsEnv$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/NeedsEnv$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/NeedsEnv.html", "kind" : "class"}, {"name" : "zio.NonEmptyChunk", "shortDescription" : "A NonEmptyChunk is a Chunk that is guaranteed to contain at least oneelement.", "object" : "zio\/NonEmptyChunk$.html", "members_class" : [{"label" : "zipWithIndexFrom", "tail" : "(indexOffset: Int): NonEmptyChunk[(A, Int)]", "member" : "zio.NonEmptyChunk.zipWithIndexFrom", "link" : "zio\/NonEmptyChunk.html#zipWithIndexFrom(indexOffset:Int):zio.NonEmptyChunk[(A,Int)]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): NonEmptyChunk[(A, Int)]", "member" : "zio.NonEmptyChunk.zipWithIndex", "link" : "zio\/NonEmptyChunk.html#zipWithIndex:zio.NonEmptyChunk[(A,Int)]", "kind" : "def"}, {"label" : "zipWith", "tail" : "(that: NonEmptyChunk[B])(f: (A, B) => C): NonEmptyChunk[C]", "member" : "zio.NonEmptyChunk.zipWith", "link" : "zio\/NonEmptyChunk.html#zipWith[B,C](that:zio.NonEmptyChunk[B])(f:(A,B)=>C):zio.NonEmptyChunk[C]", "kind" : "def"}, {"label" : "zipAllWith", "tail" : "(that: Chunk[B])(left: (A) => C, right: (B) => C)(both: (A, B) => C): NonEmptyChunk[C]", "member" : "zio.NonEmptyChunk.zipAllWith", "link" : "zio\/NonEmptyChunk.html#zipAllWith[B,C](that:zio.Chunk[B])(left:A=>C,right:B=>C)(both:(A,B)=>C):zio.NonEmptyChunk[C]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Chunk[B]): NonEmptyChunk[(Option[A], Option[B])]", "member" : "zio.NonEmptyChunk.zipAll", "link" : "zio\/NonEmptyChunk.html#zipAll[B](that:zio.Chunk[B]):zio.NonEmptyChunk[(Option[A],Option[B])]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: NonEmptyChunk[B])(zippable: Zippable[A, B]): NonEmptyChunk[Out]", "member" : "zio.NonEmptyChunk.zip", "link" : "zio\/NonEmptyChunk.html#zip[B](that:zio.NonEmptyChunk[B])(implicitzippable:zio.Zippable[A,B]):zio.NonEmptyChunk[zippable.Out]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "zio.NonEmptyChunk.toString", "link" : "zio\/NonEmptyChunk.html#toString():String", "kind" : "def"}, {"label" : "toCons", "tail" : "(): ::[A1]", "member" : "zio.NonEmptyChunk.toCons", "link" : "zio\/NonEmptyChunk.html#toCons[A1>:A]:::[A1]", "kind" : "def"}, {"label" : "toChunk", "tail" : "(): Chunk[A]", "member" : "zio.NonEmptyChunk.toChunk", "link" : "zio\/NonEmptyChunk.html#toChunk:zio.Chunk[A]", "kind" : "def"}, {"label" : "reduceMapRight", "tail" : "(map: (A) => B)(reduce: (A, B) => B): B", "member" : "zio.NonEmptyChunk.reduceMapRight", "link" : "zio\/NonEmptyChunk.html#reduceMapRight[B](map:A=>B)(reduce:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceMapLeft", "tail" : "(map: (A) => B)(reduce: (B, A) => B): B", "member" : "zio.NonEmptyChunk.reduceMapLeft", "link" : "zio\/NonEmptyChunk.html#reduceMapLeft[B](map:A=>B)(reduce:(B,A)=>B):B", "kind" : "def"}, {"label" : "prepended", "tail" : "(a: A1): NonEmptyChunk[A1]", "member" : "zio.NonEmptyChunk.prepended", "link" : "zio\/NonEmptyChunk.html#prepended[A1>:A](a:A1):zio.NonEmptyChunk[A1]", "kind" : "def"}, {"label" : "prepend", "tail" : "(that: Chunk[A1]): NonEmptyChunk[A1]", "member" : "zio.NonEmptyChunk.prepend", "link" : "zio\/NonEmptyChunk.html#prepend[A1>:A](that:zio.Chunk[A1]):zio.NonEmptyChunk[A1]", "kind" : "def"}, {"label" : "materialize", "tail" : "(): NonEmptyChunk[A1]", "member" : "zio.NonEmptyChunk.materialize", "link" : "zio\/NonEmptyChunk.html#materialize[A1>:A]:zio.NonEmptyChunk[A1]", "kind" : "def"}, {"label" : "mapZIOPar", "tail" : "(f: (A) => ZIO[R, E, B]): ZIO[R, E, NonEmptyChunk[B]]", "member" : "zio.NonEmptyChunk.mapZIOPar", "link" : "zio\/NonEmptyChunk.html#mapZIOPar[R,E,B](f:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "mapZIO", "tail" : "(f: (A) => ZIO[R, E, B]): ZIO[R, E, NonEmptyChunk[B]]", "member" : "zio.NonEmptyChunk.mapZIO", "link" : "zio\/NonEmptyChunk.html#mapZIO[R,E,B](f:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "mapMPar", "tail" : "(f: (A) => ZIO[R, E, B]): ZIO[R, E, NonEmptyChunk[B]]", "member" : "zio.NonEmptyChunk.mapMPar", "link" : "zio\/NonEmptyChunk.html#mapMPar[R,E,B](f:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "mapM", "tail" : "(f: (A) => ZIO[R, E, B]): ZIO[R, E, NonEmptyChunk[B]]", "member" : "zio.NonEmptyChunk.mapM", "link" : "zio\/NonEmptyChunk.html#mapM[R,E,B](f:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "mapAccumZIO", "tail" : "(s: S)(f: (S, A) => ZIO[R, E, (S, B)]): ZIO[R, E, (S, NonEmptyChunk[B])]", "member" : "zio.NonEmptyChunk.mapAccumZIO", "link" : "zio\/NonEmptyChunk.html#mapAccumZIO[R,E,S,B](s:S)(f:(S,A)=>zio.ZIO[R,E,(S,B)]):zio.ZIO[R,E,(S,zio.NonEmptyChunk[B])]", "kind" : "def"}, {"label" : "mapAccumM", "tail" : "(s: S)(f: (S, A) => ZIO[R, E, (S, B)]): ZIO[R, E, (S, NonEmptyChunk[B])]", "member" : "zio.NonEmptyChunk.mapAccumM", "link" : "zio\/NonEmptyChunk.html#mapAccumM[R,E,S,B](s:S)(f:(S,A)=>zio.ZIO[R,E,(S,B)]):zio.ZIO[R,E,(S,zio.NonEmptyChunk[B])]", "kind" : "def"}, {"label" : "mapAccum", "tail" : "(s: S)(f: (S, A) => (S, B)): (S, NonEmptyChunk[B])", "member" : "zio.NonEmptyChunk.mapAccum", "link" : "zio\/NonEmptyChunk.html#mapAccum[S,B](s:S)(f:(S,A)=>(S,B)):(S,zio.NonEmptyChunk[B])", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): NonEmptyChunk[B]", "member" : "zio.NonEmptyChunk.map", "link" : "zio\/NonEmptyChunk.html#map[B](f:A=>B):zio.NonEmptyChunk[B]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "zio.NonEmptyChunk.hashCode", "link" : "zio\/NonEmptyChunk.html#hashCode():Int", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, NonEmptyChunk[B]]): NonEmptyChunk[B]", "member" : "zio.NonEmptyChunk.flatten", "link" : "zio\/NonEmptyChunk.html#flatten[B](implicitev:A<:<zio.NonEmptyChunk[B]):zio.NonEmptyChunk[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => NonEmptyChunk[B]): NonEmptyChunk[B]", "member" : "zio.NonEmptyChunk.flatMap", "link" : "zio\/NonEmptyChunk.html#flatMap[B](f:A=>zio.NonEmptyChunk[B]):zio.NonEmptyChunk[B]", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "zio.NonEmptyChunk.equals", "link" : "zio\/NonEmptyChunk.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "asBits", "tail" : "(ev: <:<[A, Byte]): NonEmptyChunk[Boolean]", "member" : "zio.NonEmptyChunk.asBits", "link" : "zio\/NonEmptyChunk.html#asBits(implicitev:A<:<Byte):zio.NonEmptyChunk[Boolean]", "kind" : "def"}, {"label" : "appended", "tail" : "(a: A1): NonEmptyChunk[A1]", "member" : "zio.NonEmptyChunk.appended", "link" : "zio\/NonEmptyChunk.html#appended[A1>:A](a:A1):zio.NonEmptyChunk[A1]", "kind" : "def"}, {"label" : "append", "tail" : "(that: Chunk[A1]): NonEmptyChunk[A1]", "member" : "zio.NonEmptyChunk.append", "link" : "zio\/NonEmptyChunk.html#append[A1>:A](that:zio.Chunk[A1]):zio.NonEmptyChunk[A1]", "kind" : "def"}, {"label" : "++", "tail" : "(that: Chunk[A1]): NonEmptyChunk[A1]", "member" : "zio.NonEmptyChunk.++", "link" : "zio\/NonEmptyChunk.html#++[A1>:A](that:zio.Chunk[A1]):zio.NonEmptyChunk[A1]", "kind" : "def"}, {"label" : ":+", "tail" : "(a: A1): NonEmptyChunk[A1]", "member" : "zio.NonEmptyChunk.:+", "link" : "zio\/NonEmptyChunk.html#:+[A1>:A](a:A1):zio.NonEmptyChunk[A1]", "kind" : "def"}, {"label" : "+:", "tail" : "(a: A1): NonEmptyChunk[A1]", "member" : "zio.NonEmptyChunk.+:", "link" : "zio\/NonEmptyChunk.html#+:[A1>:A](a:A1):zio.NonEmptyChunk[A1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/NonEmptyChunk.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/NonEmptyChunk.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/NonEmptyChunk.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/NonEmptyChunk.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/NonEmptyChunk.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/NonEmptyChunk.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/NonEmptyChunk.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/NonEmptyChunk.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/NonEmptyChunk.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/NonEmptyChunk.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/NonEmptyChunk.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/NonEmptyChunk.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/NonEmptyChunk.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/NonEmptyChunk.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/NonEmptyChunk.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/NonEmptyChunk.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "toChunk", "tail" : "(nonEmptyChunk: NonEmptyChunk[A]): Chunk[A]", "member" : "zio.NonEmptyChunk.toChunk", "link" : "zio\/NonEmptyChunk$.html#toChunk[A](nonEmptyChunk:zio.NonEmptyChunk[A]):zio.Chunk[A]", "kind" : "implicit def"}, {"label" : "unit", "tail" : ": NonEmptyChunk[Unit]", "member" : "zio.NonEmptyChunk.unit", "link" : "zio\/NonEmptyChunk$.html#unit:zio.NonEmptyChunk[Unit]", "kind" : "val"}, {"label" : "unapplySeq", "tail" : "(seq: Seq[A]): Option[Seq[A]]", "member" : "zio.NonEmptyChunk.unapplySeq", "link" : "zio\/NonEmptyChunk$.html#unapplySeq[A](seq:Seq[A]):Option[Seq[A]]", "kind" : "def"}, {"label" : "single", "tail" : "(a: A): NonEmptyChunk[A]", "member" : "zio.NonEmptyChunk.single", "link" : "zio\/NonEmptyChunk$.html#single[A](a:A):zio.NonEmptyChunk[A]", "kind" : "def"}, {"label" : "fromIterableOption", "tail" : "(as: Iterable[A]): Option[NonEmptyChunk[A]]", "member" : "zio.NonEmptyChunk.fromIterableOption", "link" : "zio\/NonEmptyChunk$.html#fromIterableOption[A](as:Iterable[A]):Option[zio.NonEmptyChunk[A]]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(a: A, as: Iterable[A]): NonEmptyChunk[A]", "member" : "zio.NonEmptyChunk.fromIterable", "link" : "zio\/NonEmptyChunk$.html#fromIterable[A](a:A,as:Iterable[A]):zio.NonEmptyChunk[A]", "kind" : "def"}, {"label" : "fromCons", "tail" : "(as: ::[A]): NonEmptyChunk[A]", "member" : "zio.NonEmptyChunk.fromCons", "link" : "zio\/NonEmptyChunk$.html#fromCons[A](as:::[A]):zio.NonEmptyChunk[A]", "kind" : "def"}, {"label" : "fromChunk", "tail" : "(chunk: Chunk[A]): Option[NonEmptyChunk[A]]", "member" : "zio.NonEmptyChunk.fromChunk", "link" : "zio\/NonEmptyChunk$.html#fromChunk[A](chunk:zio.Chunk[A]):Option[zio.NonEmptyChunk[A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: A, as: A*): NonEmptyChunk[A]", "member" : "zio.NonEmptyChunk.apply", "link" : "zio\/NonEmptyChunk$.html#apply[A](a:A,as:A*):zio.NonEmptyChunk[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/NonEmptyChunk$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/NonEmptyChunk$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/NonEmptyChunk$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/NonEmptyChunk$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/NonEmptyChunk$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/NonEmptyChunk$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/NonEmptyChunk$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/NonEmptyChunk$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/NonEmptyChunk$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/NonEmptyChunk$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/NonEmptyChunk$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/NonEmptyChunk$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/NonEmptyChunk$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/NonEmptyChunk$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/NonEmptyChunk$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/NonEmptyChunk$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/NonEmptyChunk$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/NonEmptyChunk$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/NonEmptyChunk$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/NonEmptyChunk.html", "kind" : "class"}, {"name" : "zio.Promise", "shortDescription" : "A promise represents an asynchronous variable, of zio.IO type, that canbe set exactly once, with the ability for an arbitrary number of fibers tosuspend (by calling await) and automatically resume when the variable isset.", "object" : "zio\/Promise$.html", "members_class" : [{"label" : "succeed", "tail" : "(a: A): UIO[Boolean]", "member" : "zio.Promise.succeed", "link" : "zio\/Promise.html#succeed(a:A):zio.UIO[Boolean]", "kind" : "def"}, {"label" : "poll", "tail" : "(): UIO[Option[IO[E, A]]]", "member" : "zio.Promise.poll", "link" : "zio\/Promise.html#poll:zio.UIO[Option[zio.IO[E,A]]]", "kind" : "def"}, {"label" : "isDone", "tail" : "(): UIO[Boolean]", "member" : "zio.Promise.isDone", "link" : "zio\/Promise.html#isDone:zio.UIO[Boolean]", "kind" : "def"}, {"label" : "interruptAs", "tail" : "(fiberId: FiberId): UIO[Boolean]", "member" : "zio.Promise.interruptAs", "link" : "zio\/Promise.html#interruptAs(fiberId:zio.FiberId):zio.UIO[Boolean]", "kind" : "def"}, {"label" : "interrupt", "tail" : "(): UIO[Boolean]", "member" : "zio.Promise.interrupt", "link" : "zio\/Promise.html#interrupt:zio.UIO[Boolean]", "kind" : "def"}, {"label" : "halt", "tail" : "(e: Cause[E]): UIO[Boolean]", "member" : "zio.Promise.halt", "link" : "zio\/Promise.html#halt(e:zio.Cause[E]):zio.UIO[Boolean]", "kind" : "def"}, {"label" : "failCause", "tail" : "(e: Cause[E]): UIO[Boolean]", "member" : "zio.Promise.failCause", "link" : "zio\/Promise.html#failCause(e:zio.Cause[E]):zio.UIO[Boolean]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: E): UIO[Boolean]", "member" : "zio.Promise.fail", "link" : "zio\/Promise.html#fail(e:E):zio.UIO[Boolean]", "kind" : "def"}, {"label" : "completeWith", "tail" : "(io: IO[E, A]): UIO[Boolean]", "member" : "zio.Promise.completeWith", "link" : "zio\/Promise.html#completeWith(io:zio.IO[E,A]):zio.UIO[Boolean]", "kind" : "def"}, {"label" : "complete", "tail" : "(io: IO[E, A]): UIO[Boolean]", "member" : "zio.Promise.complete", "link" : "zio\/Promise.html#complete(io:zio.IO[E,A]):zio.UIO[Boolean]", "kind" : "def"}, {"label" : "done", "tail" : "(e: Exit[E, A]): UIO[Boolean]", "member" : "zio.Promise.done", "link" : "zio\/Promise.html#done(e:zio.Exit[E,A]):zio.UIO[Boolean]", "kind" : "def"}, {"label" : "die", "tail" : "(e: Throwable): UIO[Boolean]", "member" : "zio.Promise.die", "link" : "zio\/Promise.html#die(e:Throwable):zio.UIO[Boolean]", "kind" : "def"}, {"label" : "await", "tail" : "(): IO[E, A]", "member" : "zio.Promise.await", "link" : "zio\/Promise.html#await:zio.IO[E,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Promise.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Promise.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Promise.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Promise.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Promise.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Promise.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Promise.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Promise.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Promise.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Promise.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Promise.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Promise.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Promise.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Promise.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Promise.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Promise.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Promise.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Promise.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Promise.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "makeManaged", "tail" : "(): UManaged[Promise[E, A]]", "member" : "zio.Promise.makeManaged", "link" : "zio\/Promise$.html#makeManaged[E,A]:zio.UManaged[zio.Promise[E,A]]", "kind" : "def"}, {"label" : "makeAs", "tail" : "(fiberId: FiberId): UIO[Promise[E, A]]", "member" : "zio.Promise.makeAs", "link" : "zio\/Promise$.html#makeAs[E,A](fiberId:zio.FiberId):zio.UIO[zio.Promise[E,A]]", "kind" : "def"}, {"label" : "make", "tail" : "(): UIO[Promise[E, A]]", "member" : "zio.Promise.make", "link" : "zio\/Promise$.html#make[E,A]:zio.UIO[zio.Promise[E,A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Promise$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Promise$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Promise$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Promise$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Promise$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Promise$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Promise$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Promise$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Promise$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Promise$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Promise$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Promise$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Promise$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Promise$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Promise$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Promise$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Promise$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Promise$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Promise$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/Promise.html", "kind" : "class"}, {"name" : "zio.Random", "object" : "zio\/Random$.html", "members_object" : [{"label" : "shuffle", "tail" : "(list: => List[A]): ZIO[Has[Random], Nothing, List[A]]", "member" : "zio.Random.shuffle", "link" : "zio\/Random$.html#shuffle[A](list:=>List[A]):zio.ZIO[zio.Has[zio.Random],Nothing,List[A]]", "kind" : "def"}, {"label" : "setSeed", "tail" : "(seed: => Long): URIO[Has[Random], Unit]", "member" : "zio.Random.setSeed", "link" : "zio\/Random$.html#setSeed(seed:=>Long):zio.URIO[zio.Has[zio.Random],Unit]", "kind" : "def"}, {"label" : "nextString", "tail" : "(length: => Int): URIO[Has[Random], String]", "member" : "zio.Random.nextString", "link" : "zio\/Random$.html#nextString(length:=>Int):zio.URIO[zio.Has[zio.Random],String]", "kind" : "def"}, {"label" : "nextPrintableChar", "tail" : ": URIO[Has[Random], Char]", "member" : "zio.Random.nextPrintableChar", "link" : "zio\/Random$.html#nextPrintableChar:zio.URIO[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "nextUUID", "tail" : ": URIO[Has[Random], UUID]", "member" : "zio.Random.nextUUID", "link" : "zio\/Random$.html#nextUUID:zio.URIO[zio.Has[zio.Random],java.util.UUID]", "kind" : "val"}, {"label" : "nextLongBounded", "tail" : "(n: => Long): URIO[Has[Random], Long]", "member" : "zio.Random.nextLongBounded", "link" : "zio\/Random$.html#nextLongBounded(n:=>Long):zio.URIO[zio.Has[zio.Random],Long]", "kind" : "def"}, {"label" : "nextLongBetween", "tail" : "(minInclusive: => Long, maxExclusive: => Long): URIO[Has[Random], Long]", "member" : "zio.Random.nextLongBetween", "link" : "zio\/Random$.html#nextLongBetween(minInclusive:=>Long,maxExclusive:=>Long):zio.URIO[zio.Has[zio.Random],Long]", "kind" : "def"}, {"label" : "nextLong", "tail" : ": URIO[Has[Random], Long]", "member" : "zio.Random.nextLong", "link" : "zio\/Random$.html#nextLong:zio.URIO[zio.Has[zio.Random],Long]", "kind" : "val"}, {"label" : "nextIntBounded", "tail" : "(n: => Int): URIO[Has[Random], Int]", "member" : "zio.Random.nextIntBounded", "link" : "zio\/Random$.html#nextIntBounded(n:=>Int):zio.URIO[zio.Has[zio.Random],Int]", "kind" : "def"}, {"label" : "nextIntBetween", "tail" : "(minInclusive: => Int, maxExclusive: => Int): URIO[Has[Random], Int]", "member" : "zio.Random.nextIntBetween", "link" : "zio\/Random$.html#nextIntBetween(minInclusive:=>Int,maxExclusive:=>Int):zio.URIO[zio.Has[zio.Random],Int]", "kind" : "def"}, {"label" : "nextInt", "tail" : ": URIO[Has[Random], Int]", "member" : "zio.Random.nextInt", "link" : "zio\/Random$.html#nextInt:zio.URIO[zio.Has[zio.Random],Int]", "kind" : "val"}, {"label" : "nextGaussian", "tail" : ": URIO[Has[Random], Double]", "member" : "zio.Random.nextGaussian", "link" : "zio\/Random$.html#nextGaussian:zio.URIO[zio.Has[zio.Random],Double]", "kind" : "val"}, {"label" : "nextFloatBetween", "tail" : "(minInclusive: => Float, maxExclusive: => Float): URIO[Has[Random], Float]", "member" : "zio.Random.nextFloatBetween", "link" : "zio\/Random$.html#nextFloatBetween(minInclusive:=>Float,maxExclusive:=>Float):zio.URIO[zio.Has[zio.Random],Float]", "kind" : "def"}, {"label" : "nextFloat", "tail" : ": URIO[Has[Random], Float]", "member" : "zio.Random.nextFloat", "link" : "zio\/Random$.html#nextFloat:zio.URIO[zio.Has[zio.Random],Float]", "kind" : "val"}, {"label" : "nextDoubleBetween", "tail" : "(minInclusive: => Double, maxExclusive: => Double): URIO[Has[Random], Double]", "member" : "zio.Random.nextDoubleBetween", "link" : "zio\/Random$.html#nextDoubleBetween(minInclusive:=>Double,maxExclusive:=>Double):zio.URIO[zio.Has[zio.Random],Double]", "kind" : "def"}, {"label" : "nextDouble", "tail" : ": URIO[Has[Random], Double]", "member" : "zio.Random.nextDouble", "link" : "zio\/Random$.html#nextDouble:zio.URIO[zio.Has[zio.Random],Double]", "kind" : "val"}, {"label" : "nextBytes", "tail" : "(length: => Int): ZIO[Has[Random], Nothing, Chunk[Byte]]", "member" : "zio.Random.nextBytes", "link" : "zio\/Random$.html#nextBytes(length:=>Int):zio.ZIO[zio.Has[zio.Random],Nothing,zio.Chunk[Byte]]", "kind" : "def"}, {"label" : "nextBoolean", "tail" : ": URIO[Has[Random], Boolean]", "member" : "zio.Random.nextBoolean", "link" : "zio\/Random$.html#nextBoolean:zio.URIO[zio.Has[zio.Random],Boolean]", "kind" : "val"}, {"label" : "live", "tail" : ": Layer[Nothing, Has[Random]]", "member" : "zio.Random.live", "link" : "zio\/Random$.html#live:zio.Layer[Nothing,zio.Has[zio.Random]]", "kind" : "val"}, {"label" : "any", "tail" : ": ZLayer[Has[Random], Nothing, Has[Random]]", "member" : "zio.Random.any", "link" : "zio\/Random$.html#any:zio.ZLayer[zio.Has[zio.Random],Nothing,zio.Has[zio.Random]]", "kind" : "val"}, {"label" : "RandomLive", "tail" : "", "member" : "zio.Random.RandomLive", "link" : "zio\/Random$.html#RandomLive", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Random$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Random$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Random$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Random$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Random$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Random$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Random$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Random$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Random$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Random$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Random$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Random$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Random$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Random$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Random$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Random$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Random$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Random$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Random$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/Random.html", "kind" : "trait", "members_trait" : [{"label" : "nextUUID", "tail" : "(): UIO[UUID]", "member" : "zio.Random.nextUUID", "link" : "zio\/Random.html#nextUUID:zio.UIO[java.util.UUID]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Random.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Random.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Random.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Random.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Random.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Random.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Random.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Random.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Random.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Random.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Random.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Random.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Random.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Random.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Random.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Random.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Random.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Random.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Random.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "shuffle", "tail" : "(collection: => Collection[A])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.Random.shuffle", "link" : "zio\/Random.html#shuffle[A,Collection[+Element]<:Iterable[Element]](collection:=>Collection[A])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "abstract def"}, {"label" : "setSeed", "tail" : "(seed: => Long): UIO[Unit]", "member" : "zio.Random.setSeed", "link" : "zio\/Random.html#setSeed(seed:=>Long):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "nextString", "tail" : "(length: => Int): UIO[String]", "member" : "zio.Random.nextString", "link" : "zio\/Random.html#nextString(length:=>Int):zio.UIO[String]", "kind" : "abstract def"}, {"label" : "nextPrintableChar", "tail" : "(): UIO[Char]", "member" : "zio.Random.nextPrintableChar", "link" : "zio\/Random.html#nextPrintableChar:zio.UIO[Char]", "kind" : "abstract def"}, {"label" : "nextLongBounded", "tail" : "(n: => Long): UIO[Long]", "member" : "zio.Random.nextLongBounded", "link" : "zio\/Random.html#nextLongBounded(n:=>Long):zio.UIO[Long]", "kind" : "abstract def"}, {"label" : "nextLongBetween", "tail" : "(minInclusive: => Long, maxExclusive: => Long): UIO[Long]", "member" : "zio.Random.nextLongBetween", "link" : "zio\/Random.html#nextLongBetween(minInclusive:=>Long,maxExclusive:=>Long):zio.UIO[Long]", "kind" : "abstract def"}, {"label" : "nextLong", "tail" : "(): UIO[Long]", "member" : "zio.Random.nextLong", "link" : "zio\/Random.html#nextLong:zio.UIO[Long]", "kind" : "abstract def"}, {"label" : "nextIntBounded", "tail" : "(n: => Int): UIO[Int]", "member" : "zio.Random.nextIntBounded", "link" : "zio\/Random.html#nextIntBounded(n:=>Int):zio.UIO[Int]", "kind" : "abstract def"}, {"label" : "nextIntBetween", "tail" : "(minInclusive: => Int, maxExclusive: => Int): UIO[Int]", "member" : "zio.Random.nextIntBetween", "link" : "zio\/Random.html#nextIntBetween(minInclusive:=>Int,maxExclusive:=>Int):zio.UIO[Int]", "kind" : "abstract def"}, {"label" : "nextInt", "tail" : "(): UIO[Int]", "member" : "zio.Random.nextInt", "link" : "zio\/Random.html#nextInt:zio.UIO[Int]", "kind" : "abstract def"}, {"label" : "nextGaussian", "tail" : "(): UIO[Double]", "member" : "zio.Random.nextGaussian", "link" : "zio\/Random.html#nextGaussian:zio.UIO[Double]", "kind" : "abstract def"}, {"label" : "nextFloatBetween", "tail" : "(minInclusive: => Float, maxExclusive: => Float): UIO[Float]", "member" : "zio.Random.nextFloatBetween", "link" : "zio\/Random.html#nextFloatBetween(minInclusive:=>Float,maxExclusive:=>Float):zio.UIO[Float]", "kind" : "abstract def"}, {"label" : "nextFloat", "tail" : "(): UIO[Float]", "member" : "zio.Random.nextFloat", "link" : "zio\/Random.html#nextFloat:zio.UIO[Float]", "kind" : "abstract def"}, {"label" : "nextDoubleBetween", "tail" : "(minInclusive: => Double, maxExclusive: => Double): UIO[Double]", "member" : "zio.Random.nextDoubleBetween", "link" : "zio\/Random.html#nextDoubleBetween(minInclusive:=>Double,maxExclusive:=>Double):zio.UIO[Double]", "kind" : "abstract def"}, {"label" : "nextDouble", "tail" : "(): UIO[Double]", "member" : "zio.Random.nextDouble", "link" : "zio\/Random.html#nextDouble:zio.UIO[Double]", "kind" : "abstract def"}, {"label" : "nextBytes", "tail" : "(length: => Int): UIO[Chunk[Byte]]", "member" : "zio.Random.nextBytes", "link" : "zio\/Random.html#nextBytes(length:=>Int):zio.UIO[zio.Chunk[Byte]]", "kind" : "abstract def"}, {"label" : "nextBoolean", "tail" : "(): UIO[Boolean]", "member" : "zio.Random.nextBoolean", "link" : "zio\/Random.html#nextBoolean:zio.UIO[Boolean]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.Ref", "shortDescription" : "", "object" : "zio\/Ref$.html", "members_object" : [{"label" : "makeManaged", "tail" : "(a: A): UManaged[Ref[A]]", "member" : "zio.Ref.makeManaged", "link" : "zio\/Ref$.html#makeManaged[A](a:A):zio.UManaged[zio.Ref[A]]", "kind" : "def"}, {"label" : "make", "tail" : "(a: A): UIO[Ref[A]]", "member" : "zio.Ref.make", "link" : "zio\/Ref$.html#make[A](a:A):zio.UIO[zio.Ref[A]]", "kind" : "def"}, {"label" : "Synchronized", "tail" : ": ZRef.Synchronized.type", "member" : "zio.Ref.Synchronized", "link" : "zio\/Ref$.html#Synchronized:zio.ZRef.Synchronized.type", "kind" : "val"}, {"label" : "Synchronized", "tail" : "", "member" : "zio.Ref.Synchronized", "link" : "zio\/Ref$.html#Synchronized[A]=zio.ZRef.Synchronized[Any,Any,Nothing,Nothing,A,A]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Ref$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Ref$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Ref$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Ref$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Ref$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Ref$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Ref$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Ref$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Ref$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Ref$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Ref$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Ref$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Ref$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Ref$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Ref$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Ref$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Ref$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Ref$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Ref$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.RefM", "shortDescription" : "", "object" : "zio\/RefM$.html", "members_object" : [{"label" : "makeManaged", "tail" : "(a: A): UManaged[RefM[A]]", "member" : "zio.RefM.makeManaged", "link" : "zio\/RefM$.html#makeManaged[A](a:A):zio.UManaged[zio.RefM[A]]", "kind" : "def"}, {"label" : "make", "tail" : "(a: A): UIO[RefM[A]]", "member" : "zio.RefM.make", "link" : "zio\/RefM$.html#make[A](a:A):zio.UIO[zio.RefM[A]]", "kind" : "def"}, {"label" : "dequeueRef", "tail" : "(a: A): UIO[(RefM[A], Dequeue[A])]", "member" : "zio.RefM.dequeueRef", "link" : "zio\/RefM$.html#dequeueRef[A](a:A):zio.UIO[(zio.RefM[A],zio.Dequeue[A])]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/RefM$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/RefM$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/RefM$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/RefM$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/RefM$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/RefM$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/RefM$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RefM$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RefM$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RefM$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/RefM$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/RefM$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/RefM$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/RefM$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/RefM$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/RefM$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/RefM$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/RefM$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/RefM$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.Reservation", "shortDescription" : "A Reservation[-R, +E, +A] encapsulates resource acquisition and disposalwithout specifying when or how that resource might be used.", "members_case class" : [{"member" : "zio.Reservation#<init>", "error" : "unsupported entity"}, {"label" : "release", "tail" : ": (Exit[Any, Any]) => URIO[R, Any]", "member" : "zio.Reservation.release", "link" : "zio\/Reservation.html#release:zio.Exit[Any,Any]=>zio.URIO[R,Any]", "kind" : "val"}, {"label" : "acquire", "tail" : ": ZIO[R, E, A]", "member" : "zio.Reservation.acquire", "link" : "zio\/Reservation.html#acquire:zio.ZIO[R,E,A]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/Reservation.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Reservation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Reservation.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Reservation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Reservation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Reservation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Reservation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Reservation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Reservation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Reservation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Reservation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Reservation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Reservation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Reservation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Reservation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Reservation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Reservation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/Reservation.html", "kind" : "case class"}, {"name" : "zio.RIO", "shortDescription" : "", "object" : "zio\/RIO$.html", "members_object" : [{"label" : "yieldNow", "tail" : ": UIO[Unit]", "member" : "zio.RIO.yieldNow", "link" : "zio\/RIO$.html#yieldNow:zio.UIO[Unit]", "kind" : "val"}, {"label" : "withRuntimeConfig", "tail" : "(runtimeConfig: => RuntimeConfig)(rio: => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.withRuntimeConfig", "link" : "zio\/RIO$.html#withRuntimeConfig[R,A](runtimeConfig:=>zio.RuntimeConfig)(rio:=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "whenZIO", "tail" : "(b: => RIO[R, Boolean]): WhenZIO[R, Throwable]", "member" : "zio.RIO.whenZIO", "link" : "zio\/RIO$.html#whenZIO[R](b:=>zio.RIO[R,Boolean]):zio.ZIO.WhenZIO[R,Throwable]", "kind" : "def"}, {"label" : "whenM", "tail" : "(b: => RIO[R, Boolean]): WhenZIO[R, Throwable]", "member" : "zio.RIO.whenM", "link" : "zio\/RIO$.html#whenM[R](b:=>zio.RIO[R,Boolean]):zio.ZIO.WhenZIO[R,Throwable]", "kind" : "def"}, {"label" : "whenCaseZIO", "tail" : "(a: => RIO[R, A])(pf: PartialFunction[A, RIO[R, B]]): RIO[R, Option[B]]", "member" : "zio.RIO.whenCaseZIO", "link" : "zio\/RIO$.html#whenCaseZIO[R,A,B](a:=>zio.RIO[R,A])(pf:PartialFunction[A,zio.RIO[R,B]]):zio.RIO[R,Option[B]]", "kind" : "def"}, {"label" : "whenCaseM", "tail" : "(a: => RIO[R, A])(pf: PartialFunction[A, RIO[R, B]]): RIO[R, Option[B]]", "member" : "zio.RIO.whenCaseM", "link" : "zio\/RIO$.html#whenCaseM[R,A,B](a:=>zio.RIO[R,A])(pf:PartialFunction[A,zio.RIO[R,B]]):zio.RIO[R,Option[B]]", "kind" : "def"}, {"label" : "whenCase", "tail" : "(a: => A)(pf: PartialFunction[A, RIO[R, B]]): RIO[R, Option[B]]", "member" : "zio.RIO.whenCase", "link" : "zio\/RIO$.html#whenCase[R,A,B](a:=>A)(pf:PartialFunction[A,zio.RIO[R,B]]):zio.RIO[R,Option[B]]", "kind" : "def"}, {"label" : "when", "tail" : "(b: => Boolean)(rio: => RIO[R, A]): RIO[R, Option[A]]", "member" : "zio.RIO.when", "link" : "zio\/RIO$.html#when[R,A](b:=>Boolean)(rio:=>zio.RIO[R,A]):zio.RIO[R,Option[A]]", "kind" : "def"}, {"label" : "updateState", "tail" : "(f: (S) => S)(arg0: zio.Tag[S]): ZIO[Has[ZState[S]], Nothing, Unit]", "member" : "zio.RIO.updateState", "link" : "zio\/RIO$.html#updateState[S](f:S=>S)(implicitevidence$17:zio.Tag[S]):zio.ZIO[zio.Has[zio.ZState[S]],Nothing,Unit]", "kind" : "def"}, {"label" : "untraced", "tail" : "(zio: => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.untraced", "link" : "zio\/RIO$.html#untraced[R,A](zio:=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "unsandbox", "tail" : "(v: => IO[Cause[Throwable], A]): RIO[R, A]", "member" : "zio.RIO.unsandbox", "link" : "zio\/RIO$.html#unsandbox[R,A](v:=>zio.IO[zio.Cause[Throwable],A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "unlessZIO", "tail" : "(b: => RIO[R, Boolean]): UnlessZIO[R, Throwable]", "member" : "zio.RIO.unlessZIO", "link" : "zio\/RIO$.html#unlessZIO[R](b:=>zio.RIO[R,Boolean]):zio.ZIO.UnlessZIO[R,Throwable]", "kind" : "def"}, {"label" : "unlessM", "tail" : "(b: => RIO[R, Boolean]): UnlessZIO[R, Throwable]", "member" : "zio.RIO.unlessM", "link" : "zio\/RIO$.html#unlessM[R](b:=>zio.RIO[R,Boolean]):zio.ZIO.UnlessZIO[R,Throwable]", "kind" : "def"}, {"label" : "unless", "tail" : "(b: => Boolean)(zio: => RIO[R, A]): RIO[R, Option[A]]", "member" : "zio.RIO.unless", "link" : "zio\/RIO$.html#unless[R,A](b:=>Boolean)(zio:=>zio.RIO[R,A]):zio.RIO[R,Option[A]]", "kind" : "def"}, {"label" : "uninterruptibleMask", "tail" : "(k: (InterruptStatusRestore) => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.uninterruptibleMask", "link" : "zio\/RIO$.html#uninterruptibleMask[R,A](k:zio.ZIO.InterruptStatusRestore=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "uninterruptible", "tail" : "(taskr: => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.uninterruptible", "link" : "zio\/RIO$.html#uninterruptible[R,A](taskr:=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "unit", "tail" : ": UIO[Unit]", "member" : "zio.RIO.unit", "link" : "zio\/RIO$.html#unit:zio.UIO[Unit]", "kind" : "val"}, {"label" : "traced", "tail" : "(zio: => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.traced", "link" : "zio\/RIO$.html#traced[R,A](zio:=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "trace", "tail" : "(): UIO[ZTrace]", "member" : "zio.RIO.trace", "link" : "zio\/RIO$.html#trace:zio.UIO[zio.ZTrace]", "kind" : "def"}, {"label" : "suspendWith", "tail" : "(p: (RuntimeConfig, FiberId) => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.suspendWith", "link" : "zio\/RIO$.html#suspendWith[R,A](p:(zio.RuntimeConfig,zio.FiberId)=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "suspendSucceedWith", "tail" : "(p: (RuntimeConfig, FiberId) => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.suspendSucceedWith", "link" : "zio\/RIO$.html#suspendSucceedWith[R,A](p:(zio.RuntimeConfig,zio.FiberId)=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "suspendSucceed", "tail" : "(rio: => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.suspendSucceed", "link" : "zio\/RIO$.html#suspendSucceed[R,A](rio:=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(rio: => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.suspend", "link" : "zio\/RIO$.html#suspend[R,A](rio:=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "succeedBlocking", "tail" : "(a: => A): UIO[A]", "member" : "zio.RIO.succeedBlocking", "link" : "zio\/RIO$.html#succeedBlocking[A](a:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "succeed", "tail" : "(a: => A): UIO[A]", "member" : "zio.RIO.succeed", "link" : "zio\/RIO$.html#succeed[A](a:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "some", "tail" : "(a: => A): RIO[R, Option[A]]", "member" : "zio.RIO.some", "link" : "zio\/RIO$.html#some[R,A](a:=>A):zio.RIO[R,Option[A]]", "kind" : "def"}, {"label" : "sleep", "tail" : "(duration: => zio.Duration): RIO[Has[Clock], Unit]", "member" : "zio.RIO.sleep", "link" : "zio\/RIO$.html#sleep(duration:=>zio.Duration):zio.RIO[zio.Has[zio.Clock],Unit]", "kind" : "def"}, {"label" : "serviceWith", "tail" : "(): ServiceWithPartiallyApplied[Service]", "member" : "zio.RIO.serviceWith", "link" : "zio\/RIO$.html#serviceWith[Service]:zio.ZIO.ServiceWithPartiallyApplied[Service]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D]): URIO[Has[A] with Has[B] with Has[C] with Has[D], (A, B, C, D)]", "member" : "zio.RIO.services", "link" : "zio\/RIO$.html#services[A,B,C,D](implicitevidence$13:zio.Tag[A],implicitevidence$14:zio.Tag[B],implicitevidence$15:zio.Tag[C],implicitevidence$16:zio.Tag[D]):zio.URIO[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D],(A,B,C,D)]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C]): URIO[Has[A] with Has[B] with Has[C], (A, B, C)]", "member" : "zio.RIO.services", "link" : "zio\/RIO$.html#services[A,B,C](implicitevidence$10:zio.Tag[A],implicitevidence$11:zio.Tag[B],implicitevidence$12:zio.Tag[C]):zio.URIO[zio.Has[A]withzio.Has[B]withzio.Has[C],(A,B,C)]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B]): URIO[Has[A] with Has[B], (A, B)]", "member" : "zio.RIO.services", "link" : "zio\/RIO$.html#services[A,B](implicitevidence$8:zio.Tag[A],implicitevidence$9:zio.Tag[B]):zio.URIO[zio.Has[A]withzio.Has[B],(A,B)]", "kind" : "def"}, {"label" : "serviceAt", "tail" : "(): ServiceAtPartiallyApplied[Service]", "member" : "zio.RIO.serviceAt", "link" : "zio\/RIO$.html#serviceAt[Service]:zio.ZIO.ServiceAtPartiallyApplied[Service]", "kind" : "def"}, {"label" : "service", "tail" : "(arg0: zio.Tag[A]): URIO[Has[A], A]", "member" : "zio.RIO.service", "link" : "zio\/RIO$.html#service[A](implicitevidence$7:zio.Tag[A]):zio.URIO[zio.Has[A],A]", "kind" : "def"}, {"label" : "setState", "tail" : "(s: => S)(arg0: zio.Tag[S]): ZIO[Has[ZState[S]], Nothing, Unit]", "member" : "zio.RIO.setState", "link" : "zio\/RIO$.html#setState[S](s:=>S)(implicitevidence$6:zio.Tag[S]):zio.ZIO[zio.Has[zio.ZState[S]],Nothing,Unit]", "kind" : "def"}, {"label" : "runtimeConfig", "tail" : ": UIO[RuntimeConfig]", "member" : "zio.RIO.runtimeConfig", "link" : "zio\/RIO$.html#runtimeConfig:zio.UIO[zio.RuntimeConfig]", "kind" : "val"}, {"label" : "runtime", "tail" : "(): ZIO[R, Nothing, Runtime[R]]", "member" : "zio.RIO.runtime", "link" : "zio\/RIO$.html#runtime[R]:zio.ZIO[R,Nothing,zio.Runtime[R]]", "kind" : "def"}, {"label" : "right", "tail" : "(b: => B): RIO[R, Either[Nothing, B]]", "member" : "zio.RIO.right", "link" : "zio\/RIO$.html#right[R,B](b:=>B):zio.RIO[R,Either[Nothing,B]]", "kind" : "def"}, {"label" : "reserve", "tail" : "(reservation: => RIO[R, Reservation[R, Throwable, A]])(use: (A) => RIO[R, B]): RIO[R, B]", "member" : "zio.RIO.reserve", "link" : "zio\/RIO$.html#reserve[R,A,B](reservation:=>zio.RIO[R,zio.Reservation[R,Throwable,A]])(use:A=>zio.RIO[R,B]):zio.RIO[R,B]", "kind" : "def"}, {"label" : "require", "tail" : "(error: => Throwable): (IO[Throwable, Option[A]]) => IO[Throwable, A]", "member" : "zio.RIO.require", "link" : "zio\/RIO$.html#require[A](error:=>Throwable):zio.IO[Throwable,Option[A]]=>zio.IO[Throwable,A]", "kind" : "def"}, {"label" : "replicateZIODiscard", "tail" : "(n: => Int)(effect: => RIO[R, A]): RIO[R, Unit]", "member" : "zio.RIO.replicateZIODiscard", "link" : "zio\/RIO$.html#replicateZIODiscard[R,A](n:=>Int)(effect:=>zio.RIO[R,A]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "replicateZIO", "tail" : "(n: => Int)(effect: => RIO[R, A]): RIO[R, Iterable[A]]", "member" : "zio.RIO.replicateZIO", "link" : "zio\/RIO$.html#replicateZIO[R,A](n:=>Int)(effect:=>zio.RIO[R,A]):zio.RIO[R,Iterable[A]]", "kind" : "def"}, {"label" : "replicateM_", "tail" : "(n: => Int)(effect: => RIO[R, A]): RIO[R, Unit]", "member" : "zio.RIO.replicateM_", "link" : "zio\/RIO$.html#replicateM_[R,A](n:=>Int)(effect:=>zio.RIO[R,A]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "replicateM", "tail" : "(n: => Int)(effect: => RIO[R, A]): RIO[R, Iterable[A]]", "member" : "zio.RIO.replicateM", "link" : "zio\/RIO$.html#replicateM[R,A](n:=>Int)(effect:=>zio.RIO[R,A]):zio.RIO[R,Iterable[A]]", "kind" : "def"}, {"label" : "replicate", "tail" : "(n: => Int)(effect: => RIO[R, A]): Iterable[RIO[R, A]]", "member" : "zio.RIO.replicate", "link" : "zio\/RIO$.html#replicate[R,A](n:=>Int)(effect:=>zio.RIO[R,A]):Iterable[zio.RIO[R,A]]", "kind" : "def"}, {"label" : "reduceAllPar", "tail" : "(a: => RIO[R, A], as: => Iterable[RIO[R1, A]])(f: (A, A) => A): RIO[R1, A]", "member" : "zio.RIO.reduceAllPar", "link" : "zio\/RIO$.html#reduceAllPar[R,R1<:R,A](a:=>zio.RIO[R,A],as:=>Iterable[zio.RIO[R1,A]])(f:(A,A)=>A):zio.RIO[R1,A]", "kind" : "def"}, {"label" : "reduceAll", "tail" : "(a: => RIO[R, A], as: => Iterable[RIO[R1, A]])(f: (A, A) => A): RIO[R1, A]", "member" : "zio.RIO.reduceAll", "link" : "zio\/RIO$.html#reduceAll[R,R1<:R,A](a:=>zio.RIO[R,A],as:=>Iterable[zio.RIO[R1,A]])(f:(A,A)=>A):zio.RIO[R1,A]", "kind" : "def"}, {"label" : "raceAll", "tail" : "(taskr: => RIO[R, A], taskrs: => Iterable[RIO[R1, A]]): RIO[R1, A]", "member" : "zio.RIO.raceAll", "link" : "zio\/RIO$.html#raceAll[R,R1<:R,A](taskr:=>zio.RIO[R,A],taskrs:=>Iterable[zio.RIO[R1,A]]):zio.RIO[R1,A]", "kind" : "def"}, {"label" : "provide", "tail" : "(r: => R): (RIO[R, A]) => Task[A]", "member" : "zio.RIO.provide", "link" : "zio\/RIO$.html#provide[R,A](r:=>R):zio.RIO[R,A]=>zio.Task[A]", "kind" : "def"}, {"label" : "partitionParN", "tail" : "(n: => Int)(in: => Iterable[A])(f: (A) => RIO[R, B]): RIO[R, (Iterable[Throwable], Iterable[B])]", "member" : "zio.RIO.partitionParN", "link" : "zio\/RIO$.html#partitionParN[R,A,B](n:=>Int)(in:=>Iterable[A])(f:A=>zio.RIO[R,B]):zio.RIO[R,(Iterable[Throwable],Iterable[B])]", "kind" : "def"}, {"label" : "partitionPar", "tail" : "(in: => Iterable[A])(f: (A) => RIO[R, B]): RIO[R, (Iterable[Throwable], Iterable[B])]", "member" : "zio.RIO.partitionPar", "link" : "zio\/RIO$.html#partitionPar[R,A,B](in:=>Iterable[A])(f:A=>zio.RIO[R,B]):zio.RIO[R,(Iterable[Throwable],Iterable[B])]", "kind" : "def"}, {"label" : "partition", "tail" : "(in: => Iterable[A])(f: (A) => RIO[R, B]): RIO[R, (Iterable[Throwable], Iterable[B])]", "member" : "zio.RIO.partition", "link" : "zio\/RIO$.html#partition[R,A,B](in:=>Iterable[A])(f:A=>zio.RIO[R,B]):zio.RIO[R,(Iterable[Throwable],Iterable[B])]", "kind" : "def"}, {"label" : "onExecutor", "tail" : "(executor: => Executor)(taskr: RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.onExecutor", "link" : "zio\/RIO$.html#onExecutor[R,A](executor:=>zio.Executor)(taskr:zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "not", "tail" : "(effect: => RIO[R, Boolean]): RIO[R, Boolean]", "member" : "zio.RIO.not", "link" : "zio\/RIO$.html#not[R](effect:=>zio.RIO[R,Boolean]):zio.RIO[R,Boolean]", "kind" : "def"}, {"label" : "noneOrFailWith", "tail" : "(o: => Option[O])(f: (O) => Throwable): RIO[Nothing, Unit]", "member" : "zio.RIO.noneOrFailWith", "link" : "zio\/RIO$.html#noneOrFailWith[O](o:=>Option[O])(f:O=>Throwable):zio.RIO[Nothing,Unit]", "kind" : "def"}, {"label" : "noneOrFail", "tail" : "(o: => Option[Throwable]): RIO[Nothing, Unit]", "member" : "zio.RIO.noneOrFail", "link" : "zio\/RIO$.html#noneOrFail(o:=>Option[Throwable]):zio.RIO[Nothing,Unit]", "kind" : "def"}, {"label" : "none", "tail" : ": UIO[Option[Nothing]]", "member" : "zio.RIO.none", "link" : "zio\/RIO$.html#none:zio.UIO[Option[Nothing]]", "kind" : "val"}, {"label" : "never", "tail" : ": UIO[Nothing]", "member" : "zio.RIO.never", "link" : "zio\/RIO$.html#never:zio.UIO[Nothing]", "kind" : "val"}, {"label" : "mergeAllPar", "tail" : "(in: => Iterable[RIO[R, A]])(zero: => B)(f: (B, A) => B): RIO[R, B]", "member" : "zio.RIO.mergeAllPar", "link" : "zio\/RIO$.html#mergeAllPar[R,A,B](in:=>Iterable[zio.RIO[R,A]])(zero:=>B)(f:(B,A)=>B):zio.RIO[R,B]", "kind" : "def"}, {"label" : "mergeAll", "tail" : "(in: => Iterable[RIO[R, A]])(zero: => B)(f: (B, A) => B): RIO[R, B]", "member" : "zio.RIO.mergeAll", "link" : "zio\/RIO$.html#mergeAll[R,A,B](in:=>Iterable[zio.RIO[R,A]])(zero:=>B)(f:(B,A)=>B):zio.RIO[R,B]", "kind" : "def"}, {"label" : "memoize", "tail" : "(f: (A) => RIO[R, B]): UIO[(A) => RIO[R, B]]", "member" : "zio.RIO.memoize", "link" : "zio\/RIO$.html#memoize[R,A,B](f:A=>zio.RIO[R,B]):zio.UIO[A=>zio.RIO[R,B]]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(rio1: => RIO[R, A], rio2: => RIO[R, B], rio3: => RIO[R, C], rio4: => RIO[R, D])(f: (A, B, C, D) => F): RIO[R, F]", "member" : "zio.RIO.mapParN", "link" : "zio\/RIO$.html#mapParN[R,A,B,C,D,F](rio1:=>zio.RIO[R,A],rio2:=>zio.RIO[R,B],rio3:=>zio.RIO[R,C],rio4:=>zio.RIO[R,D])(f:(A,B,C,D)=>F):zio.RIO[R,F]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(rio1: => RIO[R, A], rio2: => RIO[R, B], rio3: => RIO[R, C])(f: (A, B, C) => D): RIO[R, D]", "member" : "zio.RIO.mapParN", "link" : "zio\/RIO$.html#mapParN[R,A,B,C,D](rio1:=>zio.RIO[R,A],rio2:=>zio.RIO[R,B],rio3:=>zio.RIO[R,C])(f:(A,B,C)=>D):zio.RIO[R,D]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(rio1: => RIO[R, A], rio2: => RIO[R, B])(f: (A, B) => C): RIO[R, C]", "member" : "zio.RIO.mapParN", "link" : "zio\/RIO$.html#mapParN[R,A,B,C](rio1:=>zio.RIO[R,A],rio2:=>zio.RIO[R,B])(f:(A,B)=>C):zio.RIO[R,C]", "kind" : "def"}, {"label" : "mapN", "tail" : "(rio1: => RIO[R, A], rio2: => RIO[R, B], rio3: => RIO[R, C], rio4: => RIO[R, D])(f: (A, B, C, D) => F): RIO[R, F]", "member" : "zio.RIO.mapN", "link" : "zio\/RIO$.html#mapN[R,A,B,C,D,F](rio1:=>zio.RIO[R,A],rio2:=>zio.RIO[R,B],rio3:=>zio.RIO[R,C],rio4:=>zio.RIO[R,D])(f:(A,B,C,D)=>F):zio.RIO[R,F]", "kind" : "def"}, {"label" : "mapN", "tail" : "(rio1: => RIO[R, A], rio2: => RIO[R, B], rio3: => RIO[R, C])(f: (A, B, C) => D): RIO[R, D]", "member" : "zio.RIO.mapN", "link" : "zio\/RIO$.html#mapN[R,A,B,C,D](rio1:=>zio.RIO[R,A],rio2:=>zio.RIO[R,B],rio3:=>zio.RIO[R,C])(f:(A,B,C)=>D):zio.RIO[R,D]", "kind" : "def"}, {"label" : "mapN", "tail" : "(rio1: => RIO[R, A], rio2: => RIO[R, B])(f: (A, B) => C): RIO[R, C]", "member" : "zio.RIO.mapN", "link" : "zio\/RIO$.html#mapN[R,A,B,C](rio1:=>zio.RIO[R,A],rio2:=>zio.RIO[R,B])(f:(A,B)=>C):zio.RIO[R,C]", "kind" : "def"}, {"label" : "left", "tail" : "(a: => A): RIO[R, Either[A, Nothing]]", "member" : "zio.RIO.left", "link" : "zio\/RIO$.html#left[R,A](a:=>A):zio.RIO[R,Either[A,Nothing]]", "kind" : "def"}, {"label" : "loopDiscard", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => RIO[R, Any]): RIO[R, Unit]", "member" : "zio.RIO.loopDiscard", "link" : "zio\/RIO$.html#loopDiscard[R,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.RIO[R,Any]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "loop_", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => RIO[R, Any]): RIO[R, Unit]", "member" : "zio.RIO.loop_", "link" : "zio\/RIO$.html#loop_[R,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.RIO[R,Any]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "loop", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => RIO[R, A]): RIO[R, List[A]]", "member" : "zio.RIO.loop", "link" : "zio\/RIO$.html#loop[R,A,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.RIO[R,A]):zio.RIO[R,List[A]]", "kind" : "def"}, {"label" : "lock", "tail" : "(executor: => Executor)(taskr: => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.lock", "link" : "zio\/RIO$.html#lock[R,A](executor:=>zio.Executor)(taskr:=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "iterate", "tail" : "(initial: => S)(cont: (S) => Boolean)(body: (S) => RIO[R, S]): RIO[R, S]", "member" : "zio.RIO.iterate", "link" : "zio\/RIO$.html#iterate[R,S](initial:=>S)(cont:S=>Boolean)(body:S=>zio.RIO[R,S]):zio.RIO[R,S]", "kind" : "def"}, {"label" : "interruptibleMask", "tail" : "(k: (InterruptStatusRestore) => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.interruptibleMask", "link" : "zio\/RIO$.html#interruptibleMask[R,A](k:zio.ZIO.InterruptStatusRestore=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "interruptible", "tail" : "(taskr: => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.interruptible", "link" : "zio\/RIO$.html#interruptible[R,A](taskr:=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "interruptAs", "tail" : "(fiberId: => FiberId): UIO[Nothing]", "member" : "zio.RIO.interruptAs", "link" : "zio\/RIO$.html#interruptAs(fiberId:=>zio.FiberId):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "interrupt", "tail" : ": UIO[Nothing]", "member" : "zio.RIO.interrupt", "link" : "zio\/RIO$.html#interrupt:zio.UIO[Nothing]", "kind" : "val"}, {"label" : "infinity", "tail" : ": URIO[Has[Clock], Nothing]", "member" : "zio.RIO.infinity", "link" : "zio\/RIO$.html#infinity:zio.URIO[zio.Has[zio.Clock],Nothing]", "kind" : "val"}, {"label" : "ifZIO", "tail" : "(b: => RIO[R, Boolean]): IfZIO[R, Throwable]", "member" : "zio.RIO.ifZIO", "link" : "zio\/RIO$.html#ifZIO[R](b:=>zio.RIO[R,Boolean]):zio.ZIO.IfZIO[R,Throwable]", "kind" : "def"}, {"label" : "ifM", "tail" : "(b: => RIO[R, Boolean]): IfZIO[R, Throwable]", "member" : "zio.RIO.ifM", "link" : "zio\/RIO$.html#ifM[R](b:=>zio.RIO[R,Boolean]):zio.ZIO.IfZIO[R,Throwable]", "kind" : "def"}, {"label" : "haltWith", "tail" : "(function: (() => ZTrace) => Cause[Throwable]): RIO[R, Nothing]", "member" : "zio.RIO.haltWith", "link" : "zio\/RIO$.html#haltWith[R](function:(()=>zio.ZTrace)=>zio.Cause[Throwable]):zio.RIO[R,Nothing]", "kind" : "def"}, {"label" : "halt", "tail" : "(cause: => Cause[Throwable]): Task[Nothing]", "member" : "zio.RIO.halt", "link" : "zio\/RIO$.html#halt(cause:=>zio.Cause[Throwable]):zio.Task[Nothing]", "kind" : "def"}, {"label" : "getStateWith", "tail" : "(): GetStateWithPartiallyApplied[S]", "member" : "zio.RIO.getStateWith", "link" : "zio\/RIO$.html#getStateWith[S]:zio.ZIO.GetStateWithPartiallyApplied[S]", "kind" : "def"}, {"label" : "getState", "tail" : "(arg0: zio.Tag[S]): ZIO[Has[ZState[S]], Nothing, S]", "member" : "zio.RIO.getState", "link" : "zio\/RIO$.html#getState[S](implicitevidence$5:zio.Tag[S]):zio.ZIO[zio.Has[zio.ZState[S]],Nothing,S]", "kind" : "def"}, {"label" : "getOrFail", "tail" : "(v: => Option[A]): Task[A]", "member" : "zio.RIO.getOrFail", "link" : "zio\/RIO$.html#getOrFail[A](v:=>Option[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(value: => Try[A]): Task[A]", "member" : "zio.RIO.fromTry", "link" : "zio\/RIO$.html#fromTry[A](value:=>scala.util.Try[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromFutureInterrupt", "tail" : "(make: (ExecutionContext) => Future[A]): Task[A]", "member" : "zio.RIO.fromFutureInterrupt", "link" : "zio\/RIO$.html#fromFutureInterrupt[A](make:scala.concurrent.ExecutionContext=>scala.concurrent.Future[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromFuture", "tail" : "(make: (ExecutionContext) => Future[A]): Task[A]", "member" : "zio.RIO.fromFuture", "link" : "zio\/RIO$.html#fromFuture[A](make:scala.concurrent.ExecutionContext=>scala.concurrent.Future[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromFunctionM", "tail" : "(f: (R) => Task[A]): RIO[R, A]", "member" : "zio.RIO.fromFunctionM", "link" : "zio\/RIO$.html#fromFunctionM[R,A](f:R=>zio.Task[A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "fromFunction", "tail" : "(f: (R) => A): URIO[R, A]", "member" : "zio.RIO.fromFunction", "link" : "zio\/RIO$.html#fromFunction[R,A](f:R=>A):zio.URIO[R,A]", "kind" : "def"}, {"label" : "fromFiberZIO", "tail" : "(fiber: => Task[Fiber[Throwable, A]]): Task[A]", "member" : "zio.RIO.fromFiberZIO", "link" : "zio\/RIO$.html#fromFiberZIO[A](fiber:=>zio.Task[zio.Fiber[Throwable,A]]):zio.Task[A]", "kind" : "def"}, {"label" : "fromFiberM", "tail" : "(fiber: => Task[Fiber[Throwable, A]]): Task[A]", "member" : "zio.RIO.fromFiberM", "link" : "zio\/RIO$.html#fromFiberM[A](fiber:=>zio.Task[zio.Fiber[Throwable,A]]):zio.Task[A]", "kind" : "def"}, {"label" : "fromFiber", "tail" : "(fiber: => Fiber[Throwable, A]): Task[A]", "member" : "zio.RIO.fromFiber", "link" : "zio\/RIO$.html#fromFiber[A](fiber:=>zio.Fiber[Throwable,A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(v: => Either[Throwable, A]): Task[A]", "member" : "zio.RIO.fromEither", "link" : "zio\/RIO$.html#fromEither[A](v:=>Either[Throwable,A]):zio.Task[A]", "kind" : "def"}, {"label" : "from", "tail" : "(input: => Input)(constructor: ZIOConstructor[Nothing, Throwable, Input]): ZIO[OutEnvironment, OutError, OutSuccess]", "member" : "zio.RIO.from", "link" : "zio\/RIO$.html#from[Input](input:=>Input)(implicitconstructor:zio.ZIO.ZIOConstructor[Nothing,Throwable,Input]):zio.ZIO[constructor.OutEnvironment,constructor.OutError,constructor.OutSuccess]", "kind" : "def"}, {"label" : "forkAllDiscard", "tail" : "(as: => Iterable[RIO[R, A]]): URIO[R, Unit]", "member" : "zio.RIO.forkAllDiscard", "link" : "zio\/RIO$.html#forkAllDiscard[R,A](as:=>Iterable[zio.RIO[R,A]]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "forkAll_", "tail" : "(as: => Iterable[RIO[R, A]]): URIO[R, Unit]", "member" : "zio.RIO.forkAll_", "link" : "zio\/RIO$.html#forkAll_[R,A](as:=>Iterable[zio.RIO[R,A]]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "forkAll", "tail" : "(as: Collection[RIO[R, A]])(bf: zio.BuildFrom[Collection[RIO[R, A]], A, Collection[A]]): URIO[R, Fiber[Throwable, Collection[A]]]", "member" : "zio.RIO.forkAll", "link" : "zio\/RIO$.html#forkAll[R,A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.RIO[R,A]])(implicitbf:zio.BuildFrom[Collection[zio.RIO[R,A]],A,Collection[A]]):zio.URIO[R,zio.Fiber[Throwable,Collection[A]]]", "kind" : "def"}, {"label" : "foreachParNDiscard", "tail" : "(n: => Int)(as: => Iterable[A])(f: (A) => RIO[R, Any]): RIO[R, Unit]", "member" : "zio.RIO.foreachParNDiscard", "link" : "zio\/RIO$.html#foreachParNDiscard[R,A,B](n:=>Int)(as:=>Iterable[A])(f:A=>zio.RIO[R,Any]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "foreachParN_", "tail" : "(n: => Int)(as: => Iterable[A])(f: (A) => RIO[R, Any]): RIO[R, Unit]", "member" : "zio.RIO.foreachParN_", "link" : "zio\/RIO$.html#foreachParN_[R,A,B](n:=>Int)(as:=>Iterable[A])(f:A=>zio.RIO[R,Any]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "foreachParDiscard", "tail" : "(as: => Iterable[A])(f: (A) => RIO[R, Any]): RIO[R, Unit]", "member" : "zio.RIO.foreachParDiscard", "link" : "zio\/RIO$.html#foreachParDiscard[R,A,B](as:=>Iterable[A])(f:A=>zio.RIO[R,Any]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "foreachPar_", "tail" : "(as: => Iterable[A])(f: (A) => RIO[R, Any]): RIO[R, Unit]", "member" : "zio.RIO.foreachPar_", "link" : "zio\/RIO$.html#foreachPar_[R,A,B](as:=>Iterable[A])(f:A=>zio.RIO[R,Any]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "foreachDiscard", "tail" : "(as: => Iterable[A])(f: (A) => RIO[R, Any]): RIO[R, Unit]", "member" : "zio.RIO.foreachDiscard", "link" : "zio\/RIO$.html#foreachDiscard[R,A](as:=>Iterable[A])(f:A=>zio.RIO[R,Any]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "foreach_", "tail" : "(as: => Iterable[A])(f: (A) => RIO[R, Any]): RIO[R, Unit]", "member" : "zio.RIO.foreach_", "link" : "zio\/RIO$.html#foreach_[R,A](as:=>Iterable[A])(f:A=>zio.RIO[R,Any]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "foreachParN", "tail" : "(n: => Int)(as: Collection[A])(fn: (A) => RIO[R, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): RIO[R, Collection[B]]", "member" : "zio.RIO.foreachParN", "link" : "zio\/RIO$.html#foreachParN[R,A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[A])(fn:A=>zio.RIO[R,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.RIO[R,Collection[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: NonEmptyChunk[A])(fn: (A) => RIO[R, B]): RIO[R, NonEmptyChunk[B]]", "member" : "zio.RIO.foreachPar", "link" : "zio\/RIO$.html#foreachPar[R,A,B](as:zio.NonEmptyChunk[A])(fn:A=>zio.RIO[R,B]):zio.RIO[R,zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => RIO[R, (Key2, Value2)]): RIO[R, Map[Key2, Value2]]", "member" : "zio.RIO.foreachPar", "link" : "zio\/RIO$.html#foreachPar[R,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.RIO[R,(Key2,Value2)]):zio.RIO[R,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: Array[A])(fn: (A) => RIO[R, B])(arg0: ClassTag[B]): RIO[R, Array[B]]", "member" : "zio.RIO.foreachPar", "link" : "zio\/RIO$.html#foreachPar[R,A,B](as:Array[A])(fn:A=>zio.RIO[R,B])(implicitevidence$4:scala.reflect.ClassTag[B]):zio.RIO[R,Array[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: Set[A])(fn: (A) => RIO[R, B]): RIO[R, Set[B]]", "member" : "zio.RIO.foreachPar", "link" : "zio\/RIO$.html#foreachPar[R,A,B](as:Set[A])(fn:A=>zio.RIO[R,B]):zio.RIO[R,Set[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: Collection[A])(fn: (A) => RIO[R, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): RIO[R, Collection[B]]", "member" : "zio.RIO.foreachPar", "link" : "zio\/RIO$.html#foreachPar[R,A,B,Collection[+Element]<:Iterable[Element]](as:Collection[A])(fn:A=>zio.RIO[R,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.RIO[R,Collection[B]]", "kind" : "def"}, {"label" : "foreachExec", "tail" : "(as: Collection[A])(exec: => ExecutionStrategy)(f: (A) => RIO[R, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): RIO[R, Collection[B]]", "member" : "zio.RIO.foreachExec", "link" : "zio\/RIO$.html#foreachExec[R,A,B,Collection[+Element]<:Iterable[Element]](as:Collection[A])(exec:=>zio.ExecutionStrategy)(f:A=>zio.RIO[R,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.RIO[R,Collection[B]]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(in: NonEmptyChunk[A])(f: (A) => RIO[R, B]): RIO[R, NonEmptyChunk[B]]", "member" : "zio.RIO.foreach", "link" : "zio\/RIO$.html#foreach[R,A,B](in:zio.NonEmptyChunk[A])(f:A=>zio.RIO[R,B]):zio.RIO[R,zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Option[A])(f: (A) => RIO[R, B]): RIO[R, Option[B]]", "member" : "zio.RIO.foreach", "link" : "zio\/RIO$.html#foreach[R,A,B](in:Option[A])(f:A=>zio.RIO[R,B]):zio.RIO[R,Option[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => RIO[R, (Key2, Value2)]): RIO[R, Map[Key2, Value2]]", "member" : "zio.RIO.foreach", "link" : "zio\/RIO$.html#foreach[R,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.RIO[R,(Key2,Value2)]):zio.RIO[R,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Array[A])(f: (A) => RIO[R, B])(arg0: ClassTag[B]): RIO[R, Array[B]]", "member" : "zio.RIO.foreach", "link" : "zio\/RIO$.html#foreach[R,A,B](in:Array[A])(f:A=>zio.RIO[R,B])(implicitevidence$3:scala.reflect.ClassTag[B]):zio.RIO[R,Array[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Set[A])(f: (A) => RIO[R, B]): RIO[R, Set[B]]", "member" : "zio.RIO.foreach", "link" : "zio\/RIO$.html#foreach[R,A,B](in:Set[A])(f:A=>zio.RIO[R,B]):zio.RIO[R,Set[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Collection[A])(f: (A) => RIO[R, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): RIO[R, Collection[B]]", "member" : "zio.RIO.foreach", "link" : "zio\/RIO$.html#foreach[R,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.RIO[R,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.RIO[R,Collection[B]]", "kind" : "def"}, {"label" : "forall", "tail" : "(as: => Iterable[A])(f: (A) => RIO[R, Boolean]): RIO[R, Boolean]", "member" : "zio.RIO.forall", "link" : "zio\/RIO$.html#forall[R,A](as:=>Iterable[A])(f:A=>zio.RIO[R,Boolean]):zio.RIO[R,Boolean]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(in: => Iterable[A])(zero: => S)(f: (A, S) => RIO[R, S]): RIO[R, S]", "member" : "zio.RIO.foldRight", "link" : "zio\/RIO$.html#foldRight[R,S,A](in:=>Iterable[A])(zero:=>S)(f:(A,S)=>zio.RIO[R,S]):zio.RIO[R,S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(in: => Iterable[A])(zero: => S)(f: (S, A) => RIO[R, S]): RIO[R, S]", "member" : "zio.RIO.foldLeft", "link" : "zio\/RIO$.html#foldLeft[R,S,A](in:=>Iterable[A])(zero:=>S)(f:(S,A)=>zio.RIO[R,S]):zio.RIO[R,S]", "kind" : "def"}, {"label" : "flatten", "tail" : "(taskr: => RIO[R, RIO[R, A]]): RIO[R, A]", "member" : "zio.RIO.flatten", "link" : "zio\/RIO$.html#flatten[R,A](taskr:=>zio.RIO[R,zio.RIO[R,A]]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "firstSuccessOf", "tail" : "(rio: => RIO[R, A], rest: => Iterable[RIO[R, A]]): RIO[R, A]", "member" : "zio.RIO.firstSuccessOf", "link" : "zio\/RIO$.html#firstSuccessOf[R,A](rio:=>zio.RIO[R,A],rest:=>Iterable[zio.RIO[R,A]]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "filterNotPar", "tail" : "(as: Set[A])(f: (A) => RIO[R, Boolean]): RIO[R, Set[A]]", "member" : "zio.RIO.filterNotPar", "link" : "zio\/RIO$.html#filterNotPar[R,A](as:Set[A])(f:A=>zio.RIO[R,Boolean]):zio.RIO[R,Set[A]]", "kind" : "def"}, {"label" : "filterNotPar", "tail" : "(as: Collection[A])(f: (A) => RIO[R, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): RIO[R, Collection[A]]", "member" : "zio.RIO.filterNotPar", "link" : "zio\/RIO$.html#filterNotPar[R,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.RIO[R,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.RIO[R,Collection[A]]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Set[A])(f: (A) => RIO[R, Boolean]): RIO[R, Set[A]]", "member" : "zio.RIO.filterNot", "link" : "zio\/RIO$.html#filterNot[R,A](as:Set[A])(f:A=>zio.RIO[R,Boolean]):zio.RIO[R,Set[A]]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Collection[A])(f: (A) => RIO[R, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): RIO[R, Collection[A]]", "member" : "zio.RIO.filterNot", "link" : "zio\/RIO$.html#filterNot[R,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.RIO[R,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.RIO[R,Collection[A]]", "kind" : "def"}, {"label" : "filterPar", "tail" : "(as: Set[A])(f: (A) => RIO[R, Boolean]): RIO[R, Set[A]]", "member" : "zio.RIO.filterPar", "link" : "zio\/RIO$.html#filterPar[R,A](as:Set[A])(f:A=>zio.RIO[R,Boolean]):zio.RIO[R,Set[A]]", "kind" : "def"}, {"label" : "filterPar", "tail" : "(as: Collection[A])(f: (A) => RIO[R, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): RIO[R, Collection[A]]", "member" : "zio.RIO.filterPar", "link" : "zio\/RIO$.html#filterPar[R,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.RIO[R,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.RIO[R,Collection[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Set[A])(f: (A) => RIO[R, Boolean]): RIO[R, Set[A]]", "member" : "zio.RIO.filter", "link" : "zio\/RIO$.html#filter[R,A](as:Set[A])(f:A=>zio.RIO[R,Boolean]):zio.RIO[R,Set[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Collection[A])(f: (A) => RIO[R, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): RIO[R, Collection[A]]", "member" : "zio.RIO.filter", "link" : "zio\/RIO$.html#filter[R,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.RIO[R,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.RIO[R,Collection[A]]", "kind" : "def"}, {"label" : "fiberId", "tail" : ": UIO[FiberId]", "member" : "zio.RIO.fiberId", "link" : "zio\/RIO$.html#fiberId:zio.UIO[zio.FiberId]", "kind" : "val"}, {"label" : "failCauseWith", "tail" : "(function: (() => ZTrace) => Cause[Throwable]): RIO[R, Nothing]", "member" : "zio.RIO.failCauseWith", "link" : "zio\/RIO$.html#failCauseWith[R](function:(()=>zio.ZTrace)=>zio.Cause[Throwable]):zio.RIO[R,Nothing]", "kind" : "def"}, {"label" : "failCause", "tail" : "(cause: => Cause[Throwable]): Task[Nothing]", "member" : "zio.RIO.failCause", "link" : "zio\/RIO$.html#failCause(cause:=>zio.Cause[Throwable]):zio.Task[Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(error: => Throwable): Task[Nothing]", "member" : "zio.RIO.fail", "link" : "zio\/RIO$.html#fail(error:=>Throwable):zio.Task[Nothing]", "kind" : "def"}, {"label" : "exists", "tail" : "(as: => Iterable[A])(f: (A) => RIO[R, Boolean]): RIO[R, Boolean]", "member" : "zio.RIO.exists", "link" : "zio\/RIO$.html#exists[R,A](as:=>Iterable[A])(f:A=>zio.RIO[R,Boolean]):zio.RIO[R,Boolean]", "kind" : "def"}, {"label" : "executor", "tail" : "(): UIO[Executor]", "member" : "zio.RIO.executor", "link" : "zio\/RIO$.html#executor:zio.UIO[zio.Executor]", "kind" : "def"}, {"label" : "environment", "tail" : "(): URIO[R, R]", "member" : "zio.RIO.environment", "link" : "zio\/RIO$.html#environment[R]:zio.URIO[R,R]", "kind" : "def"}, {"label" : "effectTotal", "tail" : "(effect: => A): UIO[A]", "member" : "zio.RIO.effectTotal", "link" : "zio\/RIO$.html#effectTotal[A](effect:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "effectSuspendWith", "tail" : "(f: (Platform, Id) => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.effectSuspendWith", "link" : "zio\/RIO$.html#effectSuspendWith[R,A](f:(zio.internal.Platform,zio.Fiber.Id)=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "effectSuspendTotalWith", "tail" : "(f: (Platform, Id) => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.effectSuspendTotalWith", "link" : "zio\/RIO$.html#effectSuspendTotalWith[R,A](f:(zio.internal.Platform,zio.Fiber.Id)=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "effectSuspendTotal", "tail" : "(rio: => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.effectSuspendTotal", "link" : "zio\/RIO$.html#effectSuspendTotal[R,A](rio:=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "effectSuspend", "tail" : "(rio: => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.effectSuspend", "link" : "zio\/RIO$.html#effectSuspend[R,A](rio:=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "effectBlockingInterrupt", "tail" : "(effect: => A): Task[A]", "member" : "zio.RIO.effectBlockingInterrupt", "link" : "zio\/RIO$.html#effectBlockingInterrupt[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "effectBlockingCancelable", "tail" : "(effect: => A)(cancel: => UIO[Any]): Task[A]", "member" : "zio.RIO.effectBlockingCancelable", "link" : "zio\/RIO$.html#effectBlockingCancelable[A](effect:=>A)(cancel:=>zio.UIO[Any]):zio.Task[A]", "kind" : "def"}, {"label" : "effectBlocking", "tail" : "(effect: => A): Task[A]", "member" : "zio.RIO.effectBlocking", "link" : "zio\/RIO$.html#effectBlocking[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "effectAsyncInterrupt", "tail" : "(register: ((RIO[R, A]) => Unit) => Either[Canceler[R], RIO[R, A]], blockingOn: => FiberId): RIO[R, A]", "member" : "zio.RIO.effectAsyncInterrupt", "link" : "zio\/RIO$.html#effectAsyncInterrupt[R,A](register:(zio.RIO[R,A]=>Unit)=>Either[zio.Canceler[R],zio.RIO[R,A]],blockingOn:=>zio.FiberId):zio.RIO[R,A]", "kind" : "def"}, {"label" : "effectAsyncM", "tail" : "(register: ((RIO[R, A]) => Unit) => RIO[R, Any]): RIO[R, A]", "member" : "zio.RIO.effectAsyncM", "link" : "zio\/RIO$.html#effectAsyncM[R,A](register:(zio.RIO[R,A]=>Unit)=>zio.RIO[R,Any]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "effectAsyncMaybe", "tail" : "(register: ((RIO[R, A]) => Unit) => Option[RIO[R, A]], blockingOn: => FiberId): RIO[R, A]", "member" : "zio.RIO.effectAsyncMaybe", "link" : "zio\/RIO$.html#effectAsyncMaybe[R,A](register:(zio.RIO[R,A]=>Unit)=>Option[zio.RIO[R,A]],blockingOn:=>zio.FiberId):zio.RIO[R,A]", "kind" : "def"}, {"label" : "effectAsync", "tail" : "(register: ((RIO[R, A]) => Unit) => Any, blockingOn: => FiberId): RIO[R, A]", "member" : "zio.RIO.effectAsync", "link" : "zio\/RIO$.html#effectAsync[R,A](register:(zio.RIO[R,A]=>Unit)=>Any,blockingOn:=>zio.FiberId):zio.RIO[R,A]", "kind" : "def"}, {"label" : "effect", "tail" : "(effect: => A): Task[A]", "member" : "zio.RIO.effect", "link" : "zio\/RIO$.html#effect[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "done", "tail" : "(r: => Exit[Throwable, A]): Task[A]", "member" : "zio.RIO.done", "link" : "zio\/RIO$.html#done[A](r:=>zio.Exit[Throwable,A]):zio.Task[A]", "kind" : "def"}, {"label" : "dieMessage", "tail" : "(message: => String): UIO[Nothing]", "member" : "zio.RIO.dieMessage", "link" : "zio\/RIO$.html#dieMessage(message:=>String):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(t: => Throwable): UIO[Nothing]", "member" : "zio.RIO.die", "link" : "zio\/RIO$.html#die(t:=>Throwable):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "descriptorWith", "tail" : "(f: (Descriptor) => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.descriptorWith", "link" : "zio\/RIO$.html#descriptorWith[R,A](f:zio.Fiber.Descriptor=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "descriptor", "tail" : "(): UIO[Descriptor]", "member" : "zio.RIO.descriptor", "link" : "zio\/RIO$.html#descriptor:zio.UIO[zio.Fiber.Descriptor]", "kind" : "def"}, {"label" : "debug", "tail" : "(value: => Any): UIO[Unit]", "member" : "zio.RIO.debug", "link" : "zio\/RIO$.html#debug(value:=>Any):zio.UIO[Unit]", "kind" : "def"}, {"label" : "cond", "tail" : "(predicate: => Boolean, result: => A, error: => Throwable): Task[A]", "member" : "zio.RIO.cond", "link" : "zio\/RIO$.html#cond[A](predicate:=>Boolean,result:=>A,error:=>Throwable):zio.Task[A]", "kind" : "def"}, {"label" : "collectParN", "tail" : "(n: => Int)(in: Collection[A])(f: (A) => ZIO[R, Option[Throwable], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): RIO[R, Collection[B]]", "member" : "zio.RIO.collectParN", "link" : "zio\/RIO$.html#collectParN[R,A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(in:Collection[A])(f:A=>zio.ZIO[R,Option[Throwable],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.RIO[R,Collection[B]]", "kind" : "def"}, {"label" : "collectPar", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => ZIO[R, Option[Throwable], (Key2, Value2)]): RIO[R, Map[Key2, Value2]]", "member" : "zio.RIO.collectPar", "link" : "zio\/RIO$.html#collectPar[R,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.ZIO[R,Option[Throwable],(Key2,Value2)]):zio.RIO[R,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "collectPar", "tail" : "(in: Collection[A])(f: (A) => ZIO[R, Option[Throwable], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): RIO[R, Collection[B]]", "member" : "zio.RIO.collectPar", "link" : "zio\/RIO$.html#collectPar[R,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.ZIO[R,Option[Throwable],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.RIO[R,Collection[B]]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(as: => Iterable[A])(f: (A) => RIO[R, Option[B]]): RIO[R, Option[B]]", "member" : "zio.RIO.collectFirst", "link" : "zio\/RIO$.html#collectFirst[R,A,B](as:=>Iterable[A])(f:A=>zio.RIO[R,Option[B]]):zio.RIO[R,Option[B]]", "kind" : "def"}, {"label" : "collectAllWithParN", "tail" : "(n: => Int)(as: Collection[RIO[R, A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[RIO[R, A]], B, Collection[B]]): RIO[R, Collection[B]]", "member" : "zio.RIO.collectAllWithParN", "link" : "zio\/RIO$.html#collectAllWithParN[R,A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.RIO[R,A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.RIO[R,A]],B,Collection[B]]):zio.RIO[R,Collection[B]]", "kind" : "def"}, {"label" : "collectAllWithPar", "tail" : "(as: Collection[RIO[R, A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[RIO[R, A]], B, Collection[B]]): RIO[R, Collection[B]]", "member" : "zio.RIO.collectAllWithPar", "link" : "zio\/RIO$.html#collectAllWithPar[R,A,B,Collection[+Element]<:Iterable[Element]](as:Collection[zio.RIO[R,A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.RIO[R,A]],B,Collection[B]]):zio.RIO[R,Collection[B]]", "kind" : "def"}, {"label" : "collectAllWith", "tail" : "(in: Collection[RIO[R, A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[RIO[R, A]], B, Collection[B]]): RIO[R, Collection[B]]", "member" : "zio.RIO.collectAllWith", "link" : "zio\/RIO$.html#collectAllWith[R,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[zio.RIO[R,A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.RIO[R,A]],B,Collection[B]]):zio.RIO[R,Collection[B]]", "kind" : "def"}, {"label" : "collectAllSuccessesParN", "tail" : "(n: => Int)(as: Collection[RIO[R, A]])(bf: zio.BuildFrom[Collection[RIO[R, A]], A, Collection[A]]): URIO[R, Collection[A]]", "member" : "zio.RIO.collectAllSuccessesParN", "link" : "zio\/RIO$.html#collectAllSuccessesParN[R,A,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.RIO[R,A]])(implicitbf:zio.BuildFrom[Collection[zio.RIO[R,A]],A,Collection[A]]):zio.URIO[R,Collection[A]]", "kind" : "def"}, {"label" : "collectAllSuccessesPar", "tail" : "(as: Collection[RIO[R, A]])(bf: zio.BuildFrom[Collection[RIO[R, A]], A, Collection[A]]): URIO[R, Collection[A]]", "member" : "zio.RIO.collectAllSuccessesPar", "link" : "zio\/RIO$.html#collectAllSuccessesPar[R,A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.RIO[R,A]])(implicitbf:zio.BuildFrom[Collection[zio.RIO[R,A]],A,Collection[A]]):zio.URIO[R,Collection[A]]", "kind" : "def"}, {"label" : "collectAllSuccesses", "tail" : "(in: Collection[RIO[R, A]])(bf: zio.BuildFrom[Collection[RIO[R, A]], A, Collection[A]]): RIO[R, Collection[A]]", "member" : "zio.RIO.collectAllSuccesses", "link" : "zio\/RIO$.html#collectAllSuccesses[R,A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.RIO[R,A]])(implicitbf:zio.BuildFrom[Collection[zio.RIO[R,A]],A,Collection[A]]):zio.RIO[R,Collection[A]]", "kind" : "def"}, {"label" : "collectAllParNDiscard", "tail" : "(n: => Int)(as: => Iterable[RIO[R, A]]): RIO[R, Unit]", "member" : "zio.RIO.collectAllParNDiscard", "link" : "zio\/RIO$.html#collectAllParNDiscard[R,A](n:=>Int)(as:=>Iterable[zio.RIO[R,A]]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "collectAllParN_", "tail" : "(n: => Int)(as: => Iterable[RIO[R, A]]): RIO[R, Unit]", "member" : "zio.RIO.collectAllParN_", "link" : "zio\/RIO$.html#collectAllParN_[R,A](n:=>Int)(as:=>Iterable[zio.RIO[R,A]]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "collectAllParN", "tail" : "(n: => Int)(as: Collection[RIO[R, A]])(bf: zio.BuildFrom[Collection[RIO[R, A]], A, Collection[A]]): RIO[R, Collection[A]]", "member" : "zio.RIO.collectAllParN", "link" : "zio\/RIO$.html#collectAllParN[R,A,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.RIO[R,A]])(implicitbf:zio.BuildFrom[Collection[zio.RIO[R,A]],A,Collection[A]]):zio.RIO[R,Collection[A]]", "kind" : "def"}, {"label" : "collectAllParDiscard", "tail" : "(in: => Iterable[RIO[R, A]]): RIO[R, Unit]", "member" : "zio.RIO.collectAllParDiscard", "link" : "zio\/RIO$.html#collectAllParDiscard[R,A](in:=>Iterable[zio.RIO[R,A]]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "collectAllPar_", "tail" : "(in: => Iterable[RIO[R, A]]): RIO[R, Unit]", "member" : "zio.RIO.collectAllPar_", "link" : "zio\/RIO$.html#collectAllPar_[R,A](in:=>Iterable[zio.RIO[R,A]]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: NonEmptyChunk[RIO[R, A]]): RIO[R, NonEmptyChunk[A]]", "member" : "zio.RIO.collectAllPar", "link" : "zio\/RIO$.html#collectAllPar[R,A](as:zio.NonEmptyChunk[zio.RIO[R,A]]):zio.RIO[R,zio.NonEmptyChunk[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Array[RIO[R, A]])(arg0: ClassTag[A]): RIO[R, Array[A]]", "member" : "zio.RIO.collectAllPar", "link" : "zio\/RIO$.html#collectAllPar[R,A](as:Array[zio.RIO[R,A]])(implicitevidence$2:scala.reflect.ClassTag[A]):zio.RIO[R,Array[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Set[RIO[R, A]]): RIO[R, Set[A]]", "member" : "zio.RIO.collectAllPar", "link" : "zio\/RIO$.html#collectAllPar[R,A](as:Set[zio.RIO[R,A]]):zio.RIO[R,Set[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Collection[RIO[R, A]])(bf: zio.BuildFrom[Collection[RIO[R, A]], A, Collection[A]]): RIO[R, Collection[A]]", "member" : "zio.RIO.collectAllPar", "link" : "zio\/RIO$.html#collectAllPar[R,A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.RIO[R,A]])(implicitbf:zio.BuildFrom[Collection[zio.RIO[R,A]],A,Collection[A]]):zio.RIO[R,Collection[A]]", "kind" : "def"}, {"label" : "collectAllDiscard", "tail" : "(in: => Iterable[RIO[R, A]]): RIO[R, Unit]", "member" : "zio.RIO.collectAllDiscard", "link" : "zio\/RIO$.html#collectAllDiscard[R,A](in:=>Iterable[zio.RIO[R,A]]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "collectAll_", "tail" : "(in: => Iterable[RIO[R, A]]): RIO[R, Unit]", "member" : "zio.RIO.collectAll_", "link" : "zio\/RIO$.html#collectAll_[R,A](in:=>Iterable[zio.RIO[R,A]]):zio.RIO[R,Unit]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: NonEmptyChunk[RIO[R, A]]): RIO[R, NonEmptyChunk[A]]", "member" : "zio.RIO.collectAll", "link" : "zio\/RIO$.html#collectAll[R,A](in:zio.NonEmptyChunk[zio.RIO[R,A]]):zio.RIO[R,zio.NonEmptyChunk[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Option[RIO[R, A]]): RIO[R, Option[A]]", "member" : "zio.RIO.collectAll", "link" : "zio\/RIO$.html#collectAll[R,A](in:Option[zio.RIO[R,A]]):zio.RIO[R,Option[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Array[RIO[R, A]])(arg0: ClassTag[A]): RIO[R, Array[A]]", "member" : "zio.RIO.collectAll", "link" : "zio\/RIO$.html#collectAll[R,A](in:Array[zio.RIO[R,A]])(implicitevidence$1:scala.reflect.ClassTag[A]):zio.RIO[R,Array[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Set[RIO[R, A]]): RIO[R, Set[A]]", "member" : "zio.RIO.collectAll", "link" : "zio\/RIO$.html#collectAll[R,A](in:Set[zio.RIO[R,A]]):zio.RIO[R,Set[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Collection[RIO[R, A]])(bf: zio.BuildFrom[Collection[RIO[R, A]], A, Collection[A]]): RIO[R, Collection[A]]", "member" : "zio.RIO.collectAll", "link" : "zio\/RIO$.html#collectAll[R,A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.RIO[R,A]])(implicitbf:zio.BuildFrom[Collection[zio.RIO[R,A]],A,Collection[A]]):zio.RIO[R,Collection[A]]", "kind" : "def"}, {"label" : "collect", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => ZIO[R, Option[Throwable], (Key2, Value2)]): RIO[R, Map[Key2, Value2]]", "member" : "zio.RIO.collect", "link" : "zio\/RIO$.html#collect[R,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.ZIO[R,Option[Throwable],(Key2,Value2)]):zio.RIO[R,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "collect", "tail" : "(in: Collection[A])(f: (A) => ZIO[R, Option[Throwable], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): RIO[R, Collection[B]]", "member" : "zio.RIO.collect", "link" : "zio\/RIO$.html#collect[R,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.ZIO[R,Option[Throwable],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.RIO[R,Collection[B]]", "kind" : "def"}, {"label" : "checkTraced", "tail" : "(f: (TracingStatus) => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.checkTraced", "link" : "zio\/RIO$.html#checkTraced[R,A](f:zio.TracingStatus=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "checkInterruptible", "tail" : "(f: (InterruptStatus) => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.checkInterruptible", "link" : "zio\/RIO$.html#checkInterruptible[R,A](f:zio.InterruptStatus=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "bracketExit", "tail" : "(acquire: => RIO[R, A], release: (A, Exit[Throwable, B]) => URIO[R, Any], use: (A) => RIO[R, B]): RIO[R, B]", "member" : "zio.RIO.bracketExit", "link" : "zio\/RIO$.html#bracketExit[R,A,B](acquire:=>zio.RIO[R,A],release:(A,zio.Exit[Throwable,B])=>zio.URIO[R,Any],use:A=>zio.RIO[R,B]):zio.RIO[R,B]", "kind" : "def"}, {"label" : "bracketExit", "tail" : "(acquire: => RIO[R, A]): BracketExitAcquire[R, Throwable, A]", "member" : "zio.RIO.bracketExit", "link" : "zio\/RIO$.html#bracketExit[R,A](acquire:=>zio.RIO[R,A]):zio.ZIO.BracketExitAcquire[R,Throwable,A]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: => RIO[R, A], release: (A) => URIO[R, Any], use: (A) => RIO[R, B]): RIO[R, B]", "member" : "zio.RIO.bracket", "link" : "zio\/RIO$.html#bracket[R,A,B](acquire:=>zio.RIO[R,A],release:A=>zio.URIO[R,Any],use:A=>zio.RIO[R,B]):zio.RIO[R,B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: => RIO[R, A]): BracketAcquire[R, Throwable, A]", "member" : "zio.RIO.bracket", "link" : "zio\/RIO$.html#bracket[R,A](acquire:=>zio.RIO[R,A]):zio.ZIO.BracketAcquire[R,Throwable,A]", "kind" : "def"}, {"label" : "blockingExecutor", "tail" : "(): UIO[Executor]", "member" : "zio.RIO.blockingExecutor", "link" : "zio\/RIO$.html#blockingExecutor:zio.UIO[zio.Executor]", "kind" : "def"}, {"label" : "blocking", "tail" : "(zio: => RIO[R, A]): RIO[R, A]", "member" : "zio.RIO.blocking", "link" : "zio\/RIO$.html#blocking[R,A](zio:=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "attemptBlockingInterrupt", "tail" : "(effect: => A): Task[A]", "member" : "zio.RIO.attemptBlockingInterrupt", "link" : "zio\/RIO$.html#attemptBlockingInterrupt[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "attemptBlockingCancelable", "tail" : "(effect: => A)(cancel: => UIO[Any]): Task[A]", "member" : "zio.RIO.attemptBlockingCancelable", "link" : "zio\/RIO$.html#attemptBlockingCancelable[A](effect:=>A)(cancel:=>zio.UIO[Any]):zio.Task[A]", "kind" : "def"}, {"label" : "attemptBlocking", "tail" : "(effect: => A): Task[A]", "member" : "zio.RIO.attemptBlocking", "link" : "zio\/RIO$.html#attemptBlocking[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(effect: => A): Task[A]", "member" : "zio.RIO.attempt", "link" : "zio\/RIO$.html#attempt[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "asyncInterrupt", "tail" : "(register: ((RIO[R, A]) => Unit) => Either[Canceler[R], RIO[R, A]], blockingOn: => FiberId): RIO[R, A]", "member" : "zio.RIO.asyncInterrupt", "link" : "zio\/RIO$.html#asyncInterrupt[R,A](register:(zio.RIO[R,A]=>Unit)=>Either[zio.Canceler[R],zio.RIO[R,A]],blockingOn:=>zio.FiberId):zio.RIO[R,A]", "kind" : "def"}, {"label" : "asyncZIO", "tail" : "(register: ((RIO[R, A]) => Unit) => RIO[R, Any]): RIO[R, A]", "member" : "zio.RIO.asyncZIO", "link" : "zio\/RIO$.html#asyncZIO[R,A](register:(zio.RIO[R,A]=>Unit)=>zio.RIO[R,Any]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "asyncMaybe", "tail" : "(register: ((RIO[R, A]) => Unit) => Option[RIO[R, A]], blockingOn: => FiberId): RIO[R, A]", "member" : "zio.RIO.asyncMaybe", "link" : "zio\/RIO$.html#asyncMaybe[R,A](register:(zio.RIO[R,A]=>Unit)=>Option[zio.RIO[R,A]],blockingOn:=>zio.FiberId):zio.RIO[R,A]", "kind" : "def"}, {"label" : "async", "tail" : "(register: ((RIO[R, A]) => Unit) => Any, blockingOn: => FiberId): RIO[R, A]", "member" : "zio.RIO.async", "link" : "zio\/RIO$.html#async[R,A](register:(zio.RIO[R,A]=>Unit)=>Any,blockingOn:=>zio.FiberId):zio.RIO[R,A]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: => RIO[R, A], release: (A, Exit[Throwable, B]) => URIO[R, Any], use: (A) => RIO[R, B]): RIO[R, B]", "member" : "zio.RIO.acquireReleaseExitWith", "link" : "zio\/RIO$.html#acquireReleaseExitWith[R,A,B](acquire:=>zio.RIO[R,A],release:(A,zio.Exit[Throwable,B])=>zio.URIO[R,Any],use:A=>zio.RIO[R,B]):zio.RIO[R,B]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: => RIO[R, A]): BracketExitAcquire[R, Throwable, A]", "member" : "zio.RIO.acquireReleaseExitWith", "link" : "zio\/RIO$.html#acquireReleaseExitWith[R,A](acquire:=>zio.RIO[R,A]):zio.ZIO.BracketExitAcquire[R,Throwable,A]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: => RIO[R, A], release: (A) => URIO[R, Any], use: (A) => RIO[R, B]): RIO[R, B]", "member" : "zio.RIO.acquireReleaseWith", "link" : "zio\/RIO$.html#acquireReleaseWith[R,A,B](acquire:=>zio.RIO[R,A],release:A=>zio.URIO[R,Any],use:A=>zio.RIO[R,B]):zio.RIO[R,B]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: => RIO[R, A]): BracketAcquire[R, Throwable, A]", "member" : "zio.RIO.acquireReleaseWith", "link" : "zio\/RIO$.html#acquireReleaseWith[R,A](acquire:=>zio.RIO[R,A]):zio.ZIO.BracketAcquire[R,Throwable,A]", "kind" : "def"}, {"label" : "accessZIO", "tail" : "(): AccessZIOPartiallyApplied[R]", "member" : "zio.RIO.accessZIO", "link" : "zio\/RIO$.html#accessZIO[R]:zio.ZIO.AccessZIOPartiallyApplied[R]", "kind" : "def"}, {"label" : "access", "tail" : "(): AccessPartiallyApplied[R]", "member" : "zio.RIO.access", "link" : "zio\/RIO$.html#access[R]:zio.ZIO.AccessPartiallyApplied[R]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: => A): Task[A]", "member" : "zio.RIO.apply", "link" : "zio\/RIO$.html#apply[A](a:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "allowInterrupt", "tail" : "(): UIO[Unit]", "member" : "zio.RIO.allowInterrupt", "link" : "zio\/RIO$.html#allowInterrupt:zio.UIO[Unit]", "kind" : "def"}, {"label" : "absolve", "tail" : "(v: => RIO[R, Either[Throwable, A]]): RIO[R, A]", "member" : "zio.RIO.absolve", "link" : "zio\/RIO$.html#absolve[R,A](v:=>zio.RIO[R,Either[Throwable,A]]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/RIO$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/RIO$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/RIO$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/RIO$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/RIO$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/RIO$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/RIO$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RIO$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RIO$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RIO$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/RIO$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/RIO$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/RIO$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/RIO$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/RIO$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/RIO$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/RIO$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/RIO$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/RIO$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.Runtime", "object" : "zio\/Runtime$.html", "members_object" : [{"label" : "unsafeFromLayer", "tail" : "(layer: Layer[Any, R], runtimeConfig: RuntimeConfig): Managed[R]", "member" : "zio.Runtime.unsafeFromLayer", "link" : "zio\/Runtime$.html#unsafeFromLayer[R](layer:zio.Layer[Any,R],runtimeConfig:zio.RuntimeConfig):zio.Runtime.Managed[R]", "kind" : "def"}, {"label" : "global", "tail" : ": Runtime[zio.ZEnv]", "member" : "zio.Runtime.global", "link" : "zio\/Runtime$.html#global:zio.Runtime[zio.ZEnv]", "kind" : "lazy val"}, {"label" : "default", "tail" : ": Runtime[zio.ZEnv]", "member" : "zio.Runtime.default", "link" : "zio\/Runtime$.html#default:zio.Runtime[zio.ZEnv]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(r: R, runtimeConfig0: RuntimeConfig): Runtime[R]", "member" : "zio.Runtime.apply", "link" : "zio\/Runtime$.html#apply[R](r:R,runtimeConfig0:zio.RuntimeConfig):zio.Runtime[R]", "kind" : "def"}, {"label" : "Managed", "tail" : "", "member" : "zio.Runtime.Managed", "link" : "zio\/Runtime$.html#Managed", "kind" : "object"}, {"label" : "Managed", "tail" : "", "member" : "zio.Runtime.Managed", "link" : "zio\/Runtime$.html#Managed[+R]extendsRuntime[R]", "kind" : "abstract class"}, {"label" : "Proxy", "tail" : "", "member" : "zio.Runtime.Proxy", "link" : "zio\/Runtime$.html#Proxy[+R]extendsRuntime[R]", "kind" : "class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Runtime$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Runtime$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Runtime$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Runtime$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Runtime$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Runtime$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Runtime$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Runtime$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Runtime$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Runtime$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Runtime$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Runtime$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Runtime$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Runtime$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Runtime$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Runtime$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Runtime$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Runtime$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Runtime$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/Runtime.html", "kind" : "trait", "members_trait" : [{"label" : "withTracing", "tail" : "(t: Tracing): Runtime[R]", "member" : "zio.Runtime.withTracing", "link" : "zio\/Runtime.html#withTracing(t:zio.internal.Tracing):zio.Runtime[R]", "kind" : "def"}, {"label" : "withReportFatal", "tail" : "(f: (Throwable) => Nothing): Runtime[R]", "member" : "zio.Runtime.withReportFatal", "link" : "zio\/Runtime.html#withReportFatal(f:Throwable=>Nothing):zio.Runtime[R]", "kind" : "def"}, {"label" : "withFatal", "tail" : "(f: (Throwable) => Boolean): Runtime[R]", "member" : "zio.Runtime.withFatal", "link" : "zio\/Runtime.html#withFatal(f:Throwable=>Boolean):zio.Runtime[R]", "kind" : "def"}, {"label" : "withExecutor", "tail" : "(e: Executor): Runtime[R]", "member" : "zio.Runtime.withExecutor", "link" : "zio\/Runtime.html#withExecutor(e:zio.Executor):zio.Runtime[R]", "kind" : "def"}, {"label" : "withBlockingExecutor", "tail" : "(e: Executor): Runtime[R]", "member" : "zio.Runtime.withBlockingExecutor", "link" : "zio\/Runtime.html#withBlockingExecutor(e:zio.Executor):zio.Runtime[R]", "kind" : "def"}, {"label" : "unsafeRunToFuture", "tail" : "(zio: ZIO[R, E, A]): CancelableFuture[A]", "member" : "zio.Runtime.unsafeRunToFuture", "link" : "zio\/Runtime.html#unsafeRunToFuture[E<:Throwable,A](zio:zio.ZIO[R,E,A]):zio.CancelableFuture[A]", "kind" : "final def"}, {"label" : "unsafeRunTask", "tail" : "(task: => RIO[R, A]): A", "member" : "zio.Runtime.unsafeRunTask", "link" : "zio\/Runtime.html#unsafeRunTask[A](task:=>zio.RIO[R,A]):A", "kind" : "final def"}, {"label" : "unsafeRunAsyncCancelable", "tail" : "(zio: => ZIO[R, E, A])(k: (Exit[E, A]) => Any): (FiberId) => Exit[E, A]", "member" : "zio.Runtime.unsafeRunAsyncCancelable", "link" : "zio\/Runtime.html#unsafeRunAsyncCancelable[E,A](zio:=>zio.ZIO[R,E,A])(k:zio.Exit[E,A]=>Any):zio.FiberId=>zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunAsyncWith", "tail" : "(zio: => ZIO[R, E, A])(k: (Exit[E, A]) => Any): Unit", "member" : "zio.Runtime.unsafeRunAsyncWith", "link" : "zio\/Runtime.html#unsafeRunAsyncWith[E,A](zio:=>zio.ZIO[R,E,A])(k:zio.Exit[E,A]=>Any):Unit", "kind" : "final def"}, {"label" : "tryFastUnsafeRunSync", "tail" : "(zio: ZIO[R, E, A], stack: Int): Exit[E, A]", "member" : "zio.Runtime.tryFastUnsafeRunSync", "link" : "zio\/Runtime.html#tryFastUnsafeRunSync[E,A](zio:zio.ZIO[R,E,A],stack:Int):zio.Exit[E,A]", "kind" : "def"}, {"label" : "defaultUnsafeRunSync", "tail" : "(zio: => ZIO[R, E, A]): Exit[E, A]", "member" : "zio.Runtime.defaultUnsafeRunSync", "link" : "zio\/Runtime.html#defaultUnsafeRunSync[E,A](zio:=>zio.ZIO[R,E,A]):zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunSync", "tail" : "(zio0: => ZIO[R, E, A]): Exit[E, A]", "member" : "zio.Runtime.unsafeRunSync", "link" : "zio\/Runtime.html#unsafeRunSync[E,A](zio0:=>zio.ZIO[R,E,A]):zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunAsync", "tail" : "(zio: ZIO[R, E, A]): Unit", "member" : "zio.Runtime.unsafeRunAsync", "link" : "zio\/Runtime.html#unsafeRunAsync[E,A](zio:zio.ZIO[R,E,A]):Unit", "kind" : "final def"}, {"label" : "unsafeRun", "tail" : "(zio: => ZIO[R, E, A]): A", "member" : "zio.Runtime.unsafeRun", "link" : "zio\/Runtime.html#unsafeRun[E,A](zio:=>zio.ZIO[R,E,A]):A", "kind" : "final def"}, {"label" : "run", "tail" : "(zio: ZIO[R, E, A]): IO[E, A]", "member" : "zio.Runtime.run", "link" : "zio\/Runtime.html#run[E,A](zio:zio.ZIO[R,E,A]):zio.IO[E,A]", "kind" : "final def"}, {"label" : "platform", "tail" : "(): Platform", "member" : "zio.Runtime.platform", "link" : "zio\/Runtime.html#platform:zio.internal.Platform", "kind" : "def"}, {"label" : "mapRuntimeConfig", "tail" : "(f: (RuntimeConfig) => RuntimeConfig): Runtime[R]", "member" : "zio.Runtime.mapRuntimeConfig", "link" : "zio\/Runtime.html#mapRuntimeConfig(f:zio.RuntimeConfig=>zio.RuntimeConfig):zio.Runtime[R]", "kind" : "def"}, {"label" : "mapPlatform", "tail" : "(f: (Platform) => Platform): Runtime[R]", "member" : "zio.Runtime.mapPlatform", "link" : "zio\/Runtime.html#mapPlatform(f:zio.internal.Platform=>zio.internal.Platform):zio.Runtime[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) => R1): Runtime[R1]", "member" : "zio.Runtime.map", "link" : "zio\/Runtime.html#map[R1](f:R=>R1):zio.Runtime[R1]", "kind" : "def"}, {"label" : "as", "tail" : "(r1: R1): Runtime[R1]", "member" : "zio.Runtime.as", "link" : "zio\/Runtime.html#as[R1](r1:R1):zio.Runtime[R1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Runtime.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Runtime.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Runtime.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Runtime.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Runtime.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Runtime.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Runtime.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Runtime.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Runtime.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Runtime.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Runtime.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Runtime.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Runtime.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Runtime.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Runtime.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Runtime.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Runtime.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Runtime.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Runtime.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "runtimeConfig", "tail" : "(): RuntimeConfig", "member" : "zio.Runtime.runtimeConfig", "link" : "zio\/Runtime.html#runtimeConfig:zio.RuntimeConfig", "kind" : "abstract def"}, {"label" : "environment", "tail" : "(): R", "member" : "zio.Runtime.environment", "link" : "zio\/Runtime.html#environment:R", "kind" : "abstract def"}], "shortDescription" : "A Runtime[R] is capable of executing tasks within an environment R."}, {"name" : "zio.RuntimeConfig", "shortDescription" : "A RuntimeConfig provides the minimum capabilities necessary to bootstrapexecution of ZIO tasks.", "object" : "zio\/RuntimeConfig$.html", "members_object" : [{"label" : "makeDefault", "tail" : "(yieldOpCount: Int): RuntimeConfig", "member" : "zio.RuntimeConfigPlatformSpecific.makeDefault", "link" : "zio\/RuntimeConfig$.html#makeDefault(yieldOpCount:Int):zio.RuntimeConfig", "kind" : "def"}, {"label" : "fromExecutionContext", "tail" : "(ec: ExecutionContext, yieldOpCount: Int): RuntimeConfig", "member" : "zio.RuntimeConfigPlatformSpecific.fromExecutionContext", "link" : "zio\/RuntimeConfig$.html#fromExecutionContext(ec:scala.concurrent.ExecutionContext,yieldOpCount:Int):zio.RuntimeConfig", "kind" : "final def"}, {"label" : "fromExecutor", "tail" : "(executor0: Executor): RuntimeConfig", "member" : "zio.RuntimeConfigPlatformSpecific.fromExecutor", "link" : "zio\/RuntimeConfig$.html#fromExecutor(executor0:zio.Executor):zio.RuntimeConfig", "kind" : "final def"}, {"label" : "global", "tail" : ": RuntimeConfig", "member" : "zio.RuntimeConfigPlatformSpecific.global", "link" : "zio\/RuntimeConfig$.html#global:zio.RuntimeConfig", "kind" : "lazy val"}, {"label" : "defaultYieldOpCount", "tail" : ": Int(2048)", "member" : "zio.RuntimeConfigPlatformSpecific.defaultYieldOpCount", "link" : "zio\/RuntimeConfig$.html#defaultYieldOpCount:Int(2048)", "kind" : "final val"}, {"label" : "default", "tail" : ": RuntimeConfig", "member" : "zio.RuntimeConfigPlatformSpecific.default", "link" : "zio\/RuntimeConfig$.html#default:zio.RuntimeConfig", "kind" : "lazy val"}, {"label" : "benchmark", "tail" : ": RuntimeConfig", "member" : "zio.RuntimeConfigPlatformSpecific.benchmark", "link" : "zio\/RuntimeConfig$.html#benchmark:zio.RuntimeConfig", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/RuntimeConfig$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/RuntimeConfig$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/RuntimeConfig$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/RuntimeConfig$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/RuntimeConfig$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/RuntimeConfig$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/RuntimeConfig$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RuntimeConfig$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RuntimeConfig$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RuntimeConfig$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/RuntimeConfig$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/RuntimeConfig$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/RuntimeConfig$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/RuntimeConfig$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/RuntimeConfig$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/RuntimeConfig$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/RuntimeConfig$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/RuntimeConfig$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/RuntimeConfig$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "withTracing", "tail" : "(t: Tracing): RuntimeConfig", "member" : "zio.RuntimeConfig.withTracing", "link" : "zio\/RuntimeConfig.html#withTracing(t:zio.internal.Tracing):zio.RuntimeConfig", "kind" : "def"}, {"label" : "withSupervisor", "tail" : "(s0: Supervisor[Any]): RuntimeConfig", "member" : "zio.RuntimeConfig.withSupervisor", "link" : "zio\/RuntimeConfig.html#withSupervisor(s0:zio.Supervisor[Any]):zio.RuntimeConfig", "kind" : "def"}, {"label" : "withReportFatal", "tail" : "(f: (Throwable) => Nothing): RuntimeConfig", "member" : "zio.RuntimeConfig.withReportFatal", "link" : "zio\/RuntimeConfig.html#withReportFatal(f:Throwable=>Nothing):zio.RuntimeConfig", "kind" : "def"}, {"label" : "withFatal", "tail" : "(f: (Throwable) => Boolean): RuntimeConfig", "member" : "zio.RuntimeConfig.withFatal", "link" : "zio\/RuntimeConfig.html#withFatal(f:Throwable=>Boolean):zio.RuntimeConfig", "kind" : "def"}, {"label" : "withExecutor", "tail" : "(e: Executor): RuntimeConfig", "member" : "zio.RuntimeConfig.withExecutor", "link" : "zio\/RuntimeConfig.html#withExecutor(e:zio.Executor):zio.RuntimeConfig", "kind" : "def"}, {"label" : "withBlockingExecutor", "tail" : "(e: Executor): RuntimeConfig", "member" : "zio.RuntimeConfig.withBlockingExecutor", "link" : "zio\/RuntimeConfig.html#withBlockingExecutor(e:zio.Executor):zio.RuntimeConfig", "kind" : "def"}, {"label" : "@@", "tail" : "(aspect: RuntimeConfigAspect): RuntimeConfig", "member" : "zio.RuntimeConfig.@@", "link" : "zio\/RuntimeConfig.html#@@(aspect:zio.RuntimeConfigAspect):zio.RuntimeConfig", "kind" : "def"}, {"member" : "zio.RuntimeConfig#<init>", "error" : "unsupported entity"}, {"label" : "logger", "tail" : ": ZLogger[Any]", "member" : "zio.RuntimeConfig.logger", "link" : "zio\/RuntimeConfig.html#logger:zio.ZLogger[Any]", "kind" : "val"}, {"label" : "enableCurrentFiber", "tail" : ": Boolean", "member" : "zio.RuntimeConfig.enableCurrentFiber", "link" : "zio\/RuntimeConfig.html#enableCurrentFiber:Boolean", "kind" : "val"}, {"label" : "supervisor", "tail" : ": Supervisor[Any]", "member" : "zio.RuntimeConfig.supervisor", "link" : "zio\/RuntimeConfig.html#supervisor:zio.Supervisor[Any]", "kind" : "val"}, {"label" : "reportFatal", "tail" : ": (Throwable) => Nothing", "member" : "zio.RuntimeConfig.reportFatal", "link" : "zio\/RuntimeConfig.html#reportFatal:Throwable=>Nothing", "kind" : "val"}, {"label" : "fatal", "tail" : ": (Throwable) => Boolean", "member" : "zio.RuntimeConfig.fatal", "link" : "zio\/RuntimeConfig.html#fatal:Throwable=>Boolean", "kind" : "val"}, {"label" : "tracing", "tail" : ": Tracing", "member" : "zio.RuntimeConfig.tracing", "link" : "zio\/RuntimeConfig.html#tracing:zio.internal.Tracing", "kind" : "val"}, {"label" : "executor", "tail" : ": Executor", "member" : "zio.RuntimeConfig.executor", "link" : "zio\/RuntimeConfig.html#executor:zio.Executor", "kind" : "val"}, {"label" : "blockingExecutor", "tail" : ": Executor", "member" : "zio.RuntimeConfig.blockingExecutor", "link" : "zio\/RuntimeConfig.html#blockingExecutor:zio.Executor", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/RuntimeConfig.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/RuntimeConfig.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/RuntimeConfig.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/RuntimeConfig.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/RuntimeConfig.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/RuntimeConfig.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/RuntimeConfig.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/RuntimeConfig.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RuntimeConfig.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RuntimeConfig.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RuntimeConfig.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/RuntimeConfig.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/RuntimeConfig.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/RuntimeConfig.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/RuntimeConfig.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/RuntimeConfig.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/RuntimeConfig.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/RuntimeConfig.html", "kind" : "case class"}, {"name" : "zio.RuntimeConfigAspect", "shortDescription" : "", "object" : "zio\/RuntimeConfigAspect$.html", "members_object" : [{"label" : "setTracing", "tail" : "(tracing: Tracing): RuntimeConfigAspect", "member" : "zio.RuntimeConfigAspect.setTracing", "link" : "zio\/RuntimeConfigAspect$.html#setTracing(tracing:zio.internal.Tracing):zio.RuntimeConfigAspect", "kind" : "def"}, {"label" : "setExecutor", "tail" : "(executor: Executor): RuntimeConfigAspect", "member" : "zio.RuntimeConfigAspect.setExecutor", "link" : "zio\/RuntimeConfigAspect$.html#setExecutor(executor:zio.Executor):zio.RuntimeConfigAspect", "kind" : "def"}, {"label" : "setBlockingExecutor", "tail" : "(executor: Executor): RuntimeConfigAspect", "member" : "zio.RuntimeConfigAspect.setBlockingExecutor", "link" : "zio\/RuntimeConfigAspect$.html#setBlockingExecutor(executor:zio.Executor):zio.RuntimeConfigAspect", "kind" : "def"}, {"label" : "identity", "tail" : ": RuntimeConfigAspect", "member" : "zio.RuntimeConfigAspect.identity", "link" : "zio\/RuntimeConfigAspect$.html#identity:zio.RuntimeConfigAspect", "kind" : "val"}, {"label" : "addSupervisor", "tail" : "(supervisor: Supervisor[Any]): RuntimeConfigAspect", "member" : "zio.RuntimeConfigAspect.addSupervisor", "link" : "zio\/RuntimeConfigAspect$.html#addSupervisor(supervisor:zio.Supervisor[Any]):zio.RuntimeConfigAspect", "kind" : "def"}, {"label" : "addReportFatal", "tail" : "(f: (Throwable) => Nothing): RuntimeConfigAspect", "member" : "zio.RuntimeConfigAspect.addReportFatal", "link" : "zio\/RuntimeConfigAspect$.html#addReportFatal(f:Throwable=>Nothing):zio.RuntimeConfigAspect", "kind" : "def"}, {"label" : "addLogger", "tail" : "(logger: ZLogger[Any]): RuntimeConfigAspect", "member" : "zio.RuntimeConfigAspect.addLogger", "link" : "zio\/RuntimeConfigAspect$.html#addLogger(logger:zio.ZLogger[Any]):zio.RuntimeConfigAspect", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "zio\/RuntimeConfigAspect$.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (RuntimeConfigAspect) => A): ((RuntimeConfig) => RuntimeConfig) => A", "member" : "scala.Function1.andThen", "link" : "zio\/RuntimeConfigAspect$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => (RuntimeConfig) => RuntimeConfig): (A) => RuntimeConfigAspect", "member" : "scala.Function1.compose", "link" : "zio\/RuntimeConfigAspect$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/RuntimeConfigAspect$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/RuntimeConfigAspect$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/RuntimeConfigAspect$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/RuntimeConfigAspect$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/RuntimeConfigAspect$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/RuntimeConfigAspect$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/RuntimeConfigAspect$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RuntimeConfigAspect$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RuntimeConfigAspect$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RuntimeConfigAspect$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/RuntimeConfigAspect$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/RuntimeConfigAspect$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/RuntimeConfigAspect$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/RuntimeConfigAspect$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/RuntimeConfigAspect$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/RuntimeConfigAspect$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/RuntimeConfigAspect$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/RuntimeConfigAspect$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : ">>>", "tail" : "(that: RuntimeConfigAspect): RuntimeConfigAspect", "member" : "zio.RuntimeConfigAspect.>>>", "link" : "zio\/RuntimeConfigAspect.html#>>>(that:zio.RuntimeConfigAspect):zio.RuntimeConfigAspect", "kind" : "def"}, {"label" : "apply", "tail" : "(p: RuntimeConfig): RuntimeConfig", "member" : "zio.RuntimeConfigAspect.apply", "link" : "zio\/RuntimeConfigAspect.html#apply(p:zio.RuntimeConfig):zio.RuntimeConfig", "kind" : "def"}, {"member" : "zio.RuntimeConfigAspect#<init>", "error" : "unsupported entity"}, {"label" : "customize", "tail" : ": (RuntimeConfig) => RuntimeConfig", "member" : "zio.RuntimeConfigAspect.customize", "link" : "zio\/RuntimeConfigAspect.html#customize:zio.RuntimeConfig=>zio.RuntimeConfig", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/RuntimeConfigAspect.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "zio\/RuntimeConfigAspect.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (RuntimeConfig) => A): (RuntimeConfig) => A", "member" : "scala.Function1.andThen", "link" : "zio\/RuntimeConfigAspect.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => RuntimeConfig): (A) => RuntimeConfig", "member" : "scala.Function1.compose", "link" : "zio\/RuntimeConfigAspect.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/RuntimeConfigAspect.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/RuntimeConfigAspect.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/RuntimeConfigAspect.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/RuntimeConfigAspect.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/RuntimeConfigAspect.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/RuntimeConfigAspect.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/RuntimeConfigAspect.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RuntimeConfigAspect.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RuntimeConfigAspect.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/RuntimeConfigAspect.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/RuntimeConfigAspect.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/RuntimeConfigAspect.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/RuntimeConfigAspect.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/RuntimeConfigAspect.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/RuntimeConfigAspect.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/RuntimeConfigAspect.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/RuntimeConfigAspect.html", "kind" : "case class"}, {"name" : "zio.Schedule", "object" : "zio\/Schedule$.html", "members_object" : [{"label" : "Decision", "tail" : "", "member" : "zio.Schedule.Decision", "link" : "zio\/Schedule$.html#Decision", "kind" : "object"}, {"label" : "Decision", "tail" : "", "member" : "zio.Schedule.Decision", "link" : "zio\/Schedule$.html#DecisionextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Driver", "tail" : "", "member" : "zio.Schedule.Driver", "link" : "zio\/Schedule$.html#Driver[+State,-Env,-In,+Out]extendsProductwithSerializable", "kind" : "final case class"}, {"label" : "WithState", "tail" : "", "member" : "zio.Schedule.WithState", "link" : "zio\/Schedule$.html#WithState[State0,-Env,-In0,+Out0]=zio.Schedule[Env,In0,Out0]{typeState=State0}", "kind" : "type"}, {"label" : "maxOffsetDateTime", "tail" : "(l: OffsetDateTime, r: OffsetDateTime): OffsetDateTime", "member" : "zio.Schedule.maxOffsetDateTime", "link" : "zio\/Schedule$.html#maxOffsetDateTime(l:java.time.OffsetDateTime,r:java.time.OffsetDateTime):java.time.OffsetDateTime", "kind" : "def"}, {"label" : "minOffsetDateTime", "tail" : "(l: OffsetDateTime, r: OffsetDateTime): OffsetDateTime", "member" : "zio.Schedule.minOffsetDateTime", "link" : "zio\/Schedule$.html#minOffsetDateTime(l:java.time.OffsetDateTime,r:java.time.OffsetDateTime):java.time.OffsetDateTime", "kind" : "def"}, {"label" : "Interval", "tail" : "", "member" : "zio.Schedule.Interval", "link" : "zio\/Schedule$.html#Interval", "kind" : "object"}, {"label" : "Interval", "tail" : "", "member" : "zio.Schedule.Interval", "link" : "zio\/Schedule$.html#IntervalextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "dayOfMonth", "tail" : "(day: Int): WithState[Long, Any, Any, Long]", "member" : "zio.Schedule.dayOfMonth", "link" : "zio\/Schedule$.html#dayOfMonth(day:Int):zio.Schedule.WithState[Long,Any,Any,Long]", "kind" : "def"}, {"label" : "dayOfWeek", "tail" : "(day: Int): WithState[Long, Any, Any, Long]", "member" : "zio.Schedule.dayOfWeek", "link" : "zio\/Schedule$.html#dayOfWeek(day:Int):zio.Schedule.WithState[Long,Any,Any,Long]", "kind" : "def"}, {"label" : "hourOfDay", "tail" : "(hour: Int): WithState[Long, Any, Any, Long]", "member" : "zio.Schedule.hourOfDay", "link" : "zio\/Schedule$.html#hourOfDay(hour:Int):zio.Schedule.WithState[Long,Any,Any,Long]", "kind" : "def"}, {"label" : "minuteOfHour", "tail" : "(minute: Int): WithState[Long, Any, Any, Long]", "member" : "zio.Schedule.minuteOfHour", "link" : "zio\/Schedule$.html#minuteOfHour(minute:Int):zio.Schedule.WithState[Long,Any,Any,Long]", "kind" : "def"}, {"label" : "secondOfMinute", "tail" : "(second0: => Int): WithState[Long, Any, Any, Long]", "member" : "zio.Schedule.secondOfMinute", "link" : "zio\/Schedule$.html#secondOfMinute(second0:=>Int):zio.Schedule.WithState[Long,Any,Any,Long]", "kind" : "def"}, {"label" : "windowed", "tail" : "(interval: zio.Duration): WithState[(Option[Long], Long), Any, Any, Long]", "member" : "zio.Schedule.windowed", "link" : "zio\/Schedule$.html#windowed(interval:zio.Duration):zio.Schedule.WithState[(Option[Long],Long),Any,Any,Long]", "kind" : "def"}, {"label" : "unfold", "tail" : "(a: => A)(f: (A) => A): WithState[A, Any, Any, A]", "member" : "zio.Schedule.unfold", "link" : "zio\/Schedule$.html#unfold[A](a:=>A)(f:A=>A):zio.Schedule.WithState[A,Any,Any,A]", "kind" : "def"}, {"label" : "succeed", "tail" : "(a: => A): WithState[Long, Any, Any, A]", "member" : "zio.Schedule.succeed", "link" : "zio\/Schedule$.html#succeed[A](a:=>A):zio.Schedule.WithState[Long,Any,Any,A]", "kind" : "def"}, {"label" : "stop", "tail" : ": WithState[Long, Any, Any, Unit]", "member" : "zio.Schedule.stop", "link" : "zio\/Schedule$.html#stop:zio.Schedule.WithState[Long,Any,Any,Unit]", "kind" : "val"}, {"label" : "spaced", "tail" : "(duration: zio.Duration): WithState[Long, Any, Any, Long]", "member" : "zio.Schedule.spaced", "link" : "zio\/Schedule$.html#spaced(duration:zio.Duration):zio.Schedule.WithState[Long,Any,Any,Long]", "kind" : "def"}, {"label" : "recurs", "tail" : "(n: Int): WithState[Long, Any, Any, Long]", "member" : "zio.Schedule.recurs", "link" : "zio\/Schedule$.html#recurs(n:Int):zio.Schedule.WithState[Long,Any,Any,Long]", "kind" : "def"}, {"label" : "recurs", "tail" : "(n: Long): WithState[Long, Any, Any, Long]", "member" : "zio.Schedule.recurs", "link" : "zio\/Schedule$.html#recurs(n:Long):zio.Schedule.WithState[Long,Any,Any,Long]", "kind" : "def"}, {"label" : "once", "tail" : ": WithState[Long, Any, Any, Unit]", "member" : "zio.Schedule.once", "link" : "zio\/Schedule$.html#once:zio.Schedule.WithState[Long,Any,Any,Unit]", "kind" : "val"}, {"label" : "linear", "tail" : "(base: zio.Duration): WithState[Long, Any, Any, zio.Duration]", "member" : "zio.Schedule.linear", "link" : "zio\/Schedule$.html#linear(base:zio.Duration):zio.Schedule.WithState[Long,Any,Any,zio.Duration]", "kind" : "def"}, {"label" : "identity", "tail" : "(): WithState[Unit, Any, A, A]", "member" : "zio.Schedule.identity", "link" : "zio\/Schedule$.html#identity[A]:zio.Schedule.WithState[Unit,Any,A,A]", "kind" : "def"}, {"label" : "count", "tail" : ": WithState[Long, Any, Any, Long]", "member" : "zio.Schedule.count", "link" : "zio\/Schedule$.html#count:zio.Schedule.WithState[Long,Any,Any,Long]", "kind" : "val"}, {"label" : "fromFunction", "tail" : "(f: (A) => B): WithState[Unit, Any, A, B]", "member" : "zio.Schedule.fromFunction", "link" : "zio\/Schedule$.html#fromFunction[A,B](f:A=>B):zio.Schedule.WithState[Unit,Any,A,B]", "kind" : "def"}, {"label" : "fromDurations", "tail" : "(duration: zio.Duration, durations: zio.Duration*): WithState[(::[zio.Duration], Boolean), Any, Any, zio.Duration]", "member" : "zio.Schedule.fromDurations", "link" : "zio\/Schedule$.html#fromDurations(duration:zio.Duration,durations:zio.Duration*):zio.Schedule.WithState[(::[zio.Duration],Boolean),Any,Any,zio.Duration]", "kind" : "def"}, {"label" : "fromDuration", "tail" : "(duration: zio.Duration): WithState[Boolean, Any, Any, zio.Duration]", "member" : "zio.Schedule.fromDuration", "link" : "zio\/Schedule$.html#fromDuration(duration:zio.Duration):zio.Schedule.WithState[Boolean,Any,Any,zio.Duration]", "kind" : "def"}, {"label" : "forever", "tail" : ": WithState[Long, Any, Any, Long]", "member" : "zio.Schedule.forever", "link" : "zio\/Schedule$.html#forever:zio.Schedule.WithState[Long,Any,Any,Long]", "kind" : "val"}, {"label" : "upTo", "tail" : "(duration: zio.Duration): WithState[Option[OffsetDateTime], Any, Any, zio.Duration]", "member" : "zio.Schedule.upTo", "link" : "zio\/Schedule$.html#upTo(duration:zio.Duration):zio.Schedule.WithState[Option[java.time.OffsetDateTime],Any,Any,zio.Duration]", "kind" : "def"}, {"label" : "fixed", "tail" : "(interval: zio.Duration): WithState[(Option[(Long, Long)], Long), Any, Any, Long]", "member" : "zio.Schedule.fixed", "link" : "zio\/Schedule$.html#fixed(interval:zio.Duration):zio.Schedule.WithState[(Option[(Long,Long)],Long),Any,Any,Long]", "kind" : "def"}, {"label" : "fibonacci", "tail" : "(one: zio.Duration): WithState[(zio.Duration, zio.Duration), Any, Any, zio.Duration]", "member" : "zio.Schedule.fibonacci", "link" : "zio\/Schedule$.html#fibonacci(one:zio.Duration):zio.Schedule.WithState[(zio.Duration,zio.Duration),Any,Any,zio.Duration]", "kind" : "def"}, {"label" : "exponential", "tail" : "(base: zio.Duration, factor: Double): WithState[Long, Any, Any, zio.Duration]", "member" : "zio.Schedule.exponential", "link" : "zio\/Schedule$.html#exponential(base:zio.Duration,factor:Double):zio.Schedule.WithState[Long,Any,Any,zio.Duration]", "kind" : "def"}, {"label" : "elapsed", "tail" : ": WithState[Option[OffsetDateTime], Any, Any, zio.Duration]", "member" : "zio.Schedule.elapsed", "link" : "zio\/Schedule$.html#elapsed:zio.Schedule.WithState[Option[java.time.OffsetDateTime],Any,Any,zio.Duration]", "kind" : "val"}, {"label" : "duration", "tail" : "(duration: zio.Duration): WithState[Boolean, Any, Any, zio.Duration]", "member" : "zio.Schedule.duration", "link" : "zio\/Schedule$.html#duration(duration:zio.Duration):zio.Schedule.WithState[Boolean,Any,Any,zio.Duration]", "kind" : "def"}, {"label" : "recurUntil", "tail" : "(pf: PartialFunction[A, B]): WithState[Unit, Any, A, Option[B]]", "member" : "zio.Schedule.recurUntil", "link" : "zio\/Schedule$.html#recurUntil[A,B](pf:PartialFunction[A,B]):zio.Schedule.WithState[Unit,Any,A,Option[B]]", "kind" : "def"}, {"label" : "recurUntilEquals", "tail" : "(a: => A): WithState[Unit, Any, A, A]", "member" : "zio.Schedule.recurUntilEquals", "link" : "zio\/Schedule$.html#recurUntilEquals[A](a:=>A):zio.Schedule.WithState[Unit,Any,A,A]", "kind" : "def"}, {"label" : "recurUntilZIO", "tail" : "(f: (A) => URIO[Env, Boolean]): WithState[Unit, Env, A, A]", "member" : "zio.Schedule.recurUntilZIO", "link" : "zio\/Schedule$.html#recurUntilZIO[Env,A](f:A=>zio.URIO[Env,Boolean]):zio.Schedule.WithState[Unit,Env,A,A]", "kind" : "def"}, {"label" : "recurUntilM", "tail" : "(f: (A) => URIO[Env, Boolean]): WithState[Unit, Env, A, A]", "member" : "zio.Schedule.recurUntilM", "link" : "zio\/Schedule$.html#recurUntilM[Env,A](f:A=>zio.URIO[Env,Boolean]):zio.Schedule.WithState[Unit,Env,A,A]", "kind" : "def"}, {"label" : "recurUntil", "tail" : "(f: (A) => Boolean): WithState[Unit, Any, A, A]", "member" : "zio.Schedule.recurUntil", "link" : "zio\/Schedule$.html#recurUntil[A](f:A=>Boolean):zio.Schedule.WithState[Unit,Any,A,A]", "kind" : "def"}, {"label" : "recurWhileEquals", "tail" : "(a: => A): WithState[Unit, Any, A, A]", "member" : "zio.Schedule.recurWhileEquals", "link" : "zio\/Schedule$.html#recurWhileEquals[A](a:=>A):zio.Schedule.WithState[Unit,Any,A,A]", "kind" : "def"}, {"label" : "recurWhileZIO", "tail" : "(f: (A) => URIO[Env, Boolean]): WithState[Unit, Env, A, A]", "member" : "zio.Schedule.recurWhileZIO", "link" : "zio\/Schedule$.html#recurWhileZIO[Env,A](f:A=>zio.URIO[Env,Boolean]):zio.Schedule.WithState[Unit,Env,A,A]", "kind" : "def"}, {"label" : "recurWhileM", "tail" : "(f: (A) => URIO[Env, Boolean]): WithState[Unit, Env, A, A]", "member" : "zio.Schedule.recurWhileM", "link" : "zio\/Schedule$.html#recurWhileM[Env,A](f:A=>zio.URIO[Env,Boolean]):zio.Schedule.WithState[Unit,Env,A,A]", "kind" : "def"}, {"label" : "recurWhile", "tail" : "(f: (A) => Boolean): WithState[Unit, Any, A, A]", "member" : "zio.Schedule.recurWhile", "link" : "zio\/Schedule$.html#recurWhile[A](f:A=>Boolean):zio.Schedule.WithState[Unit,Any,A,A]", "kind" : "def"}, {"label" : "delayed", "tail" : "(schedule: Schedule[Env, In, zio.Duration]): WithState[State, Env, In, zio.Duration]", "member" : "zio.Schedule.delayed", "link" : "zio\/Schedule$.html#delayed[Env,In](schedule:zio.Schedule[Env,In,zio.Duration]):zio.Schedule.WithState[schedule.State,Env,In,zio.Duration]", "kind" : "def"}, {"label" : "collectUntilZIO", "tail" : "(f: (A) => URIO[Env, Boolean]): WithState[(Unit, Chunk[A]), Env, A, Chunk[A]]", "member" : "zio.Schedule.collectUntilZIO", "link" : "zio\/Schedule$.html#collectUntilZIO[Env,A](f:A=>zio.URIO[Env,Boolean]):zio.Schedule.WithState[(Unit,zio.Chunk[A]),Env,A,zio.Chunk[A]]", "kind" : "def"}, {"label" : "collectUntilM", "tail" : "(f: (A) => URIO[Env, Boolean]): WithState[(Unit, Chunk[A]), Env, A, Chunk[A]]", "member" : "zio.Schedule.collectUntilM", "link" : "zio\/Schedule$.html#collectUntilM[Env,A](f:A=>zio.URIO[Env,Boolean]):zio.Schedule.WithState[(Unit,zio.Chunk[A]),Env,A,zio.Chunk[A]]", "kind" : "def"}, {"label" : "collectUntil", "tail" : "(f: (A) => Boolean): WithState[(Unit, Chunk[A]), Any, A, Chunk[A]]", "member" : "zio.Schedule.collectUntil", "link" : "zio\/Schedule$.html#collectUntil[A](f:A=>Boolean):zio.Schedule.WithState[(Unit,zio.Chunk[A]),Any,A,zio.Chunk[A]]", "kind" : "def"}, {"label" : "collectWhileZIO", "tail" : "(f: (A) => URIO[Env, Boolean]): WithState[(Unit, Chunk[A]), Env, A, Chunk[A]]", "member" : "zio.Schedule.collectWhileZIO", "link" : "zio\/Schedule$.html#collectWhileZIO[Env,A](f:A=>zio.URIO[Env,Boolean]):zio.Schedule.WithState[(Unit,zio.Chunk[A]),Env,A,zio.Chunk[A]]", "kind" : "def"}, {"label" : "collectWhileM", "tail" : "(f: (A) => URIO[Env, Boolean]): WithState[(Unit, Chunk[A]), Env, A, Chunk[A]]", "member" : "zio.Schedule.collectWhileM", "link" : "zio\/Schedule$.html#collectWhileM[Env,A](f:A=>zio.URIO[Env,Boolean]):zio.Schedule.WithState[(Unit,zio.Chunk[A]),Env,A,zio.Chunk[A]]", "kind" : "def"}, {"label" : "collectWhile", "tail" : "(f: (A) => Boolean): WithState[(Unit, Chunk[A]), Any, A, Chunk[A]]", "member" : "zio.Schedule.collectWhile", "link" : "zio\/Schedule$.html#collectWhile[A](f:A=>Boolean):zio.Schedule.WithState[(Unit,zio.Chunk[A]),Any,A,zio.Chunk[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(): WithState[(Unit, Chunk[A]), Any, A, Chunk[A]]", "member" : "zio.Schedule.collectAll", "link" : "zio\/Schedule$.html#collectAll[A]:zio.Schedule.WithState[(Unit,zio.Chunk[A]),Any,A,zio.Chunk[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Schedule$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Schedule$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Schedule$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Schedule$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Schedule$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Schedule$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Schedule$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Schedule$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Schedule$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Schedule$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Schedule$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Schedule$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Schedule$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Schedule$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Schedule$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Schedule$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Schedule$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Schedule$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Schedule$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/Schedule.html", "kind" : "trait", "members_trait" : [{"label" : "zipWith", "tail" : "(that: Schedule[Env1, In1, Out2])(f: (Out, Out2) => Out3): WithState[(State, State), Env1, In1, Out3]", "member" : "zio.Schedule.zipWith", "link" : "zio\/Schedule.html#zipWith[Env1<:Env,In1<:In,Out2,Out3](that:zio.Schedule[Env1,In1,Out2])(f:(Out,Out2)=>Out3):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,In1,Out3]", "kind" : "def"}, {"label" : "zipRight", "tail" : "(that: Schedule[Env1, In1, Out2]): WithState[(State, State), Env1, In1, Out2]", "member" : "zio.Schedule.zipRight", "link" : "zio\/Schedule.html#zipRight[Env1<:Env,In1<:In,Out2](that:zio.Schedule[Env1,In1,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,In1,Out2]", "kind" : "def"}, {"label" : "zipLeft", "tail" : "(that: Schedule[Env1, In1, Out2]): WithState[(State, State), Env1, In1, Out]", "member" : "zio.Schedule.zipLeft", "link" : "zio\/Schedule.html#zipLeft[Env1<:Env,In1<:In,Out2](that:zio.Schedule[Env1,In1,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,In1,Out]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Schedule[Env1, In1, Out2])(zippable: Zippable[Out, Out2]): WithState[(State, State), Env1, In1, Out]", "member" : "zio.Schedule.zip", "link" : "zio\/Schedule.html#zip[Env1<:Env,In1<:In,Out2](that:zio.Schedule[Env1,In1,Out2])(implicitzippable:zio.Zippable[Out,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,In1,zippable.Out]", "kind" : "def"}, {"label" : "whileOutputZIO", "tail" : "(f: (Out) => URIO[Env1, Boolean]): WithState[State, Env1, In, Out]", "member" : "zio.Schedule.whileOutputZIO", "link" : "zio\/Schedule.html#whileOutputZIO[Env1<:Env](f:Out=>zio.URIO[Env1,Boolean]):zio.Schedule.WithState[Schedule.this.State,Env1,In,Out]", "kind" : "def"}, {"label" : "whileOutputM", "tail" : "(f: (Out) => URIO[Env1, Boolean]): WithState[State, Env1, In, Out]", "member" : "zio.Schedule.whileOutputM", "link" : "zio\/Schedule.html#whileOutputM[Env1<:Env](f:Out=>zio.URIO[Env1,Boolean]):zio.Schedule.WithState[Schedule.this.State,Env1,In,Out]", "kind" : "def"}, {"label" : "whileOutput", "tail" : "(f: (Out) => Boolean): WithState[State, Env, In, Out]", "member" : "zio.Schedule.whileOutput", "link" : "zio\/Schedule.html#whileOutput(f:Out=>Boolean):zio.Schedule.WithState[Schedule.this.State,Env,In,Out]", "kind" : "def"}, {"label" : "whileInputZIO", "tail" : "(f: (In1) => URIO[Env1, Boolean]): WithState[State, Env1, In1, Out]", "member" : "zio.Schedule.whileInputZIO", "link" : "zio\/Schedule.html#whileInputZIO[Env1<:Env,In1<:In](f:In1=>zio.URIO[Env1,Boolean]):zio.Schedule.WithState[Schedule.this.State,Env1,In1,Out]", "kind" : "def"}, {"label" : "whileInputM", "tail" : "(f: (In1) => URIO[Env1, Boolean]): WithState[State, Env1, In1, Out]", "member" : "zio.Schedule.whileInputM", "link" : "zio\/Schedule.html#whileInputM[Env1<:Env,In1<:In](f:In1=>zio.URIO[Env1,Boolean]):zio.Schedule.WithState[Schedule.this.State,Env1,In1,Out]", "kind" : "def"}, {"label" : "whileInput", "tail" : "(f: (In1) => Boolean): WithState[State, Env, In1, Out]", "member" : "zio.Schedule.whileInput", "link" : "zio\/Schedule.html#whileInput[In1<:In](f:In1=>Boolean):zio.Schedule.WithState[Schedule.this.State,Env,In1,Out]", "kind" : "def"}, {"label" : "untilOutputZIO", "tail" : "(f: (Out) => URIO[Env1, Boolean]): WithState[State, Env1, In, Out]", "member" : "zio.Schedule.untilOutputZIO", "link" : "zio\/Schedule.html#untilOutputZIO[Env1<:Env](f:Out=>zio.URIO[Env1,Boolean]):zio.Schedule.WithState[Schedule.this.State,Env1,In,Out]", "kind" : "def"}, {"label" : "untilOutputM", "tail" : "(f: (Out) => URIO[Env1, Boolean]): WithState[State, Env1, In, Out]", "member" : "zio.Schedule.untilOutputM", "link" : "zio\/Schedule.html#untilOutputM[Env1<:Env](f:Out=>zio.URIO[Env1,Boolean]):zio.Schedule.WithState[Schedule.this.State,Env1,In,Out]", "kind" : "def"}, {"label" : "untilOutput", "tail" : "(f: (Out) => Boolean): WithState[State, Env, In, Out]", "member" : "zio.Schedule.untilOutput", "link" : "zio\/Schedule.html#untilOutput(f:Out=>Boolean):zio.Schedule.WithState[Schedule.this.State,Env,In,Out]", "kind" : "def"}, {"label" : "untilInputZIO", "tail" : "(f: (In1) => URIO[Env1, Boolean]): WithState[State, Env1, In1, Out]", "member" : "zio.Schedule.untilInputZIO", "link" : "zio\/Schedule.html#untilInputZIO[Env1<:Env,In1<:In](f:In1=>zio.URIO[Env1,Boolean]):zio.Schedule.WithState[Schedule.this.State,Env1,In1,Out]", "kind" : "def"}, {"label" : "untilInputM", "tail" : "(f: (In1) => URIO[Env1, Boolean]): WithState[State, Env1, In1, Out]", "member" : "zio.Schedule.untilInputM", "link" : "zio\/Schedule.html#untilInputM[Env1<:Env,In1<:In](f:In1=>zio.URIO[Env1,Boolean]):zio.Schedule.WithState[Schedule.this.State,Env1,In1,Out]", "kind" : "def"}, {"label" : "untilInput", "tail" : "(f: (In1) => Boolean): WithState[State, Env, In1, Out]", "member" : "zio.Schedule.untilInput", "link" : "zio\/Schedule.html#untilInput[In1<:In](f:In1=>Boolean):zio.Schedule.WithState[Schedule.this.State,Env,In1,Out]", "kind" : "def"}, {"label" : "unit", "tail" : "(): WithState[State, Env, In, Unit]", "member" : "zio.Schedule.unit", "link" : "zio\/Schedule.html#unit:zio.Schedule.WithState[Schedule.this.State,Env,In,Unit]", "kind" : "def"}, {"label" : "unionWith", "tail" : "(that: Schedule[Env1, In1, Out2])(f: (Interval, Interval) => Interval)(zippable: Zippable[Out, Out2]): WithState[(State, State), Env1, In1, Out]", "member" : "zio.Schedule.unionWith", "link" : "zio\/Schedule.html#unionWith[Env1<:Env,In1<:In,Out2](that:zio.Schedule[Env1,In1,Out2])(f:(zio.Schedule.Interval,zio.Schedule.Interval)=>zio.Schedule.Interval)(implicitzippable:zio.Zippable[Out,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,In1,zippable.Out]", "kind" : "def"}, {"label" : "tapOutput", "tail" : "(f: (Out) => URIO[Env1, Any]): WithState[State, Env1, In, Out]", "member" : "zio.Schedule.tapOutput", "link" : "zio\/Schedule.html#tapOutput[Env1<:Env](f:Out=>zio.URIO[Env1,Any]):zio.Schedule.WithState[Schedule.this.State,Env1,In,Out]", "kind" : "def"}, {"label" : "tapInput", "tail" : "(f: (In1) => URIO[Env1, Any]): WithState[State, Env1, In1, Out]", "member" : "zio.Schedule.tapInput", "link" : "zio\/Schedule.html#tapInput[Env1<:Env,In1<:In](f:In1=>zio.URIO[Env1,Any]):zio.Schedule.WithState[Schedule.this.State,Env1,In1,Out]", "kind" : "def"}, {"label" : "second", "tail" : "(): WithState[(Unit, State), Env, (X, In), (X, Out)]", "member" : "zio.Schedule.second", "link" : "zio\/Schedule.html#second[X]:zio.Schedule.WithState[(Unit,Schedule.this.State),Env,(X,In),(X,Out)]", "kind" : "def"}, {"label" : "run", "tail" : "(now: OffsetDateTime, input: Iterable[In]): URIO[Env, Chunk[Out]]", "member" : "zio.Schedule.run", "link" : "zio\/Schedule.html#run(now:java.time.OffsetDateTime,input:Iterable[In]):zio.URIO[Env,zio.Chunk[Out]]", "kind" : "def"}, {"label" : "right", "tail" : "(): WithState[(Unit, State), Env, Either[X, In], Either[X, Out]]", "member" : "zio.Schedule.right", "link" : "zio\/Schedule.html#right[X]:zio.Schedule.WithState[(Unit,Schedule.this.State),Env,Either[X,In],Either[X,Out]]", "kind" : "def"}, {"label" : "resetWhen", "tail" : "(f: (Out) => Boolean): WithState[State, Env, In, Out]", "member" : "zio.Schedule.resetWhen", "link" : "zio\/Schedule.html#resetWhen(f:Out=>Boolean):zio.Schedule.WithState[Schedule.this.State,Env,In,Out]", "kind" : "final def"}, {"label" : "resetAfter", "tail" : "(duration: zio.Duration): WithState[(State, Option[OffsetDateTime]), Env, In, Out]", "member" : "zio.Schedule.resetAfter", "link" : "zio\/Schedule.html#resetAfter(duration:zio.Duration):zio.Schedule.WithState[(Schedule.this.State,Option[java.time.OffsetDateTime]),Env,In,Out]", "kind" : "final def"}, {"label" : "repetitions", "tail" : "(): WithState[(State, Long), Env, In, Long]", "member" : "zio.Schedule.repetitions", "link" : "zio\/Schedule.html#repetitions:zio.Schedule.WithState[(Schedule.this.State,Long),Env,In,Long]", "kind" : "def"}, {"label" : "reconsiderZIO", "tail" : "(f: (State, Out, Decision) => URIO[Env1, Either[Out2, (Out2, Interval)]]): WithState[State, Env1, In1, Out2]", "member" : "zio.Schedule.reconsiderZIO", "link" : "zio\/Schedule.html#reconsiderZIO[Env1<:Env,In1<:In,Out2](f:(Schedule.this.State,Out,zio.Schedule.Decision)=>zio.URIO[Env1,Either[Out2,(Out2,zio.Schedule.Interval)]]):zio.Schedule.WithState[Schedule.this.State,Env1,In1,Out2]", "kind" : "def"}, {"label" : "reconsiderM", "tail" : "(f: (State, Out, Decision) => URIO[Env1, Either[Out2, (Out2, Interval)]]): WithState[State, Env1, In1, Out2]", "member" : "zio.Schedule.reconsiderM", "link" : "zio\/Schedule.html#reconsiderM[Env1<:Env,In1<:In,Out2](f:(Schedule.this.State,Out,zio.Schedule.Decision)=>zio.URIO[Env1,Either[Out2,(Out2,zio.Schedule.Interval)]]):zio.Schedule.WithState[Schedule.this.State,Env1,In1,Out2]", "kind" : "def"}, {"label" : "reconsider", "tail" : "(f: (State, Out, Decision) => Either[Out2, (Out2, Interval)]): WithState[State, Env, In, Out2]", "member" : "zio.Schedule.reconsider", "link" : "zio\/Schedule.html#reconsider[Out2](f:(Schedule.this.State,Out,zio.Schedule.Decision)=>Either[Out2,(Out2,zio.Schedule.Interval)]):zio.Schedule.WithState[Schedule.this.State,Env,In,Out2]", "kind" : "def"}, {"label" : "provideSome", "tail" : "(f: (Env2) => Env): WithState[State, Env2, In, Out]", "member" : "zio.Schedule.provideSome", "link" : "zio\/Schedule.html#provideSome[Env2](f:Env2=>Env):zio.Schedule.WithState[Schedule.this.State,Env2,In,Out]", "kind" : "def"}, {"label" : "provide", "tail" : "(env: Env): WithState[State, Any, In, Out]", "member" : "zio.Schedule.provide", "link" : "zio\/Schedule.html#provide(env:Env):zio.Schedule.WithState[Schedule.this.State,Any,In,Out]", "kind" : "def"}, {"label" : "onDecision", "tail" : "(f: (State, Out, Decision) => URIO[Env1, Any]): WithState[State, Env1, In, Out]", "member" : "zio.Schedule.onDecision", "link" : "zio\/Schedule.html#onDecision[Env1<:Env](f:(Schedule.this.State,Out,zio.Schedule.Decision)=>zio.URIO[Env1,Any]):zio.Schedule.WithState[Schedule.this.State,Env1,In,Out]", "kind" : "def"}, {"label" : "modifyDelayZIO", "tail" : "(f: (Out, zio.Duration) => URIO[Env1, zio.Duration]): WithState[State, Env1, In, Out]", "member" : "zio.Schedule.modifyDelayZIO", "link" : "zio\/Schedule.html#modifyDelayZIO[Env1<:Env](f:(Out,zio.Duration)=>zio.URIO[Env1,zio.Duration]):zio.Schedule.WithState[Schedule.this.State,Env1,In,Out]", "kind" : "def"}, {"label" : "modifyDelayM", "tail" : "(f: (Out, zio.Duration) => URIO[Env1, zio.Duration]): WithState[State, Env1, In, Out]", "member" : "zio.Schedule.modifyDelayM", "link" : "zio\/Schedule.html#modifyDelayM[Env1<:Env](f:(Out,zio.Duration)=>zio.URIO[Env1,zio.Duration]):zio.Schedule.WithState[Schedule.this.State,Env1,In,Out]", "kind" : "def"}, {"label" : "modifyDelay", "tail" : "(f: (Out, zio.Duration) => zio.Duration): WithState[State, Env, In, Out]", "member" : "zio.Schedule.modifyDelay", "link" : "zio\/Schedule.html#modifyDelay(f:(Out,zio.Duration)=>zio.Duration):zio.Schedule.WithState[Schedule.this.State,Env,In,Out]", "kind" : "def"}, {"label" : "mapZIO", "tail" : "(f: (Out) => URIO[Env1, Out2]): WithState[State, Env1, In, Out2]", "member" : "zio.Schedule.mapZIO", "link" : "zio\/Schedule.html#mapZIO[Env1<:Env,Out2](f:Out=>zio.URIO[Env1,Out2]):zio.Schedule.WithState[Schedule.this.State,Env1,In,Out2]", "kind" : "def"}, {"label" : "mapM", "tail" : "(f: (Out) => URIO[Env1, Out2]): WithState[State, Env1, In, Out2]", "member" : "zio.Schedule.mapM", "link" : "zio\/Schedule.html#mapM[Env1<:Env,Out2](f:Out=>zio.URIO[Env1,Out2]):zio.Schedule.WithState[Schedule.this.State,Env1,In,Out2]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Out) => Out2): WithState[State, Env, In, Out2]", "member" : "zio.Schedule.map", "link" : "zio\/Schedule.html#map[Out2](f:Out=>Out2):zio.Schedule.WithState[Schedule.this.State,Env,In,Out2]", "kind" : "def"}, {"label" : "left", "tail" : "(): WithState[(State, Unit), Env, Either[In, X], Either[Out, X]]", "member" : "zio.Schedule.left", "link" : "zio\/Schedule.html#left[X]:zio.Schedule.WithState[(Schedule.this.State,Unit),Env,Either[In,X],Either[Out,X]]", "kind" : "def"}, {"label" : "jittered", "tail" : "(min: Double, max: Double): WithState[State, Env with Has[Random], In, Out]", "member" : "zio.Schedule.jittered", "link" : "zio\/Schedule.html#jittered(min:Double,max:Double):zio.Schedule.WithState[Schedule.this.State,Envwithzio.Has[zio.Random],In,Out]", "kind" : "def"}, {"label" : "jittered", "tail" : "(): WithState[State, Env with Has[Random], In, Out]", "member" : "zio.Schedule.jittered", "link" : "zio\/Schedule.html#jittered:zio.Schedule.WithState[Schedule.this.State,Envwithzio.Has[zio.Random],In,Out]", "kind" : "def"}, {"label" : "intersectWith", "tail" : "(that: Schedule[Env1, In1, Out2])(f: (Interval, Interval) => Interval)(zippable: Zippable[Out, Out2]): WithState[(State, State), Env1, In1, Out]", "member" : "zio.Schedule.intersectWith", "link" : "zio\/Schedule.html#intersectWith[Env1<:Env,In1<:In,Out2](that:zio.Schedule[Env1,In1,Out2])(f:(zio.Schedule.Interval,zio.Schedule.Interval)=>zio.Schedule.Interval)(implicitzippable:zio.Zippable[Out,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,In1,zippable.Out]", "kind" : "def"}, {"label" : "forever", "tail" : "(): WithState[State, Env, In, Out]", "member" : "zio.Schedule.forever", "link" : "zio\/Schedule.html#forever:zio.Schedule.WithState[Schedule.this.State,Env,In,Out]", "kind" : "def"}, {"label" : "foldZIO", "tail" : "(z: Z)(f: (Z, Out) => URIO[Env1, Z]): WithState[(State, Z), Env1, In, Z]", "member" : "zio.Schedule.foldZIO", "link" : "zio\/Schedule.html#foldZIO[Env1<:Env,Z](z:Z)(f:(Z,Out)=>zio.URIO[Env1,Z]):zio.Schedule.WithState[(Schedule.this.State,Z),Env1,In,Z]", "kind" : "def"}, {"label" : "foldM", "tail" : "(z: Z)(f: (Z, Out) => URIO[Env1, Z]): WithState[(State, Z), Env1, In, Z]", "member" : "zio.Schedule.foldM", "link" : "zio\/Schedule.html#foldM[Env1<:Env,Z](z:Z)(f:(Z,Out)=>zio.URIO[Env1,Z]):zio.Schedule.WithState[(Schedule.this.State,Z),Env1,In,Z]", "kind" : "def"}, {"label" : "fold", "tail" : "(z: Z)(f: (Z, Out) => Z): WithState[(State, Z), Env, In, Z]", "member" : "zio.Schedule.fold", "link" : "zio\/Schedule.html#fold[Z](z:Z)(f:(Z,Out)=>Z):zio.Schedule.WithState[(Schedule.this.State,Z),Env,In,Z]", "kind" : "def"}, {"label" : "first", "tail" : "(): WithState[(State, Unit), Env, (In, X), (Out, X)]", "member" : "zio.Schedule.first", "link" : "zio\/Schedule.html#first[X]:zio.Schedule.WithState[(Schedule.this.State,Unit),Env,(In,X),(Out,X)]", "kind" : "def"}, {"label" : "ensuring", "tail" : "(finalizer: UIO[Any]): WithState[State, Env, In, Out]", "member" : "zio.Schedule.ensuring", "link" : "zio\/Schedule.html#ensuring(finalizer:zio.UIO[Any]):zio.Schedule.WithState[Schedule.this.State,Env,In,Out]", "kind" : "def"}, {"label" : "eitherWith", "tail" : "(that: Schedule[Env1, In1, Out2])(f: (Out, Out2) => Out3): WithState[(State, State), Env1, In1, Out3]", "member" : "zio.Schedule.eitherWith", "link" : "zio\/Schedule.html#eitherWith[Env1<:Env,In1<:In,Out2,Out3](that:zio.Schedule[Env1,In1,Out2])(f:(Out,Out2)=>Out3):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,In1,Out3]", "kind" : "def"}, {"label" : "either", "tail" : "(that: Schedule[Env1, In1, Out2]): WithState[(State, State), Env1, In1, (Out, Out2)]", "member" : "zio.Schedule.either", "link" : "zio\/Schedule.html#either[Env1<:Env,In1<:In,Out2](that:zio.Schedule[Env1,In1,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,In1,(Out,Out2)]", "kind" : "def"}, {"label" : "driver", "tail" : "(): URIO[Has[Clock], Driver[State, Env, In, Out]]", "member" : "zio.Schedule.driver", "link" : "zio\/Schedule.html#driver:zio.URIO[zio.Has[zio.Clock],zio.Schedule.Driver[Schedule.this.State,Env,In,Out]]", "kind" : "def"}, {"label" : "dimapZIO", "tail" : "(f: (In2) => URIO[Env1, In], g: (Out) => URIO[Env1, Out2]): WithState[State, Env1, In2, Out2]", "member" : "zio.Schedule.dimapZIO", "link" : "zio\/Schedule.html#dimapZIO[Env1<:Env,In2,Out2](f:In2=>zio.URIO[Env1,In],g:Out=>zio.URIO[Env1,Out2]):zio.Schedule.WithState[Schedule.this.State,Env1,In2,Out2]", "kind" : "def"}, {"label" : "dimapM", "tail" : "(f: (In2) => URIO[Env1, In], g: (Out) => URIO[Env1, Out2]): WithState[State, Env1, In2, Out2]", "member" : "zio.Schedule.dimapM", "link" : "zio\/Schedule.html#dimapM[Env1<:Env,In2,Out2](f:In2=>zio.URIO[Env1,In],g:Out=>zio.URIO[Env1,Out2]):zio.Schedule.WithState[Schedule.this.State,Env1,In2,Out2]", "kind" : "def"}, {"label" : "dimap", "tail" : "(f: (In2) => In, g: (Out) => Out2): WithState[State, Env, In2, Out2]", "member" : "zio.Schedule.dimap", "link" : "zio\/Schedule.html#dimap[In2,Out2](f:In2=>In,g:Out=>Out2):zio.Schedule.WithState[Schedule.this.State,Env,In2,Out2]", "kind" : "def"}, {"label" : "delayedZIO", "tail" : "(f: (zio.Duration) => URIO[Env1, zio.Duration]): WithState[State, Env1, In, Out]", "member" : "zio.Schedule.delayedZIO", "link" : "zio\/Schedule.html#delayedZIO[Env1<:Env](f:zio.Duration=>zio.URIO[Env1,zio.Duration]):zio.Schedule.WithState[Schedule.this.State,Env1,In,Out]", "kind" : "def"}, {"label" : "delayedM", "tail" : "(f: (zio.Duration) => URIO[Env1, zio.Duration]): WithState[State, Env1, In, Out]", "member" : "zio.Schedule.delayedM", "link" : "zio\/Schedule.html#delayedM[Env1<:Env](f:zio.Duration=>zio.URIO[Env1,zio.Duration]):zio.Schedule.WithState[Schedule.this.State,Env1,In,Out]", "kind" : "def"}, {"label" : "delays", "tail" : "(): WithState[State, Env, In, zio.Duration]", "member" : "zio.Schedule.delays", "link" : "zio\/Schedule.html#delays:zio.Schedule.WithState[Schedule.this.State,Env,In,zio.Duration]", "kind" : "def"}, {"label" : "delayed", "tail" : "(f: (zio.Duration) => zio.Duration): WithState[State, Env, In, Out]", "member" : "zio.Schedule.delayed", "link" : "zio\/Schedule.html#delayed(f:zio.Duration=>zio.Duration):zio.Schedule.WithState[Schedule.this.State,Env,In,Out]", "kind" : "def"}, {"label" : "upTo", "tail" : "(duration: zio.Duration): WithState[(State, Option[OffsetDateTime]), Env, In, Out]", "member" : "zio.Schedule.upTo", "link" : "zio\/Schedule.html#upTo(duration:zio.Duration):zio.Schedule.WithState[(Schedule.this.State,Option[java.time.OffsetDateTime]),Env,In,Out]", "kind" : "def"}, {"label" : "contramapZIO", "tail" : "(f: (In2) => URIO[Env1, In]): WithState[State, Env1, In2, Out]", "member" : "zio.Schedule.contramapZIO", "link" : "zio\/Schedule.html#contramapZIO[Env1<:Env,In2](f:In2=>zio.URIO[Env1,In]):zio.Schedule.WithState[Schedule.this.State,Env1,In2,Out]", "kind" : "def"}, {"label" : "contramapM", "tail" : "(f: (In2) => URIO[Env1, In]): WithState[State, Env1, In2, Out]", "member" : "zio.Schedule.contramapM", "link" : "zio\/Schedule.html#contramapM[Env1<:Env,In2](f:In2=>zio.URIO[Env1,In]):zio.Schedule.WithState[Schedule.this.State,Env1,In2,Out]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (In2) => In): WithState[State, Env, In2, Out]", "member" : "zio.Schedule.contramap", "link" : "zio\/Schedule.html#contramap[Env1<:Env,In2](f:In2=>In):zio.Schedule.WithState[Schedule.this.State,Env,In2,Out]", "kind" : "def"}, {"label" : "compose", "tail" : "(that: Schedule[Env1, In2, In]): WithState[(State, State), Env1, In2, Out]", "member" : "zio.Schedule.compose", "link" : "zio\/Schedule.html#compose[Env1<:Env,In2](that:zio.Schedule[Env1,In2,In]):zio.Schedule.WithState[(that.State,Schedule.this.State),Env1,In2,Out]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(): WithState[(State, Chunk[Out1]), Env, In, Chunk[Out1]]", "member" : "zio.Schedule.collectAll", "link" : "zio\/Schedule.html#collectAll[Out1>:Out]:zio.Schedule.WithState[(Schedule.this.State,zio.Chunk[Out1]),Env,In,zio.Chunk[Out1]]", "kind" : "def"}, {"label" : "checkZIO", "tail" : "(test: (In1, Out) => URIO[Env1, Boolean]): WithState[State, Env1, In1, Out]", "member" : "zio.Schedule.checkZIO", "link" : "zio\/Schedule.html#checkZIO[Env1<:Env,In1<:In](test:(In1,Out)=>zio.URIO[Env1,Boolean]):zio.Schedule.WithState[Schedule.this.State,Env1,In1,Out]", "kind" : "def"}, {"label" : "checkM", "tail" : "(test: (In1, Out) => URIO[Env1, Boolean]): WithState[State, Env1, In1, Out]", "member" : "zio.Schedule.checkM", "link" : "zio\/Schedule.html#checkM[Env1<:Env,In1<:In](test:(In1,Out)=>zio.URIO[Env1,Boolean]):zio.Schedule.WithState[Schedule.this.State,Env1,In1,Out]", "kind" : "def"}, {"label" : "check", "tail" : "(test: (In1, Out) => Boolean): WithState[State, Env, In1, Out]", "member" : "zio.Schedule.check", "link" : "zio\/Schedule.html#check[In1<:In](test:(In1,Out)=>Boolean):zio.Schedule.WithState[Schedule.this.State,Env,In1,Out]", "kind" : "def"}, {"label" : "as", "tail" : "(out2: => Out2): WithState[State, Env, In, Out2]", "member" : "zio.Schedule.as", "link" : "zio\/Schedule.html#as[Out2](out2:=>Out2):zio.Schedule.WithState[Schedule.this.State,Env,In,Out2]", "kind" : "def"}, {"label" : "andThenEither", "tail" : "(that: Schedule[Env1, In1, Out2]): WithState[(State, State, Boolean), Env1, In1, Either[Out, Out2]]", "member" : "zio.Schedule.andThenEither", "link" : "zio\/Schedule.html#andThenEither[Env1<:Env,In1<:In,Out2](that:zio.Schedule[Env1,In1,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State,Boolean),Env1,In1,Either[Out,Out2]]", "kind" : "def"}, {"label" : "andThen", "tail" : "(that: Schedule[Env1, In1, Out2]): WithState[(State, State, Boolean), Env1, In1, Out2]", "member" : "zio.Schedule.andThen", "link" : "zio\/Schedule.html#andThen[Env1<:Env,In1<:In,Out2>:Out](that:zio.Schedule[Env1,In1,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State,Boolean),Env1,In1,Out2]", "kind" : "def"}, {"label" : "addDelayZIO", "tail" : "(f: (Out) => URIO[Env1, zio.Duration]): WithState[State, Env1, In, Out]", "member" : "zio.Schedule.addDelayZIO", "link" : "zio\/Schedule.html#addDelayZIO[Env1<:Env](f:Out=>zio.URIO[Env1,zio.Duration]):zio.Schedule.WithState[Schedule.this.State,Env1,In,Out]", "kind" : "def"}, {"label" : "addDelayM", "tail" : "(f: (Out) => URIO[Env1, zio.Duration]): WithState[State, Env1, In, Out]", "member" : "zio.Schedule.addDelayM", "link" : "zio\/Schedule.html#addDelayM[Env1<:Env](f:Out=>zio.URIO[Env1,zio.Duration]):zio.Schedule.WithState[Schedule.this.State,Env1,In,Out]", "kind" : "def"}, {"label" : "addDelay", "tail" : "(f: (Out) => zio.Duration): WithState[State, Env, In, Out]", "member" : "zio.Schedule.addDelay", "link" : "zio\/Schedule.html#addDelay(f:Out=>zio.Duration):zio.Schedule.WithState[Schedule.this.State,Env,In,Out]", "kind" : "def"}, {"label" : "|||", "tail" : "(that: Schedule[Env1, In2, Out1]): WithState[(State, State), Env1, Either[In, In2], Out1]", "member" : "zio.Schedule.|||", "link" : "zio\/Schedule.html#|||[Env1<:Env,Out1>:Out,In2](that:zio.Schedule[Env1,In2,Out1]):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,Either[In,In2],Out1]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Schedule[Env1, In1, Out2])(zippable: Zippable[Out, Out2]): WithState[(State, State), Env1, In1, Out]", "member" : "zio.Schedule.||", "link" : "zio\/Schedule.html#||[Env1<:Env,In1<:In,Out2](that:zio.Schedule[Env1,In1,Out2])(implicitzippable:zio.Zippable[Out,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,In1,zippable.Out]", "kind" : "def"}, {"label" : ">>>", "tail" : "(that: Schedule[Env1, Out, Out2]): WithState[(State, State), Env1, In, Out2]", "member" : "zio.Schedule.>>>", "link" : "zio\/Schedule.html#>>>[Env1<:Env,Out2](that:zio.Schedule[Env1,Out,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,In,Out2]", "kind" : "def"}, {"label" : "<<<", "tail" : "(that: Schedule[Env1, In2, In]): WithState[(State, State), Env1, In2, Out]", "member" : "zio.Schedule.<<<", "link" : "zio\/Schedule.html#<<<[Env1<:Env,In2](that:zio.Schedule[Env1,In2,In]):zio.Schedule.WithState[(that.State,Schedule.this.State),Env1,In2,Out]", "kind" : "def"}, {"label" : "<*>", "tail" : "(that: Schedule[Env1, In1, Out2])(zippable: Zippable[Out, Out2]): WithState[(State, State), Env1, In1, Out]", "member" : "zio.Schedule.<*>", "link" : "zio\/Schedule.html#<*>[Env1<:Env,In1<:In,Out2](that:zio.Schedule[Env1,In1,Out2])(implicitzippable:zio.Zippable[Out,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,In1,zippable.Out]", "kind" : "def"}, {"label" : "<*", "tail" : "(that: Schedule[Env1, In1, Out2]): WithState[(State, State), Env1, In1, Out]", "member" : "zio.Schedule.<*", "link" : "zio\/Schedule.html#<*[Env1<:Env,In1<:In,Out2](that:zio.Schedule[Env1,In1,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,In1,Out]", "kind" : "def"}, {"label" : "<||>", "tail" : "(that: Schedule[Env1, In1, Out2]): WithState[(State, State, Boolean), Env1, In1, Either[Out, Out2]]", "member" : "zio.Schedule.<||>", "link" : "zio\/Schedule.html#<||>[Env1<:Env,In1<:In,Out2](that:zio.Schedule[Env1,In1,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State,Boolean),Env1,In1,Either[Out,Out2]]", "kind" : "def"}, {"label" : "+++", "tail" : "(that: Schedule[Env1, In2, Out2]): WithState[(State, State), Env1, Either[In, In2], Either[Out, Out2]]", "member" : "zio.Schedule.+++", "link" : "zio\/Schedule.html#+++[Env1<:Env,In2,Out2](that:zio.Schedule[Env1,In2,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,Either[In,In2],Either[Out,Out2]]", "kind" : "def"}, {"label" : "++", "tail" : "(that: Schedule[Env1, In1, Out2]): WithState[(State, State, Boolean), Env1, In1, Out2]", "member" : "zio.Schedule.++", "link" : "zio\/Schedule.html#++[Env1<:Env,In1<:In,Out2>:Out](that:zio.Schedule[Env1,In1,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State,Boolean),Env1,In1,Out2]", "kind" : "def"}, {"label" : "*>", "tail" : "(that: Schedule[Env1, In1, Out2]): WithState[(State, State), Env1, In1, Out2]", "member" : "zio.Schedule.*>", "link" : "zio\/Schedule.html#*>[Env1<:Env,In1<:In,Out2](that:zio.Schedule[Env1,In1,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,In1,Out2]", "kind" : "def"}, {"label" : "***", "tail" : "(that: Schedule[Env1, In2, Out2]): WithState[(State, State), Env1, (In, In2), (Out, Out2)]", "member" : "zio.Schedule.***", "link" : "zio\/Schedule.html#***[Env1<:Env,In2,Out2](that:zio.Schedule[Env1,In2,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,(In,In2),(Out,Out2)]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Schedule[Env1, In1, Out2])(zippable: Zippable[Out, Out2]): WithState[(State, State), Env1, In1, Out]", "member" : "zio.Schedule.&&", "link" : "zio\/Schedule.html#&&[Env1<:Env,In1<:In,Out2](that:zio.Schedule[Env1,In1,Out2])(implicitzippable:zio.Zippable[Out,Out2]):zio.Schedule.WithState[(Schedule.this.State,that.State),Env1,In1,zippable.Out]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Schedule.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Schedule.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Schedule.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Schedule.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Schedule.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Schedule.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Schedule.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Schedule.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Schedule.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Schedule.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Schedule.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Schedule.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Schedule.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Schedule.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Schedule.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Schedule.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Schedule.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Schedule.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Schedule.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "step", "tail" : "(now: OffsetDateTime, in: In, state: State): ZIO[Env, Nothing, (State, Out, Decision)]", "member" : "zio.Schedule.step", "link" : "zio\/Schedule.html#step(now:java.time.OffsetDateTime,in:In,state:Schedule.this.State):zio.ZIO[Env,Nothing,(Schedule.this.State,Out,zio.Schedule.Decision)]", "kind" : "abstract def"}, {"label" : "initial", "tail" : "(): State", "member" : "zio.Schedule.initial", "link" : "zio\/Schedule.html#initial:Schedule.this.State", "kind" : "abstract def"}, {"member" : "zio.Schedule.State", "error" : "unsupported entity"}], "shortDescription" : "A Schedule[Env, In, Out] defines a recurring schedule, which consumes values of type In, andwhich returns values of type Out."}, {"name" : "zio.Semaphore", "shortDescription" : "", "object" : "zio\/Semaphore$.html", "members_object" : [{"label" : "make", "tail" : "(permits: Long): UIO[Semaphore]", "member" : "zio.Semaphore.make", "link" : "zio\/Semaphore$.html#make(permits:Long):zio.UIO[zio.Semaphore]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Semaphore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Semaphore$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Semaphore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Semaphore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Semaphore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Semaphore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Semaphore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Semaphore$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Semaphore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Semaphore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Semaphore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Semaphore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Semaphore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Semaphore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Semaphore$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Semaphore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Semaphore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Semaphore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Semaphore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.Supervisor", "shortDescription" : "A Supervisor[A] is allowed to supervise the launching and termination offibers, producing some visible value of type A from the supervision.", "object" : "zio\/Supervisor$.html", "members_class" : [{"label" : "++", "tail" : "(that0: Supervisor[B]): Supervisor[(A, B)]", "member" : "zio.Supervisor.++", "link" : "zio\/Supervisor.html#++[B](that0:zio.Supervisor[B]):zio.Supervisor[(A,B)]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Supervisor[B]", "member" : "zio.Supervisor.map", "link" : "zio\/Supervisor.html#map[B](f:A=>B):zio.Supervisor[B]", "kind" : "def"}, {"member" : "zio.Supervisor#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Supervisor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Supervisor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Supervisor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Supervisor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Supervisor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Supervisor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Supervisor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Supervisor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Supervisor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Supervisor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Supervisor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Supervisor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Supervisor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Supervisor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Supervisor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Supervisor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Supervisor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Supervisor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Supervisor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "value", "tail" : "(): UIO[A]", "member" : "zio.Supervisor.value", "link" : "zio\/Supervisor.html#value:zio.UIO[A]", "kind" : "abstract def"}], "members_object" : [{"label" : "none", "tail" : ": Supervisor[Unit]", "member" : "zio.Supervisor.none", "link" : "zio\/Supervisor$.html#none:zio.Supervisor[Unit]", "kind" : "val"}, {"label" : "fibersIn", "tail" : "(ref: AtomicReference[SortedSet[Fiber.Runtime[Any, Any]]]): UIO[Supervisor[SortedSet[Fiber.Runtime[Any, Any]]]]", "member" : "zio.Supervisor.fibersIn", "link" : "zio\/Supervisor$.html#fibersIn(ref:java.util.concurrent.atomic.AtomicReference[scala.collection.immutable.SortedSet[zio.Fiber.Runtime[Any,Any]]]):zio.UIO[zio.Supervisor[scala.collection.immutable.SortedSet[zio.Fiber.Runtime[Any,Any]]]]", "kind" : "def"}, {"label" : "fromZIO", "tail" : "(value: UIO[A]): Supervisor[A]", "member" : "zio.Supervisor.fromZIO", "link" : "zio\/Supervisor$.html#fromZIO[A](value:zio.UIO[A]):zio.Supervisor[A]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(value: UIO[A]): Supervisor[A]", "member" : "zio.Supervisor.fromEffect", "link" : "zio\/Supervisor$.html#fromEffect[A](value:zio.UIO[A]):zio.Supervisor[A]", "kind" : "def"}, {"label" : "track", "tail" : "(weak: Boolean): UIO[Supervisor[Chunk[Fiber.Runtime[Any, Any]]]]", "member" : "zio.Supervisor.track", "link" : "zio\/Supervisor$.html#track(weak:Boolean):zio.UIO[zio.Supervisor[zio.Chunk[zio.Fiber.Runtime[Any,Any]]]]", "kind" : "def"}, {"label" : "runtimeStats", "tail" : "(): Supervisor[RuntimeStats]", "member" : "zio.Supervisor.runtimeStats", "link" : "zio\/Supervisor$.html#runtimeStats:zio.Supervisor[zio.Supervisor.RuntimeStats]", "kind" : "def"}, {"label" : "RuntimeStats", "tail" : "", "member" : "zio.Supervisor.RuntimeStats", "link" : "zio\/Supervisor$.html#RuntimeStatsextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Supervisor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Supervisor$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Supervisor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Supervisor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Supervisor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Supervisor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Supervisor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Supervisor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Supervisor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Supervisor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Supervisor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Supervisor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Supervisor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Supervisor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Supervisor$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Supervisor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Supervisor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Supervisor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Supervisor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/Supervisor.html", "kind" : "class"}, {"name" : "zio.System", "object" : "zio\/System$.html", "members_object" : [{"label" : "OS", "tail" : "", "member" : "zio.System.OS", "link" : "zio\/System$.html#OS", "kind" : "object"}, {"label" : "OS", "tail" : "", "member" : "zio.System.OS", "link" : "zio\/System$.html#OSextendsAnyRef", "kind" : "sealed trait"}, {"label" : "os", "tail" : ": OS", "member" : "zio.System.os", "link" : "zio\/System$.html#os:zio.System.OS", "kind" : "lazy val"}, {"label" : "lineSeparator", "tail" : ": URIO[Has[System], String]", "member" : "zio.System.lineSeparator", "link" : "zio\/System$.html#lineSeparator:zio.URIO[zio.Has[zio.System],String]", "kind" : "val"}, {"label" : "propertyOrOption", "tail" : "(prop: => String, alt: => Option[String]): ZIO[Has[System], Throwable, Option[String]]", "member" : "zio.System.propertyOrOption", "link" : "zio\/System$.html#propertyOrOption(prop:=>String,alt:=>Option[String]):zio.ZIO[zio.Has[zio.System],Throwable,Option[String]]", "kind" : "def"}, {"label" : "propertyOrElse", "tail" : "(prop: => String, alt: => String): RIO[Has[System], String]", "member" : "zio.System.propertyOrElse", "link" : "zio\/System$.html#propertyOrElse(prop:=>String,alt:=>String):zio.RIO[zio.Has[zio.System],String]", "kind" : "def"}, {"label" : "property", "tail" : "(prop: => String): ZIO[Has[System], Throwable, Option[String]]", "member" : "zio.System.property", "link" : "zio\/System$.html#property(prop:=>String):zio.ZIO[zio.Has[zio.System],Throwable,Option[String]]", "kind" : "def"}, {"label" : "properties", "tail" : ": ZIO[Has[System], Throwable, Map[String, String]]", "member" : "zio.System.properties", "link" : "zio\/System$.html#properties:zio.ZIO[zio.Has[zio.System],Throwable,Map[String,String]]", "kind" : "val"}, {"label" : "envs", "tail" : ": ZIO[Has[System], SecurityException, Map[String, String]]", "member" : "zio.System.envs", "link" : "zio\/System$.html#envs:zio.ZIO[zio.Has[zio.System],SecurityException,Map[String,String]]", "kind" : "val"}, {"label" : "envOrOption", "tail" : "(variable: => String, alt: => Option[String]): ZIO[Has[System], SecurityException, Option[String]]", "member" : "zio.System.envOrOption", "link" : "zio\/System$.html#envOrOption(variable:=>String,alt:=>Option[String]):zio.ZIO[zio.Has[zio.System],SecurityException,Option[String]]", "kind" : "def"}, {"label" : "envOrElse", "tail" : "(variable: => String, alt: => String): ZIO[Has[System], SecurityException, String]", "member" : "zio.System.envOrElse", "link" : "zio\/System$.html#envOrElse(variable:=>String,alt:=>String):zio.ZIO[zio.Has[zio.System],SecurityException,String]", "kind" : "def"}, {"label" : "env", "tail" : "(variable: => String): ZIO[Has[System], SecurityException, Option[String]]", "member" : "zio.System.env", "link" : "zio\/System$.html#env(variable:=>String):zio.ZIO[zio.Has[zio.System],SecurityException,Option[String]]", "kind" : "def"}, {"label" : "SystemLive", "tail" : "", "member" : "zio.System.SystemLive", "link" : "zio\/System$.html#SystemLive", "kind" : "object"}, {"label" : "live", "tail" : ": Layer[Nothing, Has[System]]", "member" : "zio.System.live", "link" : "zio\/System$.html#live:zio.Layer[Nothing,zio.Has[zio.System]]", "kind" : "val"}, {"label" : "any", "tail" : ": ZLayer[Has[System], Nothing, Has[System]]", "member" : "zio.System.any", "link" : "zio\/System$.html#any:zio.ZLayer[zio.Has[zio.System],Nothing,zio.Has[zio.System]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/System$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/System$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/System$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/System$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/System$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/System$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/System$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/System$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/System$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/System$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/System$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/System$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/System$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/System$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/System$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/System$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/System$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/System$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/System$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/System.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/System.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/System.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/System.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/System.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/System.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/System.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/System.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/System.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/System.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/System.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/System.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/System.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/System.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/System.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/System.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/System.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/System.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/System.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/System.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "propertyOrOption", "tail" : "(prop: => String, alt: => Option[String]): IO[Throwable, Option[String]]", "member" : "zio.System.propertyOrOption", "link" : "zio\/System.html#propertyOrOption(prop:=>String,alt:=>Option[String]):zio.IO[Throwable,Option[String]]", "kind" : "abstract def"}, {"label" : "propertyOrElse", "tail" : "(prop: => String, alt: => String): IO[Throwable, String]", "member" : "zio.System.propertyOrElse", "link" : "zio\/System.html#propertyOrElse(prop:=>String,alt:=>String):zio.IO[Throwable,String]", "kind" : "abstract def"}, {"label" : "property", "tail" : "(prop: => String): IO[Throwable, Option[String]]", "member" : "zio.System.property", "link" : "zio\/System.html#property(prop:=>String):zio.IO[Throwable,Option[String]]", "kind" : "abstract def"}, {"label" : "properties", "tail" : "(): IO[Throwable, Map[String, String]]", "member" : "zio.System.properties", "link" : "zio\/System.html#properties:zio.IO[Throwable,Map[String,String]]", "kind" : "abstract def"}, {"label" : "lineSeparator", "tail" : "(): UIO[String]", "member" : "zio.System.lineSeparator", "link" : "zio\/System.html#lineSeparator:zio.UIO[String]", "kind" : "abstract def"}, {"label" : "envs", "tail" : "(): IO[SecurityException, Map[String, String]]", "member" : "zio.System.envs", "link" : "zio\/System.html#envs:zio.IO[SecurityException,Map[String,String]]", "kind" : "abstract def"}, {"label" : "envOrOption", "tail" : "(variable: => String, alt: => Option[String]): IO[SecurityException, Option[String]]", "member" : "zio.System.envOrOption", "link" : "zio\/System.html#envOrOption(variable:=>String,alt:=>Option[String]):zio.IO[SecurityException,Option[String]]", "kind" : "abstract def"}, {"label" : "envOrElse", "tail" : "(variable: => String, alt: => String): IO[SecurityException, String]", "member" : "zio.System.envOrElse", "link" : "zio\/System.html#envOrElse(variable:=>String,alt:=>String):zio.IO[SecurityException,String]", "kind" : "abstract def"}, {"label" : "env", "tail" : "(variable: => String): IO[SecurityException, Option[String]]", "member" : "zio.System.env", "link" : "zio\/System.html#env(variable:=>String):zio.IO[SecurityException,Option[String]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.Task", "shortDescription" : "", "object" : "zio\/Task$.html", "members_object" : [{"label" : "yieldNow", "tail" : ": UIO[Unit]", "member" : "zio.Task.yieldNow", "link" : "zio\/Task$.html#yieldNow:zio.UIO[Unit]", "kind" : "val"}, {"label" : "withRuntimeConfig", "tail" : "(runtimeConfig: => RuntimeConfig)(task: => Task[A]): Task[A]", "member" : "zio.Task.withRuntimeConfig", "link" : "zio\/Task$.html#withRuntimeConfig[A](runtimeConfig:=>zio.RuntimeConfig)(task:=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "whenZIO", "tail" : "(b: => Task[Boolean]): WhenZIO[Any, Throwable]", "member" : "zio.Task.whenZIO", "link" : "zio\/Task$.html#whenZIO(b:=>zio.Task[Boolean]):zio.ZIO.WhenZIO[Any,Throwable]", "kind" : "def"}, {"label" : "whenM", "tail" : "(b: => Task[Boolean]): WhenZIO[Any, Throwable]", "member" : "zio.Task.whenM", "link" : "zio\/Task$.html#whenM(b:=>zio.Task[Boolean]):zio.ZIO.WhenZIO[Any,Throwable]", "kind" : "def"}, {"label" : "whenCaseZIO", "tail" : "(a: => Task[A])(pf: PartialFunction[A, Task[B]]): Task[Option[B]]", "member" : "zio.Task.whenCaseZIO", "link" : "zio\/Task$.html#whenCaseZIO[A,B](a:=>zio.Task[A])(pf:PartialFunction[A,zio.Task[B]]):zio.Task[Option[B]]", "kind" : "def"}, {"label" : "whenCaseM", "tail" : "(a: => Task[A])(pf: PartialFunction[A, Task[B]]): Task[Option[B]]", "member" : "zio.Task.whenCaseM", "link" : "zio\/Task$.html#whenCaseM[A,B](a:=>zio.Task[A])(pf:PartialFunction[A,zio.Task[B]]):zio.Task[Option[B]]", "kind" : "def"}, {"label" : "whenCase", "tail" : "(a: => A)(pf: PartialFunction[A, Task[B]]): Task[Option[B]]", "member" : "zio.Task.whenCase", "link" : "zio\/Task$.html#whenCase[A,B](a:=>A)(pf:PartialFunction[A,zio.Task[B]]):zio.Task[Option[B]]", "kind" : "def"}, {"label" : "when", "tail" : "(b: => Boolean)(task: => Task[A]): Task[Option[A]]", "member" : "zio.Task.when", "link" : "zio\/Task$.html#when[A](b:=>Boolean)(task:=>zio.Task[A]):zio.Task[Option[A]]", "kind" : "def"}, {"label" : "untraced", "tail" : "(task: => Task[A]): Task[A]", "member" : "zio.Task.untraced", "link" : "zio\/Task$.html#untraced[A](task:=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "unsandbox", "tail" : "(v: => IO[Cause[Throwable], A]): Task[A]", "member" : "zio.Task.unsandbox", "link" : "zio\/Task$.html#unsandbox[A](v:=>zio.IO[zio.Cause[Throwable],A]):zio.Task[A]", "kind" : "def"}, {"label" : "unlessZIO", "tail" : "(b: => Task[Boolean]): UnlessZIO[Any, Throwable]", "member" : "zio.Task.unlessZIO", "link" : "zio\/Task$.html#unlessZIO(b:=>zio.Task[Boolean]):zio.ZIO.UnlessZIO[Any,Throwable]", "kind" : "def"}, {"label" : "unlessM", "tail" : "(b: => Task[Boolean]): UnlessZIO[Any, Throwable]", "member" : "zio.Task.unlessM", "link" : "zio\/Task$.html#unlessM(b:=>zio.Task[Boolean]):zio.ZIO.UnlessZIO[Any,Throwable]", "kind" : "def"}, {"label" : "unless", "tail" : "(b: => Boolean)(zio: => Task[A]): Task[Option[A]]", "member" : "zio.Task.unless", "link" : "zio\/Task$.html#unless[A](b:=>Boolean)(zio:=>zio.Task[A]):zio.Task[Option[A]]", "kind" : "def"}, {"label" : "uninterruptibleMask", "tail" : "(k: (InterruptStatusRestore) => Task[A]): Task[A]", "member" : "zio.Task.uninterruptibleMask", "link" : "zio\/Task$.html#uninterruptibleMask[A](k:zio.ZIO.InterruptStatusRestore=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "uninterruptible", "tail" : "(task: => Task[A]): Task[A]", "member" : "zio.Task.uninterruptible", "link" : "zio\/Task$.html#uninterruptible[A](task:=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "unit", "tail" : ": UIO[Unit]", "member" : "zio.Task.unit", "link" : "zio\/Task$.html#unit:zio.UIO[Unit]", "kind" : "val"}, {"label" : "traced", "tail" : "(task: => Task[A]): Task[A]", "member" : "zio.Task.traced", "link" : "zio\/Task$.html#traced[A](task:=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "trace", "tail" : "(): UIO[ZTrace]", "member" : "zio.Task.trace", "link" : "zio\/Task$.html#trace:zio.UIO[zio.ZTrace]", "kind" : "def"}, {"label" : "suspendWith", "tail" : "(f: (RuntimeConfig, FiberId) => Task[A]): Task[A]", "member" : "zio.Task.suspendWith", "link" : "zio\/Task$.html#suspendWith[A](f:(zio.RuntimeConfig,zio.FiberId)=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "suspendSucceedWith", "tail" : "(f: (RuntimeConfig, FiberId) => Task[A]): Task[A]", "member" : "zio.Task.suspendSucceedWith", "link" : "zio\/Task$.html#suspendSucceedWith[A](f:(zio.RuntimeConfig,zio.FiberId)=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "suspendSucceed", "tail" : "(task: => Task[A]): Task[A]", "member" : "zio.Task.suspendSucceed", "link" : "zio\/Task$.html#suspendSucceed[A](task:=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(task: => Task[A]): Task[A]", "member" : "zio.Task.suspend", "link" : "zio\/Task$.html#suspend[A](task:=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "succeedBlocking", "tail" : "(a: => A): UIO[A]", "member" : "zio.Task.succeedBlocking", "link" : "zio\/Task$.html#succeedBlocking[A](a:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "succeed", "tail" : "(a: => A): UIO[A]", "member" : "zio.Task.succeed", "link" : "zio\/Task$.html#succeed[A](a:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "some", "tail" : "(a: => A): Task[Option[A]]", "member" : "zio.Task.some", "link" : "zio\/Task$.html#some[A](a:=>A):zio.Task[Option[A]]", "kind" : "def"}, {"label" : "runtimeConfig", "tail" : ": UIO[RuntimeConfig]", "member" : "zio.Task.runtimeConfig", "link" : "zio\/Task$.html#runtimeConfig:zio.UIO[zio.RuntimeConfig]", "kind" : "val"}, {"label" : "runtime", "tail" : "(): UIO[Runtime[Any]]", "member" : "zio.Task.runtime", "link" : "zio\/Task$.html#runtime:zio.UIO[zio.Runtime[Any]]", "kind" : "def"}, {"label" : "right", "tail" : "(b: => B): Task[Either[Nothing, B]]", "member" : "zio.Task.right", "link" : "zio\/Task$.html#right[B](b:=>B):zio.Task[Either[Nothing,B]]", "kind" : "def"}, {"label" : "reserve", "tail" : "(reservation: => Task[Reservation[Any, Throwable, A]])(use: (A) => Task[B]): Task[B]", "member" : "zio.Task.reserve", "link" : "zio\/Task$.html#reserve[A,B](reservation:=>zio.Task[zio.Reservation[Any,Throwable,A]])(use:A=>zio.Task[B]):zio.Task[B]", "kind" : "def"}, {"label" : "require", "tail" : "(error: => Throwable): (Task[Option[A]]) => Task[A]", "member" : "zio.Task.require", "link" : "zio\/Task$.html#require[A](error:=>Throwable):zio.Task[Option[A]]=>zio.Task[A]", "kind" : "def"}, {"label" : "replicateZIODiscard", "tail" : "(n: => Int)(effect: => Task[A]): Task[Unit]", "member" : "zio.Task.replicateZIODiscard", "link" : "zio\/Task$.html#replicateZIODiscard[A](n:=>Int)(effect:=>zio.Task[A]):zio.Task[Unit]", "kind" : "def"}, {"label" : "replicateZIO", "tail" : "(n: => Int)(effect: => Task[A]): Task[Iterable[A]]", "member" : "zio.Task.replicateZIO", "link" : "zio\/Task$.html#replicateZIO[A](n:=>Int)(effect:=>zio.Task[A]):zio.Task[Iterable[A]]", "kind" : "def"}, {"label" : "replicateM_", "tail" : "(n: => Int)(effect: => Task[A]): Task[Unit]", "member" : "zio.Task.replicateM_", "link" : "zio\/Task$.html#replicateM_[A](n:=>Int)(effect:=>zio.Task[A]):zio.Task[Unit]", "kind" : "def"}, {"label" : "replicateM", "tail" : "(n: => Int)(effect: => Task[A]): Task[Iterable[A]]", "member" : "zio.Task.replicateM", "link" : "zio\/Task$.html#replicateM[A](n:=>Int)(effect:=>zio.Task[A]):zio.Task[Iterable[A]]", "kind" : "def"}, {"label" : "replicate", "tail" : "(n: => Int)(effect: => Task[A]): Iterable[Task[A]]", "member" : "zio.Task.replicate", "link" : "zio\/Task$.html#replicate[A](n:=>Int)(effect:=>zio.Task[A]):Iterable[zio.Task[A]]", "kind" : "def"}, {"label" : "reduceAllPar", "tail" : "(a: => Task[A], as: => Iterable[Task[A]])(f: (A, A) => A): Task[A]", "member" : "zio.Task.reduceAllPar", "link" : "zio\/Task$.html#reduceAllPar[A](a:=>zio.Task[A],as:=>Iterable[zio.Task[A]])(f:(A,A)=>A):zio.Task[A]", "kind" : "def"}, {"label" : "reduceAll", "tail" : "(a: => Task[A], as: => Iterable[Task[A]])(f: (A, A) => A): Task[A]", "member" : "zio.Task.reduceAll", "link" : "zio\/Task$.html#reduceAll[A](a:=>zio.Task[A],as:=>Iterable[zio.Task[A]])(f:(A,A)=>A):zio.Task[A]", "kind" : "def"}, {"label" : "raceAll", "tail" : "(task: => Task[A], ios: => Iterable[Task[A]]): Task[A]", "member" : "zio.Task.raceAll", "link" : "zio\/Task$.html#raceAll[A](task:=>zio.Task[A],ios:=>Iterable[zio.Task[A]]):zio.Task[A]", "kind" : "def"}, {"label" : "partitionParN", "tail" : "(n: => Int)(in: => Iterable[A])(f: (A) => Task[B]): Task[(Iterable[Throwable], Iterable[B])]", "member" : "zio.Task.partitionParN", "link" : "zio\/Task$.html#partitionParN[A,B](n:=>Int)(in:=>Iterable[A])(f:A=>zio.Task[B]):zio.Task[(Iterable[Throwable],Iterable[B])]", "kind" : "def"}, {"label" : "partitionPar", "tail" : "(in: => Iterable[A])(f: (A) => Task[B]): Task[(Iterable[Throwable], Iterable[B])]", "member" : "zio.Task.partitionPar", "link" : "zio\/Task$.html#partitionPar[A,B](in:=>Iterable[A])(f:A=>zio.Task[B]):zio.Task[(Iterable[Throwable],Iterable[B])]", "kind" : "def"}, {"label" : "partition", "tail" : "(in: => Iterable[A])(f: (A) => Task[B]): Task[(Iterable[Throwable], Iterable[B])]", "member" : "zio.Task.partition", "link" : "zio\/Task$.html#partition[A,B](in:=>Iterable[A])(f:A=>zio.Task[B]):zio.Task[(Iterable[Throwable],Iterable[B])]", "kind" : "def"}, {"label" : "onExecutor", "tail" : "(executor: => Executor)(task: Task[A]): Task[A]", "member" : "zio.Task.onExecutor", "link" : "zio\/Task$.html#onExecutor[A](executor:=>zio.Executor)(task:zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "not", "tail" : "(effect: => Task[Boolean]): Task[Boolean]", "member" : "zio.Task.not", "link" : "zio\/Task$.html#not(effect:=>zio.Task[Boolean]):zio.Task[Boolean]", "kind" : "def"}, {"label" : "noneOrFailWith", "tail" : "(o: => Option[O])(f: (O) => Throwable): Task[Unit]", "member" : "zio.Task.noneOrFailWith", "link" : "zio\/Task$.html#noneOrFailWith[O](o:=>Option[O])(f:O=>Throwable):zio.Task[Unit]", "kind" : "def"}, {"label" : "noneOrFail", "tail" : "(o: => Option[Throwable]): Task[Unit]", "member" : "zio.Task.noneOrFail", "link" : "zio\/Task$.html#noneOrFail(o:=>Option[Throwable]):zio.Task[Unit]", "kind" : "def"}, {"label" : "none", "tail" : ": Task[Option[Nothing]]", "member" : "zio.Task.none", "link" : "zio\/Task$.html#none:zio.Task[Option[Nothing]]", "kind" : "val"}, {"label" : "never", "tail" : ": UIO[Nothing]", "member" : "zio.Task.never", "link" : "zio\/Task$.html#never:zio.UIO[Nothing]", "kind" : "val"}, {"label" : "mergeAllPar", "tail" : "(in: => Iterable[Task[A]])(zero: => B)(f: (B, A) => B): Task[B]", "member" : "zio.Task.mergeAllPar", "link" : "zio\/Task$.html#mergeAllPar[A,B](in:=>Iterable[zio.Task[A]])(zero:=>B)(f:(B,A)=>B):zio.Task[B]", "kind" : "def"}, {"label" : "mergeAll", "tail" : "(in: Iterable[Task[A]])(zero: => B)(f: (B, A) => B): Task[B]", "member" : "zio.Task.mergeAll", "link" : "zio\/Task$.html#mergeAll[A,B](in:Iterable[zio.Task[A]])(zero:=>B)(f:(B,A)=>B):zio.Task[B]", "kind" : "def"}, {"label" : "memoize", "tail" : "(f: (A) => Task[B]): UIO[(A) => Task[B]]", "member" : "zio.Task.memoize", "link" : "zio\/Task$.html#memoize[A,B](f:A=>zio.Task[B]):zio.UIO[A=>zio.Task[B]]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(task1: => Task[A], task2: => Task[B], task3: => Task[C], task4: => Task[D])(f: (A, B, C, D) => F): Task[F]", "member" : "zio.Task.mapParN", "link" : "zio\/Task$.html#mapParN[A,B,C,D,F](task1:=>zio.Task[A],task2:=>zio.Task[B],task3:=>zio.Task[C],task4:=>zio.Task[D])(f:(A,B,C,D)=>F):zio.Task[F]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(task1: => Task[A], task2: => Task[B], task3: => Task[C])(f: (A, B, C) => D): Task[D]", "member" : "zio.Task.mapParN", "link" : "zio\/Task$.html#mapParN[A,B,C,D](task1:=>zio.Task[A],task2:=>zio.Task[B],task3:=>zio.Task[C])(f:(A,B,C)=>D):zio.Task[D]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(task1: => Task[A], task2: => Task[B])(f: (A, B) => C): Task[C]", "member" : "zio.Task.mapParN", "link" : "zio\/Task$.html#mapParN[A,B,C](task1:=>zio.Task[A],task2:=>zio.Task[B])(f:(A,B)=>C):zio.Task[C]", "kind" : "def"}, {"label" : "mapN", "tail" : "(task1: => Task[A], task2: => Task[B], task3: => Task[C], task4: => Task[D])(f: (A, B, C, D) => F): Task[F]", "member" : "zio.Task.mapN", "link" : "zio\/Task$.html#mapN[A,B,C,D,F](task1:=>zio.Task[A],task2:=>zio.Task[B],task3:=>zio.Task[C],task4:=>zio.Task[D])(f:(A,B,C,D)=>F):zio.Task[F]", "kind" : "def"}, {"label" : "mapN", "tail" : "(task1: => Task[A], task2: => Task[B], task3: => Task[C])(f: (A, B, C) => D): Task[D]", "member" : "zio.Task.mapN", "link" : "zio\/Task$.html#mapN[A,B,C,D](task1:=>zio.Task[A],task2:=>zio.Task[B],task3:=>zio.Task[C])(f:(A,B,C)=>D):zio.Task[D]", "kind" : "def"}, {"label" : "mapN", "tail" : "(task1: => Task[A], task2: => Task[B])(f: (A, B) => C): Task[C]", "member" : "zio.Task.mapN", "link" : "zio\/Task$.html#mapN[A,B,C](task1:=>zio.Task[A],task2:=>zio.Task[B])(f:(A,B)=>C):zio.Task[C]", "kind" : "def"}, {"label" : "loopDiscard", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => Task[Any]): Task[Unit]", "member" : "zio.Task.loopDiscard", "link" : "zio\/Task$.html#loopDiscard[S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.Task[Any]):zio.Task[Unit]", "kind" : "def"}, {"label" : "loop_", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => Task[Any]): Task[Unit]", "member" : "zio.Task.loop_", "link" : "zio\/Task$.html#loop_[S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.Task[Any]):zio.Task[Unit]", "kind" : "def"}, {"label" : "loop", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => Task[A]): Task[List[A]]", "member" : "zio.Task.loop", "link" : "zio\/Task$.html#loop[A,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.Task[A]):zio.Task[List[A]]", "kind" : "def"}, {"label" : "lock", "tail" : "(executor: => Executor)(task: => Task[A]): Task[A]", "member" : "zio.Task.lock", "link" : "zio\/Task$.html#lock[A](executor:=>zio.Executor)(task:=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "left", "tail" : "(a: => A): Task[Either[A, Nothing]]", "member" : "zio.Task.left", "link" : "zio\/Task$.html#left[A](a:=>A):zio.Task[Either[A,Nothing]]", "kind" : "def"}, {"label" : "iterate", "tail" : "(initial: => S)(cont: (S) => Boolean)(body: (S) => Task[S]): Task[S]", "member" : "zio.Task.iterate", "link" : "zio\/Task$.html#iterate[S](initial:=>S)(cont:S=>Boolean)(body:S=>zio.Task[S]):zio.Task[S]", "kind" : "def"}, {"label" : "interruptibleMask", "tail" : "(k: (InterruptStatusRestore) => Task[A]): Task[A]", "member" : "zio.Task.interruptibleMask", "link" : "zio\/Task$.html#interruptibleMask[A](k:zio.ZIO.InterruptStatusRestore=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "interruptible", "tail" : "(task: => Task[A]): Task[A]", "member" : "zio.Task.interruptible", "link" : "zio\/Task$.html#interruptible[A](task:=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "interruptAs", "tail" : "(fiberId: => FiberId): UIO[Nothing]", "member" : "zio.Task.interruptAs", "link" : "zio\/Task$.html#interruptAs(fiberId:=>zio.FiberId):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "interrupt", "tail" : ": UIO[Nothing]", "member" : "zio.Task.interrupt", "link" : "zio\/Task$.html#interrupt:zio.UIO[Nothing]", "kind" : "val"}, {"label" : "ifZIO", "tail" : "(b: => Task[Boolean]): IfZIO[Any, Throwable]", "member" : "zio.Task.ifZIO", "link" : "zio\/Task$.html#ifZIO(b:=>zio.Task[Boolean]):zio.ZIO.IfZIO[Any,Throwable]", "kind" : "def"}, {"label" : "ifM", "tail" : "(b: => Task[Boolean]): IfZIO[Any, Throwable]", "member" : "zio.Task.ifM", "link" : "zio\/Task$.html#ifM(b:=>zio.Task[Boolean]):zio.ZIO.IfZIO[Any,Throwable]", "kind" : "def"}, {"label" : "haltWith", "tail" : "(function: (() => ZTrace) => Cause[E]): Task[Nothing]", "member" : "zio.Task.haltWith", "link" : "zio\/Task$.html#haltWith[E<:Throwable](function:(()=>zio.ZTrace)=>zio.Cause[E]):zio.Task[Nothing]", "kind" : "def"}, {"label" : "halt", "tail" : "(cause: => Cause[Throwable]): Task[Nothing]", "member" : "zio.Task.halt", "link" : "zio\/Task$.html#halt(cause:=>zio.Cause[Throwable]):zio.Task[Nothing]", "kind" : "def"}, {"label" : "getOrFail", "tail" : "(v: => Option[A]): Task[A]", "member" : "zio.Task.getOrFail", "link" : "zio\/Task$.html#getOrFail[A](v:=>Option[A]):zio.Task[A]", "kind" : "final def"}, {"label" : "fromTry", "tail" : "(value: => Try[A]): Task[A]", "member" : "zio.Task.fromTry", "link" : "zio\/Task$.html#fromTry[A](value:=>scala.util.Try[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromFutureInterrupt", "tail" : "(make: (ExecutionContext) => Future[A]): Task[A]", "member" : "zio.Task.fromFutureInterrupt", "link" : "zio\/Task$.html#fromFutureInterrupt[A](make:scala.concurrent.ExecutionContext=>scala.concurrent.Future[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromFuture", "tail" : "(make: (ExecutionContext) => Future[A]): Task[A]", "member" : "zio.Task.fromFuture", "link" : "zio\/Task$.html#fromFuture[A](make:scala.concurrent.ExecutionContext=>scala.concurrent.Future[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromFiberZIO", "tail" : "(fiber: => Task[Fiber[Throwable, A]]): Task[A]", "member" : "zio.Task.fromFiberZIO", "link" : "zio\/Task$.html#fromFiberZIO[A](fiber:=>zio.Task[zio.Fiber[Throwable,A]]):zio.Task[A]", "kind" : "def"}, {"label" : "fromFiberM", "tail" : "(fiber: => Task[Fiber[Throwable, A]]): Task[A]", "member" : "zio.Task.fromFiberM", "link" : "zio\/Task$.html#fromFiberM[A](fiber:=>zio.Task[zio.Fiber[Throwable,A]]):zio.Task[A]", "kind" : "def"}, {"label" : "fromFiber", "tail" : "(fiber: => Fiber[Throwable, A]): Task[A]", "member" : "zio.Task.fromFiber", "link" : "zio\/Task$.html#fromFiber[A](fiber:=>zio.Fiber[Throwable,A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(v: => Either[Throwable, A]): Task[A]", "member" : "zio.Task.fromEither", "link" : "zio\/Task$.html#fromEither[A](v:=>Either[Throwable,A]):zio.Task[A]", "kind" : "def"}, {"label" : "from", "tail" : "(input: => Input)(constructor: ZIOConstructor[Any, Throwable, Input]): ZIO[OutEnvironment, OutError, OutSuccess]", "member" : "zio.Task.from", "link" : "zio\/Task$.html#from[Input](input:=>Input)(implicitconstructor:zio.ZIO.ZIOConstructor[Any,Throwable,Input]):zio.ZIO[constructor.OutEnvironment,constructor.OutError,constructor.OutSuccess]", "kind" : "def"}, {"label" : "forkAllDiscard", "tail" : "(as: => Iterable[Task[A]]): UIO[Unit]", "member" : "zio.Task.forkAllDiscard", "link" : "zio\/Task$.html#forkAllDiscard[A](as:=>Iterable[zio.Task[A]]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "forkAll_", "tail" : "(as: => Iterable[Task[A]]): UIO[Unit]", "member" : "zio.Task.forkAll_", "link" : "zio\/Task$.html#forkAll_[A](as:=>Iterable[zio.Task[A]]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "forkAll", "tail" : "(as: Collection[Task[A]])(bf: zio.BuildFrom[Collection[Task[A]], A, Collection[A]]): UIO[Fiber[Throwable, Collection[A]]]", "member" : "zio.Task.forkAll", "link" : "zio\/Task$.html#forkAll[A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.Task[A]])(implicitbf:zio.BuildFrom[Collection[zio.Task[A]],A,Collection[A]]):zio.UIO[zio.Fiber[Throwable,Collection[A]]]", "kind" : "def"}, {"label" : "foreachParNDiscard", "tail" : "(n: => Int)(as: => Iterable[A])(f: (A) => Task[Any]): Task[Unit]", "member" : "zio.Task.foreachParNDiscard", "link" : "zio\/Task$.html#foreachParNDiscard[A,B](n:=>Int)(as:=>Iterable[A])(f:A=>zio.Task[Any]):zio.Task[Unit]", "kind" : "def"}, {"label" : "foreachParN_", "tail" : "(n: => Int)(as: => Iterable[A])(f: (A) => Task[Any]): Task[Unit]", "member" : "zio.Task.foreachParN_", "link" : "zio\/Task$.html#foreachParN_[A,B](n:=>Int)(as:=>Iterable[A])(f:A=>zio.Task[Any]):zio.Task[Unit]", "kind" : "def"}, {"label" : "foreachParDiscard", "tail" : "(as: => Iterable[A])(f: (A) => Task[Any]): Task[Unit]", "member" : "zio.Task.foreachParDiscard", "link" : "zio\/Task$.html#foreachParDiscard[A,B](as:=>Iterable[A])(f:A=>zio.Task[Any]):zio.Task[Unit]", "kind" : "def"}, {"label" : "foreachPar_", "tail" : "(as: => Iterable[A])(f: (A) => Task[Any]): Task[Unit]", "member" : "zio.Task.foreachPar_", "link" : "zio\/Task$.html#foreachPar_[A,B](as:=>Iterable[A])(f:A=>zio.Task[Any]):zio.Task[Unit]", "kind" : "def"}, {"label" : "foreachDiscard", "tail" : "(as: => Iterable[A])(f: (A) => Task[Any]): Task[Unit]", "member" : "zio.Task.foreachDiscard", "link" : "zio\/Task$.html#foreachDiscard[A](as:=>Iterable[A])(f:A=>zio.Task[Any]):zio.Task[Unit]", "kind" : "def"}, {"label" : "foreach_", "tail" : "(as: => Iterable[A])(f: (A) => Task[Any]): Task[Unit]", "member" : "zio.Task.foreach_", "link" : "zio\/Task$.html#foreach_[A](as:=>Iterable[A])(f:A=>zio.Task[Any]):zio.Task[Unit]", "kind" : "def"}, {"label" : "foreachParN", "tail" : "(n: => Int)(as: Collection[A])(fn: (A) => Task[B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): Task[Collection[B]]", "member" : "zio.Task.foreachParN", "link" : "zio\/Task$.html#foreachParN[A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[A])(fn:A=>zio.Task[B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.Task[Collection[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: NonEmptyChunk[A])(fn: (A) => Task[B]): Task[NonEmptyChunk[B]]", "member" : "zio.Task.foreachPar", "link" : "zio\/Task$.html#foreachPar[A,B](as:zio.NonEmptyChunk[A])(fn:A=>zio.Task[B]):zio.Task[zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => Task[(Key2, Value2)]): Task[Map[Key2, Value2]]", "member" : "zio.Task.foreachPar", "link" : "zio\/Task$.html#foreachPar[Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.Task[(Key2,Value2)]):zio.Task[Map[Key2,Value2]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: Array[A])(fn: (A) => Task[B])(arg0: ClassTag[B]): Task[Array[B]]", "member" : "zio.Task.foreachPar", "link" : "zio\/Task$.html#foreachPar[A,B](as:Array[A])(fn:A=>zio.Task[B])(implicitevidence$4:scala.reflect.ClassTag[B]):zio.Task[Array[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: Set[A])(fn: (A) => Task[B]): Task[Set[B]]", "member" : "zio.Task.foreachPar", "link" : "zio\/Task$.html#foreachPar[A,B](as:Set[A])(fn:A=>zio.Task[B]):zio.Task[Set[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: Collection[A])(fn: (A) => Task[B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): Task[Collection[B]]", "member" : "zio.Task.foreachPar", "link" : "zio\/Task$.html#foreachPar[A,B,Collection[+Element]<:Iterable[Element]](as:Collection[A])(fn:A=>zio.Task[B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.Task[Collection[B]]", "kind" : "def"}, {"label" : "foreachExec", "tail" : "(as: Collection[A])(exec: => ExecutionStrategy)(f: (A) => Task[B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): Task[Collection[B]]", "member" : "zio.Task.foreachExec", "link" : "zio\/Task$.html#foreachExec[A,B,Collection[+Element]<:Iterable[Element]](as:Collection[A])(exec:=>zio.ExecutionStrategy)(f:A=>zio.Task[B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.Task[Collection[B]]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(in: NonEmptyChunk[A])(f: (A) => Task[B]): Task[NonEmptyChunk[B]]", "member" : "zio.Task.foreach", "link" : "zio\/Task$.html#foreach[A,B](in:zio.NonEmptyChunk[A])(f:A=>zio.Task[B]):zio.Task[zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Option[A])(f: (A) => Task[B]): Task[Option[B]]", "member" : "zio.Task.foreach", "link" : "zio\/Task$.html#foreach[A,B](in:Option[A])(f:A=>zio.Task[B]):zio.Task[Option[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => Task[(Key2, Value2)]): Task[Map[Key2, Value2]]", "member" : "zio.Task.foreach", "link" : "zio\/Task$.html#foreach[Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.Task[(Key2,Value2)]):zio.Task[Map[Key2,Value2]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Array[A])(f: (A) => Task[B])(arg0: ClassTag[B]): Task[Array[B]]", "member" : "zio.Task.foreach", "link" : "zio\/Task$.html#foreach[A,B](in:Array[A])(f:A=>zio.Task[B])(implicitevidence$3:scala.reflect.ClassTag[B]):zio.Task[Array[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Set[A])(f: (A) => Task[B]): Task[Set[B]]", "member" : "zio.Task.foreach", "link" : "zio\/Task$.html#foreach[A,B](in:Set[A])(f:A=>zio.Task[B]):zio.Task[Set[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Collection[A])(f: (A) => Task[B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): Task[Collection[B]]", "member" : "zio.Task.foreach", "link" : "zio\/Task$.html#foreach[A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.Task[B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.Task[Collection[B]]", "kind" : "def"}, {"label" : "forall", "tail" : "(as: => Iterable[A])(f: (A) => Task[Boolean]): Task[Boolean]", "member" : "zio.Task.forall", "link" : "zio\/Task$.html#forall[A](as:=>Iterable[A])(f:A=>zio.Task[Boolean]):zio.Task[Boolean]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(in: => Iterable[A])(zero: => S)(f: (A, S) => Task[S]): Task[S]", "member" : "zio.Task.foldRight", "link" : "zio\/Task$.html#foldRight[S,A](in:=>Iterable[A])(zero:=>S)(f:(A,S)=>zio.Task[S]):zio.Task[S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(in: => Iterable[A])(zero: => S)(f: (S, A) => Task[S]): Task[S]", "member" : "zio.Task.foldLeft", "link" : "zio\/Task$.html#foldLeft[S,A](in:=>Iterable[A])(zero:=>S)(f:(S,A)=>zio.Task[S]):zio.Task[S]", "kind" : "def"}, {"label" : "flatten", "tail" : "(task: => Task[Task[A]]): Task[A]", "member" : "zio.Task.flatten", "link" : "zio\/Task$.html#flatten[A](task:=>zio.Task[zio.Task[A]]):zio.Task[A]", "kind" : "def"}, {"label" : "firstSuccessOf", "tail" : "(task: => Task[A], rest: => Iterable[Task[A]]): Task[A]", "member" : "zio.Task.firstSuccessOf", "link" : "zio\/Task$.html#firstSuccessOf[A](task:=>zio.Task[A],rest:=>Iterable[zio.Task[A]]):zio.Task[A]", "kind" : "def"}, {"label" : "filterNotPar", "tail" : "(as: Set[A])(f: (A) => Task[Boolean]): Task[Set[A]]", "member" : "zio.Task.filterNotPar", "link" : "zio\/Task$.html#filterNotPar[A](as:Set[A])(f:A=>zio.Task[Boolean]):zio.Task[Set[A]]", "kind" : "def"}, {"label" : "filterNotPar", "tail" : "(as: Collection[A])(f: (A) => Task[Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): Task[Collection[A]]", "member" : "zio.Task.filterNotPar", "link" : "zio\/Task$.html#filterNotPar[A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.Task[Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.Task[Collection[A]]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Set[A])(f: (A) => Task[Boolean]): Task[Set[A]]", "member" : "zio.Task.filterNot", "link" : "zio\/Task$.html#filterNot[A](as:Set[A])(f:A=>zio.Task[Boolean]):zio.Task[Set[A]]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Collection[A])(f: (A) => Task[Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): Task[Collection[A]]", "member" : "zio.Task.filterNot", "link" : "zio\/Task$.html#filterNot[A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.Task[Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.Task[Collection[A]]", "kind" : "def"}, {"label" : "filterPar", "tail" : "(as: Set[A])(f: (A) => Task[Boolean]): Task[Set[A]]", "member" : "zio.Task.filterPar", "link" : "zio\/Task$.html#filterPar[A](as:Set[A])(f:A=>zio.Task[Boolean]):zio.Task[Set[A]]", "kind" : "def"}, {"label" : "filterPar", "tail" : "(as: Collection[A])(f: (A) => Task[Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): Task[Collection[A]]", "member" : "zio.Task.filterPar", "link" : "zio\/Task$.html#filterPar[A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.Task[Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.Task[Collection[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Set[A])(f: (A) => Task[Boolean]): Task[Set[A]]", "member" : "zio.Task.filter", "link" : "zio\/Task$.html#filter[A](as:Set[A])(f:A=>zio.Task[Boolean]):zio.Task[Set[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Collection[A])(f: (A) => Task[Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): Task[Collection[A]]", "member" : "zio.Task.filter", "link" : "zio\/Task$.html#filter[A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.Task[Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.Task[Collection[A]]", "kind" : "def"}, {"label" : "fiberId", "tail" : ": UIO[FiberId]", "member" : "zio.Task.fiberId", "link" : "zio\/Task$.html#fiberId:zio.UIO[zio.FiberId]", "kind" : "val"}, {"label" : "failCauseWith", "tail" : "(function: (() => ZTrace) => Cause[E]): Task[Nothing]", "member" : "zio.Task.failCauseWith", "link" : "zio\/Task$.html#failCauseWith[E<:Throwable](function:(()=>zio.ZTrace)=>zio.Cause[E]):zio.Task[Nothing]", "kind" : "def"}, {"label" : "failCause", "tail" : "(cause: => Cause[Throwable]): Task[Nothing]", "member" : "zio.Task.failCause", "link" : "zio\/Task$.html#failCause(cause:=>zio.Cause[Throwable]):zio.Task[Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(error: => Throwable): Task[Nothing]", "member" : "zio.Task.fail", "link" : "zio\/Task$.html#fail(error:=>Throwable):zio.Task[Nothing]", "kind" : "def"}, {"label" : "exists", "tail" : "(as: => Iterable[A])(f: (A) => Task[Boolean]): Task[Boolean]", "member" : "zio.Task.exists", "link" : "zio\/Task$.html#exists[A](as:=>Iterable[A])(f:A=>zio.Task[Boolean]):zio.Task[Boolean]", "kind" : "def"}, {"label" : "executor", "tail" : "(): UIO[Executor]", "member" : "zio.Task.executor", "link" : "zio\/Task$.html#executor:zio.UIO[zio.Executor]", "kind" : "def"}, {"label" : "effectTotal", "tail" : "(effect: => A): UIO[A]", "member" : "zio.Task.effectTotal", "link" : "zio\/Task$.html#effectTotal[A](effect:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "effectSuspendWith", "tail" : "(p: (Platform, Id) => Task[A]): Task[A]", "member" : "zio.Task.effectSuspendWith", "link" : "zio\/Task$.html#effectSuspendWith[A](p:(zio.internal.Platform,zio.Fiber.Id)=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "effectSuspendTotalWith", "tail" : "(p: (Platform, Id) => Task[A]): Task[A]", "member" : "zio.Task.effectSuspendTotalWith", "link" : "zio\/Task$.html#effectSuspendTotalWith[A](p:(zio.internal.Platform,zio.Fiber.Id)=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "effectSuspendTotal", "tail" : "(task: => Task[A]): Task[A]", "member" : "zio.Task.effectSuspendTotal", "link" : "zio\/Task$.html#effectSuspendTotal[A](task:=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "effectSuspend", "tail" : "(task: => Task[A]): Task[A]", "member" : "zio.Task.effectSuspend", "link" : "zio\/Task$.html#effectSuspend[A](task:=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "effectBlockingInterrupt", "tail" : "(effect: => A): Task[A]", "member" : "zio.Task.effectBlockingInterrupt", "link" : "zio\/Task$.html#effectBlockingInterrupt[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "effectBlockingCancelable", "tail" : "(effect: => A)(cancel: => UIO[Any]): Task[A]", "member" : "zio.Task.effectBlockingCancelable", "link" : "zio\/Task$.html#effectBlockingCancelable[A](effect:=>A)(cancel:=>zio.UIO[Any]):zio.Task[A]", "kind" : "def"}, {"label" : "effectBlocking", "tail" : "(effect: => A): Task[A]", "member" : "zio.Task.effectBlocking", "link" : "zio\/Task$.html#effectBlocking[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "effectAsyncInterrupt", "tail" : "(register: ((Task[A]) => Unit) => Either[Canceler[Any], Task[A]], blockingOn: => FiberId): Task[A]", "member" : "zio.Task.effectAsyncInterrupt", "link" : "zio\/Task$.html#effectAsyncInterrupt[A](register:(zio.Task[A]=>Unit)=>Either[zio.Canceler[Any],zio.Task[A]],blockingOn:=>zio.FiberId):zio.Task[A]", "kind" : "def"}, {"label" : "effectAsyncM", "tail" : "(register: ((Task[A]) => Unit) => Task[Any]): Task[A]", "member" : "zio.Task.effectAsyncM", "link" : "zio\/Task$.html#effectAsyncM[A](register:(zio.Task[A]=>Unit)=>zio.Task[Any]):zio.Task[A]", "kind" : "def"}, {"label" : "effectAsyncMaybe", "tail" : "(register: ((Task[A]) => Unit) => Option[Task[A]], blockingOn: => FiberId): Task[A]", "member" : "zio.Task.effectAsyncMaybe", "link" : "zio\/Task$.html#effectAsyncMaybe[A](register:(zio.Task[A]=>Unit)=>Option[zio.Task[A]],blockingOn:=>zio.FiberId):zio.Task[A]", "kind" : "def"}, {"label" : "effectAsync", "tail" : "(register: ((Task[A]) => Unit) => Any, blockingOn: => FiberId): Task[A]", "member" : "zio.Task.effectAsync", "link" : "zio\/Task$.html#effectAsync[A](register:(zio.Task[A]=>Unit)=>Any,blockingOn:=>zio.FiberId):zio.Task[A]", "kind" : "def"}, {"label" : "effect", "tail" : "(effect: => A): Task[A]", "member" : "zio.Task.effect", "link" : "zio\/Task$.html#effect[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "descriptorWith", "tail" : "(f: (Descriptor) => Task[A]): Task[A]", "member" : "zio.Task.descriptorWith", "link" : "zio\/Task$.html#descriptorWith[A](f:zio.Fiber.Descriptor=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "descriptor", "tail" : "(): UIO[Descriptor]", "member" : "zio.Task.descriptor", "link" : "zio\/Task$.html#descriptor:zio.UIO[zio.Fiber.Descriptor]", "kind" : "def"}, {"label" : "done", "tail" : "(r: => Exit[Throwable, A]): Task[A]", "member" : "zio.Task.done", "link" : "zio\/Task$.html#done[A](r:=>zio.Exit[Throwable,A]):zio.Task[A]", "kind" : "def"}, {"label" : "dieMessage", "tail" : "(message: => String): UIO[Nothing]", "member" : "zio.Task.dieMessage", "link" : "zio\/Task$.html#dieMessage(message:=>String):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(t: => Throwable): UIO[Nothing]", "member" : "zio.Task.die", "link" : "zio\/Task$.html#die(t:=>Throwable):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "debug", "tail" : "(value: => Any): UIO[Unit]", "member" : "zio.Task.debug", "link" : "zio\/Task$.html#debug(value:=>Any):zio.UIO[Unit]", "kind" : "def"}, {"label" : "cond", "tail" : "(predicate: => Boolean, result: => A, error: => Throwable): Task[A]", "member" : "zio.Task.cond", "link" : "zio\/Task$.html#cond[A](predicate:=>Boolean,result:=>A,error:=>Throwable):zio.Task[A]", "kind" : "def"}, {"label" : "collectParN", "tail" : "(n: => Int)(in: Collection[A])(f: (A) => IO[Option[Throwable], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): Task[Collection[B]]", "member" : "zio.Task.collectParN", "link" : "zio\/Task$.html#collectParN[A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(in:Collection[A])(f:A=>zio.IO[Option[Throwable],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.Task[Collection[B]]", "kind" : "def"}, {"label" : "collectPar", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => IO[Option[Throwable], (Key2, Value2)]): Task[Map[Key2, Value2]]", "member" : "zio.Task.collectPar", "link" : "zio\/Task$.html#collectPar[Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.IO[Option[Throwable],(Key2,Value2)]):zio.Task[Map[Key2,Value2]]", "kind" : "def"}, {"label" : "collectPar", "tail" : "(in: Collection[A])(f: (A) => IO[Option[Throwable], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): Task[Collection[B]]", "member" : "zio.Task.collectPar", "link" : "zio\/Task$.html#collectPar[A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.IO[Option[Throwable],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.Task[Collection[B]]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(as: => Iterable[A])(f: (A) => Task[Option[B]]): Task[Option[B]]", "member" : "zio.Task.collectFirst", "link" : "zio\/Task$.html#collectFirst[A,B](as:=>Iterable[A])(f:A=>zio.Task[Option[B]]):zio.Task[Option[B]]", "kind" : "def"}, {"label" : "collectAllWithParN", "tail" : "(n: => Int)(as: Collection[Task[A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[Task[A]], B, Collection[B]]): Task[Collection[B]]", "member" : "zio.Task.collectAllWithParN", "link" : "zio\/Task$.html#collectAllWithParN[A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.Task[A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.Task[A]],B,Collection[B]]):zio.Task[Collection[B]]", "kind" : "def"}, {"label" : "collectAllWithPar", "tail" : "(as: Collection[Task[A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[Task[A]], B, Collection[B]]): Task[Collection[B]]", "member" : "zio.Task.collectAllWithPar", "link" : "zio\/Task$.html#collectAllWithPar[A,B,Collection[+Element]<:Iterable[Element]](as:Collection[zio.Task[A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.Task[A]],B,Collection[B]]):zio.Task[Collection[B]]", "kind" : "def"}, {"label" : "collectAllWith", "tail" : "(as: Collection[Task[A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[Task[A]], B, Collection[B]]): Task[Collection[B]]", "member" : "zio.Task.collectAllWith", "link" : "zio\/Task$.html#collectAllWith[A,B,Collection[+Element]<:Iterable[Element]](as:Collection[zio.Task[A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.Task[A]],B,Collection[B]]):zio.Task[Collection[B]]", "kind" : "def"}, {"label" : "collectAllSuccessesParN", "tail" : "(n: => Int)(as: Collection[Task[A]])(bf: zio.BuildFrom[Collection[Task[A]], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.Task.collectAllSuccessesParN", "link" : "zio\/Task$.html#collectAllSuccessesParN[A,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.Task[A]])(implicitbf:zio.BuildFrom[Collection[zio.Task[A]],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "collectAllSuccessesPar", "tail" : "(as: Collection[Task[A]])(bf: zio.BuildFrom[Collection[Task[A]], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.Task.collectAllSuccessesPar", "link" : "zio\/Task$.html#collectAllSuccessesPar[A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.Task[A]])(implicitbf:zio.BuildFrom[Collection[zio.Task[A]],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "collectAllSuccesses", "tail" : "(in: Collection[Task[A]])(bf: zio.BuildFrom[Collection[Task[A]], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.Task.collectAllSuccesses", "link" : "zio\/Task$.html#collectAllSuccesses[A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.Task[A]])(implicitbf:zio.BuildFrom[Collection[zio.Task[A]],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "collectAllParNDiscard", "tail" : "(n: => Int)(as: => Iterable[Task[A]]): Task[Unit]", "member" : "zio.Task.collectAllParNDiscard", "link" : "zio\/Task$.html#collectAllParNDiscard[A](n:=>Int)(as:=>Iterable[zio.Task[A]]):zio.Task[Unit]", "kind" : "def"}, {"label" : "collectAllParN_", "tail" : "(n: => Int)(as: => Iterable[Task[A]]): Task[Unit]", "member" : "zio.Task.collectAllParN_", "link" : "zio\/Task$.html#collectAllParN_[A](n:=>Int)(as:=>Iterable[zio.Task[A]]):zio.Task[Unit]", "kind" : "def"}, {"label" : "collectAllParN", "tail" : "(n: => Int)(as: Collection[Task[A]])(bf: zio.BuildFrom[Collection[Task[A]], A, Collection[A]]): Task[Collection[A]]", "member" : "zio.Task.collectAllParN", "link" : "zio\/Task$.html#collectAllParN[A,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.Task[A]])(implicitbf:zio.BuildFrom[Collection[zio.Task[A]],A,Collection[A]]):zio.Task[Collection[A]]", "kind" : "def"}, {"label" : "collectAllParDiscard", "tail" : "(in: => Iterable[Task[A]]): Task[Unit]", "member" : "zio.Task.collectAllParDiscard", "link" : "zio\/Task$.html#collectAllParDiscard[A](in:=>Iterable[zio.Task[A]]):zio.Task[Unit]", "kind" : "def"}, {"label" : "collectAllPar_", "tail" : "(in: => Iterable[Task[A]]): Task[Unit]", "member" : "zio.Task.collectAllPar_", "link" : "zio\/Task$.html#collectAllPar_[A](in:=>Iterable[zio.Task[A]]):zio.Task[Unit]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: NonEmptyChunk[Task[A]]): Task[NonEmptyChunk[A]]", "member" : "zio.Task.collectAllPar", "link" : "zio\/Task$.html#collectAllPar[A](as:zio.NonEmptyChunk[zio.Task[A]]):zio.Task[zio.NonEmptyChunk[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Array[Task[A]])(arg0: ClassTag[A]): Task[Array[A]]", "member" : "zio.Task.collectAllPar", "link" : "zio\/Task$.html#collectAllPar[A](as:Array[zio.Task[A]])(implicitevidence$2:scala.reflect.ClassTag[A]):zio.Task[Array[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Set[Task[A]]): Task[Set[A]]", "member" : "zio.Task.collectAllPar", "link" : "zio\/Task$.html#collectAllPar[A](as:Set[zio.Task[A]]):zio.Task[Set[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Collection[Task[A]])(bf: zio.BuildFrom[Collection[Task[A]], A, Collection[A]]): Task[Collection[A]]", "member" : "zio.Task.collectAllPar", "link" : "zio\/Task$.html#collectAllPar[A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.Task[A]])(implicitbf:zio.BuildFrom[Collection[zio.Task[A]],A,Collection[A]]):zio.Task[Collection[A]]", "kind" : "def"}, {"label" : "collectAllDiscard", "tail" : "(in: => Iterable[Task[A]]): Task[Unit]", "member" : "zio.Task.collectAllDiscard", "link" : "zio\/Task$.html#collectAllDiscard[A](in:=>Iterable[zio.Task[A]]):zio.Task[Unit]", "kind" : "def"}, {"label" : "collectAll_", "tail" : "(in: => Iterable[Task[A]]): Task[Unit]", "member" : "zio.Task.collectAll_", "link" : "zio\/Task$.html#collectAll_[A](in:=>Iterable[zio.Task[A]]):zio.Task[Unit]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: NonEmptyChunk[Task[A]]): Task[NonEmptyChunk[A]]", "member" : "zio.Task.collectAll", "link" : "zio\/Task$.html#collectAll[A](in:zio.NonEmptyChunk[zio.Task[A]]):zio.Task[zio.NonEmptyChunk[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Option[Task[A]]): Task[Option[A]]", "member" : "zio.Task.collectAll", "link" : "zio\/Task$.html#collectAll[A](in:Option[zio.Task[A]]):zio.Task[Option[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Array[Task[A]])(arg0: ClassTag[A]): Task[Array[A]]", "member" : "zio.Task.collectAll", "link" : "zio\/Task$.html#collectAll[A](in:Array[zio.Task[A]])(implicitevidence$1:scala.reflect.ClassTag[A]):zio.Task[Array[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Set[Task[A]]): Task[Set[A]]", "member" : "zio.Task.collectAll", "link" : "zio\/Task$.html#collectAll[A](in:Set[zio.Task[A]]):zio.Task[Set[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Collection[Task[A]])(bf: zio.BuildFrom[Collection[Task[A]], A, Collection[A]]): Task[Collection[A]]", "member" : "zio.Task.collectAll", "link" : "zio\/Task$.html#collectAll[A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.Task[A]])(implicitbf:zio.BuildFrom[Collection[zio.Task[A]],A,Collection[A]]):zio.Task[Collection[A]]", "kind" : "def"}, {"label" : "collect", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => IO[Option[Throwable], (Key2, Value2)]): Task[Map[Key2, Value2]]", "member" : "zio.Task.collect", "link" : "zio\/Task$.html#collect[Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.IO[Option[Throwable],(Key2,Value2)]):zio.Task[Map[Key2,Value2]]", "kind" : "def"}, {"label" : "collect", "tail" : "(in: Collection[A])(f: (A) => IO[Option[Throwable], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): Task[Collection[B]]", "member" : "zio.Task.collect", "link" : "zio\/Task$.html#collect[A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.IO[Option[Throwable],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.Task[Collection[B]]", "kind" : "def"}, {"label" : "checkTraced", "tail" : "(f: (TracingStatus) => Task[A]): Task[A]", "member" : "zio.Task.checkTraced", "link" : "zio\/Task$.html#checkTraced[A](f:zio.TracingStatus=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "checkInterruptible", "tail" : "(f: (InterruptStatus) => Task[A]): Task[A]", "member" : "zio.Task.checkInterruptible", "link" : "zio\/Task$.html#checkInterruptible[A](f:zio.InterruptStatus=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "bracketExit", "tail" : "(acquire: => Task[A], release: (A, Exit[Throwable, B]) => UIO[Any], use: (A) => Task[B]): Task[B]", "member" : "zio.Task.bracketExit", "link" : "zio\/Task$.html#bracketExit[A,B](acquire:=>zio.Task[A],release:(A,zio.Exit[Throwable,B])=>zio.UIO[Any],use:A=>zio.Task[B]):zio.Task[B]", "kind" : "def"}, {"label" : "bracketExit", "tail" : "(acquire: => Task[A]): BracketExitAcquire[Any, Throwable, A]", "member" : "zio.Task.bracketExit", "link" : "zio\/Task$.html#bracketExit[A](acquire:=>zio.Task[A]):zio.ZIO.BracketExitAcquire[Any,Throwable,A]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: => Task[A], release: (A) => UIO[Any], use: (A) => Task[B]): Task[B]", "member" : "zio.Task.bracket", "link" : "zio\/Task$.html#bracket[A,B](acquire:=>zio.Task[A],release:A=>zio.UIO[Any],use:A=>zio.Task[B]):zio.Task[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: => Task[A]): BracketAcquire[Any, Throwable, A]", "member" : "zio.Task.bracket", "link" : "zio\/Task$.html#bracket[A](acquire:=>zio.Task[A]):zio.ZIO.BracketAcquire[Any,Throwable,A]", "kind" : "def"}, {"label" : "blockingExecutor", "tail" : "(): UIO[Executor]", "member" : "zio.Task.blockingExecutor", "link" : "zio\/Task$.html#blockingExecutor:zio.UIO[zio.Executor]", "kind" : "def"}, {"label" : "blocking", "tail" : "(zio: => Task[A]): Task[A]", "member" : "zio.Task.blocking", "link" : "zio\/Task$.html#blocking[A](zio:=>zio.Task[A]):zio.Task[A]", "kind" : "def"}, {"label" : "attemptBlockingInterrupt", "tail" : "(effect: => A): Task[A]", "member" : "zio.Task.attemptBlockingInterrupt", "link" : "zio\/Task$.html#attemptBlockingInterrupt[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "attemptBlockingCancelable", "tail" : "(effect: => A)(cancel: => UIO[Any]): Task[A]", "member" : "zio.Task.attemptBlockingCancelable", "link" : "zio\/Task$.html#attemptBlockingCancelable[A](effect:=>A)(cancel:=>zio.UIO[Any]):zio.Task[A]", "kind" : "def"}, {"label" : "attemptBlocking", "tail" : "(effect: => A): Task[A]", "member" : "zio.Task.attemptBlocking", "link" : "zio\/Task$.html#attemptBlocking[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(effect: => A): Task[A]", "member" : "zio.Task.attempt", "link" : "zio\/Task$.html#attempt[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "asyncInterrupt", "tail" : "(register: ((Task[A]) => Unit) => Either[Canceler[Any], Task[A]], blockingOn: => FiberId): Task[A]", "member" : "zio.Task.asyncInterrupt", "link" : "zio\/Task$.html#asyncInterrupt[A](register:(zio.Task[A]=>Unit)=>Either[zio.Canceler[Any],zio.Task[A]],blockingOn:=>zio.FiberId):zio.Task[A]", "kind" : "def"}, {"label" : "asyncZIO", "tail" : "(register: ((Task[A]) => Unit) => Task[Any]): Task[A]", "member" : "zio.Task.asyncZIO", "link" : "zio\/Task$.html#asyncZIO[A](register:(zio.Task[A]=>Unit)=>zio.Task[Any]):zio.Task[A]", "kind" : "def"}, {"label" : "asyncMaybe", "tail" : "(register: ((Task[A]) => Unit) => Option[Task[A]], blockingOn: => FiberId): Task[A]", "member" : "zio.Task.asyncMaybe", "link" : "zio\/Task$.html#asyncMaybe[A](register:(zio.Task[A]=>Unit)=>Option[zio.Task[A]],blockingOn:=>zio.FiberId):zio.Task[A]", "kind" : "def"}, {"label" : "async", "tail" : "(register: ((Task[A]) => Unit) => Any, blockingOn: => FiberId): Task[A]", "member" : "zio.Task.async", "link" : "zio\/Task$.html#async[A](register:(zio.Task[A]=>Unit)=>Any,blockingOn:=>zio.FiberId):zio.Task[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: => A): Task[A]", "member" : "zio.Task.apply", "link" : "zio\/Task$.html#apply[A](a:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "allowInterrupt", "tail" : "(): UIO[Unit]", "member" : "zio.Task.allowInterrupt", "link" : "zio\/Task$.html#allowInterrupt:zio.UIO[Unit]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: => Task[A], release: (A, Exit[Throwable, B]) => UIO[Any], use: (A) => Task[B]): Task[B]", "member" : "zio.Task.acquireReleaseExitWith", "link" : "zio\/Task$.html#acquireReleaseExitWith[A,B](acquire:=>zio.Task[A],release:(A,zio.Exit[Throwable,B])=>zio.UIO[Any],use:A=>zio.Task[B]):zio.Task[B]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: => Task[A]): BracketExitAcquire[Any, Throwable, A]", "member" : "zio.Task.acquireReleaseExitWith", "link" : "zio\/Task$.html#acquireReleaseExitWith[A](acquire:=>zio.Task[A]):zio.ZIO.BracketExitAcquire[Any,Throwable,A]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: => Task[A], release: (A) => UIO[Any], use: (A) => Task[B]): Task[B]", "member" : "zio.Task.acquireReleaseWith", "link" : "zio\/Task$.html#acquireReleaseWith[A,B](acquire:=>zio.Task[A],release:A=>zio.UIO[Any],use:A=>zio.Task[B]):zio.Task[B]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: => Task[A]): BracketAcquire[Any, Throwable, A]", "member" : "zio.Task.acquireReleaseWith", "link" : "zio\/Task$.html#acquireReleaseWith[A](acquire:=>zio.Task[A]):zio.ZIO.BracketAcquire[Any,Throwable,A]", "kind" : "def"}, {"label" : "absolve", "tail" : "(v: => Task[Either[Throwable, A]]): Task[A]", "member" : "zio.Task.absolve", "link" : "zio\/Task$.html#absolve[A](v:=>zio.Task[Either[Throwable,A]]):zio.Task[A]", "kind" : "def"}, {"label" : "fromCompletionStage", "tail" : "(cs: => CompletionStage[A]): Task[A]", "member" : "zio.TaskPlatformSpecific.fromCompletionStage", "link" : "zio\/Task$.html#fromCompletionStage[A](cs:=>java.util.concurrent.CompletionStage[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromCompletableFuture", "tail" : "(cs: => CompletableFuture[A]): Task[A]", "member" : "zio.TaskPlatformSpecific.fromCompletableFuture", "link" : "zio\/Task$.html#fromCompletableFuture[A](cs:=>java.util.concurrent.CompletableFuture[A]):zio.Task[A]", "kind" : "def"}, {"label" : "effectAsyncWithCompletionHandler", "tail" : "(op: (CompletionHandler[T, Any]) => Any): Task[T]", "member" : "zio.TaskPlatformSpecific.effectAsyncWithCompletionHandler", "link" : "zio\/Task$.html#effectAsyncWithCompletionHandler[T](op:java.nio.channels.CompletionHandler[T,Any]=>Any):zio.Task[T]", "kind" : "def"}, {"label" : "asyncWithCompletionHandler", "tail" : "(op: (CompletionHandler[T, Any]) => Any): Task[T]", "member" : "zio.TaskPlatformSpecific.asyncWithCompletionHandler", "link" : "zio\/Task$.html#asyncWithCompletionHandler[T](op:java.nio.channels.CompletionHandler[T,Any]=>Any):zio.Task[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Task$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Task$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Task$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Task$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Task$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Task$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Task$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Task$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Task$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Task$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Task$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Task$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Task$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Task$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Task$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Task$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Task$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Task$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Task$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.TracingStatus", "shortDescription" : "Whether ZIO Tracing is enabled for the current fiber in the current region.", "object" : "zio\/TracingStatus$.html", "members_class" : [{"label" : "isUntraced", "tail" : "(): Boolean", "member" : "zio.TracingStatus.isUntraced", "link" : "zio\/TracingStatus.html#isUntraced:Boolean", "kind" : "final def"}, {"label" : "isTraced", "tail" : "(): Boolean", "member" : "zio.TracingStatus.isTraced", "link" : "zio\/TracingStatus.html#isTraced:Boolean", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/TracingStatus.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "zio\/TracingStatus.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "zio\/TracingStatus.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "zio\/TracingStatus.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/TracingStatus.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/TracingStatus.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/TracingStatus.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/TracingStatus.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/TracingStatus.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/TracingStatus.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/TracingStatus.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/TracingStatus.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/TracingStatus.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/TracingStatus.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/TracingStatus.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/TracingStatus.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/TracingStatus.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/TracingStatus.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/TracingStatus.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/TracingStatus.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/TracingStatus.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/TracingStatus.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/TracingStatus.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "zio\/TracingStatus.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "zio\/TracingStatus.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "zio\/TracingStatus.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "Untraced", "tail" : "", "member" : "zio.TracingStatus.Untraced", "link" : "zio\/TracingStatus$.html#Untraced", "kind" : "case object"}, {"label" : "Traced", "tail" : "", "member" : "zio.TracingStatus.Traced", "link" : "zio\/TracingStatus$.html#Traced", "kind" : "case object"}, {"label" : "untraced", "tail" : "(): TracingStatus", "member" : "zio.TracingStatus.untraced", "link" : "zio\/TracingStatus$.html#untraced:zio.TracingStatus", "kind" : "def"}, {"label" : "traced", "tail" : "(): TracingStatus", "member" : "zio.TracingStatus.traced", "link" : "zio\/TracingStatus$.html#traced:zio.TracingStatus", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/TracingStatus$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/TracingStatus$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/TracingStatus$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/TracingStatus$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/TracingStatus$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/TracingStatus$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/TracingStatus$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/TracingStatus$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/TracingStatus$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/TracingStatus$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/TracingStatus$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/TracingStatus$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/TracingStatus$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/TracingStatus$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/TracingStatus$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/TracingStatus$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/TracingStatus$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/TracingStatus$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/TracingStatus$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/TracingStatus.html", "kind" : "class"}, {"name" : "zio.UIO", "shortDescription" : "", "object" : "zio\/UIO$.html", "members_object" : [{"label" : "yieldNow", "tail" : ": UIO[Unit]", "member" : "zio.UIO.yieldNow", "link" : "zio\/UIO$.html#yieldNow:zio.UIO[Unit]", "kind" : "val"}, {"label" : "withRuntimeConfig", "tail" : "(runtimeConfig: => RuntimeConfig)(uio: => UIO[A]): UIO[A]", "member" : "zio.UIO.withRuntimeConfig", "link" : "zio\/UIO$.html#withRuntimeConfig[A](runtimeConfig:=>zio.RuntimeConfig)(uio:=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "whenZIO", "tail" : "(b: => UIO[Boolean]): WhenZIO[Any, Nothing]", "member" : "zio.UIO.whenZIO", "link" : "zio\/UIO$.html#whenZIO(b:=>zio.UIO[Boolean]):zio.ZIO.WhenZIO[Any,Nothing]", "kind" : "def"}, {"label" : "whenM", "tail" : "(b: => UIO[Boolean]): WhenZIO[Any, Nothing]", "member" : "zio.UIO.whenM", "link" : "zio\/UIO$.html#whenM(b:=>zio.UIO[Boolean]):zio.ZIO.WhenZIO[Any,Nothing]", "kind" : "def"}, {"label" : "whenCaseZIO", "tail" : "(a: => UIO[A])(pf: PartialFunction[A, UIO[B]]): UIO[Option[B]]", "member" : "zio.UIO.whenCaseZIO", "link" : "zio\/UIO$.html#whenCaseZIO[A,B](a:=>zio.UIO[A])(pf:PartialFunction[A,zio.UIO[B]]):zio.UIO[Option[B]]", "kind" : "def"}, {"label" : "whenCaseM", "tail" : "(a: => UIO[A])(pf: PartialFunction[A, UIO[B]]): UIO[Option[B]]", "member" : "zio.UIO.whenCaseM", "link" : "zio\/UIO$.html#whenCaseM[A,B](a:=>zio.UIO[A])(pf:PartialFunction[A,zio.UIO[B]]):zio.UIO[Option[B]]", "kind" : "def"}, {"label" : "whenCase", "tail" : "(a: => A)(pf: PartialFunction[A, UIO[B]]): UIO[Option[B]]", "member" : "zio.UIO.whenCase", "link" : "zio\/UIO$.html#whenCase[A,B](a:=>A)(pf:PartialFunction[A,zio.UIO[B]]):zio.UIO[Option[B]]", "kind" : "def"}, {"label" : "when", "tail" : "(b: => Boolean)(uio: => UIO[A]): UIO[Option[A]]", "member" : "zio.UIO.when", "link" : "zio\/UIO$.html#when[A](b:=>Boolean)(uio:=>zio.UIO[A]):zio.UIO[Option[A]]", "kind" : "def"}, {"label" : "untraced", "tail" : "(uio: => UIO[A]): UIO[A]", "member" : "zio.UIO.untraced", "link" : "zio\/UIO$.html#untraced[A](uio:=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "unsandbox", "tail" : "(v: => IO[Cause[Nothing], A]): UIO[A]", "member" : "zio.UIO.unsandbox", "link" : "zio\/UIO$.html#unsandbox[A](v:=>zio.IO[zio.Cause[Nothing],A]):zio.UIO[A]", "kind" : "def"}, {"label" : "unlessZIO", "tail" : "(b: => UIO[Boolean]): UnlessZIO[Any, Nothing]", "member" : "zio.UIO.unlessZIO", "link" : "zio\/UIO$.html#unlessZIO(b:=>zio.UIO[Boolean]):zio.ZIO.UnlessZIO[Any,Nothing]", "kind" : "def"}, {"label" : "unlessM", "tail" : "(b: => UIO[Boolean]): UnlessZIO[Any, Nothing]", "member" : "zio.UIO.unlessM", "link" : "zio\/UIO$.html#unlessM(b:=>zio.UIO[Boolean]):zio.ZIO.UnlessZIO[Any,Nothing]", "kind" : "def"}, {"label" : "unless", "tail" : "(b: => Boolean)(zio: => UIO[A]): UIO[Option[A]]", "member" : "zio.UIO.unless", "link" : "zio\/UIO$.html#unless[A](b:=>Boolean)(zio:=>zio.UIO[A]):zio.UIO[Option[A]]", "kind" : "def"}, {"label" : "uninterruptibleMask", "tail" : "(k: (InterruptStatusRestore) => UIO[A]): UIO[A]", "member" : "zio.UIO.uninterruptibleMask", "link" : "zio\/UIO$.html#uninterruptibleMask[A](k:zio.ZIO.InterruptStatusRestore=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "uninterruptible", "tail" : "(uio: => UIO[A]): UIO[A]", "member" : "zio.UIO.uninterruptible", "link" : "zio\/UIO$.html#uninterruptible[A](uio:=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "unit", "tail" : ": UIO[Unit]", "member" : "zio.UIO.unit", "link" : "zio\/UIO$.html#unit:zio.UIO[Unit]", "kind" : "val"}, {"label" : "traced", "tail" : "(uio: => UIO[A]): UIO[A]", "member" : "zio.UIO.traced", "link" : "zio\/UIO$.html#traced[A](uio:=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "trace", "tail" : "(): UIO[ZTrace]", "member" : "zio.UIO.trace", "link" : "zio\/UIO$.html#trace:zio.UIO[zio.ZTrace]", "kind" : "def"}, {"label" : "suspendSucceedWith", "tail" : "(f: (RuntimeConfig, FiberId) => UIO[A]): UIO[A]", "member" : "zio.UIO.suspendSucceedWith", "link" : "zio\/UIO$.html#suspendSucceedWith[A](f:(zio.RuntimeConfig,zio.FiberId)=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "suspendSucceed", "tail" : "(uio: => UIO[A]): UIO[A]", "member" : "zio.UIO.suspendSucceed", "link" : "zio\/UIO$.html#suspendSucceed[A](uio:=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "succeedBlocking", "tail" : "(a: => A): UIO[A]", "member" : "zio.UIO.succeedBlocking", "link" : "zio\/UIO$.html#succeedBlocking[A](a:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "succeed", "tail" : "(a: => A): UIO[A]", "member" : "zio.UIO.succeed", "link" : "zio\/UIO$.html#succeed[A](a:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "some", "tail" : "(a: => A): UIO[Option[A]]", "member" : "zio.UIO.some", "link" : "zio\/UIO$.html#some[A](a:=>A):zio.UIO[Option[A]]", "kind" : "def"}, {"label" : "runtimeConfig", "tail" : ": UIO[RuntimeConfig]", "member" : "zio.UIO.runtimeConfig", "link" : "zio\/UIO$.html#runtimeConfig:zio.UIO[zio.RuntimeConfig]", "kind" : "val"}, {"label" : "runtime", "tail" : "(): UIO[Runtime[Any]]", "member" : "zio.UIO.runtime", "link" : "zio\/UIO$.html#runtime:zio.UIO[zio.Runtime[Any]]", "kind" : "def"}, {"label" : "right", "tail" : "(b: => B): UIO[Either[Nothing, B]]", "member" : "zio.UIO.right", "link" : "zio\/UIO$.html#right[B](b:=>B):zio.UIO[Either[Nothing,B]]", "kind" : "def"}, {"label" : "reserve", "tail" : "(reservation: => UIO[Reservation[Any, Nothing, A]])(use: (A) => UIO[B]): UIO[B]", "member" : "zio.UIO.reserve", "link" : "zio\/UIO$.html#reserve[A,B](reservation:=>zio.UIO[zio.Reservation[Any,Nothing,A]])(use:A=>zio.UIO[B]):zio.UIO[B]", "kind" : "def"}, {"label" : "replicateZIODiscard", "tail" : "(n: => Int)(effect: => UIO[A]): UIO[Unit]", "member" : "zio.UIO.replicateZIODiscard", "link" : "zio\/UIO$.html#replicateZIODiscard[A](n:=>Int)(effect:=>zio.UIO[A]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "replicateZIO", "tail" : "(n: => Int)(effect: => UIO[A]): UIO[Iterable[A]]", "member" : "zio.UIO.replicateZIO", "link" : "zio\/UIO$.html#replicateZIO[A](n:=>Int)(effect:=>zio.UIO[A]):zio.UIO[Iterable[A]]", "kind" : "def"}, {"label" : "replicateM_", "tail" : "(n: => Int)(effect: => UIO[A]): UIO[Unit]", "member" : "zio.UIO.replicateM_", "link" : "zio\/UIO$.html#replicateM_[A](n:=>Int)(effect:=>zio.UIO[A]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "replicateM", "tail" : "(n: => Int)(effect: => UIO[A]): UIO[Iterable[A]]", "member" : "zio.UIO.replicateM", "link" : "zio\/UIO$.html#replicateM[A](n:=>Int)(effect:=>zio.UIO[A]):zio.UIO[Iterable[A]]", "kind" : "def"}, {"label" : "replicate", "tail" : "(n: => Int)(effect: => UIO[A]): Iterable[UIO[A]]", "member" : "zio.UIO.replicate", "link" : "zio\/UIO$.html#replicate[A](n:=>Int)(effect:=>zio.UIO[A]):Iterable[zio.UIO[A]]", "kind" : "def"}, {"label" : "reduceAllPar", "tail" : "(a: => UIO[A], as: => Iterable[UIO[A]])(f: (A, A) => A): UIO[A]", "member" : "zio.UIO.reduceAllPar", "link" : "zio\/UIO$.html#reduceAllPar[A](a:=>zio.UIO[A],as:=>Iterable[zio.UIO[A]])(f:(A,A)=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "reduceAll", "tail" : "(a: => UIO[A], as: => Iterable[UIO[A]])(f: (A, A) => A): UIO[A]", "member" : "zio.UIO.reduceAll", "link" : "zio\/UIO$.html#reduceAll[A](a:=>zio.UIO[A],as:=>Iterable[zio.UIO[A]])(f:(A,A)=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "raceAll", "tail" : "(uio: => UIO[A], uios: => Iterable[UIO[A]]): UIO[A]", "member" : "zio.UIO.raceAll", "link" : "zio\/UIO$.html#raceAll[A](uio:=>zio.UIO[A],uios:=>Iterable[zio.UIO[A]]):zio.UIO[A]", "kind" : "def"}, {"label" : "onExecutor", "tail" : "(executor: => Executor)(uio: UIO[A]): UIO[A]", "member" : "zio.UIO.onExecutor", "link" : "zio\/UIO$.html#onExecutor[A](executor:=>zio.Executor)(uio:zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "not", "tail" : "(effect: => UIO[Boolean]): UIO[Boolean]", "member" : "zio.UIO.not", "link" : "zio\/UIO$.html#not(effect:=>zio.UIO[Boolean]):zio.UIO[Boolean]", "kind" : "def"}, {"label" : "never", "tail" : ": UIO[Nothing]", "member" : "zio.UIO.never", "link" : "zio\/UIO$.html#never:zio.UIO[Nothing]", "kind" : "val"}, {"label" : "none", "tail" : ": UIO[Option[Nothing]]", "member" : "zio.UIO.none", "link" : "zio\/UIO$.html#none:zio.UIO[Option[Nothing]]", "kind" : "val"}, {"label" : "mergeAllPar", "tail" : "(in: => Iterable[UIO[A]])(zero: => B)(f: (B, A) => B): UIO[B]", "member" : "zio.UIO.mergeAllPar", "link" : "zio\/UIO$.html#mergeAllPar[A,B](in:=>Iterable[zio.UIO[A]])(zero:=>B)(f:(B,A)=>B):zio.UIO[B]", "kind" : "def"}, {"label" : "mergeAll", "tail" : "(in: => Iterable[UIO[A]])(zero: => B)(f: (B, A) => B): UIO[B]", "member" : "zio.UIO.mergeAll", "link" : "zio\/UIO$.html#mergeAll[A,B](in:=>Iterable[zio.UIO[A]])(zero:=>B)(f:(B,A)=>B):zio.UIO[B]", "kind" : "def"}, {"label" : "memoize", "tail" : "(f: (A) => UIO[B]): UIO[(A) => UIO[B]]", "member" : "zio.UIO.memoize", "link" : "zio\/UIO$.html#memoize[A,B](f:A=>zio.UIO[B]):zio.UIO[A=>zio.UIO[B]]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(uio1: => UIO[A], uio2: => UIO[B], uio3: => UIO[C], uio4: => UIO[D])(f: (A, B, C, D) => F): UIO[F]", "member" : "zio.UIO.mapParN", "link" : "zio\/UIO$.html#mapParN[A,B,C,D,F](uio1:=>zio.UIO[A],uio2:=>zio.UIO[B],uio3:=>zio.UIO[C],uio4:=>zio.UIO[D])(f:(A,B,C,D)=>F):zio.UIO[F]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(uio1: => UIO[A], uio2: => UIO[B], uio3: => UIO[C])(f: (A, B, C) => D): UIO[D]", "member" : "zio.UIO.mapParN", "link" : "zio\/UIO$.html#mapParN[A,B,C,D](uio1:=>zio.UIO[A],uio2:=>zio.UIO[B],uio3:=>zio.UIO[C])(f:(A,B,C)=>D):zio.UIO[D]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(uio1: => UIO[A], uio2: => UIO[B])(f: (A, B) => C): UIO[C]", "member" : "zio.UIO.mapParN", "link" : "zio\/UIO$.html#mapParN[A,B,C](uio1:=>zio.UIO[A],uio2:=>zio.UIO[B])(f:(A,B)=>C):zio.UIO[C]", "kind" : "def"}, {"label" : "mapN", "tail" : "(uio1: => UIO[A], uio2: => UIO[B], uio3: => UIO[C], uio4: => UIO[D])(f: (A, B, C, D) => F): UIO[F]", "member" : "zio.UIO.mapN", "link" : "zio\/UIO$.html#mapN[A,B,C,D,F](uio1:=>zio.UIO[A],uio2:=>zio.UIO[B],uio3:=>zio.UIO[C],uio4:=>zio.UIO[D])(f:(A,B,C,D)=>F):zio.UIO[F]", "kind" : "def"}, {"label" : "mapN", "tail" : "(uio1: => UIO[A], uio2: => UIO[B], uio3: => UIO[C])(f: (A, B, C) => D): UIO[D]", "member" : "zio.UIO.mapN", "link" : "zio\/UIO$.html#mapN[A,B,C,D](uio1:=>zio.UIO[A],uio2:=>zio.UIO[B],uio3:=>zio.UIO[C])(f:(A,B,C)=>D):zio.UIO[D]", "kind" : "def"}, {"label" : "mapN", "tail" : "(uio1: => UIO[A], uio2: => UIO[B])(f: (A, B) => C): UIO[C]", "member" : "zio.UIO.mapN", "link" : "zio\/UIO$.html#mapN[A,B,C](uio1:=>zio.UIO[A],uio2:=>zio.UIO[B])(f:(A,B)=>C):zio.UIO[C]", "kind" : "def"}, {"label" : "loopDiscard", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => UIO[Any]): UIO[Unit]", "member" : "zio.UIO.loopDiscard", "link" : "zio\/UIO$.html#loopDiscard[S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.UIO[Any]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "loop_", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => UIO[Any]): UIO[Unit]", "member" : "zio.UIO.loop_", "link" : "zio\/UIO$.html#loop_[S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.UIO[Any]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "loop", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => UIO[A]): UIO[List[A]]", "member" : "zio.UIO.loop", "link" : "zio\/UIO$.html#loop[A,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.UIO[A]):zio.UIO[List[A]]", "kind" : "def"}, {"label" : "lock", "tail" : "(executor: => Executor)(uio: => UIO[A]): UIO[A]", "member" : "zio.UIO.lock", "link" : "zio\/UIO$.html#lock[A](executor:=>zio.Executor)(uio:=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "left", "tail" : "(a: => A): UIO[Either[A, Nothing]]", "member" : "zio.UIO.left", "link" : "zio\/UIO$.html#left[A](a:=>A):zio.UIO[Either[A,Nothing]]", "kind" : "def"}, {"label" : "iterate", "tail" : "(initial: => S)(cont: (S) => Boolean)(body: (S) => UIO[S]): UIO[S]", "member" : "zio.UIO.iterate", "link" : "zio\/UIO$.html#iterate[S](initial:=>S)(cont:S=>Boolean)(body:S=>zio.UIO[S]):zio.UIO[S]", "kind" : "def"}, {"label" : "interruptibleMask", "tail" : "(k: (InterruptStatusRestore) => UIO[A]): UIO[A]", "member" : "zio.UIO.interruptibleMask", "link" : "zio\/UIO$.html#interruptibleMask[A](k:zio.ZIO.InterruptStatusRestore=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "interruptible", "tail" : "(uio: => UIO[A]): UIO[A]", "member" : "zio.UIO.interruptible", "link" : "zio\/UIO$.html#interruptible[A](uio:=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "interruptAs", "tail" : "(fiberId: => FiberId): UIO[Nothing]", "member" : "zio.UIO.interruptAs", "link" : "zio\/UIO$.html#interruptAs(fiberId:=>zio.FiberId):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "interrupt", "tail" : ": UIO[Nothing]", "member" : "zio.UIO.interrupt", "link" : "zio\/UIO$.html#interrupt:zio.UIO[Nothing]", "kind" : "val"}, {"label" : "ifZIO", "tail" : "(b: => UIO[Boolean]): IfZIO[Any, Nothing]", "member" : "zio.UIO.ifZIO", "link" : "zio\/UIO$.html#ifZIO(b:=>zio.UIO[Boolean]):zio.ZIO.IfZIO[Any,Nothing]", "kind" : "def"}, {"label" : "ifM", "tail" : "(b: => UIO[Boolean]): IfZIO[Any, Nothing]", "member" : "zio.UIO.ifM", "link" : "zio\/UIO$.html#ifM(b:=>zio.UIO[Boolean]):zio.ZIO.IfZIO[Any,Nothing]", "kind" : "def"}, {"label" : "haltWith", "tail" : "(function: (() => ZTrace) => Cause[Nothing]): UIO[Nothing]", "member" : "zio.UIO.haltWith", "link" : "zio\/UIO$.html#haltWith(function:(()=>zio.ZTrace)=>zio.Cause[Nothing]):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "halt", "tail" : "(cause: => Cause[Nothing]): UIO[Nothing]", "member" : "zio.UIO.halt", "link" : "zio\/UIO$.html#halt(cause:=>zio.Cause[Nothing]):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "fromFiberZIO", "tail" : "(fiber: => UIO[Fiber[Nothing, A]]): UIO[A]", "member" : "zio.UIO.fromFiberZIO", "link" : "zio\/UIO$.html#fromFiberZIO[A](fiber:=>zio.UIO[zio.Fiber[Nothing,A]]):zio.UIO[A]", "kind" : "def"}, {"label" : "fromFiberM", "tail" : "(fiber: => UIO[Fiber[Nothing, A]]): UIO[A]", "member" : "zio.UIO.fromFiberM", "link" : "zio\/UIO$.html#fromFiberM[A](fiber:=>zio.UIO[zio.Fiber[Nothing,A]]):zio.UIO[A]", "kind" : "def"}, {"label" : "fromFiber", "tail" : "(fiber: => Fiber[Nothing, A]): UIO[A]", "member" : "zio.UIO.fromFiber", "link" : "zio\/UIO$.html#fromFiber[A](fiber:=>zio.Fiber[Nothing,A]):zio.UIO[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(v: => Either[Nothing, A]): UIO[A]", "member" : "zio.UIO.fromEither", "link" : "zio\/UIO$.html#fromEither[A](v:=>Either[Nothing,A]):zio.UIO[A]", "kind" : "def"}, {"label" : "from", "tail" : "(input: => Input)(constructor: ZIOConstructor[Any, Nothing, Input]): ZIO[OutEnvironment, OutError, OutSuccess]", "member" : "zio.UIO.from", "link" : "zio\/UIO$.html#from[Input](input:=>Input)(implicitconstructor:zio.ZIO.ZIOConstructor[Any,Nothing,Input]):zio.ZIO[constructor.OutEnvironment,constructor.OutError,constructor.OutSuccess]", "kind" : "def"}, {"label" : "foreachParNDiscard", "tail" : "(n: => Int)(as: => Iterable[A])(f: (A) => UIO[Any]): UIO[Unit]", "member" : "zio.UIO.foreachParNDiscard", "link" : "zio\/UIO$.html#foreachParNDiscard[A](n:=>Int)(as:=>Iterable[A])(f:A=>zio.UIO[Any]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "foreachParN_", "tail" : "(n: => Int)(as: => Iterable[A])(f: (A) => UIO[Any]): UIO[Unit]", "member" : "zio.UIO.foreachParN_", "link" : "zio\/UIO$.html#foreachParN_[A](n:=>Int)(as:=>Iterable[A])(f:A=>zio.UIO[Any]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "foreachParN", "tail" : "(n: => Int)(as: Collection[A])(fn: (A) => UIO[B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): UIO[Collection[B]]", "member" : "zio.UIO.foreachParN", "link" : "zio\/UIO$.html#foreachParN[A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[A])(fn:A=>zio.UIO[B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.UIO[Collection[B]]", "kind" : "def"}, {"label" : "foreachParDiscard", "tail" : "(as: => Iterable[A])(f: (A) => UIO[Any]): UIO[Unit]", "member" : "zio.UIO.foreachParDiscard", "link" : "zio\/UIO$.html#foreachParDiscard[A](as:=>Iterable[A])(f:A=>zio.UIO[Any]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "foreachPar_", "tail" : "(as: => Iterable[A])(f: (A) => UIO[Any]): UIO[Unit]", "member" : "zio.UIO.foreachPar_", "link" : "zio\/UIO$.html#foreachPar_[A](as:=>Iterable[A])(f:A=>zio.UIO[Any]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: NonEmptyChunk[A])(fn: (A) => UIO[B]): UIO[NonEmptyChunk[B]]", "member" : "zio.UIO.foreachPar", "link" : "zio\/UIO$.html#foreachPar[A,B](as:zio.NonEmptyChunk[A])(fn:A=>zio.UIO[B]):zio.UIO[zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => UIO[(Key2, Value2)]): UIO[Map[Key2, Value2]]", "member" : "zio.UIO.foreachPar", "link" : "zio\/UIO$.html#foreachPar[Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.UIO[(Key2,Value2)]):zio.UIO[Map[Key2,Value2]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: Array[A])(fn: (A) => UIO[B])(arg0: ClassTag[B]): UIO[Array[B]]", "member" : "zio.UIO.foreachPar", "link" : "zio\/UIO$.html#foreachPar[A,B](as:Array[A])(fn:A=>zio.UIO[B])(implicitevidence$4:scala.reflect.ClassTag[B]):zio.UIO[Array[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: Set[A])(fn: (A) => UIO[B]): UIO[Set[B]]", "member" : "zio.UIO.foreachPar", "link" : "zio\/UIO$.html#foreachPar[A,B](as:Set[A])(fn:A=>zio.UIO[B]):zio.UIO[Set[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: Collection[A])(fn: (A) => UIO[B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): UIO[Collection[B]]", "member" : "zio.UIO.foreachPar", "link" : "zio\/UIO$.html#foreachPar[A,B,Collection[+Element]<:Iterable[Element]](as:Collection[A])(fn:A=>zio.UIO[B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.UIO[Collection[B]]", "kind" : "def"}, {"label" : "foreachExec", "tail" : "(as: Collection[A])(exec: => ExecutionStrategy)(f: (A) => UIO[B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): UIO[Collection[B]]", "member" : "zio.UIO.foreachExec", "link" : "zio\/UIO$.html#foreachExec[A,B,Collection[+Element]<:Iterable[Element]](as:Collection[A])(exec:=>zio.ExecutionStrategy)(f:A=>zio.UIO[B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.UIO[Collection[B]]", "kind" : "final def"}, {"label" : "foreachDiscard", "tail" : "(as: => Iterable[A])(f: (A) => UIO[Any]): UIO[Unit]", "member" : "zio.UIO.foreachDiscard", "link" : "zio\/UIO$.html#foreachDiscard[A](as:=>Iterable[A])(f:A=>zio.UIO[Any]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "foreach_", "tail" : "(as: => Iterable[A])(f: (A) => UIO[Any]): UIO[Unit]", "member" : "zio.UIO.foreach_", "link" : "zio\/UIO$.html#foreach_[A](as:=>Iterable[A])(f:A=>zio.UIO[Any]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: NonEmptyChunk[A])(f: (A) => UIO[B]): UIO[NonEmptyChunk[B]]", "member" : "zio.UIO.foreach", "link" : "zio\/UIO$.html#foreach[A,B](in:zio.NonEmptyChunk[A])(f:A=>zio.UIO[B]):zio.UIO[zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Option[A])(f: (A) => UIO[B]): UIO[Option[B]]", "member" : "zio.UIO.foreach", "link" : "zio\/UIO$.html#foreach[A,B](in:Option[A])(f:A=>zio.UIO[B]):zio.UIO[Option[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => UIO[(Key2, Value2)]): UIO[Map[Key2, Value2]]", "member" : "zio.UIO.foreach", "link" : "zio\/UIO$.html#foreach[Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.UIO[(Key2,Value2)]):zio.UIO[Map[Key2,Value2]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Array[A])(f: (A) => UIO[B])(arg0: ClassTag[B]): UIO[Array[B]]", "member" : "zio.UIO.foreach", "link" : "zio\/UIO$.html#foreach[A,B](in:Array[A])(f:A=>zio.UIO[B])(implicitevidence$3:scala.reflect.ClassTag[B]):zio.UIO[Array[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Set[A])(f: (A) => UIO[B]): UIO[Set[B]]", "member" : "zio.UIO.foreach", "link" : "zio\/UIO$.html#foreach[A,B](in:Set[A])(f:A=>zio.UIO[B]):zio.UIO[Set[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Collection[A])(f: (A) => UIO[B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): UIO[Collection[B]]", "member" : "zio.UIO.foreach", "link" : "zio\/UIO$.html#foreach[A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.UIO[B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.UIO[Collection[B]]", "kind" : "def"}, {"label" : "forkAllDiscard", "tail" : "(as: => Iterable[UIO[A]]): UIO[Unit]", "member" : "zio.UIO.forkAllDiscard", "link" : "zio\/UIO$.html#forkAllDiscard[A](as:=>Iterable[zio.UIO[A]]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "forkAll_", "tail" : "(as: => Iterable[UIO[A]]): UIO[Unit]", "member" : "zio.UIO.forkAll_", "link" : "zio\/UIO$.html#forkAll_[A](as:=>Iterable[zio.UIO[A]]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "forkAll", "tail" : "(as: Collection[UIO[A]])(bf: zio.BuildFrom[Collection[UIO[A]], A, Collection[A]]): UIO[Fiber[Nothing, Collection[A]]]", "member" : "zio.UIO.forkAll", "link" : "zio\/UIO$.html#forkAll[A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.UIO[A]])(implicitbf:zio.BuildFrom[Collection[zio.UIO[A]],A,Collection[A]]):zio.UIO[zio.Fiber[Nothing,Collection[A]]]", "kind" : "def"}, {"label" : "forall", "tail" : "(as: => Iterable[A])(f: (A) => UIO[Boolean]): UIO[Boolean]", "member" : "zio.UIO.forall", "link" : "zio\/UIO$.html#forall[A](as:=>Iterable[A])(f:A=>zio.UIO[Boolean]):zio.UIO[Boolean]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(in: => Iterable[A])(zero: => S)(f: (A, S) => UIO[S]): UIO[S]", "member" : "zio.UIO.foldRight", "link" : "zio\/UIO$.html#foldRight[S,A](in:=>Iterable[A])(zero:=>S)(f:(A,S)=>zio.UIO[S]):zio.UIO[S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(in: => Iterable[A])(zero: => S)(f: (S, A) => UIO[S]): UIO[S]", "member" : "zio.UIO.foldLeft", "link" : "zio\/UIO$.html#foldLeft[S,A](in:=>Iterable[A])(zero:=>S)(f:(S,A)=>zio.UIO[S]):zio.UIO[S]", "kind" : "def"}, {"label" : "flatten", "tail" : "(uio: => UIO[UIO[A]]): UIO[A]", "member" : "zio.UIO.flatten", "link" : "zio\/UIO$.html#flatten[A](uio:=>zio.UIO[zio.UIO[A]]):zio.UIO[A]", "kind" : "def"}, {"label" : "firstSuccessOf", "tail" : "(uio: => UIO[A], rest: => Iterable[UIO[A]]): UIO[A]", "member" : "zio.UIO.firstSuccessOf", "link" : "zio\/UIO$.html#firstSuccessOf[A](uio:=>zio.UIO[A],rest:=>Iterable[zio.UIO[A]]):zio.UIO[A]", "kind" : "def"}, {"label" : "filterNotPar", "tail" : "(as: Set[A])(f: (A) => UIO[Boolean]): UIO[Set[A]]", "member" : "zio.UIO.filterNotPar", "link" : "zio\/UIO$.html#filterNotPar[A](as:Set[A])(f:A=>zio.UIO[Boolean]):zio.UIO[Set[A]]", "kind" : "def"}, {"label" : "filterNotPar", "tail" : "(as: Collection[A])(f: (A) => UIO[Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.UIO.filterNotPar", "link" : "zio\/UIO$.html#filterNotPar[A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.UIO[Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Set[A])(f: (A) => UIO[Boolean]): UIO[Set[A]]", "member" : "zio.UIO.filterNot", "link" : "zio\/UIO$.html#filterNot[A](as:Set[A])(f:A=>zio.UIO[Boolean]):zio.UIO[Set[A]]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Collection[A])(f: (A) => UIO[Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.UIO.filterNot", "link" : "zio\/UIO$.html#filterNot[A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.UIO[Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "filterPar", "tail" : "(as: Set[A])(f: (A) => UIO[Boolean]): UIO[Set[A]]", "member" : "zio.UIO.filterPar", "link" : "zio\/UIO$.html#filterPar[A](as:Set[A])(f:A=>zio.UIO[Boolean]):zio.UIO[Set[A]]", "kind" : "def"}, {"label" : "filterPar", "tail" : "(as: Collection[A])(f: (A) => UIO[Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.UIO.filterPar", "link" : "zio\/UIO$.html#filterPar[A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.UIO[Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Set[A])(f: (A) => UIO[Boolean]): UIO[Set[A]]", "member" : "zio.UIO.filter", "link" : "zio\/UIO$.html#filter[A](as:Set[A])(f:A=>zio.UIO[Boolean]):zio.UIO[Set[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Collection[A])(f: (A) => UIO[Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.UIO.filter", "link" : "zio\/UIO$.html#filter[A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.UIO[Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "fiberId", "tail" : ": UIO[FiberId]", "member" : "zio.UIO.fiberId", "link" : "zio\/UIO$.html#fiberId:zio.UIO[zio.FiberId]", "kind" : "val"}, {"label" : "failCauseWith", "tail" : "(function: (() => ZTrace) => Cause[Nothing]): UIO[Nothing]", "member" : "zio.UIO.failCauseWith", "link" : "zio\/UIO$.html#failCauseWith(function:(()=>zio.ZTrace)=>zio.Cause[Nothing]):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "failCause", "tail" : "(cause: => Cause[Nothing]): UIO[Nothing]", "member" : "zio.UIO.failCause", "link" : "zio\/UIO$.html#failCause(cause:=>zio.Cause[Nothing]):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "exists", "tail" : "(as: => Iterable[A])(f: (A) => UIO[Boolean]): UIO[Boolean]", "member" : "zio.UIO.exists", "link" : "zio\/UIO$.html#exists[A](as:=>Iterable[A])(f:A=>zio.UIO[Boolean]):zio.UIO[Boolean]", "kind" : "def"}, {"label" : "executor", "tail" : "(): UIO[Executor]", "member" : "zio.UIO.executor", "link" : "zio\/UIO$.html#executor:zio.UIO[zio.Executor]", "kind" : "def"}, {"label" : "effectTotal", "tail" : "(effect: => A): UIO[A]", "member" : "zio.UIO.effectTotal", "link" : "zio\/UIO$.html#effectTotal[A](effect:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "effectSuspendTotalWith", "tail" : "(p: (Platform, Id) => UIO[A]): UIO[A]", "member" : "zio.UIO.effectSuspendTotalWith", "link" : "zio\/UIO$.html#effectSuspendTotalWith[A](p:(zio.internal.Platform,zio.Fiber.Id)=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "effectSuspendTotal", "tail" : "(uio: => UIO[A]): UIO[A]", "member" : "zio.UIO.effectSuspendTotal", "link" : "zio\/UIO$.html#effectSuspendTotal[A](uio:=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "effectAsyncInterrupt", "tail" : "(register: ((UIO[A]) => Unit) => Either[Canceler[Any], UIO[A]], blockingOn: => FiberId): UIO[A]", "member" : "zio.UIO.effectAsyncInterrupt", "link" : "zio\/UIO$.html#effectAsyncInterrupt[A](register:(zio.UIO[A]=>Unit)=>Either[zio.Canceler[Any],zio.UIO[A]],blockingOn:=>zio.FiberId):zio.UIO[A]", "kind" : "def"}, {"label" : "effectAsyncM", "tail" : "(register: ((UIO[A]) => Unit) => UIO[Any]): UIO[A]", "member" : "zio.UIO.effectAsyncM", "link" : "zio\/UIO$.html#effectAsyncM[A](register:(zio.UIO[A]=>Unit)=>zio.UIO[Any]):zio.UIO[A]", "kind" : "def"}, {"label" : "effectAsyncMaybe", "tail" : "(register: ((UIO[A]) => Unit) => Option[UIO[A]], blockingOn: => FiberId): UIO[A]", "member" : "zio.UIO.effectAsyncMaybe", "link" : "zio\/UIO$.html#effectAsyncMaybe[A](register:(zio.UIO[A]=>Unit)=>Option[zio.UIO[A]],blockingOn:=>zio.FiberId):zio.UIO[A]", "kind" : "def"}, {"label" : "effectAsync", "tail" : "(register: ((UIO[A]) => Unit) => Any, blockingOn: => FiberId): UIO[A]", "member" : "zio.UIO.effectAsync", "link" : "zio\/UIO$.html#effectAsync[A](register:(zio.UIO[A]=>Unit)=>Any,blockingOn:=>zio.FiberId):zio.UIO[A]", "kind" : "def"}, {"label" : "done", "tail" : "(r: => Exit[Nothing, A]): UIO[A]", "member" : "zio.UIO.done", "link" : "zio\/UIO$.html#done[A](r:=>zio.Exit[Nothing,A]):zio.UIO[A]", "kind" : "def"}, {"label" : "dieMessage", "tail" : "(message: => String): UIO[Nothing]", "member" : "zio.UIO.dieMessage", "link" : "zio\/UIO$.html#dieMessage(message:=>String):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(t: => Throwable): UIO[Nothing]", "member" : "zio.UIO.die", "link" : "zio\/UIO$.html#die(t:=>Throwable):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "descriptorWith", "tail" : "(f: (Descriptor) => UIO[A]): UIO[A]", "member" : "zio.UIO.descriptorWith", "link" : "zio\/UIO$.html#descriptorWith[A](f:zio.Fiber.Descriptor=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "descriptor", "tail" : "(): UIO[Descriptor]", "member" : "zio.UIO.descriptor", "link" : "zio\/UIO$.html#descriptor:zio.UIO[zio.Fiber.Descriptor]", "kind" : "def"}, {"label" : "debug", "tail" : "(value: => Any): UIO[Unit]", "member" : "zio.UIO.debug", "link" : "zio\/UIO$.html#debug(value:=>Any):zio.UIO[Unit]", "kind" : "def"}, {"label" : "collectParN", "tail" : "(n: => Int)(in: Collection[A])(f: (A) => IO[Option[Nothing], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): UIO[Collection[B]]", "member" : "zio.UIO.collectParN", "link" : "zio\/UIO$.html#collectParN[A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(in:Collection[A])(f:A=>zio.IO[Option[Nothing],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.UIO[Collection[B]]", "kind" : "def"}, {"label" : "collectPar", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => IO[Option[Nothing], (Key2, Value2)]): UIO[Map[Key2, Value2]]", "member" : "zio.UIO.collectPar", "link" : "zio\/UIO$.html#collectPar[Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.IO[Option[Nothing],(Key2,Value2)]):zio.UIO[Map[Key2,Value2]]", "kind" : "def"}, {"label" : "collectPar", "tail" : "(in: Collection[A])(f: (A) => IO[Option[Nothing], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): UIO[Collection[B]]", "member" : "zio.UIO.collectPar", "link" : "zio\/UIO$.html#collectPar[A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.IO[Option[Nothing],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.UIO[Collection[B]]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(as: => Iterable[A])(f: (A) => UIO[Option[B]]): UIO[Option[B]]", "member" : "zio.UIO.collectFirst", "link" : "zio\/UIO$.html#collectFirst[A,B](as:=>Iterable[A])(f:A=>zio.UIO[Option[B]]):zio.UIO[Option[B]]", "kind" : "def"}, {"label" : "collectAllWithParN", "tail" : "(n: => Int)(as: Collection[UIO[A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[UIO[A]], B, Collection[B]]): UIO[Collection[B]]", "member" : "zio.UIO.collectAllWithParN", "link" : "zio\/UIO$.html#collectAllWithParN[A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.UIO[A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.UIO[A]],B,Collection[B]]):zio.UIO[Collection[B]]", "kind" : "def"}, {"label" : "collectAllWithPar", "tail" : "(as: Collection[UIO[A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[UIO[A]], B, Collection[B]]): UIO[Collection[B]]", "member" : "zio.UIO.collectAllWithPar", "link" : "zio\/UIO$.html#collectAllWithPar[A,B,Collection[+Element]<:Iterable[Element]](as:Collection[zio.UIO[A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.UIO[A]],B,Collection[B]]):zio.UIO[Collection[B]]", "kind" : "def"}, {"label" : "collectAllWith", "tail" : "(in: Collection[UIO[A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[UIO[A]], B, Collection[B]]): UIO[Collection[B]]", "member" : "zio.UIO.collectAllWith", "link" : "zio\/UIO$.html#collectAllWith[A,B,Collection[+Element]<:Iterable[Element]](in:Collection[zio.UIO[A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.UIO[A]],B,Collection[B]]):zio.UIO[Collection[B]]", "kind" : "def"}, {"label" : "collectAllSuccessesParN", "tail" : "(n: => Int)(as: Collection[UIO[A]])(bf: zio.BuildFrom[Collection[UIO[A]], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.UIO.collectAllSuccessesParN", "link" : "zio\/UIO$.html#collectAllSuccessesParN[A,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.UIO[A]])(implicitbf:zio.BuildFrom[Collection[zio.UIO[A]],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "collectAllSuccessesPar", "tail" : "(as: Collection[UIO[A]])(bf: zio.BuildFrom[Collection[UIO[A]], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.UIO.collectAllSuccessesPar", "link" : "zio\/UIO$.html#collectAllSuccessesPar[A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.UIO[A]])(implicitbf:zio.BuildFrom[Collection[zio.UIO[A]],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "collectAllSuccesses", "tail" : "(in: Collection[UIO[A]])(bf: zio.BuildFrom[Collection[UIO[A]], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.UIO.collectAllSuccesses", "link" : "zio\/UIO$.html#collectAllSuccesses[A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.UIO[A]])(implicitbf:zio.BuildFrom[Collection[zio.UIO[A]],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "collectAllParNDiscard", "tail" : "(n: => Int)(as: => Iterable[UIO[A]]): UIO[Unit]", "member" : "zio.UIO.collectAllParNDiscard", "link" : "zio\/UIO$.html#collectAllParNDiscard[A](n:=>Int)(as:=>Iterable[zio.UIO[A]]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "collectAllParN_", "tail" : "(n: => Int)(as: => Iterable[UIO[A]]): UIO[Unit]", "member" : "zio.UIO.collectAllParN_", "link" : "zio\/UIO$.html#collectAllParN_[A](n:=>Int)(as:=>Iterable[zio.UIO[A]]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "collectAllParN", "tail" : "(n: => Int)(as: Collection[UIO[A]])(bf: zio.BuildFrom[Collection[UIO[A]], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.UIO.collectAllParN", "link" : "zio\/UIO$.html#collectAllParN[A,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.UIO[A]])(implicitbf:zio.BuildFrom[Collection[zio.UIO[A]],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "collectAllParDiscard", "tail" : "(in: => Iterable[UIO[A]]): UIO[Unit]", "member" : "zio.UIO.collectAllParDiscard", "link" : "zio\/UIO$.html#collectAllParDiscard[A](in:=>Iterable[zio.UIO[A]]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "collectAllPar_", "tail" : "(in: => Iterable[UIO[A]]): UIO[Unit]", "member" : "zio.UIO.collectAllPar_", "link" : "zio\/UIO$.html#collectAllPar_[A](in:=>Iterable[zio.UIO[A]]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: NonEmptyChunk[UIO[A]]): UIO[NonEmptyChunk[A]]", "member" : "zio.UIO.collectAllPar", "link" : "zio\/UIO$.html#collectAllPar[A](as:zio.NonEmptyChunk[zio.UIO[A]]):zio.UIO[zio.NonEmptyChunk[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Array[UIO[A]])(arg0: ClassTag[A]): UIO[Array[A]]", "member" : "zio.UIO.collectAllPar", "link" : "zio\/UIO$.html#collectAllPar[A](as:Array[zio.UIO[A]])(implicitevidence$2:scala.reflect.ClassTag[A]):zio.UIO[Array[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Set[UIO[A]]): UIO[Set[A]]", "member" : "zio.UIO.collectAllPar", "link" : "zio\/UIO$.html#collectAllPar[A](as:Set[zio.UIO[A]]):zio.UIO[Set[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Collection[UIO[A]])(bf: zio.BuildFrom[Collection[UIO[A]], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.UIO.collectAllPar", "link" : "zio\/UIO$.html#collectAllPar[A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.UIO[A]])(implicitbf:zio.BuildFrom[Collection[zio.UIO[A]],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "collectAllDiscard", "tail" : "(in: => Iterable[UIO[A]]): UIO[Unit]", "member" : "zio.UIO.collectAllDiscard", "link" : "zio\/UIO$.html#collectAllDiscard[A](in:=>Iterable[zio.UIO[A]]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "collectAll_", "tail" : "(in: => Iterable[UIO[A]]): UIO[Unit]", "member" : "zio.UIO.collectAll_", "link" : "zio\/UIO$.html#collectAll_[A](in:=>Iterable[zio.UIO[A]]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: NonEmptyChunk[UIO[A]]): UIO[NonEmptyChunk[A]]", "member" : "zio.UIO.collectAll", "link" : "zio\/UIO$.html#collectAll[A](in:zio.NonEmptyChunk[zio.UIO[A]]):zio.UIO[zio.NonEmptyChunk[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Option[UIO[A]]): UIO[Option[A]]", "member" : "zio.UIO.collectAll", "link" : "zio\/UIO$.html#collectAll[A](in:Option[zio.UIO[A]]):zio.UIO[Option[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Array[UIO[A]])(arg0: ClassTag[A]): UIO[Array[A]]", "member" : "zio.UIO.collectAll", "link" : "zio\/UIO$.html#collectAll[A](in:Array[zio.UIO[A]])(implicitevidence$1:scala.reflect.ClassTag[A]):zio.UIO[Array[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Set[UIO[A]]): UIO[Set[A]]", "member" : "zio.UIO.collectAll", "link" : "zio\/UIO$.html#collectAll[A](in:Set[zio.UIO[A]]):zio.UIO[Set[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Collection[UIO[A]])(bf: zio.BuildFrom[Collection[UIO[A]], A, Collection[A]]): UIO[Collection[A]]", "member" : "zio.UIO.collectAll", "link" : "zio\/UIO$.html#collectAll[A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.UIO[A]])(implicitbf:zio.BuildFrom[Collection[zio.UIO[A]],A,Collection[A]]):zio.UIO[Collection[A]]", "kind" : "def"}, {"label" : "collect", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => IO[Option[Nothing], (Key2, Value2)]): UIO[Map[Key2, Value2]]", "member" : "zio.UIO.collect", "link" : "zio\/UIO$.html#collect[Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.IO[Option[Nothing],(Key2,Value2)]):zio.UIO[Map[Key2,Value2]]", "kind" : "def"}, {"label" : "collect", "tail" : "(in: Collection[A])(f: (A) => IO[Option[Nothing], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): UIO[Collection[B]]", "member" : "zio.UIO.collect", "link" : "zio\/UIO$.html#collect[A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.IO[Option[Nothing],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.UIO[Collection[B]]", "kind" : "def"}, {"label" : "checkTraced", "tail" : "(f: (TracingStatus) => UIO[A]): UIO[A]", "member" : "zio.UIO.checkTraced", "link" : "zio\/UIO$.html#checkTraced[A](f:zio.TracingStatus=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "checkInterruptible", "tail" : "(f: (InterruptStatus) => UIO[A]): UIO[A]", "member" : "zio.UIO.checkInterruptible", "link" : "zio\/UIO$.html#checkInterruptible[A](f:zio.InterruptStatus=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "bracketExit", "tail" : "(acquire: => UIO[A], release: (A, Exit[Nothing, B]) => UIO[Any], use: (A) => UIO[B]): UIO[B]", "member" : "zio.UIO.bracketExit", "link" : "zio\/UIO$.html#bracketExit[A,B](acquire:=>zio.UIO[A],release:(A,zio.Exit[Nothing,B])=>zio.UIO[Any],use:A=>zio.UIO[B]):zio.UIO[B]", "kind" : "def"}, {"label" : "bracketExit", "tail" : "(acquire: => UIO[A]): BracketExitAcquire[Any, Nothing, A]", "member" : "zio.UIO.bracketExit", "link" : "zio\/UIO$.html#bracketExit[A](acquire:=>zio.UIO[A]):zio.ZIO.BracketExitAcquire[Any,Nothing,A]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: => UIO[A], release: (A) => UIO[Any], use: (A) => UIO[B]): UIO[B]", "member" : "zio.UIO.bracket", "link" : "zio\/UIO$.html#bracket[A,B](acquire:=>zio.UIO[A],release:A=>zio.UIO[Any],use:A=>zio.UIO[B]):zio.UIO[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: => UIO[A]): BracketAcquire[Any, Nothing, A]", "member" : "zio.UIO.bracket", "link" : "zio\/UIO$.html#bracket[A](acquire:=>zio.UIO[A]):zio.ZIO.BracketAcquire[Any,Nothing,A]", "kind" : "def"}, {"label" : "blockingExecutor", "tail" : "(): UIO[Executor]", "member" : "zio.UIO.blockingExecutor", "link" : "zio\/UIO$.html#blockingExecutor:zio.UIO[zio.Executor]", "kind" : "def"}, {"label" : "blocking", "tail" : "(zio: => UIO[A]): UIO[A]", "member" : "zio.UIO.blocking", "link" : "zio\/UIO$.html#blocking[A](zio:=>zio.UIO[A]):zio.UIO[A]", "kind" : "def"}, {"label" : "asyncInterrupt", "tail" : "(register: ((UIO[A]) => Unit) => Either[Canceler[Any], UIO[A]], blockingOn: => FiberId): UIO[A]", "member" : "zio.UIO.asyncInterrupt", "link" : "zio\/UIO$.html#asyncInterrupt[A](register:(zio.UIO[A]=>Unit)=>Either[zio.Canceler[Any],zio.UIO[A]],blockingOn:=>zio.FiberId):zio.UIO[A]", "kind" : "def"}, {"label" : "asyncZIO", "tail" : "(register: ((UIO[A]) => Unit) => UIO[Any]): UIO[A]", "member" : "zio.UIO.asyncZIO", "link" : "zio\/UIO$.html#asyncZIO[A](register:(zio.UIO[A]=>Unit)=>zio.UIO[Any]):zio.UIO[A]", "kind" : "def"}, {"label" : "asyncMaybe", "tail" : "(register: ((UIO[A]) => Unit) => Option[UIO[A]], blockingOn: => FiberId): UIO[A]", "member" : "zio.UIO.asyncMaybe", "link" : "zio\/UIO$.html#asyncMaybe[A](register:(zio.UIO[A]=>Unit)=>Option[zio.UIO[A]],blockingOn:=>zio.FiberId):zio.UIO[A]", "kind" : "def"}, {"label" : "async", "tail" : "(register: ((UIO[A]) => Unit) => Any, blockingOn: => FiberId): UIO[A]", "member" : "zio.UIO.async", "link" : "zio\/UIO$.html#async[A](register:(zio.UIO[A]=>Unit)=>Any,blockingOn:=>zio.FiberId):zio.UIO[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: => A): UIO[A]", "member" : "zio.UIO.apply", "link" : "zio\/UIO$.html#apply[A](a:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "allowInterrupt", "tail" : "(): UIO[Unit]", "member" : "zio.UIO.allowInterrupt", "link" : "zio\/UIO$.html#allowInterrupt:zio.UIO[Unit]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: => UIO[A], release: (A, Exit[Nothing, B]) => UIO[Any], use: (A) => UIO[B]): UIO[B]", "member" : "zio.UIO.acquireReleaseExitWith", "link" : "zio\/UIO$.html#acquireReleaseExitWith[A,B](acquire:=>zio.UIO[A],release:(A,zio.Exit[Nothing,B])=>zio.UIO[Any],use:A=>zio.UIO[B]):zio.UIO[B]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: => UIO[A]): BracketExitAcquire[Any, Nothing, A]", "member" : "zio.UIO.acquireReleaseExitWith", "link" : "zio\/UIO$.html#acquireReleaseExitWith[A](acquire:=>zio.UIO[A]):zio.ZIO.BracketExitAcquire[Any,Nothing,A]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: => UIO[A], release: (A) => UIO[Any], use: (A) => UIO[B]): UIO[B]", "member" : "zio.UIO.acquireReleaseWith", "link" : "zio\/UIO$.html#acquireReleaseWith[A,B](acquire:=>zio.UIO[A],release:A=>zio.UIO[Any],use:A=>zio.UIO[B]):zio.UIO[B]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: => UIO[A]): BracketAcquire[Any, Nothing, A]", "member" : "zio.UIO.acquireReleaseWith", "link" : "zio\/UIO$.html#acquireReleaseWith[A](acquire:=>zio.UIO[A]):zio.ZIO.BracketAcquire[Any,Nothing,A]", "kind" : "def"}, {"label" : "absolve", "tail" : "(v: => UIO[Either[Nothing, A]]): UIO[A]", "member" : "zio.UIO.absolve", "link" : "zio\/UIO$.html#absolve[A](v:=>zio.UIO[Either[Nothing,A]]):zio.UIO[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/UIO$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/UIO$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/UIO$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/UIO$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/UIO$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/UIO$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/UIO$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/UIO$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/UIO$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/UIO$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/UIO$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/UIO$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/UIO$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/UIO$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/UIO$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/UIO$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/UIO$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/UIO$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/UIO$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.Unzippable", "object" : "zio\/Unzippable$.html", "members_object" : [{"label" : "UnzippableLeftIdentity", "tail" : "(): In[Unit, A, A]", "member" : "zio.Unzippable.UnzippableLeftIdentity", "link" : "zio\/Unzippable$.html#UnzippableLeftIdentity[A]:zio.Unzippable.In[Unit,A,A]", "kind" : "implicit def"}, {"label" : "In", "tail" : "", "member" : "zio.Unzippable.In", "link" : "zio\/Unzippable$.html#In[A,B,C]=zio.Unzippable[A,B]{typeIn=C}", "kind" : "type"}, {"label" : "UnzippableRightIdentity", "tail" : "(): In[A, Unit, A]", "member" : "zio.UnzippableLowPriority1.UnzippableRightIdentity", "link" : "zio\/Unzippable$.html#UnzippableRightIdentity[A]:zio.Unzippable.In[A,Unit,A]", "kind" : "implicit def"}, {"label" : "Unzippable22", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable22", "link" : "zio\/Unzippable$.html#Unzippable22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable21", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable21", "link" : "zio\/Unzippable$.html#Unzippable21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable20", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable20", "link" : "zio\/Unzippable$.html#Unzippable20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable19", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable19", "link" : "zio\/Unzippable$.html#Unzippable19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable18", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable18", "link" : "zio\/Unzippable$.html#Unzippable18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable17", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable17", "link" : "zio\/Unzippable$.html#Unzippable17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable16", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable16", "link" : "zio\/Unzippable$.html#Unzippable16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable15", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable15", "link" : "zio\/Unzippable$.html#Unzippable15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable14", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable14", "link" : "zio\/Unzippable$.html#Unzippable14[A,B,C,D,E,F,G,H,I,J,K,L,M,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable13", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L), Z, (A, B, C, D, E, F, G, H, I, J, K, L, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable13", "link" : "zio\/Unzippable$.html#Unzippable13[A,B,C,D,E,F,G,H,I,J,K,L,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L),Z,(A,B,C,D,E,F,G,H,I,J,K,L,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable12", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K), Z, (A, B, C, D, E, F, G, H, I, J, K, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable12", "link" : "zio\/Unzippable$.html#Unzippable12[A,B,C,D,E,F,G,H,I,J,K,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K),Z,(A,B,C,D,E,F,G,H,I,J,K,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable11", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J), Z, (A, B, C, D, E, F, G, H, I, J, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable11", "link" : "zio\/Unzippable$.html#Unzippable11[A,B,C,D,E,F,G,H,I,J,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J),Z,(A,B,C,D,E,F,G,H,I,J,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable10", "tail" : "(): In[(A, B, C, D, E, F, G, H, I), Z, (A, B, C, D, E, F, G, H, I, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable10", "link" : "zio\/Unzippable$.html#Unzippable10[A,B,C,D,E,F,G,H,I,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I),Z,(A,B,C,D,E,F,G,H,I,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable9", "tail" : "(): In[(A, B, C, D, E, F, G, H), Z, (A, B, C, D, E, F, G, H, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable9", "link" : "zio\/Unzippable$.html#Unzippable9[A,B,C,D,E,F,G,H,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H),Z,(A,B,C,D,E,F,G,H,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable8", "tail" : "(): In[(A, B, C, D, E, F, G), Z, (A, B, C, D, E, F, G, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable8", "link" : "zio\/Unzippable$.html#Unzippable8[A,B,C,D,E,F,G,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G),Z,(A,B,C,D,E,F,G,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable7", "tail" : "(): In[(A, B, C, D, E, F), Z, (A, B, C, D, E, F, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable7", "link" : "zio\/Unzippable$.html#Unzippable7[A,B,C,D,E,F,Z]:zio.Unzippable.In[(A,B,C,D,E,F),Z,(A,B,C,D,E,F,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable6", "tail" : "(): In[(A, B, C, D, E), Z, (A, B, C, D, E, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable6", "link" : "zio\/Unzippable$.html#Unzippable6[A,B,C,D,E,Z]:zio.Unzippable.In[(A,B,C,D,E),Z,(A,B,C,D,E,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable5", "tail" : "(): In[(A, B, C, D), Z, (A, B, C, D, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable5", "link" : "zio\/Unzippable$.html#Unzippable5[A,B,C,D,Z]:zio.Unzippable.In[(A,B,C,D),Z,(A,B,C,D,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable4", "tail" : "(): In[(A, B, C), Z, (A, B, C, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable4", "link" : "zio\/Unzippable$.html#Unzippable4[A,B,C,Z]:zio.Unzippable.In[(A,B,C),Z,(A,B,C,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable3", "tail" : "(): In[(A, B), Z, (A, B, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable3", "link" : "zio\/Unzippable$.html#Unzippable3[A,B,Z]:zio.Unzippable.In[(A,B),Z,(A,B,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable2", "tail" : "(): In[A, B, (A, B)]", "member" : "zio.UnzippableLowPriority3.Unzippable2", "link" : "zio\/Unzippable$.html#Unzippable2[A,B]:zio.Unzippable.In[A,B,(A,B)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Unzippable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Unzippable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Unzippable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Unzippable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Unzippable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Unzippable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Unzippable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Unzippable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Unzippable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Unzippable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Unzippable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Unzippable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Unzippable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Unzippable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Unzippable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Unzippable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Unzippable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Unzippable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Unzippable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/Unzippable.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Unzippable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Unzippable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Unzippable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Unzippable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Unzippable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Unzippable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Unzippable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Unzippable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Unzippable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Unzippable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Unzippable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Unzippable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Unzippable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Unzippable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Unzippable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Unzippable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Unzippable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Unzippable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Unzippable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unzip", "tail" : "(in: In): (A, B)", "member" : "zio.Unzippable.unzip", "link" : "zio\/Unzippable.html#unzip(in:Unzippable.this.In):(A,B)", "kind" : "abstract def"}, {"member" : "zio.Unzippable.In", "error" : "unsupported entity"}], "shortDescription" : ""}, {"name" : "zio.UnzippableLowPriority1", "trait" : "zio\/UnzippableLowPriority1.html", "kind" : "trait", "members_trait" : [{"label" : "UnzippableRightIdentity", "tail" : "(): In[A, Unit, A]", "member" : "zio.UnzippableLowPriority1.UnzippableRightIdentity", "link" : "zio\/UnzippableLowPriority1.html#UnzippableRightIdentity[A]:zio.Unzippable.In[A,Unit,A]", "kind" : "implicit def"}, {"label" : "Unzippable22", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable22", "link" : "zio\/UnzippableLowPriority1.html#Unzippable22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable21", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable21", "link" : "zio\/UnzippableLowPriority1.html#Unzippable21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable20", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable20", "link" : "zio\/UnzippableLowPriority1.html#Unzippable20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable19", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable19", "link" : "zio\/UnzippableLowPriority1.html#Unzippable19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable18", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable18", "link" : "zio\/UnzippableLowPriority1.html#Unzippable18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable17", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable17", "link" : "zio\/UnzippableLowPriority1.html#Unzippable17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable16", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable16", "link" : "zio\/UnzippableLowPriority1.html#Unzippable16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable15", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable15", "link" : "zio\/UnzippableLowPriority1.html#Unzippable15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable14", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable14", "link" : "zio\/UnzippableLowPriority1.html#Unzippable14[A,B,C,D,E,F,G,H,I,J,K,L,M,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable13", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L), Z, (A, B, C, D, E, F, G, H, I, J, K, L, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable13", "link" : "zio\/UnzippableLowPriority1.html#Unzippable13[A,B,C,D,E,F,G,H,I,J,K,L,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L),Z,(A,B,C,D,E,F,G,H,I,J,K,L,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable12", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K), Z, (A, B, C, D, E, F, G, H, I, J, K, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable12", "link" : "zio\/UnzippableLowPriority1.html#Unzippable12[A,B,C,D,E,F,G,H,I,J,K,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K),Z,(A,B,C,D,E,F,G,H,I,J,K,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable11", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J), Z, (A, B, C, D, E, F, G, H, I, J, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable11", "link" : "zio\/UnzippableLowPriority1.html#Unzippable11[A,B,C,D,E,F,G,H,I,J,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J),Z,(A,B,C,D,E,F,G,H,I,J,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable10", "tail" : "(): In[(A, B, C, D, E, F, G, H, I), Z, (A, B, C, D, E, F, G, H, I, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable10", "link" : "zio\/UnzippableLowPriority1.html#Unzippable10[A,B,C,D,E,F,G,H,I,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I),Z,(A,B,C,D,E,F,G,H,I,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable9", "tail" : "(): In[(A, B, C, D, E, F, G, H), Z, (A, B, C, D, E, F, G, H, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable9", "link" : "zio\/UnzippableLowPriority1.html#Unzippable9[A,B,C,D,E,F,G,H,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H),Z,(A,B,C,D,E,F,G,H,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable8", "tail" : "(): In[(A, B, C, D, E, F, G), Z, (A, B, C, D, E, F, G, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable8", "link" : "zio\/UnzippableLowPriority1.html#Unzippable8[A,B,C,D,E,F,G,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G),Z,(A,B,C,D,E,F,G,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable7", "tail" : "(): In[(A, B, C, D, E, F), Z, (A, B, C, D, E, F, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable7", "link" : "zio\/UnzippableLowPriority1.html#Unzippable7[A,B,C,D,E,F,Z]:zio.Unzippable.In[(A,B,C,D,E,F),Z,(A,B,C,D,E,F,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable6", "tail" : "(): In[(A, B, C, D, E), Z, (A, B, C, D, E, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable6", "link" : "zio\/UnzippableLowPriority1.html#Unzippable6[A,B,C,D,E,Z]:zio.Unzippable.In[(A,B,C,D,E),Z,(A,B,C,D,E,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable5", "tail" : "(): In[(A, B, C, D), Z, (A, B, C, D, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable5", "link" : "zio\/UnzippableLowPriority1.html#Unzippable5[A,B,C,D,Z]:zio.Unzippable.In[(A,B,C,D),Z,(A,B,C,D,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable4", "tail" : "(): In[(A, B, C), Z, (A, B, C, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable4", "link" : "zio\/UnzippableLowPriority1.html#Unzippable4[A,B,C,Z]:zio.Unzippable.In[(A,B,C),Z,(A,B,C,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable3", "tail" : "(): In[(A, B), Z, (A, B, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable3", "link" : "zio\/UnzippableLowPriority1.html#Unzippable3[A,B,Z]:zio.Unzippable.In[(A,B),Z,(A,B,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable2", "tail" : "(): In[A, B, (A, B)]", "member" : "zio.UnzippableLowPriority3.Unzippable2", "link" : "zio\/UnzippableLowPriority1.html#Unzippable2[A,B]:zio.Unzippable.In[A,B,(A,B)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/UnzippableLowPriority1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/UnzippableLowPriority1.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/UnzippableLowPriority1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/UnzippableLowPriority1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/UnzippableLowPriority1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/UnzippableLowPriority1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/UnzippableLowPriority1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/UnzippableLowPriority1.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/UnzippableLowPriority1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/UnzippableLowPriority1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/UnzippableLowPriority1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/UnzippableLowPriority1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/UnzippableLowPriority1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/UnzippableLowPriority1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/UnzippableLowPriority1.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/UnzippableLowPriority1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/UnzippableLowPriority1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/UnzippableLowPriority1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/UnzippableLowPriority1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.UnzippableLowPriority2", "trait" : "zio\/UnzippableLowPriority2.html", "kind" : "trait", "members_trait" : [{"label" : "Unzippable22", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable22", "link" : "zio\/UnzippableLowPriority2.html#Unzippable22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable21", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable21", "link" : "zio\/UnzippableLowPriority2.html#Unzippable21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable20", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable20", "link" : "zio\/UnzippableLowPriority2.html#Unzippable20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable19", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable19", "link" : "zio\/UnzippableLowPriority2.html#Unzippable19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable18", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable18", "link" : "zio\/UnzippableLowPriority2.html#Unzippable18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable17", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable17", "link" : "zio\/UnzippableLowPriority2.html#Unzippable17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable16", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable16", "link" : "zio\/UnzippableLowPriority2.html#Unzippable16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable15", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M, N), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable15", "link" : "zio\/UnzippableLowPriority2.html#Unzippable15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M,N),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable14", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L, M), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable14", "link" : "zio\/UnzippableLowPriority2.html#Unzippable14[A,B,C,D,E,F,G,H,I,J,K,L,M,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L,M),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable13", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K, L), Z, (A, B, C, D, E, F, G, H, I, J, K, L, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable13", "link" : "zio\/UnzippableLowPriority2.html#Unzippable13[A,B,C,D,E,F,G,H,I,J,K,L,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K,L),Z,(A,B,C,D,E,F,G,H,I,J,K,L,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable12", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J, K), Z, (A, B, C, D, E, F, G, H, I, J, K, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable12", "link" : "zio\/UnzippableLowPriority2.html#Unzippable12[A,B,C,D,E,F,G,H,I,J,K,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J,K),Z,(A,B,C,D,E,F,G,H,I,J,K,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable11", "tail" : "(): In[(A, B, C, D, E, F, G, H, I, J), Z, (A, B, C, D, E, F, G, H, I, J, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable11", "link" : "zio\/UnzippableLowPriority2.html#Unzippable11[A,B,C,D,E,F,G,H,I,J,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I,J),Z,(A,B,C,D,E,F,G,H,I,J,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable10", "tail" : "(): In[(A, B, C, D, E, F, G, H, I), Z, (A, B, C, D, E, F, G, H, I, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable10", "link" : "zio\/UnzippableLowPriority2.html#Unzippable10[A,B,C,D,E,F,G,H,I,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H,I),Z,(A,B,C,D,E,F,G,H,I,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable9", "tail" : "(): In[(A, B, C, D, E, F, G, H), Z, (A, B, C, D, E, F, G, H, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable9", "link" : "zio\/UnzippableLowPriority2.html#Unzippable9[A,B,C,D,E,F,G,H,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G,H),Z,(A,B,C,D,E,F,G,H,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable8", "tail" : "(): In[(A, B, C, D, E, F, G), Z, (A, B, C, D, E, F, G, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable8", "link" : "zio\/UnzippableLowPriority2.html#Unzippable8[A,B,C,D,E,F,G,Z]:zio.Unzippable.In[(A,B,C,D,E,F,G),Z,(A,B,C,D,E,F,G,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable7", "tail" : "(): In[(A, B, C, D, E, F), Z, (A, B, C, D, E, F, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable7", "link" : "zio\/UnzippableLowPriority2.html#Unzippable7[A,B,C,D,E,F,Z]:zio.Unzippable.In[(A,B,C,D,E,F),Z,(A,B,C,D,E,F,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable6", "tail" : "(): In[(A, B, C, D, E), Z, (A, B, C, D, E, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable6", "link" : "zio\/UnzippableLowPriority2.html#Unzippable6[A,B,C,D,E,Z]:zio.Unzippable.In[(A,B,C,D,E),Z,(A,B,C,D,E,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable5", "tail" : "(): In[(A, B, C, D), Z, (A, B, C, D, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable5", "link" : "zio\/UnzippableLowPriority2.html#Unzippable5[A,B,C,D,Z]:zio.Unzippable.In[(A,B,C,D),Z,(A,B,C,D,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable4", "tail" : "(): In[(A, B, C), Z, (A, B, C, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable4", "link" : "zio\/UnzippableLowPriority2.html#Unzippable4[A,B,C,Z]:zio.Unzippable.In[(A,B,C),Z,(A,B,C,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable3", "tail" : "(): In[(A, B), Z, (A, B, Z)]", "member" : "zio.UnzippableLowPriority2.Unzippable3", "link" : "zio\/UnzippableLowPriority2.html#Unzippable3[A,B,Z]:zio.Unzippable.In[(A,B),Z,(A,B,Z)]", "kind" : "implicit def"}, {"label" : "Unzippable2", "tail" : "(): In[A, B, (A, B)]", "member" : "zio.UnzippableLowPriority3.Unzippable2", "link" : "zio\/UnzippableLowPriority2.html#Unzippable2[A,B]:zio.Unzippable.In[A,B,(A,B)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/UnzippableLowPriority2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/UnzippableLowPriority2.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/UnzippableLowPriority2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/UnzippableLowPriority2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/UnzippableLowPriority2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/UnzippableLowPriority2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/UnzippableLowPriority2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/UnzippableLowPriority2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/UnzippableLowPriority2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/UnzippableLowPriority2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/UnzippableLowPriority2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/UnzippableLowPriority2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/UnzippableLowPriority2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/UnzippableLowPriority2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/UnzippableLowPriority2.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/UnzippableLowPriority2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/UnzippableLowPriority2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/UnzippableLowPriority2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/UnzippableLowPriority2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.UnzippableLowPriority3", "trait" : "zio\/UnzippableLowPriority3.html", "kind" : "trait", "members_trait" : [{"label" : "Unzippable2", "tail" : "(): In[A, B, (A, B)]", "member" : "zio.UnzippableLowPriority3.Unzippable2", "link" : "zio\/UnzippableLowPriority3.html#Unzippable2[A,B]:zio.Unzippable.In[A,B,(A,B)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/UnzippableLowPriority3.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/UnzippableLowPriority3.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/UnzippableLowPriority3.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/UnzippableLowPriority3.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/UnzippableLowPriority3.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/UnzippableLowPriority3.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/UnzippableLowPriority3.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/UnzippableLowPriority3.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/UnzippableLowPriority3.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/UnzippableLowPriority3.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/UnzippableLowPriority3.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/UnzippableLowPriority3.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/UnzippableLowPriority3.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/UnzippableLowPriority3.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/UnzippableLowPriority3.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/UnzippableLowPriority3.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/UnzippableLowPriority3.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/UnzippableLowPriority3.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/UnzippableLowPriority3.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.URIO", "shortDescription" : "", "object" : "zio\/URIO$.html", "members_object" : [{"label" : "yieldNow", "tail" : ": UIO[Unit]", "member" : "zio.URIO.yieldNow", "link" : "zio\/URIO$.html#yieldNow:zio.UIO[Unit]", "kind" : "val"}, {"label" : "withRuntimeConfig", "tail" : "(runtimeConfig: => RuntimeConfig)(urio: => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.withRuntimeConfig", "link" : "zio\/URIO$.html#withRuntimeConfig[R,A](runtimeConfig:=>zio.RuntimeConfig)(urio:=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "whenZIO", "tail" : "(b: => URIO[R, Boolean]): WhenZIO[R, Nothing]", "member" : "zio.URIO.whenZIO", "link" : "zio\/URIO$.html#whenZIO[R](b:=>zio.URIO[R,Boolean]):zio.ZIO.WhenZIO[R,Nothing]", "kind" : "def"}, {"label" : "whenM", "tail" : "(b: => URIO[R, Boolean]): WhenZIO[R, Nothing]", "member" : "zio.URIO.whenM", "link" : "zio\/URIO$.html#whenM[R](b:=>zio.URIO[R,Boolean]):zio.ZIO.WhenZIO[R,Nothing]", "kind" : "def"}, {"label" : "whenCaseZIO", "tail" : "(a: => URIO[R, A])(pf: PartialFunction[A, URIO[R, B]]): URIO[R, Option[B]]", "member" : "zio.URIO.whenCaseZIO", "link" : "zio\/URIO$.html#whenCaseZIO[R,A,B](a:=>zio.URIO[R,A])(pf:PartialFunction[A,zio.URIO[R,B]]):zio.URIO[R,Option[B]]", "kind" : "def"}, {"label" : "whenCaseM", "tail" : "(a: => URIO[R, A])(pf: PartialFunction[A, URIO[R, B]]): URIO[R, Option[B]]", "member" : "zio.URIO.whenCaseM", "link" : "zio\/URIO$.html#whenCaseM[R,A,B](a:=>zio.URIO[R,A])(pf:PartialFunction[A,zio.URIO[R,B]]):zio.URIO[R,Option[B]]", "kind" : "def"}, {"label" : "whenCase", "tail" : "(a: => A)(pf: PartialFunction[A, URIO[R, B]]): URIO[R, Option[B]]", "member" : "zio.URIO.whenCase", "link" : "zio\/URIO$.html#whenCase[R,A,B](a:=>A)(pf:PartialFunction[A,zio.URIO[R,B]]):zio.URIO[R,Option[B]]", "kind" : "def"}, {"label" : "when", "tail" : "(b: => Boolean)(rio: => URIO[R, A]): URIO[R, Option[A]]", "member" : "zio.URIO.when", "link" : "zio\/URIO$.html#when[R,A](b:=>Boolean)(rio:=>zio.URIO[R,A]):zio.URIO[R,Option[A]]", "kind" : "def"}, {"label" : "updateState", "tail" : "(f: (S) => S)(arg0: zio.Tag[S]): ZIO[Has[ZState[S]], Nothing, Unit]", "member" : "zio.URIO.updateState", "link" : "zio\/URIO$.html#updateState[S](f:S=>S)(implicitevidence$17:zio.Tag[S]):zio.ZIO[zio.Has[zio.ZState[S]],Nothing,Unit]", "kind" : "def"}, {"label" : "untraced", "tail" : "(zio: => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.untraced", "link" : "zio\/URIO$.html#untraced[R,A](zio:=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "unsandbox", "tail" : "(v: => IO[Cause[Nothing], A]): URIO[R, A]", "member" : "zio.URIO.unsandbox", "link" : "zio\/URIO$.html#unsandbox[R,A](v:=>zio.IO[zio.Cause[Nothing],A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "unlessZIO", "tail" : "(b: => URIO[R, Boolean]): UnlessZIO[R, Nothing]", "member" : "zio.URIO.unlessZIO", "link" : "zio\/URIO$.html#unlessZIO[R](b:=>zio.URIO[R,Boolean]):zio.ZIO.UnlessZIO[R,Nothing]", "kind" : "def"}, {"label" : "unlessM", "tail" : "(b: => URIO[R, Boolean]): UnlessZIO[R, Nothing]", "member" : "zio.URIO.unlessM", "link" : "zio\/URIO$.html#unlessM[R](b:=>zio.URIO[R,Boolean]):zio.ZIO.UnlessZIO[R,Nothing]", "kind" : "def"}, {"label" : "unless", "tail" : "(b: => Boolean)(zio: => URIO[R, A]): URIO[R, Option[A]]", "member" : "zio.URIO.unless", "link" : "zio\/URIO$.html#unless[R,A](b:=>Boolean)(zio:=>zio.URIO[R,A]):zio.URIO[R,Option[A]]", "kind" : "def"}, {"label" : "uninterruptibleMask", "tail" : "(k: (InterruptStatusRestore) => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.uninterruptibleMask", "link" : "zio\/URIO$.html#uninterruptibleMask[R,A](k:zio.ZIO.InterruptStatusRestore=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "uninterruptible", "tail" : "(taskr: => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.uninterruptible", "link" : "zio\/URIO$.html#uninterruptible[R,A](taskr:=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "unit", "tail" : ": UIO[Unit]", "member" : "zio.URIO.unit", "link" : "zio\/URIO$.html#unit:zio.UIO[Unit]", "kind" : "val"}, {"label" : "traced", "tail" : "(zio: => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.traced", "link" : "zio\/URIO$.html#traced[R,A](zio:=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "trace", "tail" : "(): UIO[ZTrace]", "member" : "zio.URIO.trace", "link" : "zio\/URIO$.html#trace:zio.UIO[zio.ZTrace]", "kind" : "def"}, {"label" : "succeedBlocking", "tail" : "(a: => A): UIO[A]", "member" : "zio.URIO.succeedBlocking", "link" : "zio\/URIO$.html#succeedBlocking[A](a:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "succeed", "tail" : "(effect: => A): UIO[A]", "member" : "zio.URIO.succeed", "link" : "zio\/URIO$.html#succeed[A](effect:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "suspendSucceedWith", "tail" : "(f: (RuntimeConfig, FiberId) => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.suspendSucceedWith", "link" : "zio\/URIO$.html#suspendSucceedWith[R,A](f:(zio.RuntimeConfig,zio.FiberId)=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "suspendSucceed", "tail" : "(rio: => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.suspendSucceed", "link" : "zio\/URIO$.html#suspendSucceed[R,A](rio:=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "some", "tail" : "(a: => A): URIO[R, Option[A]]", "member" : "zio.URIO.some", "link" : "zio\/URIO$.html#some[R,A](a:=>A):zio.URIO[R,Option[A]]", "kind" : "def"}, {"label" : "sleep", "tail" : "(duration: => zio.Duration): URIO[Has[Clock], Unit]", "member" : "zio.URIO.sleep", "link" : "zio\/URIO$.html#sleep(duration:=>zio.Duration):zio.URIO[zio.Has[zio.Clock],Unit]", "kind" : "def"}, {"label" : "serviceWith", "tail" : "(): ServiceWithPartiallyApplied[Service]", "member" : "zio.URIO.serviceWith", "link" : "zio\/URIO$.html#serviceWith[Service]:zio.ZIO.ServiceWithPartiallyApplied[Service]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D]): URIO[Has[A] with Has[B] with Has[C] with Has[D], (A, B, C, D)]", "member" : "zio.URIO.services", "link" : "zio\/URIO$.html#services[A,B,C,D](implicitevidence$13:zio.Tag[A],implicitevidence$14:zio.Tag[B],implicitevidence$15:zio.Tag[C],implicitevidence$16:zio.Tag[D]):zio.URIO[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D],(A,B,C,D)]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C]): URIO[Has[A] with Has[B] with Has[C], (A, B, C)]", "member" : "zio.URIO.services", "link" : "zio\/URIO$.html#services[A,B,C](implicitevidence$10:zio.Tag[A],implicitevidence$11:zio.Tag[B],implicitevidence$12:zio.Tag[C]):zio.URIO[zio.Has[A]withzio.Has[B]withzio.Has[C],(A,B,C)]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B]): URIO[Has[A] with Has[B], (A, B)]", "member" : "zio.URIO.services", "link" : "zio\/URIO$.html#services[A,B](implicitevidence$8:zio.Tag[A],implicitevidence$9:zio.Tag[B]):zio.URIO[zio.Has[A]withzio.Has[B],(A,B)]", "kind" : "def"}, {"label" : "serviceAt", "tail" : "(): ServiceAtPartiallyApplied[Service]", "member" : "zio.URIO.serviceAt", "link" : "zio\/URIO$.html#serviceAt[Service]:zio.ZIO.ServiceAtPartiallyApplied[Service]", "kind" : "def"}, {"label" : "service", "tail" : "(arg0: zio.Tag[A]): URIO[Has[A], A]", "member" : "zio.URIO.service", "link" : "zio\/URIO$.html#service[A](implicitevidence$7:zio.Tag[A]):zio.URIO[zio.Has[A],A]", "kind" : "def"}, {"label" : "setState", "tail" : "(s: => S)(arg0: zio.Tag[S]): ZIO[Has[ZState[S]], Nothing, Unit]", "member" : "zio.URIO.setState", "link" : "zio\/URIO$.html#setState[S](s:=>S)(implicitevidence$6:zio.Tag[S]):zio.ZIO[zio.Has[zio.ZState[S]],Nothing,Unit]", "kind" : "def"}, {"label" : "runtimeConfig", "tail" : ": UIO[RuntimeConfig]", "member" : "zio.URIO.runtimeConfig", "link" : "zio\/URIO$.html#runtimeConfig:zio.UIO[zio.RuntimeConfig]", "kind" : "val"}, {"label" : "runtime", "tail" : "(): URIO[R, Runtime[R]]", "member" : "zio.URIO.runtime", "link" : "zio\/URIO$.html#runtime[R]:zio.URIO[R,zio.Runtime[R]]", "kind" : "def"}, {"label" : "right", "tail" : "(b: => B): RIO[R, Either[Nothing, B]]", "member" : "zio.URIO.right", "link" : "zio\/URIO$.html#right[R,B](b:=>B):zio.RIO[R,Either[Nothing,B]]", "kind" : "def"}, {"label" : "reserve", "tail" : "(reservation: => URIO[R, Reservation[R, Nothing, A]])(use: (A) => URIO[R, B]): URIO[R, B]", "member" : "zio.URIO.reserve", "link" : "zio\/URIO$.html#reserve[R,A,B](reservation:=>zio.URIO[R,zio.Reservation[R,Nothing,A]])(use:A=>zio.URIO[R,B]):zio.URIO[R,B]", "kind" : "def"}, {"label" : "replicateZIODiscard", "tail" : "(n: => Int)(effect: => URIO[R, A]): URIO[R, Unit]", "member" : "zio.URIO.replicateZIODiscard", "link" : "zio\/URIO$.html#replicateZIODiscard[R,A](n:=>Int)(effect:=>zio.URIO[R,A]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "replicateZIO", "tail" : "(n: => Int)(effect: => URIO[R, A]): URIO[R, Iterable[A]]", "member" : "zio.URIO.replicateZIO", "link" : "zio\/URIO$.html#replicateZIO[R,A](n:=>Int)(effect:=>zio.URIO[R,A]):zio.URIO[R,Iterable[A]]", "kind" : "def"}, {"label" : "replicateM_", "tail" : "(n: => Int)(effect: => URIO[R, A]): URIO[R, Unit]", "member" : "zio.URIO.replicateM_", "link" : "zio\/URIO$.html#replicateM_[R,A](n:=>Int)(effect:=>zio.URIO[R,A]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "replicateM", "tail" : "(n: => Int)(effect: => URIO[R, A]): URIO[R, Iterable[A]]", "member" : "zio.URIO.replicateM", "link" : "zio\/URIO$.html#replicateM[R,A](n:=>Int)(effect:=>zio.URIO[R,A]):zio.URIO[R,Iterable[A]]", "kind" : "def"}, {"label" : "replicate", "tail" : "(n: => Int)(effect: => URIO[R, A]): Iterable[URIO[R, A]]", "member" : "zio.URIO.replicate", "link" : "zio\/URIO$.html#replicate[R,A](n:=>Int)(effect:=>zio.URIO[R,A]):Iterable[zio.URIO[R,A]]", "kind" : "def"}, {"label" : "reduceAllPar", "tail" : "(a: => URIO[R, A], as: => Iterable[URIO[R1, A]])(f: (A, A) => A): URIO[R1, A]", "member" : "zio.URIO.reduceAllPar", "link" : "zio\/URIO$.html#reduceAllPar[R,R1<:R,A](a:=>zio.URIO[R,A],as:=>Iterable[zio.URIO[R1,A]])(f:(A,A)=>A):zio.URIO[R1,A]", "kind" : "def"}, {"label" : "reduceAll", "tail" : "(a: => URIO[R, A], as: => Iterable[URIO[R1, A]])(f: (A, A) => A): URIO[R1, A]", "member" : "zio.URIO.reduceAll", "link" : "zio\/URIO$.html#reduceAll[R,R1<:R,A](a:=>zio.URIO[R,A],as:=>Iterable[zio.URIO[R1,A]])(f:(A,A)=>A):zio.URIO[R1,A]", "kind" : "def"}, {"label" : "raceAll", "tail" : "(taskr: => URIO[R, A], taskrs: => Iterable[URIO[R1, A]]): URIO[R1, A]", "member" : "zio.URIO.raceAll", "link" : "zio\/URIO$.html#raceAll[R,R1<:R,A](taskr:=>zio.URIO[R,A],taskrs:=>Iterable[zio.URIO[R1,A]]):zio.URIO[R1,A]", "kind" : "def"}, {"label" : "provide", "tail" : "(r: => R): (URIO[R, A]) => UIO[A]", "member" : "zio.URIO.provide", "link" : "zio\/URIO$.html#provide[R,A](r:=>R):zio.URIO[R,A]=>zio.UIO[A]", "kind" : "def"}, {"label" : "onExecutor", "tail" : "(executor: => Executor)(taskr: URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.onExecutor", "link" : "zio\/URIO$.html#onExecutor[R,A](executor:=>zio.Executor)(taskr:zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "not", "tail" : "(effect: => URIO[R, Boolean]): URIO[R, Boolean]", "member" : "zio.URIO.not", "link" : "zio\/URIO$.html#not[R](effect:=>zio.URIO[R,Boolean]):zio.URIO[R,Boolean]", "kind" : "def"}, {"label" : "none", "tail" : ": UIO[Option[Nothing]]", "member" : "zio.URIO.none", "link" : "zio\/URIO$.html#none:zio.UIO[Option[Nothing]]", "kind" : "val"}, {"label" : "never", "tail" : ": UIO[Nothing]", "member" : "zio.URIO.never", "link" : "zio\/URIO$.html#never:zio.UIO[Nothing]", "kind" : "val"}, {"label" : "mergeAllPar", "tail" : "(in: => Iterable[URIO[R, A]])(zero: => B)(f: (B, A) => B): URIO[R, B]", "member" : "zio.URIO.mergeAllPar", "link" : "zio\/URIO$.html#mergeAllPar[R,A,B](in:=>Iterable[zio.URIO[R,A]])(zero:=>B)(f:(B,A)=>B):zio.URIO[R,B]", "kind" : "def"}, {"label" : "mergeAll", "tail" : "(in: => Iterable[URIO[R, A]])(zero: => B)(f: (B, A) => B): URIO[R, B]", "member" : "zio.URIO.mergeAll", "link" : "zio\/URIO$.html#mergeAll[R,A,B](in:=>Iterable[zio.URIO[R,A]])(zero:=>B)(f:(B,A)=>B):zio.URIO[R,B]", "kind" : "def"}, {"label" : "memoize", "tail" : "(f: (A) => URIO[R, B]): UIO[(A) => URIO[R, B]]", "member" : "zio.URIO.memoize", "link" : "zio\/URIO$.html#memoize[R,A,B](f:A=>zio.URIO[R,B]):zio.UIO[A=>zio.URIO[R,B]]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(urio1: => URIO[R, A], urio2: => URIO[R, B], urio3: => URIO[R, C], urio4: => URIO[R, D])(f: (A, B, C, D) => F): URIO[R, F]", "member" : "zio.URIO.mapParN", "link" : "zio\/URIO$.html#mapParN[R,A,B,C,D,F](urio1:=>zio.URIO[R,A],urio2:=>zio.URIO[R,B],urio3:=>zio.URIO[R,C],urio4:=>zio.URIO[R,D])(f:(A,B,C,D)=>F):zio.URIO[R,F]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(urio1: => URIO[R, A], urio2: => URIO[R, B], urio3: => URIO[R, C])(f: (A, B, C) => D): URIO[R, D]", "member" : "zio.URIO.mapParN", "link" : "zio\/URIO$.html#mapParN[R,A,B,C,D](urio1:=>zio.URIO[R,A],urio2:=>zio.URIO[R,B],urio3:=>zio.URIO[R,C])(f:(A,B,C)=>D):zio.URIO[R,D]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(urio1: => URIO[R, A], urio2: => URIO[R, B])(f: (A, B) => C): URIO[R, C]", "member" : "zio.URIO.mapParN", "link" : "zio\/URIO$.html#mapParN[R,A,B,C](urio1:=>zio.URIO[R,A],urio2:=>zio.URIO[R,B])(f:(A,B)=>C):zio.URIO[R,C]", "kind" : "def"}, {"label" : "mapN", "tail" : "(urio1: => URIO[R, A], urio2: => URIO[R, B], urio3: => URIO[R, C], urio4: => URIO[R, D])(f: (A, B, C, D) => F): URIO[R, F]", "member" : "zio.URIO.mapN", "link" : "zio\/URIO$.html#mapN[R,A,B,C,D,F](urio1:=>zio.URIO[R,A],urio2:=>zio.URIO[R,B],urio3:=>zio.URIO[R,C],urio4:=>zio.URIO[R,D])(f:(A,B,C,D)=>F):zio.URIO[R,F]", "kind" : "def"}, {"label" : "mapN", "tail" : "(urio1: => URIO[R, A], urio2: => URIO[R, B], urio3: => URIO[R, C])(f: (A, B, C) => D): URIO[R, D]", "member" : "zio.URIO.mapN", "link" : "zio\/URIO$.html#mapN[R,A,B,C,D](urio1:=>zio.URIO[R,A],urio2:=>zio.URIO[R,B],urio3:=>zio.URIO[R,C])(f:(A,B,C)=>D):zio.URIO[R,D]", "kind" : "def"}, {"label" : "mapN", "tail" : "(urio1: => URIO[R, A], urio2: => URIO[R, B])(f: (A, B) => C): URIO[R, C]", "member" : "zio.URIO.mapN", "link" : "zio\/URIO$.html#mapN[R,A,B,C](urio1:=>zio.URIO[R,A],urio2:=>zio.URIO[R,B])(f:(A,B)=>C):zio.URIO[R,C]", "kind" : "def"}, {"label" : "left", "tail" : "(a: => A): URIO[R, Either[A, Nothing]]", "member" : "zio.URIO.left", "link" : "zio\/URIO$.html#left[R,A](a:=>A):zio.URIO[R,Either[A,Nothing]]", "kind" : "def"}, {"label" : "loopDiscard", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => URIO[R, Any]): URIO[R, Unit]", "member" : "zio.URIO.loopDiscard", "link" : "zio\/URIO$.html#loopDiscard[R,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.URIO[R,Any]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "loop_", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => URIO[R, Any]): URIO[R, Unit]", "member" : "zio.URIO.loop_", "link" : "zio\/URIO$.html#loop_[R,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.URIO[R,Any]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "loop", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => URIO[R, A]): URIO[R, List[A]]", "member" : "zio.URIO.loop", "link" : "zio\/URIO$.html#loop[R,A,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.URIO[R,A]):zio.URIO[R,List[A]]", "kind" : "def"}, {"label" : "lock", "tail" : "(executor: => Executor)(taskr: => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.lock", "link" : "zio\/URIO$.html#lock[R,A](executor:=>zio.Executor)(taskr:=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "iterate", "tail" : "(initial: => S)(cont: (S) => Boolean)(body: (S) => URIO[R, S]): URIO[R, S]", "member" : "zio.URIO.iterate", "link" : "zio\/URIO$.html#iterate[R,S](initial:=>S)(cont:S=>Boolean)(body:S=>zio.URIO[R,S]):zio.URIO[R,S]", "kind" : "def"}, {"label" : "interruptibleMask", "tail" : "(k: (InterruptStatusRestore) => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.interruptibleMask", "link" : "zio\/URIO$.html#interruptibleMask[R,A](k:zio.ZIO.InterruptStatusRestore=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "interruptible", "tail" : "(taskr: => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.interruptible", "link" : "zio\/URIO$.html#interruptible[R,A](taskr:=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "interruptAs", "tail" : "(fiberId: => FiberId): UIO[Nothing]", "member" : "zio.URIO.interruptAs", "link" : "zio\/URIO$.html#interruptAs(fiberId:=>zio.FiberId):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "interrupt", "tail" : ": UIO[Nothing]", "member" : "zio.URIO.interrupt", "link" : "zio\/URIO$.html#interrupt:zio.UIO[Nothing]", "kind" : "val"}, {"label" : "infinity", "tail" : ": URIO[Has[Clock], Nothing]", "member" : "zio.URIO.infinity", "link" : "zio\/URIO$.html#infinity:zio.URIO[zio.Has[zio.Clock],Nothing]", "kind" : "val"}, {"label" : "ifZIO", "tail" : "(b: => URIO[R, Boolean]): IfZIO[R, Nothing]", "member" : "zio.URIO.ifZIO", "link" : "zio\/URIO$.html#ifZIO[R](b:=>zio.URIO[R,Boolean]):zio.ZIO.IfZIO[R,Nothing]", "kind" : "def"}, {"label" : "ifM", "tail" : "(b: => URIO[R, Boolean]): IfZIO[R, Nothing]", "member" : "zio.URIO.ifM", "link" : "zio\/URIO$.html#ifM[R](b:=>zio.URIO[R,Boolean]):zio.ZIO.IfZIO[R,Nothing]", "kind" : "def"}, {"label" : "haltWith", "tail" : "(function: (() => ZTrace) => Cause[Nothing]): URIO[R, Nothing]", "member" : "zio.URIO.haltWith", "link" : "zio\/URIO$.html#haltWith[R](function:(()=>zio.ZTrace)=>zio.Cause[Nothing]):zio.URIO[R,Nothing]", "kind" : "def"}, {"label" : "halt", "tail" : "(cause: => Cause[Nothing]): UIO[Nothing]", "member" : "zio.URIO.halt", "link" : "zio\/URIO$.html#halt(cause:=>zio.Cause[Nothing]):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "getStateWith", "tail" : "(): GetStateWithPartiallyApplied[S]", "member" : "zio.URIO.getStateWith", "link" : "zio\/URIO$.html#getStateWith[S]:zio.ZIO.GetStateWithPartiallyApplied[S]", "kind" : "def"}, {"label" : "getState", "tail" : "(arg0: zio.Tag[S]): ZIO[Has[ZState[S]], Nothing, S]", "member" : "zio.URIO.getState", "link" : "zio\/URIO$.html#getState[S](implicitevidence$5:zio.Tag[S]):zio.ZIO[zio.Has[zio.ZState[S]],Nothing,S]", "kind" : "def"}, {"label" : "fromFunctionM", "tail" : "(f: (R) => UIO[A]): URIO[R, A]", "member" : "zio.URIO.fromFunctionM", "link" : "zio\/URIO$.html#fromFunctionM[R,A](f:R=>zio.UIO[A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "fromFunction", "tail" : "(f: (R) => A): URIO[R, A]", "member" : "zio.URIO.fromFunction", "link" : "zio\/URIO$.html#fromFunction[R,A](f:R=>A):zio.URIO[R,A]", "kind" : "def"}, {"label" : "fromFiberZIO", "tail" : "(fiber: => UIO[Fiber[Nothing, A]]): UIO[A]", "member" : "zio.URIO.fromFiberZIO", "link" : "zio\/URIO$.html#fromFiberZIO[A](fiber:=>zio.UIO[zio.Fiber[Nothing,A]]):zio.UIO[A]", "kind" : "def"}, {"label" : "fromFiberM", "tail" : "(fiber: => UIO[Fiber[Nothing, A]]): UIO[A]", "member" : "zio.URIO.fromFiberM", "link" : "zio\/URIO$.html#fromFiberM[A](fiber:=>zio.UIO[zio.Fiber[Nothing,A]]):zio.UIO[A]", "kind" : "def"}, {"label" : "fromFiber", "tail" : "(fiber: => Fiber[Nothing, A]): UIO[A]", "member" : "zio.URIO.fromFiber", "link" : "zio\/URIO$.html#fromFiber[A](fiber:=>zio.Fiber[Nothing,A]):zio.UIO[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(v: => Either[Nothing, A]): UIO[A]", "member" : "zio.URIO.fromEither", "link" : "zio\/URIO$.html#fromEither[A](v:=>Either[Nothing,A]):zio.UIO[A]", "kind" : "def"}, {"label" : "from", "tail" : "(input: => Input)(constructor: ZIOConstructor[Nothing, Nothing, Input]): ZIO[OutEnvironment, OutError, OutSuccess]", "member" : "zio.URIO.from", "link" : "zio\/URIO$.html#from[Input](input:=>Input)(implicitconstructor:zio.ZIO.ZIOConstructor[Nothing,Nothing,Input]):zio.ZIO[constructor.OutEnvironment,constructor.OutError,constructor.OutSuccess]", "kind" : "def"}, {"label" : "forkAllDiscard", "tail" : "(as: => Iterable[URIO[R, A]]): URIO[R, Unit]", "member" : "zio.URIO.forkAllDiscard", "link" : "zio\/URIO$.html#forkAllDiscard[R,A](as:=>Iterable[zio.URIO[R,A]]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "forkAll_", "tail" : "(as: => Iterable[URIO[R, A]]): URIO[R, Unit]", "member" : "zio.URIO.forkAll_", "link" : "zio\/URIO$.html#forkAll_[R,A](as:=>Iterable[zio.URIO[R,A]]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "forkAll", "tail" : "(as: Collection[URIO[R, A]])(bf: zio.BuildFrom[Collection[URIO[R, A]], A, Collection[A]]): URIO[R, Fiber[Nothing, Collection[A]]]", "member" : "zio.URIO.forkAll", "link" : "zio\/URIO$.html#forkAll[R,A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.URIO[R,A]])(implicitbf:zio.BuildFrom[Collection[zio.URIO[R,A]],A,Collection[A]]):zio.URIO[R,zio.Fiber[Nothing,Collection[A]]]", "kind" : "def"}, {"label" : "foreachParNDiscard", "tail" : "(n: => Int)(as: => Iterable[A])(f: (A) => URIO[R, Any]): URIO[R, Unit]", "member" : "zio.URIO.foreachParNDiscard", "link" : "zio\/URIO$.html#foreachParNDiscard[R,A,B](n:=>Int)(as:=>Iterable[A])(f:A=>zio.URIO[R,Any]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "foreachParN_", "tail" : "(n: => Int)(as: => Iterable[A])(f: (A) => URIO[R, Any]): URIO[R, Unit]", "member" : "zio.URIO.foreachParN_", "link" : "zio\/URIO$.html#foreachParN_[R,A,B](n:=>Int)(as:=>Iterable[A])(f:A=>zio.URIO[R,Any]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "foreachParDiscard", "tail" : "(as: => Iterable[A])(f: (A) => URIO[R, Any]): URIO[R, Unit]", "member" : "zio.URIO.foreachParDiscard", "link" : "zio\/URIO$.html#foreachParDiscard[R,A,B](as:=>Iterable[A])(f:A=>zio.URIO[R,Any]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "foreachPar_", "tail" : "(as: => Iterable[A])(f: (A) => URIO[R, Any]): URIO[R, Unit]", "member" : "zio.URIO.foreachPar_", "link" : "zio\/URIO$.html#foreachPar_[R,A,B](as:=>Iterable[A])(f:A=>zio.URIO[R,Any]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "foreachDiscard", "tail" : "(as: => Iterable[A])(f: (A) => URIO[R, Any]): URIO[R, Unit]", "member" : "zio.URIO.foreachDiscard", "link" : "zio\/URIO$.html#foreachDiscard[R,A](as:=>Iterable[A])(f:A=>zio.URIO[R,Any]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "foreach_", "tail" : "(as: => Iterable[A])(f: (A) => URIO[R, Any]): URIO[R, Unit]", "member" : "zio.URIO.foreach_", "link" : "zio\/URIO$.html#foreach_[R,A](as:=>Iterable[A])(f:A=>zio.URIO[R,Any]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "foreachParN", "tail" : "(n: => Int)(as: Collection[A])(fn: (A) => URIO[R, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): URIO[R, Collection[B]]", "member" : "zio.URIO.foreachParN", "link" : "zio\/URIO$.html#foreachParN[R,A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[A])(fn:A=>zio.URIO[R,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.URIO[R,Collection[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: NonEmptyChunk[A])(fn: (A) => URIO[R, B]): URIO[R, NonEmptyChunk[B]]", "member" : "zio.URIO.foreachPar", "link" : "zio\/URIO$.html#foreachPar[R,A,B](as:zio.NonEmptyChunk[A])(fn:A=>zio.URIO[R,B]):zio.URIO[R,zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => URIO[R, (Key2, Value2)]): URIO[R, Map[Key2, Value2]]", "member" : "zio.URIO.foreachPar", "link" : "zio\/URIO$.html#foreachPar[R,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.URIO[R,(Key2,Value2)]):zio.URIO[R,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: Array[A])(fn: (A) => URIO[R, B])(arg0: ClassTag[B]): URIO[R, Array[B]]", "member" : "zio.URIO.foreachPar", "link" : "zio\/URIO$.html#foreachPar[R,A,B](as:Array[A])(fn:A=>zio.URIO[R,B])(implicitevidence$4:scala.reflect.ClassTag[B]):zio.URIO[R,Array[B]]", "kind" : "final def"}, {"label" : "foreachPar", "tail" : "(as: Set[A])(fn: (A) => URIO[R, B]): URIO[R, Set[B]]", "member" : "zio.URIO.foreachPar", "link" : "zio\/URIO$.html#foreachPar[R,A,B](as:Set[A])(fn:A=>zio.URIO[R,B]):zio.URIO[R,Set[B]]", "kind" : "final def"}, {"label" : "foreachPar", "tail" : "(as: Collection[A])(fn: (A) => URIO[R, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): URIO[R, Collection[B]]", "member" : "zio.URIO.foreachPar", "link" : "zio\/URIO$.html#foreachPar[R,A,B,Collection[+Element]<:Iterable[Element]](as:Collection[A])(fn:A=>zio.URIO[R,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.URIO[R,Collection[B]]", "kind" : "def"}, {"label" : "foreachExec", "tail" : "(as: Collection[A])(exec: => ExecutionStrategy)(f: (A) => URIO[R, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): URIO[R, Collection[B]]", "member" : "zio.URIO.foreachExec", "link" : "zio\/URIO$.html#foreachExec[R,A,B,Collection[+Element]<:Iterable[Element]](as:Collection[A])(exec:=>zio.ExecutionStrategy)(f:A=>zio.URIO[R,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.URIO[R,Collection[B]]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(in: NonEmptyChunk[A])(f: (A) => URIO[R, B]): URIO[R, NonEmptyChunk[B]]", "member" : "zio.URIO.foreach", "link" : "zio\/URIO$.html#foreach[R,A,B](in:zio.NonEmptyChunk[A])(f:A=>zio.URIO[R,B]):zio.URIO[R,zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Option[A])(f: (A) => URIO[R, B]): URIO[R, Option[B]]", "member" : "zio.URIO.foreach", "link" : "zio\/URIO$.html#foreach[R,A,B](in:Option[A])(f:A=>zio.URIO[R,B]):zio.URIO[R,Option[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => URIO[R, (Key2, Value2)]): URIO[R, Map[Key2, Value2]]", "member" : "zio.URIO.foreach", "link" : "zio\/URIO$.html#foreach[R,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.URIO[R,(Key2,Value2)]):zio.URIO[R,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Array[A])(f: (A) => URIO[R, B])(arg0: ClassTag[B]): URIO[R, Array[B]]", "member" : "zio.URIO.foreach", "link" : "zio\/URIO$.html#foreach[R,A,B](in:Array[A])(f:A=>zio.URIO[R,B])(implicitevidence$3:scala.reflect.ClassTag[B]):zio.URIO[R,Array[B]]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(in: Set[A])(f: (A) => URIO[R, B]): URIO[R, Set[B]]", "member" : "zio.URIO.foreach", "link" : "zio\/URIO$.html#foreach[R,A,B](in:Set[A])(f:A=>zio.URIO[R,B]):zio.URIO[R,Set[B]]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(in: Collection[A])(f: (A) => URIO[R, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): URIO[R, Collection[B]]", "member" : "zio.URIO.foreach", "link" : "zio\/URIO$.html#foreach[R,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.URIO[R,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.URIO[R,Collection[B]]", "kind" : "def"}, {"label" : "forall", "tail" : "(as: => Iterable[A])(f: (A) => URIO[R, Boolean]): URIO[R, Boolean]", "member" : "zio.URIO.forall", "link" : "zio\/URIO$.html#forall[R,A](as:=>Iterable[A])(f:A=>zio.URIO[R,Boolean]):zio.URIO[R,Boolean]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(in: => Iterable[A])(zero: => S)(f: (A, S) => URIO[R, S]): URIO[R, S]", "member" : "zio.URIO.foldRight", "link" : "zio\/URIO$.html#foldRight[R,S,A](in:=>Iterable[A])(zero:=>S)(f:(A,S)=>zio.URIO[R,S]):zio.URIO[R,S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(in: => Iterable[A])(zero: => S)(f: (S, A) => URIO[R, S]): URIO[R, S]", "member" : "zio.URIO.foldLeft", "link" : "zio\/URIO$.html#foldLeft[R,S,A](in:=>Iterable[A])(zero:=>S)(f:(S,A)=>zio.URIO[R,S]):zio.URIO[R,S]", "kind" : "def"}, {"label" : "flatten", "tail" : "(taskr: => URIO[R, URIO[R, A]]): URIO[R, A]", "member" : "zio.URIO.flatten", "link" : "zio\/URIO$.html#flatten[R,A](taskr:=>zio.URIO[R,zio.URIO[R,A]]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "firstSuccessOf", "tail" : "(rio: => URIO[R, A], rest: => Iterable[URIO[R, A]]): URIO[R, A]", "member" : "zio.URIO.firstSuccessOf", "link" : "zio\/URIO$.html#firstSuccessOf[R,A](rio:=>zio.URIO[R,A],rest:=>Iterable[zio.URIO[R,A]]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "filterNotPar", "tail" : "(as: Set[A])(f: (A) => URIO[R, Boolean]): URIO[R, Set[A]]", "member" : "zio.URIO.filterNotPar", "link" : "zio\/URIO$.html#filterNotPar[R,A](as:Set[A])(f:A=>zio.URIO[R,Boolean]):zio.URIO[R,Set[A]]", "kind" : "def"}, {"label" : "filterNotPar", "tail" : "(as: Collection[A])(f: (A) => URIO[R, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): URIO[R, Collection[A]]", "member" : "zio.URIO.filterNotPar", "link" : "zio\/URIO$.html#filterNotPar[R,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.URIO[R,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.URIO[R,Collection[A]]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Set[A])(f: (A) => URIO[R, Boolean]): URIO[R, Set[A]]", "member" : "zio.URIO.filterNot", "link" : "zio\/URIO$.html#filterNot[R,A](as:Set[A])(f:A=>zio.URIO[R,Boolean]):zio.URIO[R,Set[A]]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Collection[A])(f: (A) => URIO[R, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): URIO[R, Collection[A]]", "member" : "zio.URIO.filterNot", "link" : "zio\/URIO$.html#filterNot[R,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.URIO[R,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.URIO[R,Collection[A]]", "kind" : "def"}, {"label" : "filterPar", "tail" : "(as: Set[A])(f: (A) => URIO[R, Boolean]): URIO[R, Set[A]]", "member" : "zio.URIO.filterPar", "link" : "zio\/URIO$.html#filterPar[R,A](as:Set[A])(f:A=>zio.URIO[R,Boolean]):zio.URIO[R,Set[A]]", "kind" : "def"}, {"label" : "filterPar", "tail" : "(as: Collection[A])(f: (A) => URIO[R, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): URIO[R, Collection[A]]", "member" : "zio.URIO.filterPar", "link" : "zio\/URIO$.html#filterPar[R,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.URIO[R,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.URIO[R,Collection[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Set[A])(f: (A) => URIO[R, Boolean]): URIO[R, Set[A]]", "member" : "zio.URIO.filter", "link" : "zio\/URIO$.html#filter[R,A](as:Set[A])(f:A=>zio.URIO[R,Boolean]):zio.URIO[R,Set[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Collection[A])(f: (A) => URIO[R, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): URIO[R, Collection[A]]", "member" : "zio.URIO.filter", "link" : "zio\/URIO$.html#filter[R,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.URIO[R,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.URIO[R,Collection[A]]", "kind" : "def"}, {"label" : "fiberId", "tail" : ": UIO[FiberId]", "member" : "zio.URIO.fiberId", "link" : "zio\/URIO$.html#fiberId:zio.UIO[zio.FiberId]", "kind" : "val"}, {"label" : "failCauseWith", "tail" : "(function: (() => ZTrace) => Cause[Nothing]): URIO[R, Nothing]", "member" : "zio.URIO.failCauseWith", "link" : "zio\/URIO$.html#failCauseWith[R](function:(()=>zio.ZTrace)=>zio.Cause[Nothing]):zio.URIO[R,Nothing]", "kind" : "def"}, {"label" : "failCause", "tail" : "(cause: => Cause[Nothing]): UIO[Nothing]", "member" : "zio.URIO.failCause", "link" : "zio\/URIO$.html#failCause(cause:=>zio.Cause[Nothing]):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "exists", "tail" : "(as: => Iterable[A])(f: (A) => URIO[R, Boolean]): URIO[R, Boolean]", "member" : "zio.URIO.exists", "link" : "zio\/URIO$.html#exists[R,A](as:=>Iterable[A])(f:A=>zio.URIO[R,Boolean]):zio.URIO[R,Boolean]", "kind" : "def"}, {"label" : "executor", "tail" : "(): UIO[Executor]", "member" : "zio.URIO.executor", "link" : "zio\/URIO$.html#executor:zio.UIO[zio.Executor]", "kind" : "def"}, {"label" : "environment", "tail" : "(): URIO[R, R]", "member" : "zio.URIO.environment", "link" : "zio\/URIO$.html#environment[R]:zio.URIO[R,R]", "kind" : "def"}, {"label" : "effectTotal", "tail" : "(effect: => A): UIO[A]", "member" : "zio.URIO.effectTotal", "link" : "zio\/URIO$.html#effectTotal[A](effect:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "effectSuspendTotalWith", "tail" : "(p: (Platform, Id) => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.effectSuspendTotalWith", "link" : "zio\/URIO$.html#effectSuspendTotalWith[R,A](p:(zio.internal.Platform,zio.Fiber.Id)=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "effectSuspendTotal", "tail" : "(rio: => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.effectSuspendTotal", "link" : "zio\/URIO$.html#effectSuspendTotal[R,A](rio:=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "effectAsyncInterrupt", "tail" : "(register: ((URIO[R, A]) => Unit) => Either[Canceler[R], URIO[R, A]], blockingOn: => FiberId): URIO[R, A]", "member" : "zio.URIO.effectAsyncInterrupt", "link" : "zio\/URIO$.html#effectAsyncInterrupt[R,A](register:(zio.URIO[R,A]=>Unit)=>Either[zio.Canceler[R],zio.URIO[R,A]],blockingOn:=>zio.FiberId):zio.URIO[R,A]", "kind" : "def"}, {"label" : "effectAsyncM", "tail" : "(register: ((URIO[R, A]) => Unit) => URIO[R, Any]): URIO[R, A]", "member" : "zio.URIO.effectAsyncM", "link" : "zio\/URIO$.html#effectAsyncM[R,A](register:(zio.URIO[R,A]=>Unit)=>zio.URIO[R,Any]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "effectAsyncMaybe", "tail" : "(register: ((URIO[R, A]) => Unit) => Option[URIO[R, A]], blockingOn: => FiberId): URIO[R, A]", "member" : "zio.URIO.effectAsyncMaybe", "link" : "zio\/URIO$.html#effectAsyncMaybe[R,A](register:(zio.URIO[R,A]=>Unit)=>Option[zio.URIO[R,A]],blockingOn:=>zio.FiberId):zio.URIO[R,A]", "kind" : "def"}, {"label" : "effectAsync", "tail" : "(register: ((URIO[R, A]) => Unit) => Any, blockingOn: => FiberId): URIO[R, A]", "member" : "zio.URIO.effectAsync", "link" : "zio\/URIO$.html#effectAsync[R,A](register:(zio.URIO[R,A]=>Unit)=>Any,blockingOn:=>zio.FiberId):zio.URIO[R,A]", "kind" : "def"}, {"label" : "done", "tail" : "(r: => Exit[Nothing, A]): UIO[A]", "member" : "zio.URIO.done", "link" : "zio\/URIO$.html#done[A](r:=>zio.Exit[Nothing,A]):zio.UIO[A]", "kind" : "def"}, {"label" : "dieMessage", "tail" : "(message: => String): UIO[Nothing]", "member" : "zio.URIO.dieMessage", "link" : "zio\/URIO$.html#dieMessage(message:=>String):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(t: => Throwable): UIO[Nothing]", "member" : "zio.URIO.die", "link" : "zio\/URIO$.html#die(t:=>Throwable):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "descriptorWith", "tail" : "(f: (Descriptor) => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.descriptorWith", "link" : "zio\/URIO$.html#descriptorWith[R,A](f:zio.Fiber.Descriptor=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "descriptor", "tail" : "(): UIO[Descriptor]", "member" : "zio.URIO.descriptor", "link" : "zio\/URIO$.html#descriptor:zio.UIO[zio.Fiber.Descriptor]", "kind" : "def"}, {"label" : "debug", "tail" : "(value: => Any): UIO[Unit]", "member" : "zio.URIO.debug", "link" : "zio\/URIO$.html#debug(value:=>Any):zio.UIO[Unit]", "kind" : "def"}, {"label" : "collectParN", "tail" : "(n: => Int)(in: Collection[A])(f: (A) => ZIO[R, Option[Nothing], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): URIO[R, Collection[B]]", "member" : "zio.URIO.collectParN", "link" : "zio\/URIO$.html#collectParN[R,A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(in:Collection[A])(f:A=>zio.ZIO[R,Option[Nothing],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.URIO[R,Collection[B]]", "kind" : "def"}, {"label" : "collectPar", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => ZIO[R, Option[Nothing], (Key2, Value2)]): URIO[R, Map[Key2, Value2]]", "member" : "zio.URIO.collectPar", "link" : "zio\/URIO$.html#collectPar[R,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.ZIO[R,Option[Nothing],(Key2,Value2)]):zio.URIO[R,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "collectPar", "tail" : "(in: Collection[A])(f: (A) => ZIO[R, Option[Nothing], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): URIO[R, Collection[B]]", "member" : "zio.URIO.collectPar", "link" : "zio\/URIO$.html#collectPar[R,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.ZIO[R,Option[Nothing],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.URIO[R,Collection[B]]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(as: => Iterable[A])(f: (A) => URIO[R, Option[B]]): URIO[R, Option[B]]", "member" : "zio.URIO.collectFirst", "link" : "zio\/URIO$.html#collectFirst[R,A,B](as:=>Iterable[A])(f:A=>zio.URIO[R,Option[B]]):zio.URIO[R,Option[B]]", "kind" : "def"}, {"label" : "collectAllWithParN", "tail" : "(n: => Int)(as: Collection[URIO[R, A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[URIO[R, A]], B, Collection[B]]): URIO[R, Collection[B]]", "member" : "zio.URIO.collectAllWithParN", "link" : "zio\/URIO$.html#collectAllWithParN[R,A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.URIO[R,A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.URIO[R,A]],B,Collection[B]]):zio.URIO[R,Collection[B]]", "kind" : "def"}, {"label" : "collectAllWithPar", "tail" : "(as: Collection[URIO[R, A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[URIO[R, A]], B, Collection[B]]): URIO[R, Collection[B]]", "member" : "zio.URIO.collectAllWithPar", "link" : "zio\/URIO$.html#collectAllWithPar[R,A,B,Collection[+Element]<:Iterable[Element]](as:Collection[zio.URIO[R,A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.URIO[R,A]],B,Collection[B]]):zio.URIO[R,Collection[B]]", "kind" : "def"}, {"label" : "collectAllWith", "tail" : "(in: Collection[URIO[R, A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[URIO[R, A]], B, Collection[B]]): URIO[R, Collection[B]]", "member" : "zio.URIO.collectAllWith", "link" : "zio\/URIO$.html#collectAllWith[R,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[zio.URIO[R,A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.URIO[R,A]],B,Collection[B]]):zio.URIO[R,Collection[B]]", "kind" : "def"}, {"label" : "collectAllSuccessesParN", "tail" : "(n: => Int)(as: Collection[URIO[R, A]])(bf: zio.BuildFrom[Collection[URIO[R, A]], A, Collection[A]]): URIO[R, Collection[A]]", "member" : "zio.URIO.collectAllSuccessesParN", "link" : "zio\/URIO$.html#collectAllSuccessesParN[R,A,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.URIO[R,A]])(implicitbf:zio.BuildFrom[Collection[zio.URIO[R,A]],A,Collection[A]]):zio.URIO[R,Collection[A]]", "kind" : "def"}, {"label" : "collectAllSuccessesPar", "tail" : "(as: Collection[URIO[R, A]])(bf: zio.BuildFrom[Collection[URIO[R, A]], A, Collection[A]]): URIO[R, Collection[A]]", "member" : "zio.URIO.collectAllSuccessesPar", "link" : "zio\/URIO$.html#collectAllSuccessesPar[R,A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.URIO[R,A]])(implicitbf:zio.BuildFrom[Collection[zio.URIO[R,A]],A,Collection[A]]):zio.URIO[R,Collection[A]]", "kind" : "def"}, {"label" : "collectAllSuccesses", "tail" : "(in: Collection[URIO[R, A]])(bf: zio.BuildFrom[Collection[URIO[R, A]], A, Collection[A]]): URIO[R, Collection[A]]", "member" : "zio.URIO.collectAllSuccesses", "link" : "zio\/URIO$.html#collectAllSuccesses[R,A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.URIO[R,A]])(implicitbf:zio.BuildFrom[Collection[zio.URIO[R,A]],A,Collection[A]]):zio.URIO[R,Collection[A]]", "kind" : "def"}, {"label" : "collectAllParNDiscard", "tail" : "(n: => Int)(as: => Iterable[URIO[R, A]]): URIO[R, Unit]", "member" : "zio.URIO.collectAllParNDiscard", "link" : "zio\/URIO$.html#collectAllParNDiscard[R,A](n:=>Int)(as:=>Iterable[zio.URIO[R,A]]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "collectAllParN_", "tail" : "(n: => Int)(as: => Iterable[URIO[R, A]]): URIO[R, Unit]", "member" : "zio.URIO.collectAllParN_", "link" : "zio\/URIO$.html#collectAllParN_[R,A](n:=>Int)(as:=>Iterable[zio.URIO[R,A]]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "collectAllParN", "tail" : "(n: => Int)(as: Collection[URIO[R, A]])(bf: zio.BuildFrom[Collection[URIO[R, A]], A, Collection[A]]): URIO[R, Collection[A]]", "member" : "zio.URIO.collectAllParN", "link" : "zio\/URIO$.html#collectAllParN[R,A,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.URIO[R,A]])(implicitbf:zio.BuildFrom[Collection[zio.URIO[R,A]],A,Collection[A]]):zio.URIO[R,Collection[A]]", "kind" : "def"}, {"label" : "collectAllParDiscard", "tail" : "(in: => Iterable[URIO[R, A]]): URIO[R, Unit]", "member" : "zio.URIO.collectAllParDiscard", "link" : "zio\/URIO$.html#collectAllParDiscard[R,A](in:=>Iterable[zio.URIO[R,A]]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "collectAllPar_", "tail" : "(in: => Iterable[URIO[R, A]]): URIO[R, Unit]", "member" : "zio.URIO.collectAllPar_", "link" : "zio\/URIO$.html#collectAllPar_[R,A](in:=>Iterable[zio.URIO[R,A]]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: NonEmptyChunk[URIO[R, A]]): URIO[R, NonEmptyChunk[A]]", "member" : "zio.URIO.collectAllPar", "link" : "zio\/URIO$.html#collectAllPar[R,A](as:zio.NonEmptyChunk[zio.URIO[R,A]]):zio.URIO[R,zio.NonEmptyChunk[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Array[URIO[R, A]])(arg0: ClassTag[A]): URIO[R, Array[A]]", "member" : "zio.URIO.collectAllPar", "link" : "zio\/URIO$.html#collectAllPar[R,A](as:Array[zio.URIO[R,A]])(implicitevidence$2:scala.reflect.ClassTag[A]):zio.URIO[R,Array[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Set[URIO[R, A]]): URIO[R, Set[A]]", "member" : "zio.URIO.collectAllPar", "link" : "zio\/URIO$.html#collectAllPar[R,A](as:Set[zio.URIO[R,A]]):zio.URIO[R,Set[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(in: Collection[URIO[R, A]])(bf: zio.BuildFrom[Collection[URIO[R, A]], A, Collection[A]]): URIO[R, Collection[A]]", "member" : "zio.URIO.collectAllPar", "link" : "zio\/URIO$.html#collectAllPar[R,A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.URIO[R,A]])(implicitbf:zio.BuildFrom[Collection[zio.URIO[R,A]],A,Collection[A]]):zio.URIO[R,Collection[A]]", "kind" : "def"}, {"label" : "collectAllDiscard", "tail" : "(in: => Iterable[URIO[R, A]]): URIO[R, Unit]", "member" : "zio.URIO.collectAllDiscard", "link" : "zio\/URIO$.html#collectAllDiscard[R,A](in:=>Iterable[zio.URIO[R,A]]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "collectAll_", "tail" : "(in: => Iterable[URIO[R, A]]): URIO[R, Unit]", "member" : "zio.URIO.collectAll_", "link" : "zio\/URIO$.html#collectAll_[R,A](in:=>Iterable[zio.URIO[R,A]]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: NonEmptyChunk[URIO[R, A]]): URIO[R, NonEmptyChunk[A]]", "member" : "zio.URIO.collectAll", "link" : "zio\/URIO$.html#collectAll[R,A](in:zio.NonEmptyChunk[zio.URIO[R,A]]):zio.URIO[R,zio.NonEmptyChunk[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Option[URIO[R, A]]): URIO[R, Option[A]]", "member" : "zio.URIO.collectAll", "link" : "zio\/URIO$.html#collectAll[R,A](in:Option[zio.URIO[R,A]]):zio.URIO[R,Option[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Array[URIO[R, A]])(arg0: ClassTag[A]): URIO[R, Array[A]]", "member" : "zio.URIO.collectAll", "link" : "zio\/URIO$.html#collectAll[R,A](in:Array[zio.URIO[R,A]])(implicitevidence$1:scala.reflect.ClassTag[A]):zio.URIO[R,Array[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Set[URIO[R, A]]): URIO[R, Set[A]]", "member" : "zio.URIO.collectAll", "link" : "zio\/URIO$.html#collectAll[R,A](in:Set[zio.URIO[R,A]]):zio.URIO[R,Set[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Collection[URIO[R, A]])(bf: zio.BuildFrom[Collection[URIO[R, A]], A, Collection[A]]): URIO[R, Collection[A]]", "member" : "zio.URIO.collectAll", "link" : "zio\/URIO$.html#collectAll[R,A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.URIO[R,A]])(implicitbf:zio.BuildFrom[Collection[zio.URIO[R,A]],A,Collection[A]]):zio.URIO[R,Collection[A]]", "kind" : "def"}, {"label" : "collect", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => ZIO[R, Option[Nothing], (Key2, Value2)]): URIO[R, Map[Key2, Value2]]", "member" : "zio.URIO.collect", "link" : "zio\/URIO$.html#collect[R,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.ZIO[R,Option[Nothing],(Key2,Value2)]):zio.URIO[R,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "collect", "tail" : "(in: Collection[A])(f: (A) => ZIO[R, Option[Nothing], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): URIO[R, Collection[B]]", "member" : "zio.URIO.collect", "link" : "zio\/URIO$.html#collect[R,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.ZIO[R,Option[Nothing],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.URIO[R,Collection[B]]", "kind" : "def"}, {"label" : "checkTraced", "tail" : "(f: (TracingStatus) => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.checkTraced", "link" : "zio\/URIO$.html#checkTraced[R,A](f:zio.TracingStatus=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "checkInterruptible", "tail" : "(f: (InterruptStatus) => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.checkInterruptible", "link" : "zio\/URIO$.html#checkInterruptible[R,A](f:zio.InterruptStatus=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "bracketExit", "tail" : "(acquire: => URIO[R, A], release: (A, Exit[Nothing, B]) => URIO[R, Any], use: (A) => URIO[R, B]): URIO[R, B]", "member" : "zio.URIO.bracketExit", "link" : "zio\/URIO$.html#bracketExit[R,A,B](acquire:=>zio.URIO[R,A],release:(A,zio.Exit[Nothing,B])=>zio.URIO[R,Any],use:A=>zio.URIO[R,B]):zio.URIO[R,B]", "kind" : "def"}, {"label" : "bracketExit", "tail" : "(acquire: => URIO[R, A]): BracketExitAcquire[R, Nothing, A]", "member" : "zio.URIO.bracketExit", "link" : "zio\/URIO$.html#bracketExit[R,A](acquire:=>zio.URIO[R,A]):zio.ZIO.BracketExitAcquire[R,Nothing,A]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: => URIO[R, A], release: (A) => URIO[R, Any], use: (A) => URIO[R, B]): URIO[R, B]", "member" : "zio.URIO.bracket", "link" : "zio\/URIO$.html#bracket[R,A,B](acquire:=>zio.URIO[R,A],release:A=>zio.URIO[R,Any],use:A=>zio.URIO[R,B]):zio.URIO[R,B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: => URIO[R, A]): BracketAcquire[R, Nothing, A]", "member" : "zio.URIO.bracket", "link" : "zio\/URIO$.html#bracket[R,A](acquire:=>zio.URIO[R,A]):zio.ZIO.BracketAcquire[R,Nothing,A]", "kind" : "def"}, {"label" : "blockingExecutor", "tail" : "(): UIO[Executor]", "member" : "zio.URIO.blockingExecutor", "link" : "zio\/URIO$.html#blockingExecutor:zio.UIO[zio.Executor]", "kind" : "def"}, {"label" : "blocking", "tail" : "(zio: => URIO[R, A]): URIO[R, A]", "member" : "zio.URIO.blocking", "link" : "zio\/URIO$.html#blocking[R,A](zio:=>zio.URIO[R,A]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "asyncInterrupt", "tail" : "(register: ((URIO[R, A]) => Unit) => Either[Canceler[R], URIO[R, A]], blockingOn: => FiberId): URIO[R, A]", "member" : "zio.URIO.asyncInterrupt", "link" : "zio\/URIO$.html#asyncInterrupt[R,A](register:(zio.URIO[R,A]=>Unit)=>Either[zio.Canceler[R],zio.URIO[R,A]],blockingOn:=>zio.FiberId):zio.URIO[R,A]", "kind" : "def"}, {"label" : "asyncZIO", "tail" : "(register: ((URIO[R, A]) => Unit) => URIO[R, Any]): URIO[R, A]", "member" : "zio.URIO.asyncZIO", "link" : "zio\/URIO$.html#asyncZIO[R,A](register:(zio.URIO[R,A]=>Unit)=>zio.URIO[R,Any]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "asyncMaybe", "tail" : "(register: ((URIO[R, A]) => Unit) => Option[URIO[R, A]], blockingOn: => FiberId): URIO[R, A]", "member" : "zio.URIO.asyncMaybe", "link" : "zio\/URIO$.html#asyncMaybe[R,A](register:(zio.URIO[R,A]=>Unit)=>Option[zio.URIO[R,A]],blockingOn:=>zio.FiberId):zio.URIO[R,A]", "kind" : "def"}, {"label" : "async", "tail" : "(register: ((URIO[R, A]) => Unit) => Any, blockingOn: => FiberId): URIO[R, A]", "member" : "zio.URIO.async", "link" : "zio\/URIO$.html#async[R,A](register:(zio.URIO[R,A]=>Unit)=>Any,blockingOn:=>zio.FiberId):zio.URIO[R,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: => A): UIO[A]", "member" : "zio.URIO.apply", "link" : "zio\/URIO$.html#apply[A](a:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "allowInterrupt", "tail" : "(): UIO[Unit]", "member" : "zio.URIO.allowInterrupt", "link" : "zio\/URIO$.html#allowInterrupt:zio.UIO[Unit]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: => URIO[R, A], release: (A, Exit[Nothing, B]) => URIO[R, Any], use: (A) => URIO[R, B]): URIO[R, B]", "member" : "zio.URIO.acquireReleaseExitWith", "link" : "zio\/URIO$.html#acquireReleaseExitWith[R,A,B](acquire:=>zio.URIO[R,A],release:(A,zio.Exit[Nothing,B])=>zio.URIO[R,Any],use:A=>zio.URIO[R,B]):zio.URIO[R,B]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: => URIO[R, A]): BracketExitAcquire[R, Nothing, A]", "member" : "zio.URIO.acquireReleaseExitWith", "link" : "zio\/URIO$.html#acquireReleaseExitWith[R,A](acquire:=>zio.URIO[R,A]):zio.ZIO.BracketExitAcquire[R,Nothing,A]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: => URIO[R, A], release: (A) => URIO[R, Any], use: (A) => URIO[R, B]): URIO[R, B]", "member" : "zio.URIO.acquireReleaseWith", "link" : "zio\/URIO$.html#acquireReleaseWith[R,A,B](acquire:=>zio.URIO[R,A],release:A=>zio.URIO[R,Any],use:A=>zio.URIO[R,B]):zio.URIO[R,B]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: => URIO[R, A]): BracketAcquire[R, Nothing, A]", "member" : "zio.URIO.acquireReleaseWith", "link" : "zio\/URIO$.html#acquireReleaseWith[R,A](acquire:=>zio.URIO[R,A]):zio.ZIO.BracketAcquire[R,Nothing,A]", "kind" : "def"}, {"label" : "accessZIO", "tail" : "(): AccessZIOPartiallyApplied[R]", "member" : "zio.URIO.accessZIO", "link" : "zio\/URIO$.html#accessZIO[R]:zio.ZIO.AccessZIOPartiallyApplied[R]", "kind" : "def"}, {"label" : "accessM", "tail" : "(): AccessZIOPartiallyApplied[R]", "member" : "zio.URIO.accessM", "link" : "zio\/URIO$.html#accessM[R]:zio.ZIO.AccessZIOPartiallyApplied[R]", "kind" : "def"}, {"label" : "access", "tail" : "(): AccessPartiallyApplied[R]", "member" : "zio.URIO.access", "link" : "zio\/URIO$.html#access[R]:zio.ZIO.AccessPartiallyApplied[R]", "kind" : "def"}, {"label" : "absolve", "tail" : "(v: => URIO[R, Either[Nothing, A]]): URIO[R, A]", "member" : "zio.URIO.absolve", "link" : "zio\/URIO$.html#absolve[R,A](v:=>zio.URIO[R,Either[Nothing,A]]):zio.URIO[R,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/URIO$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/URIO$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/URIO$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/URIO$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/URIO$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/URIO$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/URIO$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/URIO$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/URIO$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/URIO$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/URIO$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/URIO$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/URIO$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/URIO$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/URIO$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/URIO$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/URIO$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/URIO$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/URIO$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.ZApp", "trait" : "zio\/ZApp.html", "kind" : "trait", "members_trait" : [{"label" : "main", "tail" : "(args0: Array[String]): Unit", "member" : "zio.ZApp.main", "link" : "zio\/ZApp.html#main(args0:Array[String]):Unit", "kind" : "final def"}, {"label" : "runtimeConfig", "tail" : "(): RuntimeConfig", "member" : "zio.ZBootstrapRuntime.runtimeConfig", "link" : "zio\/ZApp.html#runtimeConfig:zio.RuntimeConfig", "kind" : "def"}, {"label" : "withTracing", "tail" : "(t: Tracing): Runtime[R]", "member" : "zio.Runtime.withTracing", "link" : "zio\/ZApp.html#withTracing(t:zio.internal.Tracing):zio.Runtime[R]", "kind" : "def"}, {"label" : "withReportFatal", "tail" : "(f: (Throwable) => Nothing): Runtime[R]", "member" : "zio.Runtime.withReportFatal", "link" : "zio\/ZApp.html#withReportFatal(f:Throwable=>Nothing):zio.Runtime[R]", "kind" : "def"}, {"label" : "withFatal", "tail" : "(f: (Throwable) => Boolean): Runtime[R]", "member" : "zio.Runtime.withFatal", "link" : "zio\/ZApp.html#withFatal(f:Throwable=>Boolean):zio.Runtime[R]", "kind" : "def"}, {"label" : "withExecutor", "tail" : "(e: Executor): Runtime[R]", "member" : "zio.Runtime.withExecutor", "link" : "zio\/ZApp.html#withExecutor(e:zio.Executor):zio.Runtime[R]", "kind" : "def"}, {"label" : "withBlockingExecutor", "tail" : "(e: Executor): Runtime[R]", "member" : "zio.Runtime.withBlockingExecutor", "link" : "zio\/ZApp.html#withBlockingExecutor(e:zio.Executor):zio.Runtime[R]", "kind" : "def"}, {"label" : "unsafeRunToFuture", "tail" : "(zio: ZIO[R, E, A]): CancelableFuture[A]", "member" : "zio.Runtime.unsafeRunToFuture", "link" : "zio\/ZApp.html#unsafeRunToFuture[E<:Throwable,A](zio:zio.ZIO[R,E,A]):zio.CancelableFuture[A]", "kind" : "final def"}, {"label" : "unsafeRunTask", "tail" : "(task: => RIO[R, A]): A", "member" : "zio.Runtime.unsafeRunTask", "link" : "zio\/ZApp.html#unsafeRunTask[A](task:=>zio.RIO[R,A]):A", "kind" : "final def"}, {"label" : "unsafeRunAsyncCancelable", "tail" : "(zio: => ZIO[R, E, A])(k: (Exit[E, A]) => Any): (FiberId) => Exit[E, A]", "member" : "zio.Runtime.unsafeRunAsyncCancelable", "link" : "zio\/ZApp.html#unsafeRunAsyncCancelable[E,A](zio:=>zio.ZIO[R,E,A])(k:zio.Exit[E,A]=>Any):zio.FiberId=>zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunAsyncWith", "tail" : "(zio: => ZIO[R, E, A])(k: (Exit[E, A]) => Any): Unit", "member" : "zio.Runtime.unsafeRunAsyncWith", "link" : "zio\/ZApp.html#unsafeRunAsyncWith[E,A](zio:=>zio.ZIO[R,E,A])(k:zio.Exit[E,A]=>Any):Unit", "kind" : "final def"}, {"label" : "tryFastUnsafeRunSync", "tail" : "(zio: ZIO[R, E, A], stack: Int): Exit[E, A]", "member" : "zio.Runtime.tryFastUnsafeRunSync", "link" : "zio\/ZApp.html#tryFastUnsafeRunSync[E,A](zio:zio.ZIO[R,E,A],stack:Int):zio.Exit[E,A]", "kind" : "def"}, {"label" : "defaultUnsafeRunSync", "tail" : "(zio: => ZIO[R, E, A]): Exit[E, A]", "member" : "zio.Runtime.defaultUnsafeRunSync", "link" : "zio\/ZApp.html#defaultUnsafeRunSync[E,A](zio:=>zio.ZIO[R,E,A]):zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunSync", "tail" : "(zio0: => ZIO[R, E, A]): Exit[E, A]", "member" : "zio.Runtime.unsafeRunSync", "link" : "zio\/ZApp.html#unsafeRunSync[E,A](zio0:=>zio.ZIO[R,E,A]):zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunAsync", "tail" : "(zio: ZIO[R, E, A]): Unit", "member" : "zio.Runtime.unsafeRunAsync", "link" : "zio\/ZApp.html#unsafeRunAsync[E,A](zio:zio.ZIO[R,E,A]):Unit", "kind" : "final def"}, {"label" : "unsafeRun", "tail" : "(zio: => ZIO[R, E, A]): A", "member" : "zio.Runtime.unsafeRun", "link" : "zio\/ZApp.html#unsafeRun[E,A](zio:=>zio.ZIO[R,E,A]):A", "kind" : "final def"}, {"label" : "run", "tail" : "(zio: ZIO[R, E, A]): IO[E, A]", "member" : "zio.Runtime.run", "link" : "zio\/ZApp.html#run[E,A](zio:zio.ZIO[R,E,A]):zio.IO[E,A]", "kind" : "final def"}, {"label" : "platform", "tail" : "(): Platform", "member" : "zio.Runtime.platform", "link" : "zio\/ZApp.html#platform:zio.internal.Platform", "kind" : "def"}, {"label" : "mapRuntimeConfig", "tail" : "(f: (RuntimeConfig) => RuntimeConfig): Runtime[R]", "member" : "zio.Runtime.mapRuntimeConfig", "link" : "zio\/ZApp.html#mapRuntimeConfig(f:zio.RuntimeConfig=>zio.RuntimeConfig):zio.Runtime[R]", "kind" : "def"}, {"label" : "mapPlatform", "tail" : "(f: (Platform) => Platform): Runtime[R]", "member" : "zio.Runtime.mapPlatform", "link" : "zio\/ZApp.html#mapPlatform(f:zio.internal.Platform=>zio.internal.Platform):zio.Runtime[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) => R1): Runtime[R1]", "member" : "zio.Runtime.map", "link" : "zio\/ZApp.html#map[R1](f:R=>R1):zio.Runtime[R1]", "kind" : "def"}, {"label" : "as", "tail" : "(r1: R1): Runtime[R1]", "member" : "zio.Runtime.as", "link" : "zio\/ZApp.html#as[R1](r1:R1):zio.Runtime[R1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZApp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZApp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZApp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZApp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZApp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZApp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZApp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZApp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZApp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZApp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZApp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZApp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZApp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZApp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZApp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZApp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZApp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZApp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZApp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(args: List[String]): URIO[R, ExitCode]", "member" : "zio.ZApp.run", "link" : "zio\/ZApp.html#run(args:List[String]):zio.URIO[R,zio.ExitCode]", "kind" : "abstract def"}, {"label" : "environment", "tail" : "(): R", "member" : "zio.Runtime.environment", "link" : "zio\/ZApp.html#environment:R", "kind" : "abstract def"}], "shortDescription" : "The entry point for a purely-functional application on the JVM."}, {"name" : "zio.ZBootstrapRuntime", "trait" : "zio\/ZBootstrapRuntime.html", "kind" : "trait", "members_trait" : [{"label" : "runtimeConfig", "tail" : "(): RuntimeConfig", "member" : "zio.ZBootstrapRuntime.runtimeConfig", "link" : "zio\/ZBootstrapRuntime.html#runtimeConfig:zio.RuntimeConfig", "kind" : "def"}, {"label" : "withTracing", "tail" : "(t: Tracing): Runtime[R]", "member" : "zio.Runtime.withTracing", "link" : "zio\/ZBootstrapRuntime.html#withTracing(t:zio.internal.Tracing):zio.Runtime[R]", "kind" : "def"}, {"label" : "withReportFatal", "tail" : "(f: (Throwable) => Nothing): Runtime[R]", "member" : "zio.Runtime.withReportFatal", "link" : "zio\/ZBootstrapRuntime.html#withReportFatal(f:Throwable=>Nothing):zio.Runtime[R]", "kind" : "def"}, {"label" : "withFatal", "tail" : "(f: (Throwable) => Boolean): Runtime[R]", "member" : "zio.Runtime.withFatal", "link" : "zio\/ZBootstrapRuntime.html#withFatal(f:Throwable=>Boolean):zio.Runtime[R]", "kind" : "def"}, {"label" : "withExecutor", "tail" : "(e: Executor): Runtime[R]", "member" : "zio.Runtime.withExecutor", "link" : "zio\/ZBootstrapRuntime.html#withExecutor(e:zio.Executor):zio.Runtime[R]", "kind" : "def"}, {"label" : "withBlockingExecutor", "tail" : "(e: Executor): Runtime[R]", "member" : "zio.Runtime.withBlockingExecutor", "link" : "zio\/ZBootstrapRuntime.html#withBlockingExecutor(e:zio.Executor):zio.Runtime[R]", "kind" : "def"}, {"label" : "unsafeRunToFuture", "tail" : "(zio: ZIO[R, E, A]): CancelableFuture[A]", "member" : "zio.Runtime.unsafeRunToFuture", "link" : "zio\/ZBootstrapRuntime.html#unsafeRunToFuture[E<:Throwable,A](zio:zio.ZIO[R,E,A]):zio.CancelableFuture[A]", "kind" : "final def"}, {"label" : "unsafeRunTask", "tail" : "(task: => RIO[R, A]): A", "member" : "zio.Runtime.unsafeRunTask", "link" : "zio\/ZBootstrapRuntime.html#unsafeRunTask[A](task:=>zio.RIO[R,A]):A", "kind" : "final def"}, {"label" : "unsafeRunAsyncCancelable", "tail" : "(zio: => ZIO[R, E, A])(k: (Exit[E, A]) => Any): (FiberId) => Exit[E, A]", "member" : "zio.Runtime.unsafeRunAsyncCancelable", "link" : "zio\/ZBootstrapRuntime.html#unsafeRunAsyncCancelable[E,A](zio:=>zio.ZIO[R,E,A])(k:zio.Exit[E,A]=>Any):zio.FiberId=>zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunAsyncWith", "tail" : "(zio: => ZIO[R, E, A])(k: (Exit[E, A]) => Any): Unit", "member" : "zio.Runtime.unsafeRunAsyncWith", "link" : "zio\/ZBootstrapRuntime.html#unsafeRunAsyncWith[E,A](zio:=>zio.ZIO[R,E,A])(k:zio.Exit[E,A]=>Any):Unit", "kind" : "final def"}, {"label" : "tryFastUnsafeRunSync", "tail" : "(zio: ZIO[R, E, A], stack: Int): Exit[E, A]", "member" : "zio.Runtime.tryFastUnsafeRunSync", "link" : "zio\/ZBootstrapRuntime.html#tryFastUnsafeRunSync[E,A](zio:zio.ZIO[R,E,A],stack:Int):zio.Exit[E,A]", "kind" : "def"}, {"label" : "defaultUnsafeRunSync", "tail" : "(zio: => ZIO[R, E, A]): Exit[E, A]", "member" : "zio.Runtime.defaultUnsafeRunSync", "link" : "zio\/ZBootstrapRuntime.html#defaultUnsafeRunSync[E,A](zio:=>zio.ZIO[R,E,A]):zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunSync", "tail" : "(zio0: => ZIO[R, E, A]): Exit[E, A]", "member" : "zio.Runtime.unsafeRunSync", "link" : "zio\/ZBootstrapRuntime.html#unsafeRunSync[E,A](zio0:=>zio.ZIO[R,E,A]):zio.Exit[E,A]", "kind" : "final def"}, {"label" : "unsafeRunAsync", "tail" : "(zio: ZIO[R, E, A]): Unit", "member" : "zio.Runtime.unsafeRunAsync", "link" : "zio\/ZBootstrapRuntime.html#unsafeRunAsync[E,A](zio:zio.ZIO[R,E,A]):Unit", "kind" : "final def"}, {"label" : "unsafeRun", "tail" : "(zio: => ZIO[R, E, A]): A", "member" : "zio.Runtime.unsafeRun", "link" : "zio\/ZBootstrapRuntime.html#unsafeRun[E,A](zio:=>zio.ZIO[R,E,A]):A", "kind" : "final def"}, {"label" : "run", "tail" : "(zio: ZIO[R, E, A]): IO[E, A]", "member" : "zio.Runtime.run", "link" : "zio\/ZBootstrapRuntime.html#run[E,A](zio:zio.ZIO[R,E,A]):zio.IO[E,A]", "kind" : "final def"}, {"label" : "platform", "tail" : "(): Platform", "member" : "zio.Runtime.platform", "link" : "zio\/ZBootstrapRuntime.html#platform:zio.internal.Platform", "kind" : "def"}, {"label" : "mapRuntimeConfig", "tail" : "(f: (RuntimeConfig) => RuntimeConfig): Runtime[R]", "member" : "zio.Runtime.mapRuntimeConfig", "link" : "zio\/ZBootstrapRuntime.html#mapRuntimeConfig(f:zio.RuntimeConfig=>zio.RuntimeConfig):zio.Runtime[R]", "kind" : "def"}, {"label" : "mapPlatform", "tail" : "(f: (Platform) => Platform): Runtime[R]", "member" : "zio.Runtime.mapPlatform", "link" : "zio\/ZBootstrapRuntime.html#mapPlatform(f:zio.internal.Platform=>zio.internal.Platform):zio.Runtime[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) => R1): Runtime[R1]", "member" : "zio.Runtime.map", "link" : "zio\/ZBootstrapRuntime.html#map[R1](f:R=>R1):zio.Runtime[R1]", "kind" : "def"}, {"label" : "as", "tail" : "(r1: R1): Runtime[R1]", "member" : "zio.Runtime.as", "link" : "zio\/ZBootstrapRuntime.html#as[R1](r1:R1):zio.Runtime[R1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZBootstrapRuntime.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZBootstrapRuntime.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZBootstrapRuntime.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZBootstrapRuntime.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZBootstrapRuntime.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZBootstrapRuntime.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZBootstrapRuntime.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZBootstrapRuntime.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZBootstrapRuntime.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZBootstrapRuntime.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZBootstrapRuntime.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZBootstrapRuntime.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZBootstrapRuntime.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZBootstrapRuntime.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZBootstrapRuntime.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZBootstrapRuntime.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZBootstrapRuntime.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZBootstrapRuntime.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZBootstrapRuntime.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "environment", "tail" : "(): R", "member" : "zio.Runtime.environment", "link" : "zio\/ZBootstrapRuntime.html#environment:R", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.ZFiberRef", "shortDescription" : "A FiberRef is ZIO's equivalent of Java's ThreadLocal.", "object" : "zio\/ZFiberRef$.html", "members_class" : [{"label" : "writeOnly", "tail" : "(): ZFiberRef[EA, Unit, A, Nothing]", "member" : "zio.ZFiberRef.writeOnly", "link" : "zio\/ZFiberRef.html#writeOnly:zio.ZFiberRef[EA,Unit,A,Nothing]", "kind" : "def"}, {"label" : "readOnly", "tail" : "(): ZFiberRef[EA, EB, Nothing, B]", "member" : "zio.ZFiberRef.readOnly", "link" : "zio\/ZFiberRef.html#readOnly:zio.ZFiberRef[EA,EB,Nothing,B]", "kind" : "def"}, {"label" : "mapEither", "tail" : "(f: (B) => Either[EC, C]): ZFiberRef[EA, EC, A, C]", "member" : "zio.ZFiberRef.mapEither", "link" : "zio\/ZFiberRef.html#mapEither[EC>:EB,C](f:B=>Either[EC,C]):zio.ZFiberRef[EA,EC,A,C]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => C): ZFiberRef[EA, EB, A, C]", "member" : "zio.ZFiberRef.map", "link" : "zio\/ZFiberRef.html#map[C](f:B=>C):zio.ZFiberRef[EA,EB,A,C]", "kind" : "def"}, {"label" : "filterOutput", "tail" : "(f: (B) => Boolean): ZFiberRef[EA, Option[EB], A, B]", "member" : "zio.ZFiberRef.filterOutput", "link" : "zio\/ZFiberRef.html#filterOutput(f:B=>Boolean):zio.ZFiberRef[EA,Option[EB],A,B]", "kind" : "def"}, {"label" : "filterInput", "tail" : "(f: (A1) => Boolean): ZFiberRef[Option[EA], EB, A1, B]", "member" : "zio.ZFiberRef.filterInput", "link" : "zio\/ZFiberRef.html#filterInput[A1<:A](f:A1=>Boolean):zio.ZFiberRef[Option[EA],EB,A1,B]", "kind" : "def"}, {"label" : "dimapError", "tail" : "(f: (EA) => EC, g: (EB) => ED): ZFiberRef[EC, ED, A, B]", "member" : "zio.ZFiberRef.dimapError", "link" : "zio\/ZFiberRef.html#dimapError[EC,ED](f:EA=>EC,g:EB=>ED):zio.ZFiberRef[EC,ED,A,B]", "kind" : "def"}, {"label" : "dimapEither", "tail" : "(f: (C) => Either[EC, A], g: (B) => Either[ED, D]): ZFiberRef[EC, ED, C, D]", "member" : "zio.ZFiberRef.dimapEither", "link" : "zio\/ZFiberRef.html#dimapEither[EC>:EA,ED>:EB,C,D](f:C=>Either[EC,A],g:B=>Either[ED,D]):zio.ZFiberRef[EC,ED,C,D]", "kind" : "def"}, {"label" : "dimap", "tail" : "(f: (C) => A, g: (B) => D): ZFiberRef[EA, EB, C, D]", "member" : "zio.ZFiberRef.dimap", "link" : "zio\/ZFiberRef.html#dimap[C,D](f:C=>A,g:B=>D):zio.ZFiberRef[EA,EB,C,D]", "kind" : "def"}, {"label" : "contramapEither", "tail" : "(f: (C) => Either[EC, A]): ZFiberRef[EC, EB, C, B]", "member" : "zio.ZFiberRef.contramapEither", "link" : "zio\/ZFiberRef.html#contramapEither[EC>:EA,C](f:C=>Either[EC,A]):zio.ZFiberRef[EC,EB,C,B]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (C) => A): ZFiberRef[EA, EB, C, B]", "member" : "zio.ZFiberRef.contramap", "link" : "zio\/ZFiberRef.html#contramap[C](f:C=>A):zio.ZFiberRef[EA,EB,C,B]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[B, C]): ZFiberRef[EA, Option[EB], A, C]", "member" : "zio.ZFiberRef.collect", "link" : "zio\/ZFiberRef.html#collect[C](pf:PartialFunction[B,C]):zio.ZFiberRef[EA,Option[EB],A,C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZFiberRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZFiberRef.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZFiberRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZFiberRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZFiberRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZFiberRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZFiberRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZFiberRef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZFiberRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZFiberRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZFiberRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZFiberRef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZFiberRef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZFiberRef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZFiberRef.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZFiberRef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZFiberRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZFiberRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZFiberRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "set", "tail" : "(value: A): IO[EA, Unit]", "member" : "zio.ZFiberRef.set", "link" : "zio\/ZFiberRef.html#set(value:A):zio.IO[EA,Unit]", "kind" : "abstract def"}, {"label" : "locally", "tail" : "(value: A)(use: ZIO[R, EC, C]): ZIO[R, EC, C]", "member" : "zio.ZFiberRef.locally", "link" : "zio\/ZFiberRef.html#locally[R,EC>:EA,C](value:A)(use:zio.ZIO[R,EC,C]):zio.ZIO[R,EC,C]", "kind" : "abstract def"}, {"label" : "initialValue", "tail" : "(): Either[EB, B]", "member" : "zio.ZFiberRef.initialValue", "link" : "zio\/ZFiberRef.html#initialValue:Either[EB,B]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): IO[EB, B]", "member" : "zio.ZFiberRef.get", "link" : "zio\/ZFiberRef.html#get:zio.IO[EB,B]", "kind" : "abstract def"}, {"label" : "foldAll", "tail" : "(ea: (EA) => EC, eb: (EB) => ED, ec: (EB) => EC, ca: (C) => (B) => Either[EC, A], bd: (B) => Either[ED, D]): ZFiberRef[EC, ED, C, D]", "member" : "zio.ZFiberRef.foldAll", "link" : "zio\/ZFiberRef.html#foldAll[EC,ED,C,D](ea:EA=>EC,eb:EB=>ED,ec:EB=>EC,ca:C=>(B=>Either[EC,A]),bd:B=>Either[ED,D]):zio.ZFiberRef[EC,ED,C,D]", "kind" : "abstract def"}, {"label" : "fold", "tail" : "(ea: (EA) => EC, eb: (EB) => ED, ca: (C) => Either[EC, A], bd: (B) => Either[ED, D]): ZFiberRef[EC, ED, C, D]", "member" : "zio.ZFiberRef.fold", "link" : "zio\/ZFiberRef.html#fold[EC,ED,C,D](ea:EA=>EC,eb:EB=>ED,ca:C=>Either[EC,A],bd:B=>Either[ED,D]):zio.ZFiberRef[EC,ED,C,D]", "kind" : "abstract def"}], "members_object" : [{"label" : "UnifiedSyntax", "tail" : "", "member" : "zio.ZFiberRef.UnifiedSyntax", "link" : "zio\/ZFiberRef$.html#UnifiedSyntax[E,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "Runtime", "tail" : "", "member" : "zio.ZFiberRef.Runtime", "link" : "zio\/ZFiberRef$.html#Runtime[A]extendsZFiberRef[Nothing,Nothing,A,A]", "kind" : "final class"}, {"label" : "make", "tail" : "(initial: A, fork: (A) => A, join: (A, A) => A): UIO[Runtime[A]]", "member" : "zio.ZFiberRef.make", "link" : "zio\/ZFiberRef$.html#make[A](initial:A,fork:A=>A,join:(A,A)=>A):zio.UIO[zio.FiberRef.Runtime[A]]", "kind" : "def"}, {"label" : "currentLogSpan", "tail" : ": Runtime[List[LogSpan]]", "member" : "zio.ZFiberRef.currentLogSpan", "link" : "zio\/ZFiberRef$.html#currentLogSpan:zio.FiberRef.Runtime[List[zio.LogSpan]]", "kind" : "lazy val"}, {"label" : "currentLogLevel", "tail" : ": Runtime[LogLevel]", "member" : "zio.ZFiberRef.currentLogLevel", "link" : "zio\/ZFiberRef$.html#currentLogLevel:zio.FiberRef.Runtime[zio.LogLevel]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZFiberRef$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZFiberRef$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZFiberRef$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZFiberRef$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZFiberRef$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZFiberRef$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZFiberRef$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZFiberRef$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZFiberRef$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZFiberRef$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZFiberRef$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZFiberRef$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZFiberRef$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZFiberRef$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZFiberRef$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZFiberRef$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZFiberRef$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZFiberRef$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZFiberRef$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/ZFiberRef.html", "kind" : "class"}, {"name" : "zio.ZHub", "shortDescription" : "A ZHub[RA, RB, EA, EB, A, B] is an asynchronous message hub.", "object" : "zio\/ZHub$.html", "members_class" : [{"label" : "toQueue", "tail" : "(): ZEnqueue[RA, EA, A]", "member" : "zio.ZHub.toQueue", "link" : "zio\/ZHub.html#toQueue:zio.ZEnqueue[RA,EA,A]", "kind" : "final def"}, {"label" : "mapZIO", "tail" : "(f: (B) => ZIO[RC, EC, C]): ZHub[RA, RC, EA, EC, A, C]", "member" : "zio.ZHub.mapZIO", "link" : "zio\/ZHub.html#mapZIO[RC<:RB,EC>:EB,C](f:B=>zio.ZIO[RC,EC,C]):zio.ZHub[RA,RC,EA,EC,A,C]", "kind" : "final def"}, {"label" : "mapM", "tail" : "(f: (B) => ZIO[RC, EC, C]): ZHub[RA, RC, EA, EC, A, C]", "member" : "zio.ZHub.mapM", "link" : "zio\/ZHub.html#mapM[RC<:RB,EC>:EB,C](f:B=>zio.ZIO[RC,EC,C]):zio.ZHub[RA,RC,EA,EC,A,C]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (B) => C): ZHub[RA, RB, EA, EB, A, C]", "member" : "zio.ZHub.map", "link" : "zio\/ZHub.html#map[C](f:B=>C):zio.ZHub[RA,RB,EA,EB,A,C]", "kind" : "final def"}, {"label" : "filterOutputZIO", "tail" : "(f: (B) => ZIO[RB1, EB1, Boolean]): ZHub[RA, RB1, EA, EB1, A, B]", "member" : "zio.ZHub.filterOutputZIO", "link" : "zio\/ZHub.html#filterOutputZIO[RB1<:RB,EB1>:EB](f:B=>zio.ZIO[RB1,EB1,Boolean]):zio.ZHub[RA,RB1,EA,EB1,A,B]", "kind" : "final def"}, {"label" : "filterOutputM", "tail" : "(f: (B) => ZIO[RB1, EB1, Boolean]): ZHub[RA, RB1, EA, EB1, A, B]", "member" : "zio.ZHub.filterOutputM", "link" : "zio\/ZHub.html#filterOutputM[RB1<:RB,EB1>:EB](f:B=>zio.ZIO[RB1,EB1,Boolean]):zio.ZHub[RA,RB1,EA,EB1,A,B]", "kind" : "final def"}, {"label" : "filterOutput", "tail" : "(f: (B) => Boolean): ZHub[RA, RB, EA, EB, A, B]", "member" : "zio.ZHub.filterOutput", "link" : "zio\/ZHub.html#filterOutput(f:B=>Boolean):zio.ZHub[RA,RB,EA,EB,A,B]", "kind" : "final def"}, {"label" : "filterInputZIO", "tail" : "(f: (A1) => ZIO[RA1, EA1, Boolean]): ZHub[RA1, RB, EA1, EB, A1, B]", "member" : "zio.ZHub.filterInputZIO", "link" : "zio\/ZHub.html#filterInputZIO[RA1<:RA,EA1>:EA,A1<:A](f:A1=>zio.ZIO[RA1,EA1,Boolean]):zio.ZHub[RA1,RB,EA1,EB,A1,B]", "kind" : "final def"}, {"label" : "filterInputM", "tail" : "(f: (A1) => ZIO[RA1, EA1, Boolean]): ZHub[RA1, RB, EA1, EB, A1, B]", "member" : "zio.ZHub.filterInputM", "link" : "zio\/ZHub.html#filterInputM[RA1<:RA,EA1>:EA,A1<:A](f:A1=>zio.ZIO[RA1,EA1,Boolean]):zio.ZHub[RA1,RB,EA1,EB,A1,B]", "kind" : "final def"}, {"label" : "filterInput", "tail" : "(f: (A1) => Boolean): ZHub[RA, RB, EA, EB, A1, B]", "member" : "zio.ZHub.filterInput", "link" : "zio\/ZHub.html#filterInput[A1<:A](f:A1=>Boolean):zio.ZHub[RA,RB,EA,EB,A1,B]", "kind" : "final def"}, {"label" : "dimapZIO", "tail" : "(f: (C) => ZIO[RC, EC, A], g: (B) => ZIO[RD, ED, D]): ZHub[RC, RD, EC, ED, C, D]", "member" : "zio.ZHub.dimapZIO", "link" : "zio\/ZHub.html#dimapZIO[RC<:RA,RD<:RB,EC>:EA,ED>:EB,C,D](f:C=>zio.ZIO[RC,EC,A],g:B=>zio.ZIO[RD,ED,D]):zio.ZHub[RC,RD,EC,ED,C,D]", "kind" : "final def"}, {"label" : "dimapM", "tail" : "(f: (C) => ZIO[RC, EC, A], g: (B) => ZIO[RD, ED, D]): ZHub[RC, RD, EC, ED, C, D]", "member" : "zio.ZHub.dimapM", "link" : "zio\/ZHub.html#dimapM[RC<:RA,RD<:RB,EC>:EA,ED>:EB,C,D](f:C=>zio.ZIO[RC,EC,A],g:B=>zio.ZIO[RD,ED,D]):zio.ZHub[RC,RD,EC,ED,C,D]", "kind" : "final def"}, {"label" : "dimap", "tail" : "(f: (C) => A, g: (B) => D): ZHub[RA, RB, EA, EB, C, D]", "member" : "zio.ZHub.dimap", "link" : "zio\/ZHub.html#dimap[C,D](f:C=>A,g:B=>D):zio.ZHub[RA,RB,EA,EB,C,D]", "kind" : "final def"}, {"label" : "contramapZIO", "tail" : "(f: (C) => ZIO[RC, EC, A]): ZHub[RC, RB, EC, EB, C, B]", "member" : "zio.ZHub.contramapZIO", "link" : "zio\/ZHub.html#contramapZIO[RC<:RA,EC>:EA,C](f:C=>zio.ZIO[RC,EC,A]):zio.ZHub[RC,RB,EC,EB,C,B]", "kind" : "final def"}, {"label" : "contramapM", "tail" : "(f: (C) => ZIO[RC, EC, A]): ZHub[RC, RB, EC, EB, C, B]", "member" : "zio.ZHub.contramapM", "link" : "zio\/ZHub.html#contramapM[RC<:RA,EC>:EA,C](f:C=>zio.ZIO[RC,EC,A]):zio.ZHub[RC,RB,EC,EB,C,B]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (C) => A): ZHub[RA, RB, EA, EB, C, B]", "member" : "zio.ZHub.contramap", "link" : "zio\/ZHub.html#contramap[C](f:C=>A):zio.ZHub[RA,RB,EA,EB,C,B]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZHub.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZHub.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZHub.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZHub.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZHub.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZHub.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZHub.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZHub.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZHub.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZHub.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZHub.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZHub.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZHub.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZHub.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZHub.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZHub.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZHub.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZHub.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZHub.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(): ZManaged[Any, Nothing, ZDequeue[RB, EB, B]]", "member" : "zio.ZHub.subscribe", "link" : "zio\/ZHub.html#subscribe:zio.ZManaged[Any,Nothing,zio.ZDequeue[RB,EB,B]]", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): UIO[Int]", "member" : "zio.ZHub.size", "link" : "zio\/ZHub.html#size:zio.UIO[Int]", "kind" : "abstract def"}, {"label" : "shutdown", "tail" : "(): UIO[Unit]", "member" : "zio.ZHub.shutdown", "link" : "zio\/ZHub.html#shutdown:zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "publishAll", "tail" : "(as: Iterable[A]): ZIO[RA, EA, Boolean]", "member" : "zio.ZHub.publishAll", "link" : "zio\/ZHub.html#publishAll(as:Iterable[A]):zio.ZIO[RA,EA,Boolean]", "kind" : "abstract def"}, {"label" : "publish", "tail" : "(a: A): ZIO[RA, EA, Boolean]", "member" : "zio.ZHub.publish", "link" : "zio\/ZHub.html#publish(a:A):zio.ZIO[RA,EA,Boolean]", "kind" : "abstract def"}, {"label" : "isShutdown", "tail" : "(): UIO[Boolean]", "member" : "zio.ZHub.isShutdown", "link" : "zio\/ZHub.html#isShutdown:zio.UIO[Boolean]", "kind" : "abstract def"}, {"label" : "capacity", "tail" : "(): Int", "member" : "zio.ZHub.capacity", "link" : "zio\/ZHub.html#capacity:Int", "kind" : "abstract def"}, {"label" : "awaitShutdown", "tail" : "(): UIO[Unit]", "member" : "zio.ZHub.awaitShutdown", "link" : "zio\/ZHub.html#awaitShutdown:zio.UIO[Unit]", "kind" : "abstract def"}], "members_object" : [{"label" : "unbounded", "tail" : "(): UIO[Hub[A]]", "member" : "zio.ZHub.unbounded", "link" : "zio\/ZHub$.html#unbounded[A]:zio.UIO[zio.Hub[A]]", "kind" : "def"}, {"label" : "sliding", "tail" : "(requestedCapacity: Int): UIO[Hub[A]]", "member" : "zio.ZHub.sliding", "link" : "zio\/ZHub$.html#sliding[A](requestedCapacity:Int):zio.UIO[zio.Hub[A]]", "kind" : "def"}, {"label" : "dropping", "tail" : "(requestedCapacity: Int): UIO[Hub[A]]", "member" : "zio.ZHub.dropping", "link" : "zio\/ZHub$.html#dropping[A](requestedCapacity:Int):zio.UIO[zio.Hub[A]]", "kind" : "def"}, {"label" : "bounded", "tail" : "(requestedCapacity: Int): UIO[Hub[A]]", "member" : "zio.ZHub.bounded", "link" : "zio\/ZHub$.html#bounded[A](requestedCapacity:Int):zio.UIO[zio.Hub[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZHub$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZHub$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZHub$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZHub$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZHub$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZHub$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZHub$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZHub$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZHub$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZHub$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZHub$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZHub$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZHub$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZHub$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZHub$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZHub$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZHub$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZHub$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZHub$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/ZHub.html", "kind" : "class"}, {"name" : "zio.ZInputStream", "shortDescription" : "", "object" : "zio\/ZInputStream$.html", "members_class" : [{"member" : "zio.ZInputStream#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZInputStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZInputStream.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZInputStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZInputStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZInputStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZInputStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZInputStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZInputStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZInputStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZInputStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZInputStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZInputStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZInputStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZInputStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZInputStream.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZInputStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZInputStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZInputStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZInputStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "readAll", "tail" : "(bufferSize: Int): IO[Option[IOException], Chunk[Byte]]", "member" : "zio.ZInputStream.readAll", "link" : "zio\/ZInputStream.html#readAll(bufferSize:Int):zio.IO[Option[java.io.IOException],zio.Chunk[Byte]]", "kind" : "abstract def"}, {"label" : "skip", "tail" : "(n: Long): IO[IOException, Long]", "member" : "zio.ZInputStream.skip", "link" : "zio\/ZInputStream.html#skip(n:Long):zio.IO[java.io.IOException,Long]", "kind" : "abstract def"}, {"label" : "readN", "tail" : "(n: Int): IO[Option[IOException], Chunk[Byte]]", "member" : "zio.ZInputStream.readN", "link" : "zio\/ZInputStream.html#readN(n:Int):zio.IO[Option[java.io.IOException],zio.Chunk[Byte]]", "kind" : "abstract def"}], "members_object" : [{"label" : "fromInputStream", "tail" : "(is: InputStream): ZInputStream", "member" : "zio.ZInputStream.fromInputStream", "link" : "zio\/ZInputStream$.html#fromInputStream(is:java.io.InputStream):zio.ZInputStream", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZInputStream$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZInputStream$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZInputStream$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZInputStream$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZInputStream$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZInputStream$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZInputStream$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZInputStream$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZInputStream$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZInputStream$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZInputStream$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZInputStream$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZInputStream$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZInputStream$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZInputStream$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZInputStream$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZInputStream$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZInputStream$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZInputStream$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/ZInputStream.html", "kind" : "class"}, {"name" : "zio.ZIO", "object" : "zio\/ZIO$.html", "members_object" : [{"label" : "ZIOConstructorLowPriority3", "tail" : "", "member" : "zio.ZIO.ZIOConstructorLowPriority3", "link" : "zio\/ZIO$.html#ZIOConstructorLowPriority3extendsAnyRef", "kind" : "trait"}, {"label" : "ZIOConstructorLowPriority2", "tail" : "", "member" : "zio.ZIO.ZIOConstructorLowPriority2", "link" : "zio\/ZIO$.html#ZIOConstructorLowPriority2extendsZIO.ZIOConstructorLowPriority3", "kind" : "trait"}, {"label" : "ZIOConstructorLowPriority1", "tail" : "", "member" : "zio.ZIO.ZIOConstructorLowPriority1", "link" : "zio\/ZIO$.html#ZIOConstructorLowPriority1extendsZIO.ZIOConstructorLowPriority2", "kind" : "trait"}, {"label" : "ZIOConstructor", "tail" : "", "member" : "zio.ZIO.ZIOConstructor", "link" : "zio\/ZIO$.html#ZIOConstructor", "kind" : "object"}, {"label" : "ZIOConstructor", "tail" : "", "member" : "zio.ZIO.ZIOConstructor", "link" : "zio\/ZIO$.html#ZIOConstructor[-Environment,+Error,In]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "TapErrorTraceRefailFn", "tail" : "", "member" : "zio.ZIO.TapErrorTraceRefailFn", "link" : "zio\/ZIO$.html#TapErrorTraceRefailFn[R,E,E1>:E,A]extendsZIOFn1[zio.Cause[E],zio.ZIO[R,E1,Nothing]]", "kind" : "final class"}, {"label" : "TapErrorRefailFn", "tail" : "", "member" : "zio.ZIO.TapErrorRefailFn", "link" : "zio\/ZIO$.html#TapErrorRefailFn[R,E,E1>:E,A]extendsZIOFn1[zio.Cause[E],zio.ZIO[R,E1,Nothing]]", "kind" : "final class"}, {"label" : "TapDefectRefailFn", "tail" : "", "member" : "zio.ZIO.TapDefectRefailFn", "link" : "zio\/ZIO$.html#TapDefectRefailFn[R,E,E1>:E]extendsZIOFn1[zio.Cause[E],zio.ZIO[R,E1,Nothing]]", "kind" : "final class"}, {"label" : "TapErrorCauseRefailFn", "tail" : "", "member" : "zio.ZIO.TapErrorCauseRefailFn", "link" : "zio\/ZIO$.html#TapErrorCauseRefailFn[R,E,E1>:E,A]extendsZIOFn1[zio.Cause[E],zio.ZIO[R,E1,Nothing]]", "kind" : "final class"}, {"label" : "FoldCauseZIOFailureTraceFn", "tail" : "", "member" : "zio.ZIO.FoldCauseZIOFailureTraceFn", "link" : "zio\/ZIO$.html#FoldCauseZIOFailureTraceFn[R,E,E2,A]extendsZIOFn1[zio.Cause[E],zio.ZIO[R,E2,A]]", "kind" : "final class"}, {"label" : "FoldCauseZIOFailureFn", "tail" : "", "member" : "zio.ZIO.FoldCauseZIOFailureFn", "link" : "zio\/ZIO$.html#FoldCauseZIOFailureFn[R,E,E2,A]extendsZIOFn1[zio.Cause[E],zio.ZIO[R,E2,A]]", "kind" : "final class"}, {"label" : "MapErrorCauseFn", "tail" : "", "member" : "zio.ZIO.MapErrorCauseFn", "link" : "zio\/ZIO$.html#MapErrorCauseFn[R,E,E2,A]extendsZIOFn1[zio.Cause[E],zio.ZIO[R,E2,Nothing]]", "kind" : "final class"}, {"label" : "MapErrorFn", "tail" : "", "member" : "zio.ZIO.MapErrorFn", "link" : "zio\/ZIO$.html#MapErrorFn[R,E,E2,A]extendsZIOFn1[zio.Cause[E],zio.ZIO[R,E2,Nothing]]", "kind" : "final class"}, {"label" : "SucceedFn", "tail" : "", "member" : "zio.ZIO.SucceedFn", "link" : "zio\/ZIO$.html#SucceedFn[R,E,A]extendsZIOFn1[A,zio.ZIO[R,E,A]]", "kind" : "final class"}, {"label" : "BracketReleaseFn", "tail" : "", "member" : "zio.ZIO.BracketReleaseFn", "link" : "zio\/ZIO$.html#BracketReleaseFn[R,E,A,B]extendsZIOFn2[A,zio.Exit[E,B],zio.URIO[R,Any]]", "kind" : "final class"}, {"label" : "ConstFn", "tail" : "", "member" : "zio.ZIO.ConstFn", "link" : "zio\/ZIO$.html#ConstFn[A,B]extendsZIOFn1[A,B]", "kind" : "final class"}, {"label" : "ForkScopeRestore", "tail" : "", "member" : "zio.ZIO.ForkScopeRestore", "link" : "zio\/ZIO$.html#ForkScopeRestoreextendsAnyVal", "kind" : "final class"}, {"label" : "ConstZIOFn", "tail" : "", "member" : "zio.ZIO.ConstZIOFn", "link" : "zio\/ZIO$.html#ConstZIOFn[R,E,A,B]extendsZIOFn1[A,zio.ZIO[R,E,B]]", "kind" : "final class"}, {"label" : "MapFn", "tail" : "", "member" : "zio.ZIO.MapFn", "link" : "zio\/ZIO$.html#MapFn[R,E,A,B]extendsZIOFn1[A,zio.ZIO[R,E,B]]", "kind" : "final class"}, {"label" : "TapFn", "tail" : "", "member" : "zio.ZIO.TapFn", "link" : "zio\/ZIO$.html#TapFn[R,E,A]extendsZIOFn1[A,zio.ZIO[R,E,A]]", "kind" : "final class"}, {"label" : "ZipRightFn", "tail" : "", "member" : "zio.ZIO.ZipRightFn", "link" : "zio\/ZIO$.html#ZipRightFn[R,E,A,B]extendsZIOFn1[A,zio.ZIO[R,E,B]]", "kind" : "final class"}, {"label" : "ZipLeftFn", "tail" : "", "member" : "zio.ZIO.ZipLeftFn", "link" : "zio\/ZIO$.html#ZipLeftFn[R,E,A,B]extendsZIOFn1[B,zio.ZIO[R,E,B]]", "kind" : "final class"}, {"label" : "LogSpan", "tail" : "", "member" : "zio.ZIO.LogSpan", "link" : "zio\/ZIO$.html#LogSpanextendsAnyVal", "kind" : "final class"}, {"label" : "GetStateWithPartiallyApplied", "tail" : "", "member" : "zio.ZIO.GetStateWithPartiallyApplied", "link" : "zio\/ZIO$.html#GetStateWithPartiallyApplied[S]extendsAnyVal", "kind" : "final class"}, {"label" : "ServiceWithPartiallyApplied", "tail" : "", "member" : "zio.ZIO.ServiceWithPartiallyApplied", "link" : "zio\/ZIO$.html#ServiceWithPartiallyApplied[Service]extendsAnyVal", "kind" : "final class"}, {"label" : "ServiceAtPartiallyApplied", "tail" : "", "member" : "zio.ZIO.ServiceAtPartiallyApplied", "link" : "zio\/ZIO$.html#ServiceAtPartiallyApplied[Service]extendsAnyVal", "kind" : "final class"}, {"label" : "AccessZIOPartiallyApplied", "tail" : "", "member" : "zio.ZIO.AccessZIOPartiallyApplied", "link" : "zio\/ZIO$.html#AccessZIOPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "AccessPartiallyApplied", "tail" : "", "member" : "zio.ZIO.AccessPartiallyApplied", "link" : "zio\/ZIO$.html#AccessPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "BracketExitRelease", "tail" : "", "member" : "zio.ZIO.BracketExitRelease", "link" : "zio\/ZIO$.html#BracketExitRelease[-R,+E,E1,+A,B]extendsAnyRef", "kind" : "final class"}, {"label" : "BracketExitAcquire", "tail" : "", "member" : "zio.ZIO.BracketExitAcquire", "link" : "zio\/ZIO$.html#BracketExitAcquire[-R,+E,+A]extendsAnyVal", "kind" : "final class"}, {"label" : "BracketRelease", "tail" : "", "member" : "zio.ZIO.BracketRelease", "link" : "zio\/ZIO$.html#BracketRelease[-R,+E,+A]extendsAnyRef", "kind" : "final class"}, {"label" : "BracketAcquire", "tail" : "", "member" : "zio.ZIO.BracketAcquire", "link" : "zio\/ZIO$.html#BracketAcquire[-R,+E,+A]extendsAnyVal", "kind" : "final class"}, {"label" : "BracketRelease_", "tail" : "", "member" : "zio.ZIO.BracketRelease_", "link" : "zio\/ZIO$.html#BracketRelease_[-R,+E]extendsAnyRef", "kind" : "final class"}, {"label" : "BracketAcquire_", "tail" : "", "member" : "zio.ZIO.BracketAcquire_", "link" : "zio\/ZIO$.html#BracketAcquire_[-R,+E]extendsAnyVal", "kind" : "final class"}, {"label" : "TimeoutTo", "tail" : "", "member" : "zio.ZIO.TimeoutTo", "link" : "zio\/ZIO$.html#TimeoutTo[-R,+E,+A,+B]extendsAnyRef", "kind" : "final class"}, {"label" : "WhenZIO", "tail" : "", "member" : "zio.ZIO.WhenZIO", "link" : "zio\/ZIO$.html#WhenZIO[R,E]extendsAnyVal", "kind" : "final class"}, {"label" : "UnlessZIO", "tail" : "", "member" : "zio.ZIO.UnlessZIO", "link" : "zio\/ZIO$.html#UnlessZIO[R,E]extendsAnyVal", "kind" : "final class"}, {"label" : "IfZIO", "tail" : "", "member" : "zio.ZIO.IfZIO", "link" : "zio\/ZIO$.html#IfZIO[R,E]extendsAnyVal", "kind" : "final class"}, {"label" : "InterruptStatusRestore", "tail" : "", "member" : "zio.ZIO.InterruptStatusRestore", "link" : "zio\/ZIO$.html#InterruptStatusRestore", "kind" : "object"}, {"label" : "InterruptStatusRestore", "tail" : "", "member" : "zio.ZIO.InterruptStatusRestore", "link" : "zio\/ZIO$.html#InterruptStatusRestoreextendsAnyVal", "kind" : "final class"}, {"label" : "Grafter", "tail" : "", "member" : "zio.ZIO.Grafter", "link" : "zio\/ZIO$.html#GrafterextendsAnyVal", "kind" : "final class"}, {"label" : "ZIOWithFilterOps", "tail" : "", "member" : "zio.ZIO.ZIOWithFilterOps", "link" : "zio\/ZIO$.html#ZIOWithFilterOps[R,E,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "CanFilter", "tail" : "", "member" : "zio.ZIO.CanFilter", "link" : "zio\/ZIO$.html#CanFilter", "kind" : "object"}, {"label" : "CanFilter", "tail" : "", "member" : "zio.ZIO.CanFilter", "link" : "zio\/ZIO$.html#CanFilter[+E]extendsAnyRef", "kind" : "abstract class"}, {"label" : "UpdateServiceAt", "tail" : "", "member" : "zio.ZIO.UpdateServiceAt", "link" : "zio\/ZIO$.html#UpdateServiceAt[-R,+E,+A,Service]extendsAnyVal", "kind" : "final class"}, {"label" : "UpdateService", "tail" : "", "member" : "zio.ZIO.UpdateService", "link" : "zio\/ZIO$.html#UpdateService[-R,+E,+A,M]extendsAnyVal", "kind" : "final class"}, {"label" : "ProvideSomeLayer", "tail" : "", "member" : "zio.ZIO.ProvideSomeLayer", "link" : "zio\/ZIO$.html#ProvideSomeLayer[R0,-R,+E,+A]extendsAnyVal", "kind" : "final class"}, {"label" : "ZioRefineToOrDieOps", "tail" : "", "member" : "zio.ZIO.ZioRefineToOrDieOps", "link" : "zio\/ZIO$.html#ZioRefineToOrDieOps[R,E<:Throwable,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "ZIOAutoCloseableOps", "tail" : "", "member" : "zio.ZIO.ZIOAutoCloseableOps", "link" : "zio\/ZIO$.html#ZIOAutoCloseableOps[R,E,A<:AutoCloseable]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "apply", "tail" : "(a: => A): Task[A]", "member" : "zio.ZIO.apply", "link" : "zio\/ZIO$.html#apply[A](a:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "yieldNow", "tail" : ": UIO[Unit]", "member" : "zio.ZIO.yieldNow", "link" : "zio\/ZIO$.html#yieldNow:zio.UIO[Unit]", "kind" : "lazy val"}, {"label" : "withRuntimeConfig", "tail" : "(runtimeConfig: => RuntimeConfig)(zio: => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.withRuntimeConfig", "link" : "zio\/ZIO$.html#withRuntimeConfig[R,E,A](runtimeConfig:=>zio.RuntimeConfig)(zio:=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "withChildren", "tail" : "(get: (UIO[Chunk[Fiber.Runtime[Any, Any]]]) => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.withChildren", "link" : "zio\/ZIO$.html#withChildren[R,E,A](get:zio.UIO[zio.Chunk[zio.Fiber.Runtime[Any,Any]]]=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "whenZIO", "tail" : "(b: => ZIO[R, E, Boolean]): WhenZIO[R, E]", "member" : "zio.ZIO.whenZIO", "link" : "zio\/ZIO$.html#whenZIO[R,E](b:=>zio.ZIO[R,E,Boolean]):zio.ZIO.WhenZIO[R,E]", "kind" : "def"}, {"label" : "whenM", "tail" : "(b: => ZIO[R, E, Boolean]): WhenZIO[R, E]", "member" : "zio.ZIO.whenM", "link" : "zio\/ZIO$.html#whenM[R,E](b:=>zio.ZIO[R,E,Boolean]):zio.ZIO.WhenZIO[R,E]", "kind" : "def"}, {"label" : "whenCaseZIO", "tail" : "(a: => ZIO[R, E, A])(pf: PartialFunction[A, ZIO[R, E, B]]): ZIO[R, E, Option[B]]", "member" : "zio.ZIO.whenCaseZIO", "link" : "zio\/ZIO$.html#whenCaseZIO[R,E,A,B](a:=>zio.ZIO[R,E,A])(pf:PartialFunction[A,zio.ZIO[R,E,B]]):zio.ZIO[R,E,Option[B]]", "kind" : "def"}, {"label" : "whenCaseM", "tail" : "(a: => ZIO[R, E, A])(pf: PartialFunction[A, ZIO[R, E, B]]): ZIO[R, E, Option[B]]", "member" : "zio.ZIO.whenCaseM", "link" : "zio\/ZIO$.html#whenCaseM[R,E,A,B](a:=>zio.ZIO[R,E,A])(pf:PartialFunction[A,zio.ZIO[R,E,B]]):zio.ZIO[R,E,Option[B]]", "kind" : "def"}, {"label" : "whenCase", "tail" : "(a: => A)(pf: PartialFunction[A, ZIO[R, E, B]]): ZIO[R, E, Option[B]]", "member" : "zio.ZIO.whenCase", "link" : "zio\/ZIO$.html#whenCase[R,E,A,B](a:=>A)(pf:PartialFunction[A,zio.ZIO[R,E,B]]):zio.ZIO[R,E,Option[B]]", "kind" : "def"}, {"label" : "when", "tail" : "(b: => Boolean)(zio: => ZIO[R, E, A]): ZIO[R, E, Option[A]]", "member" : "zio.ZIO.when", "link" : "zio\/ZIO$.html#when[R,E,A](b:=>Boolean)(zio:=>zio.ZIO[R,E,A]):zio.ZIO[R,E,Option[A]]", "kind" : "def"}, {"label" : "validateFirstPar", "tail" : "(in: Collection[A])(f: (A) => ZIO[R, E, B])(bf: zio.BuildFrom[Collection[A], E, Collection[E]], ev: CanFail[E]): ZIO[R, Collection[E], B]", "member" : "zio.ZIO.validateFirstPar", "link" : "zio\/ZIO$.html#validateFirstPar[R,E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.ZIO[R,E,B])(implicitbf:zio.BuildFrom[Collection[A],E,Collection[E]],implicitev:zio.CanFail[E]):zio.ZIO[R,Collection[E],B]", "kind" : "def"}, {"label" : "validateFirst", "tail" : "(in: Collection[A])(f: (A) => ZIO[R, E, B])(bf: zio.BuildFrom[Collection[A], E, Collection[E]], ev: CanFail[E]): ZIO[R, Collection[E], B]", "member" : "zio.ZIO.validateFirst", "link" : "zio\/ZIO$.html#validateFirst[R,E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.ZIO[R,E,B])(implicitbf:zio.BuildFrom[Collection[A],E,Collection[E]],implicitev:zio.CanFail[E]):zio.ZIO[R,Collection[E],B]", "kind" : "def"}, {"label" : "validateParDiscard", "tail" : "(in: => Iterable[A])(f: (A) => ZIO[R, E, Any])(ev: CanFail[E]): ZIO[R, ::[E], Unit]", "member" : "zio.ZIO.validateParDiscard", "link" : "zio\/ZIO$.html#validateParDiscard[R,E,A](in:=>Iterable[A])(f:A=>zio.ZIO[R,E,Any])(implicitev:zio.CanFail[E]):zio.ZIO[R,::[E],Unit]", "kind" : "def"}, {"label" : "validatePar_", "tail" : "(in: => Iterable[A])(f: (A) => ZIO[R, E, Any])(ev: CanFail[E]): ZIO[R, ::[E], Unit]", "member" : "zio.ZIO.validatePar_", "link" : "zio\/ZIO$.html#validatePar_[R,E,A](in:=>Iterable[A])(f:A=>zio.ZIO[R,E,Any])(implicitev:zio.CanFail[E]):zio.ZIO[R,::[E],Unit]", "kind" : "def"}, {"label" : "validatePar", "tail" : "(in: NonEmptyChunk[A])(f: (A) => ZIO[R, E, B])(ev: CanFail[E]): ZIO[R, ::[E], NonEmptyChunk[B]]", "member" : "zio.ZIO.validatePar", "link" : "zio\/ZIO$.html#validatePar[R,E,A,B](in:zio.NonEmptyChunk[A])(f:A=>zio.ZIO[R,E,B])(implicitev:zio.CanFail[E]):zio.ZIO[R,::[E],zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "validatePar", "tail" : "(in: Collection[A])(f: (A) => ZIO[R, E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]], ev: CanFail[E]): ZIO[R, ::[E], Collection[B]]", "member" : "zio.ZIO.validatePar", "link" : "zio\/ZIO$.html#validatePar[R,E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.ZIO[R,E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]],implicitev:zio.CanFail[E]):zio.ZIO[R,::[E],Collection[B]]", "kind" : "def"}, {"label" : "validateDiscard", "tail" : "(in: => Iterable[A])(f: (A) => ZIO[R, E, Any])(ev: CanFail[E]): ZIO[R, ::[E], Unit]", "member" : "zio.ZIO.validateDiscard", "link" : "zio\/ZIO$.html#validateDiscard[R,E,A](in:=>Iterable[A])(f:A=>zio.ZIO[R,E,Any])(implicitev:zio.CanFail[E]):zio.ZIO[R,::[E],Unit]", "kind" : "def"}, {"label" : "validate_", "tail" : "(in: => Iterable[A])(f: (A) => ZIO[R, E, Any])(ev: CanFail[E]): ZIO[R, ::[E], Unit]", "member" : "zio.ZIO.validate_", "link" : "zio\/ZIO$.html#validate_[R,E,A](in:=>Iterable[A])(f:A=>zio.ZIO[R,E,Any])(implicitev:zio.CanFail[E]):zio.ZIO[R,::[E],Unit]", "kind" : "def"}, {"label" : "validate", "tail" : "(in: NonEmptyChunk[A])(f: (A) => ZIO[R, E, B])(ev: CanFail[E]): ZIO[R, ::[E], NonEmptyChunk[B]]", "member" : "zio.ZIO.validate", "link" : "zio\/ZIO$.html#validate[R,E,A,B](in:zio.NonEmptyChunk[A])(f:A=>zio.ZIO[R,E,B])(implicitev:zio.CanFail[E]):zio.ZIO[R,::[E],zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "validate", "tail" : "(in: Collection[A])(f: (A) => ZIO[R, E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]], ev: CanFail[E]): ZIO[R, ::[E], Collection[B]]", "member" : "zio.ZIO.validate", "link" : "zio\/ZIO$.html#validate[R,E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.ZIO[R,E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]],implicitev:zio.CanFail[E]):zio.ZIO[R,::[E],Collection[B]]", "kind" : "def"}, {"label" : "updateState", "tail" : "(f: (S) => S)(arg0: zio.Tag[S]): ZIO[Has[ZState[S]], Nothing, Unit]", "member" : "zio.ZIO.updateState", "link" : "zio\/ZIO$.html#updateState[S](f:S=>S)(implicitevidence$19:zio.Tag[S]):zio.ZIO[zio.Has[zio.ZState[S]],Nothing,Unit]", "kind" : "def"}, {"label" : "untraced", "tail" : "(zio: => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.untraced", "link" : "zio\/ZIO$.html#untraced[R,E,A](zio:=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "unshift", "tail" : "(): UIO[Unit]", "member" : "zio.ZIO.unshift", "link" : "zio\/ZIO$.html#unshift:zio.UIO[Unit]", "kind" : "def"}, {"label" : "unsandbox", "tail" : "(v: => ZIO[R, Cause[E], A]): ZIO[R, E, A]", "member" : "zio.ZIO.unsandbox", "link" : "zio\/ZIO$.html#unsandbox[R,E,A](v:=>zio.ZIO[R,zio.Cause[E],A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "unlessZIO", "tail" : "(b: => ZIO[R, E, Boolean]): UnlessZIO[R, E]", "member" : "zio.ZIO.unlessZIO", "link" : "zio\/ZIO$.html#unlessZIO[R,E](b:=>zio.ZIO[R,E,Boolean]):zio.ZIO.UnlessZIO[R,E]", "kind" : "def"}, {"label" : "unlessM", "tail" : "(b: => ZIO[R, E, Boolean]): UnlessZIO[R, E]", "member" : "zio.ZIO.unlessM", "link" : "zio\/ZIO$.html#unlessM[R,E](b:=>zio.ZIO[R,E,Boolean]):zio.ZIO.UnlessZIO[R,E]", "kind" : "def"}, {"label" : "unless", "tail" : "(b: => Boolean)(zio: => ZIO[R, E, A]): ZIO[R, E, Option[A]]", "member" : "zio.ZIO.unless", "link" : "zio\/ZIO$.html#unless[R,E,A](b:=>Boolean)(zio:=>zio.ZIO[R,E,A]):zio.ZIO[R,E,Option[A]]", "kind" : "def"}, {"label" : "uninterruptibleMask", "tail" : "(k: (InterruptStatusRestore) => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.uninterruptibleMask", "link" : "zio\/ZIO$.html#uninterruptibleMask[R,E,A](k:zio.ZIO.InterruptStatusRestore=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "uninterruptible", "tail" : "(zio: => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.uninterruptible", "link" : "zio\/ZIO$.html#uninterruptible[R,E,A](zio:=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "unit", "tail" : ": UIO[Unit]", "member" : "zio.ZIO.unit", "link" : "zio\/ZIO$.html#unit:zio.UIO[Unit]", "kind" : "lazy val"}, {"label" : "transplant", "tail" : "(f: (Grafter) => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.transplant", "link" : "zio\/ZIO$.html#transplant[R,E,A](f:zio.ZIO.Grafter=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "traced", "tail" : "(zio: => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.traced", "link" : "zio\/ZIO$.html#traced[R,E,A](zio:=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "trace", "tail" : "(): UIO[ZTrace]", "member" : "zio.ZIO.trace", "link" : "zio\/ZIO$.html#trace:zio.UIO[zio.ZTrace]", "kind" : "def"}, {"label" : "suspendWith", "tail" : "(f: (RuntimeConfig, FiberId) => RIO[R, A]): RIO[R, A]", "member" : "zio.ZIO.suspendWith", "link" : "zio\/ZIO$.html#suspendWith[R,A](f:(zio.RuntimeConfig,zio.FiberId)=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "suspendSucceedWith", "tail" : "(f: (RuntimeConfig, FiberId) => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.suspendSucceedWith", "link" : "zio\/ZIO$.html#suspendSucceedWith[R,E,A](f:(zio.RuntimeConfig,zio.FiberId)=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "suspendSucceed", "tail" : "(zio: => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.suspendSucceed", "link" : "zio\/ZIO$.html#suspendSucceed[R,E,A](zio:=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(rio: => RIO[R, A]): RIO[R, A]", "member" : "zio.ZIO.suspend", "link" : "zio\/ZIO$.html#suspend[R,A](rio:=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "succeedWith", "tail" : "(f: (RuntimeConfig, FiberId) => A): UIO[A]", "member" : "zio.ZIO.succeedWith", "link" : "zio\/ZIO$.html#succeedWith[A](f:(zio.RuntimeConfig,zio.FiberId)=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "succeedBlocking", "tail" : "(a: => A): UIO[A]", "member" : "zio.ZIO.succeedBlocking", "link" : "zio\/ZIO$.html#succeedBlocking[A](a:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "succeed", "tail" : "(a: => A): UIO[A]", "member" : "zio.ZIO.succeed", "link" : "zio\/ZIO$.html#succeed[A](a:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "some", "tail" : "(a: => A): UIO[Option[A]]", "member" : "zio.ZIO.some", "link" : "zio\/ZIO$.html#some[A](a:=>A):zio.UIO[Option[A]]", "kind" : "def"}, {"label" : "sleep", "tail" : "(duration: => zio.Duration): URIO[Has[Clock], Unit]", "member" : "zio.ZIO.sleep", "link" : "zio\/ZIO$.html#sleep(duration:=>zio.Duration):zio.URIO[zio.Has[zio.Clock],Unit]", "kind" : "def"}, {"label" : "shift", "tail" : "(executor: => Executor): UIO[Unit]", "member" : "zio.ZIO.shift", "link" : "zio\/ZIO$.html#shift(executor:=>zio.Executor):zio.UIO[Unit]", "kind" : "def"}, {"label" : "serviceWith", "tail" : "(): ServiceWithPartiallyApplied[Service]", "member" : "zio.ZIO.serviceWith", "link" : "zio\/ZIO$.html#serviceWith[Service]:zio.ZIO.ServiceWithPartiallyApplied[Service]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D]): URIO[Has[A] with Has[B] with Has[C] with Has[D], (A, B, C, D)]", "member" : "zio.ZIO.services", "link" : "zio\/ZIO$.html#services[A,B,C,D](implicitevidence$15:zio.Tag[A],implicitevidence$16:zio.Tag[B],implicitevidence$17:zio.Tag[C],implicitevidence$18:zio.Tag[D]):zio.URIO[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D],(A,B,C,D)]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C]): URIO[Has[A] with Has[B] with Has[C], (A, B, C)]", "member" : "zio.ZIO.services", "link" : "zio\/ZIO$.html#services[A,B,C](implicitevidence$12:zio.Tag[A],implicitevidence$13:zio.Tag[B],implicitevidence$14:zio.Tag[C]):zio.URIO[zio.Has[A]withzio.Has[B]withzio.Has[C],(A,B,C)]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B]): URIO[Has[A] with Has[B], (A, B)]", "member" : "zio.ZIO.services", "link" : "zio\/ZIO$.html#services[A,B](implicitevidence$10:zio.Tag[A],implicitevidence$11:zio.Tag[B]):zio.URIO[zio.Has[A]withzio.Has[B],(A,B)]", "kind" : "def"}, {"label" : "serviceAt", "tail" : "(): ServiceAtPartiallyApplied[Service]", "member" : "zio.ZIO.serviceAt", "link" : "zio\/ZIO$.html#serviceAt[Service]:zio.ZIO.ServiceAtPartiallyApplied[Service]", "kind" : "def"}, {"label" : "service", "tail" : "(arg0: zio.Tag[A]): URIO[Has[A], A]", "member" : "zio.ZIO.service", "link" : "zio\/ZIO$.html#service[A](implicitevidence$9:zio.Tag[A]):zio.URIO[zio.Has[A],A]", "kind" : "def"}, {"label" : "setRuntimeConfig", "tail" : "(runtimeConfig: => RuntimeConfig): UIO[Unit]", "member" : "zio.ZIO.setRuntimeConfig", "link" : "zio\/ZIO$.html#setRuntimeConfig(runtimeConfig:=>zio.RuntimeConfig):zio.UIO[Unit]", "kind" : "def"}, {"label" : "setState", "tail" : "(s: => S)(arg0: zio.Tag[S]): ZIO[Has[ZState[S]], Nothing, Unit]", "member" : "zio.ZIO.setState", "link" : "zio\/ZIO$.html#setState[S](s:=>S)(implicitevidence$8:zio.Tag[S]):zio.ZIO[zio.Has[zio.ZState[S]],Nothing,Unit]", "kind" : "def"}, {"label" : "scopeWith", "tail" : "(f: (ZScope[Exit[Any, Any]]) => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.scopeWith", "link" : "zio\/ZIO$.html#scopeWith[R,E,A](f:zio.ZScope[zio.Exit[Any,Any]]=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "runtimeConfig", "tail" : ": UIO[RuntimeConfig]", "member" : "zio.ZIO.runtimeConfig", "link" : "zio\/ZIO$.html#runtimeConfig:zio.UIO[zio.RuntimeConfig]", "kind" : "val"}, {"label" : "runtime", "tail" : "(): URIO[R, Runtime[R]]", "member" : "zio.ZIO.runtime", "link" : "zio\/ZIO$.html#runtime[R]:zio.URIO[R,zio.Runtime[R]]", "kind" : "def"}, {"label" : "right", "tail" : "(b: => B): UIO[Either[Nothing, B]]", "member" : "zio.ZIO.right", "link" : "zio\/ZIO$.html#right[B](b:=>B):zio.UIO[Either[Nothing,B]]", "kind" : "def"}, {"label" : "reserve", "tail" : "(reservation: => ZIO[R, E, Reservation[R, E, A]])(use: (A) => ZIO[R, E, B]): ZIO[R, E, B]", "member" : "zio.ZIO.reserve", "link" : "zio\/ZIO$.html#reserve[R,E,A,B](reservation:=>zio.ZIO[R,E,zio.Reservation[R,E,A]])(use:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,B]", "kind" : "def"}, {"label" : "require", "tail" : "(error: => E): (ZIO[R, E, Option[A]]) => ZIO[R, E, A]", "member" : "zio.ZIO.require", "link" : "zio\/ZIO$.html#require[R,E,A](error:=>E):zio.ZIO[R,E,Option[A]]=>zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "replicateZIODiscard", "tail" : "(n: => Int)(effect: => ZIO[R, E, A]): ZIO[R, E, Unit]", "member" : "zio.ZIO.replicateZIODiscard", "link" : "zio\/ZIO$.html#replicateZIODiscard[R,E,A](n:=>Int)(effect:=>zio.ZIO[R,E,A]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "replicateZIO", "tail" : "(n: => Int)(effect: => ZIO[R, E, A]): ZIO[R, E, Iterable[A]]", "member" : "zio.ZIO.replicateZIO", "link" : "zio\/ZIO$.html#replicateZIO[R,E,A](n:=>Int)(effect:=>zio.ZIO[R,E,A]):zio.ZIO[R,E,Iterable[A]]", "kind" : "def"}, {"label" : "replicateM_", "tail" : "(n: => Int)(effect: => ZIO[R, E, A]): ZIO[R, E, Unit]", "member" : "zio.ZIO.replicateM_", "link" : "zio\/ZIO$.html#replicateM_[R,E,A](n:=>Int)(effect:=>zio.ZIO[R,E,A]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "replicateM", "tail" : "(n: => Int)(effect: => ZIO[R, E, A]): ZIO[R, E, Iterable[A]]", "member" : "zio.ZIO.replicateM", "link" : "zio\/ZIO$.html#replicateM[R,E,A](n:=>Int)(effect:=>zio.ZIO[R,E,A]):zio.ZIO[R,E,Iterable[A]]", "kind" : "def"}, {"label" : "replicate", "tail" : "(n: Int)(effect: ZIO[R, E, A]): Iterable[ZIO[R, E, A]]", "member" : "zio.ZIO.replicate", "link" : "zio\/ZIO$.html#replicate[R,E,A](n:Int)(effect:zio.ZIO[R,E,A]):Iterable[zio.ZIO[R,E,A]]", "kind" : "def"}, {"label" : "reduceAllParN", "tail" : "(n: => Int)(a0: => ZIO[R, E, A], as0: => Iterable[ZIO[R1, E, A]])(f: (A, A) => A): ZIO[R1, E, A]", "member" : "zio.ZIO.reduceAllParN", "link" : "zio\/ZIO$.html#reduceAllParN[R,R1<:R,E,A](n:=>Int)(a0:=>zio.ZIO[R,E,A],as0:=>Iterable[zio.ZIO[R1,E,A]])(f:(A,A)=>A):zio.ZIO[R1,E,A]", "kind" : "def"}, {"label" : "reduceAllPar", "tail" : "(a0: => ZIO[R, E, A], as0: => Iterable[ZIO[R1, E, A]])(f: (A, A) => A): ZIO[R1, E, A]", "member" : "zio.ZIO.reduceAllPar", "link" : "zio\/ZIO$.html#reduceAllPar[R,R1<:R,E,A](a0:=>zio.ZIO[R,E,A],as0:=>Iterable[zio.ZIO[R1,E,A]])(f:(A,A)=>A):zio.ZIO[R1,E,A]", "kind" : "def"}, {"label" : "reduceAll", "tail" : "(a: => ZIO[R, E, A], as: => Iterable[ZIO[R1, E, A]])(f: (A, A) => A): ZIO[R1, E, A]", "member" : "zio.ZIO.reduceAll", "link" : "zio\/ZIO$.html#reduceAll[R,R1<:R,E,A](a:=>zio.ZIO[R,E,A],as:=>Iterable[zio.ZIO[R1,E,A]])(f:(A,A)=>A):zio.ZIO[R1,E,A]", "kind" : "def"}, {"label" : "raceAll", "tail" : "(zio: => ZIO[R, E, A], ios: => Iterable[ZIO[R1, E, A]]): ZIO[R1, E, A]", "member" : "zio.ZIO.raceAll", "link" : "zio\/ZIO$.html#raceAll[R,R1<:R,E,A](zio:=>zio.ZIO[R,E,A],ios:=>Iterable[zio.ZIO[R1,E,A]]):zio.ZIO[R1,E,A]", "kind" : "def"}, {"label" : "provide", "tail" : "(r: => R): (ZIO[R, E, A]) => IO[E, A]", "member" : "zio.ZIO.provide", "link" : "zio\/ZIO$.html#provide[R,E,A](r:=>R):zio.ZIO[R,E,A]=>zio.IO[E,A]", "kind" : "def"}, {"label" : "partitionParN", "tail" : "(n: => Int)(in: => Iterable[A])(f: (A) => ZIO[R, E, B])(ev: CanFail[E]): ZIO[R, Nothing, (Iterable[E], Iterable[B])]", "member" : "zio.ZIO.partitionParN", "link" : "zio\/ZIO$.html#partitionParN[R,E,A,B](n:=>Int)(in:=>Iterable[A])(f:A=>zio.ZIO[R,E,B])(implicitev:zio.CanFail[E]):zio.ZIO[R,Nothing,(Iterable[E],Iterable[B])]", "kind" : "def"}, {"label" : "partitionPar", "tail" : "(in: => Iterable[A])(f: (A) => ZIO[R, E, B])(ev: CanFail[E]): ZIO[R, Nothing, (Iterable[E], Iterable[B])]", "member" : "zio.ZIO.partitionPar", "link" : "zio\/ZIO$.html#partitionPar[R,E,A,B](in:=>Iterable[A])(f:A=>zio.ZIO[R,E,B])(implicitev:zio.CanFail[E]):zio.ZIO[R,Nothing,(Iterable[E],Iterable[B])]", "kind" : "def"}, {"label" : "partition", "tail" : "(in: => Iterable[A])(f: (A) => ZIO[R, E, B])(ev: CanFail[E]): ZIO[R, Nothing, (Iterable[E], Iterable[B])]", "member" : "zio.ZIO.partition", "link" : "zio\/ZIO$.html#partition[R,E,A,B](in:=>Iterable[A])(f:A=>zio.ZIO[R,E,B])(implicitev:zio.CanFail[E]):zio.ZIO[R,Nothing,(Iterable[E],Iterable[B])]", "kind" : "def"}, {"label" : "onExecutor", "tail" : "(executor: => Executor)(zio: ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.onExecutor", "link" : "zio\/ZIO$.html#onExecutor[R,E,A](executor:=>zio.Executor)(zio:zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "noneOrFailWith", "tail" : "(o: => Option[O])(f: (O) => E): IO[E, Unit]", "member" : "zio.ZIO.noneOrFailWith", "link" : "zio\/ZIO$.html#noneOrFailWith[E,O](o:=>Option[O])(f:O=>E):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "noneOrFail", "tail" : "(o: => Option[E]): IO[E, Unit]", "member" : "zio.ZIO.noneOrFail", "link" : "zio\/ZIO$.html#noneOrFail[E](o:=>Option[E]):zio.IO[E,Unit]", "kind" : "def"}, {"label" : "none", "tail" : ": UIO[Option[Nothing]]", "member" : "zio.ZIO.none", "link" : "zio\/ZIO$.html#none:zio.UIO[Option[Nothing]]", "kind" : "lazy val"}, {"label" : "never", "tail" : ": UIO[Nothing]", "member" : "zio.ZIO.never", "link" : "zio\/ZIO$.html#never:zio.UIO[Nothing]", "kind" : "lazy val"}, {"label" : "mergeAllParN", "tail" : "(n: => Int)(in: => Iterable[ZIO[R, E, A]])(zero: => B)(f: (B, A) => B): ZIO[R, E, B]", "member" : "zio.ZIO.mergeAllParN", "link" : "zio\/ZIO$.html#mergeAllParN[R,E,A,B](n:=>Int)(in:=>Iterable[zio.ZIO[R,E,A]])(zero:=>B)(f:(B,A)=>B):zio.ZIO[R,E,B]", "kind" : "def"}, {"label" : "mergeAllPar", "tail" : "(in: => Iterable[ZIO[R, E, A]])(zero: => B)(f: (B, A) => B): ZIO[R, E, B]", "member" : "zio.ZIO.mergeAllPar", "link" : "zio\/ZIO$.html#mergeAllPar[R,E,A,B](in:=>Iterable[zio.ZIO[R,E,A]])(zero:=>B)(f:(B,A)=>B):zio.ZIO[R,E,B]", "kind" : "def"}, {"label" : "mergeAll", "tail" : "(in: => Iterable[ZIO[R, E, A]])(zero: => B)(f: (B, A) => B): ZIO[R, E, B]", "member" : "zio.ZIO.mergeAll", "link" : "zio\/ZIO$.html#mergeAll[R,E,A,B](in:=>Iterable[zio.ZIO[R,E,A]])(zero:=>B)(f:(B,A)=>B):zio.ZIO[R,E,B]", "kind" : "def"}, {"label" : "memoize", "tail" : "(f: (A) => ZIO[R, E, B]): UIO[(A) => ZIO[R, E, B]]", "member" : "zio.ZIO.memoize", "link" : "zio\/ZIO$.html#memoize[R,E,A,B](f:A=>zio.ZIO[R,E,B]):zio.UIO[A=>zio.ZIO[R,E,B]]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zio1: => ZIO[R, E, A], zio2: => ZIO[R, E, B], zio3: => ZIO[R, E, C], zio4: => ZIO[R, E, D])(f: (A, B, C, D) => F): ZIO[R, E, F]", "member" : "zio.ZIO.mapParN", "link" : "zio\/ZIO$.html#mapParN[R,E,A,B,C,D,F](zio1:=>zio.ZIO[R,E,A],zio2:=>zio.ZIO[R,E,B],zio3:=>zio.ZIO[R,E,C],zio4:=>zio.ZIO[R,E,D])(f:(A,B,C,D)=>F):zio.ZIO[R,E,F]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zio1: => ZIO[R, E, A], zio2: => ZIO[R, E, B], zio3: => ZIO[R, E, C])(f: (A, B, C) => D): ZIO[R, E, D]", "member" : "zio.ZIO.mapParN", "link" : "zio\/ZIO$.html#mapParN[R,E,A,B,C,D](zio1:=>zio.ZIO[R,E,A],zio2:=>zio.ZIO[R,E,B],zio3:=>zio.ZIO[R,E,C])(f:(A,B,C)=>D):zio.ZIO[R,E,D]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zio1: => ZIO[R, E, A], zio2: => ZIO[R, E, B])(f: (A, B) => C): ZIO[R, E, C]", "member" : "zio.ZIO.mapParN", "link" : "zio\/ZIO$.html#mapParN[R,E,A,B,C](zio1:=>zio.ZIO[R,E,A],zio2:=>zio.ZIO[R,E,B])(f:(A,B)=>C):zio.ZIO[R,E,C]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zio1: => ZIO[R, E, A], zio2: => ZIO[R, E, B], zio3: => ZIO[R, E, C], zio4: => ZIO[R, E, D])(f: (A, B, C, D) => F): ZIO[R, E, F]", "member" : "zio.ZIO.mapN", "link" : "zio\/ZIO$.html#mapN[R,E,A,B,C,D,F](zio1:=>zio.ZIO[R,E,A],zio2:=>zio.ZIO[R,E,B],zio3:=>zio.ZIO[R,E,C],zio4:=>zio.ZIO[R,E,D])(f:(A,B,C,D)=>F):zio.ZIO[R,E,F]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zio1: => ZIO[R, E, A], zio2: => ZIO[R, E, B], zio3: => ZIO[R, E, C])(f: (A, B, C) => D): ZIO[R, E, D]", "member" : "zio.ZIO.mapN", "link" : "zio\/ZIO$.html#mapN[R,E,A,B,C,D](zio1:=>zio.ZIO[R,E,A],zio2:=>zio.ZIO[R,E,B],zio3:=>zio.ZIO[R,E,C])(f:(A,B,C)=>D):zio.ZIO[R,E,D]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zio1: => ZIO[R, E, A], zio2: => ZIO[R, E, B])(f: (A, B) => C): ZIO[R, E, C]", "member" : "zio.ZIO.mapN", "link" : "zio\/ZIO$.html#mapN[R,E,A,B,C](zio1:=>zio.ZIO[R,E,A],zio2:=>zio.ZIO[R,E,B])(f:(A,B)=>C):zio.ZIO[R,E,C]", "kind" : "def"}, {"label" : "logWarning", "tail" : "(message: => String): UIO[Unit]", "member" : "zio.ZIO.logWarning", "link" : "zio\/ZIO$.html#logWarning(message:=>String):zio.UIO[Unit]", "kind" : "def"}, {"label" : "logSpan", "tail" : "(label: => String): LogSpan", "member" : "zio.ZIO.logSpan", "link" : "zio\/ZIO$.html#logSpan(label:=>String):zio.ZIO.LogSpan", "kind" : "def"}, {"label" : "logLevel", "tail" : "(level: LogLevel): LogLevel", "member" : "zio.ZIO.logLevel", "link" : "zio\/ZIO$.html#logLevel(level:zio.LogLevel):zio.LogLevel", "kind" : "def"}, {"label" : "logInfo", "tail" : "(message: => String): UIO[Unit]", "member" : "zio.ZIO.logInfo", "link" : "zio\/ZIO$.html#logInfo(message:=>String):zio.UIO[Unit]", "kind" : "def"}, {"label" : "logFatal", "tail" : "(message: => String): UIO[Unit]", "member" : "zio.ZIO.logFatal", "link" : "zio\/ZIO$.html#logFatal(message:=>String):zio.UIO[Unit]", "kind" : "def"}, {"label" : "logErrorCause", "tail" : "(cause: => Cause[Any]): UIO[Unit]", "member" : "zio.ZIO.logErrorCause", "link" : "zio\/ZIO$.html#logErrorCause(cause:=>zio.Cause[Any]):zio.UIO[Unit]", "kind" : "def"}, {"label" : "logError", "tail" : "(message: => String): UIO[Unit]", "member" : "zio.ZIO.logError", "link" : "zio\/ZIO$.html#logError(message:=>String):zio.UIO[Unit]", "kind" : "def"}, {"label" : "logDebug", "tail" : "(message: => String): UIO[Unit]", "member" : "zio.ZIO.logDebug", "link" : "zio\/ZIO$.html#logDebug(message:=>String):zio.UIO[Unit]", "kind" : "def"}, {"label" : "log", "tail" : "(message: => String): UIO[Unit]", "member" : "zio.ZIO.log", "link" : "zio\/ZIO$.html#log(message:=>String):zio.UIO[Unit]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zio1: => ZIO[R, E, A], zio2: => ZIO[R, E, B], zio3: => ZIO[R, E, C], zio4: => ZIO[R, E, D]): ZIO[R, E, (A, B, C, D)]", "member" : "zio.ZIO.tupledPar", "link" : "zio\/ZIO$.html#tupledPar[R,E,A,B,C,D](zio1:=>zio.ZIO[R,E,A],zio2:=>zio.ZIO[R,E,B],zio3:=>zio.ZIO[R,E,C],zio4:=>zio.ZIO[R,E,D]):zio.ZIO[R,E,(A,B,C,D)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zio1: => ZIO[R, E, A], zio2: => ZIO[R, E, B], zio3: => ZIO[R, E, C]): ZIO[R, E, (A, B, C)]", "member" : "zio.ZIO.tupledPar", "link" : "zio\/ZIO$.html#tupledPar[R,E,A,B,C](zio1:=>zio.ZIO[R,E,A],zio2:=>zio.ZIO[R,E,B],zio3:=>zio.ZIO[R,E,C]):zio.ZIO[R,E,(A,B,C)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zio1: => ZIO[R, E, A], zio2: => ZIO[R, E, B]): ZIO[R, E, (A, B)]", "member" : "zio.ZIO.tupledPar", "link" : "zio\/ZIO$.html#tupledPar[R,E,A,B](zio1:=>zio.ZIO[R,E,A],zio2:=>zio.ZIO[R,E,B]):zio.ZIO[R,E,(A,B)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zio1: => ZIO[R, E, A], zio2: => ZIO[R, E, B], zio3: => ZIO[R, E, C], zio4: => ZIO[R, E, D]): ZIO[R, E, (A, B, C, D)]", "member" : "zio.ZIO.tupled", "link" : "zio\/ZIO$.html#tupled[R,E,A,B,C,D](zio1:=>zio.ZIO[R,E,A],zio2:=>zio.ZIO[R,E,B],zio3:=>zio.ZIO[R,E,C],zio4:=>zio.ZIO[R,E,D]):zio.ZIO[R,E,(A,B,C,D)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zio1: => ZIO[R, E, A], zio2: => ZIO[R, E, B], zio3: => ZIO[R, E, C]): ZIO[R, E, (A, B, C)]", "member" : "zio.ZIO.tupled", "link" : "zio\/ZIO$.html#tupled[R,E,A,B,C](zio1:=>zio.ZIO[R,E,A],zio2:=>zio.ZIO[R,E,B],zio3:=>zio.ZIO[R,E,C]):zio.ZIO[R,E,(A,B,C)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zio1: => ZIO[R, E, A], zio2: => ZIO[R, E, B]): ZIO[R, E, (A, B)]", "member" : "zio.ZIO.tupled", "link" : "zio\/ZIO$.html#tupled[R,E,A,B](zio1:=>zio.ZIO[R,E,A],zio2:=>zio.ZIO[R,E,B]):zio.ZIO[R,E,(A,B)]", "kind" : "def"}, {"label" : "not", "tail" : "(effect: => ZIO[R, E, Boolean]): ZIO[R, E, Boolean]", "member" : "zio.ZIO.not", "link" : "zio\/ZIO$.html#not[R,E](effect:=>zio.ZIO[R,E,Boolean]):zio.ZIO[R,E,Boolean]", "kind" : "def"}, {"label" : "loopDiscard", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => ZIO[R, E, Any]): ZIO[R, E, Unit]", "member" : "zio.ZIO.loopDiscard", "link" : "zio\/ZIO$.html#loopDiscard[R,E,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.ZIO[R,E,Any]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "loop_", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => ZIO[R, E, Any]): ZIO[R, E, Unit]", "member" : "zio.ZIO.loop_", "link" : "zio\/ZIO$.html#loop_[R,E,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.ZIO[R,E,Any]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "loop", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => ZIO[R, E, A]): ZIO[R, E, List[A]]", "member" : "zio.ZIO.loop", "link" : "zio\/ZIO$.html#loop[R,E,A,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.ZIO[R,E,A]):zio.ZIO[R,E,List[A]]", "kind" : "def"}, {"label" : "lock", "tail" : "(executor: => Executor)(zio: => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.lock", "link" : "zio\/ZIO$.html#lock[R,E,A](executor:=>zio.Executor)(zio:=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "left", "tail" : "(a: => A): UIO[Either[A, Nothing]]", "member" : "zio.ZIO.left", "link" : "zio\/ZIO$.html#left[A](a:=>A):zio.UIO[Either[A,Nothing]]", "kind" : "def"}, {"label" : "iterate", "tail" : "(initial: => S)(cont: (S) => Boolean)(body: (S) => ZIO[R, E, S]): ZIO[R, E, S]", "member" : "zio.ZIO.iterate", "link" : "zio\/ZIO$.html#iterate[R,E,S](initial:=>S)(cont:S=>Boolean)(body:S=>zio.ZIO[R,E,S]):zio.ZIO[R,E,S]", "kind" : "def"}, {"label" : "interruptibleMask", "tail" : "(k: (InterruptStatusRestore) => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.interruptibleMask", "link" : "zio\/ZIO$.html#interruptibleMask[R,E,A](k:zio.ZIO.InterruptStatusRestore=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "interruptible", "tail" : "(zio: => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.interruptible", "link" : "zio\/ZIO$.html#interruptible[R,E,A](zio:=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "interruptAs", "tail" : "(fiberId: => FiberId): UIO[Nothing]", "member" : "zio.ZIO.interruptAs", "link" : "zio\/ZIO$.html#interruptAs(fiberId:=>zio.FiberId):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "interrupt", "tail" : ": UIO[Nothing]", "member" : "zio.ZIO.interrupt", "link" : "zio\/ZIO$.html#interrupt:zio.UIO[Nothing]", "kind" : "lazy val"}, {"label" : "infinity", "tail" : ": URIO[Has[Clock], Nothing]", "member" : "zio.ZIO.infinity", "link" : "zio\/ZIO$.html#infinity:zio.URIO[zio.Has[zio.Clock],Nothing]", "kind" : "val"}, {"label" : "ifZIO", "tail" : "(b: => ZIO[R, E, Boolean]): IfZIO[R, E]", "member" : "zio.ZIO.ifZIO", "link" : "zio\/ZIO$.html#ifZIO[R,E](b:=>zio.ZIO[R,E,Boolean]):zio.ZIO.IfZIO[R,E]", "kind" : "def"}, {"label" : "ifM", "tail" : "(b: => ZIO[R, E, Boolean]): IfZIO[R, E]", "member" : "zio.ZIO.ifM", "link" : "zio\/ZIO$.html#ifM[R,E](b:=>zio.ZIO[R,E,Boolean]):zio.ZIO.IfZIO[R,E]", "kind" : "def"}, {"label" : "haltWith", "tail" : "(function: (() => ZTrace) => Cause[E]): IO[E, Nothing]", "member" : "zio.ZIO.haltWith", "link" : "zio\/ZIO$.html#haltWith[E](function:(()=>zio.ZTrace)=>zio.Cause[E]):zio.IO[E,Nothing]", "kind" : "def"}, {"label" : "halt", "tail" : "(cause: => Cause[E]): IO[E, Nothing]", "member" : "zio.ZIO.halt", "link" : "zio\/ZIO$.html#halt[E](cause:=>zio.Cause[E]):zio.IO[E,Nothing]", "kind" : "def"}, {"label" : "getStateWith", "tail" : "(): GetStateWithPartiallyApplied[S]", "member" : "zio.ZIO.getStateWith", "link" : "zio\/ZIO$.html#getStateWith[S]:zio.ZIO.GetStateWithPartiallyApplied[S]", "kind" : "def"}, {"label" : "getState", "tail" : "(arg0: zio.Tag[S]): ZIO[Has[ZState[S]], Nothing, S]", "member" : "zio.ZIO.getState", "link" : "zio\/ZIO$.html#getState[S](implicitevidence$7:zio.Tag[S]):zio.ZIO[zio.Has[zio.ZState[S]],Nothing,S]", "kind" : "def"}, {"label" : "getOrFailWith", "tail" : "(e: => E)(v: => Option[A]): IO[E, A]", "member" : "zio.ZIO.getOrFailWith", "link" : "zio\/ZIO$.html#getOrFailWith[E,A](e:=>E)(v:=>Option[A]):zio.IO[E,A]", "kind" : "final def"}, {"label" : "getOrFailUnit", "tail" : "(v: => Option[A]): IO[Unit, A]", "member" : "zio.ZIO.getOrFailUnit", "link" : "zio\/ZIO$.html#getOrFailUnit[A](v:=>Option[A]):zio.IO[Unit,A]", "kind" : "final def"}, {"label" : "getOrFail", "tail" : "(v: => Option[A]): Task[A]", "member" : "zio.ZIO.getOrFail", "link" : "zio\/ZIO$.html#getOrFail[A](v:=>Option[A]):zio.Task[A]", "kind" : "final def"}, {"label" : "forkScopeWith", "tail" : "(f: (ZScope[Exit[Any, Any]]) => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.forkScopeWith", "link" : "zio\/ZIO$.html#forkScopeWith[R,E,A](f:zio.ZScope[zio.Exit[Any,Any]]=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "forkScopeMask", "tail" : "(newScope: => ZScope[Exit[Any, Any]])(f: (ForkScopeRestore) => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.forkScopeMask", "link" : "zio\/ZIO$.html#forkScopeMask[R,E,A](newScope:=>zio.ZScope[zio.Exit[Any,Any]])(f:zio.ZIO.ForkScopeRestore=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "forkScope", "tail" : "(): UIO[ZScope[Exit[Any, Any]]]", "member" : "zio.ZIO.forkScope", "link" : "zio\/ZIO$.html#forkScope:zio.UIO[zio.ZScope[zio.Exit[Any,Any]]]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(value: => Try[A]): Task[A]", "member" : "zio.ZIO.fromTry", "link" : "zio\/ZIO$.html#fromTry[A](value:=>scala.util.Try[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(v: => Option[A]): IO[Option[Nothing], A]", "member" : "zio.ZIO.fromOption", "link" : "zio\/ZIO$.html#fromOption[A](v:=>Option[A]):zio.IO[Option[Nothing],A]", "kind" : "def"}, {"label" : "fromFutureInterrupt", "tail" : "(make: (ExecutionContext) => Future[A]): Task[A]", "member" : "zio.ZIO.fromFutureInterrupt", "link" : "zio\/ZIO$.html#fromFutureInterrupt[A](make:scala.concurrent.ExecutionContext=>scala.concurrent.Future[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromPromiseScala", "tail" : "(promise: => scala.concurrent.Promise[A]): Task[A]", "member" : "zio.ZIO.fromPromiseScala", "link" : "zio\/ZIO$.html#fromPromiseScala[A](promise:=>scala.concurrent.Promise[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromFuture", "tail" : "(make: (ExecutionContext) => Future[A]): Task[A]", "member" : "zio.ZIO.fromFuture", "link" : "zio\/ZIO$.html#fromFuture[A](make:scala.concurrent.ExecutionContext=>scala.concurrent.Future[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromFunctionM", "tail" : "(f: (R) => IO[E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.fromFunctionM", "link" : "zio\/ZIO$.html#fromFunctionM[R,E,A](f:R=>zio.IO[E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "fromFunction", "tail" : "(f: (R) => A): URIO[R, A]", "member" : "zio.ZIO.fromFunction", "link" : "zio\/ZIO$.html#fromFunction[R,A](f:R=>A):zio.URIO[R,A]", "kind" : "def"}, {"label" : "fromFiberZIO", "tail" : "(fiber: => ZIO[R, E, Fiber[E, A]]): ZIO[R, E, A]", "member" : "zio.ZIO.fromFiberZIO", "link" : "zio\/ZIO$.html#fromFiberZIO[R,E,A](fiber:=>zio.ZIO[R,E,zio.Fiber[E,A]]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "fromFiberM", "tail" : "(fiber: IO[E, Fiber[E, A]]): IO[E, A]", "member" : "zio.ZIO.fromFiberM", "link" : "zio\/ZIO$.html#fromFiberM[E,A](fiber:zio.IO[E,zio.Fiber[E,A]]):zio.IO[E,A]", "kind" : "def"}, {"label" : "fromFiber", "tail" : "(fiber: => Fiber[E, A]): IO[E, A]", "member" : "zio.ZIO.fromFiber", "link" : "zio\/ZIO$.html#fromFiber[E,A](fiber:=>zio.Fiber[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "fromEitherCause", "tail" : "(v: => Either[Cause[E], A]): IO[E, A]", "member" : "zio.ZIO.fromEitherCause", "link" : "zio\/ZIO$.html#fromEitherCause[E,A](v:=>Either[zio.Cause[E],A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(v: => Either[E, A]): IO[E, A]", "member" : "zio.ZIO.fromEither", "link" : "zio\/ZIO$.html#fromEither[E,A](v:=>Either[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "from", "tail" : "(input: => Input)(constructor: ZIOConstructor[Nothing, Any, Input]): ZIO[OutEnvironment, OutError, OutSuccess]", "member" : "zio.ZIO.from", "link" : "zio\/ZIO$.html#from[Input](input:=>Input)(implicitconstructor:zio.ZIO.ZIOConstructor[Nothing,Any,Input]):zio.ZIO[constructor.OutEnvironment,constructor.OutError,constructor.OutSuccess]", "kind" : "def"}, {"label" : "forkAllDiscard", "tail" : "(as: => Iterable[ZIO[R, E, A]]): URIO[R, Unit]", "member" : "zio.ZIO.forkAllDiscard", "link" : "zio\/ZIO$.html#forkAllDiscard[R,E,A](as:=>Iterable[zio.ZIO[R,E,A]]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "forkAll_", "tail" : "(as: => Iterable[ZIO[R, E, A]]): URIO[R, Unit]", "member" : "zio.ZIO.forkAll_", "link" : "zio\/ZIO$.html#forkAll_[R,E,A](as:=>Iterable[zio.ZIO[R,E,A]]):zio.URIO[R,Unit]", "kind" : "def"}, {"label" : "forkAll", "tail" : "(as: Collection[ZIO[R, E, A]])(bf: zio.BuildFrom[Collection[ZIO[R, E, A]], A, Collection[A]]): URIO[R, Fiber[E, Collection[A]]]", "member" : "zio.ZIO.forkAll", "link" : "zio\/ZIO$.html#forkAll[R,E,A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.ZIO[R,E,A]])(implicitbf:zio.BuildFrom[Collection[zio.ZIO[R,E,A]],A,Collection[A]]):zio.URIO[R,zio.Fiber[E,Collection[A]]]", "kind" : "def"}, {"label" : "foreachParNDiscard", "tail" : "(n: => Int)(as0: => Iterable[A])(f: (A) => ZIO[R, E, Any]): ZIO[R, E, Unit]", "member" : "zio.ZIO.foreachParNDiscard", "link" : "zio\/ZIO$.html#foreachParNDiscard[R,E,A](n:=>Int)(as0:=>Iterable[A])(f:A=>zio.ZIO[R,E,Any]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "foreachParN_", "tail" : "(n: => Int)(as: => Iterable[A])(f: (A) => ZIO[R, E, Any]): ZIO[R, E, Unit]", "member" : "zio.ZIO.foreachParN_", "link" : "zio\/ZIO$.html#foreachParN_[R,E,A](n:=>Int)(as:=>Iterable[A])(f:A=>zio.ZIO[R,E,Any]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "foreachParN", "tail" : "(n0: => Int)(as: Collection[A])(fn: (A) => ZIO[R, E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): ZIO[R, E, Collection[B]]", "member" : "zio.ZIO.foreachParN", "link" : "zio\/ZIO$.html#foreachParN[R,E,A,B,Collection[+Element]<:Iterable[Element]](n0:=>Int)(as:Collection[A])(fn:A=>zio.ZIO[R,E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.ZIO[R,E,Collection[B]]", "kind" : "def"}, {"label" : "foreachParDiscard", "tail" : "(as0: => Iterable[A])(f: (A) => ZIO[R, E, Any]): ZIO[R, E, Unit]", "member" : "zio.ZIO.foreachParDiscard", "link" : "zio\/ZIO$.html#foreachParDiscard[R,E,A](as0:=>Iterable[A])(f:A=>zio.ZIO[R,E,Any]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "foreachPar_", "tail" : "(as: => Iterable[A])(f: (A) => ZIO[R, E, Any]): ZIO[R, E, Unit]", "member" : "zio.ZIO.foreachPar_", "link" : "zio\/ZIO$.html#foreachPar_[R,E,A](as:=>Iterable[A])(f:A=>zio.ZIO[R,E,Any]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: NonEmptyChunk[A])(fn: (A) => ZIO[R, E, B]): ZIO[R, E, NonEmptyChunk[B]]", "member" : "zio.ZIO.foreachPar", "link" : "zio\/ZIO$.html#foreachPar[R,E,A,B](as:zio.NonEmptyChunk[A])(fn:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,zio.NonEmptyChunk[B]]", "kind" : "final def"}, {"label" : "foreachPar", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => ZIO[R, E, (Key2, Value2)]): ZIO[R, E, Map[Key2, Value2]]", "member" : "zio.ZIO.foreachPar", "link" : "zio\/ZIO$.html#foreachPar[R,E,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.ZIO[R,E,(Key2,Value2)]):zio.ZIO[R,E,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: Array[A])(f: (A) => ZIO[R, E, B])(arg0: ClassTag[B]): ZIO[R, E, Array[B]]", "member" : "zio.ZIO.foreachPar", "link" : "zio\/ZIO$.html#foreachPar[R,E,A,B](as:Array[A])(f:A=>zio.ZIO[R,E,B])(implicitevidence$6:scala.reflect.ClassTag[B]):zio.ZIO[R,E,Array[B]]", "kind" : "final def"}, {"label" : "foreachPar", "tail" : "(as: Set[A])(fn: (A) => ZIO[R, E, B]): ZIO[R, E, Set[B]]", "member" : "zio.ZIO.foreachPar", "link" : "zio\/ZIO$.html#foreachPar[R,E,A,B](as:Set[A])(fn:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,Set[B]]", "kind" : "final def"}, {"label" : "foreachPar", "tail" : "(as: Collection[A])(f: (A) => ZIO[R, E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): ZIO[R, E, Collection[B]]", "member" : "zio.ZIO.foreachPar", "link" : "zio\/ZIO$.html#foreachPar[R,E,A,B,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.ZIO[R,E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.ZIO[R,E,Collection[B]]", "kind" : "def"}, {"label" : "foreachExec", "tail" : "(as: Collection[A])(exec: => ExecutionStrategy)(f: (A) => ZIO[R, E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): ZIO[R, E, Collection[B]]", "member" : "zio.ZIO.foreachExec", "link" : "zio\/ZIO$.html#foreachExec[R,E,A,B,Collection[+Element]<:Iterable[Element]](as:Collection[A])(exec:=>zio.ExecutionStrategy)(f:A=>zio.ZIO[R,E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.ZIO[R,E,Collection[B]]", "kind" : "final def"}, {"label" : "foreachDiscard", "tail" : "(as: => Iterable[A])(f: (A) => ZIO[R, E, Any]): ZIO[R, E, Unit]", "member" : "zio.ZIO.foreachDiscard", "link" : "zio\/ZIO$.html#foreachDiscard[R,E,A](as:=>Iterable[A])(f:A=>zio.ZIO[R,E,Any]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "foreach_", "tail" : "(as: => Iterable[A])(f: (A) => ZIO[R, E, Any]): ZIO[R, E, Unit]", "member" : "zio.ZIO.foreach_", "link" : "zio\/ZIO$.html#foreach_[R,E,A](as:=>Iterable[A])(f:A=>zio.ZIO[R,E,Any]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: NonEmptyChunk[A])(f: (A) => ZIO[R, E, B]): ZIO[R, E, NonEmptyChunk[B]]", "member" : "zio.ZIO.foreach", "link" : "zio\/ZIO$.html#foreach[R,E,A,B](in:zio.NonEmptyChunk[A])(f:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,zio.NonEmptyChunk[B]]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(in: Option[A])(f: (A) => ZIO[R, E, B]): ZIO[R, E, Option[B]]", "member" : "zio.ZIO.foreach", "link" : "zio\/ZIO$.html#foreach[R,E,A,B](in:Option[A])(f:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,Option[B]]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => ZIO[R, E, (Key2, Value2)]): ZIO[R, E, Map[Key2, Value2]]", "member" : "zio.ZIO.foreach", "link" : "zio\/ZIO$.html#foreach[R,E,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.ZIO[R,E,(Key2,Value2)]):zio.ZIO[R,E,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Array[A])(f: (A) => ZIO[R, E, B])(arg0: ClassTag[B]): ZIO[R, E, Array[B]]", "member" : "zio.ZIO.foreach", "link" : "zio\/ZIO$.html#foreach[R,E,A,B](in:Array[A])(f:A=>zio.ZIO[R,E,B])(implicitevidence$5:scala.reflect.ClassTag[B]):zio.ZIO[R,E,Array[B]]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(in: Set[A])(f: (A) => ZIO[R, E, B]): ZIO[R, E, Set[B]]", "member" : "zio.ZIO.foreach", "link" : "zio\/ZIO$.html#foreach[R,E,A,B](in:Set[A])(f:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,Set[B]]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(in: Collection[A])(f: (A) => ZIO[R, E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): ZIO[R, E, Collection[B]]", "member" : "zio.ZIO.foreach", "link" : "zio\/ZIO$.html#foreach[R,E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.ZIO[R,E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.ZIO[R,E,Collection[B]]", "kind" : "def"}, {"label" : "forall", "tail" : "(as: => Iterable[A])(f: (A) => ZIO[R, E, Boolean]): ZIO[R, E, Boolean]", "member" : "zio.ZIO.forall", "link" : "zio\/ZIO$.html#forall[R,E,A](as:=>Iterable[A])(f:A=>zio.ZIO[R,E,Boolean]):zio.ZIO[R,E,Boolean]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(in: => Iterable[A])(zero: => S)(f: (A, S) => ZIO[R, E, S]): ZIO[R, E, S]", "member" : "zio.ZIO.foldRight", "link" : "zio\/ZIO$.html#foldRight[R,E,S,A](in:=>Iterable[A])(zero:=>S)(f:(A,S)=>zio.ZIO[R,E,S]):zio.ZIO[R,E,S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(in: => Iterable[A])(zero: => S)(f: (S, A) => ZIO[R, E, S]): ZIO[R, E, S]", "member" : "zio.ZIO.foldLeft", "link" : "zio\/ZIO$.html#foldLeft[R,E,S,A](in:=>Iterable[A])(zero:=>S)(f:(S,A)=>zio.ZIO[R,E,S]):zio.ZIO[R,E,S]", "kind" : "def"}, {"label" : "flatten", "tail" : "(zio: => ZIO[R, E, ZIO[R, E, A]]): ZIO[R, E, A]", "member" : "zio.ZIO.flatten", "link" : "zio\/ZIO$.html#flatten[R,E,A](zio:=>zio.ZIO[R,E,zio.ZIO[R,E,A]]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "firstSuccessOf", "tail" : "(zio: => ZIO[R, E, A], rest: => Iterable[ZIO[R1, E, A]]): ZIO[R1, E, A]", "member" : "zio.ZIO.firstSuccessOf", "link" : "zio\/ZIO$.html#firstSuccessOf[R,R1<:R,E,A](zio:=>zio.ZIO[R,E,A],rest:=>Iterable[zio.ZIO[R1,E,A]]):zio.ZIO[R1,E,A]", "kind" : "def"}, {"label" : "filterNotPar", "tail" : "(as: Set[A])(f: (A) => ZIO[R, E, Boolean]): ZIO[R, E, Set[A]]", "member" : "zio.ZIO.filterNotPar", "link" : "zio\/ZIO$.html#filterNotPar[R,E,A](as:Set[A])(f:A=>zio.ZIO[R,E,Boolean]):zio.ZIO[R,E,Set[A]]", "kind" : "def"}, {"label" : "filterNotPar", "tail" : "(as: Collection[A])(f: (A) => ZIO[R, E, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): ZIO[R, E, Collection[A]]", "member" : "zio.ZIO.filterNotPar", "link" : "zio\/ZIO$.html#filterNotPar[R,E,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.ZIO[R,E,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.ZIO[R,E,Collection[A]]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Set[A])(f: (A) => ZIO[R, E, Boolean]): ZIO[R, E, Set[A]]", "member" : "zio.ZIO.filterNot", "link" : "zio\/ZIO$.html#filterNot[R,E,A](as:Set[A])(f:A=>zio.ZIO[R,E,Boolean]):zio.ZIO[R,E,Set[A]]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Collection[A])(f: (A) => ZIO[R, E, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): ZIO[R, E, Collection[A]]", "member" : "zio.ZIO.filterNot", "link" : "zio\/ZIO$.html#filterNot[R,E,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.ZIO[R,E,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.ZIO[R,E,Collection[A]]", "kind" : "def"}, {"label" : "filterPar", "tail" : "(as: Set[A])(f: (A) => ZIO[R, E, Boolean]): ZIO[R, E, Set[A]]", "member" : "zio.ZIO.filterPar", "link" : "zio\/ZIO$.html#filterPar[R,E,A](as:Set[A])(f:A=>zio.ZIO[R,E,Boolean]):zio.ZIO[R,E,Set[A]]", "kind" : "def"}, {"label" : "filterPar", "tail" : "(as: Collection[A])(f: (A) => ZIO[R, E, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): ZIO[R, E, Collection[A]]", "member" : "zio.ZIO.filterPar", "link" : "zio\/ZIO$.html#filterPar[R,E,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.ZIO[R,E,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.ZIO[R,E,Collection[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Set[A])(f: (A) => ZIO[R, E, Boolean]): ZIO[R, E, Set[A]]", "member" : "zio.ZIO.filter", "link" : "zio\/ZIO$.html#filter[R,E,A](as:Set[A])(f:A=>zio.ZIO[R,E,Boolean]):zio.ZIO[R,E,Set[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Collection[A])(f: (A) => ZIO[R, E, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): ZIO[R, E, Collection[A]]", "member" : "zio.ZIO.filter", "link" : "zio\/ZIO$.html#filter[R,E,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.ZIO[R,E,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.ZIO[R,E,Collection[A]]", "kind" : "def"}, {"label" : "fiberId", "tail" : ": UIO[FiberId]", "member" : "zio.ZIO.fiberId", "link" : "zio\/ZIO$.html#fiberId:zio.UIO[zio.FiberId]", "kind" : "val"}, {"label" : "failCauseWith", "tail" : "(function: (() => ZTrace) => Cause[E]): IO[E, Nothing]", "member" : "zio.ZIO.failCauseWith", "link" : "zio\/ZIO$.html#failCauseWith[E](function:(()=>zio.ZTrace)=>zio.Cause[E]):zio.IO[E,Nothing]", "kind" : "def"}, {"label" : "failCause", "tail" : "(cause: => Cause[E]): IO[E, Nothing]", "member" : "zio.ZIO.failCause", "link" : "zio\/ZIO$.html#failCause[E](cause:=>zio.Cause[E]):zio.IO[E,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(error: => E): IO[E, Nothing]", "member" : "zio.ZIO.fail", "link" : "zio\/ZIO$.html#fail[E](error:=>E):zio.IO[E,Nothing]", "kind" : "def"}, {"label" : "exists", "tail" : "(as: => Iterable[A])(f: (A) => ZIO[R, E, Boolean]): ZIO[R, E, Boolean]", "member" : "zio.ZIO.exists", "link" : "zio\/ZIO$.html#exists[R,E,A](as:=>Iterable[A])(f:A=>zio.ZIO[R,E,Boolean]):zio.ZIO[R,E,Boolean]", "kind" : "def"}, {"label" : "executor", "tail" : "(): UIO[Executor]", "member" : "zio.ZIO.executor", "link" : "zio\/ZIO$.html#executor:zio.UIO[zio.Executor]", "kind" : "def"}, {"label" : "environment", "tail" : "(): URIO[R, R]", "member" : "zio.ZIO.environment", "link" : "zio\/ZIO$.html#environment[R]:zio.URIO[R,R]", "kind" : "def"}, {"label" : "effectTotalWith", "tail" : "(effect: (Platform, Id) => A): UIO[A]", "member" : "zio.ZIO.effectTotalWith", "link" : "zio\/ZIO$.html#effectTotalWith[A](effect:(zio.internal.Platform,zio.Fiber.Id)=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "effectTotal", "tail" : "(effect: => A): UIO[A]", "member" : "zio.ZIO.effectTotal", "link" : "zio\/ZIO$.html#effectTotal[A](effect:=>A):zio.UIO[A]", "kind" : "def"}, {"label" : "effectSuspendWith", "tail" : "(f: (Platform, Id) => RIO[R, A]): RIO[R, A]", "member" : "zio.ZIO.effectSuspendWith", "link" : "zio\/ZIO$.html#effectSuspendWith[R,A](f:(zio.internal.Platform,zio.Fiber.Id)=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "effectSuspendTotalWith", "tail" : "(f: (Platform, Id) => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.effectSuspendTotalWith", "link" : "zio\/ZIO$.html#effectSuspendTotalWith[R,E,A](f:(zio.internal.Platform,zio.Fiber.Id)=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "effectSuspendTotal", "tail" : "(zio: => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.effectSuspendTotal", "link" : "zio\/ZIO$.html#effectSuspendTotal[R,E,A](zio:=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "effectSuspend", "tail" : "(rio: => RIO[R, A]): RIO[R, A]", "member" : "zio.ZIO.effectSuspend", "link" : "zio\/ZIO$.html#effectSuspend[R,A](rio:=>zio.RIO[R,A]):zio.RIO[R,A]", "kind" : "def"}, {"label" : "effectBlockingInterrupt", "tail" : "(effect: => A): Task[A]", "member" : "zio.ZIO.effectBlockingInterrupt", "link" : "zio\/ZIO$.html#effectBlockingInterrupt[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "effectBlockingIO", "tail" : "(effect: => A): IO[IOException, A]", "member" : "zio.ZIO.effectBlockingIO", "link" : "zio\/ZIO$.html#effectBlockingIO[A](effect:=>A):zio.IO[java.io.IOException,A]", "kind" : "def"}, {"label" : "effectBlockingCancelable", "tail" : "(effect: => A)(cancel: => UIO[Any]): Task[A]", "member" : "zio.ZIO.effectBlockingCancelable", "link" : "zio\/ZIO$.html#effectBlockingCancelable[A](effect:=>A)(cancel:=>zio.UIO[Any]):zio.Task[A]", "kind" : "def"}, {"label" : "effectBlocking", "tail" : "(effect: => A): Task[A]", "member" : "zio.ZIO.effectBlocking", "link" : "zio\/ZIO$.html#effectBlocking[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "effectAsyncMaybe", "tail" : "(register: ((ZIO[R, E, A]) => Unit) => Option[ZIO[R, E, A]], blockingOn: => FiberId): ZIO[R, E, A]", "member" : "zio.ZIO.effectAsyncMaybe", "link" : "zio\/ZIO$.html#effectAsyncMaybe[R,E,A](register:(zio.ZIO[R,E,A]=>Unit)=>Option[zio.ZIO[R,E,A]],blockingOn:=>zio.FiberId):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "effectAsyncM", "tail" : "(register: ((ZIO[R, E, A]) => Unit) => ZIO[R, E, Any]): ZIO[R, E, A]", "member" : "zio.ZIO.effectAsyncM", "link" : "zio\/ZIO$.html#effectAsyncM[R,E,A](register:(zio.ZIO[R,E,A]=>Unit)=>zio.ZIO[R,E,Any]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "effectAsyncInterrupt", "tail" : "(register: ((ZIO[R, E, A]) => Unit) => Either[Canceler[R], ZIO[R, E, A]], blockingOn: => FiberId): ZIO[R, E, A]", "member" : "zio.ZIO.effectAsyncInterrupt", "link" : "zio\/ZIO$.html#effectAsyncInterrupt[R,E,A](register:(zio.ZIO[R,E,A]=>Unit)=>Either[zio.Canceler[R],zio.ZIO[R,E,A]],blockingOn:=>zio.FiberId):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "effectAsync", "tail" : "(register: ((ZIO[R, E, A]) => Unit) => Any, blockingOn: => FiberId): ZIO[R, E, A]", "member" : "zio.ZIO.effectAsync", "link" : "zio\/ZIO$.html#effectAsync[R,E,A](register:(zio.ZIO[R,E,A]=>Unit)=>Any,blockingOn:=>zio.FiberId):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "effect", "tail" : "(effect: => A): Task[A]", "member" : "zio.ZIO.effect", "link" : "zio\/ZIO$.html#effect[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "done", "tail" : "(r: => Exit[E, A]): IO[E, A]", "member" : "zio.ZIO.done", "link" : "zio\/ZIO$.html#done[E,A](r:=>zio.Exit[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "dieMessage", "tail" : "(message: => String): UIO[Nothing]", "member" : "zio.ZIO.dieMessage", "link" : "zio\/ZIO$.html#dieMessage(message:=>String):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(t: => Throwable): UIO[Nothing]", "member" : "zio.ZIO.die", "link" : "zio\/ZIO$.html#die(t:=>Throwable):zio.UIO[Nothing]", "kind" : "def"}, {"label" : "descriptorWith", "tail" : "(f: (Fiber.Descriptor) => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.descriptorWith", "link" : "zio\/ZIO$.html#descriptorWith[R,E,A](f:zio.Fiber.Descriptor=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "descriptor", "tail" : "(): UIO[Fiber.Descriptor]", "member" : "zio.ZIO.descriptor", "link" : "zio\/ZIO$.html#descriptor:zio.UIO[zio.Fiber.Descriptor]", "kind" : "def"}, {"label" : "debug", "tail" : "(value: => Any): UIO[Unit]", "member" : "zio.ZIO.debug", "link" : "zio\/ZIO$.html#debug(value:=>Any):zio.UIO[Unit]", "kind" : "def"}, {"label" : "cond", "tail" : "(predicate: => Boolean, result: => A, error: => E): IO[E, A]", "member" : "zio.ZIO.cond", "link" : "zio\/ZIO$.html#cond[E,A](predicate:=>Boolean,result:=>A,error:=>E):zio.IO[E,A]", "kind" : "def"}, {"label" : "collectParN", "tail" : "(n: => Int)(in: Collection[A])(f: (A) => ZIO[R, Option[E], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): ZIO[R, E, Collection[B]]", "member" : "zio.ZIO.collectParN", "link" : "zio\/ZIO$.html#collectParN[R,E,A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(in:Collection[A])(f:A=>zio.ZIO[R,Option[E],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.ZIO[R,E,Collection[B]]", "kind" : "def"}, {"label" : "collectPar", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => ZIO[R, Option[E], (Key2, Value2)]): ZIO[R, E, Map[Key2, Value2]]", "member" : "zio.ZIO.collectPar", "link" : "zio\/ZIO$.html#collectPar[R,E,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.ZIO[R,Option[E],(Key2,Value2)]):zio.ZIO[R,E,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "collectPar", "tail" : "(in: Collection[A])(f: (A) => ZIO[R, Option[E], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): ZIO[R, E, Collection[B]]", "member" : "zio.ZIO.collectPar", "link" : "zio\/ZIO$.html#collectPar[R,E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.ZIO[R,Option[E],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.ZIO[R,E,Collection[B]]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(as: => Iterable[A])(f: (A) => ZIO[R, E, Option[B]]): ZIO[R, E, Option[B]]", "member" : "zio.ZIO.collectFirst", "link" : "zio\/ZIO$.html#collectFirst[R,E,A,B](as:=>Iterable[A])(f:A=>zio.ZIO[R,E,Option[B]]):zio.ZIO[R,E,Option[B]]", "kind" : "def"}, {"label" : "collectAllWithParN", "tail" : "(n: => Int)(in: Collection[ZIO[R, E, A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[ZIO[R, E, A]], B, Collection[B]]): ZIO[R, E, Collection[B]]", "member" : "zio.ZIO.collectAllWithParN", "link" : "zio\/ZIO$.html#collectAllWithParN[R,E,A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(in:Collection[zio.ZIO[R,E,A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.ZIO[R,E,A]],B,Collection[B]]):zio.ZIO[R,E,Collection[B]]", "kind" : "def"}, {"label" : "collectAllWithPar", "tail" : "(in: Collection[ZIO[R, E, A]])(f: PartialFunction[A, U])(bf: zio.BuildFrom[Collection[ZIO[R, E, A]], U, Collection[U]]): ZIO[R, E, Collection[U]]", "member" : "zio.ZIO.collectAllWithPar", "link" : "zio\/ZIO$.html#collectAllWithPar[R,E,A,U,Collection[+Element]<:Iterable[Element]](in:Collection[zio.ZIO[R,E,A]])(f:PartialFunction[A,U])(implicitbf:zio.BuildFrom[Collection[zio.ZIO[R,E,A]],U,Collection[U]]):zio.ZIO[R,E,Collection[U]]", "kind" : "def"}, {"label" : "collectAllWith", "tail" : "(in: Collection[ZIO[R, E, A]])(f: PartialFunction[A, B])(bf: zio.BuildFrom[Collection[ZIO[R, E, A]], B, Collection[B]]): ZIO[R, E, Collection[B]]", "member" : "zio.ZIO.collectAllWith", "link" : "zio\/ZIO$.html#collectAllWith[R,E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[zio.ZIO[R,E,A]])(f:PartialFunction[A,B])(implicitbf:zio.BuildFrom[Collection[zio.ZIO[R,E,A]],B,Collection[B]]):zio.ZIO[R,E,Collection[B]]", "kind" : "def"}, {"label" : "collectAllSuccessesParN", "tail" : "(n: => Int)(in: Collection[ZIO[R, E, A]])(bf: zio.BuildFrom[Collection[ZIO[R, E, A]], A, Collection[A]]): URIO[R, Collection[A]]", "member" : "zio.ZIO.collectAllSuccessesParN", "link" : "zio\/ZIO$.html#collectAllSuccessesParN[R,E,A,Collection[+Element]<:Iterable[Element]](n:=>Int)(in:Collection[zio.ZIO[R,E,A]])(implicitbf:zio.BuildFrom[Collection[zio.ZIO[R,E,A]],A,Collection[A]]):zio.URIO[R,Collection[A]]", "kind" : "def"}, {"label" : "collectAllSuccessesPar", "tail" : "(in: Collection[ZIO[R, E, A]])(bf: zio.BuildFrom[Collection[ZIO[R, E, A]], A, Collection[A]]): URIO[R, Collection[A]]", "member" : "zio.ZIO.collectAllSuccessesPar", "link" : "zio\/ZIO$.html#collectAllSuccessesPar[R,E,A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.ZIO[R,E,A]])(implicitbf:zio.BuildFrom[Collection[zio.ZIO[R,E,A]],A,Collection[A]]):zio.URIO[R,Collection[A]]", "kind" : "def"}, {"label" : "collectAllSuccesses", "tail" : "(in: Collection[ZIO[R, E, A]])(bf: zio.BuildFrom[Collection[ZIO[R, E, A]], A, Collection[A]]): URIO[R, Collection[A]]", "member" : "zio.ZIO.collectAllSuccesses", "link" : "zio\/ZIO$.html#collectAllSuccesses[R,E,A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.ZIO[R,E,A]])(implicitbf:zio.BuildFrom[Collection[zio.ZIO[R,E,A]],A,Collection[A]]):zio.URIO[R,Collection[A]]", "kind" : "def"}, {"label" : "collectAllParNDiscard", "tail" : "(n: => Int)(as: => Iterable[ZIO[R, E, A]]): ZIO[R, E, Unit]", "member" : "zio.ZIO.collectAllParNDiscard", "link" : "zio\/ZIO$.html#collectAllParNDiscard[R,E,A](n:=>Int)(as:=>Iterable[zio.ZIO[R,E,A]]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "collectAllParN_", "tail" : "(n: => Int)(as: => Iterable[ZIO[R, E, A]]): ZIO[R, E, Unit]", "member" : "zio.ZIO.collectAllParN_", "link" : "zio\/ZIO$.html#collectAllParN_[R,E,A](n:=>Int)(as:=>Iterable[zio.ZIO[R,E,A]]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "collectAllParN", "tail" : "(n: => Int)(as: Collection[ZIO[R, E, A]])(bf: zio.BuildFrom[Collection[ZIO[R, E, A]], A, Collection[A]]): ZIO[R, E, Collection[A]]", "member" : "zio.ZIO.collectAllParN", "link" : "zio\/ZIO$.html#collectAllParN[R,E,A,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.ZIO[R,E,A]])(implicitbf:zio.BuildFrom[Collection[zio.ZIO[R,E,A]],A,Collection[A]]):zio.ZIO[R,E,Collection[A]]", "kind" : "def"}, {"label" : "collectAllParDiscard", "tail" : "(as: => Iterable[ZIO[R, E, A]]): ZIO[R, E, Unit]", "member" : "zio.ZIO.collectAllParDiscard", "link" : "zio\/ZIO$.html#collectAllParDiscard[R,E,A](as:=>Iterable[zio.ZIO[R,E,A]]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "collectAllPar_", "tail" : "(as: => Iterable[ZIO[R, E, A]]): ZIO[R, E, Unit]", "member" : "zio.ZIO.collectAllPar_", "link" : "zio\/ZIO$.html#collectAllPar_[R,E,A](as:=>Iterable[zio.ZIO[R,E,A]]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: NonEmptyChunk[ZIO[R, E, A]]): ZIO[R, E, NonEmptyChunk[A]]", "member" : "zio.ZIO.collectAllPar", "link" : "zio\/ZIO$.html#collectAllPar[R,E,A](as:zio.NonEmptyChunk[zio.ZIO[R,E,A]]):zio.ZIO[R,E,zio.NonEmptyChunk[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Array[ZIO[R, E, A]])(arg0: ClassTag[A]): ZIO[R, E, Array[A]]", "member" : "zio.ZIO.collectAllPar", "link" : "zio\/ZIO$.html#collectAllPar[R,E,A](as:Array[zio.ZIO[R,E,A]])(implicitevidence$4:scala.reflect.ClassTag[A]):zio.ZIO[R,E,Array[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Set[ZIO[R, E, A]]): ZIO[R, E, Set[A]]", "member" : "zio.ZIO.collectAllPar", "link" : "zio\/ZIO$.html#collectAllPar[R,E,A](as:Set[zio.ZIO[R,E,A]]):zio.ZIO[R,E,Set[A]]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Collection[ZIO[R, E, A]])(bf: zio.BuildFrom[Collection[ZIO[R, E, A]], A, Collection[A]]): ZIO[R, E, Collection[A]]", "member" : "zio.ZIO.collectAllPar", "link" : "zio\/ZIO$.html#collectAllPar[R,E,A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.ZIO[R,E,A]])(implicitbf:zio.BuildFrom[Collection[zio.ZIO[R,E,A]],A,Collection[A]]):zio.ZIO[R,E,Collection[A]]", "kind" : "def"}, {"label" : "collectAllDiscard", "tail" : "(in: => Iterable[ZIO[R, E, A]]): ZIO[R, E, Unit]", "member" : "zio.ZIO.collectAllDiscard", "link" : "zio\/ZIO$.html#collectAllDiscard[R,E,A](in:=>Iterable[zio.ZIO[R,E,A]]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "collectAll_", "tail" : "(in: => Iterable[ZIO[R, E, A]]): ZIO[R, E, Unit]", "member" : "zio.ZIO.collectAll_", "link" : "zio\/ZIO$.html#collectAll_[R,E,A](in:=>Iterable[zio.ZIO[R,E,A]]):zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: NonEmptyChunk[ZIO[R, E, A]]): ZIO[R, E, NonEmptyChunk[A]]", "member" : "zio.ZIO.collectAll", "link" : "zio\/ZIO$.html#collectAll[R,E,A](in:zio.NonEmptyChunk[zio.ZIO[R,E,A]]):zio.ZIO[R,E,zio.NonEmptyChunk[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Option[ZIO[R, E, A]]): ZIO[R, E, Option[A]]", "member" : "zio.ZIO.collectAll", "link" : "zio\/ZIO$.html#collectAll[R,E,A](in:Option[zio.ZIO[R,E,A]]):zio.ZIO[R,E,Option[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Array[ZIO[R, E, A]])(arg0: ClassTag[A]): ZIO[R, E, Array[A]]", "member" : "zio.ZIO.collectAll", "link" : "zio\/ZIO$.html#collectAll[R,E,A](in:Array[zio.ZIO[R,E,A]])(implicitevidence$3:scala.reflect.ClassTag[A]):zio.ZIO[R,E,Array[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Set[ZIO[R, E, A]]): ZIO[R, E, Set[A]]", "member" : "zio.ZIO.collectAll", "link" : "zio\/ZIO$.html#collectAll[R,E,A](in:Set[zio.ZIO[R,E,A]]):zio.ZIO[R,E,Set[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Collection[ZIO[R, E, A]])(bf: zio.BuildFrom[Collection[ZIO[R, E, A]], A, Collection[A]]): ZIO[R, E, Collection[A]]", "member" : "zio.ZIO.collectAll", "link" : "zio\/ZIO$.html#collectAll[R,E,A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.ZIO[R,E,A]])(implicitbf:zio.BuildFrom[Collection[zio.ZIO[R,E,A]],A,Collection[A]]):zio.ZIO[R,E,Collection[A]]", "kind" : "def"}, {"label" : "collect", "tail" : "(map: Map[Key, Value])(f: (Key, Value) => ZIO[R, Option[E], (Key2, Value2)]): ZIO[R, E, Map[Key2, Value2]]", "member" : "zio.ZIO.collect", "link" : "zio\/ZIO$.html#collect[R,E,Key,Key2,Value,Value2](map:Map[Key,Value])(f:(Key,Value)=>zio.ZIO[R,Option[E],(Key2,Value2)]):zio.ZIO[R,E,Map[Key2,Value2]]", "kind" : "def"}, {"label" : "collect", "tail" : "(in: Collection[A])(f: (A) => ZIO[R, Option[E], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): ZIO[R, E, Collection[B]]", "member" : "zio.ZIO.collect", "link" : "zio\/ZIO$.html#collect[R,E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.ZIO[R,Option[E],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.ZIO[R,E,Collection[B]]", "kind" : "def"}, {"label" : "checkTraced", "tail" : "(f: (zio.TracingStatus) => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.checkTraced", "link" : "zio\/ZIO$.html#checkTraced[R,E,A](f:zio.TracingStatus=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "checkInterruptible", "tail" : "(f: (zio.InterruptStatus) => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.checkInterruptible", "link" : "zio\/ZIO$.html#checkInterruptible[R,E,A](f:zio.InterruptStatus=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "bracketExit", "tail" : "(acquire: => ZIO[R, E, A], release: (A, Exit[E, B]) => URIO[R, Any], use: (A) => ZIO[R, E, B]): ZIO[R, E, B]", "member" : "zio.ZIO.bracketExit", "link" : "zio\/ZIO$.html#bracketExit[R,E,A,B](acquire:=>zio.ZIO[R,E,A],release:(A,zio.Exit[E,B])=>zio.URIO[R,Any],use:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,B]", "kind" : "def"}, {"label" : "bracketExit", "tail" : "(acquire: => ZIO[R, E, A]): BracketExitAcquire[R, E, A]", "member" : "zio.ZIO.bracketExit", "link" : "zio\/ZIO$.html#bracketExit[R,E,A](acquire:=>zio.ZIO[R,E,A]):zio.ZIO.BracketExitAcquire[R,E,A]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: => ZIO[R, E, A], release: (A) => URIO[R, Any], use: (A) => ZIO[R, E, B]): ZIO[R, E, B]", "member" : "zio.ZIO.bracket", "link" : "zio\/ZIO$.html#bracket[R,E,A,B](acquire:=>zio.ZIO[R,E,A],release:A=>zio.URIO[R,Any],use:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: => ZIO[R, E, A]): BracketAcquire[R, E, A]", "member" : "zio.ZIO.bracket", "link" : "zio\/ZIO$.html#bracket[R,E,A](acquire:=>zio.ZIO[R,E,A]):zio.ZIO.BracketAcquire[R,E,A]", "kind" : "def"}, {"label" : "blockingExecutor", "tail" : "(): UIO[Executor]", "member" : "zio.ZIO.blockingExecutor", "link" : "zio\/ZIO$.html#blockingExecutor:zio.UIO[zio.Executor]", "kind" : "def"}, {"label" : "blocking", "tail" : "(zio: => ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIO.blocking", "link" : "zio\/ZIO$.html#blocking[R,E,A](zio:=>zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "attemptBlockingInterrupt", "tail" : "(effect: => A): Task[A]", "member" : "zio.ZIO.attemptBlockingInterrupt", "link" : "zio\/ZIO$.html#attemptBlockingInterrupt[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "attemptBlockingIO", "tail" : "(effect: => A): IO[IOException, A]", "member" : "zio.ZIO.attemptBlockingIO", "link" : "zio\/ZIO$.html#attemptBlockingIO[A](effect:=>A):zio.IO[java.io.IOException,A]", "kind" : "def"}, {"label" : "attemptBlockingCancelable", "tail" : "(effect: => A)(cancel: => UIO[Any]): Task[A]", "member" : "zio.ZIO.attemptBlockingCancelable", "link" : "zio\/ZIO$.html#attemptBlockingCancelable[A](effect:=>A)(cancel:=>zio.UIO[Any]):zio.Task[A]", "kind" : "def"}, {"label" : "attemptBlocking", "tail" : "(effect: => A): Task[A]", "member" : "zio.ZIO.attemptBlocking", "link" : "zio\/ZIO$.html#attemptBlocking[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(effect: => A): Task[A]", "member" : "zio.ZIO.attempt", "link" : "zio\/ZIO$.html#attempt[A](effect:=>A):zio.Task[A]", "kind" : "def"}, {"label" : "asyncMaybe", "tail" : "(register: ((ZIO[R, E, A]) => Unit) => Option[ZIO[R, E, A]], blockingOn: => FiberId): ZIO[R, E, A]", "member" : "zio.ZIO.asyncMaybe", "link" : "zio\/ZIO$.html#asyncMaybe[R,E,A](register:(zio.ZIO[R,E,A]=>Unit)=>Option[zio.ZIO[R,E,A]],blockingOn:=>zio.FiberId):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "asyncZIO", "tail" : "(register: ((ZIO[R, E, A]) => Unit) => ZIO[R, E, Any]): ZIO[R, E, A]", "member" : "zio.ZIO.asyncZIO", "link" : "zio\/ZIO$.html#asyncZIO[R,E,A](register:(zio.ZIO[R,E,A]=>Unit)=>zio.ZIO[R,E,Any]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "asyncInterrupt", "tail" : "(register: ((ZIO[R, E, A]) => Unit) => Either[Canceler[R], ZIO[R, E, A]], blockingOn: => FiberId): ZIO[R, E, A]", "member" : "zio.ZIO.asyncInterrupt", "link" : "zio\/ZIO$.html#asyncInterrupt[R,E,A](register:(zio.ZIO[R,E,A]=>Unit)=>Either[zio.Canceler[R],zio.ZIO[R,E,A]],blockingOn:=>zio.FiberId):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "async", "tail" : "(register: ((ZIO[R, E, A]) => Unit) => Any, blockingOn: => FiberId): ZIO[R, E, A]", "member" : "zio.ZIO.async", "link" : "zio\/ZIO$.html#async[R,E,A](register:(zio.ZIO[R,E,A]=>Unit)=>Any,blockingOn:=>zio.FiberId):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "allowInterrupt", "tail" : "(): UIO[Unit]", "member" : "zio.ZIO.allowInterrupt", "link" : "zio\/ZIO$.html#allowInterrupt:zio.UIO[Unit]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: => ZIO[R, E, A], release: (A, Exit[E, B]) => URIO[R, Any], use: (A) => ZIO[R, E, B]): ZIO[R, E, B]", "member" : "zio.ZIO.acquireReleaseExitWith", "link" : "zio\/ZIO$.html#acquireReleaseExitWith[R,E,A,B](acquire:=>zio.ZIO[R,E,A],release:(A,zio.Exit[E,B])=>zio.URIO[R,Any],use:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,B]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: => ZIO[R, E, A]): BracketExitAcquire[R, E, A]", "member" : "zio.ZIO.acquireReleaseExitWith", "link" : "zio\/ZIO$.html#acquireReleaseExitWith[R,E,A](acquire:=>zio.ZIO[R,E,A]):zio.ZIO.BracketExitAcquire[R,E,A]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: => ZIO[R, E, A], release: (A) => URIO[R, Any], use: (A) => ZIO[R, E, B]): ZIO[R, E, B]", "member" : "zio.ZIO.acquireReleaseWith", "link" : "zio\/ZIO$.html#acquireReleaseWith[R,E,A,B](acquire:=>zio.ZIO[R,E,A],release:A=>zio.URIO[R,Any],use:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,B]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: => ZIO[R, E, A]): BracketAcquire[R, E, A]", "member" : "zio.ZIO.acquireReleaseWith", "link" : "zio\/ZIO$.html#acquireReleaseWith[R,E,A](acquire:=>zio.ZIO[R,E,A]):zio.ZIO.BracketAcquire[R,E,A]", "kind" : "def"}, {"label" : "accessZIO", "tail" : "(): AccessZIOPartiallyApplied[R]", "member" : "zio.ZIO.accessZIO", "link" : "zio\/ZIO$.html#accessZIO[R]:zio.ZIO.AccessZIOPartiallyApplied[R]", "kind" : "def"}, {"label" : "accessM", "tail" : "(): AccessZIOPartiallyApplied[R]", "member" : "zio.ZIO.accessM", "link" : "zio\/ZIO$.html#accessM[R]:zio.ZIO.AccessZIOPartiallyApplied[R]", "kind" : "def"}, {"label" : "access", "tail" : "(): AccessPartiallyApplied[R]", "member" : "zio.ZIO.access", "link" : "zio\/ZIO$.html#access[R]:zio.ZIO.AccessPartiallyApplied[R]", "kind" : "def"}, {"label" : "absolve", "tail" : "(v: => ZIO[R, E, Either[E, A]]): ZIO[R, E, A]", "member" : "zio.ZIO.absolve", "link" : "zio\/ZIO$.html#absolve[R,E,A](v:=>zio.ZIO[R,E,Either[E,A]]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "fromFutureJava", "tail" : "(future: => Future[A]): Task[A]", "member" : "zio.ZIOCompanionPlatformSpecific.fromFutureJava", "link" : "zio\/ZIO$.html#fromFutureJava[A](future:=>java.util.concurrent.Future[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromCompletableFuture", "tail" : "(cs: => CompletableFuture[A]): Task[A]", "member" : "zio.ZIOCompanionPlatformSpecific.fromCompletableFuture", "link" : "zio\/ZIO$.html#fromCompletableFuture[A](cs:=>java.util.concurrent.CompletableFuture[A]):zio.Task[A]", "kind" : "def"}, {"label" : "fromCompletionStage", "tail" : "(cs: => CompletionStage[A]): Task[A]", "member" : "zio.ZIOCompanionPlatformSpecific.fromCompletionStage", "link" : "zio\/ZIO$.html#fromCompletionStage[A](cs:=>java.util.concurrent.CompletionStage[A]):zio.Task[A]", "kind" : "def"}, {"label" : "effectAsyncWithCompletionHandler", "tail" : "(op: (CompletionHandler[T, Any]) => Any): Task[T]", "member" : "zio.ZIOCompanionPlatformSpecific.effectAsyncWithCompletionHandler", "link" : "zio\/ZIO$.html#effectAsyncWithCompletionHandler[T](op:java.nio.channels.CompletionHandler[T,Any]=>Any):zio.Task[T]", "kind" : "def"}, {"label" : "asyncWithCompletionHandler", "tail" : "(op: (CompletionHandler[T, Any]) => Any): Task[T]", "member" : "zio.ZIOCompanionPlatformSpecific.asyncWithCompletionHandler", "link" : "zio\/ZIO$.html#asyncWithCompletionHandler[T](op:java.nio.channels.CompletionHandler[T,Any]=>Any):zio.Task[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZIO$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZIO$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZIO$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZIO$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZIO$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZIO$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZIO$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIO$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIO$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIO$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZIO$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZIO$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZIO$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZIO$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZIO$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZIO$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZIO$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZIO$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZIO$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/ZIO.html", "kind" : "trait", "members_trait" : [{"label" : "zipWithPar", "tail" : "(that: => ZIO[R1, E1, B])(f: (A, B) => C): ZIO[R1, E1, C]", "member" : "zio.ZIO.zipWithPar", "link" : "zio\/ZIO.html#zipWithPar[R1<:R,E1>:E,B,C](that:=>zio.ZIO[R1,E1,B])(f:(A,B)=>C):zio.ZIO[R1,E1,C]", "kind" : "final def"}, {"label" : "zipWith", "tail" : "(that: => ZIO[R1, E1, B])(f: (A, B) => C): ZIO[R1, E1, C]", "member" : "zio.ZIO.zipWith", "link" : "zio\/ZIO.html#zipWith[R1<:R,E1>:E,B,C](that:=>zio.ZIO[R1,E1,B])(f:(A,B)=>C):zio.ZIO[R1,E1,C]", "kind" : "final def"}, {"label" : "zipRight", "tail" : "(that: => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZIO.zipRight", "link" : "zio\/ZIO.html#zipRight[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "zipParRight", "tail" : "(that: => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZIO.zipParRight", "link" : "zio\/ZIO.html#zipParRight[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "zipParLeft", "tail" : "(that: => ZIO[R1, E1, B]): ZIO[R1, E1, A]", "member" : "zio.ZIO.zipParLeft", "link" : "zio\/ZIO.html#zipParLeft[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,A]", "kind" : "final def"}, {"label" : "zipPar", "tail" : "(that: => ZIO[R1, E1, B])(zippable: Zippable[A, B]): ZIO[R1, E1, Out]", "member" : "zio.ZIO.zipPar", "link" : "zio\/ZIO.html#zipPar[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B])(implicitzippable:zio.Zippable[A,B]):zio.ZIO[R1,E1,zippable.Out]", "kind" : "final def"}, {"label" : "zipLeft", "tail" : "(that: => ZIO[R1, E1, B]): ZIO[R1, E1, A]", "member" : "zio.ZIO.zipLeft", "link" : "zio\/ZIO.html#zipLeft[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,A]", "kind" : "final def"}, {"label" : "zip", "tail" : "(that: => ZIO[R1, E1, B])(zippable: Zippable[A, B]): ZIO[R1, E1, Out]", "member" : "zio.ZIO.zip", "link" : "zio\/ZIO.html#zip[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B])(implicitzippable:zio.Zippable[A,B]):zio.ZIO[R1,E1,zippable.Out]", "kind" : "final def"}, {"label" : "withRuntimeConfig", "tail" : "(runtimeConfig: => RuntimeConfig): ZIO[R, E, A]", "member" : "zio.ZIO.withRuntimeConfig", "link" : "zio\/ZIO.html#withRuntimeConfig(runtimeConfig:=>zio.RuntimeConfig):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "whenZIO", "tail" : "(b: => ZIO[R1, E1, Boolean]): ZIO[R1, E1, Option[A]]", "member" : "zio.ZIO.whenZIO", "link" : "zio\/ZIO.html#whenZIO[R1<:R,E1>:E](b:=>zio.ZIO[R1,E1,Boolean]):zio.ZIO[R1,E1,Option[A]]", "kind" : "final def"}, {"label" : "whenM", "tail" : "(b: => ZIO[R1, E1, Boolean]): ZIO[R1, E1, Option[A]]", "member" : "zio.ZIO.whenM", "link" : "zio\/ZIO.html#whenM[R1<:R,E1>:E](b:=>zio.ZIO[R1,E1,Boolean]):zio.ZIO[R1,E1,Option[A]]", "kind" : "final def"}, {"label" : "when", "tail" : "(b: => Boolean): ZIO[R, E, Option[A]]", "member" : "zio.ZIO.when", "link" : "zio\/ZIO.html#when(b:=>Boolean):zio.ZIO[R,E,Option[A]]", "kind" : "final def"}, {"label" : "validateWithPar", "tail" : "(that: => ZIO[R1, E1, B])(f: (A, B) => C): ZIO[R1, E1, C]", "member" : "zio.ZIO.validateWithPar", "link" : "zio\/ZIO.html#validateWithPar[R1<:R,E1>:E,B,C](that:=>zio.ZIO[R1,E1,B])(f:(A,B)=>C):zio.ZIO[R1,E1,C]", "kind" : "final def"}, {"label" : "validateWith", "tail" : "(that: => ZIO[R1, E1, B])(f: (A, B) => C): ZIO[R1, E1, C]", "member" : "zio.ZIO.validateWith", "link" : "zio\/ZIO.html#validateWith[R1<:R,E1>:E,B,C](that:=>zio.ZIO[R1,E1,B])(f:(A,B)=>C):zio.ZIO[R1,E1,C]", "kind" : "final def"}, {"label" : "validatePar", "tail" : "(that: => ZIO[R1, E1, B]): ZIO[R1, E1, (A, B)]", "member" : "zio.ZIO.validatePar", "link" : "zio\/ZIO.html#validatePar[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,(A,B)]", "kind" : "final def"}, {"label" : "validate", "tail" : "(that: => ZIO[R1, E1, B]): ZIO[R1, E1, (A, B)]", "member" : "zio.ZIO.validate", "link" : "zio\/ZIO.html#validate[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,(A,B)]", "kind" : "final def"}, {"label" : "untraced", "tail" : "(): ZIO[R, E, A]", "member" : "zio.ZIO.untraced", "link" : "zio\/ZIO.html#untraced:zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "unsandbox", "tail" : "(ev: IsSubtypeOfError[E, Cause[E1]]): ZIO[R, E1, A]", "member" : "zio.ZIO.unsandbox", "link" : "zio\/ZIO.html#unsandbox[E1](implicitev:zio.IsSubtypeOfError[E,zio.Cause[E1]]):zio.ZIO[R,E1,A]", "kind" : "final def"}, {"label" : "updateServiceAt", "tail" : "(): UpdateServiceAt[R, E, A, Service]", "member" : "zio.ZIO.updateServiceAt", "link" : "zio\/ZIO.html#updateServiceAt[Service]:zio.ZIO.UpdateServiceAt[R,E,A,Service]", "kind" : "final def"}, {"label" : "updateService", "tail" : "(): UpdateService[R, E, A, M]", "member" : "zio.ZIO.updateService", "link" : "zio\/ZIO.html#updateService[M]:zio.ZIO.UpdateService[R,E,A,M]", "kind" : "final def"}, {"label" : "unsome", "tail" : "(ev: IsSubtypeOfError[E, Option[E1]]): ZIO[R, E1, Option[A]]", "member" : "zio.ZIO.unsome", "link" : "zio\/ZIO.html#unsome[E1](implicitev:zio.IsSubtypeOfError[E,Option[E1]]):zio.ZIO[R,E1,Option[A]]", "kind" : "final def"}, {"label" : "unright", "tail" : "(ev: IsSubtypeOfError[E, Either[B, E1]]): ZIO[R, E1, Either[B, A]]", "member" : "zio.ZIO.unright", "link" : "zio\/ZIO.html#unright[E1,B](implicitev:zio.IsSubtypeOfError[E,Either[B,E1]]):zio.ZIO[R,E1,Either[B,A]]", "kind" : "final def"}, {"label" : "unrefineWith", "tail" : "(pf: PartialFunction[Throwable, E1])(f: (E) => E1): ZIO[R, E1, A]", "member" : "zio.ZIO.unrefineWith", "link" : "zio\/ZIO.html#unrefineWith[E1](pf:PartialFunction[Throwable,E1])(f:E=>E1):zio.ZIO[R,E1,A]", "kind" : "final def"}, {"label" : "unrefineTo", "tail" : "(arg0: ClassTag[E1]): ZIO[R, E1, A]", "member" : "zio.ZIO.unrefineTo", "link" : "zio\/ZIO.html#unrefineTo[E1>:E](implicitevidence$2:scala.reflect.ClassTag[E1]):zio.ZIO[R,E1,A]", "kind" : "final def"}, {"label" : "unrefine", "tail" : "(pf: PartialFunction[Throwable, E1]): ZIO[R, E1, A]", "member" : "zio.ZIO.unrefine", "link" : "zio\/ZIO.html#unrefine[E1>:E](pf:PartialFunction[Throwable,E1]):zio.ZIO[R,E1,A]", "kind" : "final def"}, {"label" : "unoption", "tail" : "(ev: IsSubtypeOfError[E, Option[E1]]): ZIO[R, E1, Option[A]]", "member" : "zio.ZIO.unoption", "link" : "zio\/ZIO.html#unoption[E1](implicitev:zio.IsSubtypeOfError[E,Option[E1]]):zio.ZIO[R,E1,Option[A]]", "kind" : "final def"}, {"label" : "unlessZIO", "tail" : "(b: => ZIO[R1, E1, Boolean]): ZIO[R1, E1, Option[A]]", "member" : "zio.ZIO.unlessZIO", "link" : "zio\/ZIO.html#unlessZIO[R1<:R,E1>:E](b:=>zio.ZIO[R1,E1,Boolean]):zio.ZIO[R1,E1,Option[A]]", "kind" : "final def"}, {"label" : "unlessM", "tail" : "(b: => ZIO[R1, E1, Boolean]): ZIO[R1, E1, Option[A]]", "member" : "zio.ZIO.unlessM", "link" : "zio\/ZIO.html#unlessM[R1<:R,E1>:E](b:=>zio.ZIO[R1,E1,Boolean]):zio.ZIO[R1,E1,Option[A]]", "kind" : "final def"}, {"label" : "unless", "tail" : "(b: => Boolean): ZIO[R, E, Option[A]]", "member" : "zio.ZIO.unless", "link" : "zio\/ZIO.html#unless(b:=>Boolean):zio.ZIO[R,E,Option[A]]", "kind" : "final def"}, {"label" : "unleft", "tail" : "(ev: IsSubtypeOfError[E, Either[E1, B]]): ZIO[R, E1, Either[A, B]]", "member" : "zio.ZIO.unleft", "link" : "zio\/ZIO.html#unleft[E1,B](implicitev:zio.IsSubtypeOfError[E,Either[E1,B]]):zio.ZIO[R,E1,Either[A,B]]", "kind" : "final def"}, {"label" : "unit", "tail" : "(): ZIO[R, E, Unit]", "member" : "zio.ZIO.unit", "link" : "zio\/ZIO.html#unit:zio.ZIO[R,E,Unit]", "kind" : "final def"}, {"label" : "uninterruptible", "tail" : "(): ZIO[R, E, A]", "member" : "zio.ZIO.uninterruptible", "link" : "zio\/ZIO.html#uninterruptible:zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "uncause", "tail" : "(ev: IsSubtypeOfOutput[A, Cause[E1]]): ZIO[R, E1, Unit]", "member" : "zio.ZIO.uncause", "link" : "zio\/ZIO.html#uncause[E1>:E](implicitev:zio.IsSubtypeOfOutput[A,zio.Cause[E1]]):zio.ZIO[R,E1,Unit]", "kind" : "final def"}, {"label" : "tracingStatus", "tail" : "(flag: => TracingStatus): ZIO[R, E, A]", "member" : "zio.ZIO.tracingStatus", "link" : "zio\/ZIO.html#tracingStatus(flag:=>zio.TracingStatus):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "traced", "tail" : "(): ZIO[R, E, A]", "member" : "zio.ZIO.traced", "link" : "zio\/ZIO.html#traced:zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "toManaged_", "tail" : "(): ZManaged[R, E, A]", "member" : "zio.ZIO.toManaged_", "link" : "zio\/ZIO.html#toManaged_:zio.ZManaged[R,E,A]", "kind" : "final def"}, {"label" : "toManagedWith", "tail" : "(release: (A) => URIO[R1, Any]): ZManaged[R1, E, A]", "member" : "zio.ZIO.toManagedWith", "link" : "zio\/ZIO.html#toManagedWith[R1<:R](release:A=>zio.URIO[R1,Any]):zio.ZManaged[R1,E,A]", "kind" : "final def"}, {"label" : "toManaged", "tail" : "(): ZManaged[R, E, A]", "member" : "zio.ZIO.toManaged", "link" : "zio\/ZIO.html#toManaged:zio.ZManaged[R,E,A]", "kind" : "final def"}, {"label" : "toLayerMany", "tail" : "(ev: zio.Tag[A1]): ZLayer[R, E, A1]", "member" : "zio.ZIO.toLayerMany", "link" : "zio\/ZIO.html#toLayerMany[A1>:A](implicitev:zio.Tag[A1]):zio.ZLayer[R,E,A1]", "kind" : "final def"}, {"label" : "toLayer", "tail" : "(ev: zio.Tag[A1]): ZLayer[R, E, Has[A1]]", "member" : "zio.ZIO.toLayer", "link" : "zio\/ZIO.html#toLayer[A1>:A](implicitev:zio.Tag[A1]):zio.ZLayer[R,E,zio.Has[A1]]", "kind" : "final def"}, {"label" : "toFutureWith", "tail" : "(f: (E) => Throwable): URIO[R, CancelableFuture[A]]", "member" : "zio.ZIO.toFutureWith", "link" : "zio\/ZIO.html#toFutureWith(f:E=>Throwable):zio.URIO[R,zio.CancelableFuture[A]]", "kind" : "final def"}, {"label" : "toFuture", "tail" : "(ev2: IsSubtypeOfError[E, Throwable]): URIO[R, CancelableFuture[A]]", "member" : "zio.ZIO.toFuture", "link" : "zio\/ZIO.html#toFuture(implicitev2:zio.IsSubtypeOfError[E,Throwable]):zio.URIO[R,zio.CancelableFuture[A]]", "kind" : "final def"}, {"label" : "to", "tail" : "(p: => Promise[E1, A1]): URIO[R, Boolean]", "member" : "zio.ZIO.to", "link" : "zio\/ZIO.html#to[E1>:E,A1>:A](p:=>zio.Promise[E1,A1]):zio.URIO[R,Boolean]", "kind" : "final def"}, {"label" : "timeoutTo", "tail" : "(b: => B): TimeoutTo[R, E, A, B]", "member" : "zio.ZIO.timeoutTo", "link" : "zio\/ZIO.html#timeoutTo[B](b:=>B):zio.ZIO.TimeoutTo[R,E,A,B]", "kind" : "final def"}, {"label" : "timeoutHalt", "tail" : "(cause: => Cause[E1])(d: => zio.Duration): ZIO[R with Has[Clock], E1, A]", "member" : "zio.ZIO.timeoutHalt", "link" : "zio\/ZIO.html#timeoutHalt[E1>:E](cause:=>zio.Cause[E1])(d:=>zio.Duration):zio.ZIO[Rwithzio.Has[zio.Clock],E1,A]", "kind" : "final def"}, {"label" : "timeoutFailCause", "tail" : "(cause: => Cause[E1])(d: => zio.Duration): ZIO[R with Has[Clock], E1, A]", "member" : "zio.ZIO.timeoutFailCause", "link" : "zio\/ZIO.html#timeoutFailCause[E1>:E](cause:=>zio.Cause[E1])(d:=>zio.Duration):zio.ZIO[Rwithzio.Has[zio.Clock],E1,A]", "kind" : "final def"}, {"label" : "timeoutFail", "tail" : "(e: => E1)(d: => zio.Duration): ZIO[R with Has[Clock], E1, A]", "member" : "zio.ZIO.timeoutFail", "link" : "zio\/ZIO.html#timeoutFail[E1>:E](e:=>E1)(d:=>zio.Duration):zio.ZIO[Rwithzio.Has[zio.Clock],E1,A]", "kind" : "final def"}, {"label" : "timeout", "tail" : "(d: => zio.Duration): ZIO[R with Has[Clock], E, Option[A]]", "member" : "zio.ZIO.timeout", "link" : "zio\/ZIO.html#timeout(d:=>zio.Duration):zio.ZIO[Rwithzio.Has[zio.Clock],E,Option[A]]", "kind" : "final def"}, {"label" : "timedWith", "tail" : "(nanoTime: => ZIO[R1, E1, Long]): ZIO[R1, E1, (zio.Duration, A)]", "member" : "zio.ZIO.timedWith", "link" : "zio\/ZIO.html#timedWith[R1<:R,E1>:E](nanoTime:=>zio.ZIO[R1,E1,Long]):zio.ZIO[R1,E1,(zio.Duration,A)]", "kind" : "final def"}, {"label" : "timed", "tail" : "(): ZIO[R with Has[Clock], E, (zio.Duration, A)]", "member" : "zio.ZIO.timed", "link" : "zio\/ZIO.html#timed:zio.ZIO[Rwithzio.Has[zio.Clock],E,(zio.Duration,A)]", "kind" : "final def"}, {"label" : "tapSome", "tail" : "(f: PartialFunction[A, ZIO[R1, E1, Any]]): ZIO[R1, E1, A]", "member" : "zio.ZIO.tapSome", "link" : "zio\/ZIO.html#tapSome[R1<:R,E1>:E](f:PartialFunction[A,zio.ZIO[R1,E1,Any]]):zio.ZIO[R1,E1,A]", "kind" : "final def"}, {"label" : "tapErrorTrace", "tail" : "(f: ((E, Option[ZTrace])) => ZIO[R1, E1, Any])(ev: CanFail[E]): ZIO[R1, E1, A]", "member" : "zio.ZIO.tapErrorTrace", "link" : "zio\/ZIO.html#tapErrorTrace[R1<:R,E1>:E](f:((E,Option[zio.ZTrace]))=>zio.ZIO[R1,E1,Any])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E1,A]", "kind" : "final def"}, {"label" : "tapErrorCause", "tail" : "(f: (Cause[E]) => ZIO[R1, E1, Any]): ZIO[R1, E1, A]", "member" : "zio.ZIO.tapErrorCause", "link" : "zio\/ZIO.html#tapErrorCause[R1<:R,E1>:E](f:zio.Cause[E]=>zio.ZIO[R1,E1,Any]):zio.ZIO[R1,E1,A]", "kind" : "final def"}, {"label" : "tapError", "tail" : "(f: (E) => ZIO[R1, E1, Any])(ev: CanFail[E]): ZIO[R1, E1, A]", "member" : "zio.ZIO.tapError", "link" : "zio\/ZIO.html#tapError[R1<:R,E1>:E](f:E=>zio.ZIO[R1,E1,Any])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E1,A]", "kind" : "final def"}, {"label" : "tapEither", "tail" : "(f: (Either[E, A]) => ZIO[R1, E1, Any])(ev: CanFail[E]): ZIO[R1, E1, A]", "member" : "zio.ZIO.tapEither", "link" : "zio\/ZIO.html#tapEither[R1<:R,E1>:E](f:Either[E,A]=>zio.ZIO[R1,E1,Any])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E1,A]", "kind" : "final def"}, {"label" : "tapDefect", "tail" : "(f: (Cause[Nothing]) => ZIO[R1, E1, Any]): ZIO[R1, E1, A]", "member" : "zio.ZIO.tapDefect", "link" : "zio\/ZIO.html#tapDefect[R1<:R,E1>:E](f:zio.Cause[Nothing]=>zio.ZIO[R1,E1,Any]):zio.ZIO[R1,E1,A]", "kind" : "final def"}, {"label" : "tapCause", "tail" : "(f: (Cause[E]) => ZIO[R1, E1, Any]): ZIO[R1, E1, A]", "member" : "zio.ZIO.tapCause", "link" : "zio\/ZIO.html#tapCause[R1<:R,E1>:E](f:zio.Cause[E]=>zio.ZIO[R1,E1,Any]):zio.ZIO[R1,E1,A]", "kind" : "final def"}, {"label" : "tapBoth", "tail" : "(f: (E) => ZIO[R1, E1, Any], g: (A) => ZIO[R1, E1, Any])(ev: CanFail[E]): ZIO[R1, E1, A]", "member" : "zio.ZIO.tapBoth", "link" : "zio\/ZIO.html#tapBoth[R1<:R,E1>:E](f:E=>zio.ZIO[R1,E1,Any],g:A=>zio.ZIO[R1,E1,Any])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E1,A]", "kind" : "final def"}, {"label" : "tap", "tail" : "(f: (A) => ZIO[R1, E1, Any]): ZIO[R1, E1, A]", "member" : "zio.ZIO.tap", "link" : "zio\/ZIO.html#tap[R1<:R,E1>:E](f:A=>zio.ZIO[R1,E1,Any]):zio.ZIO[R1,E1,A]", "kind" : "final def"}, {"label" : "supervised", "tail" : "(supervisor: => Supervisor[Any]): ZIO[R, E, A]", "member" : "zio.ZIO.supervised", "link" : "zio\/ZIO.html#supervised(supervisor:=>zio.Supervisor[Any]):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "summarized", "tail" : "(summary0: => ZIO[R1, E1, B])(f: (B, B) => C): ZIO[R1, E1, (C, A)]", "member" : "zio.ZIO.summarized", "link" : "zio\/ZIO.html#summarized[R1<:R,E1>:E,B,C](summary0:=>zio.ZIO[R1,E1,B])(f:(B,B)=>C):zio.ZIO[R1,E1,(C,A)]", "kind" : "final def"}, {"label" : "sandboxWith", "tail" : "(f: (ZIO[R1, Cause[E], A]) => ZIO[R1, Cause[E2], B]): ZIO[R1, E2, B]", "member" : "zio.ZIO.sandboxWith", "link" : "zio\/ZIO.html#sandboxWith[R1<:R,E2,B](f:zio.ZIO[R1,zio.Cause[E],A]=>zio.ZIO[R1,zio.Cause[E2],B]):zio.ZIO[R1,E2,B]", "kind" : "final def"}, {"label" : "someOrFailException", "tail" : "(ev: IsSubtypeOfOutput[A, Option[B]], ev2: <:<[NoSuchElementException, E1]): ZIO[R, E1, B]", "member" : "zio.ZIO.someOrFailException", "link" : "zio\/ZIO.html#someOrFailException[B,E1>:E](implicitev:zio.IsSubtypeOfOutput[A,Option[B]],implicitev2:NoSuchElementException<:<E1):zio.ZIO[R,E1,B]", "kind" : "final def"}, {"label" : "someOrFail", "tail" : "(e: => E1)(ev: IsSubtypeOfOutput[A, Option[B]]): ZIO[R, E1, B]", "member" : "zio.ZIO.someOrFail", "link" : "zio\/ZIO.html#someOrFail[B,E1>:E](e:=>E1)(implicitev:zio.IsSubtypeOfOutput[A,Option[B]]):zio.ZIO[R,E1,B]", "kind" : "final def"}, {"label" : "someOrElseZIO", "tail" : "(default: => ZIO[R1, E1, B])(ev: IsSubtypeOfOutput[A, Option[B]]): ZIO[R1, E1, B]", "member" : "zio.ZIO.someOrElseZIO", "link" : "zio\/ZIO.html#someOrElseZIO[B,R1<:R,E1>:E](default:=>zio.ZIO[R1,E1,B])(implicitev:zio.IsSubtypeOfOutput[A,Option[B]]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "someOrElseM", "tail" : "(default: => ZIO[R1, E1, B])(ev: IsSubtypeOfOutput[A, Option[B]]): ZIO[R1, E1, B]", "member" : "zio.ZIO.someOrElseM", "link" : "zio\/ZIO.html#someOrElseM[B,R1<:R,E1>:E](default:=>zio.ZIO[R1,E1,B])(implicitev:zio.IsSubtypeOfOutput[A,Option[B]]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "someOrElse", "tail" : "(default: => B)(ev: IsSubtypeOfOutput[A, Option[B]]): ZIO[R, E, B]", "member" : "zio.ZIO.someOrElse", "link" : "zio\/ZIO.html#someOrElse[B](default:=>B)(implicitev:zio.IsSubtypeOfOutput[A,Option[B]]):zio.ZIO[R,E,B]", "kind" : "final def"}, {"label" : "some", "tail" : "(ev: IsSubtypeOfOutput[A, Option[B]]): ZIO[R, Option[E], B]", "member" : "zio.ZIO.some", "link" : "zio\/ZIO.html#some[B](implicitev:zio.IsSubtypeOfOutput[A,Option[B]]):zio.ZIO[R,Option[E],B]", "kind" : "final def"}, {"label" : "scheduleFrom", "tail" : "(a: => A1)(schedule: => Schedule[R1, A1, B]): ZIO[R1 with Has[Clock], E, B]", "member" : "zio.ZIO.scheduleFrom", "link" : "zio\/ZIO.html#scheduleFrom[R1<:R,A1>:A,B](a:=>A1)(schedule:=>zio.Schedule[R1,A1,B]):zio.ZIO[R1withzio.Has[zio.Clock],E,B]", "kind" : "final def"}, {"label" : "schedule", "tail" : "(schedule: => Schedule[R1, Any, B]): ZIO[R1 with Has[Clock], E, B]", "member" : "zio.ZIO.schedule", "link" : "zio\/ZIO.html#schedule[R1<:R,B](schedule:=>zio.Schedule[R1,Any,B]):zio.ZIO[R1withzio.Has[zio.Clock],E,B]", "kind" : "final def"}, {"label" : "sandbox", "tail" : "(): ZIO[R, Cause[E], A]", "member" : "zio.ZIO.sandbox", "link" : "zio\/ZIO.html#sandbox:zio.ZIO[R,zio.Cause[E],A]", "kind" : "final def"}, {"label" : "run", "tail" : "(): URIO[R, Exit[E, A]]", "member" : "zio.ZIO.run", "link" : "zio\/ZIO.html#run:zio.URIO[R,zio.Exit[E,A]]", "kind" : "final def"}, {"label" : "right", "tail" : "(ev: IsSubtypeOfOutput[A, Either[B, C]]): ZIO[R, Either[B, E], C]", "member" : "zio.ZIO.right", "link" : "zio\/ZIO.html#right[B,C](implicitev:zio.IsSubtypeOfOutput[A,Either[B,C]]):zio.ZIO[R,Either[B,E],C]", "kind" : "final def"}, {"label" : "retryWhileZIO", "tail" : "(f: (E) => URIO[R1, Boolean])(ev: CanFail[E]): ZIO[R1, E, A]", "member" : "zio.ZIO.retryWhileZIO", "link" : "zio\/ZIO.html#retryWhileZIO[R1<:R](f:E=>zio.URIO[R1,Boolean])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "retryWhileM", "tail" : "(f: (E) => URIO[R1, Boolean])(ev: CanFail[E]): ZIO[R1, E, A]", "member" : "zio.ZIO.retryWhileM", "link" : "zio\/ZIO.html#retryWhileM[R1<:R](f:E=>zio.URIO[R1,Boolean])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "retryWhileEquals", "tail" : "(e: => E1)(ev: CanFail[E1]): ZIO[R, E1, A]", "member" : "zio.ZIO.retryWhileEquals", "link" : "zio\/ZIO.html#retryWhileEquals[E1>:E](e:=>E1)(implicitev:zio.CanFail[E1]):zio.ZIO[R,E1,A]", "kind" : "final def"}, {"label" : "retryWhile", "tail" : "(f: (E) => Boolean)(ev: CanFail[E]): ZIO[R, E, A]", "member" : "zio.ZIO.retryWhile", "link" : "zio\/ZIO.html#retryWhile(f:E=>Boolean)(implicitev:zio.CanFail[E]):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "retryUntilZIO", "tail" : "(f: (E) => URIO[R1, Boolean])(ev: CanFail[E]): ZIO[R1, E, A]", "member" : "zio.ZIO.retryUntilZIO", "link" : "zio\/ZIO.html#retryUntilZIO[R1<:R](f:E=>zio.URIO[R1,Boolean])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "retryUntilM", "tail" : "(f: (E) => URIO[R1, Boolean])(ev: CanFail[E]): ZIO[R1, E, A]", "member" : "zio.ZIO.retryUntilM", "link" : "zio\/ZIO.html#retryUntilM[R1<:R](f:E=>zio.URIO[R1,Boolean])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "retryUntilEquals", "tail" : "(e: => E1)(ev: CanFail[E1]): ZIO[R, E1, A]", "member" : "zio.ZIO.retryUntilEquals", "link" : "zio\/ZIO.html#retryUntilEquals[E1>:E](e:=>E1)(implicitev:zio.CanFail[E1]):zio.ZIO[R,E1,A]", "kind" : "final def"}, {"label" : "retryUntil", "tail" : "(f: (E) => Boolean)(ev: CanFail[E]): ZIO[R, E, A]", "member" : "zio.ZIO.retryUntil", "link" : "zio\/ZIO.html#retryUntil(f:E=>Boolean)(implicitev:zio.CanFail[E]):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "retryOrElseEither", "tail" : "(schedule: => Schedule[R1, E, Out], orElse: (E, Out) => ZIO[R1, E1, B])(ev: CanFail[E]): ZIO[R1 with Has[Clock], E1, Either[B, A]]", "member" : "zio.ZIO.retryOrElseEither", "link" : "zio\/ZIO.html#retryOrElseEither[R1<:R,Out,E1,B](schedule:=>zio.Schedule[R1,E,Out],orElse:(E,Out)=>zio.ZIO[R1,E1,B])(implicitev:zio.CanFail[E]):zio.ZIO[R1withzio.Has[zio.Clock],E1,Either[B,A]]", "kind" : "final def"}, {"label" : "retryOrElse", "tail" : "(policy: => Schedule[R1, E, S], orElse: (E, S) => ZIO[R1, E1, A1])(ev: CanFail[E]): ZIO[R1 with Has[Clock], E1, A1]", "member" : "zio.ZIO.retryOrElse", "link" : "zio\/ZIO.html#retryOrElse[R1<:R,A1>:A,S,E1](policy:=>zio.Schedule[R1,E,S],orElse:(E,S)=>zio.ZIO[R1,E1,A1])(implicitev:zio.CanFail[E]):zio.ZIO[R1withzio.Has[zio.Clock],E1,A1]", "kind" : "final def"}, {"label" : "retryN", "tail" : "(n: => Int)(ev: CanFail[E]): ZIO[R, E, A]", "member" : "zio.ZIO.retryN", "link" : "zio\/ZIO.html#retryN(n:=>Int)(implicitev:zio.CanFail[E]):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "retry", "tail" : "(policy: => Schedule[R1, E, S])(ev: CanFail[E]): ZIO[R1 with Has[Clock], E, A]", "member" : "zio.ZIO.retry", "link" : "zio\/ZIO.html#retry[R1<:R,S](policy:=>zio.Schedule[R1,E,S])(implicitev:zio.CanFail[E]):zio.ZIO[R1withzio.Has[zio.Clock],E,A]", "kind" : "final def"}, {"label" : "replicateZIODiscard", "tail" : "(n: => Int): ZIO[R, E, Unit]", "member" : "zio.ZIO.replicateZIODiscard", "link" : "zio\/ZIO.html#replicateZIODiscard(n:=>Int):zio.ZIO[R,E,Unit]", "kind" : "final def"}, {"label" : "replicateZIO", "tail" : "(n: => Int): ZIO[R, E, Iterable[A]]", "member" : "zio.ZIO.replicateZIO", "link" : "zio\/ZIO.html#replicateZIO(n:=>Int):zio.ZIO[R,E,Iterable[A]]", "kind" : "final def"}, {"label" : "replicateM_", "tail" : "(n: => Int): ZIO[R, E, Unit]", "member" : "zio.ZIO.replicateM_", "link" : "zio\/ZIO.html#replicateM_(n:=>Int):zio.ZIO[R,E,Unit]", "kind" : "final def"}, {"label" : "replicateM", "tail" : "(n: => Int): ZIO[R, E, Iterable[A]]", "member" : "zio.ZIO.replicateM", "link" : "zio\/ZIO.html#replicateM(n:=>Int):zio.ZIO[R,E,Iterable[A]]", "kind" : "final def"}, {"label" : "repeatWhileZIO", "tail" : "(f: (A) => URIO[R1, Boolean]): ZIO[R1, E, A]", "member" : "zio.ZIO.repeatWhileZIO", "link" : "zio\/ZIO.html#repeatWhileZIO[R1<:R](f:A=>zio.URIO[R1,Boolean]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "repeatWhileM", "tail" : "(f: (A) => URIO[R1, Boolean]): ZIO[R1, E, A]", "member" : "zio.ZIO.repeatWhileM", "link" : "zio\/ZIO.html#repeatWhileM[R1<:R](f:A=>zio.URIO[R1,Boolean]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "repeatWhileEquals", "tail" : "(a: => A1): ZIO[R, E, A1]", "member" : "zio.ZIO.repeatWhileEquals", "link" : "zio\/ZIO.html#repeatWhileEquals[A1>:A](a:=>A1):zio.ZIO[R,E,A1]", "kind" : "final def"}, {"label" : "repeatWhile", "tail" : "(f: (A) => Boolean): ZIO[R, E, A]", "member" : "zio.ZIO.repeatWhile", "link" : "zio\/ZIO.html#repeatWhile(f:A=>Boolean):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "repeatUntilZIO", "tail" : "(f: (A) => URIO[R1, Boolean]): ZIO[R1, E, A]", "member" : "zio.ZIO.repeatUntilZIO", "link" : "zio\/ZIO.html#repeatUntilZIO[R1<:R](f:A=>zio.URIO[R1,Boolean]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "repeatUntilM", "tail" : "(f: (A) => URIO[R1, Boolean]): ZIO[R1, E, A]", "member" : "zio.ZIO.repeatUntilM", "link" : "zio\/ZIO.html#repeatUntilM[R1<:R](f:A=>zio.URIO[R1,Boolean]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "repeatUntilEquals", "tail" : "(a: => A1): ZIO[R, E, A1]", "member" : "zio.ZIO.repeatUntilEquals", "link" : "zio\/ZIO.html#repeatUntilEquals[A1>:A](a:=>A1):zio.ZIO[R,E,A1]", "kind" : "final def"}, {"label" : "repeatUntil", "tail" : "(f: (A) => Boolean): ZIO[R, E, A]", "member" : "zio.ZIO.repeatUntil", "link" : "zio\/ZIO.html#repeatUntil(f:A=>Boolean):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "repeatOrElseEither", "tail" : "(schedule: => Schedule[R1, A, B], orElse: (E, Option[B]) => ZIO[R1, E2, C]): ZIO[R1 with Has[Clock], E2, Either[C, B]]", "member" : "zio.ZIO.repeatOrElseEither", "link" : "zio\/ZIO.html#repeatOrElseEither[R1<:R,B,E2,C](schedule:=>zio.Schedule[R1,A,B],orElse:(E,Option[B])=>zio.ZIO[R1,E2,C]):zio.ZIO[R1withzio.Has[zio.Clock],E2,Either[C,B]]", "kind" : "final def"}, {"label" : "repeatOrElse", "tail" : "(schedule: => Schedule[R1, A, B], orElse: (E, Option[B]) => ZIO[R1, E2, B]): ZIO[R1 with Has[Clock], E2, B]", "member" : "zio.ZIO.repeatOrElse", "link" : "zio\/ZIO.html#repeatOrElse[R1<:R,E2,B](schedule:=>zio.Schedule[R1,A,B],orElse:(E,Option[B])=>zio.ZIO[R1,E2,B]):zio.ZIO[R1withzio.Has[zio.Clock],E2,B]", "kind" : "final def"}, {"label" : "repeatN", "tail" : "(n: => Int): ZIO[R, E, A]", "member" : "zio.ZIO.repeatN", "link" : "zio\/ZIO.html#repeatN(n:=>Int):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(schedule: => Schedule[R1, A, B]): ZIO[R1 with Has[Clock], E, B]", "member" : "zio.ZIO.repeat", "link" : "zio\/ZIO.html#repeat[R1<:R,B](schedule:=>zio.Schedule[R1,A,B]):zio.ZIO[R1withzio.Has[zio.Clock],E,B]", "kind" : "final def"}, {"label" : "rejectZIO", "tail" : "(pf: PartialFunction[A, ZIO[R1, E1, E1]]): ZIO[R1, E1, A]", "member" : "zio.ZIO.rejectZIO", "link" : "zio\/ZIO.html#rejectZIO[R1<:R,E1>:E](pf:PartialFunction[A,zio.ZIO[R1,E1,E1]]):zio.ZIO[R1,E1,A]", "kind" : "final def"}, {"label" : "rejectM", "tail" : "(pf: PartialFunction[A, ZIO[R1, E1, E1]]): ZIO[R1, E1, A]", "member" : "zio.ZIO.rejectM", "link" : "zio\/ZIO.html#rejectM[R1<:R,E1>:E](pf:PartialFunction[A,zio.ZIO[R1,E1,E1]]):zio.ZIO[R1,E1,A]", "kind" : "final def"}, {"label" : "reject", "tail" : "(pf: PartialFunction[A, E1]): ZIO[R, E1, A]", "member" : "zio.ZIO.reject", "link" : "zio\/ZIO.html#reject[E1>:E](pf:PartialFunction[A,E1]):zio.ZIO[R,E1,A]", "kind" : "final def"}, {"label" : "refineOrDieWith", "tail" : "(pf: PartialFunction[E, E1])(f: (E) => Throwable)(ev: CanFail[E]): ZIO[R, E1, A]", "member" : "zio.ZIO.refineOrDieWith", "link" : "zio\/ZIO.html#refineOrDieWith[E1](pf:PartialFunction[E,E1])(f:E=>Throwable)(implicitev:zio.CanFail[E]):zio.ZIO[R,E1,A]", "kind" : "final def"}, {"label" : "refineOrDie", "tail" : "(pf: PartialFunction[E, E1])(ev1: IsSubtypeOfError[E, Throwable], ev2: CanFail[E]): ZIO[R, E1, A]", "member" : "zio.ZIO.refineOrDie", "link" : "zio\/ZIO.html#refineOrDie[E1](pf:PartialFunction[E,E1])(implicitev1:zio.IsSubtypeOfError[E,Throwable],implicitev2:zio.CanFail[E]):zio.ZIO[R,E1,A]", "kind" : "final def"}, {"label" : "refailWithTrace", "tail" : "(): ZIO[R, E, A]", "member" : "zio.ZIO.refailWithTrace", "link" : "zio\/ZIO.html#refailWithTrace:zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "raceWith", "tail" : "(that: => ZIO[R1, E1, B])(leftDone: (Exit[E, A], Fiber[E1, B]) => ZIO[R1, E2, C], rightDone: (Exit[E1, B], Fiber[E, A]) => ZIO[R1, E2, C], scope: => Option[ZScope[Exit[Any, Any]]]): ZIO[R1, E2, C]", "member" : "zio.ZIO.raceWith", "link" : "zio\/ZIO.html#raceWith[R1<:R,E1,E2,B,C](that:=>zio.ZIO[R1,E1,B])(leftDone:(zio.Exit[E,A],zio.Fiber[E1,B])=>zio.ZIO[R1,E2,C],rightDone:(zio.Exit[E1,B],zio.Fiber[E,A])=>zio.ZIO[R1,E2,C],scope:=>Option[zio.ZScope[zio.Exit[Any,Any]]]):zio.ZIO[R1,E2,C]", "kind" : "final def"}, {"label" : "raceEither", "tail" : "(that: => ZIO[R1, E1, B]): ZIO[R1, E1, Either[A, B]]", "member" : "zio.ZIO.raceEither", "link" : "zio\/ZIO.html#raceEither[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,Either[A,B]]", "kind" : "final def"}, {"label" : "raceFirst", "tail" : "(that: => ZIO[R1, E1, A1]): ZIO[R1, E1, A1]", "member" : "zio.ZIO.raceFirst", "link" : "zio\/ZIO.html#raceFirst[R1<:R,E1>:E,A1>:A](that:=>zio.ZIO[R1,E1,A1]):zio.ZIO[R1,E1,A1]", "kind" : "final def"}, {"label" : "raceAll", "tail" : "(ios: => Iterable[ZIO[R1, E1, A1]]): ZIO[R1, E1, A1]", "member" : "zio.ZIO.raceAll", "link" : "zio\/ZIO.html#raceAll[R1<:R,E1>:E,A1>:A](ios:=>Iterable[zio.ZIO[R1,E1,A1]]):zio.ZIO[R1,E1,A1]", "kind" : "final def"}, {"label" : "race", "tail" : "(that: => ZIO[R1, E1, A1]): ZIO[R1, E1, A1]", "member" : "zio.ZIO.race", "link" : "zio\/ZIO.html#race[R1<:R,E1>:E,A1>:A](that:=>zio.ZIO[R1,E1,A1]):zio.ZIO[R1,E1,A1]", "kind" : "final def"}, {"label" : "resetForkScope", "tail" : "(): ZIO[R, E, A]", "member" : "zio.ZIO.resetForkScope", "link" : "zio\/ZIO.html#resetForkScope:zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "provideSomeLayer", "tail" : "(): ProvideSomeLayer[R0, R, E, A]", "member" : "zio.ZIO.provideSomeLayer", "link" : "zio\/ZIO.html#provideSomeLayer[R0]:zio.ZIO.ProvideSomeLayer[R0,R,E,A]", "kind" : "final def"}, {"label" : "provideSome", "tail" : "(f: (R0) => R)(ev: NeedsEnv[R]): ZIO[R0, E, A]", "member" : "zio.ZIO.provideSome", "link" : "zio\/ZIO.html#provideSome[R0](f:R0=>R)(implicitev:zio.NeedsEnv[R]):zio.ZIO[R0,E,A]", "kind" : "final def"}, {"label" : "provideLayer", "tail" : "(layer: => ZLayer[R0, E1, R1])(ev: <:<[R1, R]): ZIO[R0, E1, A]", "member" : "zio.ZIO.provideLayer", "link" : "zio\/ZIO.html#provideLayer[E1>:E,R0,R1](layer:=>zio.ZLayer[R0,E1,R1])(implicitev:R1<:<R):zio.ZIO[R0,E1,A]", "kind" : "final def"}, {"label" : "provideCustomLayer", "tail" : "(layer: => ZLayer[zio.ZEnv, E1, R1])(ev1: <:<[zio.ZEnv with R1, R], ev2: Union[zio.ZEnv, R1], tagged: zio.Tag[R1]): ZIO[zio.ZEnv, E1, A]", "member" : "zio.ZIO.provideCustomLayer", "link" : "zio\/ZIO.html#provideCustomLayer[E1>:E,R1](layer:=>zio.ZLayer[zio.ZEnv,E1,R1])(implicitev1:zio.ZEnvwithR1<:<R,implicitev2:zio.Has.Union[zio.ZEnv,R1],implicittagged:zio.Tag[R1]):zio.ZIO[zio.ZEnv,E1,A]", "kind" : "final def"}, {"label" : "provide", "tail" : "(r: => R)(ev: NeedsEnv[R]): IO[E, A]", "member" : "zio.ZIO.provide", "link" : "zio\/ZIO.html#provide(r:=>R)(implicitev:zio.NeedsEnv[R]):zio.IO[E,A]", "kind" : "final def"}, {"label" : "parallelErrors", "tail" : "(): ZIO[R, ::[E1], A]", "member" : "zio.ZIO.parallelErrors", "link" : "zio\/ZIO.html#parallelErrors[E1>:E]:zio.ZIO[R,::[E1],A]", "kind" : "final def"}, {"label" : "overrideForkScope", "tail" : "(scope: => ZScope[Exit[Any, Any]]): ZIO[R, E, A]", "member" : "zio.ZIO.overrideForkScope", "link" : "zio\/ZIO.html#overrideForkScope(scope:=>zio.ZScope[zio.Exit[Any,Any]]):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "orElseSucceed", "tail" : "(a1: => A1)(ev: CanFail[E]): URIO[R, A1]", "member" : "zio.ZIO.orElseSucceed", "link" : "zio\/ZIO.html#orElseSucceed[A1>:A](a1:=>A1)(implicitev:zio.CanFail[E]):zio.URIO[R,A1]", "kind" : "final def"}, {"label" : "orElseOptional", "tail" : "(that: => ZIO[R1, Option[E1], A1])(ev: IsSubtypeOfError[E, Option[E1]]): ZIO[R1, Option[E1], A1]", "member" : "zio.ZIO.orElseOptional", "link" : "zio\/ZIO.html#orElseOptional[R1<:R,E1,A1>:A](that:=>zio.ZIO[R1,Option[E1],A1])(implicitev:zio.IsSubtypeOfError[E,Option[E1]]):zio.ZIO[R1,Option[E1],A1]", "kind" : "final def"}, {"label" : "orElseFail", "tail" : "(e1: => E1)(ev: CanFail[E]): ZIO[R, E1, A]", "member" : "zio.ZIO.orElseFail", "link" : "zio\/ZIO.html#orElseFail[E1](e1:=>E1)(implicitev:zio.CanFail[E]):zio.ZIO[R,E1,A]", "kind" : "final def"}, {"label" : "orElseEither", "tail" : "(that: => ZIO[R1, E2, B])(ev: CanFail[E]): ZIO[R1, E2, Either[A, B]]", "member" : "zio.ZIO.orElseEither", "link" : "zio\/ZIO.html#orElseEither[R1<:R,E2,B](that:=>zio.ZIO[R1,E2,B])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E2,Either[A,B]]", "kind" : "final def"}, {"label" : "orElse", "tail" : "(that: => ZIO[R1, E2, A1])(ev: CanFail[E]): ZIO[R1, E2, A1]", "member" : "zio.ZIO.orElse", "link" : "zio\/ZIO.html#orElse[R1<:R,E2,A1>:A](that:=>zio.ZIO[R1,E2,A1])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E2,A1]", "kind" : "final def"}, {"label" : "resurrect", "tail" : "(ev1: IsSubtypeOfError[E, Throwable]): RIO[R, A]", "member" : "zio.ZIO.resurrect", "link" : "zio\/ZIO.html#resurrect(implicitev1:zio.IsSubtypeOfError[E,Throwable]):zio.RIO[R,A]", "kind" : "final def"}, {"label" : "orDieWith", "tail" : "(f: (E) => Throwable)(ev: CanFail[E]): URIO[R, A]", "member" : "zio.ZIO.orDieWith", "link" : "zio\/ZIO.html#orDieWith(f:E=>Throwable)(implicitev:zio.CanFail[E]):zio.URIO[R,A]", "kind" : "final def"}, {"label" : "orDie", "tail" : "(ev1: IsSubtypeOfError[E, Throwable], ev2: CanFail[E]): URIO[R, A]", "member" : "zio.ZIO.orDie", "link" : "zio\/ZIO.html#orDie(implicitev1:zio.IsSubtypeOfError[E,Throwable],implicitev2:zio.CanFail[E]):zio.URIO[R,A]", "kind" : "final def"}, {"label" : "optional", "tail" : "(ev: IsSubtypeOfError[E, Option[E1]]): ZIO[R, E1, Option[A]]", "member" : "zio.ZIO.optional", "link" : "zio\/ZIO.html#optional[E1](implicitev:zio.IsSubtypeOfError[E,Option[E1]]):zio.ZIO[R,E1,Option[A]]", "kind" : "final def"}, {"label" : "option", "tail" : "(ev: CanFail[E]): URIO[R, Option[A]]", "member" : "zio.ZIO.option", "link" : "zio\/ZIO.html#option(implicitev:zio.CanFail[E]):zio.URIO[R,Option[A]]", "kind" : "final def"}, {"label" : "onTermination", "tail" : "(cleanup: (Cause[Nothing]) => URIO[R1, Any]): ZIO[R1, E, A]", "member" : "zio.ZIO.onTermination", "link" : "zio\/ZIO.html#onTermination[R1<:R](cleanup:zio.Cause[Nothing]=>zio.URIO[R1,Any]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "onInterrupt", "tail" : "(cleanup: (Set[FiberId]) => URIO[R1, Any]): ZIO[R1, E, A]", "member" : "zio.ZIO.onInterrupt", "link" : "zio\/ZIO.html#onInterrupt[R1<:R](cleanup:Set[zio.FiberId]=>zio.URIO[R1,Any]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "onInterrupt", "tail" : "(cleanup: => URIO[R1, Any]): ZIO[R1, E, A]", "member" : "zio.ZIO.onInterrupt", "link" : "zio\/ZIO.html#onInterrupt[R1<:R](cleanup:=>zio.URIO[R1,Any]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "onExit", "tail" : "(cleanup: (Exit[E, A]) => URIO[R1, Any]): ZIO[R1, E, A]", "member" : "zio.ZIO.onExit", "link" : "zio\/ZIO.html#onExit[R1<:R](cleanup:zio.Exit[E,A]=>zio.URIO[R1,Any]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "onExecutionContext", "tail" : "(ec: => ExecutionContext): ZIO[R, E, A]", "member" : "zio.ZIO.onExecutionContext", "link" : "zio\/ZIO.html#onExecutionContext(ec:=>scala.concurrent.ExecutionContext):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "onExecutor", "tail" : "(executor: => Executor): ZIO[R, E, A]", "member" : "zio.ZIO.onExecutor", "link" : "zio\/ZIO.html#onExecutor(executor:=>zio.Executor):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "onError", "tail" : "(cleanup: (Cause[E]) => URIO[R1, Any]): ZIO[R1, E, A]", "member" : "zio.ZIO.onError", "link" : "zio\/ZIO.html#onError[R1<:R](cleanup:zio.Cause[E]=>zio.URIO[R1,Any]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "once", "tail" : "(): UIO[ZIO[R, E, Unit]]", "member" : "zio.ZIO.once", "link" : "zio\/ZIO.html#once:zio.UIO[zio.ZIO[R,E,Unit]]", "kind" : "final def"}, {"label" : "on", "tail" : "(ec: => ExecutionContext): ZIO[R, E, A]", "member" : "zio.ZIO.on", "link" : "zio\/ZIO.html#on(ec:=>scala.concurrent.ExecutionContext):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "none", "tail" : "(ev: IsSubtypeOfOutput[A, Option[B]]): ZIO[R, Option[E], Unit]", "member" : "zio.ZIO.none", "link" : "zio\/ZIO.html#none[B](implicitev:zio.IsSubtypeOfOutput[A,Option[B]]):zio.ZIO[R,Option[E],Unit]", "kind" : "final def"}, {"label" : "negate", "tail" : "(ev: IsSubtypeOfOutput[A, Boolean]): ZIO[R, E, Boolean]", "member" : "zio.ZIO.negate", "link" : "zio\/ZIO.html#negate(implicitev:zio.IsSubtypeOfOutput[A,Boolean]):zio.ZIO[R,E,Boolean]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev1: IsSubtypeOfError[E, A1], ev2: CanFail[E]): URIO[R, A1]", "member" : "zio.ZIO.merge", "link" : "zio\/ZIO.html#merge[A1>:A](implicitev1:zio.IsSubtypeOfError[E,A1],implicitev2:zio.CanFail[E]):zio.URIO[R,A1]", "kind" : "final def"}, {"label" : "memoize", "tail" : "(): UIO[ZIO[R, E, A]]", "member" : "zio.ZIO.memoize", "link" : "zio\/ZIO.html#memoize:zio.UIO[zio.ZIO[R,E,A]]", "kind" : "final def"}, {"label" : "mapErrorCause", "tail" : "(h: (Cause[E]) => Cause[E2]): ZIO[R, E2, A]", "member" : "zio.ZIO.mapErrorCause", "link" : "zio\/ZIO.html#mapErrorCause[E2](h:zio.Cause[E]=>zio.Cause[E2]):zio.ZIO[R,E2,A]", "kind" : "final def"}, {"label" : "mapError", "tail" : "(f: (E) => E2)(ev: CanFail[E]): ZIO[R, E2, A]", "member" : "zio.ZIO.mapError", "link" : "zio\/ZIO.html#mapError[E2](f:E=>E2)(implicitev:zio.CanFail[E]):zio.ZIO[R,E2,A]", "kind" : "final def"}, {"label" : "mapEffect", "tail" : "(f: (A) => B)(ev: IsSubtypeOfError[E, Throwable]): RIO[R, B]", "member" : "zio.ZIO.mapEffect", "link" : "zio\/ZIO.html#mapEffect[B](f:A=>B)(implicitev:zio.IsSubtypeOfError[E,Throwable]):zio.RIO[R,B]", "kind" : "final def"}, {"label" : "mapBoth", "tail" : "(f: (E) => E2, g: (A) => B)(ev: CanFail[E]): ZIO[R, E2, B]", "member" : "zio.ZIO.mapBoth", "link" : "zio\/ZIO.html#mapBoth[E2,B](f:E=>E2,g:A=>B)(implicitev:zio.CanFail[E]):zio.ZIO[R,E2,B]", "kind" : "final def"}, {"label" : "mapAttempt", "tail" : "(f: (A) => B)(ev: IsSubtypeOfError[E, Throwable]): RIO[R, B]", "member" : "zio.ZIO.mapAttempt", "link" : "zio\/ZIO.html#mapAttempt[B](f:A=>B)(implicitev:zio.IsSubtypeOfError[E,Throwable]):zio.RIO[R,B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): ZIO[R, E, B]", "member" : "zio.ZIO.map", "link" : "zio\/ZIO.html#map[B](f:A=>B):zio.ZIO[R,E,B]", "kind" : "def"}, {"label" : "lockExecutionContext", "tail" : "(ec: => ExecutionContext): ZIO[R, E, A]", "member" : "zio.ZIO.lockExecutionContext", "link" : "zio\/ZIO.html#lockExecutionContext(ec:=>scala.concurrent.ExecutionContext):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "lock", "tail" : "(executor: => Executor): ZIO[R, E, A]", "member" : "zio.ZIO.lock", "link" : "zio\/ZIO.html#lock(executor:=>zio.Executor):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "left", "tail" : "(ev: IsSubtypeOfOutput[A, Either[B, C]]): ZIO[R, Either[E, C], B]", "member" : "zio.ZIO.left", "link" : "zio\/ZIO.html#left[B,C](implicitev:zio.IsSubtypeOfOutput[A,Either[B,C]]):zio.ZIO[R,Either[E,C],B]", "kind" : "final def"}, {"label" : "isSuccess", "tail" : "(): URIO[R, Boolean]", "member" : "zio.ZIO.isSuccess", "link" : "zio\/ZIO.html#isSuccess:zio.URIO[R,Boolean]", "kind" : "final def"}, {"label" : "isFailure", "tail" : "(): URIO[R, Boolean]", "member" : "zio.ZIO.isFailure", "link" : "zio\/ZIO.html#isFailure:zio.URIO[R,Boolean]", "kind" : "final def"}, {"label" : "intoPromise", "tail" : "(p: => Promise[E1, A1]): URIO[R, Boolean]", "member" : "zio.ZIO.intoPromise", "link" : "zio\/ZIO.html#intoPromise[E1>:E,A1>:A](p:=>zio.Promise[E1,A1]):zio.URIO[R,Boolean]", "kind" : "final def"}, {"label" : "interruptStatus", "tail" : "(flag: => InterruptStatus): ZIO[R, E, A]", "member" : "zio.ZIO.interruptStatus", "link" : "zio\/ZIO.html#interruptStatus(flag:=>zio.InterruptStatus):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "interruptible", "tail" : "(): ZIO[R, E, A]", "member" : "zio.ZIO.interruptible", "link" : "zio\/ZIO.html#interruptible:zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "interruptAllChildren", "tail" : "(): ZIO[R, E, A]", "member" : "zio.ZIO.interruptAllChildren", "link" : "zio\/ZIO.html#interruptAllChildren:zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "in", "tail" : "(scope: => ZScope[Any]): ZIO[R, E, A]", "member" : "zio.ZIO.in", "link" : "zio\/ZIO.html#in(scope:=>zio.ZScope[Any]):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "ignore", "tail" : "(): URIO[R, Unit]", "member" : "zio.ZIO.ignore", "link" : "zio\/ZIO.html#ignore:zio.URIO[R,Unit]", "kind" : "final def"}, {"label" : "head", "tail" : "(ev: IsSubtypeOfOutput[A, List[B]]): ZIO[R, Option[E], B]", "member" : "zio.ZIO.head", "link" : "zio\/ZIO.html#head[B](implicitev:zio.IsSubtypeOfOutput[A,List[B]]):zio.ZIO[R,Option[E],B]", "kind" : "final def"}, {"label" : "get", "tail" : "(ev1: IsSubtypeOfError[E, Nothing], ev2: IsSubtypeOfOutput[A, Option[B]]): ZIO[R, Option[Nothing], B]", "member" : "zio.ZIO.get", "link" : "zio\/ZIO.html#get[B](implicitev1:zio.IsSubtypeOfError[E,Nothing],implicitev2:zio.IsSubtypeOfOutput[A,Option[B]]):zio.ZIO[R,Option[Nothing],B]", "kind" : "final def"}, {"label" : "flattenErrorOption", "tail" : "(default: => E2)(ev: IsSubtypeOfError[E, Option[E1]]): ZIO[R, E1, A]", "member" : "zio.ZIO.flattenErrorOption", "link" : "zio\/ZIO.html#flattenErrorOption[E1,E2<:E1](default:=>E2)(implicitev:zio.IsSubtypeOfError[E,Option[E1]]):zio.ZIO[R,E1,A]", "kind" : "final def"}, {"label" : "forkWithErrorHandler", "tail" : "(handler: (E) => UIO[Any]): URIO[R, Fiber.Runtime[E, A]]", "member" : "zio.ZIO.forkWithErrorHandler", "link" : "zio\/ZIO.html#forkWithErrorHandler(handler:E=>zio.UIO[Any]):zio.URIO[R,zio.Fiber.Runtime[E,A]]", "kind" : "final def"}, {"label" : "forkOn", "tail" : "(ec: => ExecutionContext): ZIO[R, E, Fiber.Runtime[E, A]]", "member" : "zio.ZIO.forkOn", "link" : "zio\/ZIO.html#forkOn(ec:=>scala.concurrent.ExecutionContext):zio.ZIO[R,E,zio.Fiber.Runtime[E,A]]", "kind" : "final def"}, {"label" : "forkManaged", "tail" : "(): ZManaged[R, Nothing, Fiber.Runtime[E, A]]", "member" : "zio.ZIO.forkManaged", "link" : "zio\/ZIO.html#forkManaged:zio.ZManaged[R,Nothing,zio.Fiber.Runtime[E,A]]", "kind" : "final def"}, {"label" : "forkInternal", "tail" : "(): ZIO[R, Nothing, Fiber.Runtime[E, A]]", "member" : "zio.ZIO.forkInternal", "link" : "zio\/ZIO.html#forkInternal:zio.ZIO[R,Nothing,zio.Fiber.Runtime[E,A]]", "kind" : "final def"}, {"label" : "forkDaemon", "tail" : "(): URIO[R, Fiber.Runtime[E, A]]", "member" : "zio.ZIO.forkDaemon", "link" : "zio\/ZIO.html#forkDaemon:zio.URIO[R,zio.Fiber.Runtime[E,A]]", "kind" : "final def"}, {"label" : "forkAs", "tail" : "(name: => String): URIO[R, Fiber.Runtime[E, A]]", "member" : "zio.ZIO.forkAs", "link" : "zio\/ZIO.html#forkAs(name:=>String):zio.URIO[R,zio.Fiber.Runtime[E,A]]", "kind" : "final def"}, {"label" : "forkIn", "tail" : "(scope: => ZScope[Exit[Any, Any]]): URIO[R, Fiber.Runtime[E, A]]", "member" : "zio.ZIO.forkIn", "link" : "zio\/ZIO.html#forkIn(scope:=>zio.ZScope[zio.Exit[Any,Any]]):zio.URIO[R,zio.Fiber.Runtime[E,A]]", "kind" : "final def"}, {"label" : "fork", "tail" : "(): URIO[R, Fiber.Runtime[E, A]]", "member" : "zio.ZIO.fork", "link" : "zio\/ZIO.html#fork:zio.URIO[R,zio.Fiber.Runtime[E,A]]", "kind" : "final def"}, {"label" : "forever", "tail" : "(): ZIO[R, E, Nothing]", "member" : "zio.ZIO.forever", "link" : "zio\/ZIO.html#forever:zio.ZIO[R,E,Nothing]", "kind" : "final def"}, {"label" : "foldZIO", "tail" : "(failure: (E) => ZIO[R1, E2, B], success: (A) => ZIO[R1, E2, B])(ev: CanFail[E]): ZIO[R1, E2, B]", "member" : "zio.ZIO.foldZIO", "link" : "zio\/ZIO.html#foldZIO[R1<:R,E2,B](failure:E=>zio.ZIO[R1,E2,B],success:A=>zio.ZIO[R1,E2,B])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E2,B]", "kind" : "final def"}, {"label" : "foldTraceZIO", "tail" : "(failure: ((E, Option[ZTrace])) => ZIO[R1, E2, B], success: (A) => ZIO[R1, E2, B])(ev: CanFail[E]): ZIO[R1, E2, B]", "member" : "zio.ZIO.foldTraceZIO", "link" : "zio\/ZIO.html#foldTraceZIO[R1<:R,E2,B](failure:((E,Option[zio.ZTrace]))=>zio.ZIO[R1,E2,B],success:A=>zio.ZIO[R1,E2,B])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E2,B]", "kind" : "final def"}, {"label" : "foldTraceM", "tail" : "(failure: ((E, Option[ZTrace])) => ZIO[R1, E2, B], success: (A) => ZIO[R1, E2, B])(ev: CanFail[E]): ZIO[R1, E2, B]", "member" : "zio.ZIO.foldTraceM", "link" : "zio\/ZIO.html#foldTraceM[R1<:R,E2,B](failure:((E,Option[zio.ZTrace]))=>zio.ZIO[R1,E2,B],success:A=>zio.ZIO[R1,E2,B])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E2,B]", "kind" : "final def"}, {"label" : "foldM", "tail" : "(failure: (E) => ZIO[R1, E2, B], success: (A) => ZIO[R1, E2, B])(ev: CanFail[E]): ZIO[R1, E2, B]", "member" : "zio.ZIO.foldM", "link" : "zio\/ZIO.html#foldM[R1<:R,E2,B](failure:E=>zio.ZIO[R1,E2,B],success:A=>zio.ZIO[R1,E2,B])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E2,B]", "kind" : "final def"}, {"label" : "foldCauseZIO", "tail" : "(failure: (Cause[E]) => ZIO[R1, E2, B], success: (A) => ZIO[R1, E2, B]): ZIO[R1, E2, B]", "member" : "zio.ZIO.foldCauseZIO", "link" : "zio\/ZIO.html#foldCauseZIO[R1<:R,E2,B](failure:zio.Cause[E]=>zio.ZIO[R1,E2,B],success:A=>zio.ZIO[R1,E2,B]):zio.ZIO[R1,E2,B]", "kind" : "final def"}, {"label" : "foldCauseM", "tail" : "(failure: (Cause[E]) => ZIO[R1, E2, B], success: (A) => ZIO[R1, E2, B]): ZIO[R1, E2, B]", "member" : "zio.ZIO.foldCauseM", "link" : "zio\/ZIO.html#foldCauseM[R1<:R,E2,B](failure:zio.Cause[E]=>zio.ZIO[R1,E2,B],success:A=>zio.ZIO[R1,E2,B]):zio.ZIO[R1,E2,B]", "kind" : "final def"}, {"label" : "foldCause", "tail" : "(failure: (Cause[E]) => B, success: (A) => B): URIO[R, B]", "member" : "zio.ZIO.foldCause", "link" : "zio\/ZIO.html#foldCause[B](failure:zio.Cause[E]=>B,success:A=>B):zio.URIO[R,B]", "kind" : "final def"}, {"label" : "fold", "tail" : "(failure: (E) => B, success: (A) => B)(ev: CanFail[E]): URIO[R, B]", "member" : "zio.ZIO.fold", "link" : "zio\/ZIO.html#fold[B](failure:E=>B,success:A=>B)(implicitev:zio.CanFail[E]):zio.URIO[R,B]", "kind" : "final def"}, {"label" : "flipWith", "tail" : "(f: (ZIO[R, A, E]) => ZIO[R1, A1, E1]): ZIO[R1, E1, A1]", "member" : "zio.ZIO.flipWith", "link" : "zio\/ZIO.html#flipWith[R1,A1,E1](f:zio.ZIO[R,A,E]=>zio.ZIO[R1,A1,E1]):zio.ZIO[R1,E1,A1]", "kind" : "final def"}, {"label" : "flip", "tail" : "(): ZIO[R, A, E]", "member" : "zio.ZIO.flip", "link" : "zio\/ZIO.html#flip:zio.ZIO[R,A,E]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev1: IsSubtypeOfOutput[A, ZIO[R1, E1, B]]): ZIO[R1, E1, B]", "member" : "zio.ZIO.flatten", "link" : "zio\/ZIO.html#flatten[R1<:R,E1>:E,B](implicitev1:zio.IsSubtypeOfOutput[A,zio.ZIO[R1,E1,B]]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "flatMapError", "tail" : "(f: (E) => URIO[R1, E2])(ev: CanFail[E]): ZIO[R1, E2, A]", "member" : "zio.ZIO.flatMapError", "link" : "zio\/ZIO.html#flatMapError[R1<:R,E2](f:E=>zio.URIO[R1,E2])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E2,A]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(k: (A) => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZIO.flatMap", "link" : "zio\/ZIO.html#flatMap[R1<:R,E1>:E,B](k:A=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "def"}, {"label" : "firstSuccessOf", "tail" : "(rest: => Iterable[ZIO[R1, E1, A1]]): ZIO[R1, E1, A1]", "member" : "zio.ZIO.firstSuccessOf", "link" : "zio\/ZIO.html#firstSuccessOf[R1<:R,E1>:E,A1>:A](rest:=>Iterable[zio.ZIO[R1,E1,A1]]):zio.ZIO[R1,E1,A1]", "kind" : "final def"}, {"label" : "filterOrFail", "tail" : "(p: (A) => Boolean)(e: => E1): ZIO[R, E1, A]", "member" : "zio.ZIO.filterOrFail", "link" : "zio\/ZIO.html#filterOrFail[E1>:E](p:A=>Boolean)(e:=>E1):zio.ZIO[R,E1,A]", "kind" : "final def"}, {"label" : "filterOrElseWith", "tail" : "(p: (A) => Boolean)(f: (A) => ZIO[R1, E1, A1]): ZIO[R1, E1, A1]", "member" : "zio.ZIO.filterOrElseWith", "link" : "zio\/ZIO.html#filterOrElseWith[R1<:R,E1>:E,A1>:A](p:A=>Boolean)(f:A=>zio.ZIO[R1,E1,A1]):zio.ZIO[R1,E1,A1]", "kind" : "final def"}, {"label" : "filterOrElse_", "tail" : "(p: (A) => Boolean)(zio: => ZIO[R1, E1, A1]): ZIO[R1, E1, A1]", "member" : "zio.ZIO.filterOrElse_", "link" : "zio\/ZIO.html#filterOrElse_[R1<:R,E1>:E,A1>:A](p:A=>Boolean)(zio:=>zio.ZIO[R1,E1,A1]):zio.ZIO[R1,E1,A1]", "kind" : "final def"}, {"label" : "filterOrElse", "tail" : "(p: (A) => Boolean)(zio: => ZIO[R1, E1, A1]): ZIO[R1, E1, A1]", "member" : "zio.ZIO.filterOrElse", "link" : "zio\/ZIO.html#filterOrElse[R1<:R,E1>:E,A1>:A](p:A=>Boolean)(zio:=>zio.ZIO[R1,E1,A1]):zio.ZIO[R1,E1,A1]", "kind" : "final def"}, {"label" : "filterOrDieMessage", "tail" : "(p: (A) => Boolean)(message: => String): ZIO[R, E, A]", "member" : "zio.ZIO.filterOrDieMessage", "link" : "zio\/ZIO.html#filterOrDieMessage(p:A=>Boolean)(message:=>String):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "filterOrDie", "tail" : "(p: (A) => Boolean)(t: => Throwable): ZIO[R, E, A]", "member" : "zio.ZIO.filterOrDie", "link" : "zio\/ZIO.html#filterOrDie(p:A=>Boolean)(t:=>Throwable):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "exitCode", "tail" : "(): URIO[R, ExitCode]", "member" : "zio.ZIO.exitCode", "link" : "zio\/ZIO.html#exitCode:zio.URIO[R,zio.ExitCode]", "kind" : "final def"}, {"label" : "exit", "tail" : "(): URIO[R, Exit[E, A]]", "member" : "zio.ZIO.exit", "link" : "zio\/ZIO.html#exit:zio.URIO[R,zio.Exit[E,A]]", "kind" : "final def"}, {"label" : "eventually", "tail" : "(ev: CanFail[E]): URIO[R, A]", "member" : "zio.ZIO.eventually", "link" : "zio\/ZIO.html#eventually(implicitev:zio.CanFail[E]):zio.URIO[R,A]", "kind" : "final def"}, {"label" : "ensuringChildren", "tail" : "(children: (Chunk[Fiber.Runtime[Any, Any]]) => ZIO[R1, Nothing, Any]): ZIO[R1, E, A]", "member" : "zio.ZIO.ensuringChildren", "link" : "zio\/ZIO.html#ensuringChildren[R1<:R](children:zio.Chunk[zio.Fiber.Runtime[Any,Any]]=>zio.ZIO[R1,Nothing,Any]):zio.ZIO[R1,E,A]", "kind" : "def"}, {"label" : "ensuringChild", "tail" : "(f: (Fiber[Any, Iterable[Any]]) => ZIO[R1, Nothing, Any]): ZIO[R1, E, A]", "member" : "zio.ZIO.ensuringChild", "link" : "zio\/ZIO.html#ensuringChild[R1<:R](f:zio.Fiber[Any,Iterable[Any]]=>zio.ZIO[R1,Nothing,Any]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "ensuring", "tail" : "(finalizer: => URIO[R1, Any]): ZIO[R1, E, A]", "member" : "zio.ZIO.ensuring", "link" : "zio\/ZIO.html#ensuring[R1<:R](finalizer:=>zio.URIO[R1,Any]):zio.ZIO[R1,E,A]", "kind" : "final def"}, {"label" : "either", "tail" : "(ev: CanFail[E]): URIO[R, Either[E, A]]", "member" : "zio.ZIO.either", "link" : "zio\/ZIO.html#either(implicitev:zio.CanFail[E]):zio.URIO[R,Either[E,A]]", "kind" : "final def"}, {"label" : "disconnect", "tail" : "(): ZIO[R, E, A]", "member" : "zio.ZIO.disconnect", "link" : "zio\/ZIO.html#disconnect:zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "delay", "tail" : "(duration: => zio.Duration): ZIO[R with Has[Clock], E, A]", "member" : "zio.ZIO.delay", "link" : "zio\/ZIO.html#delay(duration:=>zio.Duration):zio.ZIO[Rwithzio.Has[zio.Clock],E,A]", "kind" : "final def"}, {"label" : "debug", "tail" : "(prefix: => String): ZIO[R, E, A]", "member" : "zio.ZIO.debug", "link" : "zio\/ZIO.html#debug(prefix:=>String):zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "debug", "tail" : "(): ZIO[R, E, A]", "member" : "zio.ZIO.debug", "link" : "zio\/ZIO.html#debug:zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "collectZIO", "tail" : "(e: => E1)(pf: PartialFunction[A, ZIO[R1, E1, B]]): ZIO[R1, E1, B]", "member" : "zio.ZIO.collectZIO", "link" : "zio\/ZIO.html#collectZIO[R1<:R,E1>:E,B](e:=>E1)(pf:PartialFunction[A,zio.ZIO[R1,E1,B]]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "collectM", "tail" : "(e: => E1)(pf: PartialFunction[A, ZIO[R1, E1, B]]): ZIO[R1, E1, B]", "member" : "zio.ZIO.collectM", "link" : "zio\/ZIO.html#collectM[R1<:R,E1>:E,B](e:=>E1)(pf:PartialFunction[A,zio.ZIO[R1,E1,B]]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(e: => E1)(pf: PartialFunction[A, B]): ZIO[R, E1, B]", "member" : "zio.ZIO.collect", "link" : "zio\/ZIO.html#collect[E1>:E,B](e:=>E1)(pf:PartialFunction[A,B]):zio.ZIO[R,E1,B]", "kind" : "final def"}, {"label" : "cause", "tail" : "(): URIO[R, Cause[E]]", "member" : "zio.ZIO.cause", "link" : "zio\/ZIO.html#cause:zio.URIO[R,zio.Cause[E]]", "kind" : "final def"}, {"label" : "catchSomeDefect", "tail" : "(pf: PartialFunction[Throwable, ZIO[R1, E1, A1]]): ZIO[R1, E1, A1]", "member" : "zio.ZIO.catchSomeDefect", "link" : "zio\/ZIO.html#catchSomeDefect[R1<:R,E1>:E,A1>:A](pf:PartialFunction[Throwable,zio.ZIO[R1,E1,A1]]):zio.ZIO[R1,E1,A1]", "kind" : "final def"}, {"label" : "catchSomeCause", "tail" : "(pf: PartialFunction[Cause[E], ZIO[R1, E1, A1]]): ZIO[R1, E1, A1]", "member" : "zio.ZIO.catchSomeCause", "link" : "zio\/ZIO.html#catchSomeCause[R1<:R,E1>:E,A1>:A](pf:PartialFunction[zio.Cause[E],zio.ZIO[R1,E1,A1]]):zio.ZIO[R1,E1,A1]", "kind" : "final def"}, {"label" : "catchSomeTrace", "tail" : "(pf: PartialFunction[(E, Option[ZTrace]), ZIO[R1, E1, A1]])(ev: CanFail[E]): ZIO[R1, E1, A1]", "member" : "zio.ZIO.catchSomeTrace", "link" : "zio\/ZIO.html#catchSomeTrace[R1<:R,E1>:E,A1>:A](pf:PartialFunction[(E,Option[zio.ZTrace]),zio.ZIO[R1,E1,A1]])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E1,A1]", "kind" : "final def"}, {"label" : "catchSome", "tail" : "(pf: PartialFunction[E, ZIO[R1, E1, A1]])(ev: CanFail[E]): ZIO[R1, E1, A1]", "member" : "zio.ZIO.catchSome", "link" : "zio\/ZIO.html#catchSome[R1<:R,E1>:E,A1>:A](pf:PartialFunction[E,zio.ZIO[R1,E1,A1]])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E1,A1]", "kind" : "final def"}, {"label" : "catchAllDefect", "tail" : "(h: (Throwable) => ZIO[R1, E1, A1]): ZIO[R1, E1, A1]", "member" : "zio.ZIO.catchAllDefect", "link" : "zio\/ZIO.html#catchAllDefect[R1<:R,E1>:E,A1>:A](h:Throwable=>zio.ZIO[R1,E1,A1]):zio.ZIO[R1,E1,A1]", "kind" : "final def"}, {"label" : "catchAllCause", "tail" : "(h: (Cause[E]) => ZIO[R1, E2, A1]): ZIO[R1, E2, A1]", "member" : "zio.ZIO.catchAllCause", "link" : "zio\/ZIO.html#catchAllCause[R1<:R,E2,A1>:A](h:zio.Cause[E]=>zio.ZIO[R1,E2,A1]):zio.ZIO[R1,E2,A1]", "kind" : "final def"}, {"label" : "catchAllTrace", "tail" : "(h: ((E, Option[ZTrace])) => ZIO[R1, E2, A1])(ev: CanFail[E]): ZIO[R1, E2, A1]", "member" : "zio.ZIO.catchAllTrace", "link" : "zio\/ZIO.html#catchAllTrace[R1<:R,E2,A1>:A](h:((E,Option[zio.ZTrace]))=>zio.ZIO[R1,E2,A1])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E2,A1]", "kind" : "final def"}, {"label" : "catchAll", "tail" : "(h: (E) => ZIO[R1, E2, A1])(ev: CanFail[E]): ZIO[R1, E2, A1]", "member" : "zio.ZIO.catchAll", "link" : "zio\/ZIO.html#catchAll[R1<:R,E2,A1>:A](h:E=>zio.ZIO[R1,E2,A1])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E2,A1]", "kind" : "final def"}, {"label" : "cachedInvalidate", "tail" : "(timeToLive0: => zio.Duration): ZIO[R with Has[Clock], Nothing, (IO[E, A], UIO[Unit])]", "member" : "zio.ZIO.cachedInvalidate", "link" : "zio\/ZIO.html#cachedInvalidate(timeToLive0:=>zio.Duration):zio.ZIO[Rwithzio.Has[zio.Clock],Nothing,(zio.IO[E,A],zio.UIO[Unit])]", "kind" : "final def"}, {"label" : "cached", "tail" : "(timeToLive: => zio.Duration): ZIO[R with Has[Clock], Nothing, IO[E, A]]", "member" : "zio.ZIO.cached", "link" : "zio\/ZIO.html#cached(timeToLive:=>zio.Duration):zio.ZIO[Rwithzio.Has[zio.Clock],Nothing,zio.IO[E,A]]", "kind" : "final def"}, {"label" : "bracketOnError", "tail" : "(release: (A) => URIO[R1, Any])(use: (A) => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZIO.bracketOnError", "link" : "zio\/ZIO.html#bracketOnError[R1<:R,E1>:E,B](release:A=>zio.URIO[R1,Any])(use:A=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "bracketExit", "tail" : "(): BracketExitAcquire[R, E, A]", "member" : "zio.ZIO.bracketExit", "link" : "zio\/ZIO.html#bracketExit:zio.ZIO.BracketExitAcquire[R,E,A]", "kind" : "final def"}, {"label" : "bracketExit", "tail" : "(release: (A, Exit[E1, B]) => URIO[R1, Any], use: (A) => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZIO.bracketExit", "link" : "zio\/ZIO.html#bracketExit[R1<:R,E1>:E,B](release:(A,zio.Exit[E1,B])=>zio.URIO[R1,Any],use:A=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "bracket_", "tail" : "(release: => URIO[R1, Any], use: => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZIO.bracket_", "link" : "zio\/ZIO.html#bracket_[R1<:R,E1>:E,B](release:=>zio.URIO[R1,Any],use:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "bracket_", "tail" : "(): BracketAcquire_[R1, E1]", "member" : "zio.ZIO.bracket_", "link" : "zio\/ZIO.html#bracket_[R1<:R,E1>:E]:zio.ZIO.BracketAcquire_[R1,E1]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(): BracketAcquire[R, E, A]", "member" : "zio.ZIO.bracket", "link" : "zio\/ZIO.html#bracket:zio.ZIO.BracketAcquire[R,E,A]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(release: (A) => URIO[R1, Any], use: (A) => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZIO.bracket", "link" : "zio\/ZIO.html#bracket[R1<:R,E1>:E,B](release:A=>zio.URIO[R1,Any],use:A=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "bimap", "tail" : "(f: (E) => E2, g: (A) => B)(ev: CanFail[E]): ZIO[R, E2, B]", "member" : "zio.ZIO.bimap", "link" : "zio\/ZIO.html#bimap[E2,B](f:E=>E2,g:A=>B)(implicitev:zio.CanFail[E]):zio.ZIO[R,E2,B]", "kind" : "final def"}, {"label" : "awaitAllChildren", "tail" : "(): ZIO[R, E, A]", "member" : "zio.ZIO.awaitAllChildren", "link" : "zio\/ZIO.html#awaitAllChildren:zio.ZIO[R,E,A]", "kind" : "final def"}, {"label" : "asSomeError", "tail" : "(): ZIO[R, Option[E], A]", "member" : "zio.ZIO.asSomeError", "link" : "zio\/ZIO.html#asSomeError:zio.ZIO[R,Option[E],A]", "kind" : "final def"}, {"label" : "asSome", "tail" : "(): ZIO[R, E, Option[A]]", "member" : "zio.ZIO.asSome", "link" : "zio\/ZIO.html#asSome:zio.ZIO[R,E,Option[A]]", "kind" : "final def"}, {"label" : "asService", "tail" : "(arg0: zio.Tag[A1]): ZIO[R, E, Has[A1]]", "member" : "zio.ZIO.asService", "link" : "zio\/ZIO.html#asService[A1>:A](implicitevidence$1:zio.Tag[A1]):zio.ZIO[R,E,zio.Has[A1]]", "kind" : "final def"}, {"label" : "asRightError", "tail" : "(): ZIO[R, Either[Nothing, E], A]", "member" : "zio.ZIO.asRightError", "link" : "zio\/ZIO.html#asRightError:zio.ZIO[R,Either[Nothing,E],A]", "kind" : "final def"}, {"label" : "asRight", "tail" : "(): ZIO[R, E, Either[Nothing, A]]", "member" : "zio.ZIO.asRight", "link" : "zio\/ZIO.html#asRight:zio.ZIO[R,E,Either[Nothing,A]]", "kind" : "final def"}, {"label" : "asLeftError", "tail" : "(): ZIO[R, Either[E, Nothing], A]", "member" : "zio.ZIO.asLeftError", "link" : "zio\/ZIO.html#asLeftError:zio.ZIO[R,Either[E,Nothing],A]", "kind" : "final def"}, {"label" : "asLeft", "tail" : "(): ZIO[R, E, Either[A, Nothing]]", "member" : "zio.ZIO.asLeft", "link" : "zio\/ZIO.html#asLeft:zio.ZIO[R,E,Either[A,Nothing]]", "kind" : "final def"}, {"label" : "as", "tail" : "(b: => B): ZIO[R, E, B]", "member" : "zio.ZIO.as", "link" : "zio\/ZIO.html#as[B](b:=>B):zio.ZIO[R,E,B]", "kind" : "final def"}, {"label" : "acquireReleaseOnErrorWith", "tail" : "(release: (A) => URIO[R1, Any])(use: (A) => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZIO.acquireReleaseOnErrorWith", "link" : "zio\/ZIO.html#acquireReleaseOnErrorWith[R1<:R,E1>:E,B](release:A=>zio.URIO[R1,Any])(use:A=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "acquireReleaseExitWith", "tail" : "(): BracketExitAcquire[R, E, A]", "member" : "zio.ZIO.acquireReleaseExitWith", "link" : "zio\/ZIO.html#acquireReleaseExitWith:zio.ZIO.BracketExitAcquire[R,E,A]", "kind" : "final def"}, {"label" : "acquireReleaseExitWith", "tail" : "(release: (A, Exit[E1, B]) => URIO[R1, Any], use: (A) => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZIO.acquireReleaseExitWith", "link" : "zio\/ZIO.html#acquireReleaseExitWith[R1<:R,E1>:E,B](release:(A,zio.Exit[E1,B])=>zio.URIO[R1,Any],use:A=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "acquireRelease", "tail" : "(release: => URIO[R1, Any], use: => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZIO.acquireRelease", "link" : "zio\/ZIO.html#acquireRelease[R1<:R,E1>:E,B](release:=>zio.URIO[R1,Any],use:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "acquireRelease", "tail" : "(): BracketAcquire_[R1, E1]", "member" : "zio.ZIO.acquireRelease", "link" : "zio\/ZIO.html#acquireRelease[R1<:R,E1>:E]:zio.ZIO.BracketAcquire_[R1,E1]", "kind" : "final def"}, {"label" : "acquireReleaseWith", "tail" : "(): BracketAcquire[R, E, A]", "member" : "zio.ZIO.acquireReleaseWith", "link" : "zio\/ZIO.html#acquireReleaseWith:zio.ZIO.BracketAcquire[R,E,A]", "kind" : "final def"}, {"label" : "acquireReleaseWith", "tail" : "(release: (A) => URIO[R1, Any], use: (A) => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZIO.acquireReleaseWith", "link" : "zio\/ZIO.html#acquireReleaseWith[R1<:R,E1>:E,B](release:A=>zio.URIO[R1,Any],use:A=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "absorbWith", "tail" : "(f: (E) => Throwable): RIO[R, A]", "member" : "zio.ZIO.absorbWith", "link" : "zio\/ZIO.html#absorbWith(f:E=>Throwable):zio.RIO[R,A]", "kind" : "final def"}, {"label" : "absorb", "tail" : "(ev: IsSubtypeOfError[E, Throwable]): RIO[R, A]", "member" : "zio.ZIO.absorb", "link" : "zio\/ZIO.html#absorb(implicitev:zio.IsSubtypeOfError[E,Throwable]):zio.RIO[R,A]", "kind" : "final def"}, {"label" : "absolve", "tail" : "(ev: IsSubtypeOfOutput[A, Either[E1, B]]): ZIO[R, E1, B]", "member" : "zio.ZIO.absolve", "link" : "zio\/ZIO.html#absolve[E1>:E,B](implicitev:zio.IsSubtypeOfOutput[A,Either[E1,B]]):zio.ZIO[R,E1,B]", "kind" : "final def"}, {"label" : "||", "tail" : "(that: => ZIO[R1, E1, Boolean])(ev: <:<[A, Boolean]): ZIO[R1, E1, Boolean]", "member" : "zio.ZIO.||", "link" : "zio\/ZIO.html#||[R1<:R,E1>:E](that:=>zio.ZIO[R1,E1,Boolean])(implicitev:A<:<Boolean):zio.ZIO[R1,E1,Boolean]", "kind" : "final def"}, {"label" : "unary_!", "tail" : "(ev: <:<[A, Boolean]): ZIO[R1, E1, Boolean]", "member" : "zio.ZIO.unary_!", "link" : "zio\/ZIO.html#unary_![R1<:R,E1>:E](implicitev:A<:<Boolean):zio.ZIO[R1,E1,Boolean]", "kind" : "final def"}, {"label" : ">>=", "tail" : "(k: (A) => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZIO.>>=", "link" : "zio\/ZIO.html#>>=[R1<:R,E1>:E,B](k:A=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "<|>", "tail" : "(that: => ZIO[R1, E1, B]): ZIO[R1, E1, Either[A, B]]", "member" : "zio.ZIO.<|>", "link" : "zio\/ZIO.html#<|>[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,Either[A,B]]", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: => ZIO[R1, E2, A1])(ev: CanFail[E]): ZIO[R1, E2, A1]", "member" : "zio.ZIO.<>", "link" : "zio\/ZIO.html#<>[R1<:R,E2,A1>:A](that:=>zio.ZIO[R1,E2,A1])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E2,A1]", "kind" : "final def"}, {"label" : "<+>", "tail" : "(that: => ZIO[R1, E1, B])(ev: CanFail[E]): ZIO[R1, E1, Either[A, B]]", "member" : "zio.ZIO.<+>", "link" : "zio\/ZIO.html#<+>[R1<:R,E1,B](that:=>zio.ZIO[R1,E1,B])(implicitev:zio.CanFail[E]):zio.ZIO[R1,E1,Either[A,B]]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(that: => ZIO[R1, E1, B])(zippable: Zippable[A, B]): ZIO[R1, E1, Out]", "member" : "zio.ZIO.<*>", "link" : "zio\/ZIO.html#<*>[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B])(implicitzippable:zio.Zippable[A,B]):zio.ZIO[R1,E1,zippable.Out]", "kind" : "final def"}, {"label" : "<*", "tail" : "(that: => ZIO[R1, E1, B]): ZIO[R1, E1, A]", "member" : "zio.ZIO.<*", "link" : "zio\/ZIO.html#<*[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,A]", "kind" : "final def"}, {"label" : "<&>", "tail" : "(that: => ZIO[R1, E1, B])(zippable: Zippable[A, B]): ZIO[R1, E1, Out]", "member" : "zio.ZIO.<&>", "link" : "zio\/ZIO.html#<&>[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B])(implicitzippable:zio.Zippable[A,B]):zio.ZIO[R1,E1,zippable.Out]", "kind" : "final def"}, {"label" : "<&", "tail" : "(that: => ZIO[R1, E1, B]): ZIO[R1, E1, A]", "member" : "zio.ZIO.<&", "link" : "zio\/ZIO.html#<&[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(that: => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZIO.*>", "link" : "zio\/ZIO.html#*>[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "&>", "tail" : "(that: => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZIO.&>", "link" : "zio\/ZIO.html#&>[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "final def"}, {"label" : "&&&", "tail" : "(that: => ZIO[R1, E1, B])(zippable: Zippable[A, B]): ZIO[R1, E1, Out]", "member" : "zio.ZIO.&&&", "link" : "zio\/ZIO.html#&&&[R1<:R,E1>:E,B](that:=>zio.ZIO[R1,E1,B])(implicitzippable:zio.Zippable[A,B]):zio.ZIO[R1,E1,zippable.Out]", "kind" : "final def"}, {"label" : "&&", "tail" : "(that: => ZIO[R1, E1, Boolean])(ev: <:<[A, Boolean]): ZIO[R1, E1, Boolean]", "member" : "zio.ZIO.&&", "link" : "zio\/ZIO.html#&&[R1<:R,E1>:E](that:=>zio.ZIO[R1,E1,Boolean])(implicitev:A<:<Boolean):zio.ZIO[R1,E1,Boolean]", "kind" : "final def"}, {"label" : "!", "tail" : "(ev1: <:<[E, Throwable], ev2: CanFail[E]): ZIO[R, Nothing, A]", "member" : "zio.ZIO.!", "link" : "zio\/ZIO.html#!(implicitev1:E<:<Throwable,implicitev2:zio.CanFail[E]):zio.ZIO[R,Nothing,A]", "kind" : "final def"}, {"label" : "@@", "tail" : "(aspect: => ZIOAspect[LowerR, UpperR, LowerE, UpperE, LowerA, UpperA]): ZIO[UpperR, LowerE, LowerA]", "member" : "zio.ZIO.@@", "link" : "zio\/ZIO.html#@@[LowerR<:UpperR,UpperR<:R,LowerE>:E,UpperE>:LowerE,LowerA>:A,UpperA>:LowerA](aspect:=>zio.ZIOAspect[LowerR,UpperR,LowerE,UpperE,LowerA,UpperA]):zio.ZIO[UpperR,LowerE,LowerA]", "kind" : "final def"}, {"label" : "inject", "tail" : "(layers: ZLayer[_, E1, _]*): ZIO[Any, E1, A]", "member" : "zio.ZIOVersionSpecific.inject", "link" : "zio\/ZIO.html#inject[E1>:E](layers:zio.ZLayer[_,E1,_]*):zio.ZIO[Any,E1,A]", "kind" : "macro def"}, {"label" : "injectSome", "tail" : "(): ProvideSomeLayerPartiallyApplied[R0, R, E, A]", "member" : "zio.ZIOVersionSpecific.injectSome", "link" : "zio\/ZIO.html#injectSome[R0<:zio.Has[_]]:zio.ProvideSomeLayerPartiallyApplied[R0,R,E,A]", "kind" : "def"}, {"label" : "injectCustom", "tail" : "(layers: ZLayer[_, E1, _]*): ZIO[zio.ZEnv, E1, A]", "member" : "zio.ZIOVersionSpecific.injectCustom", "link" : "zio\/ZIO.html#injectCustom[E1>:E](layers:zio.ZLayer[_,E1,_]*):zio.ZIO[zio.ZEnv,E1,A]", "kind" : "macro def"}, {"label" : "toCompletableFutureWith", "tail" : "(f: (E) => Throwable): URIO[R, CompletableFuture[A1]]", "member" : "zio.ZIOPlatformSpecific.toCompletableFutureWith", "link" : "zio\/ZIO.html#toCompletableFutureWith[A1>:A](f:E=>Throwable):zio.URIO[R,java.util.concurrent.CompletableFuture[A1]]", "kind" : "def"}, {"label" : "toCompletableFuture", "tail" : "(ev: IsSubtypeOfError[E, Throwable]): URIO[R, CompletableFuture[A1]]", "member" : "zio.ZIOPlatformSpecific.toCompletableFuture", "link" : "zio\/ZIO.html#toCompletableFuture[A1>:A](implicitev:zio.IsSubtypeOfError[E,Throwable]):zio.URIO[R,java.util.concurrent.CompletableFuture[A1]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZIO.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZIO.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZIO.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZIO.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZIO.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZIO.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZIO.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIO.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIO.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIO.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZIO.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZIO.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZIO.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZIO.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZIO.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZIO.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZIO.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZIO.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZIO.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tag", "tail" : "(): Int", "member" : "zio.ZIO.tag", "link" : "zio\/ZIO.html#tag:Int", "kind" : "abstract def"}], "shortDescription" : "A ZIO[R, E, A] value is an immutable value that lazily describes aworkflow or job."}, {"name" : "zio.ZIOApp", "object" : "zio\/ZIOApp$.html", "members_object" : [{"label" : "fromZIO", "tail" : "(run0: ZIO[zio.ZEnv with Has[ZIOAppArgs], Any, Any]): ZIOApp", "member" : "zio.ZIOApp.fromZIO", "link" : "zio\/ZIOApp$.html#fromZIO(run0:zio.ZIO[zio.ZEnvwithzio.Has[zio.ZIOAppArgs],Any,Any]):zio.ZIOApp", "kind" : "def"}, {"label" : "apply", "tail" : "(run0: ZIO[R with zio.ZEnv with Has[ZIOAppArgs], Any, Any], layer0: ZLayer[Has[ZIOAppArgs], Any, R], hook0: RuntimeConfigAspect)(tagged: zio.Tag[R]): ZIOApp", "member" : "zio.ZIOApp.apply", "link" : "zio\/ZIOApp$.html#apply[R<:zio.Has[_]](run0:zio.ZIO[Rwithzio.ZEnvwithzio.Has[zio.ZIOAppArgs],Any,Any],layer0:zio.ZLayer[zio.Has[zio.ZIOAppArgs],Any,R],hook0:zio.RuntimeConfigAspect)(implicittagged:zio.Tag[R]):zio.ZIOApp", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZIOApp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZIOApp$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZIOApp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZIOApp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZIOApp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZIOApp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZIOApp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOApp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOApp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOApp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZIOApp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZIOApp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZIOApp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZIOApp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZIOApp$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZIOApp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZIOApp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZIOApp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZIOApp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/ZIOApp.html", "kind" : "trait", "members_trait" : [{"label" : "runtime", "tail" : "(): Runtime[zio.ZEnv]", "member" : "zio.ZIOApp.runtime", "link" : "zio\/ZIOApp.html#runtime:zio.Runtime[zio.ZEnv]", "kind" : "def"}, {"label" : "main", "tail" : "(args0: Array[String]): Unit", "member" : "zio.ZIOApp.main", "link" : "zio\/ZIOApp.html#main(args0:Array[String]):Unit", "kind" : "final def"}, {"label" : "invoke", "tail" : "(args: Chunk[String]): ZIO[zio.ZEnv, Nothing, ExitCode]", "member" : "zio.ZIOApp.invoke", "link" : "zio\/ZIOApp.html#invoke(args:zio.Chunk[String]):zio.ZIO[zio.ZEnv,Nothing,zio.ExitCode]", "kind" : "final def"}, {"label" : "hook", "tail" : "(): RuntimeConfigAspect", "member" : "zio.ZIOApp.hook", "link" : "zio\/ZIOApp.html#hook:zio.RuntimeConfigAspect", "kind" : "def"}, {"label" : "exit", "tail" : "(code: ExitCode): UIO[Unit]", "member" : "zio.ZIOApp.exit", "link" : "zio\/ZIOApp.html#exit(code:zio.ExitCode):zio.UIO[Unit]", "kind" : "final def"}, {"label" : "args", "tail" : "(): ZIO[Has[ZIOAppArgs], Nothing, Chunk[String]]", "member" : "zio.ZIOApp.args", "link" : "zio\/ZIOApp.html#args:zio.ZIO[zio.Has[zio.ZIOAppArgs],Nothing,zio.Chunk[String]]", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: ZIOApp): ZIOApp", "member" : "zio.ZIOApp.<>", "link" : "zio\/ZIOApp.html#<>(that:zio.ZIOApp):zio.ZIOApp", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZIOApp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZIOApp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZIOApp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZIOApp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZIOApp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZIOApp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZIOApp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOApp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOApp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOApp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZIOApp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZIOApp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZIOApp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZIOApp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZIOApp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZIOApp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZIOApp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZIOApp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZIOApp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(): ZIO[Environment with zio.ZEnv with Has[ZIOAppArgs], Any, Any]", "member" : "zio.ZIOApp.run", "link" : "zio\/ZIOApp.html#run:zio.ZIO[ZIOApp.this.Environmentwithzio.ZEnvwithzio.Has[zio.ZIOAppArgs],Any,Any]", "kind" : "abstract def"}, {"label" : "layer", "tail" : "(): ZLayer[Has[ZIOAppArgs], Any, Environment]", "member" : "zio.ZIOApp.layer", "link" : "zio\/ZIOApp.html#layer:zio.ZLayer[zio.Has[zio.ZIOAppArgs],Any,ZIOApp.this.Environment]", "kind" : "abstract def"}, {"member" : "zio.ZIOApp.Environment", "error" : "unsupported entity"}, {"label" : "tag", "tail" : "(): zio.Tag[Environment]", "member" : "zio.ZIOApp.tag", "link" : "zio\/ZIOApp.html#tag:zio.Tag[ZIOApp.this.Environment]", "kind" : "implicit abstract def"}], "shortDescription" : "An entry point for a ZIO application that allows sharing layers betweenapplications."}, {"name" : "zio.ZIOAppArgs", "shortDescription" : "A service that contains command-line arguments of an application.", "members_case class" : [{"member" : "zio.ZIOAppArgs#<init>", "error" : "unsupported entity"}, {"label" : "args", "tail" : ": Chunk[String]", "member" : "zio.ZIOAppArgs.args", "link" : "zio\/ZIOAppArgs.html#args:zio.Chunk[String]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/ZIOAppArgs.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZIOAppArgs.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZIOAppArgs.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZIOAppArgs.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZIOAppArgs.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZIOAppArgs.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZIOAppArgs.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZIOAppArgs.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOAppArgs.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOAppArgs.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOAppArgs.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZIOAppArgs.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZIOAppArgs.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZIOAppArgs.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZIOAppArgs.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZIOAppArgs.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZIOAppArgs.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/ZIOAppArgs.html", "kind" : "case class"}, {"name" : "zio.ZIOAppDefault", "object" : "zio\/ZIOAppDefault$.html", "members_object" : [{"label" : "fromZIO", "tail" : "(run0: ZIO[zio.ZEnv with Has[ZIOAppArgs], Any, Any]): ZIOAppDefault", "member" : "zio.ZIOAppDefault.fromZIO", "link" : "zio\/ZIOAppDefault$.html#fromZIO(run0:zio.ZIO[zio.ZEnvwithzio.Has[zio.ZIOAppArgs],Any,Any]):zio.ZIOAppDefault", "kind" : "def"}, {"label" : "apply", "tail" : "(run0: ZIO[zio.ZEnv with Has[ZIOAppArgs], Any, Any], hook0: RuntimeConfigAspect): ZIOAppDefault", "member" : "zio.ZIOAppDefault.apply", "link" : "zio\/ZIOAppDefault$.html#apply(run0:zio.ZIO[zio.ZEnvwithzio.Has[zio.ZIOAppArgs],Any,Any],hook0:zio.RuntimeConfigAspect):zio.ZIOAppDefault", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZIOAppDefault$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZIOAppDefault$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZIOAppDefault$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZIOAppDefault$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZIOAppDefault$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZIOAppDefault$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZIOAppDefault$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOAppDefault$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOAppDefault$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOAppDefault$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZIOAppDefault$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZIOAppDefault$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZIOAppDefault$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZIOAppDefault$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZIOAppDefault$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZIOAppDefault$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZIOAppDefault$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZIOAppDefault$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZIOAppDefault$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/ZIOAppDefault.html", "kind" : "trait", "members_trait" : [{"label" : "tag", "tail" : ": zio.Tag[zio.ZEnv]", "member" : "zio.ZIOAppDefault.tag", "link" : "zio\/ZIOAppDefault.html#tag:zio.Tag[zio.ZEnv]", "kind" : "val"}, {"label" : "layer", "tail" : ": ZLayer[Has[ZIOAppArgs], Any, zio.ZEnv]", "member" : "zio.ZIOAppDefault.layer", "link" : "zio\/ZIOAppDefault.html#layer:zio.ZLayer[zio.Has[zio.ZIOAppArgs],Any,zio.ZEnv]", "kind" : "val"}, {"label" : "Environment", "tail" : "", "member" : "zio.ZIOAppDefault.Environment", "link" : "zio\/ZIOAppDefault.html#Environment=zio.ZEnv", "kind" : "type"}, {"label" : "runtime", "tail" : "(): Runtime[zio.ZEnv]", "member" : "zio.ZIOApp.runtime", "link" : "zio\/ZIOAppDefault.html#runtime:zio.Runtime[zio.ZEnv]", "kind" : "def"}, {"label" : "main", "tail" : "(args0: Array[String]): Unit", "member" : "zio.ZIOApp.main", "link" : "zio\/ZIOAppDefault.html#main(args0:Array[String]):Unit", "kind" : "final def"}, {"label" : "invoke", "tail" : "(args: Chunk[String]): ZIO[zio.ZEnv, Nothing, ExitCode]", "member" : "zio.ZIOApp.invoke", "link" : "zio\/ZIOAppDefault.html#invoke(args:zio.Chunk[String]):zio.ZIO[zio.ZEnv,Nothing,zio.ExitCode]", "kind" : "final def"}, {"label" : "hook", "tail" : "(): RuntimeConfigAspect", "member" : "zio.ZIOApp.hook", "link" : "zio\/ZIOAppDefault.html#hook:zio.RuntimeConfigAspect", "kind" : "def"}, {"label" : "exit", "tail" : "(code: ExitCode): UIO[Unit]", "member" : "zio.ZIOApp.exit", "link" : "zio\/ZIOAppDefault.html#exit(code:zio.ExitCode):zio.UIO[Unit]", "kind" : "final def"}, {"label" : "args", "tail" : "(): ZIO[Has[ZIOAppArgs], Nothing, Chunk[String]]", "member" : "zio.ZIOApp.args", "link" : "zio\/ZIOAppDefault.html#args:zio.ZIO[zio.Has[zio.ZIOAppArgs],Nothing,zio.Chunk[String]]", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: ZIOApp): ZIOApp", "member" : "zio.ZIOApp.<>", "link" : "zio\/ZIOAppDefault.html#<>(that:zio.ZIOApp):zio.ZIOApp", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZIOAppDefault.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZIOAppDefault.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZIOAppDefault.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZIOAppDefault.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZIOAppDefault.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZIOAppDefault.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZIOAppDefault.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOAppDefault.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOAppDefault.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOAppDefault.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZIOAppDefault.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZIOAppDefault.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZIOAppDefault.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZIOAppDefault.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZIOAppDefault.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZIOAppDefault.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZIOAppDefault.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZIOAppDefault.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZIOAppDefault.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(): ZIO[Environment with zio.ZEnv with Has[ZIOAppArgs], Any, Any]", "member" : "zio.ZIOApp.run", "link" : "zio\/ZIOAppDefault.html#run:zio.ZIO[ZIOApp.this.Environmentwithzio.ZEnvwithzio.Has[zio.ZIOAppArgs],Any,Any]", "kind" : "abstract def"}], "shortDescription" : "The entry point for a ZIO application."}, {"name" : "zio.ZIOAspect", "object" : "zio\/ZIOAspect$.html", "members_object" : [{"label" : "untraced", "tail" : ": ZIOAspect[Nothing, Any, Nothing, Any, Nothing, Any]", "member" : "zio.ZIOAspect.untraced", "link" : "zio\/ZIOAspect$.html#untraced:zio.ZIOAspect[Nothing,Any,Nothing,Any,Nothing,Any]", "kind" : "val"}, {"label" : "traced", "tail" : ": ZIOAspect[Nothing, Any, Nothing, Any, Nothing, Any]", "member" : "zio.ZIOAspect.traced", "link" : "zio\/ZIOAspect$.html#traced:zio.ZIOAspect[Nothing,Any,Nothing,Any,Nothing,Any]", "kind" : "val"}, {"label" : "timeoutFail", "tail" : "(e: => E1)(d: zio.Duration): ZIOAspect[Nothing, Has[Clock], E1, Any, Nothing, Any]", "member" : "zio.ZIOAspect.timeoutFail", "link" : "zio\/ZIOAspect$.html#timeoutFail[E1](e:=>E1)(d:zio.Duration):zio.ZIOAspect[Nothing,zio.Has[zio.Clock],E1,Any,Nothing,Any]", "kind" : "def"}, {"label" : "retry", "tail" : "(schedule: Schedule[R1, E1, Any]): ZIOAspect[Nothing, R1, Nothing, E1, Nothing, Any]", "member" : "zio.ZIOAspect.retry", "link" : "zio\/ZIOAspect$.html#retry[R1<:zio.Has[zio.Clock],E1](schedule:zio.Schedule[R1,E1,Any]):zio.ZIOAspect[Nothing,R1,Nothing,E1,Nothing,Any]", "kind" : "def"}, {"label" : "onExecutor", "tail" : "(executor: Executor): ZIOAspect[Nothing, Any, Nothing, Any, Nothing, Any]", "member" : "zio.ZIOAspect.onExecutor", "link" : "zio\/ZIOAspect$.html#onExecutor(executor:zio.Executor):zio.ZIOAspect[Nothing,Any,Nothing,Any,Nothing,Any]", "kind" : "def"}, {"label" : "onExecutionContext", "tail" : "(ec: ExecutionContext): ZIOAspect[Nothing, Any, Nothing, Any, Nothing, Any]", "member" : "zio.ZIOAspect.onExecutionContext", "link" : "zio\/ZIOAspect$.html#onExecutionContext(ec:scala.concurrent.ExecutionContext):zio.ZIOAspect[Nothing,Any,Nothing,Any,Nothing,Any]", "kind" : "def"}, {"label" : "lockExecutionContext", "tail" : "(ec: ExecutionContext): ZIOAspect[Nothing, Any, Nothing, Any, Nothing, Any]", "member" : "zio.ZIOAspect.lockExecutionContext", "link" : "zio\/ZIOAspect$.html#lockExecutionContext(ec:scala.concurrent.ExecutionContext):zio.ZIOAspect[Nothing,Any,Nothing,Any,Nothing,Any]", "kind" : "def"}, {"label" : "loggedWith", "tail" : "(f: (A) => String): ZIOAspect[Nothing, Any, Nothing, Any, Nothing, A]", "member" : "zio.ZIOAspect.loggedWith", "link" : "zio\/ZIOAspect$.html#loggedWith[A](f:A=>String):zio.ZIOAspect[Nothing,Any,Nothing,Any,Nothing,A]", "kind" : "def"}, {"label" : "logged", "tail" : "(label: String): ZIOAspect[Nothing, Any, Nothing, Any, Nothing, Any]", "member" : "zio.ZIOAspect.logged", "link" : "zio\/ZIOAspect$.html#logged(label:String):zio.ZIOAspect[Nothing,Any,Nothing,Any,Nothing,Any]", "kind" : "def"}, {"label" : "logged", "tail" : ": ZIOAspect[Nothing, Any, Nothing, Any, Nothing, Any]", "member" : "zio.ZIOAspect.logged", "link" : "zio\/ZIOAspect$.html#logged:zio.ZIOAspect[Nothing,Any,Nothing,Any,Nothing,Any]", "kind" : "val"}, {"label" : "lock", "tail" : "(executor: Executor): ZIOAspect[Nothing, Any, Nothing, Any, Nothing, Any]", "member" : "zio.ZIOAspect.lock", "link" : "zio\/ZIOAspect$.html#lock(executor:zio.Executor):zio.ZIOAspect[Nothing,Any,Nothing,Any,Nothing,Any]", "kind" : "def"}, {"label" : "debug", "tail" : ": ZIOAspect[Nothing, Any, Nothing, Any, Nothing, Any]", "member" : "zio.ZIOAspect.debug", "link" : "zio\/ZIOAspect$.html#debug:zio.ZIOAspect[Nothing,Any,Nothing,Any,Nothing,Any]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZIOAspect$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZIOAspect$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZIOAspect$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZIOAspect$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZIOAspect$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZIOAspect$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZIOAspect$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOAspect$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOAspect$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOAspect$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZIOAspect$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZIOAspect$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZIOAspect$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZIOAspect$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZIOAspect$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZIOAspect$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZIOAspect$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZIOAspect$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZIOAspect$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/ZIOAspect.html", "kind" : "trait", "members_trait" : [{"label" : "andThen", "tail" : "(that: ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]): ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]", "member" : "zio.ZIOAspect.andThen", "link" : "zio\/ZIOAspect.html#andThen[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE,LowerA1>:LowerA,UpperA1<:UpperA](that:zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]):zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]", "kind" : "def"}, {"label" : "@@", "tail" : "(that: ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]): ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]", "member" : "zio.ZIOAspect.@@", "link" : "zio\/ZIOAspect.html#@@[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE,LowerA1>:LowerA,UpperA1<:UpperA](that:zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]):zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]", "kind" : "def"}, {"label" : ">>>", "tail" : "(that: ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]): ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]", "member" : "zio.ZIOAspect.>>>", "link" : "zio\/ZIOAspect.html#>>>[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE,LowerA1>:LowerA,UpperA1<:UpperA](that:zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]):zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZIOAspect.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZIOAspect.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZIOAspect.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZIOAspect.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZIOAspect.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZIOAspect.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZIOAspect.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOAspect.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOAspect.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOAspect.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZIOAspect.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZIOAspect.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZIOAspect.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZIOAspect.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZIOAspect.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZIOAspect.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZIOAspect.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZIOAspect.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZIOAspect.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(zio: ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIOAspect.apply", "link" : "zio\/ZIOAspect.html#apply[R>:LowerR<:UpperR,E>:LowerE<:UpperE,A>:LowerA<:UpperA](zio:zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.ZIOMetric", "object" : "zio\/ZIOMetric$.html", "members_object" : [{"label" : "SetCount", "tail" : "", "member" : "zio.ZIOMetric.SetCount", "link" : "zio\/ZIOMetric$.html#SetCount[A]extendsZIOMetric[A]", "kind" : "abstract class"}, {"label" : "Summary", "tail" : "", "member" : "zio.ZIOMetric.Summary", "link" : "zio\/ZIOMetric$.html#Summary[A]extendsZIOMetric[A]", "kind" : "abstract class"}, {"label" : "Histogram", "tail" : "", "member" : "zio.ZIOMetric.Histogram", "link" : "zio\/ZIOMetric$.html#Histogram[A]extendsZIOMetric[A]", "kind" : "abstract class"}, {"label" : "Gauge", "tail" : "", "member" : "zio.ZIOMetric.Gauge", "link" : "zio\/ZIOMetric$.html#Gauge[A]extendsZIOMetric[A]", "kind" : "abstract class"}, {"label" : "Counter", "tail" : "", "member" : "zio.ZIOMetric.Counter", "link" : "zio\/ZIOMetric$.html#Counter[-A]extendsZIOMetric[A]", "kind" : "abstract class"}, {"label" : "occurrencesWith", "tail" : "(name: String, setTag: String, tags: MetricLabel*)(f: (A) => String): SetCount[A]", "member" : "zio.ZIOMetric.occurrencesWith", "link" : "zio\/ZIOMetric$.html#occurrencesWith[A](name:String,setTag:String,tags:zio.MetricLabel*)(f:A=>String):zio.ZIOMetric.SetCount[A]", "kind" : "def"}, {"label" : "occurrences", "tail" : "(name: String, setTag: String, tags: MetricLabel*): SetCount[String]", "member" : "zio.ZIOMetric.occurrences", "link" : "zio\/ZIOMetric$.html#occurrences(name:String,setTag:String,tags:zio.MetricLabel*):zio.ZIOMetric.SetCount[String]", "kind" : "def"}, {"label" : "observeSummaryWith", "tail" : "(name: String, maxAge: zio.Duration, maxSize: Int, error: Double, quantiles: Chunk[Double], tags: MetricLabel*)(f: (A) => Double): Summary[A]", "member" : "zio.ZIOMetric.observeSummaryWith", "link" : "zio\/ZIOMetric$.html#observeSummaryWith[A](name:String,maxAge:zio.Duration,maxSize:Int,error:Double,quantiles:zio.Chunk[Double],tags:zio.MetricLabel*)(f:A=>Double):zio.ZIOMetric.Summary[A]", "kind" : "def"}, {"label" : "observeSummary", "tail" : "(name: String, maxAge: zio.Duration, maxSize: Int, error: Double, quantiles: Chunk[Double], tags: MetricLabel*): Summary[Double]", "member" : "zio.ZIOMetric.observeSummary", "link" : "zio\/ZIOMetric$.html#observeSummary(name:String,maxAge:zio.Duration,maxSize:Int,error:Double,quantiles:zio.Chunk[Double],tags:zio.MetricLabel*):zio.ZIOMetric.Summary[Double]", "kind" : "def"}, {"label" : "observeHistogramWith", "tail" : "(name: String, boundaries: Chunk[Double], tags: MetricLabel*)(f: (A) => Double): Histogram[A]", "member" : "zio.ZIOMetric.observeHistogramWith", "link" : "zio\/ZIOMetric$.html#observeHistogramWith[A](name:String,boundaries:zio.Chunk[Double],tags:zio.MetricLabel*)(f:A=>Double):zio.ZIOMetric.Histogram[A]", "kind" : "def"}, {"label" : "observeHistogram", "tail" : "(name: String, boundaries: Chunk[Double], tags: MetricLabel*): Histogram[Double]", "member" : "zio.ZIOMetric.observeHistogram", "link" : "zio\/ZIOMetric$.html#observeHistogram(name:String,boundaries:zio.Chunk[Double],tags:zio.MetricLabel*):zio.ZIOMetric.Histogram[Double]", "kind" : "def"}, {"label" : "observeDurations", "tail" : "(name: String, boundaries: Chunk[Double], tags: MetricLabel*)(f: (zio.Duration) => Double): Histogram[A]", "member" : "zio.ZIOMetric.observeDurations", "link" : "zio\/ZIOMetric$.html#observeDurations[A](name:String,boundaries:zio.Chunk[Double],tags:zio.MetricLabel*)(f:zio.Duration=>Double):zio.ZIOMetric.Histogram[A]", "kind" : "def"}, {"label" : "adjustGaugeWith", "tail" : "(name: String, tags: MetricLabel*)(f: (A) => Double): Gauge[A]", "member" : "zio.ZIOMetric.adjustGaugeWith", "link" : "zio\/ZIOMetric$.html#adjustGaugeWith[A](name:String,tags:zio.MetricLabel*)(f:A=>Double):zio.ZIOMetric.Gauge[A]", "kind" : "def"}, {"label" : "adjustGauge", "tail" : "(name: String, tags: MetricLabel*): Gauge[Double]", "member" : "zio.ZIOMetric.adjustGauge", "link" : "zio\/ZIOMetric$.html#adjustGauge(name:String,tags:zio.MetricLabel*):zio.ZIOMetric.Gauge[Double]", "kind" : "def"}, {"label" : "setGaugeWith", "tail" : "(name: String, tags: MetricLabel*)(f: (A) => Double): Gauge[A]", "member" : "zio.ZIOMetric.setGaugeWith", "link" : "zio\/ZIOMetric$.html#setGaugeWith[A](name:String,tags:zio.MetricLabel*)(f:A=>Double):zio.ZIOMetric.Gauge[A]", "kind" : "def"}, {"label" : "setGauge", "tail" : "(name: String, tags: MetricLabel*): Gauge[Double]", "member" : "zio.ZIOMetric.setGauge", "link" : "zio\/ZIOMetric$.html#setGauge(name:String,tags:zio.MetricLabel*):zio.ZIOMetric.Gauge[Double]", "kind" : "def"}, {"label" : "countErrors", "tail" : "(name: String, tags: MetricLabel*): Counter[Any]", "member" : "zio.ZIOMetric.countErrors", "link" : "zio\/ZIOMetric$.html#countErrors(name:String,tags:zio.MetricLabel*):zio.ZIOMetric.Counter[Any]", "kind" : "def"}, {"label" : "countValueWith", "tail" : "(name: String, tags: MetricLabel*)(f: (A) => Double): Counter[A]", "member" : "zio.ZIOMetric.countValueWith", "link" : "zio\/ZIOMetric$.html#countValueWith[A](name:String,tags:zio.MetricLabel*)(f:A=>Double):zio.ZIOMetric.Counter[A]", "kind" : "def"}, {"label" : "countValue", "tail" : "(name: String, tags: MetricLabel*): Counter[Double]", "member" : "zio.ZIOMetric.countValue", "link" : "zio\/ZIOMetric$.html#countValue(name:String,tags:zio.MetricLabel*):zio.ZIOMetric.Counter[Double]", "kind" : "def"}, {"label" : "count", "tail" : "(name: String, tags: MetricLabel*): Counter[Any]", "member" : "zio.ZIOMetric.count", "link" : "zio\/ZIOMetric$.html#count(name:String,tags:zio.MetricLabel*):zio.ZIOMetric.Counter[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZIOMetric$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZIOMetric$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZIOMetric$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZIOMetric$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZIOMetric$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZIOMetric$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZIOMetric$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOMetric$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOMetric$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOMetric$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZIOMetric$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZIOMetric$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZIOMetric$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZIOMetric$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZIOMetric$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZIOMetric$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZIOMetric$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZIOMetric$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZIOMetric$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/ZIOMetric.html", "kind" : "trait", "members_trait" : [{"label" : "andThen", "tail" : "(that: ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]): ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]", "member" : "zio.ZIOAspect.andThen", "link" : "zio\/ZIOMetric.html#andThen[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE,LowerA1>:LowerA,UpperA1<:UpperA](that:zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]):zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]", "kind" : "def"}, {"label" : "@@", "tail" : "(that: ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]): ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]", "member" : "zio.ZIOAspect.@@", "link" : "zio\/ZIOMetric.html#@@[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE,LowerA1>:LowerA,UpperA1<:UpperA](that:zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]):zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]", "kind" : "def"}, {"label" : ">>>", "tail" : "(that: ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]): ZIOAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]", "member" : "zio.ZIOAspect.>>>", "link" : "zio\/ZIOMetric.html#>>>[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE,LowerA1>:LowerA,UpperA1<:UpperA](that:zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]):zio.ZIOAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZIOMetric.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZIOMetric.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZIOMetric.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZIOMetric.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZIOMetric.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZIOMetric.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZIOMetric.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOMetric.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOMetric.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZIOMetric.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZIOMetric.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZIOMetric.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZIOMetric.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZIOMetric.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZIOMetric.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZIOMetric.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZIOMetric.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZIOMetric.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZIOMetric.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(zio: ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.ZIOAspect.apply", "link" : "zio\/ZIOMetric.html#apply[R>:LowerR<:UpperR,E>:LowerE<:UpperE,A>:LowerA<:UpperA](zio:zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "abstract def"}], "shortDescription" : "A ZIOMetric is able to add collection of metrics to a ZIO effect withoutchanging its environment or error types."}, {"name" : "zio.Zippable", "object" : "zio\/Zippable$.html", "members_object" : [{"label" : "ZippableLeftIdentity", "tail" : "(): Out[Unit, A, A]", "member" : "zio.Zippable.ZippableLeftIdentity", "link" : "zio\/Zippable$.html#ZippableLeftIdentity[A]:zio.Zippable.Out[Unit,A,A]", "kind" : "implicit def"}, {"label" : "Out", "tail" : "", "member" : "zio.Zippable.Out", "link" : "zio\/Zippable$.html#Out[-A,-B,C]=zio.Zippable[A,B]{typeOut=C}", "kind" : "type"}, {"label" : "ZippableRightIdentity", "tail" : "(): Out[A, Unit, A]", "member" : "zio.ZippableLowPriority1.ZippableRightIdentity", "link" : "zio\/Zippable$.html#ZippableRightIdentity[A]:zio.Zippable.Out[A,Unit,A]", "kind" : "implicit def"}, {"label" : "Zippable22", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, Z)]", "member" : "zio.ZippableLowPriority2.Zippable22", "link" : "zio\/Zippable$.html#Zippable22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z)]", "kind" : "implicit def"}, {"label" : "Zippable21", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Z)]", "member" : "zio.ZippableLowPriority2.Zippable21", "link" : "zio\/Zippable$.html#Zippable21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z)]", "kind" : "implicit def"}, {"label" : "Zippable20", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Z)]", "member" : "zio.ZippableLowPriority2.Zippable20", "link" : "zio\/Zippable$.html#Zippable20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z)]", "kind" : "implicit def"}, {"label" : "Zippable19", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Z)]", "member" : "zio.ZippableLowPriority2.Zippable19", "link" : "zio\/Zippable$.html#Zippable19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z)]", "kind" : "implicit def"}, {"label" : "Zippable18", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Z)]", "member" : "zio.ZippableLowPriority2.Zippable18", "link" : "zio\/Zippable$.html#Zippable18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z)]", "kind" : "implicit def"}, {"label" : "Zippable17", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Z)]", "member" : "zio.ZippableLowPriority2.Zippable17", "link" : "zio\/Zippable$.html#Zippable17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z)]", "kind" : "implicit def"}, {"label" : "Zippable16", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Z)]", "member" : "zio.ZippableLowPriority2.Zippable16", "link" : "zio\/Zippable$.html#Zippable16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z)]", "kind" : "implicit def"}, {"label" : "Zippable15", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, Z)]", "member" : "zio.ZippableLowPriority2.Zippable15", "link" : "zio\/Zippable$.html#Zippable15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z)]", "kind" : "implicit def"}, {"label" : "Zippable14", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, Z)]", "member" : "zio.ZippableLowPriority2.Zippable14", "link" : "zio\/Zippable$.html#Zippable14[A,B,C,D,E,F,G,H,I,J,K,L,M,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,Z)]", "kind" : "implicit def"}, {"label" : "Zippable13", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L), Z, (A, B, C, D, E, F, G, H, I, J, K, L, Z)]", "member" : "zio.ZippableLowPriority2.Zippable13", "link" : "zio\/Zippable$.html#Zippable13[A,B,C,D,E,F,G,H,I,J,K,L,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L),Z,(A,B,C,D,E,F,G,H,I,J,K,L,Z)]", "kind" : "implicit def"}, {"label" : "Zippable12", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K), Z, (A, B, C, D, E, F, G, H, I, J, K, Z)]", "member" : "zio.ZippableLowPriority2.Zippable12", "link" : "zio\/Zippable$.html#Zippable12[A,B,C,D,E,F,G,H,I,J,K,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K),Z,(A,B,C,D,E,F,G,H,I,J,K,Z)]", "kind" : "implicit def"}, {"label" : "Zippable11", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J), Z, (A, B, C, D, E, F, G, H, I, J, Z)]", "member" : "zio.ZippableLowPriority2.Zippable11", "link" : "zio\/Zippable$.html#Zippable11[A,B,C,D,E,F,G,H,I,J,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J),Z,(A,B,C,D,E,F,G,H,I,J,Z)]", "kind" : "implicit def"}, {"label" : "Zippable10", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I), Z, (A, B, C, D, E, F, G, H, I, Z)]", "member" : "zio.ZippableLowPriority2.Zippable10", "link" : "zio\/Zippable$.html#Zippable10[A,B,C,D,E,F,G,H,I,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I),Z,(A,B,C,D,E,F,G,H,I,Z)]", "kind" : "implicit def"}, {"label" : "Zippable9", "tail" : "(): Out[(A, B, C, D, E, F, G, H), Z, (A, B, C, D, E, F, G, H, Z)]", "member" : "zio.ZippableLowPriority2.Zippable9", "link" : "zio\/Zippable$.html#Zippable9[A,B,C,D,E,F,G,H,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H),Z,(A,B,C,D,E,F,G,H,Z)]", "kind" : "implicit def"}, {"label" : "Zippable8", "tail" : "(): Out[(A, B, C, D, E, F, G), Z, (A, B, C, D, E, F, G, Z)]", "member" : "zio.ZippableLowPriority2.Zippable8", "link" : "zio\/Zippable$.html#Zippable8[A,B,C,D,E,F,G,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G),Z,(A,B,C,D,E,F,G,Z)]", "kind" : "implicit def"}, {"label" : "Zippable7", "tail" : "(): Out[(A, B, C, D, E, F), Z, (A, B, C, D, E, F, Z)]", "member" : "zio.ZippableLowPriority2.Zippable7", "link" : "zio\/Zippable$.html#Zippable7[A,B,C,D,E,F,Z]:zio.Zippable.Out[(A,B,C,D,E,F),Z,(A,B,C,D,E,F,Z)]", "kind" : "implicit def"}, {"label" : "Zippable6", "tail" : "(): Out[(A, B, C, D, E), Z, (A, B, C, D, E, Z)]", "member" : "zio.ZippableLowPriority2.Zippable6", "link" : "zio\/Zippable$.html#Zippable6[A,B,C,D,E,Z]:zio.Zippable.Out[(A,B,C,D,E),Z,(A,B,C,D,E,Z)]", "kind" : "implicit def"}, {"label" : "Zippable5", "tail" : "(): Out[(A, B, C, D), Z, (A, B, C, D, Z)]", "member" : "zio.ZippableLowPriority2.Zippable5", "link" : "zio\/Zippable$.html#Zippable5[A,B,C,D,Z]:zio.Zippable.Out[(A,B,C,D),Z,(A,B,C,D,Z)]", "kind" : "implicit def"}, {"label" : "Zippable4", "tail" : "(): Out[(A, B, C), Z, (A, B, C, Z)]", "member" : "zio.ZippableLowPriority2.Zippable4", "link" : "zio\/Zippable$.html#Zippable4[A,B,C,Z]:zio.Zippable.Out[(A,B,C),Z,(A,B,C,Z)]", "kind" : "implicit def"}, {"label" : "Zippable3", "tail" : "(): Out[(A, B), Z, (A, B, Z)]", "member" : "zio.ZippableLowPriority2.Zippable3", "link" : "zio\/Zippable$.html#Zippable3[A,B,Z]:zio.Zippable.Out[(A,B),Z,(A,B,Z)]", "kind" : "implicit def"}, {"label" : "Zippable2", "tail" : "(): Out[A, B, (A, B)]", "member" : "zio.ZippableLowPriority3.Zippable2", "link" : "zio\/Zippable$.html#Zippable2[A,B]:zio.Zippable.Out[A,B,(A,B)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Zippable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Zippable$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Zippable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Zippable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Zippable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Zippable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Zippable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Zippable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Zippable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Zippable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Zippable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Zippable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Zippable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Zippable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Zippable$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Zippable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Zippable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Zippable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Zippable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/Zippable.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/Zippable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/Zippable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/Zippable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/Zippable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/Zippable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/Zippable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/Zippable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Zippable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Zippable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/Zippable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/Zippable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/Zippable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/Zippable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/Zippable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/Zippable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/Zippable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/Zippable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/Zippable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/Zippable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "zip", "tail" : "(left: A, right: B): Out", "member" : "zio.Zippable.zip", "link" : "zio\/Zippable.html#zip(left:A,right:B):Zippable.this.Out", "kind" : "abstract def"}, {"member" : "zio.Zippable.Out", "error" : "unsupported entity"}], "shortDescription" : ""}, {"name" : "zio.ZippableLowPriority1", "trait" : "zio\/ZippableLowPriority1.html", "kind" : "trait", "members_trait" : [{"label" : "ZippableRightIdentity", "tail" : "(): Out[A, Unit, A]", "member" : "zio.ZippableLowPriority1.ZippableRightIdentity", "link" : "zio\/ZippableLowPriority1.html#ZippableRightIdentity[A]:zio.Zippable.Out[A,Unit,A]", "kind" : "implicit def"}, {"label" : "Zippable22", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, Z)]", "member" : "zio.ZippableLowPriority2.Zippable22", "link" : "zio\/ZippableLowPriority1.html#Zippable22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z)]", "kind" : "implicit def"}, {"label" : "Zippable21", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Z)]", "member" : "zio.ZippableLowPriority2.Zippable21", "link" : "zio\/ZippableLowPriority1.html#Zippable21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z)]", "kind" : "implicit def"}, {"label" : "Zippable20", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Z)]", "member" : "zio.ZippableLowPriority2.Zippable20", "link" : "zio\/ZippableLowPriority1.html#Zippable20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z)]", "kind" : "implicit def"}, {"label" : "Zippable19", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Z)]", "member" : "zio.ZippableLowPriority2.Zippable19", "link" : "zio\/ZippableLowPriority1.html#Zippable19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z)]", "kind" : "implicit def"}, {"label" : "Zippable18", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Z)]", "member" : "zio.ZippableLowPriority2.Zippable18", "link" : "zio\/ZippableLowPriority1.html#Zippable18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z)]", "kind" : "implicit def"}, {"label" : "Zippable17", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Z)]", "member" : "zio.ZippableLowPriority2.Zippable17", "link" : "zio\/ZippableLowPriority1.html#Zippable17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z)]", "kind" : "implicit def"}, {"label" : "Zippable16", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Z)]", "member" : "zio.ZippableLowPriority2.Zippable16", "link" : "zio\/ZippableLowPriority1.html#Zippable16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z)]", "kind" : "implicit def"}, {"label" : "Zippable15", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, Z)]", "member" : "zio.ZippableLowPriority2.Zippable15", "link" : "zio\/ZippableLowPriority1.html#Zippable15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z)]", "kind" : "implicit def"}, {"label" : "Zippable14", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, Z)]", "member" : "zio.ZippableLowPriority2.Zippable14", "link" : "zio\/ZippableLowPriority1.html#Zippable14[A,B,C,D,E,F,G,H,I,J,K,L,M,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,Z)]", "kind" : "implicit def"}, {"label" : "Zippable13", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L), Z, (A, B, C, D, E, F, G, H, I, J, K, L, Z)]", "member" : "zio.ZippableLowPriority2.Zippable13", "link" : "zio\/ZippableLowPriority1.html#Zippable13[A,B,C,D,E,F,G,H,I,J,K,L,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L),Z,(A,B,C,D,E,F,G,H,I,J,K,L,Z)]", "kind" : "implicit def"}, {"label" : "Zippable12", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K), Z, (A, B, C, D, E, F, G, H, I, J, K, Z)]", "member" : "zio.ZippableLowPriority2.Zippable12", "link" : "zio\/ZippableLowPriority1.html#Zippable12[A,B,C,D,E,F,G,H,I,J,K,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K),Z,(A,B,C,D,E,F,G,H,I,J,K,Z)]", "kind" : "implicit def"}, {"label" : "Zippable11", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J), Z, (A, B, C, D, E, F, G, H, I, J, Z)]", "member" : "zio.ZippableLowPriority2.Zippable11", "link" : "zio\/ZippableLowPriority1.html#Zippable11[A,B,C,D,E,F,G,H,I,J,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J),Z,(A,B,C,D,E,F,G,H,I,J,Z)]", "kind" : "implicit def"}, {"label" : "Zippable10", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I), Z, (A, B, C, D, E, F, G, H, I, Z)]", "member" : "zio.ZippableLowPriority2.Zippable10", "link" : "zio\/ZippableLowPriority1.html#Zippable10[A,B,C,D,E,F,G,H,I,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I),Z,(A,B,C,D,E,F,G,H,I,Z)]", "kind" : "implicit def"}, {"label" : "Zippable9", "tail" : "(): Out[(A, B, C, D, E, F, G, H), Z, (A, B, C, D, E, F, G, H, Z)]", "member" : "zio.ZippableLowPriority2.Zippable9", "link" : "zio\/ZippableLowPriority1.html#Zippable9[A,B,C,D,E,F,G,H,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H),Z,(A,B,C,D,E,F,G,H,Z)]", "kind" : "implicit def"}, {"label" : "Zippable8", "tail" : "(): Out[(A, B, C, D, E, F, G), Z, (A, B, C, D, E, F, G, Z)]", "member" : "zio.ZippableLowPriority2.Zippable8", "link" : "zio\/ZippableLowPriority1.html#Zippable8[A,B,C,D,E,F,G,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G),Z,(A,B,C,D,E,F,G,Z)]", "kind" : "implicit def"}, {"label" : "Zippable7", "tail" : "(): Out[(A, B, C, D, E, F), Z, (A, B, C, D, E, F, Z)]", "member" : "zio.ZippableLowPriority2.Zippable7", "link" : "zio\/ZippableLowPriority1.html#Zippable7[A,B,C,D,E,F,Z]:zio.Zippable.Out[(A,B,C,D,E,F),Z,(A,B,C,D,E,F,Z)]", "kind" : "implicit def"}, {"label" : "Zippable6", "tail" : "(): Out[(A, B, C, D, E), Z, (A, B, C, D, E, Z)]", "member" : "zio.ZippableLowPriority2.Zippable6", "link" : "zio\/ZippableLowPriority1.html#Zippable6[A,B,C,D,E,Z]:zio.Zippable.Out[(A,B,C,D,E),Z,(A,B,C,D,E,Z)]", "kind" : "implicit def"}, {"label" : "Zippable5", "tail" : "(): Out[(A, B, C, D), Z, (A, B, C, D, Z)]", "member" : "zio.ZippableLowPriority2.Zippable5", "link" : "zio\/ZippableLowPriority1.html#Zippable5[A,B,C,D,Z]:zio.Zippable.Out[(A,B,C,D),Z,(A,B,C,D,Z)]", "kind" : "implicit def"}, {"label" : "Zippable4", "tail" : "(): Out[(A, B, C), Z, (A, B, C, Z)]", "member" : "zio.ZippableLowPriority2.Zippable4", "link" : "zio\/ZippableLowPriority1.html#Zippable4[A,B,C,Z]:zio.Zippable.Out[(A,B,C),Z,(A,B,C,Z)]", "kind" : "implicit def"}, {"label" : "Zippable3", "tail" : "(): Out[(A, B), Z, (A, B, Z)]", "member" : "zio.ZippableLowPriority2.Zippable3", "link" : "zio\/ZippableLowPriority1.html#Zippable3[A,B,Z]:zio.Zippable.Out[(A,B),Z,(A,B,Z)]", "kind" : "implicit def"}, {"label" : "Zippable2", "tail" : "(): Out[A, B, (A, B)]", "member" : "zio.ZippableLowPriority3.Zippable2", "link" : "zio\/ZippableLowPriority1.html#Zippable2[A,B]:zio.Zippable.Out[A,B,(A,B)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZippableLowPriority1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZippableLowPriority1.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZippableLowPriority1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZippableLowPriority1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZippableLowPriority1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZippableLowPriority1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZippableLowPriority1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZippableLowPriority1.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZippableLowPriority1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZippableLowPriority1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZippableLowPriority1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZippableLowPriority1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZippableLowPriority1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZippableLowPriority1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZippableLowPriority1.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZippableLowPriority1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZippableLowPriority1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZippableLowPriority1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZippableLowPriority1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.ZippableLowPriority2", "trait" : "zio\/ZippableLowPriority2.html", "kind" : "trait", "members_trait" : [{"label" : "Zippable22", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, Z)]", "member" : "zio.ZippableLowPriority2.Zippable22", "link" : "zio\/ZippableLowPriority2.html#Zippable22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,Z)]", "kind" : "implicit def"}, {"label" : "Zippable21", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Z)]", "member" : "zio.ZippableLowPriority2.Zippable21", "link" : "zio\/ZippableLowPriority2.html#Zippable21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,Z)]", "kind" : "implicit def"}, {"label" : "Zippable20", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Z)]", "member" : "zio.ZippableLowPriority2.Zippable20", "link" : "zio\/ZippableLowPriority2.html#Zippable20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,Z)]", "kind" : "implicit def"}, {"label" : "Zippable19", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Z)]", "member" : "zio.ZippableLowPriority2.Zippable19", "link" : "zio\/ZippableLowPriority2.html#Zippable19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,Z)]", "kind" : "implicit def"}, {"label" : "Zippable18", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Z)]", "member" : "zio.ZippableLowPriority2.Zippable18", "link" : "zio\/ZippableLowPriority2.html#Zippable18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,Z)]", "kind" : "implicit def"}, {"label" : "Zippable17", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Z)]", "member" : "zio.ZippableLowPriority2.Zippable17", "link" : "zio\/ZippableLowPriority2.html#Zippable17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Z)]", "kind" : "implicit def"}, {"label" : "Zippable16", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Z)]", "member" : "zio.ZippableLowPriority2.Zippable16", "link" : "zio\/ZippableLowPriority2.html#Zippable16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,Z)]", "kind" : "implicit def"}, {"label" : "Zippable15", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M, N), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, Z)]", "member" : "zio.ZippableLowPriority2.Zippable15", "link" : "zio\/ZippableLowPriority2.html#Zippable15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M,N),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,Z)]", "kind" : "implicit def"}, {"label" : "Zippable14", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L, M), Z, (A, B, C, D, E, F, G, H, I, J, K, L, M, Z)]", "member" : "zio.ZippableLowPriority2.Zippable14", "link" : "zio\/ZippableLowPriority2.html#Zippable14[A,B,C,D,E,F,G,H,I,J,K,L,M,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L,M),Z,(A,B,C,D,E,F,G,H,I,J,K,L,M,Z)]", "kind" : "implicit def"}, {"label" : "Zippable13", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K, L), Z, (A, B, C, D, E, F, G, H, I, J, K, L, Z)]", "member" : "zio.ZippableLowPriority2.Zippable13", "link" : "zio\/ZippableLowPriority2.html#Zippable13[A,B,C,D,E,F,G,H,I,J,K,L,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K,L),Z,(A,B,C,D,E,F,G,H,I,J,K,L,Z)]", "kind" : "implicit def"}, {"label" : "Zippable12", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J, K), Z, (A, B, C, D, E, F, G, H, I, J, K, Z)]", "member" : "zio.ZippableLowPriority2.Zippable12", "link" : "zio\/ZippableLowPriority2.html#Zippable12[A,B,C,D,E,F,G,H,I,J,K,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J,K),Z,(A,B,C,D,E,F,G,H,I,J,K,Z)]", "kind" : "implicit def"}, {"label" : "Zippable11", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I, J), Z, (A, B, C, D, E, F, G, H, I, J, Z)]", "member" : "zio.ZippableLowPriority2.Zippable11", "link" : "zio\/ZippableLowPriority2.html#Zippable11[A,B,C,D,E,F,G,H,I,J,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I,J),Z,(A,B,C,D,E,F,G,H,I,J,Z)]", "kind" : "implicit def"}, {"label" : "Zippable10", "tail" : "(): Out[(A, B, C, D, E, F, G, H, I), Z, (A, B, C, D, E, F, G, H, I, Z)]", "member" : "zio.ZippableLowPriority2.Zippable10", "link" : "zio\/ZippableLowPriority2.html#Zippable10[A,B,C,D,E,F,G,H,I,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H,I),Z,(A,B,C,D,E,F,G,H,I,Z)]", "kind" : "implicit def"}, {"label" : "Zippable9", "tail" : "(): Out[(A, B, C, D, E, F, G, H), Z, (A, B, C, D, E, F, G, H, Z)]", "member" : "zio.ZippableLowPriority2.Zippable9", "link" : "zio\/ZippableLowPriority2.html#Zippable9[A,B,C,D,E,F,G,H,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G,H),Z,(A,B,C,D,E,F,G,H,Z)]", "kind" : "implicit def"}, {"label" : "Zippable8", "tail" : "(): Out[(A, B, C, D, E, F, G), Z, (A, B, C, D, E, F, G, Z)]", "member" : "zio.ZippableLowPriority2.Zippable8", "link" : "zio\/ZippableLowPriority2.html#Zippable8[A,B,C,D,E,F,G,Z]:zio.Zippable.Out[(A,B,C,D,E,F,G),Z,(A,B,C,D,E,F,G,Z)]", "kind" : "implicit def"}, {"label" : "Zippable7", "tail" : "(): Out[(A, B, C, D, E, F), Z, (A, B, C, D, E, F, Z)]", "member" : "zio.ZippableLowPriority2.Zippable7", "link" : "zio\/ZippableLowPriority2.html#Zippable7[A,B,C,D,E,F,Z]:zio.Zippable.Out[(A,B,C,D,E,F),Z,(A,B,C,D,E,F,Z)]", "kind" : "implicit def"}, {"label" : "Zippable6", "tail" : "(): Out[(A, B, C, D, E), Z, (A, B, C, D, E, Z)]", "member" : "zio.ZippableLowPriority2.Zippable6", "link" : "zio\/ZippableLowPriority2.html#Zippable6[A,B,C,D,E,Z]:zio.Zippable.Out[(A,B,C,D,E),Z,(A,B,C,D,E,Z)]", "kind" : "implicit def"}, {"label" : "Zippable5", "tail" : "(): Out[(A, B, C, D), Z, (A, B, C, D, Z)]", "member" : "zio.ZippableLowPriority2.Zippable5", "link" : "zio\/ZippableLowPriority2.html#Zippable5[A,B,C,D,Z]:zio.Zippable.Out[(A,B,C,D),Z,(A,B,C,D,Z)]", "kind" : "implicit def"}, {"label" : "Zippable4", "tail" : "(): Out[(A, B, C), Z, (A, B, C, Z)]", "member" : "zio.ZippableLowPriority2.Zippable4", "link" : "zio\/ZippableLowPriority2.html#Zippable4[A,B,C,Z]:zio.Zippable.Out[(A,B,C),Z,(A,B,C,Z)]", "kind" : "implicit def"}, {"label" : "Zippable3", "tail" : "(): Out[(A, B), Z, (A, B, Z)]", "member" : "zio.ZippableLowPriority2.Zippable3", "link" : "zio\/ZippableLowPriority2.html#Zippable3[A,B,Z]:zio.Zippable.Out[(A,B),Z,(A,B,Z)]", "kind" : "implicit def"}, {"label" : "Zippable2", "tail" : "(): Out[A, B, (A, B)]", "member" : "zio.ZippableLowPriority3.Zippable2", "link" : "zio\/ZippableLowPriority2.html#Zippable2[A,B]:zio.Zippable.Out[A,B,(A,B)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZippableLowPriority2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZippableLowPriority2.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZippableLowPriority2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZippableLowPriority2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZippableLowPriority2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZippableLowPriority2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZippableLowPriority2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZippableLowPriority2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZippableLowPriority2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZippableLowPriority2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZippableLowPriority2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZippableLowPriority2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZippableLowPriority2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZippableLowPriority2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZippableLowPriority2.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZippableLowPriority2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZippableLowPriority2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZippableLowPriority2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZippableLowPriority2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.ZippableLowPriority3", "trait" : "zio\/ZippableLowPriority3.html", "kind" : "trait", "members_trait" : [{"label" : "Zippable2", "tail" : "(): Out[A, B, (A, B)]", "member" : "zio.ZippableLowPriority3.Zippable2", "link" : "zio\/ZippableLowPriority3.html#Zippable2[A,B]:zio.Zippable.Out[A,B,(A,B)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZippableLowPriority3.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZippableLowPriority3.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZippableLowPriority3.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZippableLowPriority3.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZippableLowPriority3.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZippableLowPriority3.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZippableLowPriority3.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZippableLowPriority3.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZippableLowPriority3.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZippableLowPriority3.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZippableLowPriority3.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZippableLowPriority3.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZippableLowPriority3.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZippableLowPriority3.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZippableLowPriority3.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZippableLowPriority3.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZippableLowPriority3.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZippableLowPriority3.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZippableLowPriority3.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.ZLayer", "shortDescription" : "A ZLayer[A, E, B] describes a layer of an application: every layer in anapplication requires some services (the input) and produces some services(the output).", "object" : "zio\/ZLayer$.html", "members_class" : [{"label" : "zipWithPar", "tail" : "(that: ZLayer[RIn2, E1, ROut2])(f: (ROut, ROut2) => ROut3): ZLayer[RIn with RIn2, E1, ROut3]", "member" : "zio.ZLayer.zipWithPar", "link" : "zio\/ZLayer.html#zipWithPar[E1>:E,RIn2,ROut1>:ROut,ROut2,ROut3](that:zio.ZLayer[RIn2,E1,ROut2])(f:(ROut,ROut2)=>ROut3):zio.ZLayer[RInwithRIn2,E1,ROut3]", "kind" : "final def"}, {"label" : "zipPar", "tail" : "(that: ZLayer[RIn2, E1, ROut2]): ZLayer[RIn with RIn2, E1, (ROut, ROut2)]", "member" : "zio.ZLayer.zipPar", "link" : "zio\/ZLayer.html#zipPar[E1>:E,RIn2,ROut2](that:zio.ZLayer[RIn2,E1,ROut2]):zio.ZLayer[RInwithRIn2,E1,(ROut,ROut2)]", "kind" : "final def"}, {"label" : "update", "tail" : "(f: (A) => A)(arg0: zio.Tag[A], ev1: IsHas[ROut], ev2: <:<[ROut, Has[A]]): ZLayer[RIn, E, ROut]", "member" : "zio.ZLayer.update", "link" : "zio\/ZLayer.html#update[A](f:A=>A)(implicitevidence$1:zio.Tag[A],implicitev1:zio.Has.IsHas[ROut],implicitev2:ROut<:<zio.Has[A]):zio.ZLayer[RIn,E,ROut]", "kind" : "final def"}, {"label" : "toRuntime", "tail" : "(runtimeConfig: RuntimeConfig)(ev: <:<[Any, RIn]): Managed[E, Runtime[ROut]]", "member" : "zio.ZLayer.toRuntime", "link" : "zio\/ZLayer.html#toRuntime(runtimeConfig:zio.RuntimeConfig)(implicitev:Any<:<RIn):zio.Managed[E,zio.Runtime[ROut]]", "kind" : "final def"}, {"label" : "to", "tail" : "(that: ZLayer[ROut, E1, ROut2]): ZLayer[RIn, E1, ROut2]", "member" : "zio.ZLayer.to", "link" : "zio\/ZLayer.html#to[E1>:E,ROut2](that:zio.ZLayer[ROut,E1,ROut2]):zio.ZLayer[RIn,E1,ROut2]", "kind" : "final def"}, {"label" : "tapError", "tail" : "(f: (E) => ZIO[RIn1, E1, Any]): ZLayer[RIn1, E1, ROut]", "member" : "zio.ZLayer.tapError", "link" : "zio\/ZLayer.html#tapError[RIn1<:RIn,E1>:E](f:E=>zio.ZIO[RIn1,E1,Any]):zio.ZLayer[RIn1,E1,ROut]", "kind" : "final def"}, {"label" : "tap", "tail" : "(f: (ROut) => ZIO[RIn1, E1, Any]): ZLayer[RIn1, E1, ROut]", "member" : "zio.ZLayer.tap", "link" : "zio\/ZLayer.html#tap[RIn1<:RIn,E1>:E](f:ROut=>zio.ZIO[RIn1,E1,Any]):zio.ZLayer[RIn1,E1,ROut]", "kind" : "final def"}, {"label" : "retry", "tail" : "(schedule: Schedule[RIn1, E, Any]): ZLayer[RIn1, E, ROut]", "member" : "zio.ZLayer.retry", "link" : "zio\/ZLayer.html#retry[RIn1<:RInwithzio.Has[zio.Clock]](schedule:zio.Schedule[RIn1,E,Any]):zio.ZLayer[RIn1,E,ROut]", "kind" : "final def"}, {"label" : "orElse", "tail" : "(that: ZLayer[RIn1, E1, ROut1])(ev: CanFail[E]): ZLayer[RIn1, E1, ROut1]", "member" : "zio.ZLayer.orElse", "link" : "zio\/ZLayer.html#orElse[RIn1<:RIn,E1,ROut1>:ROut](that:zio.ZLayer[RIn1,E1,ROut1])(implicitev:zio.CanFail[E]):zio.ZLayer[RIn1,E1,ROut1]", "kind" : "final def"}, {"label" : "orDie", "tail" : "(ev1: IsSubtypeOfError[E, Throwable], ev2: CanFail[E]): ZLayer[RIn, Nothing, ROut]", "member" : "zio.ZLayer.orDie", "link" : "zio\/ZLayer.html#orDie(implicitev1:zio.IsSubtypeOfError[E,Throwable],implicitev2:zio.CanFail[E]):zio.ZLayer[RIn,Nothing,ROut]", "kind" : "final def"}, {"label" : "memoize", "tail" : "(): ZManaged[Any, Nothing, ZLayer[RIn, E, ROut]]", "member" : "zio.ZLayer.memoize", "link" : "zio\/ZLayer.html#memoize:zio.ZManaged[Any,Nothing,zio.ZLayer[RIn,E,ROut]]", "kind" : "final def"}, {"label" : "mapError", "tail" : "(f: (E) => E1)(ev: CanFail[E]): ZLayer[RIn, E1, ROut]", "member" : "zio.ZLayer.mapError", "link" : "zio\/ZLayer.html#mapError[E1](f:E=>E1)(implicitev:zio.CanFail[E]):zio.ZLayer[RIn,E1,ROut]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (ROut) => ROut1): ZLayer[RIn, E, ROut1]", "member" : "zio.ZLayer.map", "link" : "zio\/ZLayer.html#map[ROut1](f:ROut=>ROut1):zio.ZLayer[RIn,E,ROut1]", "kind" : "final def"}, {"label" : "launch", "tail" : "(): ZIO[RIn, E, Nothing]", "member" : "zio.ZLayer.launch", "link" : "zio\/ZLayer.html#launch:zio.ZIO[RIn,E,Nothing]", "kind" : "final def"}, {"label" : "hashCode", "tail" : ": Int", "member" : "zio.ZLayer.hashCode", "link" : "zio\/ZLayer.html#hashCode:Int", "kind" : "final lazy val"}, {"label" : "fresh", "tail" : "(): ZLayer[RIn, E, ROut]", "member" : "zio.ZLayer.fresh", "link" : "zio\/ZLayer.html#fresh:zio.ZLayer[RIn,E,ROut]", "kind" : "final def"}, {"label" : "fold", "tail" : "(failure: ZLayer[(RIn1, Cause[E]), E1, ROut2], success: ZLayer[ROut, E1, ROut2])(ev: CanFail[E]): ZLayer[RIn1, E1, ROut2]", "member" : "zio.ZLayer.fold", "link" : "zio\/ZLayer.html#fold[E1,RIn1<:RIn,ROut2](failure:zio.ZLayer[(RIn1,zio.Cause[E]),E1,ROut2],success:zio.ZLayer[ROut,E1,ROut2])(implicitev:zio.CanFail[E]):zio.ZLayer[RIn1,E1,ROut2]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[ROut, ZLayer[RIn1, E1, ROut2]]): ZLayer[RIn1, E1, ROut2]", "member" : "zio.ZLayer.flatten", "link" : "zio\/ZLayer.html#flatten[RIn1<:RIn,E1>:E,ROut2](implicitev:ROut<:<zio.ZLayer[RIn1,E1,ROut2]):zio.ZLayer[RIn1,E1,ROut2]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (ROut) => ZLayer[RIn1, E1, ROut2]): ZLayer[RIn1, E1, ROut2]", "member" : "zio.ZLayer.flatMap", "link" : "zio\/ZLayer.html#flatMap[RIn1<:RIn,E1>:E,ROut2](f:ROut=>zio.ZLayer[RIn1,E1,ROut2]):zio.ZLayer[RIn1,E1,ROut2]", "kind" : "final def"}, {"label" : "catchAll", "tail" : "(handler: ZLayer[(RIn1, E), E1, ROut1]): ZLayer[RIn1, E1, ROut1]", "member" : "zio.ZLayer.catchAll", "link" : "zio\/ZLayer.html#catchAll[RIn1<:RIn,E1,ROut1>:ROut](handler:zio.ZLayer[(RIn1,E),E1,ROut1]):zio.ZLayer[RIn1,E1,ROut1]", "kind" : "final def"}, {"label" : "build", "tail" : "(): ZManaged[RIn, E, ROut]", "member" : "zio.ZLayer.build", "link" : "zio\/ZLayer.html#build:zio.ZManaged[RIn,E,ROut]", "kind" : "final def"}, {"label" : "andTo", "tail" : "(that: ZLayer[RIn2, E1, ROut2])(ev: Union[ROut1, ROut2], tagged: zio.Tag[ROut2]): ZLayer[RIn, E1, ROut1 with ROut2]", "member" : "zio.ZLayer.andTo", "link" : "zio\/ZLayer.html#andTo[E1>:E,RIn2>:ROut,ROut1>:ROut,ROut2](that:zio.ZLayer[RIn2,E1,ROut2])(implicitev:zio.Has.Union[ROut1,ROut2],implicittagged:zio.Tag[ROut2]):zio.ZLayer[RIn,E1,ROut1withROut2]", "kind" : "final def"}, {"label" : "and", "tail" : "(that: ZLayer[RIn2, E1, ROut2])(ev: Union[ROut1, ROut2], tagged: zio.Tag[ROut2]): ZLayer[RIn with RIn2, E1, ROut1 with ROut2]", "member" : "zio.ZLayer.and", "link" : "zio\/ZLayer.html#and[E1>:E,RIn2,ROut1>:ROut,ROut2](that:zio.ZLayer[RIn2,E1,ROut2])(implicitev:zio.Has.Union[ROut1,ROut2],implicittagged:zio.Tag[ROut2]):zio.ZLayer[RInwithRIn2,E1,ROut1withROut2]", "kind" : "final def"}, {"label" : ">>>", "tail" : "(that: ZLayer[ROut, E1, ROut2]): ZLayer[RIn, E1, ROut2]", "member" : "zio.ZLayer.>>>", "link" : "zio\/ZLayer.html#>>>[E1>:E,ROut2](that:zio.ZLayer[ROut,E1,ROut2]):zio.ZLayer[RIn,E1,ROut2]", "kind" : "final def"}, {"label" : ">+>", "tail" : "(that: ZLayer[RIn2, E1, ROut2])(ev: Union[ROut1, ROut2], tagged: zio.Tag[ROut2]): ZLayer[RIn, E1, ROut1 with ROut2]", "member" : "zio.ZLayer.>+>", "link" : "zio\/ZLayer.html#>+>[E1>:E,RIn2>:ROut,ROut1>:ROut,ROut2](that:zio.ZLayer[RIn2,E1,ROut2])(implicitev:zio.Has.Union[ROut1,ROut2],implicittagged:zio.Tag[ROut2]):zio.ZLayer[RIn,E1,ROut1withROut2]", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: ZLayer[RIn1, E1, ROut1])(ev: CanFail[E]): ZLayer[RIn1, E1, ROut1]", "member" : "zio.ZLayer.<>", "link" : "zio\/ZLayer.html#<>[RIn1<:RIn,E1,ROut1>:ROut](that:zio.ZLayer[RIn1,E1,ROut1])(implicitev:zio.CanFail[E]):zio.ZLayer[RIn1,E1,ROut1]", "kind" : "def"}, {"label" : "<&>", "tail" : "(that: ZLayer[RIn2, E1, ROut2]): ZLayer[RIn with RIn2, E1, (ROut, ROut2)]", "member" : "zio.ZLayer.<&>", "link" : "zio\/ZLayer.html#<&>[E1>:E,RIn2,ROut2](that:zio.ZLayer[RIn2,E1,ROut2]):zio.ZLayer[RInwithRIn2,E1,(ROut,ROut2)]", "kind" : "final def"}, {"label" : "++", "tail" : "(that: ZLayer[RIn2, E1, ROut2])(ev: Union[ROut1, ROut2], tag: zio.Tag[ROut2]): ZLayer[RIn with RIn2, E1, ROut1 with ROut2]", "member" : "zio.ZLayer.++", "link" : "zio\/ZLayer.html#++[E1>:E,RIn2,ROut1>:ROut,ROut2](that:zio.ZLayer[RIn2,E1,ROut2])(implicitev:zio.Has.Union[ROut1,ROut2],implicittag:zio.Tag[ROut2]):zio.ZLayer[RInwithRIn2,E1,ROut1withROut2]", "kind" : "final def"}, {"label" : "+!+", "tail" : "(that: ZLayer[RIn2, E1, ROut2])(ev: UnionAll[ROut1, ROut2]): ZLayer[RIn with RIn2, E1, ROut1 with ROut2]", "member" : "zio.ZLayer.+!+", "link" : "zio\/ZLayer.html#+!+[E1>:E,RIn2,ROut1>:ROut,ROut2](that:zio.ZLayer[RIn2,E1,ROut2])(implicitev:zio.Has.UnionAll[ROut1,ROut2]):zio.ZLayer[RInwithRIn2,E1,ROut1withROut2]", "kind" : "final def"}, {"label" : "!", "tail" : "(ev1: <:<[E, Throwable], ev2: CanFail[E]): ZLayer[RIn, Nothing, ROut]", "member" : "zio.ZLayer.!", "link" : "zio\/ZLayer.html#!(implicitev1:E<:<Throwable,implicitev2:zio.CanFail[E]):zio.ZLayer[RIn,Nothing,ROut]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZLayer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZLayer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZLayer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZLayer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZLayer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZLayer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZLayer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZLayer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZLayer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZLayer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZLayer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZLayer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZLayer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZLayer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZLayer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZLayer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZLayer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZLayer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "ZLayerProjectOps", "tail" : "", "member" : "zio.ZLayer.ZLayerProjectOps", "link" : "zio\/ZLayer$.html#ZLayerProjectOps[R,E,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "ZLayerPassthroughOps", "tail" : "", "member" : "zio.ZLayer.ZLayerPassthroughOps", "link" : "zio\/ZLayer$.html#ZLayerPassthroughOps[RIn,E,ROut]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "suspend", "tail" : "(layer: => ZLayer[RIn, E, ROut]): ZLayer[RIn, E, ROut]", "member" : "zio.ZLayer.suspend", "link" : "zio\/ZLayer$.html#suspend[RIn,E,ROut](layer:=>zio.ZLayer[RIn,E,ROut]):zio.ZLayer[RIn,E,ROut]", "kind" : "def"}, {"label" : "succeedMany", "tail" : "(a: A): ULayer[A]", "member" : "zio.ZLayer.succeedMany", "link" : "zio\/ZLayer$.html#succeedMany[A](a:A):zio.ULayer[A]", "kind" : "def"}, {"label" : "succeed", "tail" : "(a: A)(arg0: zio.Tag[A]): ULayer[Has[A]]", "member" : "zio.ZLayer.succeed", "link" : "zio\/ZLayer$.html#succeed[A](a:A)(implicitevidence$1594:zio.Tag[A]):zio.ULayer[zio.Has[A]]", "kind" : "def"}, {"label" : "service", "tail" : "(): ZLayer[Has[A], Nothing, Has[A]]", "member" : "zio.ZLayer.service", "link" : "zio\/ZLayer$.html#service[A]:zio.ZLayer[zio.Has[A],Nothing,zio.Has[A]]", "kind" : "def"}, {"label" : "second", "tail" : "(): ZLayer[(Any, A), Nothing, A]", "member" : "zio.ZLayer.second", "link" : "zio\/ZLayer$.html#second[A]:zio.ZLayer[(Any,A),Nothing,A]", "kind" : "def"}, {"label" : "environment", "tail" : "(): ZLayer[A, Nothing, A]", "member" : "zio.ZLayer.environment", "link" : "zio\/ZLayer$.html#environment[A]:zio.ZLayer[A,Nothing,A]", "kind" : "def"}, {"label" : "requires", "tail" : "(): ZLayer[A, Nothing, A]", "member" : "zio.ZLayer.requires", "link" : "zio\/ZLayer$.html#requires[A]:zio.ZLayer[A,Nothing,A]", "kind" : "def"}, {"label" : "identity", "tail" : "(): ZLayer[A, Nothing, A]", "member" : "zio.ZLayer.identity", "link" : "zio\/ZLayer$.html#identity[A]:zio.ZLayer[A,Nothing,A]", "kind" : "def"}, {"label" : "fromZIOMany", "tail" : "(zio: ZIO[R, E, A]): ZLayer[R, E, A]", "member" : "zio.ZLayer.fromZIOMany", "link" : "zio\/ZLayer$.html#fromZIOMany[R,E,A](zio:zio.ZIO[R,E,A]):zio.ZLayer[R,E,A]", "kind" : "def"}, {"label" : "fromZIO", "tail" : "(zio: ZIO[R, E, A])(arg0: zio.Tag[A]): ZLayer[R, E, Has[A]]", "member" : "zio.ZLayer.fromZIO", "link" : "zio\/ZLayer$.html#fromZIO[R,E,A](zio:zio.ZIO[R,E,A])(implicitevidence$1593:zio.Tag[A]):zio.ZLayer[R,E,zio.Has[A]]", "kind" : "def"}, {"label" : "fromManagedMany", "tail" : "(m: ZManaged[R, E, A]): ZLayer[R, E, A]", "member" : "zio.ZLayer.fromManagedMany", "link" : "zio\/ZLayer$.html#fromManagedMany[R,E,A](m:zio.ZManaged[R,E,A]):zio.ZLayer[R,E,A]", "kind" : "def"}, {"label" : "fromManaged", "tail" : "(m: ZManaged[R, E, A])(arg0: zio.Tag[A]): ZLayer[R, E, Has[A]]", "member" : "zio.ZLayer.fromManaged", "link" : "zio\/ZLayer$.html#fromManaged[R,E,A](m:zio.ZManaged[R,E,A])(implicitevidence$1592:zio.Tag[A]):zio.ZLayer[R,E,zio.Has[A]]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19], arg20: zio.Tag[A20], arg21: zio.Tag[A21]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19] with Has[A20] with Has[A21], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>zio.ZManaged[R,E,B])(implicitevidence$1570:zio.Tag[A0],implicitevidence$1571:zio.Tag[A1],implicitevidence$1572:zio.Tag[A2],implicitevidence$1573:zio.Tag[A3],implicitevidence$1574:zio.Tag[A4],implicitevidence$1575:zio.Tag[A5],implicitevidence$1576:zio.Tag[A6],implicitevidence$1577:zio.Tag[A7],implicitevidence$1578:zio.Tag[A8],implicitevidence$1579:zio.Tag[A9],implicitevidence$1580:zio.Tag[A10],implicitevidence$1581:zio.Tag[A11],implicitevidence$1582:zio.Tag[A12],implicitevidence$1583:zio.Tag[A13],implicitevidence$1584:zio.Tag[A14],implicitevidence$1585:zio.Tag[A15],implicitevidence$1586:zio.Tag[A16],implicitevidence$1587:zio.Tag[A17],implicitevidence$1588:zio.Tag[A18],implicitevidence$1589:zio.Tag[A19],implicitevidence$1590:zio.Tag[A20],implicitevidence$1591:zio.Tag[A21]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19]withzio.Has[A20]withzio.Has[A21],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19], arg20: zio.Tag[A20]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19] with Has[A20], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>zio.ZManaged[R,E,B])(implicitevidence$1549:zio.Tag[A0],implicitevidence$1550:zio.Tag[A1],implicitevidence$1551:zio.Tag[A2],implicitevidence$1552:zio.Tag[A3],implicitevidence$1553:zio.Tag[A4],implicitevidence$1554:zio.Tag[A5],implicitevidence$1555:zio.Tag[A6],implicitevidence$1556:zio.Tag[A7],implicitevidence$1557:zio.Tag[A8],implicitevidence$1558:zio.Tag[A9],implicitevidence$1559:zio.Tag[A10],implicitevidence$1560:zio.Tag[A11],implicitevidence$1561:zio.Tag[A12],implicitevidence$1562:zio.Tag[A13],implicitevidence$1563:zio.Tag[A14],implicitevidence$1564:zio.Tag[A15],implicitevidence$1565:zio.Tag[A16],implicitevidence$1566:zio.Tag[A17],implicitevidence$1567:zio.Tag[A18],implicitevidence$1568:zio.Tag[A19],implicitevidence$1569:zio.Tag[A20]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19]withzio.Has[A20],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>zio.ZManaged[R,E,B])(implicitevidence$1529:zio.Tag[A0],implicitevidence$1530:zio.Tag[A1],implicitevidence$1531:zio.Tag[A2],implicitevidence$1532:zio.Tag[A3],implicitevidence$1533:zio.Tag[A4],implicitevidence$1534:zio.Tag[A5],implicitevidence$1535:zio.Tag[A6],implicitevidence$1536:zio.Tag[A7],implicitevidence$1537:zio.Tag[A8],implicitevidence$1538:zio.Tag[A9],implicitevidence$1539:zio.Tag[A10],implicitevidence$1540:zio.Tag[A11],implicitevidence$1541:zio.Tag[A12],implicitevidence$1542:zio.Tag[A13],implicitevidence$1543:zio.Tag[A14],implicitevidence$1544:zio.Tag[A15],implicitevidence$1545:zio.Tag[A16],implicitevidence$1546:zio.Tag[A17],implicitevidence$1547:zio.Tag[A18],implicitevidence$1548:zio.Tag[A19]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>zio.ZManaged[R,E,B])(implicitevidence$1510:zio.Tag[A0],implicitevidence$1511:zio.Tag[A1],implicitevidence$1512:zio.Tag[A2],implicitevidence$1513:zio.Tag[A3],implicitevidence$1514:zio.Tag[A4],implicitevidence$1515:zio.Tag[A5],implicitevidence$1516:zio.Tag[A6],implicitevidence$1517:zio.Tag[A7],implicitevidence$1518:zio.Tag[A8],implicitevidence$1519:zio.Tag[A9],implicitevidence$1520:zio.Tag[A10],implicitevidence$1521:zio.Tag[A11],implicitevidence$1522:zio.Tag[A12],implicitevidence$1523:zio.Tag[A13],implicitevidence$1524:zio.Tag[A14],implicitevidence$1525:zio.Tag[A15],implicitevidence$1526:zio.Tag[A16],implicitevidence$1527:zio.Tag[A17],implicitevidence$1528:zio.Tag[A18]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>zio.ZManaged[R,E,B])(implicitevidence$1492:zio.Tag[A0],implicitevidence$1493:zio.Tag[A1],implicitevidence$1494:zio.Tag[A2],implicitevidence$1495:zio.Tag[A3],implicitevidence$1496:zio.Tag[A4],implicitevidence$1497:zio.Tag[A5],implicitevidence$1498:zio.Tag[A6],implicitevidence$1499:zio.Tag[A7],implicitevidence$1500:zio.Tag[A8],implicitevidence$1501:zio.Tag[A9],implicitevidence$1502:zio.Tag[A10],implicitevidence$1503:zio.Tag[A11],implicitevidence$1504:zio.Tag[A12],implicitevidence$1505:zio.Tag[A13],implicitevidence$1506:zio.Tag[A14],implicitevidence$1507:zio.Tag[A15],implicitevidence$1508:zio.Tag[A16],implicitevidence$1509:zio.Tag[A17]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>zio.ZManaged[R,E,B])(implicitevidence$1475:zio.Tag[A0],implicitevidence$1476:zio.Tag[A1],implicitevidence$1477:zio.Tag[A2],implicitevidence$1478:zio.Tag[A3],implicitevidence$1479:zio.Tag[A4],implicitevidence$1480:zio.Tag[A5],implicitevidence$1481:zio.Tag[A6],implicitevidence$1482:zio.Tag[A7],implicitevidence$1483:zio.Tag[A8],implicitevidence$1484:zio.Tag[A9],implicitevidence$1485:zio.Tag[A10],implicitevidence$1486:zio.Tag[A11],implicitevidence$1487:zio.Tag[A12],implicitevidence$1488:zio.Tag[A13],implicitevidence$1489:zio.Tag[A14],implicitevidence$1490:zio.Tag[A15],implicitevidence$1491:zio.Tag[A16]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>zio.ZManaged[R,E,B])(implicitevidence$1459:zio.Tag[A0],implicitevidence$1460:zio.Tag[A1],implicitevidence$1461:zio.Tag[A2],implicitevidence$1462:zio.Tag[A3],implicitevidence$1463:zio.Tag[A4],implicitevidence$1464:zio.Tag[A5],implicitevidence$1465:zio.Tag[A6],implicitevidence$1466:zio.Tag[A7],implicitevidence$1467:zio.Tag[A8],implicitevidence$1468:zio.Tag[A9],implicitevidence$1469:zio.Tag[A10],implicitevidence$1470:zio.Tag[A11],implicitevidence$1471:zio.Tag[A12],implicitevidence$1472:zio.Tag[A13],implicitevidence$1473:zio.Tag[A14],implicitevidence$1474:zio.Tag[A15]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>zio.ZManaged[R,E,B])(implicitevidence$1444:zio.Tag[A0],implicitevidence$1445:zio.Tag[A1],implicitevidence$1446:zio.Tag[A2],implicitevidence$1447:zio.Tag[A3],implicitevidence$1448:zio.Tag[A4],implicitevidence$1449:zio.Tag[A5],implicitevidence$1450:zio.Tag[A6],implicitevidence$1451:zio.Tag[A7],implicitevidence$1452:zio.Tag[A8],implicitevidence$1453:zio.Tag[A9],implicitevidence$1454:zio.Tag[A10],implicitevidence$1455:zio.Tag[A11],implicitevidence$1456:zio.Tag[A12],implicitevidence$1457:zio.Tag[A13],implicitevidence$1458:zio.Tag[A14]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>zio.ZManaged[R,E,B])(implicitevidence$1430:zio.Tag[A0],implicitevidence$1431:zio.Tag[A1],implicitevidence$1432:zio.Tag[A2],implicitevidence$1433:zio.Tag[A3],implicitevidence$1434:zio.Tag[A4],implicitevidence$1435:zio.Tag[A5],implicitevidence$1436:zio.Tag[A6],implicitevidence$1437:zio.Tag[A7],implicitevidence$1438:zio.Tag[A8],implicitevidence$1439:zio.Tag[A9],implicitevidence$1440:zio.Tag[A10],implicitevidence$1441:zio.Tag[A11],implicitevidence$1442:zio.Tag[A12],implicitevidence$1443:zio.Tag[A13]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>zio.ZManaged[R,E,B])(implicitevidence$1417:zio.Tag[A0],implicitevidence$1418:zio.Tag[A1],implicitevidence$1419:zio.Tag[A2],implicitevidence$1420:zio.Tag[A3],implicitevidence$1421:zio.Tag[A4],implicitevidence$1422:zio.Tag[A5],implicitevidence$1423:zio.Tag[A6],implicitevidence$1424:zio.Tag[A7],implicitevidence$1425:zio.Tag[A8],implicitevidence$1426:zio.Tag[A9],implicitevidence$1427:zio.Tag[A10],implicitevidence$1428:zio.Tag[A11],implicitevidence$1429:zio.Tag[A12]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>zio.ZManaged[R,E,B])(implicitevidence$1405:zio.Tag[A0],implicitevidence$1406:zio.Tag[A1],implicitevidence$1407:zio.Tag[A2],implicitevidence$1408:zio.Tag[A3],implicitevidence$1409:zio.Tag[A4],implicitevidence$1410:zio.Tag[A5],implicitevidence$1411:zio.Tag[A6],implicitevidence$1412:zio.Tag[A7],implicitevidence$1413:zio.Tag[A8],implicitevidence$1414:zio.Tag[A9],implicitevidence$1415:zio.Tag[A10],implicitevidence$1416:zio.Tag[A11]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>zio.ZManaged[R,E,B])(implicitevidence$1394:zio.Tag[A0],implicitevidence$1395:zio.Tag[A1],implicitevidence$1396:zio.Tag[A2],implicitevidence$1397:zio.Tag[A3],implicitevidence$1398:zio.Tag[A4],implicitevidence$1399:zio.Tag[A5],implicitevidence$1400:zio.Tag[A6],implicitevidence$1401:zio.Tag[A7],implicitevidence$1402:zio.Tag[A8],implicitevidence$1403:zio.Tag[A9],implicitevidence$1404:zio.Tag[A10]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>zio.ZManaged[R,E,B])(implicitevidence$1384:zio.Tag[A0],implicitevidence$1385:zio.Tag[A1],implicitevidence$1386:zio.Tag[A2],implicitevidence$1387:zio.Tag[A3],implicitevidence$1388:zio.Tag[A4],implicitevidence$1389:zio.Tag[A5],implicitevidence$1390:zio.Tag[A6],implicitevidence$1391:zio.Tag[A7],implicitevidence$1392:zio.Tag[A8],implicitevidence$1393:zio.Tag[A9]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>zio.ZManaged[R,E,B])(implicitevidence$1375:zio.Tag[A0],implicitevidence$1376:zio.Tag[A1],implicitevidence$1377:zio.Tag[A2],implicitevidence$1378:zio.Tag[A3],implicitevidence$1379:zio.Tag[A4],implicitevidence$1380:zio.Tag[A5],implicitevidence$1381:zio.Tag[A6],implicitevidence$1382:zio.Tag[A7],implicitevidence$1383:zio.Tag[A8]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,A7,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7)=>zio.ZManaged[R,E,B])(implicitevidence$1367:zio.Tag[A0],implicitevidence$1368:zio.Tag[A1],implicitevidence$1369:zio.Tag[A2],implicitevidence$1370:zio.Tag[A3],implicitevidence$1371:zio.Tag[A4],implicitevidence$1372:zio.Tag[A5],implicitevidence$1373:zio.Tag[A6],implicitevidence$1374:zio.Tag[A7]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,A6,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6)=>zio.ZManaged[R,E,B])(implicitevidence$1360:zio.Tag[A0],implicitevidence$1361:zio.Tag[A1],implicitevidence$1362:zio.Tag[A2],implicitevidence$1363:zio.Tag[A3],implicitevidence$1364:zio.Tag[A4],implicitevidence$1365:zio.Tag[A5],implicitevidence$1366:zio.Tag[A6]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,A5,R,E,B](f:(A0,A1,A2,A3,A4,A5)=>zio.ZManaged[R,E,B])(implicitevidence$1354:zio.Tag[A0],implicitevidence$1355:zio.Tag[A1],implicitevidence$1356:zio.Tag[A2],implicitevidence$1357:zio.Tag[A3],implicitevidence$1358:zio.Tag[A4],implicitevidence$1359:zio.Tag[A5]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3, A4) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,A4,R,E,B](f:(A0,A1,A2,A3,A4)=>zio.ZManaged[R,E,B])(implicitevidence$1349:zio.Tag[A0],implicitevidence$1350:zio.Tag[A1],implicitevidence$1351:zio.Tag[A2],implicitevidence$1352:zio.Tag[A3],implicitevidence$1353:zio.Tag[A4]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2, A3) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,A3,R,E,B](f:(A0,A1,A2,A3)=>zio.ZManaged[R,E,B])(implicitevidence$1345:zio.Tag[A0],implicitevidence$1346:zio.Tag[A1],implicitevidence$1347:zio.Tag[A2],implicitevidence$1348:zio.Tag[A3]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1, A2) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2]): ZLayer[R with Has[A0] with Has[A1] with Has[A2], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,A2,R,E,B](f:(A0,A1,A2)=>zio.ZManaged[R,E,B])(implicitevidence$1342:zio.Tag[A0],implicitevidence$1343:zio.Tag[A1],implicitevidence$1344:zio.Tag[A2]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2],E,B]", "kind" : "def"}, {"label" : "fromServicesManyManaged", "tail" : "(f: (A0, A1) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1]): ZLayer[R with Has[A0] with Has[A1], E, B]", "member" : "zio.ZLayer.fromServicesManyManaged", "link" : "zio\/ZLayer$.html#fromServicesManyManaged[A0,A1,R,E,B](f:(A0,A1)=>zio.ZManaged[R,E,B])(implicitevidence$1340:zio.Tag[A0],implicitevidence$1341:zio.Tag[A1]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1],E,B]", "kind" : "def"}, {"label" : "fromServiceManyManaged", "tail" : "(f: (A) => ZManaged[R, E, B])(arg0: zio.Tag[A]): ZLayer[R with Has[A], E, B]", "member" : "zio.ZLayer.fromServiceManyManaged", "link" : "zio\/ZLayer$.html#fromServiceManyManaged[A,R,E,B](f:A=>zio.ZManaged[R,E,B])(implicitevidence$1339:zio.Tag[A]):zio.ZLayer[Rwithzio.Has[A],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19], arg20: zio.Tag[A20], arg21: zio.Tag[A21]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19] with Has[A20] with Has[A21], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>zio.ZIO[R,E,B])(implicitevidence$1317:zio.Tag[A0],implicitevidence$1318:zio.Tag[A1],implicitevidence$1319:zio.Tag[A2],implicitevidence$1320:zio.Tag[A3],implicitevidence$1321:zio.Tag[A4],implicitevidence$1322:zio.Tag[A5],implicitevidence$1323:zio.Tag[A6],implicitevidence$1324:zio.Tag[A7],implicitevidence$1325:zio.Tag[A8],implicitevidence$1326:zio.Tag[A9],implicitevidence$1327:zio.Tag[A10],implicitevidence$1328:zio.Tag[A11],implicitevidence$1329:zio.Tag[A12],implicitevidence$1330:zio.Tag[A13],implicitevidence$1331:zio.Tag[A14],implicitevidence$1332:zio.Tag[A15],implicitevidence$1333:zio.Tag[A16],implicitevidence$1334:zio.Tag[A17],implicitevidence$1335:zio.Tag[A18],implicitevidence$1336:zio.Tag[A19],implicitevidence$1337:zio.Tag[A20],implicitevidence$1338:zio.Tag[A21]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19]withzio.Has[A20]withzio.Has[A21],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19], arg20: zio.Tag[A20]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19] with Has[A20], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>zio.ZIO[R,E,B])(implicitevidence$1296:zio.Tag[A0],implicitevidence$1297:zio.Tag[A1],implicitevidence$1298:zio.Tag[A2],implicitevidence$1299:zio.Tag[A3],implicitevidence$1300:zio.Tag[A4],implicitevidence$1301:zio.Tag[A5],implicitevidence$1302:zio.Tag[A6],implicitevidence$1303:zio.Tag[A7],implicitevidence$1304:zio.Tag[A8],implicitevidence$1305:zio.Tag[A9],implicitevidence$1306:zio.Tag[A10],implicitevidence$1307:zio.Tag[A11],implicitevidence$1308:zio.Tag[A12],implicitevidence$1309:zio.Tag[A13],implicitevidence$1310:zio.Tag[A14],implicitevidence$1311:zio.Tag[A15],implicitevidence$1312:zio.Tag[A16],implicitevidence$1313:zio.Tag[A17],implicitevidence$1314:zio.Tag[A18],implicitevidence$1315:zio.Tag[A19],implicitevidence$1316:zio.Tag[A20]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19]withzio.Has[A20],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>zio.ZIO[R,E,B])(implicitevidence$1276:zio.Tag[A0],implicitevidence$1277:zio.Tag[A1],implicitevidence$1278:zio.Tag[A2],implicitevidence$1279:zio.Tag[A3],implicitevidence$1280:zio.Tag[A4],implicitevidence$1281:zio.Tag[A5],implicitevidence$1282:zio.Tag[A6],implicitevidence$1283:zio.Tag[A7],implicitevidence$1284:zio.Tag[A8],implicitevidence$1285:zio.Tag[A9],implicitevidence$1286:zio.Tag[A10],implicitevidence$1287:zio.Tag[A11],implicitevidence$1288:zio.Tag[A12],implicitevidence$1289:zio.Tag[A13],implicitevidence$1290:zio.Tag[A14],implicitevidence$1291:zio.Tag[A15],implicitevidence$1292:zio.Tag[A16],implicitevidence$1293:zio.Tag[A17],implicitevidence$1294:zio.Tag[A18],implicitevidence$1295:zio.Tag[A19]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>zio.ZIO[R,E,B])(implicitevidence$1257:zio.Tag[A0],implicitevidence$1258:zio.Tag[A1],implicitevidence$1259:zio.Tag[A2],implicitevidence$1260:zio.Tag[A3],implicitevidence$1261:zio.Tag[A4],implicitevidence$1262:zio.Tag[A5],implicitevidence$1263:zio.Tag[A6],implicitevidence$1264:zio.Tag[A7],implicitevidence$1265:zio.Tag[A8],implicitevidence$1266:zio.Tag[A9],implicitevidence$1267:zio.Tag[A10],implicitevidence$1268:zio.Tag[A11],implicitevidence$1269:zio.Tag[A12],implicitevidence$1270:zio.Tag[A13],implicitevidence$1271:zio.Tag[A14],implicitevidence$1272:zio.Tag[A15],implicitevidence$1273:zio.Tag[A16],implicitevidence$1274:zio.Tag[A17],implicitevidence$1275:zio.Tag[A18]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>zio.ZIO[R,E,B])(implicitevidence$1239:zio.Tag[A0],implicitevidence$1240:zio.Tag[A1],implicitevidence$1241:zio.Tag[A2],implicitevidence$1242:zio.Tag[A3],implicitevidence$1243:zio.Tag[A4],implicitevidence$1244:zio.Tag[A5],implicitevidence$1245:zio.Tag[A6],implicitevidence$1246:zio.Tag[A7],implicitevidence$1247:zio.Tag[A8],implicitevidence$1248:zio.Tag[A9],implicitevidence$1249:zio.Tag[A10],implicitevidence$1250:zio.Tag[A11],implicitevidence$1251:zio.Tag[A12],implicitevidence$1252:zio.Tag[A13],implicitevidence$1253:zio.Tag[A14],implicitevidence$1254:zio.Tag[A15],implicitevidence$1255:zio.Tag[A16],implicitevidence$1256:zio.Tag[A17]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>zio.ZIO[R,E,B])(implicitevidence$1222:zio.Tag[A0],implicitevidence$1223:zio.Tag[A1],implicitevidence$1224:zio.Tag[A2],implicitevidence$1225:zio.Tag[A3],implicitevidence$1226:zio.Tag[A4],implicitevidence$1227:zio.Tag[A5],implicitevidence$1228:zio.Tag[A6],implicitevidence$1229:zio.Tag[A7],implicitevidence$1230:zio.Tag[A8],implicitevidence$1231:zio.Tag[A9],implicitevidence$1232:zio.Tag[A10],implicitevidence$1233:zio.Tag[A11],implicitevidence$1234:zio.Tag[A12],implicitevidence$1235:zio.Tag[A13],implicitevidence$1236:zio.Tag[A14],implicitevidence$1237:zio.Tag[A15],implicitevidence$1238:zio.Tag[A16]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>zio.ZIO[R,E,B])(implicitevidence$1206:zio.Tag[A0],implicitevidence$1207:zio.Tag[A1],implicitevidence$1208:zio.Tag[A2],implicitevidence$1209:zio.Tag[A3],implicitevidence$1210:zio.Tag[A4],implicitevidence$1211:zio.Tag[A5],implicitevidence$1212:zio.Tag[A6],implicitevidence$1213:zio.Tag[A7],implicitevidence$1214:zio.Tag[A8],implicitevidence$1215:zio.Tag[A9],implicitevidence$1216:zio.Tag[A10],implicitevidence$1217:zio.Tag[A11],implicitevidence$1218:zio.Tag[A12],implicitevidence$1219:zio.Tag[A13],implicitevidence$1220:zio.Tag[A14],implicitevidence$1221:zio.Tag[A15]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>zio.ZIO[R,E,B])(implicitevidence$1191:zio.Tag[A0],implicitevidence$1192:zio.Tag[A1],implicitevidence$1193:zio.Tag[A2],implicitevidence$1194:zio.Tag[A3],implicitevidence$1195:zio.Tag[A4],implicitevidence$1196:zio.Tag[A5],implicitevidence$1197:zio.Tag[A6],implicitevidence$1198:zio.Tag[A7],implicitevidence$1199:zio.Tag[A8],implicitevidence$1200:zio.Tag[A9],implicitevidence$1201:zio.Tag[A10],implicitevidence$1202:zio.Tag[A11],implicitevidence$1203:zio.Tag[A12],implicitevidence$1204:zio.Tag[A13],implicitevidence$1205:zio.Tag[A14]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>zio.ZIO[R,E,B])(implicitevidence$1177:zio.Tag[A0],implicitevidence$1178:zio.Tag[A1],implicitevidence$1179:zio.Tag[A2],implicitevidence$1180:zio.Tag[A3],implicitevidence$1181:zio.Tag[A4],implicitevidence$1182:zio.Tag[A5],implicitevidence$1183:zio.Tag[A6],implicitevidence$1184:zio.Tag[A7],implicitevidence$1185:zio.Tag[A8],implicitevidence$1186:zio.Tag[A9],implicitevidence$1187:zio.Tag[A10],implicitevidence$1188:zio.Tag[A11],implicitevidence$1189:zio.Tag[A12],implicitevidence$1190:zio.Tag[A13]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>zio.ZIO[R,E,B])(implicitevidence$1164:zio.Tag[A0],implicitevidence$1165:zio.Tag[A1],implicitevidence$1166:zio.Tag[A2],implicitevidence$1167:zio.Tag[A3],implicitevidence$1168:zio.Tag[A4],implicitevidence$1169:zio.Tag[A5],implicitevidence$1170:zio.Tag[A6],implicitevidence$1171:zio.Tag[A7],implicitevidence$1172:zio.Tag[A8],implicitevidence$1173:zio.Tag[A9],implicitevidence$1174:zio.Tag[A10],implicitevidence$1175:zio.Tag[A11],implicitevidence$1176:zio.Tag[A12]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>zio.ZIO[R,E,B])(implicitevidence$1152:zio.Tag[A0],implicitevidence$1153:zio.Tag[A1],implicitevidence$1154:zio.Tag[A2],implicitevidence$1155:zio.Tag[A3],implicitevidence$1156:zio.Tag[A4],implicitevidence$1157:zio.Tag[A5],implicitevidence$1158:zio.Tag[A6],implicitevidence$1159:zio.Tag[A7],implicitevidence$1160:zio.Tag[A8],implicitevidence$1161:zio.Tag[A9],implicitevidence$1162:zio.Tag[A10],implicitevidence$1163:zio.Tag[A11]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>zio.ZIO[R,E,B])(implicitevidence$1141:zio.Tag[A0],implicitevidence$1142:zio.Tag[A1],implicitevidence$1143:zio.Tag[A2],implicitevidence$1144:zio.Tag[A3],implicitevidence$1145:zio.Tag[A4],implicitevidence$1146:zio.Tag[A5],implicitevidence$1147:zio.Tag[A6],implicitevidence$1148:zio.Tag[A7],implicitevidence$1149:zio.Tag[A8],implicitevidence$1150:zio.Tag[A9],implicitevidence$1151:zio.Tag[A10]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>zio.ZIO[R,E,B])(implicitevidence$1131:zio.Tag[A0],implicitevidence$1132:zio.Tag[A1],implicitevidence$1133:zio.Tag[A2],implicitevidence$1134:zio.Tag[A3],implicitevidence$1135:zio.Tag[A4],implicitevidence$1136:zio.Tag[A5],implicitevidence$1137:zio.Tag[A6],implicitevidence$1138:zio.Tag[A7],implicitevidence$1139:zio.Tag[A8],implicitevidence$1140:zio.Tag[A9]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,A7,A8,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>zio.ZIO[R,E,B])(implicitevidence$1122:zio.Tag[A0],implicitevidence$1123:zio.Tag[A1],implicitevidence$1124:zio.Tag[A2],implicitevidence$1125:zio.Tag[A3],implicitevidence$1126:zio.Tag[A4],implicitevidence$1127:zio.Tag[A5],implicitevidence$1128:zio.Tag[A6],implicitevidence$1129:zio.Tag[A7],implicitevidence$1130:zio.Tag[A8]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,A7,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7)=>zio.ZIO[R,E,B])(implicitevidence$1114:zio.Tag[A0],implicitevidence$1115:zio.Tag[A1],implicitevidence$1116:zio.Tag[A2],implicitevidence$1117:zio.Tag[A3],implicitevidence$1118:zio.Tag[A4],implicitevidence$1119:zio.Tag[A5],implicitevidence$1120:zio.Tag[A6],implicitevidence$1121:zio.Tag[A7]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,A6,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6)=>zio.ZIO[R,E,B])(implicitevidence$1107:zio.Tag[A0],implicitevidence$1108:zio.Tag[A1],implicitevidence$1109:zio.Tag[A2],implicitevidence$1110:zio.Tag[A3],implicitevidence$1111:zio.Tag[A4],implicitevidence$1112:zio.Tag[A5],implicitevidence$1113:zio.Tag[A6]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4, A5) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,A5,R,E,B](f:(A0,A1,A2,A3,A4,A5)=>zio.ZIO[R,E,B])(implicitevidence$1101:zio.Tag[A0],implicitevidence$1102:zio.Tag[A1],implicitevidence$1103:zio.Tag[A2],implicitevidence$1104:zio.Tag[A3],implicitevidence$1105:zio.Tag[A4],implicitevidence$1106:zio.Tag[A5]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3, A4) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,A4,R,E,B](f:(A0,A1,A2,A3,A4)=>zio.ZIO[R,E,B])(implicitevidence$1096:zio.Tag[A0],implicitevidence$1097:zio.Tag[A1],implicitevidence$1098:zio.Tag[A2],implicitevidence$1099:zio.Tag[A3],implicitevidence$1100:zio.Tag[A4]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2, A3) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,A3,R,E,B](f:(A0,A1,A2,A3)=>zio.ZIO[R,E,B])(implicitevidence$1092:zio.Tag[A0],implicitevidence$1093:zio.Tag[A1],implicitevidence$1094:zio.Tag[A2],implicitevidence$1095:zio.Tag[A3]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1, A2) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2]): ZLayer[R with Has[A0] with Has[A1] with Has[A2], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,A2,R,E,B](f:(A0,A1,A2)=>zio.ZIO[R,E,B])(implicitevidence$1089:zio.Tag[A0],implicitevidence$1090:zio.Tag[A1],implicitevidence$1091:zio.Tag[A2]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2],E,B]", "kind" : "def"}, {"label" : "fromServicesManyM", "tail" : "(f: (A0, A1) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1]): ZLayer[R with Has[A0] with Has[A1], E, B]", "member" : "zio.ZLayer.fromServicesManyM", "link" : "zio\/ZLayer$.html#fromServicesManyM[A0,A1,R,E,B](f:(A0,A1)=>zio.ZIO[R,E,B])(implicitevidence$1087:zio.Tag[A0],implicitevidence$1088:zio.Tag[A1]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1],E,B]", "kind" : "def"}, {"label" : "fromServiceManyM", "tail" : "(f: (A) => ZIO[R, E, B])(arg0: zio.Tag[A]): ZLayer[R with Has[A], E, B]", "member" : "zio.ZLayer.fromServiceManyM", "link" : "zio\/ZLayer$.html#fromServiceManyM[A,R,E,B](f:A=>zio.ZIO[R,E,B])(implicitevidence$1086:zio.Tag[A]):zio.ZLayer[Rwithzio.Has[A],E,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19], arg20: zio.Tag[A20], arg21: zio.Tag[A21]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19] with Has[A20] with Has[A21], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>B)(implicitevidence$1064:zio.Tag[A0],implicitevidence$1065:zio.Tag[A1],implicitevidence$1066:zio.Tag[A2],implicitevidence$1067:zio.Tag[A3],implicitevidence$1068:zio.Tag[A4],implicitevidence$1069:zio.Tag[A5],implicitevidence$1070:zio.Tag[A6],implicitevidence$1071:zio.Tag[A7],implicitevidence$1072:zio.Tag[A8],implicitevidence$1073:zio.Tag[A9],implicitevidence$1074:zio.Tag[A10],implicitevidence$1075:zio.Tag[A11],implicitevidence$1076:zio.Tag[A12],implicitevidence$1077:zio.Tag[A13],implicitevidence$1078:zio.Tag[A14],implicitevidence$1079:zio.Tag[A15],implicitevidence$1080:zio.Tag[A16],implicitevidence$1081:zio.Tag[A17],implicitevidence$1082:zio.Tag[A18],implicitevidence$1083:zio.Tag[A19],implicitevidence$1084:zio.Tag[A20],implicitevidence$1085:zio.Tag[A21]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19]withzio.Has[A20]withzio.Has[A21],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19], arg20: zio.Tag[A20]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19] with Has[A20], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>B)(implicitevidence$1043:zio.Tag[A0],implicitevidence$1044:zio.Tag[A1],implicitevidence$1045:zio.Tag[A2],implicitevidence$1046:zio.Tag[A3],implicitevidence$1047:zio.Tag[A4],implicitevidence$1048:zio.Tag[A5],implicitevidence$1049:zio.Tag[A6],implicitevidence$1050:zio.Tag[A7],implicitevidence$1051:zio.Tag[A8],implicitevidence$1052:zio.Tag[A9],implicitevidence$1053:zio.Tag[A10],implicitevidence$1054:zio.Tag[A11],implicitevidence$1055:zio.Tag[A12],implicitevidence$1056:zio.Tag[A13],implicitevidence$1057:zio.Tag[A14],implicitevidence$1058:zio.Tag[A15],implicitevidence$1059:zio.Tag[A16],implicitevidence$1060:zio.Tag[A17],implicitevidence$1061:zio.Tag[A18],implicitevidence$1062:zio.Tag[A19],implicitevidence$1063:zio.Tag[A20]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19]withzio.Has[A20],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>B)(implicitevidence$1023:zio.Tag[A0],implicitevidence$1024:zio.Tag[A1],implicitevidence$1025:zio.Tag[A2],implicitevidence$1026:zio.Tag[A3],implicitevidence$1027:zio.Tag[A4],implicitevidence$1028:zio.Tag[A5],implicitevidence$1029:zio.Tag[A6],implicitevidence$1030:zio.Tag[A7],implicitevidence$1031:zio.Tag[A8],implicitevidence$1032:zio.Tag[A9],implicitevidence$1033:zio.Tag[A10],implicitevidence$1034:zio.Tag[A11],implicitevidence$1035:zio.Tag[A12],implicitevidence$1036:zio.Tag[A13],implicitevidence$1037:zio.Tag[A14],implicitevidence$1038:zio.Tag[A15],implicitevidence$1039:zio.Tag[A16],implicitevidence$1040:zio.Tag[A17],implicitevidence$1041:zio.Tag[A18],implicitevidence$1042:zio.Tag[A19]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>B)(implicitevidence$1004:zio.Tag[A0],implicitevidence$1005:zio.Tag[A1],implicitevidence$1006:zio.Tag[A2],implicitevidence$1007:zio.Tag[A3],implicitevidence$1008:zio.Tag[A4],implicitevidence$1009:zio.Tag[A5],implicitevidence$1010:zio.Tag[A6],implicitevidence$1011:zio.Tag[A7],implicitevidence$1012:zio.Tag[A8],implicitevidence$1013:zio.Tag[A9],implicitevidence$1014:zio.Tag[A10],implicitevidence$1015:zio.Tag[A11],implicitevidence$1016:zio.Tag[A12],implicitevidence$1017:zio.Tag[A13],implicitevidence$1018:zio.Tag[A14],implicitevidence$1019:zio.Tag[A15],implicitevidence$1020:zio.Tag[A16],implicitevidence$1021:zio.Tag[A17],implicitevidence$1022:zio.Tag[A18]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>B)(implicitevidence$986:zio.Tag[A0],implicitevidence$987:zio.Tag[A1],implicitevidence$988:zio.Tag[A2],implicitevidence$989:zio.Tag[A3],implicitevidence$990:zio.Tag[A4],implicitevidence$991:zio.Tag[A5],implicitevidence$992:zio.Tag[A6],implicitevidence$993:zio.Tag[A7],implicitevidence$994:zio.Tag[A8],implicitevidence$995:zio.Tag[A9],implicitevidence$996:zio.Tag[A10],implicitevidence$997:zio.Tag[A11],implicitevidence$998:zio.Tag[A12],implicitevidence$999:zio.Tag[A13],implicitevidence$1000:zio.Tag[A14],implicitevidence$1001:zio.Tag[A15],implicitevidence$1002:zio.Tag[A16],implicitevidence$1003:zio.Tag[A17]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>B)(implicitevidence$969:zio.Tag[A0],implicitevidence$970:zio.Tag[A1],implicitevidence$971:zio.Tag[A2],implicitevidence$972:zio.Tag[A3],implicitevidence$973:zio.Tag[A4],implicitevidence$974:zio.Tag[A5],implicitevidence$975:zio.Tag[A6],implicitevidence$976:zio.Tag[A7],implicitevidence$977:zio.Tag[A8],implicitevidence$978:zio.Tag[A9],implicitevidence$979:zio.Tag[A10],implicitevidence$980:zio.Tag[A11],implicitevidence$981:zio.Tag[A12],implicitevidence$982:zio.Tag[A13],implicitevidence$983:zio.Tag[A14],implicitevidence$984:zio.Tag[A15],implicitevidence$985:zio.Tag[A16]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>B)(implicitevidence$953:zio.Tag[A0],implicitevidence$954:zio.Tag[A1],implicitevidence$955:zio.Tag[A2],implicitevidence$956:zio.Tag[A3],implicitevidence$957:zio.Tag[A4],implicitevidence$958:zio.Tag[A5],implicitevidence$959:zio.Tag[A6],implicitevidence$960:zio.Tag[A7],implicitevidence$961:zio.Tag[A8],implicitevidence$962:zio.Tag[A9],implicitevidence$963:zio.Tag[A10],implicitevidence$964:zio.Tag[A11],implicitevidence$965:zio.Tag[A12],implicitevidence$966:zio.Tag[A13],implicitevidence$967:zio.Tag[A14],implicitevidence$968:zio.Tag[A15]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>B)(implicitevidence$938:zio.Tag[A0],implicitevidence$939:zio.Tag[A1],implicitevidence$940:zio.Tag[A2],implicitevidence$941:zio.Tag[A3],implicitevidence$942:zio.Tag[A4],implicitevidence$943:zio.Tag[A5],implicitevidence$944:zio.Tag[A6],implicitevidence$945:zio.Tag[A7],implicitevidence$946:zio.Tag[A8],implicitevidence$947:zio.Tag[A9],implicitevidence$948:zio.Tag[A10],implicitevidence$949:zio.Tag[A11],implicitevidence$950:zio.Tag[A12],implicitevidence$951:zio.Tag[A13],implicitevidence$952:zio.Tag[A14]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>B)(implicitevidence$924:zio.Tag[A0],implicitevidence$925:zio.Tag[A1],implicitevidence$926:zio.Tag[A2],implicitevidence$927:zio.Tag[A3],implicitevidence$928:zio.Tag[A4],implicitevidence$929:zio.Tag[A5],implicitevidence$930:zio.Tag[A6],implicitevidence$931:zio.Tag[A7],implicitevidence$932:zio.Tag[A8],implicitevidence$933:zio.Tag[A9],implicitevidence$934:zio.Tag[A10],implicitevidence$935:zio.Tag[A11],implicitevidence$936:zio.Tag[A12],implicitevidence$937:zio.Tag[A13]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>B)(implicitevidence$911:zio.Tag[A0],implicitevidence$912:zio.Tag[A1],implicitevidence$913:zio.Tag[A2],implicitevidence$914:zio.Tag[A3],implicitevidence$915:zio.Tag[A4],implicitevidence$916:zio.Tag[A5],implicitevidence$917:zio.Tag[A6],implicitevidence$918:zio.Tag[A7],implicitevidence$919:zio.Tag[A8],implicitevidence$920:zio.Tag[A9],implicitevidence$921:zio.Tag[A10],implicitevidence$922:zio.Tag[A11],implicitevidence$923:zio.Tag[A12]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(implicitevidence$899:zio.Tag[A0],implicitevidence$900:zio.Tag[A1],implicitevidence$901:zio.Tag[A2],implicitevidence$902:zio.Tag[A3],implicitevidence$903:zio.Tag[A4],implicitevidence$904:zio.Tag[A5],implicitevidence$905:zio.Tag[A6],implicitevidence$906:zio.Tag[A7],implicitevidence$907:zio.Tag[A8],implicitevidence$908:zio.Tag[A9],implicitevidence$909:zio.Tag[A10],implicitevidence$910:zio.Tag[A11]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(implicitevidence$888:zio.Tag[A0],implicitevidence$889:zio.Tag[A1],implicitevidence$890:zio.Tag[A2],implicitevidence$891:zio.Tag[A3],implicitevidence$892:zio.Tag[A4],implicitevidence$893:zio.Tag[A5],implicitevidence$894:zio.Tag[A6],implicitevidence$895:zio.Tag[A7],implicitevidence$896:zio.Tag[A8],implicitevidence$897:zio.Tag[A9],implicitevidence$898:zio.Tag[A10]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(implicitevidence$878:zio.Tag[A0],implicitevidence$879:zio.Tag[A1],implicitevidence$880:zio.Tag[A2],implicitevidence$881:zio.Tag[A3],implicitevidence$882:zio.Tag[A4],implicitevidence$883:zio.Tag[A5],implicitevidence$884:zio.Tag[A6],implicitevidence$885:zio.Tag[A7],implicitevidence$886:zio.Tag[A8],implicitevidence$887:zio.Tag[A9]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,A7,A8,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>B)(implicitevidence$869:zio.Tag[A0],implicitevidence$870:zio.Tag[A1],implicitevidence$871:zio.Tag[A2],implicitevidence$872:zio.Tag[A3],implicitevidence$873:zio.Tag[A4],implicitevidence$874:zio.Tag[A5],implicitevidence$875:zio.Tag[A6],implicitevidence$876:zio.Tag[A7],implicitevidence$877:zio.Tag[A8]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,A7,B](f:(A0,A1,A2,A3,A4,A5,A6,A7)=>B)(implicitevidence$861:zio.Tag[A0],implicitevidence$862:zio.Tag[A1],implicitevidence$863:zio.Tag[A2],implicitevidence$864:zio.Tag[A3],implicitevidence$865:zio.Tag[A4],implicitevidence$866:zio.Tag[A5],implicitevidence$867:zio.Tag[A6],implicitevidence$868:zio.Tag[A7]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,A6,B](f:(A0,A1,A2,A3,A4,A5,A6)=>B)(implicitevidence$854:zio.Tag[A0],implicitevidence$855:zio.Tag[A1],implicitevidence$856:zio.Tag[A2],implicitevidence$857:zio.Tag[A3],implicitevidence$858:zio.Tag[A4],implicitevidence$859:zio.Tag[A5],implicitevidence$860:zio.Tag[A6]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4, A5) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,A5,B](f:(A0,A1,A2,A3,A4,A5)=>B)(implicitevidence$848:zio.Tag[A0],implicitevidence$849:zio.Tag[A1],implicitevidence$850:zio.Tag[A2],implicitevidence$851:zio.Tag[A3],implicitevidence$852:zio.Tag[A4],implicitevidence$853:zio.Tag[A5]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3, A4) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,A4,B](f:(A0,A1,A2,A3,A4)=>B)(implicitevidence$843:zio.Tag[A0],implicitevidence$844:zio.Tag[A1],implicitevidence$845:zio.Tag[A2],implicitevidence$846:zio.Tag[A3],implicitevidence$847:zio.Tag[A4]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2, A3) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,A3,B](f:(A0,A1,A2,A3)=>B)(implicitevidence$839:zio.Tag[A0],implicitevidence$840:zio.Tag[A1],implicitevidence$841:zio.Tag[A2],implicitevidence$842:zio.Tag[A3]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1, A2) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2]): ZLayer[Has[A0] with Has[A1] with Has[A2], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,A2,B](f:(A0,A1,A2)=>B)(implicitevidence$836:zio.Tag[A0],implicitevidence$837:zio.Tag[A1],implicitevidence$838:zio.Tag[A2]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesMany", "tail" : "(f: (A0, A1) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1]): ZLayer[Has[A0] with Has[A1], Nothing, B]", "member" : "zio.ZLayer.fromServicesMany", "link" : "zio\/ZLayer$.html#fromServicesMany[A0,A1,B](f:(A0,A1)=>B)(implicitevidence$834:zio.Tag[A0],implicitevidence$835:zio.Tag[A1]):zio.ZLayer[zio.Has[A0]withzio.Has[A1],Nothing,B]", "kind" : "def"}, {"label" : "fromServiceMany", "tail" : "(f: (A) => B)(arg0: zio.Tag[A]): ZLayer[Has[A], Nothing, B]", "member" : "zio.ZLayer.fromServiceMany", "link" : "zio\/ZLayer$.html#fromServiceMany[A,B](f:A=>B)(implicitevidence$833:zio.Tag[A]):zio.ZLayer[zio.Has[A],Nothing,B]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19], arg20: zio.Tag[A20], arg21: zio.Tag[A21], arg22: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19] with Has[A20] with Has[A21], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>zio.ZManaged[R,E,B])(implicitevidence$810:zio.Tag[A0],implicitevidence$811:zio.Tag[A1],implicitevidence$812:zio.Tag[A2],implicitevidence$813:zio.Tag[A3],implicitevidence$814:zio.Tag[A4],implicitevidence$815:zio.Tag[A5],implicitevidence$816:zio.Tag[A6],implicitevidence$817:zio.Tag[A7],implicitevidence$818:zio.Tag[A8],implicitevidence$819:zio.Tag[A9],implicitevidence$820:zio.Tag[A10],implicitevidence$821:zio.Tag[A11],implicitevidence$822:zio.Tag[A12],implicitevidence$823:zio.Tag[A13],implicitevidence$824:zio.Tag[A14],implicitevidence$825:zio.Tag[A15],implicitevidence$826:zio.Tag[A16],implicitevidence$827:zio.Tag[A17],implicitevidence$828:zio.Tag[A18],implicitevidence$829:zio.Tag[A19],implicitevidence$830:zio.Tag[A20],implicitevidence$831:zio.Tag[A21],implicitevidence$832:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19]withzio.Has[A20]withzio.Has[A21],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19], arg20: zio.Tag[A20], arg21: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19] with Has[A20], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>zio.ZManaged[R,E,B])(implicitevidence$788:zio.Tag[A0],implicitevidence$789:zio.Tag[A1],implicitevidence$790:zio.Tag[A2],implicitevidence$791:zio.Tag[A3],implicitevidence$792:zio.Tag[A4],implicitevidence$793:zio.Tag[A5],implicitevidence$794:zio.Tag[A6],implicitevidence$795:zio.Tag[A7],implicitevidence$796:zio.Tag[A8],implicitevidence$797:zio.Tag[A9],implicitevidence$798:zio.Tag[A10],implicitevidence$799:zio.Tag[A11],implicitevidence$800:zio.Tag[A12],implicitevidence$801:zio.Tag[A13],implicitevidence$802:zio.Tag[A14],implicitevidence$803:zio.Tag[A15],implicitevidence$804:zio.Tag[A16],implicitevidence$805:zio.Tag[A17],implicitevidence$806:zio.Tag[A18],implicitevidence$807:zio.Tag[A19],implicitevidence$808:zio.Tag[A20],implicitevidence$809:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19]withzio.Has[A20],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19], arg20: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>zio.ZManaged[R,E,B])(implicitevidence$767:zio.Tag[A0],implicitevidence$768:zio.Tag[A1],implicitevidence$769:zio.Tag[A2],implicitevidence$770:zio.Tag[A3],implicitevidence$771:zio.Tag[A4],implicitevidence$772:zio.Tag[A5],implicitevidence$773:zio.Tag[A6],implicitevidence$774:zio.Tag[A7],implicitevidence$775:zio.Tag[A8],implicitevidence$776:zio.Tag[A9],implicitevidence$777:zio.Tag[A10],implicitevidence$778:zio.Tag[A11],implicitevidence$779:zio.Tag[A12],implicitevidence$780:zio.Tag[A13],implicitevidence$781:zio.Tag[A14],implicitevidence$782:zio.Tag[A15],implicitevidence$783:zio.Tag[A16],implicitevidence$784:zio.Tag[A17],implicitevidence$785:zio.Tag[A18],implicitevidence$786:zio.Tag[A19],implicitevidence$787:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>zio.ZManaged[R,E,B])(implicitevidence$747:zio.Tag[A0],implicitevidence$748:zio.Tag[A1],implicitevidence$749:zio.Tag[A2],implicitevidence$750:zio.Tag[A3],implicitevidence$751:zio.Tag[A4],implicitevidence$752:zio.Tag[A5],implicitevidence$753:zio.Tag[A6],implicitevidence$754:zio.Tag[A7],implicitevidence$755:zio.Tag[A8],implicitevidence$756:zio.Tag[A9],implicitevidence$757:zio.Tag[A10],implicitevidence$758:zio.Tag[A11],implicitevidence$759:zio.Tag[A12],implicitevidence$760:zio.Tag[A13],implicitevidence$761:zio.Tag[A14],implicitevidence$762:zio.Tag[A15],implicitevidence$763:zio.Tag[A16],implicitevidence$764:zio.Tag[A17],implicitevidence$765:zio.Tag[A18],implicitevidence$766:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>zio.ZManaged[R,E,B])(implicitevidence$728:zio.Tag[A0],implicitevidence$729:zio.Tag[A1],implicitevidence$730:zio.Tag[A2],implicitevidence$731:zio.Tag[A3],implicitevidence$732:zio.Tag[A4],implicitevidence$733:zio.Tag[A5],implicitevidence$734:zio.Tag[A6],implicitevidence$735:zio.Tag[A7],implicitevidence$736:zio.Tag[A8],implicitevidence$737:zio.Tag[A9],implicitevidence$738:zio.Tag[A10],implicitevidence$739:zio.Tag[A11],implicitevidence$740:zio.Tag[A12],implicitevidence$741:zio.Tag[A13],implicitevidence$742:zio.Tag[A14],implicitevidence$743:zio.Tag[A15],implicitevidence$744:zio.Tag[A16],implicitevidence$745:zio.Tag[A17],implicitevidence$746:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>zio.ZManaged[R,E,B])(implicitevidence$710:zio.Tag[A0],implicitevidence$711:zio.Tag[A1],implicitevidence$712:zio.Tag[A2],implicitevidence$713:zio.Tag[A3],implicitevidence$714:zio.Tag[A4],implicitevidence$715:zio.Tag[A5],implicitevidence$716:zio.Tag[A6],implicitevidence$717:zio.Tag[A7],implicitevidence$718:zio.Tag[A8],implicitevidence$719:zio.Tag[A9],implicitevidence$720:zio.Tag[A10],implicitevidence$721:zio.Tag[A11],implicitevidence$722:zio.Tag[A12],implicitevidence$723:zio.Tag[A13],implicitevidence$724:zio.Tag[A14],implicitevidence$725:zio.Tag[A15],implicitevidence$726:zio.Tag[A16],implicitevidence$727:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>zio.ZManaged[R,E,B])(implicitevidence$693:zio.Tag[A0],implicitevidence$694:zio.Tag[A1],implicitevidence$695:zio.Tag[A2],implicitevidence$696:zio.Tag[A3],implicitevidence$697:zio.Tag[A4],implicitevidence$698:zio.Tag[A5],implicitevidence$699:zio.Tag[A6],implicitevidence$700:zio.Tag[A7],implicitevidence$701:zio.Tag[A8],implicitevidence$702:zio.Tag[A9],implicitevidence$703:zio.Tag[A10],implicitevidence$704:zio.Tag[A11],implicitevidence$705:zio.Tag[A12],implicitevidence$706:zio.Tag[A13],implicitevidence$707:zio.Tag[A14],implicitevidence$708:zio.Tag[A15],implicitevidence$709:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>zio.ZManaged[R,E,B])(implicitevidence$677:zio.Tag[A0],implicitevidence$678:zio.Tag[A1],implicitevidence$679:zio.Tag[A2],implicitevidence$680:zio.Tag[A3],implicitevidence$681:zio.Tag[A4],implicitevidence$682:zio.Tag[A5],implicitevidence$683:zio.Tag[A6],implicitevidence$684:zio.Tag[A7],implicitevidence$685:zio.Tag[A8],implicitevidence$686:zio.Tag[A9],implicitevidence$687:zio.Tag[A10],implicitevidence$688:zio.Tag[A11],implicitevidence$689:zio.Tag[A12],implicitevidence$690:zio.Tag[A13],implicitevidence$691:zio.Tag[A14],implicitevidence$692:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>zio.ZManaged[R,E,B])(implicitevidence$662:zio.Tag[A0],implicitevidence$663:zio.Tag[A1],implicitevidence$664:zio.Tag[A2],implicitevidence$665:zio.Tag[A3],implicitevidence$666:zio.Tag[A4],implicitevidence$667:zio.Tag[A5],implicitevidence$668:zio.Tag[A6],implicitevidence$669:zio.Tag[A7],implicitevidence$670:zio.Tag[A8],implicitevidence$671:zio.Tag[A9],implicitevidence$672:zio.Tag[A10],implicitevidence$673:zio.Tag[A11],implicitevidence$674:zio.Tag[A12],implicitevidence$675:zio.Tag[A13],implicitevidence$676:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>zio.ZManaged[R,E,B])(implicitevidence$648:zio.Tag[A0],implicitevidence$649:zio.Tag[A1],implicitevidence$650:zio.Tag[A2],implicitevidence$651:zio.Tag[A3],implicitevidence$652:zio.Tag[A4],implicitevidence$653:zio.Tag[A5],implicitevidence$654:zio.Tag[A6],implicitevidence$655:zio.Tag[A7],implicitevidence$656:zio.Tag[A8],implicitevidence$657:zio.Tag[A9],implicitevidence$658:zio.Tag[A10],implicitevidence$659:zio.Tag[A11],implicitevidence$660:zio.Tag[A12],implicitevidence$661:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>zio.ZManaged[R,E,B])(implicitevidence$635:zio.Tag[A0],implicitevidence$636:zio.Tag[A1],implicitevidence$637:zio.Tag[A2],implicitevidence$638:zio.Tag[A3],implicitevidence$639:zio.Tag[A4],implicitevidence$640:zio.Tag[A5],implicitevidence$641:zio.Tag[A6],implicitevidence$642:zio.Tag[A7],implicitevidence$643:zio.Tag[A8],implicitevidence$644:zio.Tag[A9],implicitevidence$645:zio.Tag[A10],implicitevidence$646:zio.Tag[A11],implicitevidence$647:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>zio.ZManaged[R,E,B])(implicitevidence$623:zio.Tag[A0],implicitevidence$624:zio.Tag[A1],implicitevidence$625:zio.Tag[A2],implicitevidence$626:zio.Tag[A3],implicitevidence$627:zio.Tag[A4],implicitevidence$628:zio.Tag[A5],implicitevidence$629:zio.Tag[A6],implicitevidence$630:zio.Tag[A7],implicitevidence$631:zio.Tag[A8],implicitevidence$632:zio.Tag[A9],implicitevidence$633:zio.Tag[A10],implicitevidence$634:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>zio.ZManaged[R,E,B])(implicitevidence$612:zio.Tag[A0],implicitevidence$613:zio.Tag[A1],implicitevidence$614:zio.Tag[A2],implicitevidence$615:zio.Tag[A3],implicitevidence$616:zio.Tag[A4],implicitevidence$617:zio.Tag[A5],implicitevidence$618:zio.Tag[A6],implicitevidence$619:zio.Tag[A7],implicitevidence$620:zio.Tag[A8],implicitevidence$621:zio.Tag[A9],implicitevidence$622:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,A7,A8,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>zio.ZManaged[R,E,B])(implicitevidence$602:zio.Tag[A0],implicitevidence$603:zio.Tag[A1],implicitevidence$604:zio.Tag[A2],implicitevidence$605:zio.Tag[A3],implicitevidence$606:zio.Tag[A4],implicitevidence$607:zio.Tag[A5],implicitevidence$608:zio.Tag[A6],implicitevidence$609:zio.Tag[A7],implicitevidence$610:zio.Tag[A8],implicitevidence$611:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,A7,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7)=>zio.ZManaged[R,E,B])(implicitevidence$593:zio.Tag[A0],implicitevidence$594:zio.Tag[A1],implicitevidence$595:zio.Tag[A2],implicitevidence$596:zio.Tag[A3],implicitevidence$597:zio.Tag[A4],implicitevidence$598:zio.Tag[A5],implicitevidence$599:zio.Tag[A6],implicitevidence$600:zio.Tag[A7],implicitevidence$601:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,A6,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6)=>zio.ZManaged[R,E,B])(implicitevidence$585:zio.Tag[A0],implicitevidence$586:zio.Tag[A1],implicitevidence$587:zio.Tag[A2],implicitevidence$588:zio.Tag[A3],implicitevidence$589:zio.Tag[A4],implicitevidence$590:zio.Tag[A5],implicitevidence$591:zio.Tag[A6],implicitevidence$592:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4, A5) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,A5,R,E,B](f:(A0,A1,A2,A3,A4,A5)=>zio.ZManaged[R,E,B])(implicitevidence$578:zio.Tag[A0],implicitevidence$579:zio.Tag[A1],implicitevidence$580:zio.Tag[A2],implicitevidence$581:zio.Tag[A3],implicitevidence$582:zio.Tag[A4],implicitevidence$583:zio.Tag[A5],implicitevidence$584:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3, A4) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,A4,R,E,B](f:(A0,A1,A2,A3,A4)=>zio.ZManaged[R,E,B])(implicitevidence$572:zio.Tag[A0],implicitevidence$573:zio.Tag[A1],implicitevidence$574:zio.Tag[A2],implicitevidence$575:zio.Tag[A3],implicitevidence$576:zio.Tag[A4],implicitevidence$577:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2, A3) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,A3,R,E,B](f:(A0,A1,A2,A3)=>zio.ZManaged[R,E,B])(implicitevidence$567:zio.Tag[A0],implicitevidence$568:zio.Tag[A1],implicitevidence$569:zio.Tag[A2],implicitevidence$570:zio.Tag[A3],implicitevidence$571:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1, A2) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,A2,R,E,B](f:(A0,A1,A2)=>zio.ZManaged[R,E,B])(implicitevidence$563:zio.Tag[A0],implicitevidence$564:zio.Tag[A1],implicitevidence$565:zio.Tag[A2],implicitevidence$566:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesManaged", "tail" : "(f: (A0, A1) => ZManaged[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1], E, Has[B]]", "member" : "zio.ZLayer.fromServicesManaged", "link" : "zio\/ZLayer$.html#fromServicesManaged[A0,A1,R,E,B](f:(A0,A1)=>zio.ZManaged[R,E,B])(implicitevidence$560:zio.Tag[A0],implicitevidence$561:zio.Tag[A1],implicitevidence$562:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServiceManaged", "tail" : "(f: (A) => ZManaged[R, E, B])(arg0: zio.Tag[A], arg1: zio.Tag[B]): ZLayer[R with Has[A], E, Has[B]]", "member" : "zio.ZLayer.fromServiceManaged", "link" : "zio\/ZLayer$.html#fromServiceManaged[A,R,E,B](f:A=>zio.ZManaged[R,E,B])(implicitevidence$558:zio.Tag[A],implicitevidence$559:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19], arg20: zio.Tag[A20], arg21: zio.Tag[A21], arg22: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19] with Has[A20] with Has[A21], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>zio.ZIO[R,E,B])(implicitevidence$535:zio.Tag[A0],implicitevidence$536:zio.Tag[A1],implicitevidence$537:zio.Tag[A2],implicitevidence$538:zio.Tag[A3],implicitevidence$539:zio.Tag[A4],implicitevidence$540:zio.Tag[A5],implicitevidence$541:zio.Tag[A6],implicitevidence$542:zio.Tag[A7],implicitevidence$543:zio.Tag[A8],implicitevidence$544:zio.Tag[A9],implicitevidence$545:zio.Tag[A10],implicitevidence$546:zio.Tag[A11],implicitevidence$547:zio.Tag[A12],implicitevidence$548:zio.Tag[A13],implicitevidence$549:zio.Tag[A14],implicitevidence$550:zio.Tag[A15],implicitevidence$551:zio.Tag[A16],implicitevidence$552:zio.Tag[A17],implicitevidence$553:zio.Tag[A18],implicitevidence$554:zio.Tag[A19],implicitevidence$555:zio.Tag[A20],implicitevidence$556:zio.Tag[A21],implicitevidence$557:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19]withzio.Has[A20]withzio.Has[A21],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19], arg20: zio.Tag[A20], arg21: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19] with Has[A20], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>zio.ZIO[R,E,B])(implicitevidence$513:zio.Tag[A0],implicitevidence$514:zio.Tag[A1],implicitevidence$515:zio.Tag[A2],implicitevidence$516:zio.Tag[A3],implicitevidence$517:zio.Tag[A4],implicitevidence$518:zio.Tag[A5],implicitevidence$519:zio.Tag[A6],implicitevidence$520:zio.Tag[A7],implicitevidence$521:zio.Tag[A8],implicitevidence$522:zio.Tag[A9],implicitevidence$523:zio.Tag[A10],implicitevidence$524:zio.Tag[A11],implicitevidence$525:zio.Tag[A12],implicitevidence$526:zio.Tag[A13],implicitevidence$527:zio.Tag[A14],implicitevidence$528:zio.Tag[A15],implicitevidence$529:zio.Tag[A16],implicitevidence$530:zio.Tag[A17],implicitevidence$531:zio.Tag[A18],implicitevidence$532:zio.Tag[A19],implicitevidence$533:zio.Tag[A20],implicitevidence$534:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19]withzio.Has[A20],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19], arg20: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>zio.ZIO[R,E,B])(implicitevidence$492:zio.Tag[A0],implicitevidence$493:zio.Tag[A1],implicitevidence$494:zio.Tag[A2],implicitevidence$495:zio.Tag[A3],implicitevidence$496:zio.Tag[A4],implicitevidence$497:zio.Tag[A5],implicitevidence$498:zio.Tag[A6],implicitevidence$499:zio.Tag[A7],implicitevidence$500:zio.Tag[A8],implicitevidence$501:zio.Tag[A9],implicitevidence$502:zio.Tag[A10],implicitevidence$503:zio.Tag[A11],implicitevidence$504:zio.Tag[A12],implicitevidence$505:zio.Tag[A13],implicitevidence$506:zio.Tag[A14],implicitevidence$507:zio.Tag[A15],implicitevidence$508:zio.Tag[A16],implicitevidence$509:zio.Tag[A17],implicitevidence$510:zio.Tag[A18],implicitevidence$511:zio.Tag[A19],implicitevidence$512:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>zio.ZIO[R,E,B])(implicitevidence$472:zio.Tag[A0],implicitevidence$473:zio.Tag[A1],implicitevidence$474:zio.Tag[A2],implicitevidence$475:zio.Tag[A3],implicitevidence$476:zio.Tag[A4],implicitevidence$477:zio.Tag[A5],implicitevidence$478:zio.Tag[A6],implicitevidence$479:zio.Tag[A7],implicitevidence$480:zio.Tag[A8],implicitevidence$481:zio.Tag[A9],implicitevidence$482:zio.Tag[A10],implicitevidence$483:zio.Tag[A11],implicitevidence$484:zio.Tag[A12],implicitevidence$485:zio.Tag[A13],implicitevidence$486:zio.Tag[A14],implicitevidence$487:zio.Tag[A15],implicitevidence$488:zio.Tag[A16],implicitevidence$489:zio.Tag[A17],implicitevidence$490:zio.Tag[A18],implicitevidence$491:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>zio.ZIO[R,E,B])(implicitevidence$453:zio.Tag[A0],implicitevidence$454:zio.Tag[A1],implicitevidence$455:zio.Tag[A2],implicitevidence$456:zio.Tag[A3],implicitevidence$457:zio.Tag[A4],implicitevidence$458:zio.Tag[A5],implicitevidence$459:zio.Tag[A6],implicitevidence$460:zio.Tag[A7],implicitevidence$461:zio.Tag[A8],implicitevidence$462:zio.Tag[A9],implicitevidence$463:zio.Tag[A10],implicitevidence$464:zio.Tag[A11],implicitevidence$465:zio.Tag[A12],implicitevidence$466:zio.Tag[A13],implicitevidence$467:zio.Tag[A14],implicitevidence$468:zio.Tag[A15],implicitevidence$469:zio.Tag[A16],implicitevidence$470:zio.Tag[A17],implicitevidence$471:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>zio.ZIO[R,E,B])(implicitevidence$435:zio.Tag[A0],implicitevidence$436:zio.Tag[A1],implicitevidence$437:zio.Tag[A2],implicitevidence$438:zio.Tag[A3],implicitevidence$439:zio.Tag[A4],implicitevidence$440:zio.Tag[A5],implicitevidence$441:zio.Tag[A6],implicitevidence$442:zio.Tag[A7],implicitevidence$443:zio.Tag[A8],implicitevidence$444:zio.Tag[A9],implicitevidence$445:zio.Tag[A10],implicitevidence$446:zio.Tag[A11],implicitevidence$447:zio.Tag[A12],implicitevidence$448:zio.Tag[A13],implicitevidence$449:zio.Tag[A14],implicitevidence$450:zio.Tag[A15],implicitevidence$451:zio.Tag[A16],implicitevidence$452:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>zio.ZIO[R,E,B])(implicitevidence$418:zio.Tag[A0],implicitevidence$419:zio.Tag[A1],implicitevidence$420:zio.Tag[A2],implicitevidence$421:zio.Tag[A3],implicitevidence$422:zio.Tag[A4],implicitevidence$423:zio.Tag[A5],implicitevidence$424:zio.Tag[A6],implicitevidence$425:zio.Tag[A7],implicitevidence$426:zio.Tag[A8],implicitevidence$427:zio.Tag[A9],implicitevidence$428:zio.Tag[A10],implicitevidence$429:zio.Tag[A11],implicitevidence$430:zio.Tag[A12],implicitevidence$431:zio.Tag[A13],implicitevidence$432:zio.Tag[A14],implicitevidence$433:zio.Tag[A15],implicitevidence$434:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>zio.ZIO[R,E,B])(implicitevidence$402:zio.Tag[A0],implicitevidence$403:zio.Tag[A1],implicitevidence$404:zio.Tag[A2],implicitevidence$405:zio.Tag[A3],implicitevidence$406:zio.Tag[A4],implicitevidence$407:zio.Tag[A5],implicitevidence$408:zio.Tag[A6],implicitevidence$409:zio.Tag[A7],implicitevidence$410:zio.Tag[A8],implicitevidence$411:zio.Tag[A9],implicitevidence$412:zio.Tag[A10],implicitevidence$413:zio.Tag[A11],implicitevidence$414:zio.Tag[A12],implicitevidence$415:zio.Tag[A13],implicitevidence$416:zio.Tag[A14],implicitevidence$417:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>zio.ZIO[R,E,B])(implicitevidence$387:zio.Tag[A0],implicitevidence$388:zio.Tag[A1],implicitevidence$389:zio.Tag[A2],implicitevidence$390:zio.Tag[A3],implicitevidence$391:zio.Tag[A4],implicitevidence$392:zio.Tag[A5],implicitevidence$393:zio.Tag[A6],implicitevidence$394:zio.Tag[A7],implicitevidence$395:zio.Tag[A8],implicitevidence$396:zio.Tag[A9],implicitevidence$397:zio.Tag[A10],implicitevidence$398:zio.Tag[A11],implicitevidence$399:zio.Tag[A12],implicitevidence$400:zio.Tag[A13],implicitevidence$401:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>zio.ZIO[R,E,B])(implicitevidence$373:zio.Tag[A0],implicitevidence$374:zio.Tag[A1],implicitevidence$375:zio.Tag[A2],implicitevidence$376:zio.Tag[A3],implicitevidence$377:zio.Tag[A4],implicitevidence$378:zio.Tag[A5],implicitevidence$379:zio.Tag[A6],implicitevidence$380:zio.Tag[A7],implicitevidence$381:zio.Tag[A8],implicitevidence$382:zio.Tag[A9],implicitevidence$383:zio.Tag[A10],implicitevidence$384:zio.Tag[A11],implicitevidence$385:zio.Tag[A12],implicitevidence$386:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>zio.ZIO[R,E,B])(implicitevidence$360:zio.Tag[A0],implicitevidence$361:zio.Tag[A1],implicitevidence$362:zio.Tag[A2],implicitevidence$363:zio.Tag[A3],implicitevidence$364:zio.Tag[A4],implicitevidence$365:zio.Tag[A5],implicitevidence$366:zio.Tag[A6],implicitevidence$367:zio.Tag[A7],implicitevidence$368:zio.Tag[A8],implicitevidence$369:zio.Tag[A9],implicitevidence$370:zio.Tag[A10],implicitevidence$371:zio.Tag[A11],implicitevidence$372:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>zio.ZIO[R,E,B])(implicitevidence$348:zio.Tag[A0],implicitevidence$349:zio.Tag[A1],implicitevidence$350:zio.Tag[A2],implicitevidence$351:zio.Tag[A3],implicitevidence$352:zio.Tag[A4],implicitevidence$353:zio.Tag[A5],implicitevidence$354:zio.Tag[A6],implicitevidence$355:zio.Tag[A7],implicitevidence$356:zio.Tag[A8],implicitevidence$357:zio.Tag[A9],implicitevidence$358:zio.Tag[A10],implicitevidence$359:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>zio.ZIO[R,E,B])(implicitevidence$337:zio.Tag[A0],implicitevidence$338:zio.Tag[A1],implicitevidence$339:zio.Tag[A2],implicitevidence$340:zio.Tag[A3],implicitevidence$341:zio.Tag[A4],implicitevidence$342:zio.Tag[A5],implicitevidence$343:zio.Tag[A6],implicitevidence$344:zio.Tag[A7],implicitevidence$345:zio.Tag[A8],implicitevidence$346:zio.Tag[A9],implicitevidence$347:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,A7,A8,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>zio.ZIO[R,E,B])(implicitevidence$327:zio.Tag[A0],implicitevidence$328:zio.Tag[A1],implicitevidence$329:zio.Tag[A2],implicitevidence$330:zio.Tag[A3],implicitevidence$331:zio.Tag[A4],implicitevidence$332:zio.Tag[A5],implicitevidence$333:zio.Tag[A6],implicitevidence$334:zio.Tag[A7],implicitevidence$335:zio.Tag[A8],implicitevidence$336:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,A7,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6,A7)=>zio.ZIO[R,E,B])(implicitevidence$318:zio.Tag[A0],implicitevidence$319:zio.Tag[A1],implicitevidence$320:zio.Tag[A2],implicitevidence$321:zio.Tag[A3],implicitevidence$322:zio.Tag[A4],implicitevidence$323:zio.Tag[A5],implicitevidence$324:zio.Tag[A6],implicitevidence$325:zio.Tag[A7],implicitevidence$326:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,A6,R,E,B](f:(A0,A1,A2,A3,A4,A5,A6)=>zio.ZIO[R,E,B])(implicitevidence$310:zio.Tag[A0],implicitevidence$311:zio.Tag[A1],implicitevidence$312:zio.Tag[A2],implicitevidence$313:zio.Tag[A3],implicitevidence$314:zio.Tag[A4],implicitevidence$315:zio.Tag[A5],implicitevidence$316:zio.Tag[A6],implicitevidence$317:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4, A5) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,A5,R,E,B](f:(A0,A1,A2,A3,A4,A5)=>zio.ZIO[R,E,B])(implicitevidence$303:zio.Tag[A0],implicitevidence$304:zio.Tag[A1],implicitevidence$305:zio.Tag[A2],implicitevidence$306:zio.Tag[A3],implicitevidence$307:zio.Tag[A4],implicitevidence$308:zio.Tag[A5],implicitevidence$309:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3, A4) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,A4,R,E,B](f:(A0,A1,A2,A3,A4)=>zio.ZIO[R,E,B])(implicitevidence$297:zio.Tag[A0],implicitevidence$298:zio.Tag[A1],implicitevidence$299:zio.Tag[A2],implicitevidence$300:zio.Tag[A3],implicitevidence$301:zio.Tag[A4],implicitevidence$302:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2, A3) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2] with Has[A3], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,A3,R,E,B](f:(A0,A1,A2,A3)=>zio.ZIO[R,E,B])(implicitevidence$292:zio.Tag[A0],implicitevidence$293:zio.Tag[A1],implicitevidence$294:zio.Tag[A2],implicitevidence$295:zio.Tag[A3],implicitevidence$296:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1, A2) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1] with Has[A2], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,A2,R,E,B](f:(A0,A1,A2)=>zio.ZIO[R,E,B])(implicitevidence$288:zio.Tag[A0],implicitevidence$289:zio.Tag[A1],implicitevidence$290:zio.Tag[A2],implicitevidence$291:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1]withzio.Has[A2],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServicesM", "tail" : "(f: (A0, A1) => ZIO[R, E, B])(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[B]): ZLayer[R with Has[A0] with Has[A1], E, Has[B]]", "member" : "zio.ZLayer.fromServicesM", "link" : "zio\/ZLayer$.html#fromServicesM[A0,A1,R,E,B](f:(A0,A1)=>zio.ZIO[R,E,B])(implicitevidence$285:zio.Tag[A0],implicitevidence$286:zio.Tag[A1],implicitevidence$287:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A0]withzio.Has[A1],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServiceM", "tail" : "(f: (A) => ZIO[R, E, B])(arg0: zio.Tag[A], arg1: zio.Tag[B]): ZLayer[R with Has[A], E, Has[B]]", "member" : "zio.ZLayer.fromServiceM", "link" : "zio\/ZLayer$.html#fromServiceM[A,R,E,B](f:A=>zio.ZIO[R,E,B])(implicitevidence$283:zio.Tag[A],implicitevidence$284:zio.Tag[B]):zio.ZLayer[Rwithzio.Has[A],E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19], arg20: zio.Tag[A20], arg21: zio.Tag[A21], arg22: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19] with Has[A20] with Has[A21], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>B)(implicitevidence$260:zio.Tag[A0],implicitevidence$261:zio.Tag[A1],implicitevidence$262:zio.Tag[A2],implicitevidence$263:zio.Tag[A3],implicitevidence$264:zio.Tag[A4],implicitevidence$265:zio.Tag[A5],implicitevidence$266:zio.Tag[A6],implicitevidence$267:zio.Tag[A7],implicitevidence$268:zio.Tag[A8],implicitevidence$269:zio.Tag[A9],implicitevidence$270:zio.Tag[A10],implicitevidence$271:zio.Tag[A11],implicitevidence$272:zio.Tag[A12],implicitevidence$273:zio.Tag[A13],implicitevidence$274:zio.Tag[A14],implicitevidence$275:zio.Tag[A15],implicitevidence$276:zio.Tag[A16],implicitevidence$277:zio.Tag[A17],implicitevidence$278:zio.Tag[A18],implicitevidence$279:zio.Tag[A19],implicitevidence$280:zio.Tag[A20],implicitevidence$281:zio.Tag[A21],implicitevidence$282:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19]withzio.Has[A20]withzio.Has[A21],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19], arg20: zio.Tag[A20], arg21: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19] with Has[A20], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>B)(implicitevidence$238:zio.Tag[A0],implicitevidence$239:zio.Tag[A1],implicitevidence$240:zio.Tag[A2],implicitevidence$241:zio.Tag[A3],implicitevidence$242:zio.Tag[A4],implicitevidence$243:zio.Tag[A5],implicitevidence$244:zio.Tag[A6],implicitevidence$245:zio.Tag[A7],implicitevidence$246:zio.Tag[A8],implicitevidence$247:zio.Tag[A9],implicitevidence$248:zio.Tag[A10],implicitevidence$249:zio.Tag[A11],implicitevidence$250:zio.Tag[A12],implicitevidence$251:zio.Tag[A13],implicitevidence$252:zio.Tag[A14],implicitevidence$253:zio.Tag[A15],implicitevidence$254:zio.Tag[A16],implicitevidence$255:zio.Tag[A17],implicitevidence$256:zio.Tag[A18],implicitevidence$257:zio.Tag[A19],implicitevidence$258:zio.Tag[A20],implicitevidence$259:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19]withzio.Has[A20],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[A19], arg20: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18] with Has[A19], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>B)(implicitevidence$217:zio.Tag[A0],implicitevidence$218:zio.Tag[A1],implicitevidence$219:zio.Tag[A2],implicitevidence$220:zio.Tag[A3],implicitevidence$221:zio.Tag[A4],implicitevidence$222:zio.Tag[A5],implicitevidence$223:zio.Tag[A6],implicitevidence$224:zio.Tag[A7],implicitevidence$225:zio.Tag[A8],implicitevidence$226:zio.Tag[A9],implicitevidence$227:zio.Tag[A10],implicitevidence$228:zio.Tag[A11],implicitevidence$229:zio.Tag[A12],implicitevidence$230:zio.Tag[A13],implicitevidence$231:zio.Tag[A14],implicitevidence$232:zio.Tag[A15],implicitevidence$233:zio.Tag[A16],implicitevidence$234:zio.Tag[A17],implicitevidence$235:zio.Tag[A18],implicitevidence$236:zio.Tag[A19],implicitevidence$237:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18]withzio.Has[A19],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[A18], arg19: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17] with Has[A18], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>B)(implicitevidence$197:zio.Tag[A0],implicitevidence$198:zio.Tag[A1],implicitevidence$199:zio.Tag[A2],implicitevidence$200:zio.Tag[A3],implicitevidence$201:zio.Tag[A4],implicitevidence$202:zio.Tag[A5],implicitevidence$203:zio.Tag[A6],implicitevidence$204:zio.Tag[A7],implicitevidence$205:zio.Tag[A8],implicitevidence$206:zio.Tag[A9],implicitevidence$207:zio.Tag[A10],implicitevidence$208:zio.Tag[A11],implicitevidence$209:zio.Tag[A12],implicitevidence$210:zio.Tag[A13],implicitevidence$211:zio.Tag[A14],implicitevidence$212:zio.Tag[A15],implicitevidence$213:zio.Tag[A16],implicitevidence$214:zio.Tag[A17],implicitevidence$215:zio.Tag[A18],implicitevidence$216:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17]withzio.Has[A18],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[A17], arg18: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16] with Has[A17], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>B)(implicitevidence$178:zio.Tag[A0],implicitevidence$179:zio.Tag[A1],implicitevidence$180:zio.Tag[A2],implicitevidence$181:zio.Tag[A3],implicitevidence$182:zio.Tag[A4],implicitevidence$183:zio.Tag[A5],implicitevidence$184:zio.Tag[A6],implicitevidence$185:zio.Tag[A7],implicitevidence$186:zio.Tag[A8],implicitevidence$187:zio.Tag[A9],implicitevidence$188:zio.Tag[A10],implicitevidence$189:zio.Tag[A11],implicitevidence$190:zio.Tag[A12],implicitevidence$191:zio.Tag[A13],implicitevidence$192:zio.Tag[A14],implicitevidence$193:zio.Tag[A15],implicitevidence$194:zio.Tag[A16],implicitevidence$195:zio.Tag[A17],implicitevidence$196:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16]withzio.Has[A17],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[A16], arg17: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15] with Has[A16], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>B)(implicitevidence$160:zio.Tag[A0],implicitevidence$161:zio.Tag[A1],implicitevidence$162:zio.Tag[A2],implicitevidence$163:zio.Tag[A3],implicitevidence$164:zio.Tag[A4],implicitevidence$165:zio.Tag[A5],implicitevidence$166:zio.Tag[A6],implicitevidence$167:zio.Tag[A7],implicitevidence$168:zio.Tag[A8],implicitevidence$169:zio.Tag[A9],implicitevidence$170:zio.Tag[A10],implicitevidence$171:zio.Tag[A11],implicitevidence$172:zio.Tag[A12],implicitevidence$173:zio.Tag[A13],implicitevidence$174:zio.Tag[A14],implicitevidence$175:zio.Tag[A15],implicitevidence$176:zio.Tag[A16],implicitevidence$177:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15]withzio.Has[A16],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[A15], arg16: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14] with Has[A15], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>B)(implicitevidence$143:zio.Tag[A0],implicitevidence$144:zio.Tag[A1],implicitevidence$145:zio.Tag[A2],implicitevidence$146:zio.Tag[A3],implicitevidence$147:zio.Tag[A4],implicitevidence$148:zio.Tag[A5],implicitevidence$149:zio.Tag[A6],implicitevidence$150:zio.Tag[A7],implicitevidence$151:zio.Tag[A8],implicitevidence$152:zio.Tag[A9],implicitevidence$153:zio.Tag[A10],implicitevidence$154:zio.Tag[A11],implicitevidence$155:zio.Tag[A12],implicitevidence$156:zio.Tag[A13],implicitevidence$157:zio.Tag[A14],implicitevidence$158:zio.Tag[A15],implicitevidence$159:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14]withzio.Has[A15],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[A14], arg15: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13] with Has[A14], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>B)(implicitevidence$127:zio.Tag[A0],implicitevidence$128:zio.Tag[A1],implicitevidence$129:zio.Tag[A2],implicitevidence$130:zio.Tag[A3],implicitevidence$131:zio.Tag[A4],implicitevidence$132:zio.Tag[A5],implicitevidence$133:zio.Tag[A6],implicitevidence$134:zio.Tag[A7],implicitevidence$135:zio.Tag[A8],implicitevidence$136:zio.Tag[A9],implicitevidence$137:zio.Tag[A10],implicitevidence$138:zio.Tag[A11],implicitevidence$139:zio.Tag[A12],implicitevidence$140:zio.Tag[A13],implicitevidence$141:zio.Tag[A14],implicitevidence$142:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13]withzio.Has[A14],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[A13], arg14: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12] with Has[A13], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>B)(implicitevidence$112:zio.Tag[A0],implicitevidence$113:zio.Tag[A1],implicitevidence$114:zio.Tag[A2],implicitevidence$115:zio.Tag[A3],implicitevidence$116:zio.Tag[A4],implicitevidence$117:zio.Tag[A5],implicitevidence$118:zio.Tag[A6],implicitevidence$119:zio.Tag[A7],implicitevidence$120:zio.Tag[A8],implicitevidence$121:zio.Tag[A9],implicitevidence$122:zio.Tag[A10],implicitevidence$123:zio.Tag[A11],implicitevidence$124:zio.Tag[A12],implicitevidence$125:zio.Tag[A13],implicitevidence$126:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12]withzio.Has[A13],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[A12], arg13: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11] with Has[A12], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>B)(implicitevidence$98:zio.Tag[A0],implicitevidence$99:zio.Tag[A1],implicitevidence$100:zio.Tag[A2],implicitevidence$101:zio.Tag[A3],implicitevidence$102:zio.Tag[A4],implicitevidence$103:zio.Tag[A5],implicitevidence$104:zio.Tag[A6],implicitevidence$105:zio.Tag[A7],implicitevidence$106:zio.Tag[A8],implicitevidence$107:zio.Tag[A9],implicitevidence$108:zio.Tag[A10],implicitevidence$109:zio.Tag[A11],implicitevidence$110:zio.Tag[A12],implicitevidence$111:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11]withzio.Has[A12],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[A11], arg12: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10] with Has[A11], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(implicitevidence$85:zio.Tag[A0],implicitevidence$86:zio.Tag[A1],implicitevidence$87:zio.Tag[A2],implicitevidence$88:zio.Tag[A3],implicitevidence$89:zio.Tag[A4],implicitevidence$90:zio.Tag[A5],implicitevidence$91:zio.Tag[A6],implicitevidence$92:zio.Tag[A7],implicitevidence$93:zio.Tag[A8],implicitevidence$94:zio.Tag[A9],implicitevidence$95:zio.Tag[A10],implicitevidence$96:zio.Tag[A11],implicitevidence$97:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10]withzio.Has[A11],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[A10], arg11: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9] with Has[A10], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(implicitevidence$73:zio.Tag[A0],implicitevidence$74:zio.Tag[A1],implicitevidence$75:zio.Tag[A2],implicitevidence$76:zio.Tag[A3],implicitevidence$77:zio.Tag[A4],implicitevidence$78:zio.Tag[A5],implicitevidence$79:zio.Tag[A6],implicitevidence$80:zio.Tag[A7],implicitevidence$81:zio.Tag[A8],implicitevidence$82:zio.Tag[A9],implicitevidence$83:zio.Tag[A10],implicitevidence$84:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9]withzio.Has[A10],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[A9], arg10: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8] with Has[A9], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(implicitevidence$62:zio.Tag[A0],implicitevidence$63:zio.Tag[A1],implicitevidence$64:zio.Tag[A2],implicitevidence$65:zio.Tag[A3],implicitevidence$66:zio.Tag[A4],implicitevidence$67:zio.Tag[A5],implicitevidence$68:zio.Tag[A6],implicitevidence$69:zio.Tag[A7],implicitevidence$70:zio.Tag[A8],implicitevidence$71:zio.Tag[A9],implicitevidence$72:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8]withzio.Has[A9],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[A8], arg9: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7] with Has[A8], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,A7,A8,B](f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>B)(implicitevidence$52:zio.Tag[A0],implicitevidence$53:zio.Tag[A1],implicitevidence$54:zio.Tag[A2],implicitevidence$55:zio.Tag[A3],implicitevidence$56:zio.Tag[A4],implicitevidence$57:zio.Tag[A5],implicitevidence$58:zio.Tag[A6],implicitevidence$59:zio.Tag[A7],implicitevidence$60:zio.Tag[A8],implicitevidence$61:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7]withzio.Has[A8],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6, A7) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[A7], arg8: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6] with Has[A7], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,A7,B](f:(A0,A1,A2,A3,A4,A5,A6,A7)=>B)(implicitevidence$43:zio.Tag[A0],implicitevidence$44:zio.Tag[A1],implicitevidence$45:zio.Tag[A2],implicitevidence$46:zio.Tag[A3],implicitevidence$47:zio.Tag[A4],implicitevidence$48:zio.Tag[A5],implicitevidence$49:zio.Tag[A6],implicitevidence$50:zio.Tag[A7],implicitevidence$51:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6]withzio.Has[A7],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5, A6) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[A6], arg7: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5] with Has[A6], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,A6,B](f:(A0,A1,A2,A3,A4,A5,A6)=>B)(implicitevidence$35:zio.Tag[A0],implicitevidence$36:zio.Tag[A1],implicitevidence$37:zio.Tag[A2],implicitevidence$38:zio.Tag[A3],implicitevidence$39:zio.Tag[A4],implicitevidence$40:zio.Tag[A5],implicitevidence$41:zio.Tag[A6],implicitevidence$42:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5]withzio.Has[A6],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4, A5) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[A5], arg6: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4] with Has[A5], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,A5,B](f:(A0,A1,A2,A3,A4,A5)=>B)(implicitevidence$28:zio.Tag[A0],implicitevidence$29:zio.Tag[A1],implicitevidence$30:zio.Tag[A2],implicitevidence$31:zio.Tag[A3],implicitevidence$32:zio.Tag[A4],implicitevidence$33:zio.Tag[A5],implicitevidence$34:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4]withzio.Has[A5],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3, A4) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[A4], arg5: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3] with Has[A4], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,A4,B](f:(A0,A1,A2,A3,A4)=>B)(implicitevidence$22:zio.Tag[A0],implicitevidence$23:zio.Tag[A1],implicitevidence$24:zio.Tag[A2],implicitevidence$25:zio.Tag[A3],implicitevidence$26:zio.Tag[A4],implicitevidence$27:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3]withzio.Has[A4],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2, A3) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[A3], arg4: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2] with Has[A3], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,A3,B](f:(A0,A1,A2,A3)=>B)(implicitevidence$17:zio.Tag[A0],implicitevidence$18:zio.Tag[A1],implicitevidence$19:zio.Tag[A2],implicitevidence$20:zio.Tag[A3],implicitevidence$21:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2]withzio.Has[A3],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1, A2) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[A2], arg3: zio.Tag[B]): ZLayer[Has[A0] with Has[A1] with Has[A2], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,A2,B](f:(A0,A1,A2)=>B)(implicitevidence$13:zio.Tag[A0],implicitevidence$14:zio.Tag[A1],implicitevidence$15:zio.Tag[A2],implicitevidence$16:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1]withzio.Has[A2],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromServices", "tail" : "(f: (A0, A1) => B)(arg0: zio.Tag[A0], arg1: zio.Tag[A1], arg2: zio.Tag[B]): ZLayer[Has[A0] with Has[A1], Nothing, Has[B]]", "member" : "zio.ZLayer.fromServices", "link" : "zio\/ZLayer$.html#fromServices[A0,A1,B](f:(A0,A1)=>B)(implicitevidence$10:zio.Tag[A0],implicitevidence$11:zio.Tag[A1],implicitevidence$12:zio.Tag[B]):zio.ZLayer[zio.Has[A0]withzio.Has[A1],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromService", "tail" : "(f: (A) => B)(arg0: zio.Tag[A], arg1: zio.Tag[B]): ZLayer[Has[A], Nothing, Has[B]]", "member" : "zio.ZLayer.fromService", "link" : "zio\/ZLayer$.html#fromService[A,B](f:A=>B)(implicitevidence$8:zio.Tag[A],implicitevidence$9:zio.Tag[B]):zio.ZLayer[zio.Has[A],Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromFunctionZIO", "tail" : "(f: (A) => IO[E, B])(arg0: zio.Tag[B]): ZLayer[A, E, Has[B]]", "member" : "zio.ZLayer.fromFunctionZIO", "link" : "zio\/ZLayer$.html#fromFunctionZIO[A,E,B](f:A=>zio.IO[E,B])(implicitevidence$7:zio.Tag[B]):zio.ZLayer[A,E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromFunctionManyZIO", "tail" : "(f: (A) => IO[E, B]): ZLayer[A, E, B]", "member" : "zio.ZLayer.fromFunctionManyZIO", "link" : "zio\/ZLayer$.html#fromFunctionManyZIO[A,E,B](f:A=>zio.IO[E,B]):zio.ZLayer[A,E,B]", "kind" : "def"}, {"label" : "fromFunctionManyManaged", "tail" : "(f: (A) => ZManaged[Any, E, B]): ZLayer[A, E, B]", "member" : "zio.ZLayer.fromFunctionManyManaged", "link" : "zio\/ZLayer$.html#fromFunctionManyManaged[A,E,B](f:A=>zio.ZManaged[Any,E,B]):zio.ZLayer[A,E,B]", "kind" : "def"}, {"label" : "fromFunctionManyM", "tail" : "(f: (A) => IO[E, B]): ZLayer[A, E, B]", "member" : "zio.ZLayer.fromFunctionManyM", "link" : "zio\/ZLayer$.html#fromFunctionManyM[A,E,B](f:A=>zio.IO[E,B]):zio.ZLayer[A,E,B]", "kind" : "def"}, {"label" : "fromFunctionMany", "tail" : "(f: (A) => B): ZLayer[A, Nothing, B]", "member" : "zio.ZLayer.fromFunctionMany", "link" : "zio\/ZLayer$.html#fromFunctionMany[A,B](f:A=>B):zio.ZLayer[A,Nothing,B]", "kind" : "def"}, {"label" : "fromFunctionManaged", "tail" : "(f: (A) => ZManaged[Any, E, B])(arg0: zio.Tag[B]): ZLayer[A, E, Has[B]]", "member" : "zio.ZLayer.fromFunctionManaged", "link" : "zio\/ZLayer$.html#fromFunctionManaged[A,E,B](f:A=>zio.ZManaged[Any,E,B])(implicitevidence$6:zio.Tag[B]):zio.ZLayer[A,E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromFunctionM", "tail" : "(f: (A) => IO[E, B])(arg0: zio.Tag[B]): ZLayer[A, E, Has[B]]", "member" : "zio.ZLayer.fromFunctionM", "link" : "zio\/ZLayer$.html#fromFunctionM[A,E,B](f:A=>zio.IO[E,B])(implicitevidence$5:zio.Tag[B]):zio.ZLayer[A,E,zio.Has[B]]", "kind" : "def"}, {"label" : "fromFunction", "tail" : "(f: (A) => B)(arg0: zio.Tag[B]): ZLayer[A, Nothing, Has[B]]", "member" : "zio.ZLayer.fromFunction", "link" : "zio\/ZLayer$.html#fromFunction[A,B](f:A=>B)(implicitevidence$4:zio.Tag[B]):zio.ZLayer[A,Nothing,zio.Has[B]]", "kind" : "def"}, {"label" : "fromEffectMany", "tail" : "(zio: ZIO[R, E, A]): ZLayer[R, E, A]", "member" : "zio.ZLayer.fromEffectMany", "link" : "zio\/ZLayer$.html#fromEffectMany[R,E,A](zio:zio.ZIO[R,E,A]):zio.ZLayer[R,E,A]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(zio: ZIO[R, E, A])(arg0: zio.Tag[A]): ZLayer[R, E, Has[A]]", "member" : "zio.ZLayer.fromEffect", "link" : "zio\/ZLayer$.html#fromEffect[R,E,A](zio:zio.ZIO[R,E,A])(implicitevidence$3:zio.Tag[A]):zio.ZLayer[R,E,zio.Has[A]]", "kind" : "def"}, {"label" : "fromAcquireReleaseMany", "tail" : "(acquire: ZIO[R, E, A])(release: (A) => URIO[R, Any]): ZLayer[R, E, A]", "member" : "zio.ZLayer.fromAcquireReleaseMany", "link" : "zio\/ZLayer$.html#fromAcquireReleaseMany[R,E,A](acquire:zio.ZIO[R,E,A])(release:A=>zio.URIO[R,Any]):zio.ZLayer[R,E,A]", "kind" : "def"}, {"label" : "fromAcquireRelease", "tail" : "(acquire: ZIO[R, E, A])(release: (A) => URIO[R, Any])(arg0: zio.Tag[A]): ZLayer[R, E, Has[A]]", "member" : "zio.ZLayer.fromAcquireRelease", "link" : "zio\/ZLayer$.html#fromAcquireRelease[R,E,A](acquire:zio.ZIO[R,E,A])(release:A=>zio.URIO[R,Any])(implicitevidence$2:zio.Tag[A]):zio.ZLayer[R,E,zio.Has[A]]", "kind" : "def"}, {"label" : "first", "tail" : "(): ZLayer[(A, Any), Nothing, A]", "member" : "zio.ZLayer.first", "link" : "zio\/ZLayer$.html#first[A]:zio.ZLayer[(A,Any),Nothing,A]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: E): Layer[E, Nothing]", "member" : "zio.ZLayer.fail", "link" : "zio\/ZLayer$.html#fail[E](e:E):zio.Layer[E,Nothing]", "kind" : "def"}, {"label" : "Debug", "tail" : "", "member" : "zio.ZLayer.Debug", "link" : "zio\/ZLayer$.html#Debug", "kind" : "object"}, {"label" : "Debug", "tail" : "", "member" : "zio.ZLayer.Debug", "link" : "zio\/ZLayer$.html#DebugextendsAnyRef", "kind" : "sealed trait"}, {"label" : "apply", "tail" : "(managed: ZManaged[RIn, E, ROut]): ZLayer[RIn, E, ROut]", "member" : "zio.ZLayer.apply", "link" : "zio\/ZLayer$.html#apply[RIn,E,ROut](managed:zio.ZManaged[RIn,E,ROut]):zio.ZLayer[RIn,E,ROut]", "kind" : "def"}, {"label" : "wireCustom", "tail" : "(): WireSomePartiallyApplied[zio.ZEnv, R]", "member" : "zio.ZLayerCompanionVersionSpecific.wireCustom", "link" : "zio\/ZLayer$.html#wireCustom[R<:zio.Has[_]]:zio.WireSomePartiallyApplied[zio.ZEnv,R]", "kind" : "def"}, {"label" : "wireSome", "tail" : "(): WireSomePartiallyApplied[R0, R]", "member" : "zio.ZLayerCompanionVersionSpecific.wireSome", "link" : "zio\/ZLayer$.html#wireSome[R0<:zio.Has[_],R<:zio.Has[_]]:zio.WireSomePartiallyApplied[R0,R]", "kind" : "def"}, {"label" : "wire", "tail" : "(): WirePartiallyApplied[R]", "member" : "zio.ZLayerCompanionVersionSpecific.wire", "link" : "zio\/ZLayer$.html#wire[R<:zio.Has[_]]:zio.WirePartiallyApplied[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZLayer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZLayer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZLayer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZLayer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZLayer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZLayer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZLayer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZLayer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZLayer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZLayer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZLayer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZLayer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZLayer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZLayer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZLayer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZLayer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZLayer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZLayer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZLayer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/ZLayer.html", "kind" : "class"}, {"name" : "zio.ZLogger", "object" : "zio\/ZLogger$.html", "members_object" : [{"label" : "defaultFormatter", "tail" : ": ZLogger[String]", "member" : "zio.ZLogger.defaultFormatter", "link" : "zio\/ZLogger$.html#defaultFormatter:zio.ZLogger[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZLogger$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZLogger$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZLogger$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZLogger$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZLogger$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZLogger$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZLogger$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZLogger$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZLogger$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZLogger$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZLogger$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZLogger$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZLogger$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZLogger$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZLogger$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZLogger$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZLogger$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZLogger$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZLogger$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/ZLogger.html", "kind" : "trait", "members_trait" : [{"label" : "map", "tail" : "(f: (A) => B): ZLogger[B]", "member" : "zio.ZLogger.map", "link" : "zio\/ZLogger.html#map[B](f:A=>B):zio.ZLogger[B]", "kind" : "final def"}, {"label" : "filterLogLevel", "tail" : "(f: (LogLevel) => Boolean): ZLogger[Option[A]]", "member" : "zio.ZLogger.filterLogLevel", "link" : "zio\/ZLogger.html#filterLogLevel(f:zio.LogLevel=>Boolean):zio.ZLogger[Option[A]]", "kind" : "final def"}, {"label" : "++", "tail" : "(that: ZLogger[B])(zippable: Zippable[A, B]): ZLogger[Out]", "member" : "zio.ZLogger.++", "link" : "zio\/ZLogger.html#++[B](that:zio.ZLogger[B])(implicitzippable:zio.Zippable[A,B]):zio.ZLogger[zippable.Out]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZLogger.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZLogger.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZLogger.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZLogger.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZLogger.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZLogger.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZLogger.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZLogger.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZLogger.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZLogger.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZLogger.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZLogger.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZLogger.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZLogger.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZLogger.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZLogger.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZLogger.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZLogger.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZLogger.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(trace: ZTraceElement, fiberId: FiberId, logLevel: LogLevel, message: () => String, context: Map[ZFiberRef.Runtime[_], AnyRef], spans: List[LogSpan]): A", "member" : "zio.ZLogger.apply", "link" : "zio\/ZLogger.html#apply(trace:zio.internal.stacktracer.ZTraceElement,fiberId:zio.FiberId,logLevel:zio.LogLevel,message:()=>String,context:Map[zio.FiberRef.Runtime[_],AnyRef],spans:List[zio.LogSpan]):A", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.ZManaged", "shortDescription" : "A ZManaged[R, E, A] is a managed resource of type A, which may be used byinvoking the use method of the resource.", "object" : "zio\/ZManaged$.html", "members_class" : [{"label" : "zipWithPar", "tail" : "(that: => ZManaged[R1, E1, A1])(f: (A, A1) => A2): ZManaged[R1, E1, A2]", "member" : "zio.ZManaged.zipWithPar", "link" : "zio\/ZManaged.html#zipWithPar[R1<:R,E1>:E,A1,A2](that:=>zio.ZManaged[R1,E1,A1])(f:(A,A1)=>A2):zio.ZManaged[R1,E1,A2]", "kind" : "def"}, {"label" : "zipWith", "tail" : "(that: => ZManaged[R1, E1, A1])(f: (A, A1) => A2): ZManaged[R1, E1, A2]", "member" : "zio.ZManaged.zipWith", "link" : "zio\/ZManaged.html#zipWith[R1<:R,E1>:E,A1,A2](that:=>zio.ZManaged[R1,E1,A1])(f:(A,A1)=>A2):zio.ZManaged[R1,E1,A2]", "kind" : "def"}, {"label" : "zipRight", "tail" : "(that: => ZManaged[R1, E1, A1]): ZManaged[R1, E1, A1]", "member" : "zio.ZManaged.zipRight", "link" : "zio\/ZManaged.html#zipRight[R1<:R,E1>:E,A1](that:=>zio.ZManaged[R1,E1,A1]):zio.ZManaged[R1,E1,A1]", "kind" : "def"}, {"label" : "zipParRight", "tail" : "(that: => ZManaged[R1, E1, A1]): ZManaged[R1, E1, A1]", "member" : "zio.ZManaged.zipParRight", "link" : "zio\/ZManaged.html#zipParRight[R1<:R,E1>:E,A1](that:=>zio.ZManaged[R1,E1,A1]):zio.ZManaged[R1,E1,A1]", "kind" : "def"}, {"label" : "zipParLeft", "tail" : "(that: => ZManaged[R1, E1, A1]): ZManaged[R1, E1, A]", "member" : "zio.ZManaged.zipParLeft", "link" : "zio\/ZManaged.html#zipParLeft[R1<:R,E1>:E,A1](that:=>zio.ZManaged[R1,E1,A1]):zio.ZManaged[R1,E1,A]", "kind" : "def"}, {"label" : "zipPar", "tail" : "(that: => ZManaged[R1, E1, A1])(zippable: Zippable[A, A1]): ZManaged[R1, E1, Out]", "member" : "zio.ZManaged.zipPar", "link" : "zio\/ZManaged.html#zipPar[R1<:R,E1>:E,A1](that:=>zio.ZManaged[R1,E1,A1])(implicitzippable:zio.Zippable[A,A1]):zio.ZManaged[R1,E1,zippable.Out]", "kind" : "def"}, {"label" : "zipLeft", "tail" : "(that: => ZManaged[R1, E1, A1]): ZManaged[R1, E1, A]", "member" : "zio.ZManaged.zipLeft", "link" : "zio\/ZManaged.html#zipLeft[R1<:R,E1>:E,A1](that:=>zio.ZManaged[R1,E1,A1]):zio.ZManaged[R1,E1,A]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: => ZManaged[R1, E1, A1])(zippable: Zippable[A, A1]): ZManaged[R1, E1, Out]", "member" : "zio.ZManaged.zip", "link" : "zio\/ZManaged.html#zip[R1<:R,E1>:E,A1](that:=>zio.ZManaged[R1,E1,A1])(implicitzippable:zio.Zippable[A,A1]):zio.ZManaged[R1,E1,zippable.Out]", "kind" : "def"}, {"label" : "withRuntimeConfig", "tail" : "(runtimeConfig: => RuntimeConfig): ZManaged[R, E, A]", "member" : "zio.ZManaged.withRuntimeConfig", "link" : "zio\/ZManaged.html#withRuntimeConfig(runtimeConfig:=>zio.RuntimeConfig):zio.ZManaged[R,E,A]", "kind" : "final def"}, {"label" : "withEarlyReleaseExit", "tail" : "(e: => Exit[Any, Any]): ZManaged[R, E, (UIO[Any], A)]", "member" : "zio.ZManaged.withEarlyReleaseExit", "link" : "zio\/ZManaged.html#withEarlyReleaseExit(e:=>zio.Exit[Any,Any]):zio.ZManaged[R,E,(zio.UIO[Any],A)]", "kind" : "def"}, {"label" : "withEarlyRelease", "tail" : "(): ZManaged[R, E, (UIO[Any], A)]", "member" : "zio.ZManaged.withEarlyRelease", "link" : "zio\/ZManaged.html#withEarlyRelease:zio.ZManaged[R,E,(zio.UIO[Any],A)]", "kind" : "def"}, {"label" : "whenManaged", "tail" : "(b: => ZManaged[R1, E1, Boolean]): ZManaged[R1, E1, Option[A]]", "member" : "zio.ZManaged.whenManaged", "link" : "zio\/ZManaged.html#whenManaged[R1<:R,E1>:E](b:=>zio.ZManaged[R1,E1,Boolean]):zio.ZManaged[R1,E1,Option[A]]", "kind" : "def"}, {"label" : "whenM", "tail" : "(b: => ZManaged[R1, E1, Boolean]): ZManaged[R1, E1, Option[A]]", "member" : "zio.ZManaged.whenM", "link" : "zio\/ZManaged.html#whenM[R1<:R,E1>:E](b:=>zio.ZManaged[R1,E1,Boolean]):zio.ZManaged[R1,E1,Option[A]]", "kind" : "def"}, {"label" : "when", "tail" : "(b: => Boolean): ZManaged[R, E, Option[A]]", "member" : "zio.ZManaged.when", "link" : "zio\/ZManaged.html#when(b:=>Boolean):zio.ZManaged[R,E,Option[A]]", "kind" : "def"}, {"label" : "useNow", "tail" : ": ZIO[R, E, A]", "member" : "zio.ZManaged.useNow", "link" : "zio\/ZManaged.html#useNow:zio.ZIO[R,E,A]", "kind" : "val"}, {"label" : "useForever", "tail" : ": ZIO[R, E, Nothing]", "member" : "zio.ZManaged.useForever", "link" : "zio\/ZManaged.html#useForever:zio.ZIO[R,E,Nothing]", "kind" : "val"}, {"label" : "useDiscard", "tail" : "(f: => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZManaged.useDiscard", "link" : "zio\/ZManaged.html#useDiscard[R1<:R,E1>:E,B](f:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "def"}, {"label" : "use_", "tail" : "(f: => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZManaged.use_", "link" : "zio\/ZManaged.html#use_[R1<:R,E1>:E,B](f:=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "def"}, {"label" : "use", "tail" : "(f: (A) => ZIO[R1, E1, B]): ZIO[R1, E1, B]", "member" : "zio.ZManaged.use", "link" : "zio\/ZManaged.html#use[R1<:R,E1>:E,B](f:A=>zio.ZIO[R1,E1,B]):zio.ZIO[R1,E1,B]", "kind" : "def"}, {"label" : "updateServiceAt", "tail" : "(): UpdateServiceAt[R, E, A, Service]", "member" : "zio.ZManaged.updateServiceAt", "link" : "zio\/ZManaged.html#updateServiceAt[Service]:zio.ZManaged.UpdateServiceAt[R,E,A,Service]", "kind" : "final def"}, {"label" : "updateService", "tail" : "(): UpdateService[R, E, A, M]", "member" : "zio.ZManaged.updateService", "link" : "zio\/ZManaged.html#updateService[M]:zio.ZManaged.UpdateService[R,E,A,M]", "kind" : "final def"}, {"label" : "unsome", "tail" : "(ev: IsSubtypeOfError[E, Option[E1]]): ZManaged[R, E1, Option[A]]", "member" : "zio.ZManaged.unsome", "link" : "zio\/ZManaged.html#unsome[E1](implicitev:zio.IsSubtypeOfError[E,Option[E1]]):zio.ZManaged[R,E1,Option[A]]", "kind" : "final def"}, {"label" : "unsandbox", "tail" : "(ev: IsSubtypeOfError[E, Cause[E1]]): ZManaged[R, E1, A]", "member" : "zio.ZManaged.unsandbox", "link" : "zio\/ZManaged.html#unsandbox[E1](implicitev:zio.IsSubtypeOfError[E,zio.Cause[E1]]):zio.ZManaged[R,E1,A]", "kind" : "def"}, {"label" : "unoption", "tail" : "(ev: IsSubtypeOfError[E, Option[E1]]): ZManaged[R, E1, Option[A]]", "member" : "zio.ZManaged.unoption", "link" : "zio\/ZManaged.html#unoption[E1](implicitev:zio.IsSubtypeOfError[E,Option[E1]]):zio.ZManaged[R,E1,Option[A]]", "kind" : "final def"}, {"label" : "unlessManaged", "tail" : "(b: => ZManaged[R1, E1, Boolean]): ZManaged[R1, E1, Option[A]]", "member" : "zio.ZManaged.unlessManaged", "link" : "zio\/ZManaged.html#unlessManaged[R1<:R,E1>:E](b:=>zio.ZManaged[R1,E1,Boolean]):zio.ZManaged[R1,E1,Option[A]]", "kind" : "final def"}, {"label" : "unlessM", "tail" : "(b: => ZManaged[R1, E1, Boolean]): ZManaged[R1, E1, Option[A]]", "member" : "zio.ZManaged.unlessM", "link" : "zio\/ZManaged.html#unlessM[R1<:R,E1>:E](b:=>zio.ZManaged[R1,E1,Boolean]):zio.ZManaged[R1,E1,Option[A]]", "kind" : "final def"}, {"label" : "unless", "tail" : "(b: => Boolean): ZManaged[R, E, Option[A]]", "member" : "zio.ZManaged.unless", "link" : "zio\/ZManaged.html#unless(b:=>Boolean):zio.ZManaged[R,E,Option[A]]", "kind" : "final def"}, {"label" : "unit", "tail" : ": ZManaged[R, E, Unit]", "member" : "zio.ZManaged.unit", "link" : "zio\/ZManaged.html#unit:zio.ZManaged[R,E,Unit]", "kind" : "lazy val"}, {"label" : "toLayerMany", "tail" : "(arg0: zio.Tag[A1]): ZLayer[R, E, A1]", "member" : "zio.ZManaged.toLayerMany", "link" : "zio\/ZManaged.html#toLayerMany[A1>:A](implicitevidence$3:zio.Tag[A1]):zio.ZLayer[R,E,A1]", "kind" : "final def"}, {"label" : "toLayer", "tail" : "(arg0: zio.Tag[A1]): ZLayer[R, E, Has[A1]]", "member" : "zio.ZManaged.toLayer", "link" : "zio\/ZManaged.html#toLayer[A1>:A](implicitevidence$2:zio.Tag[A1]):zio.ZLayer[R,E,zio.Has[A1]]", "kind" : "def"}, {"label" : "timeout", "tail" : "(d: => zio.Duration): ZManaged[R with Has[Clock], E, Option[A]]", "member" : "zio.ZManaged.timeout", "link" : "zio\/ZManaged.html#timeout(d:=>zio.Duration):zio.ZManaged[Rwithzio.Has[zio.Clock],E,Option[A]]", "kind" : "def"}, {"label" : "timed", "tail" : "(): ZManaged[R with Has[Clock], E, (zio.Duration, A)]", "member" : "zio.ZManaged.timed", "link" : "zio\/ZManaged.html#timed:zio.ZManaged[Rwithzio.Has[zio.Clock],E,(zio.Duration,A)]", "kind" : "def"}, {"label" : "tapZIO", "tail" : "(f: (A) => ZIO[R1, E1, Any]): ZManaged[R1, E1, A]", "member" : "zio.ZManaged.tapZIO", "link" : "zio\/ZManaged.html#tapZIO[R1<:R,E1>:E](f:A=>zio.ZIO[R1,E1,Any]):zio.ZManaged[R1,E1,A]", "kind" : "def"}, {"label" : "tapM", "tail" : "(f: (A) => ZIO[R1, E1, Any]): ZManaged[R1, E1, A]", "member" : "zio.ZManaged.tapM", "link" : "zio\/ZManaged.html#tapM[R1<:R,E1>:E](f:A=>zio.ZIO[R1,E1,Any]):zio.ZManaged[R1,E1,A]", "kind" : "def"}, {"label" : "tapErrorCause", "tail" : "(f: (Cause[E]) => ZManaged[R1, E1, Any]): ZManaged[R1, E1, A]", "member" : "zio.ZManaged.tapErrorCause", "link" : "zio\/ZManaged.html#tapErrorCause[R1<:R,E1>:E](f:zio.Cause[E]=>zio.ZManaged[R1,E1,Any]):zio.ZManaged[R1,E1,A]", "kind" : "final def"}, {"label" : "tapError", "tail" : "(f: (E) => ZManaged[R1, E1, Any])(ev: CanFail[E]): ZManaged[R1, E1, A]", "member" : "zio.ZManaged.tapError", "link" : "zio\/ZManaged.html#tapError[R1<:R,E1>:E](f:E=>zio.ZManaged[R1,E1,Any])(implicitev:zio.CanFail[E]):zio.ZManaged[R1,E1,A]", "kind" : "def"}, {"label" : "tapDefect", "tail" : "(f: (Cause[Nothing]) => ZManaged[R1, E1, Any]): ZManaged[R1, E1, A]", "member" : "zio.ZManaged.tapDefect", "link" : "zio\/ZManaged.html#tapDefect[R1<:R,E1>:E](f:zio.Cause[Nothing]=>zio.ZManaged[R1,E1,Any]):zio.ZManaged[R1,E1,A]", "kind" : "final def"}, {"label" : "tapCause", "tail" : "(f: (Cause[E]) => ZManaged[R1, E1, Any]): ZManaged[R1, E1, A]", "member" : "zio.ZManaged.tapCause", "link" : "zio\/ZManaged.html#tapCause[R1<:R,E1>:E](f:zio.Cause[E]=>zio.ZManaged[R1,E1,Any]):zio.ZManaged[R1,E1,A]", "kind" : "final def"}, {"label" : "tapBoth", "tail" : "(f: (E) => ZManaged[R1, E1, Any], g: (A) => ZManaged[R1, E1, Any])(ev: CanFail[E]): ZManaged[R1, E1, A]", "member" : "zio.ZManaged.tapBoth", "link" : "zio\/ZManaged.html#tapBoth[R1<:R,E1>:E](f:E=>zio.ZManaged[R1,E1,Any],g:A=>zio.ZManaged[R1,E1,Any])(implicitev:zio.CanFail[E]):zio.ZManaged[R1,E1,A]", "kind" : "def"}, {"label" : "tap", "tail" : "(f: (A) => ZManaged[R1, E1, Any]): ZManaged[R1, E1, A]", "member" : "zio.ZManaged.tap", "link" : "zio\/ZManaged.html#tap[R1<:R,E1>:E](f:A=>zio.ZManaged[R1,E1,Any]):zio.ZManaged[R1,E1,A]", "kind" : "def"}, {"label" : "someOrFailException", "tail" : "(ev: IsSubtypeOfOutput[A, Option[B]], ev2: <:<[NoSuchElementException, E1]): ZManaged[R, E1, B]", "member" : "zio.ZManaged.someOrFailException", "link" : "zio\/ZManaged.html#someOrFailException[B,E1>:E](implicitev:zio.IsSubtypeOfOutput[A,Option[B]],implicitev2:NoSuchElementException<:<E1):zio.ZManaged[R,E1,B]", "kind" : "final def"}, {"label" : "someOrFail", "tail" : "(e: => E1)(ev: IsSubtypeOfOutput[A, Option[B]]): ZManaged[R, E1, B]", "member" : "zio.ZManaged.someOrFail", "link" : "zio\/ZManaged.html#someOrFail[B,E1>:E](e:=>E1)(implicitev:zio.IsSubtypeOfOutput[A,Option[B]]):zio.ZManaged[R,E1,B]", "kind" : "final def"}, {"label" : "someOrElseManaged", "tail" : "(default: => ZManaged[R1, E1, B])(ev: IsSubtypeOfOutput[A, Option[B]]): ZManaged[R1, E1, B]", "member" : "zio.ZManaged.someOrElseManaged", "link" : "zio\/ZManaged.html#someOrElseManaged[B,R1<:R,E1>:E](default:=>zio.ZManaged[R1,E1,B])(implicitev:zio.IsSubtypeOfOutput[A,Option[B]]):zio.ZManaged[R1,E1,B]", "kind" : "final def"}, {"label" : "someOrElseM", "tail" : "(default: => ZManaged[R1, E1, B])(ev: IsSubtypeOfOutput[A, Option[B]]): ZManaged[R1, E1, B]", "member" : "zio.ZManaged.someOrElseM", "link" : "zio\/ZManaged.html#someOrElseM[B,R1<:R,E1>:E](default:=>zio.ZManaged[R1,E1,B])(implicitev:zio.IsSubtypeOfOutput[A,Option[B]]):zio.ZManaged[R1,E1,B]", "kind" : "final def"}, {"label" : "someOrElse", "tail" : "(default: => B)(ev: IsSubtypeOfOutput[A, Option[B]]): ZManaged[R, E, B]", "member" : "zio.ZManaged.someOrElse", "link" : "zio\/ZManaged.html#someOrElse[B](default:=>B)(implicitev:zio.IsSubtypeOfOutput[A,Option[B]]):zio.ZManaged[R,E,B]", "kind" : "final def"}, {"label" : "some", "tail" : "(ev: IsSubtypeOfOutput[A, Option[B]]): ZManaged[R, Option[E], B]", "member" : "zio.ZManaged.some", "link" : "zio\/ZManaged.html#some[B](implicitev:zio.IsSubtypeOfOutput[A,Option[B]]):zio.ZManaged[R,Option[E],B]", "kind" : "final def"}, {"label" : "sandboxWith", "tail" : "(f: (ZManaged[R1, Cause[E], A]) => ZManaged[R1, Cause[E2], B]): ZManaged[R1, E2, B]", "member" : "zio.ZManaged.sandboxWith", "link" : "zio\/ZManaged.html#sandboxWith[R1<:R,E2,B](f:zio.ZManaged[R1,zio.Cause[E],A]=>zio.ZManaged[R1,zio.Cause[E2],B]):zio.ZManaged[R1,E2,B]", "kind" : "def"}, {"label" : "sandbox", "tail" : "(): ZManaged[R, Cause[E], A]", "member" : "zio.ZManaged.sandbox", "link" : "zio\/ZManaged.html#sandbox:zio.ZManaged[R,zio.Cause[E],A]", "kind" : "def"}, {"label" : "exit", "tail" : "(): ZManaged[R, Nothing, Exit[E, A]]", "member" : "zio.ZManaged.exit", "link" : "zio\/ZManaged.html#exit:zio.ZManaged[R,Nothing,zio.Exit[E,A]]", "kind" : "def"}, {"label" : "retry", "tail" : "(policy: => Schedule[R1, E, S])(ev: CanFail[E]): ZManaged[R1 with Has[Clock], E, A]", "member" : "zio.ZManaged.retry", "link" : "zio\/ZManaged.html#retry[R1<:R,S](policy:=>zio.Schedule[R1,E,S])(implicitev:zio.CanFail[E]):zio.ZManaged[R1withzio.Has[zio.Clock],E,A]", "kind" : "def"}, {"label" : "reserve", "tail" : "(): UIO[Reservation[R, E, A]]", "member" : "zio.ZManaged.reserve", "link" : "zio\/ZManaged.html#reserve:zio.UIO[zio.Reservation[R,E,A]]", "kind" : "def"}, {"label" : "release", "tail" : "(): ZManaged[R, E, A]", "member" : "zio.ZManaged.release", "link" : "zio\/ZManaged.html#release:zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "rejectManaged", "tail" : "(pf: PartialFunction[A, ZManaged[R1, E1, E1]]): ZManaged[R1, E1, A]", "member" : "zio.ZManaged.rejectManaged", "link" : "zio\/ZManaged.html#rejectManaged[R1<:R,E1>:E](pf:PartialFunction[A,zio.ZManaged[R1,E1,E1]]):zio.ZManaged[R1,E1,A]", "kind" : "def"}, {"label" : "rejectM", "tail" : "(pf: PartialFunction[A, ZManaged[R1, E1, E1]]): ZManaged[R1, E1, A]", "member" : "zio.ZManaged.rejectM", "link" : "zio\/ZManaged.html#rejectM[R1<:R,E1>:E](pf:PartialFunction[A,zio.ZManaged[R1,E1,E1]]):zio.ZManaged[R1,E1,A]", "kind" : "def"}, {"label" : "reject", "tail" : "(pf: PartialFunction[A, E1]): ZManaged[R, E1, A]", "member" : "zio.ZManaged.reject", "link" : "zio\/ZManaged.html#reject[E1>:E](pf:PartialFunction[A,E1]):zio.ZManaged[R,E1,A]", "kind" : "def"}, {"label" : "refineOrDieWith", "tail" : "(pf: PartialFunction[E, E1])(f: (E) => Throwable)(ev: CanFail[E]): ZManaged[R, E1, A]", "member" : "zio.ZManaged.refineOrDieWith", "link" : "zio\/ZManaged.html#refineOrDieWith[E1](pf:PartialFunction[E,E1])(f:E=>Throwable)(implicitev:zio.CanFail[E]):zio.ZManaged[R,E1,A]", "kind" : "def"}, {"label" : "refineOrDie", "tail" : "(pf: PartialFunction[E, E1])(ev1: IsSubtypeOfError[E, Throwable], ev2: CanFail[E]): ZManaged[R, E1, A]", "member" : "zio.ZManaged.refineOrDie", "link" : "zio\/ZManaged.html#refineOrDie[E1](pf:PartialFunction[E,E1])(implicitev1:zio.IsSubtypeOfError[E,Throwable],implicitev2:zio.CanFail[E]):zio.ZManaged[R,E1,A]", "kind" : "def"}, {"label" : "provideSomeLayer", "tail" : "(): ProvideSomeLayer[R0, R, E, A]", "member" : "zio.ZManaged.provideSomeLayer", "link" : "zio\/ZManaged.html#provideSomeLayer[R0]:zio.ZManaged.ProvideSomeLayer[R0,R,E,A]", "kind" : "final def"}, {"label" : "provideSome", "tail" : "(f: (R0) => R)(ev: NeedsEnv[R]): ZManaged[R0, E, A]", "member" : "zio.ZManaged.provideSome", "link" : "zio\/ZManaged.html#provideSome[R0](f:R0=>R)(implicitev:zio.NeedsEnv[R]):zio.ZManaged[R0,E,A]", "kind" : "def"}, {"label" : "provideLayer", "tail" : "(layer: => ZLayer[R0, E1, R1])(ev: <:<[R1, R]): ZManaged[R0, E1, A]", "member" : "zio.ZManaged.provideLayer", "link" : "zio\/ZManaged.html#provideLayer[E1>:E,R0,R1](layer:=>zio.ZLayer[R0,E1,R1])(implicitev:R1<:<R):zio.ZManaged[R0,E1,A]", "kind" : "final def"}, {"label" : "provideCustomLayer", "tail" : "(layer: => ZLayer[zio.ZEnv, E1, R1])(ev1: <:<[zio.ZEnv with R1, R], ev2: Union[zio.ZEnv, R1], tagged: zio.Tag[R1]): ZManaged[zio.ZEnv, E1, A]", "member" : "zio.ZManaged.provideCustomLayer", "link" : "zio\/ZManaged.html#provideCustomLayer[E1>:E,R1](layer:=>zio.ZLayer[zio.ZEnv,E1,R1])(implicitev1:zio.ZEnvwithR1<:<R,implicitev2:zio.Has.Union[zio.ZEnv,R1],implicittagged:zio.Tag[R1]):zio.ZManaged[zio.ZEnv,E1,A]", "kind" : "final def"}, {"label" : "provide", "tail" : "(r: => R)(ev: NeedsEnv[R]): Managed[E, A]", "member" : "zio.ZManaged.provide", "link" : "zio\/ZManaged.html#provide(r:=>R)(implicitev:zio.NeedsEnv[R]):zio.Managed[E,A]", "kind" : "def"}, {"label" : "preallocateManaged", "tail" : "(): ZManaged[R, E, Managed[Nothing, A]]", "member" : "zio.ZManaged.preallocateManaged", "link" : "zio\/ZManaged.html#preallocateManaged:zio.ZManaged[R,E,zio.Managed[Nothing,A]]", "kind" : "def"}, {"label" : "preallocate", "tail" : "(): ZIO[R, E, Managed[Nothing, A]]", "member" : "zio.ZManaged.preallocate", "link" : "zio\/ZManaged.html#preallocate:zio.ZIO[R,E,zio.Managed[Nothing,A]]", "kind" : "def"}, {"label" : "orElseSucceed", "tail" : "(a1: => A1)(ev: CanFail[E]): ZManaged[R, Nothing, A1]", "member" : "zio.ZManaged.orElseSucceed", "link" : "zio\/ZManaged.html#orElseSucceed[A1>:A](a1:=>A1)(implicitev:zio.CanFail[E]):zio.ZManaged[R,Nothing,A1]", "kind" : "final def"}, {"label" : "orElseOptional", "tail" : "(that: => ZManaged[R1, Option[E1], A1])(ev: IsSubtypeOfError[E, Option[E1]]): ZManaged[R1, Option[E1], A1]", "member" : "zio.ZManaged.orElseOptional", "link" : "zio\/ZManaged.html#orElseOptional[R1<:R,E1,A1>:A](that:=>zio.ZManaged[R1,Option[E1],A1])(implicitev:zio.IsSubtypeOfError[E,Option[E1]]):zio.ZManaged[R1,Option[E1],A1]", "kind" : "final def"}, {"label" : "orElseFail", "tail" : "(e1: => E1)(ev: CanFail[E]): ZManaged[R, E1, A]", "member" : "zio.ZManaged.orElseFail", "link" : "zio\/ZManaged.html#orElseFail[E1](e1:=>E1)(implicitev:zio.CanFail[E]):zio.ZManaged[R,E1,A]", "kind" : "final def"}, {"label" : "orElseEither", "tail" : "(that: => ZManaged[R1, E2, B])(ev: CanFail[E]): ZManaged[R1, E2, Either[A, B]]", "member" : "zio.ZManaged.orElseEither", "link" : "zio\/ZManaged.html#orElseEither[R1<:R,E2,B](that:=>zio.ZManaged[R1,E2,B])(implicitev:zio.CanFail[E]):zio.ZManaged[R1,E2,Either[A,B]]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: => ZManaged[R1, E2, A1])(ev: CanFail[E]): ZManaged[R1, E2, A1]", "member" : "zio.ZManaged.orElse", "link" : "zio\/ZManaged.html#orElse[R1<:R,E2,A1>:A](that:=>zio.ZManaged[R1,E2,A1])(implicitev:zio.CanFail[E]):zio.ZManaged[R1,E2,A1]", "kind" : "def"}, {"label" : "orDieWith", "tail" : "(f: (E) => Throwable)(ev: CanFail[E]): ZManaged[R, Nothing, A]", "member" : "zio.ZManaged.orDieWith", "link" : "zio\/ZManaged.html#orDieWith(f:E=>Throwable)(implicitev:zio.CanFail[E]):zio.ZManaged[R,Nothing,A]", "kind" : "def"}, {"label" : "orDie", "tail" : "(ev1: IsSubtypeOfError[E, Throwable], ev2: CanFail[E]): ZManaged[R, Nothing, A]", "member" : "zio.ZManaged.orDie", "link" : "zio\/ZManaged.html#orDie(implicitev1:zio.IsSubtypeOfError[E,Throwable],implicitev2:zio.CanFail[E]):zio.ZManaged[R,Nothing,A]", "kind" : "def"}, {"label" : "optional", "tail" : "(ev: IsSubtypeOfError[E, Option[E1]]): ZManaged[R, E1, Option[A]]", "member" : "zio.ZManaged.optional", "link" : "zio\/ZManaged.html#optional[E1](implicitev:zio.IsSubtypeOfError[E,Option[E1]]):zio.ZManaged[R,E1,Option[A]]", "kind" : "final def"}, {"label" : "option", "tail" : "(ev: CanFail[E]): ZManaged[R, Nothing, Option[A]]", "member" : "zio.ZManaged.option", "link" : "zio\/ZManaged.html#option(implicitev:zio.CanFail[E]):zio.ZManaged[R,Nothing,Option[A]]", "kind" : "def"}, {"label" : "onExitFirst", "tail" : "(cleanup: (Exit[E, A]) => ZIO[R1, Nothing, Any]): ZManaged[R1, E, A]", "member" : "zio.ZManaged.onExitFirst", "link" : "zio\/ZManaged.html#onExitFirst[R1<:R](cleanup:zio.Exit[E,A]=>zio.ZIO[R1,Nothing,Any]):zio.ZManaged[R1,E,A]", "kind" : "def"}, {"label" : "onExit", "tail" : "(cleanup: (Exit[E, A]) => ZIO[R1, Nothing, Any]): ZManaged[R1, E, A]", "member" : "zio.ZManaged.onExit", "link" : "zio\/ZManaged.html#onExit[R1<:R](cleanup:zio.Exit[E,A]=>zio.ZIO[R1,Nothing,Any]):zio.ZManaged[R1,E,A]", "kind" : "def"}, {"label" : "onExecutionContext", "tail" : "(ec: => ExecutionContext): ZManaged[R, E, A]", "member" : "zio.ZManaged.onExecutionContext", "link" : "zio\/ZManaged.html#onExecutionContext(ec:=>scala.concurrent.ExecutionContext):zio.ZManaged[R,E,A]", "kind" : "final def"}, {"label" : "onExecutor", "tail" : "(executor: => Executor): ZManaged[R, E, A]", "member" : "zio.ZManaged.onExecutor", "link" : "zio\/ZManaged.html#onExecutor(executor:=>zio.Executor):zio.ZManaged[R,E,A]", "kind" : "final def"}, {"label" : "on", "tail" : "(ec: => ExecutionContext): ZManaged[R, E, A]", "member" : "zio.ZManaged.on", "link" : "zio\/ZManaged.html#on(ec:=>scala.concurrent.ExecutionContext):zio.ZManaged[R,E,A]", "kind" : "final def"}, {"label" : "none", "tail" : "(ev: IsSubtypeOfOutput[A, Option[B]]): ZManaged[R, Option[E], Unit]", "member" : "zio.ZManaged.none", "link" : "zio\/ZManaged.html#none[B](implicitev:zio.IsSubtypeOfOutput[A,Option[B]]):zio.ZManaged[R,Option[E],Unit]", "kind" : "final def"}, {"label" : "merge", "tail" : "(ev1: IsSubtypeOfError[E, A1], ev2: CanFail[E]): ZManaged[R, Nothing, A1]", "member" : "zio.ZManaged.merge", "link" : "zio\/ZManaged.html#merge[A1>:A](implicitev1:zio.IsSubtypeOfError[E,A1],implicitev2:zio.CanFail[E]):zio.ZManaged[R,Nothing,A1]", "kind" : "def"}, {"label" : "memoize", "tail" : "(): ZManaged[Any, Nothing, ZManaged[R, E, A]]", "member" : "zio.ZManaged.memoize", "link" : "zio\/ZManaged.html#memoize:zio.ZManaged[Any,Nothing,zio.ZManaged[R,E,A]]", "kind" : "def"}, {"label" : "mapZIO", "tail" : "(f: (A) => ZIO[R1, E1, B]): ZManaged[R1, E1, B]", "member" : "zio.ZManaged.mapZIO", "link" : "zio\/ZManaged.html#mapZIO[R1<:R,E1>:E,B](f:A=>zio.ZIO[R1,E1,B]):zio.ZManaged[R1,E1,B]", "kind" : "def"}, {"label" : "mapM", "tail" : "(f: (A) => ZIO[R1, E1, B]): ZManaged[R1, E1, B]", "member" : "zio.ZManaged.mapM", "link" : "zio\/ZManaged.html#mapM[R1<:R,E1>:E,B](f:A=>zio.ZIO[R1,E1,B]):zio.ZManaged[R1,E1,B]", "kind" : "def"}, {"label" : "mapErrorCause", "tail" : "(f: (Cause[E]) => Cause[E1]): ZManaged[R, E1, A]", "member" : "zio.ZManaged.mapErrorCause", "link" : "zio\/ZManaged.html#mapErrorCause[E1](f:zio.Cause[E]=>zio.Cause[E1]):zio.ZManaged[R,E1,A]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (E) => E1)(ev: CanFail[E]): ZManaged[R, E1, A]", "member" : "zio.ZManaged.mapError", "link" : "zio\/ZManaged.html#mapError[E1](f:E=>E1)(implicitev:zio.CanFail[E]):zio.ZManaged[R,E1,A]", "kind" : "def"}, {"label" : "mapAttempt", "tail" : "(f: (A) => B)(ev: IsSubtypeOfError[E, Throwable]): ZManaged[R, Throwable, B]", "member" : "zio.ZManaged.mapAttempt", "link" : "zio\/ZManaged.html#mapAttempt[B](f:A=>B)(implicitev:zio.IsSubtypeOfError[E,Throwable]):zio.ZManaged[R,Throwable,B]", "kind" : "final def"}, {"label" : "mapEffect", "tail" : "(f: (A) => B)(ev: IsSubtypeOfError[E, Throwable]): ZManaged[R, Throwable, B]", "member" : "zio.ZManaged.mapEffect", "link" : "zio\/ZManaged.html#mapEffect[B](f:A=>B)(implicitev:zio.IsSubtypeOfError[E,Throwable]):zio.ZManaged[R,Throwable,B]", "kind" : "final def"}, {"label" : "mapBoth", "tail" : "(f: (E) => E1, g: (A) => A1)(ev: CanFail[E]): ZManaged[R, E1, A1]", "member" : "zio.ZManaged.mapBoth", "link" : "zio\/ZManaged.html#mapBoth[E1,A1](f:E=>E1,g:A=>A1)(implicitev:zio.CanFail[E]):zio.ZManaged[R,E1,A1]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): ZManaged[R, E, B]", "member" : "zio.ZManaged.map", "link" : "zio\/ZManaged.html#map[B](f:A=>B):zio.ZManaged[R,E,B]", "kind" : "def"}, {"label" : "lockExecutionContext", "tail" : "(ec: => ExecutionContext): ZManaged[R, E, A]", "member" : "zio.ZManaged.lockExecutionContext", "link" : "zio\/ZManaged.html#lockExecutionContext(ec:=>scala.concurrent.ExecutionContext):zio.ZManaged[R,E,A]", "kind" : "final def"}, {"label" : "lock", "tail" : "(executor: => Executor): ZManaged[R, E, A]", "member" : "zio.ZManaged.lock", "link" : "zio\/ZManaged.html#lock(executor:=>zio.Executor):zio.ZManaged[R,E,A]", "kind" : "final def"}, {"label" : "isSuccess", "tail" : "(): ZManaged[R, Nothing, Boolean]", "member" : "zio.ZManaged.isSuccess", "link" : "zio\/ZManaged.html#isSuccess:zio.ZManaged[R,Nothing,Boolean]", "kind" : "def"}, {"label" : "isFailure", "tail" : "(): ZManaged[R, Nothing, Boolean]", "member" : "zio.ZManaged.isFailure", "link" : "zio\/ZManaged.html#isFailure:zio.ZManaged[R,Nothing,Boolean]", "kind" : "def"}, {"label" : "ignoreReleaseFailures", "tail" : "(): ZManaged[R, E, A]", "member" : "zio.ZManaged.ignoreReleaseFailures", "link" : "zio\/ZManaged.html#ignoreReleaseFailures:zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "ignore", "tail" : "(): ZManaged[R, Nothing, Unit]", "member" : "zio.ZManaged.ignore", "link" : "zio\/ZManaged.html#ignore:zio.ZManaged[R,Nothing,Unit]", "kind" : "def"}, {"label" : "get", "tail" : "(ev1: IsSubtypeOfError[E, Nothing], ev2: IsSubtypeOfOutput[A, Option[B]]): ZManaged[R, Option[Nothing], B]", "member" : "zio.ZManaged.get", "link" : "zio\/ZManaged.html#get[B](implicitev1:zio.IsSubtypeOfError[E,Nothing],implicitev2:zio.IsSubtypeOfOutput[A,Option[B]]):zio.ZManaged[R,Option[Nothing],B]", "kind" : "def"}, {"label" : "fork", "tail" : "(): ZManaged[R, Nothing, Fiber.Runtime[E, A]]", "member" : "zio.ZManaged.fork", "link" : "zio\/ZManaged.html#fork:zio.ZManaged[R,Nothing,zio.Fiber.Runtime[E,A]]", "kind" : "def"}, {"label" : "foldManaged", "tail" : "(failure: (E) => ZManaged[R1, E2, B], success: (A) => ZManaged[R1, E2, B])(ev: CanFail[E]): ZManaged[R1, E2, B]", "member" : "zio.ZManaged.foldManaged", "link" : "zio\/ZManaged.html#foldManaged[R1<:R,E2,B](failure:E=>zio.ZManaged[R1,E2,B],success:A=>zio.ZManaged[R1,E2,B])(implicitev:zio.CanFail[E]):zio.ZManaged[R1,E2,B]", "kind" : "def"}, {"label" : "foldM", "tail" : "(failure: (E) => ZManaged[R1, E2, B], success: (A) => ZManaged[R1, E2, B])(ev: CanFail[E]): ZManaged[R1, E2, B]", "member" : "zio.ZManaged.foldM", "link" : "zio\/ZManaged.html#foldM[R1<:R,E2,B](failure:E=>zio.ZManaged[R1,E2,B],success:A=>zio.ZManaged[R1,E2,B])(implicitev:zio.CanFail[E]):zio.ZManaged[R1,E2,B]", "kind" : "def"}, {"label" : "foldCauseManaged", "tail" : "(failure: (Cause[E]) => ZManaged[R1, E1, A1], success: (A) => ZManaged[R1, E1, A1]): ZManaged[R1, E1, A1]", "member" : "zio.ZManaged.foldCauseManaged", "link" : "zio\/ZManaged.html#foldCauseManaged[R1<:R,E1,A1](failure:zio.Cause[E]=>zio.ZManaged[R1,E1,A1],success:A=>zio.ZManaged[R1,E1,A1]):zio.ZManaged[R1,E1,A1]", "kind" : "def"}, {"label" : "foldCauseM", "tail" : "(failure: (Cause[E]) => ZManaged[R1, E1, A1], success: (A) => ZManaged[R1, E1, A1]): ZManaged[R1, E1, A1]", "member" : "zio.ZManaged.foldCauseM", "link" : "zio\/ZManaged.html#foldCauseM[R1<:R,E1,A1](failure:zio.Cause[E]=>zio.ZManaged[R1,E1,A1],success:A=>zio.ZManaged[R1,E1,A1]):zio.ZManaged[R1,E1,A1]", "kind" : "def"}, {"label" : "foldCause", "tail" : "(failure: (Cause[E]) => B, success: (A) => B): ZManaged[R, Nothing, B]", "member" : "zio.ZManaged.foldCause", "link" : "zio\/ZManaged.html#foldCause[B](failure:zio.Cause[E]=>B,success:A=>B):zio.ZManaged[R,Nothing,B]", "kind" : "def"}, {"label" : "fold", "tail" : "(failure: (E) => B, success: (A) => B)(ev: CanFail[E]): ZManaged[R, Nothing, B]", "member" : "zio.ZManaged.fold", "link" : "zio\/ZManaged.html#fold[B](failure:E=>B,success:A=>B)(implicitev:zio.CanFail[E]):zio.ZManaged[R,Nothing,B]", "kind" : "def"}, {"label" : "flipWith", "tail" : "(f: (ZManaged[R, A, E]) => ZManaged[R1, A1, E1]): ZManaged[R1, E1, A1]", "member" : "zio.ZManaged.flipWith", "link" : "zio\/ZManaged.html#flipWith[R1,A1,E1](f:zio.ZManaged[R,A,E]=>zio.ZManaged[R1,A1,E1]):zio.ZManaged[R1,E1,A1]", "kind" : "def"}, {"label" : "flip", "tail" : "(): ZManaged[R, A, E]", "member" : "zio.ZManaged.flip", "link" : "zio\/ZManaged.html#flip:zio.ZManaged[R,A,E]", "kind" : "def"}, {"label" : "flattenZIO", "tail" : "(ev: IsSubtypeOfOutput[A, ZIO[R1, E1, B]]): ZManaged[R1, E1, B]", "member" : "zio.ZManaged.flattenZIO", "link" : "zio\/ZManaged.html#flattenZIO[R1<:R,E1>:E,B](implicitev:zio.IsSubtypeOfOutput[A,zio.ZIO[R1,E1,B]]):zio.ZManaged[R1,E1,B]", "kind" : "def"}, {"label" : "flattenM", "tail" : "(ev: IsSubtypeOfOutput[A, ZIO[R1, E1, B]]): ZManaged[R1, E1, B]", "member" : "zio.ZManaged.flattenM", "link" : "zio\/ZManaged.html#flattenM[R1<:R,E1>:E,B](implicitev:zio.IsSubtypeOfOutput[A,zio.ZIO[R1,E1,B]]):zio.ZManaged[R1,E1,B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: IsSubtypeOfOutput[A, ZManaged[R1, E1, B]]): ZManaged[R1, E1, B]", "member" : "zio.ZManaged.flatten", "link" : "zio\/ZManaged.html#flatten[R1<:R,E1>:E,B](implicitev:zio.IsSubtypeOfOutput[A,zio.ZManaged[R1,E1,B]]):zio.ZManaged[R1,E1,B]", "kind" : "def"}, {"label" : "flatMapError", "tail" : "(f: (E) => ZManaged[R1, Nothing, E2])(ev: CanFail[E]): ZManaged[R1, E2, A]", "member" : "zio.ZManaged.flatMapError", "link" : "zio\/ZManaged.html#flatMapError[R1<:R,E2](f:E=>zio.ZManaged[R1,Nothing,E2])(implicitev:zio.CanFail[E]):zio.ZManaged[R1,E2,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => ZManaged[R1, E1, B]): ZManaged[R1, E1, B]", "member" : "zio.ZManaged.flatMap", "link" : "zio\/ZManaged.html#flatMap[R1<:R,E1>:E,B](f:A=>zio.ZManaged[R1,E1,B]):zio.ZManaged[R1,E1,B]", "kind" : "def"}, {"label" : "firstSuccessOf", "tail" : "(rest: => Iterable[ZManaged[R1, E1, A1]]): ZManaged[R1, E1, A1]", "member" : "zio.ZManaged.firstSuccessOf", "link" : "zio\/ZManaged.html#firstSuccessOf[R1<:R,E1>:E,A1>:A](rest:=>Iterable[zio.ZManaged[R1,E1,A1]]):zio.ZManaged[R1,E1,A1]", "kind" : "final def"}, {"label" : "eventually", "tail" : "(ev: CanFail[E]): ZManaged[R, Nothing, A]", "member" : "zio.ZManaged.eventually", "link" : "zio\/ZManaged.html#eventually(implicitev:zio.CanFail[E]):zio.ZManaged[R,Nothing,A]", "kind" : "def"}, {"label" : "ensuringFirst", "tail" : "(f: => ZIO[R1, Nothing, Any]): ZManaged[R1, E, A]", "member" : "zio.ZManaged.ensuringFirst", "link" : "zio\/ZManaged.html#ensuringFirst[R1<:R](f:=>zio.ZIO[R1,Nothing,Any]):zio.ZManaged[R1,E,A]", "kind" : "def"}, {"label" : "ensuring", "tail" : "(f: => ZIO[R1, Nothing, Any]): ZManaged[R1, E, A]", "member" : "zio.ZManaged.ensuring", "link" : "zio\/ZManaged.html#ensuring[R1<:R](f:=>zio.ZIO[R1,Nothing,Any]):zio.ZManaged[R1,E,A]", "kind" : "def"}, {"label" : "either", "tail" : "(ev: CanFail[E]): ZManaged[R, Nothing, Either[E, A]]", "member" : "zio.ZManaged.either", "link" : "zio\/ZManaged.html#either(implicitev:zio.CanFail[E]):zio.ZManaged[R,Nothing,Either[E,A]]", "kind" : "def"}, {"label" : "collectManaged", "tail" : "(e: => E1)(pf: PartialFunction[A, ZManaged[R1, E1, B]]): ZManaged[R1, E1, B]", "member" : "zio.ZManaged.collectManaged", "link" : "zio\/ZManaged.html#collectManaged[R1<:R,E1>:E,B](e:=>E1)(pf:PartialFunction[A,zio.ZManaged[R1,E1,B]]):zio.ZManaged[R1,E1,B]", "kind" : "def"}, {"label" : "collectM", "tail" : "(e: => E1)(pf: PartialFunction[A, ZManaged[R1, E1, B]]): ZManaged[R1, E1, B]", "member" : "zio.ZManaged.collectM", "link" : "zio\/ZManaged.html#collectM[R1<:R,E1>:E,B](e:=>E1)(pf:PartialFunction[A,zio.ZManaged[R1,E1,B]]):zio.ZManaged[R1,E1,B]", "kind" : "def"}, {"label" : "collect", "tail" : "(e: => E1)(pf: PartialFunction[A, B]): ZManaged[R, E1, B]", "member" : "zio.ZManaged.collect", "link" : "zio\/ZManaged.html#collect[E1>:E,B](e:=>E1)(pf:PartialFunction[A,B]):zio.ZManaged[R,E1,B]", "kind" : "def"}, {"label" : "catchSomeCause", "tail" : "(pf: PartialFunction[Cause[E], ZManaged[R1, E1, A1]]): ZManaged[R1, E1, A1]", "member" : "zio.ZManaged.catchSomeCause", "link" : "zio\/ZManaged.html#catchSomeCause[R1<:R,E1>:E,A1>:A](pf:PartialFunction[zio.Cause[E],zio.ZManaged[R1,E1,A1]]):zio.ZManaged[R1,E1,A1]", "kind" : "def"}, {"label" : "catchSome", "tail" : "(pf: PartialFunction[E, ZManaged[R1, E1, A1]])(ev: CanFail[E]): ZManaged[R1, E1, A1]", "member" : "zio.ZManaged.catchSome", "link" : "zio\/ZManaged.html#catchSome[R1<:R,E1>:E,A1>:A](pf:PartialFunction[E,zio.ZManaged[R1,E1,A1]])(implicitev:zio.CanFail[E]):zio.ZManaged[R1,E1,A1]", "kind" : "def"}, {"label" : "catchAllCause", "tail" : "(h: (Cause[E]) => ZManaged[R1, E2, A1]): ZManaged[R1, E2, A1]", "member" : "zio.ZManaged.catchAllCause", "link" : "zio\/ZManaged.html#catchAllCause[R1<:R,E2,A1>:A](h:zio.Cause[E]=>zio.ZManaged[R1,E2,A1]):zio.ZManaged[R1,E2,A1]", "kind" : "def"}, {"label" : "catchAll", "tail" : "(h: (E) => ZManaged[R1, E2, A1])(ev: CanFail[E]): ZManaged[R1, E2, A1]", "member" : "zio.ZManaged.catchAll", "link" : "zio\/ZManaged.html#catchAll[R1<:R,E2,A1>:A](h:E=>zio.ZManaged[R1,E2,A1])(implicitev:zio.CanFail[E]):zio.ZManaged[R1,E2,A1]", "kind" : "def"}, {"label" : "bimap", "tail" : "(f: (E) => E1, g: (A) => A1)(ev: CanFail[E]): ZManaged[R, E1, A1]", "member" : "zio.ZManaged.bimap", "link" : "zio\/ZManaged.html#bimap[E1,A1](f:E=>E1,g:A=>A1)(implicitev:zio.CanFail[E]):zio.ZManaged[R,E1,A1]", "kind" : "def"}, {"label" : "asSomeError", "tail" : "(): ZManaged[R, Option[E], A]", "member" : "zio.ZManaged.asSomeError", "link" : "zio\/ZManaged.html#asSomeError:zio.ZManaged[R,Option[E],A]", "kind" : "final def"}, {"label" : "asSome", "tail" : "(): ZManaged[R, E, Option[A]]", "member" : "zio.ZManaged.asSome", "link" : "zio\/ZManaged.html#asSome:zio.ZManaged[R,E,Option[A]]", "kind" : "final def"}, {"label" : "asService", "tail" : "(arg0: zio.Tag[A1]): ZManaged[R, E, Has[A1]]", "member" : "zio.ZManaged.asService", "link" : "zio\/ZManaged.html#asService[A1>:A](implicitevidence$1:zio.Tag[A1]):zio.ZManaged[R,E,zio.Has[A1]]", "kind" : "def"}, {"label" : "as", "tail" : "(b: => B): ZManaged[R, E, B]", "member" : "zio.ZManaged.as", "link" : "zio\/ZManaged.html#as[B](b:=>B):zio.ZManaged[R,E,B]", "kind" : "def"}, {"label" : "absorbWith", "tail" : "(f: (E) => Throwable): ZManaged[R, Throwable, A]", "member" : "zio.ZManaged.absorbWith", "link" : "zio\/ZManaged.html#absorbWith(f:E=>Throwable):zio.ZManaged[R,Throwable,A]", "kind" : "def"}, {"label" : "absorb", "tail" : "(ev: IsSubtypeOfError[E, Throwable]): ZManaged[R, Throwable, A]", "member" : "zio.ZManaged.absorb", "link" : "zio\/ZManaged.html#absorb(implicitev:zio.IsSubtypeOfError[E,Throwable]):zio.ZManaged[R,Throwable,A]", "kind" : "def"}, {"label" : "absolve", "tail" : "(ev: IsSubtypeOfOutput[A, Either[E1, B]]): ZManaged[R, E1, B]", "member" : "zio.ZManaged.absolve", "link" : "zio\/ZManaged.html#absolve[E1>:E,B](implicitev:zio.IsSubtypeOfOutput[A,Either[E1,B]]):zio.ZManaged[R,E1,B]", "kind" : "def"}, {"label" : ">>=", "tail" : "(k: (A) => ZManaged[R1, E1, B]): ZManaged[R1, E1, B]", "member" : "zio.ZManaged.>>=", "link" : "zio\/ZManaged.html#>>=[R1<:R,E1>:E,B](k:A=>zio.ZManaged[R1,E1,B]):zio.ZManaged[R1,E1,B]", "kind" : "def"}, {"label" : "<>", "tail" : "(that: => ZManaged[R1, E2, A1])(ev: CanFail[E]): ZManaged[R1, E2, A1]", "member" : "zio.ZManaged.<>", "link" : "zio\/ZManaged.html#<>[R1<:R,E2,A1>:A](that:=>zio.ZManaged[R1,E2,A1])(implicitev:zio.CanFail[E]):zio.ZManaged[R1,E2,A1]", "kind" : "def"}, {"label" : "<*>", "tail" : "(that: => ZManaged[R1, E1, A1])(zippable: Zippable[A, A1]): ZManaged[R1, E1, Out]", "member" : "zio.ZManaged.<*>", "link" : "zio\/ZManaged.html#<*>[R1<:R,E1>:E,A1](that:=>zio.ZManaged[R1,E1,A1])(implicitzippable:zio.Zippable[A,A1]):zio.ZManaged[R1,E1,zippable.Out]", "kind" : "def"}, {"label" : "<*", "tail" : "(that: => ZManaged[R1, E1, A1]): ZManaged[R1, E1, A]", "member" : "zio.ZManaged.<*", "link" : "zio\/ZManaged.html#<*[R1<:R,E1>:E,A1](that:=>zio.ZManaged[R1,E1,A1]):zio.ZManaged[R1,E1,A]", "kind" : "def"}, {"label" : "<&>", "tail" : "(that: => ZManaged[R1, E1, A1])(zippable: Zippable[A, A1]): ZManaged[R1, E1, Out]", "member" : "zio.ZManaged.<&>", "link" : "zio\/ZManaged.html#<&>[R1<:R,E1>:E,A1](that:=>zio.ZManaged[R1,E1,A1])(implicitzippable:zio.Zippable[A,A1]):zio.ZManaged[R1,E1,zippable.Out]", "kind" : "def"}, {"label" : "<&", "tail" : "(that: => ZManaged[R1, E1, A1]): ZManaged[R1, E1, A]", "member" : "zio.ZManaged.<&", "link" : "zio\/ZManaged.html#<&[R1<:R,E1>:E,A1](that:=>zio.ZManaged[R1,E1,A1]):zio.ZManaged[R1,E1,A]", "kind" : "def"}, {"label" : "*>", "tail" : "(that: => ZManaged[R1, E1, A1]): ZManaged[R1, E1, A1]", "member" : "zio.ZManaged.*>", "link" : "zio\/ZManaged.html#*>[R1<:R,E1>:E,A1](that:=>zio.ZManaged[R1,E1,A1]):zio.ZManaged[R1,E1,A1]", "kind" : "def"}, {"label" : "&>", "tail" : "(that: => ZManaged[R1, E1, A1]): ZManaged[R1, E1, A1]", "member" : "zio.ZManaged.&>", "link" : "zio\/ZManaged.html#&>[R1<:R,E1>:E,A1](that:=>zio.ZManaged[R1,E1,A1]):zio.ZManaged[R1,E1,A1]", "kind" : "def"}, {"label" : "&&&", "tail" : "(that: => ZManaged[R1, E1, B])(zippable: Zippable[A, B]): ZManaged[R1, E1, Out]", "member" : "zio.ZManaged.&&&", "link" : "zio\/ZManaged.html#&&&[R1<:R,E1>:E,B](that:=>zio.ZManaged[R1,E1,B])(implicitzippable:zio.Zippable[A,B]):zio.ZManaged[R1,E1,zippable.Out]", "kind" : "def"}, {"label" : "!", "tail" : "(ev1: <:<[E, Throwable], ev2: CanFail[E]): ZManaged[R, Nothing, A]", "member" : "zio.ZManaged.!", "link" : "zio\/ZManaged.html#!(implicitev1:E<:<Throwable,implicitev2:zio.CanFail[E]):zio.ZManaged[R,Nothing,A]", "kind" : "final def"}, {"label" : "@@", "tail" : "(aspect: => ZManagedAspect[LowerR, UpperR, LowerE, UpperE, LowerA, UpperA]): ZManaged[UpperR, LowerE, LowerA]", "member" : "zio.ZManaged.@@", "link" : "zio\/ZManaged.html#@@[LowerR<:UpperR,UpperR<:R,LowerE>:E,UpperE>:LowerE,LowerA>:A,UpperA>:LowerA](aspect:=>zio.ZManagedAspect[LowerR,UpperR,LowerE,UpperE,LowerA,UpperA]):zio.ZManaged[UpperR,LowerE,LowerA]", "kind" : "final def"}, {"label" : "inject", "tail" : "(layers: ZLayer[_, E1, _]*): ZManaged[Any, E1, A]", "member" : "zio.ZManagedVersionSpecific.inject", "link" : "zio\/ZManaged.html#inject[E1>:E](layers:zio.ZLayer[_,E1,_]*):zio.ZManaged[Any,E1,A]", "kind" : "macro def"}, {"label" : "injectSome", "tail" : "(): ProvideSomeLayerManagedPartiallyApplied[R0, R, E, A]", "member" : "zio.ZManagedVersionSpecific.injectSome", "link" : "zio\/ZManaged.html#injectSome[R0<:zio.Has[_]]:zio.ProvideSomeLayerManagedPartiallyApplied[R0,R,E,A]", "kind" : "def"}, {"label" : "injectCustom", "tail" : "(layers: ZLayer[_, E1, _]*): ZManaged[zio.ZEnv, E1, A]", "member" : "zio.ZManagedVersionSpecific.injectCustom", "link" : "zio\/ZManaged.html#injectCustom[E1>:E](layers:zio.ZLayer[_,E1,_]*):zio.ZManaged[zio.ZEnv,E1,A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZManaged.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZManaged.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZManaged.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZManaged.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZManaged.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZManaged.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZManaged.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZManaged.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZManaged.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZManaged.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZManaged.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZManaged.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZManaged.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZManaged.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZManaged.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZManaged.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZManaged.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZManaged.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZManaged.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "zio", "tail" : "(): ZIO[(R, ReleaseMap), E, (Finalizer, A)]", "member" : "zio.ZManaged.zio", "link" : "zio\/ZManaged.html#zio:zio.ZIO[(R,zio.ZManaged.ReleaseMap),E,(zio.ZManaged.Finalizer,A)]", "kind" : "abstract def"}], "members_object" : [{"label" : "RefineToOrDieOps", "tail" : "", "member" : "zio.ZManaged.RefineToOrDieOps", "link" : "zio\/ZManaged$.html#RefineToOrDieOps[R,E<:Throwable,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "ZManagedConstructorLowPriority2", "tail" : "", "member" : "zio.ZManaged.ZManagedConstructorLowPriority2", "link" : "zio\/ZManaged$.html#ZManagedConstructorLowPriority2extendsAnyRef", "kind" : "trait"}, {"label" : "ZManagedConstructorLowPriority1", "tail" : "", "member" : "zio.ZManaged.ZManagedConstructorLowPriority1", "link" : "zio\/ZManaged$.html#ZManagedConstructorLowPriority1extendsZManaged.ZManagedConstructorLowPriority2", "kind" : "trait"}, {"label" : "ZManagedConstructor", "tail" : "", "member" : "zio.ZManaged.ZManagedConstructor", "link" : "zio\/ZManaged$.html#ZManagedConstructor", "kind" : "object"}, {"label" : "ZManagedConstructor", "tail" : "", "member" : "zio.ZManaged.ZManagedConstructor", "link" : "zio\/ZManaged$.html#ZManagedConstructor[Input]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "withRuntimeConfig", "tail" : "(runtimeConfig: => RuntimeConfig): ZManaged[Any, Nothing, Unit]", "member" : "zio.ZManaged.withRuntimeConfig", "link" : "zio\/ZManaged$.html#withRuntimeConfig(runtimeConfig:=>zio.RuntimeConfig):zio.ZManaged[Any,Nothing,Unit]", "kind" : "def"}, {"label" : "withChildren", "tail" : "(get: (UIO[Chunk[Fiber.Runtime[Any, Any]]]) => ZManaged[R, E, A]): ZManaged[R, E, A]", "member" : "zio.ZManaged.withChildren", "link" : "zio\/ZManaged$.html#withChildren[R,E,A](get:zio.UIO[zio.Chunk[zio.Fiber.Runtime[Any,Any]]]=>zio.ZManaged[R,E,A]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "whenManaged", "tail" : "(b: => ZManaged[R, E, Boolean]): WhenManaged[R, E]", "member" : "zio.ZManaged.whenManaged", "link" : "zio\/ZManaged$.html#whenManaged[R,E](b:=>zio.ZManaged[R,E,Boolean]):zio.ZManaged.WhenManaged[R,E]", "kind" : "def"}, {"label" : "whenM", "tail" : "(b: => ZManaged[R, E, Boolean]): WhenManaged[R, E]", "member" : "zio.ZManaged.whenM", "link" : "zio\/ZManaged$.html#whenM[R,E](b:=>zio.ZManaged[R,E,Boolean]):zio.ZManaged.WhenManaged[R,E]", "kind" : "def"}, {"label" : "whenCaseManaged", "tail" : "(a: => ZManaged[R, E, A])(pf: PartialFunction[A, ZManaged[R, E, B]]): ZManaged[R, E, Option[B]]", "member" : "zio.ZManaged.whenCaseManaged", "link" : "zio\/ZManaged$.html#whenCaseManaged[R,E,A,B](a:=>zio.ZManaged[R,E,A])(pf:PartialFunction[A,zio.ZManaged[R,E,B]]):zio.ZManaged[R,E,Option[B]]", "kind" : "def"}, {"label" : "whenCaseM", "tail" : "(a: => ZManaged[R, E, A])(pf: PartialFunction[A, ZManaged[R, E, B]]): ZManaged[R, E, Option[B]]", "member" : "zio.ZManaged.whenCaseM", "link" : "zio\/ZManaged$.html#whenCaseM[R,E,A,B](a:=>zio.ZManaged[R,E,A])(pf:PartialFunction[A,zio.ZManaged[R,E,B]]):zio.ZManaged[R,E,Option[B]]", "kind" : "def"}, {"label" : "whenCase", "tail" : "(a: => A)(pf: PartialFunction[A, ZManaged[R, E, B]]): ZManaged[R, E, Option[B]]", "member" : "zio.ZManaged.whenCase", "link" : "zio\/ZManaged$.html#whenCase[R,E,A,B](a:=>A)(pf:PartialFunction[A,zio.ZManaged[R,E,B]]):zio.ZManaged[R,E,Option[B]]", "kind" : "def"}, {"label" : "when", "tail" : "(b: => Boolean)(zManaged: => ZManaged[R, E, A]): ZManaged[R, E, Option[A]]", "member" : "zio.ZManaged.when", "link" : "zio\/ZManaged$.html#when[R,E,A](b:=>Boolean)(zManaged:=>zio.ZManaged[R,E,A]):zio.ZManaged[R,E,Option[A]]", "kind" : "def"}, {"label" : "unwrap", "tail" : "(fa: => ZIO[R, E, ZManaged[R, E, A]]): ZManaged[R, E, A]", "member" : "zio.ZManaged.unwrap", "link" : "zio\/ZManaged$.html#unwrap[R,E,A](fa:=>zio.ZIO[R,E,zio.ZManaged[R,E,A]]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "unsandbox", "tail" : "(v: => ZManaged[R, Cause[E], A]): ZManaged[R, E, A]", "member" : "zio.ZManaged.unsandbox", "link" : "zio\/ZManaged$.html#unsandbox[R,E,A](v:=>zio.ZManaged[R,zio.Cause[E],A]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "unlessManaged", "tail" : "(b: => ZManaged[R, E, Boolean]): UnlessManaged[R, E]", "member" : "zio.ZManaged.unlessManaged", "link" : "zio\/ZManaged$.html#unlessManaged[R,E](b:=>zio.ZManaged[R,E,Boolean]):zio.ZManaged.UnlessManaged[R,E]", "kind" : "def"}, {"label" : "unlessM", "tail" : "(b: => ZManaged[R, E, Boolean]): UnlessManaged[R, E]", "member" : "zio.ZManaged.unlessM", "link" : "zio\/ZManaged$.html#unlessM[R,E](b:=>zio.ZManaged[R,E,Boolean]):zio.ZManaged.UnlessManaged[R,E]", "kind" : "def"}, {"label" : "unless", "tail" : "(b: => Boolean)(zManaged: => ZManaged[R, E, A]): ZManaged[R, E, Option[A]]", "member" : "zio.ZManaged.unless", "link" : "zio\/ZManaged$.html#unless[R,E,A](b:=>Boolean)(zManaged:=>zio.ZManaged[R,E,A]):zio.ZManaged[R,E,Option[A]]", "kind" : "def"}, {"label" : "unit", "tail" : ": ZManaged[Any, Nothing, Unit]", "member" : "zio.ZManaged.unit", "link" : "zio\/ZManaged$.html#unit:zio.ZManaged[Any,Nothing,Unit]", "kind" : "lazy val"}, {"label" : "switchable", "tail" : "(): ZManaged[R, Nothing, (ZManaged[R, E, A]) => ZIO[R, E, A]]", "member" : "zio.ZManaged.switchable", "link" : "zio\/ZManaged$.html#switchable[R,E,A]:zio.ZManaged[R,Nothing,zio.ZManaged[R,E,A]=>zio.ZIO[R,E,A]]", "kind" : "def"}, {"label" : "suspend", "tail" : "(zManaged: => ZManaged[R, E, A]): ZManaged[R, E, A]", "member" : "zio.ZManaged.suspend", "link" : "zio\/ZManaged$.html#suspend[R,E,A](zManaged:=>zio.ZManaged[R,E,A]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "succeed", "tail" : "(r: => A): ZManaged[Any, Nothing, A]", "member" : "zio.ZManaged.succeed", "link" : "zio\/ZManaged$.html#succeed[A](r:=>A):zio.ZManaged[Any,Nothing,A]", "kind" : "def"}, {"label" : "some", "tail" : "(a: => A): UManaged[Option[A]]", "member" : "zio.ZManaged.some", "link" : "zio\/ZManaged$.html#some[A](a:=>A):zio.UManaged[Option[A]]", "kind" : "def"}, {"label" : "serviceWithManaged", "tail" : "(): ServiceWithManagedPartiallyApplied[Service]", "member" : "zio.ZManaged.serviceWithManaged", "link" : "zio\/ZManaged$.html#serviceWithManaged[Service]:zio.ZManaged.ServiceWithManagedPartiallyApplied[Service]", "kind" : "def"}, {"label" : "serviceWith", "tail" : "(): ServiceWithPartiallyApplied[Service]", "member" : "zio.ZManaged.serviceWith", "link" : "zio\/ZManaged$.html#serviceWith[Service]:zio.ZManaged.ServiceWithPartiallyApplied[Service]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D]): ZManaged[Has[A] with Has[B] with Has[C] with Has[D], Nothing, (A, B, C, D)]", "member" : "zio.ZManaged.services", "link" : "zio\/ZManaged$.html#services[A,B,C,D](implicitevidence$10:zio.Tag[A],implicitevidence$11:zio.Tag[B],implicitevidence$12:zio.Tag[C],implicitevidence$13:zio.Tag[D]):zio.ZManaged[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D],Nothing,(A,B,C,D)]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C]): ZManaged[Has[A] with Has[B] with Has[C], Nothing, (A, B, C)]", "member" : "zio.ZManaged.services", "link" : "zio\/ZManaged$.html#services[A,B,C](implicitevidence$7:zio.Tag[A],implicitevidence$8:zio.Tag[B],implicitevidence$9:zio.Tag[C]):zio.ZManaged[zio.Has[A]withzio.Has[B]withzio.Has[C],Nothing,(A,B,C)]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B]): ZManaged[Has[A] with Has[B], Nothing, (A, B)]", "member" : "zio.ZManaged.services", "link" : "zio\/ZManaged$.html#services[A,B](implicitevidence$5:zio.Tag[A],implicitevidence$6:zio.Tag[B]):zio.ZManaged[zio.Has[A]withzio.Has[B],Nothing,(A,B)]", "kind" : "def"}, {"label" : "serviceAt", "tail" : "(): ServiceAtPartiallyApplied[Service]", "member" : "zio.ZManaged.serviceAt", "link" : "zio\/ZManaged$.html#serviceAt[Service]:zio.ZManaged.ServiceAtPartiallyApplied[Service]", "kind" : "def"}, {"label" : "service", "tail" : "(arg0: zio.Tag[A]): ZManaged[Has[A], Nothing, A]", "member" : "zio.ZManaged.service", "link" : "zio\/ZManaged$.html#service[A](implicitevidence$4:zio.Tag[A]):zio.ZManaged[zio.Has[A],Nothing,A]", "kind" : "def"}, {"label" : "scope", "tail" : ": Managed[Nothing, Scope]", "member" : "zio.ZManaged.scope", "link" : "zio\/ZManaged$.html#scope:zio.Managed[Nothing,zio.ZManaged.Scope]", "kind" : "lazy val"}, {"label" : "Scope", "tail" : "", "member" : "zio.ZManaged.Scope", "link" : "zio\/ZManaged$.html#ScopeextendsAnyRef", "kind" : "abstract class"}, {"label" : "shift", "tail" : "(executor: => Executor): ZManaged[Any, Nothing, Unit]", "member" : "zio.ZManaged.shift", "link" : "zio\/ZManaged$.html#shift(executor:=>zio.Executor):zio.ZManaged[Any,Nothing,Unit]", "kind" : "def"}, {"label" : "sandbox", "tail" : "(v: ZManaged[R, E, A]): ZManaged[R, Cause[E], A]", "member" : "zio.ZManaged.sandbox", "link" : "zio\/ZManaged$.html#sandbox[R,E,A](v:zio.ZManaged[R,E,A]):zio.ZManaged[R,zio.Cause[E],A]", "kind" : "def"}, {"label" : "runtime", "tail" : "(): ZManaged[R, Nothing, Runtime[R]]", "member" : "zio.ZManaged.runtime", "link" : "zio\/ZManaged$.html#runtime[R]:zio.ZManaged[R,Nothing,zio.Runtime[R]]", "kind" : "def"}, {"label" : "releaseMap", "tail" : ": ZManaged[Any, Nothing, ReleaseMap]", "member" : "zio.ZManaged.releaseMap", "link" : "zio\/ZManaged$.html#releaseMap:zio.ZManaged[Any,Nothing,zio.ZManaged.ReleaseMap]", "kind" : "lazy val"}, {"label" : "reserve", "tail" : "(reservation: => Reservation[R, E, A]): ZManaged[R, E, A]", "member" : "zio.ZManaged.reserve", "link" : "zio\/ZManaged$.html#reserve[R,E,A](reservation:=>zio.Reservation[R,E,A]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "require", "tail" : "(error: => E): (ZManaged[R, E, Option[A]]) => ZManaged[R, E, A]", "member" : "zio.ZManaged.require", "link" : "zio\/ZManaged$.html#require[R,E,A](error:=>E):zio.ZManaged[R,E,Option[A]]=>zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "reduceAllParN", "tail" : "(n0: => Int)(a: => ZManaged[R, E, A], as: => Iterable[ZManaged[R, E, A]])(f: (A, A) => A): ZManaged[R, E, A]", "member" : "zio.ZManaged.reduceAllParN", "link" : "zio\/ZManaged$.html#reduceAllParN[R,E,A](n0:=>Int)(a:=>zio.ZManaged[R,E,A],as:=>Iterable[zio.ZManaged[R,E,A]])(f:(A,A)=>A):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "reduceAllPar", "tail" : "(a: => ZManaged[R, E, A], as: => Iterable[ZManaged[R, E, A]])(f: (A, A) => A): ZManaged[R, E, A]", "member" : "zio.ZManaged.reduceAllPar", "link" : "zio\/ZManaged$.html#reduceAllPar[R,E,A](a:=>zio.ZManaged[R,E,A],as:=>Iterable[zio.ZManaged[R,E,A]])(f:(A,A)=>A):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "reduceAll", "tail" : "(a: => ZManaged[R, E, A], as: => Iterable[ZManaged[R, E, A]])(f: (A, A) => A): ZManaged[R, E, A]", "member" : "zio.ZManaged.reduceAll", "link" : "zio\/ZManaged$.html#reduceAll[R,E,A](a:=>zio.ZManaged[R,E,A],as:=>Iterable[zio.ZManaged[R,E,A]])(f:(A,A)=>A):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "preallocationScope", "tail" : ": Managed[Nothing, PreallocationScope]", "member" : "zio.ZManaged.preallocationScope", "link" : "zio\/ZManaged$.html#preallocationScope:zio.Managed[Nothing,zio.ZManaged.PreallocationScope]", "kind" : "lazy val"}, {"label" : "PreallocationScope", "tail" : "", "member" : "zio.ZManaged.PreallocationScope", "link" : "zio\/ZManaged$.html#PreallocationScopeextendsAnyRef", "kind" : "abstract class"}, {"label" : "onExecutor", "tail" : "(executor: => Executor): ZManaged[Any, Nothing, Unit]", "member" : "zio.ZManaged.onExecutor", "link" : "zio\/ZManaged$.html#onExecutor(executor:=>zio.Executor):zio.ZManaged[Any,Nothing,Unit]", "kind" : "def"}, {"label" : "none", "tail" : ": Managed[Nothing, Option[Nothing]]", "member" : "zio.ZManaged.none", "link" : "zio\/ZManaged$.html#none:zio.Managed[Nothing,Option[Nothing]]", "kind" : "val"}, {"label" : "never", "tail" : ": ZManaged[Any, Nothing, Nothing]", "member" : "zio.ZManaged.never", "link" : "zio\/ZManaged$.html#never:zio.ZManaged[Any,Nothing,Nothing]", "kind" : "lazy val"}, {"label" : "mergeAllParN", "tail" : "(n0: => Int)(in: => Iterable[ZManaged[R, E, A]])(zero: => B)(f: (B, A) => B): ZManaged[R, E, B]", "member" : "zio.ZManaged.mergeAllParN", "link" : "zio\/ZManaged$.html#mergeAllParN[R,E,A,B](n0:=>Int)(in:=>Iterable[zio.ZManaged[R,E,A]])(zero:=>B)(f:(B,A)=>B):zio.ZManaged[R,E,B]", "kind" : "def"}, {"label" : "mergeAllPar", "tail" : "(in: => Iterable[ZManaged[R, E, A]])(zero: => B)(f: (B, A) => B): ZManaged[R, E, B]", "member" : "zio.ZManaged.mergeAllPar", "link" : "zio\/ZManaged$.html#mergeAllPar[R,E,A,B](in:=>Iterable[zio.ZManaged[R,E,A]])(zero:=>B)(f:(B,A)=>B):zio.ZManaged[R,E,B]", "kind" : "def"}, {"label" : "mergeAll", "tail" : "(in: => Iterable[ZManaged[R, E, A]])(zero: => B)(f: (B, A) => B): ZManaged[R, E, B]", "member" : "zio.ZManaged.mergeAll", "link" : "zio\/ZManaged$.html#mergeAll[R,E,A,B](in:=>Iterable[zio.ZManaged[R,E,A]])(zero:=>B)(f:(B,A)=>B):zio.ZManaged[R,E,B]", "kind" : "def"}, {"label" : "memoize", "tail" : "(f: (A) => ZManaged[R, E, B]): ZManaged[Any, Nothing, (A) => ZIO[R, E, B]]", "member" : "zio.ZManaged.memoize", "link" : "zio\/ZManaged$.html#memoize[R,E,A,B](f:A=>zio.ZManaged[R,E,B]):zio.ZManaged[Any,Nothing,A=>zio.ZIO[R,E,B]]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zManaged1: => ZManaged[R, E, A], zManaged2: => ZManaged[R, E, B], zManaged3: => ZManaged[R, E, C], zManaged4: => ZManaged[R, E, D])(f: (A, B, C, D) => F): ZManaged[R, E, F]", "member" : "zio.ZManaged.mapParN", "link" : "zio\/ZManaged$.html#mapParN[R,E,A,B,C,D,F](zManaged1:=>zio.ZManaged[R,E,A],zManaged2:=>zio.ZManaged[R,E,B],zManaged3:=>zio.ZManaged[R,E,C],zManaged4:=>zio.ZManaged[R,E,D])(f:(A,B,C,D)=>F):zio.ZManaged[R,E,F]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zManaged1: => ZManaged[R, E, A], zManaged2: => ZManaged[R, E, B], zManaged3: => ZManaged[R, E, C])(f: (A, B, C) => D): ZManaged[R, E, D]", "member" : "zio.ZManaged.mapParN", "link" : "zio\/ZManaged$.html#mapParN[R,E,A,B,C,D](zManaged1:=>zio.ZManaged[R,E,A],zManaged2:=>zio.ZManaged[R,E,B],zManaged3:=>zio.ZManaged[R,E,C])(f:(A,B,C)=>D):zio.ZManaged[R,E,D]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zManaged1: => ZManaged[R, E, A], zManaged2: => ZManaged[R, E, B])(f: (A, B) => C): ZManaged[R, E, C]", "member" : "zio.ZManaged.mapParN", "link" : "zio\/ZManaged$.html#mapParN[R,E,A,B,C](zManaged1:=>zio.ZManaged[R,E,A],zManaged2:=>zio.ZManaged[R,E,B])(f:(A,B)=>C):zio.ZManaged[R,E,C]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zManaged1: => ZManaged[R, E, A], zManaged2: => ZManaged[R, E, B], zManaged3: => ZManaged[R, E, C], zManaged4: => ZManaged[R, E, D])(f: (A, B, C, D) => F): ZManaged[R, E, F]", "member" : "zio.ZManaged.mapN", "link" : "zio\/ZManaged$.html#mapN[R,E,A,B,C,D,F](zManaged1:=>zio.ZManaged[R,E,A],zManaged2:=>zio.ZManaged[R,E,B],zManaged3:=>zio.ZManaged[R,E,C],zManaged4:=>zio.ZManaged[R,E,D])(f:(A,B,C,D)=>F):zio.ZManaged[R,E,F]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zManaged1: => ZManaged[R, E, A], zManaged2: => ZManaged[R, E, B], zManaged3: => ZManaged[R, E, C])(f: (A, B, C) => D): ZManaged[R, E, D]", "member" : "zio.ZManaged.mapN", "link" : "zio\/ZManaged$.html#mapN[R,E,A,B,C,D](zManaged1:=>zio.ZManaged[R,E,A],zManaged2:=>zio.ZManaged[R,E,B],zManaged3:=>zio.ZManaged[R,E,C])(f:(A,B,C)=>D):zio.ZManaged[R,E,D]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zManaged1: => ZManaged[R, E, A], zManaged2: => ZManaged[R, E, B])(f: (A, B) => C): ZManaged[R, E, C]", "member" : "zio.ZManaged.mapN", "link" : "zio\/ZManaged$.html#mapN[R,E,A,B,C](zManaged1:=>zio.ZManaged[R,E,A],zManaged2:=>zio.ZManaged[R,E,B])(f:(A,B)=>C):zio.ZManaged[R,E,C]", "kind" : "def"}, {"label" : "makeReserve", "tail" : "(reservation: => ZIO[R, E, Reservation[R, E, A]]): ZManaged[R, E, A]", "member" : "zio.ZManaged.makeReserve", "link" : "zio\/ZManaged$.html#makeReserve[R,E,A](reservation:=>zio.ZIO[R,E,zio.Reservation[R,E,A]]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "makeInterruptible_", "tail" : "(acquire: => ZIO[R, E, A])(release: => ZIO[R1, Nothing, Any]): ZManaged[R1, E, A]", "member" : "zio.ZManaged.makeInterruptible_", "link" : "zio\/ZManaged$.html#makeInterruptible_[R,R1<:R,E,A](acquire:=>zio.ZIO[R,E,A])(release:=>zio.ZIO[R1,Nothing,Any]):zio.ZManaged[R1,E,A]", "kind" : "def"}, {"label" : "makeInterruptible", "tail" : "(acquire: => ZIO[R, E, A])(release: (A) => URIO[R, Any]): ZManaged[R, E, A]", "member" : "zio.ZManaged.makeInterruptible", "link" : "zio\/ZManaged$.html#makeInterruptible[R,R1<:R,E,A](acquire:=>zio.ZIO[R,E,A])(release:A=>zio.URIO[R,Any]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "makeExit_", "tail" : "(acquire: => ZIO[R, E, A])(release: (Exit[Any, Any]) => ZIO[R1, Nothing, Any]): ZManaged[R1, E, A]", "member" : "zio.ZManaged.makeExit_", "link" : "zio\/ZManaged$.html#makeExit_[R,R1<:R,E,A](acquire:=>zio.ZIO[R,E,A])(release:zio.Exit[Any,Any]=>zio.ZIO[R1,Nothing,Any]):zio.ZManaged[R1,E,A]", "kind" : "def"}, {"label" : "makeExit", "tail" : "(acquire: ZIO[R, E, A])(release: (A, Exit[Any, Any]) => ZIO[R1, Nothing, Any]): ZManaged[R1, E, A]", "member" : "zio.ZManaged.makeExit", "link" : "zio\/ZManaged$.html#makeExit[R,R1<:R,E,A](acquire:zio.ZIO[R,E,A])(release:(A,zio.Exit[Any,Any])=>zio.ZIO[R1,Nothing,Any]):zio.ZManaged[R1,E,A]", "kind" : "def"}, {"label" : "makeEffectTotal_", "tail" : "(acquire: => A)(release: => Any): ZManaged[Any, Nothing, A]", "member" : "zio.ZManaged.makeEffectTotal_", "link" : "zio\/ZManaged$.html#makeEffectTotal_[A](acquire:=>A)(release:=>Any):zio.ZManaged[Any,Nothing,A]", "kind" : "def"}, {"label" : "makeEffectTotal", "tail" : "(acquire: => A)(release: (A) => Any): ZManaged[Any, Nothing, A]", "member" : "zio.ZManaged.makeEffectTotal", "link" : "zio\/ZManaged$.html#makeEffectTotal[A](acquire:=>A)(release:A=>Any):zio.ZManaged[Any,Nothing,A]", "kind" : "def"}, {"label" : "makeEffect_", "tail" : "(acquire: => A)(release: => Any): ZManaged[Any, Throwable, A]", "member" : "zio.ZManaged.makeEffect_", "link" : "zio\/ZManaged$.html#makeEffect_[A](acquire:=>A)(release:=>Any):zio.ZManaged[Any,Throwable,A]", "kind" : "def"}, {"label" : "makeEffect", "tail" : "(acquire: => A)(release: (A) => Any): ZManaged[Any, Throwable, A]", "member" : "zio.ZManaged.makeEffect", "link" : "zio\/ZManaged$.html#makeEffect[A](acquire:=>A)(release:A=>Any):zio.ZManaged[Any,Throwable,A]", "kind" : "def"}, {"label" : "make_", "tail" : "(acquire: => ZIO[R, E, A])(release: => ZIO[R1, Nothing, Any]): ZManaged[R1, E, A]", "member" : "zio.ZManaged.make_", "link" : "zio\/ZManaged$.html#make_[R,R1<:R,E,A](acquire:=>zio.ZIO[R,E,A])(release:=>zio.ZIO[R1,Nothing,Any]):zio.ZManaged[R1,E,A]", "kind" : "def"}, {"label" : "make", "tail" : "(acquire: => ZIO[R, E, A])(release: (A) => ZIO[R1, Nothing, Any]): ZManaged[R1, E, A]", "member" : "zio.ZManaged.make", "link" : "zio\/ZManaged$.html#make[R,R1<:R,E,A](acquire:=>zio.ZIO[R,E,A])(release:A=>zio.ZIO[R1,Nothing,Any]):zio.ZManaged[R1,E,A]", "kind" : "def"}, {"label" : "loopDiscard", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => ZManaged[R, E, Any]): ZManaged[R, E, Unit]", "member" : "zio.ZManaged.loopDiscard", "link" : "zio\/ZManaged$.html#loopDiscard[R,E,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.ZManaged[R,E,Any]):zio.ZManaged[R,E,Unit]", "kind" : "def"}, {"label" : "loop_", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => ZManaged[R, E, Any]): ZManaged[R, E, Unit]", "member" : "zio.ZManaged.loop_", "link" : "zio\/ZManaged$.html#loop_[R,E,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.ZManaged[R,E,Any]):zio.ZManaged[R,E,Unit]", "kind" : "def"}, {"label" : "loop", "tail" : "(initial: => S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => ZManaged[R, E, A]): ZManaged[R, E, List[A]]", "member" : "zio.ZManaged.loop", "link" : "zio\/ZManaged$.html#loop[R,E,A,S](initial:=>S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.ZManaged[R,E,A]):zio.ZManaged[R,E,List[A]]", "kind" : "def"}, {"label" : "lock", "tail" : "(executor: => Executor): ZManaged[Any, Nothing, Unit]", "member" : "zio.ZManaged.lock", "link" : "zio\/ZManaged$.html#lock(executor:=>zio.Executor):zio.ZManaged[Any,Nothing,Unit]", "kind" : "def"}, {"label" : "iterate", "tail" : "(initial: => S)(cont: (S) => Boolean)(body: (S) => ZManaged[R, E, S]): ZManaged[R, E, S]", "member" : "zio.ZManaged.iterate", "link" : "zio\/ZManaged$.html#iterate[R,E,S](initial:=>S)(cont:S=>Boolean)(body:S=>zio.ZManaged[R,E,S]):zio.ZManaged[R,E,S]", "kind" : "def"}, {"label" : "interruptAs", "tail" : "(fiberId: => FiberId): ZManaged[Any, Nothing, Nothing]", "member" : "zio.ZManaged.interruptAs", "link" : "zio\/ZManaged$.html#interruptAs(fiberId:=>zio.FiberId):zio.ZManaged[Any,Nothing,Nothing]", "kind" : "def"}, {"label" : "interrupt", "tail" : ": ZManaged[Any, Nothing, Nothing]", "member" : "zio.ZManaged.interrupt", "link" : "zio\/ZManaged$.html#interrupt:zio.ZManaged[Any,Nothing,Nothing]", "kind" : "lazy val"}, {"label" : "ifManaged", "tail" : "(b: => ZManaged[R, E, Boolean]): IfManaged[R, E]", "member" : "zio.ZManaged.ifManaged", "link" : "zio\/ZManaged$.html#ifManaged[R,E](b:=>zio.ZManaged[R,E,Boolean]):zio.ZManaged.IfManaged[R,E]", "kind" : "def"}, {"label" : "ifM", "tail" : "(b: => ZManaged[R, E, Boolean]): IfManaged[R, E]", "member" : "zio.ZManaged.ifM", "link" : "zio\/ZManaged$.html#ifM[R,E](b:=>zio.ZManaged[R,E,Boolean]):zio.ZManaged.IfManaged[R,E]", "kind" : "def"}, {"label" : "halt", "tail" : "(cause: => Cause[E]): ZManaged[Any, E, Nothing]", "member" : "zio.ZManaged.halt", "link" : "zio\/ZManaged$.html#halt[E](cause:=>zio.Cause[E]):zio.ZManaged[Any,E,Nothing]", "kind" : "def"}, {"label" : "fromZIOUninterruptible", "tail" : "(fa: => ZIO[R, E, A]): ZManaged[R, E, A]", "member" : "zio.ZManaged.fromZIOUninterruptible", "link" : "zio\/ZManaged$.html#fromZIOUninterruptible[R,E,A](fa:=>zio.ZIO[R,E,A]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "fromZIO", "tail" : "(fa: => ZIO[R, E, A]): ZManaged[R, E, A]", "member" : "zio.ZManaged.fromZIO", "link" : "zio\/ZManaged$.html#fromZIO[R,E,A](fa:=>zio.ZIO[R,E,A]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(value: => Try[A]): TaskManaged[A]", "member" : "zio.ZManaged.fromTry", "link" : "zio\/ZManaged$.html#fromTry[A](value:=>scala.util.Try[A]):zio.TaskManaged[A]", "kind" : "def"}, {"label" : "fromReservationZIO", "tail" : "(reservation: => ZIO[R, E, Reservation[R, E, A]]): ZManaged[R, E, A]", "member" : "zio.ZManaged.fromReservationZIO", "link" : "zio\/ZManaged$.html#fromReservationZIO[R,E,A](reservation:=>zio.ZIO[R,E,zio.Reservation[R,E,A]]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "fromReservation", "tail" : "(reservation: => Reservation[R, E, A]): ZManaged[R, E, A]", "member" : "zio.ZManaged.fromReservation", "link" : "zio\/ZManaged$.html#fromReservation[R,E,A](reservation:=>zio.Reservation[R,E,A]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(v: => Option[A]): ZManaged[Any, Option[Nothing], A]", "member" : "zio.ZManaged.fromOption", "link" : "zio\/ZManaged$.html#fromOption[A](v:=>Option[A]):zio.ZManaged[Any,Option[Nothing],A]", "kind" : "def"}, {"label" : "fromFunctionM", "tail" : "(f: (R) => ZManaged[Any, E, A]): ZManaged[R, E, A]", "member" : "zio.ZManaged.fromFunctionM", "link" : "zio\/ZManaged$.html#fromFunctionM[R,E,A](f:R=>zio.ZManaged[Any,E,A]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "fromFunction", "tail" : "(f: (R) => A): ZManaged[R, Nothing, A]", "member" : "zio.ZManaged.fromFunction", "link" : "zio\/ZManaged$.html#fromFunction[R,A](f:R=>A):zio.ZManaged[R,Nothing,A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(v: => Either[E, A]): ZManaged[Any, E, A]", "member" : "zio.ZManaged.fromEither", "link" : "zio\/ZManaged$.html#fromEither[E,A](v:=>Either[E,A]):zio.ZManaged[Any,E,A]", "kind" : "def"}, {"label" : "fromEffectUninterruptible", "tail" : "(fa: => ZIO[R, E, A]): ZManaged[R, E, A]", "member" : "zio.ZManaged.fromEffectUninterruptible", "link" : "zio\/ZManaged$.html#fromEffectUninterruptible[R,E,A](fa:=>zio.ZIO[R,E,A]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(fa: => ZIO[R, E, A]): ZManaged[R, E, A]", "member" : "zio.ZManaged.fromEffect", "link" : "zio\/ZManaged$.html#fromEffect[R,E,A](fa:=>zio.ZIO[R,E,A]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "fromAutoCloseable", "tail" : "(fa: => ZIO[R, E, A]): ZManaged[R, E, A]", "member" : "zio.ZManaged.fromAutoCloseable", "link" : "zio\/ZManaged$.html#fromAutoCloseable[R,E,A<:AutoCloseable](fa:=>zio.ZIO[R,E,A]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "from", "tail" : "(input: => Input)(constructor: ZManagedConstructor[Input]): Out", "member" : "zio.ZManaged.from", "link" : "zio\/ZManaged$.html#from[Input](input:=>Input)(implicitconstructor:zio.ZManaged.ZManagedConstructor[Input]):constructor.Out", "kind" : "def"}, {"label" : "foreachParNDiscard", "tail" : "(n0: => Int)(as: => Iterable[A])(f: (A) => ZManaged[R, E, Any]): ZManaged[R, E, Unit]", "member" : "zio.ZManaged.foreachParNDiscard", "link" : "zio\/ZManaged$.html#foreachParNDiscard[R,E,A](n0:=>Int)(as:=>Iterable[A])(f:A=>zio.ZManaged[R,E,Any]):zio.ZManaged[R,E,Unit]", "kind" : "def"}, {"label" : "foreachParN_", "tail" : "(n: => Int)(as: => Iterable[A])(f: (A) => ZManaged[R, E, Any]): ZManaged[R, E, Unit]", "member" : "zio.ZManaged.foreachParN_", "link" : "zio\/ZManaged$.html#foreachParN_[R,E,A](n:=>Int)(as:=>Iterable[A])(f:A=>zio.ZManaged[R,E,Any]):zio.ZManaged[R,E,Unit]", "kind" : "def"}, {"label" : "foreachParDiscard", "tail" : "(as: => Iterable[A])(f: (A) => ZManaged[R, E, Any]): ZManaged[R, E, Unit]", "member" : "zio.ZManaged.foreachParDiscard", "link" : "zio\/ZManaged$.html#foreachParDiscard[R,E,A](as:=>Iterable[A])(f:A=>zio.ZManaged[R,E,Any]):zio.ZManaged[R,E,Unit]", "kind" : "def"}, {"label" : "foreachPar_", "tail" : "(as: => Iterable[A])(f: (A) => ZManaged[R, E, Any]): ZManaged[R, E, Unit]", "member" : "zio.ZManaged.foreachPar_", "link" : "zio\/ZManaged$.html#foreachPar_[R,E,A](as:=>Iterable[A])(f:A=>zio.ZManaged[R,E,Any]):zio.ZManaged[R,E,Unit]", "kind" : "def"}, {"label" : "foreachDiscard", "tail" : "(as: => Iterable[A])(f: (A) => ZManaged[R, E, Any]): ZManaged[R, E, Unit]", "member" : "zio.ZManaged.foreachDiscard", "link" : "zio\/ZManaged$.html#foreachDiscard[R,E,A](as:=>Iterable[A])(f:A=>zio.ZManaged[R,E,Any]):zio.ZManaged[R,E,Unit]", "kind" : "def"}, {"label" : "foreach_", "tail" : "(as: => Iterable[A])(f: (A) => ZManaged[R, E, Any]): ZManaged[R, E, Unit]", "member" : "zio.ZManaged.foreach_", "link" : "zio\/ZManaged$.html#foreach_[R,E,A](as:=>Iterable[A])(f:A=>zio.ZManaged[R,E,Any]):zio.ZManaged[R,E,Unit]", "kind" : "def"}, {"label" : "foreachParN", "tail" : "(n0: => Int)(as: Collection[A1])(f: (A1) => ZManaged[R, E, A2])(bf: zio.BuildFrom[Collection[A1], A2, Collection[A2]]): ZManaged[R, E, Collection[A2]]", "member" : "zio.ZManaged.foreachParN", "link" : "zio\/ZManaged$.html#foreachParN[R,E,A1,A2,Collection[+Element]<:Iterable[Element]](n0:=>Int)(as:Collection[A1])(f:A1=>zio.ZManaged[R,E,A2])(implicitbf:zio.BuildFrom[Collection[A1],A2,Collection[A2]]):zio.ZManaged[R,E,Collection[A2]]", "kind" : "def"}, {"label" : "foreachPar", "tail" : "(as: Collection[A1])(f: (A1) => ZManaged[R, E, A2])(bf: zio.BuildFrom[Collection[A1], A2, Collection[A2]]): ZManaged[R, E, Collection[A2]]", "member" : "zio.ZManaged.foreachPar", "link" : "zio\/ZManaged$.html#foreachPar[R,E,A1,A2,Collection[+Element]<:Iterable[Element]](as:Collection[A1])(f:A1=>zio.ZManaged[R,E,A2])(implicitbf:zio.BuildFrom[Collection[A1],A2,Collection[A2]]):zio.ZManaged[R,E,Collection[A2]]", "kind" : "def"}, {"label" : "foreachExec", "tail" : "(as: Collection[A])(exec: => ExecutionStrategy)(f: (A) => ZManaged[R, E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): ZManaged[R, E, Collection[B]]", "member" : "zio.ZManaged.foreachExec", "link" : "zio\/ZManaged$.html#foreachExec[R,E,A,B,Collection[+Element]<:Iterable[Element]](as:Collection[A])(exec:=>zio.ExecutionStrategy)(f:A=>zio.ZManaged[R,E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.ZManaged[R,E,Collection[B]]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(in: Option[A1])(f: (A1) => ZManaged[R, E, A2]): ZManaged[R, E, Option[A2]]", "member" : "zio.ZManaged.foreach", "link" : "zio\/ZManaged$.html#foreach[R,E,A1,A2](in:Option[A1])(f:A1=>zio.ZManaged[R,E,A2]):zio.ZManaged[R,E,Option[A2]]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(in: Collection[A1])(f: (A1) => ZManaged[R, E, A2])(bf: zio.BuildFrom[Collection[A1], A2, Collection[A2]]): ZManaged[R, E, Collection[A2]]", "member" : "zio.ZManaged.foreach", "link" : "zio\/ZManaged$.html#foreach[R,E,A1,A2,Collection[+Element]<:Iterable[Element]](in:Collection[A1])(f:A1=>zio.ZManaged[R,E,A2])(implicitbf:zio.BuildFrom[Collection[A1],A2,Collection[A2]]):zio.ZManaged[R,E,Collection[A2]]", "kind" : "def"}, {"label" : "forall", "tail" : "(as: => Iterable[A])(f: (A) => ZManaged[R, E, Boolean]): ZManaged[R, E, Boolean]", "member" : "zio.ZManaged.forall", "link" : "zio\/ZManaged$.html#forall[R,E,A](as:=>Iterable[A])(f:A=>zio.ZManaged[R,E,Boolean]):zio.ZManaged[R,E,Boolean]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(in: => Iterable[A])(zero: => S)(f: (S, A) => ZManaged[R, E, S]): ZManaged[R, E, S]", "member" : "zio.ZManaged.foldLeft", "link" : "zio\/ZManaged$.html#foldLeft[R,E,S,A](in:=>Iterable[A])(zero:=>S)(f:(S,A)=>zio.ZManaged[R,E,S]):zio.ZManaged[R,E,S]", "kind" : "def"}, {"label" : "flattenZIO", "tail" : "(zManaged: => ZManaged[R, E, ZIO[R, E, A]]): ZManaged[R, E, A]", "member" : "zio.ZManaged.flattenZIO", "link" : "zio\/ZManaged$.html#flattenZIO[R,E,A](zManaged:=>zio.ZManaged[R,E,zio.ZIO[R,E,A]]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "flattenM", "tail" : "(zManaged: => ZManaged[R, E, ZIO[R, E, A]]): ZManaged[R, E, A]", "member" : "zio.ZManaged.flattenM", "link" : "zio\/ZManaged$.html#flattenM[R,E,A](zManaged:=>zio.ZManaged[R,E,zio.ZIO[R,E,A]]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "flatten", "tail" : "(zManaged: => ZManaged[R, E, ZManaged[R, E, A]]): ZManaged[R, E, A]", "member" : "zio.ZManaged.flatten", "link" : "zio\/ZManaged$.html#flatten[R,E,A](zManaged:=>zio.ZManaged[R,E,zio.ZManaged[R,E,A]]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "firstSuccessOf", "tail" : "(first: => ZManaged[R, E, A], rest: => Iterable[ZManaged[R, E, A]]): ZManaged[R, E, A]", "member" : "zio.ZManaged.firstSuccessOf", "link" : "zio\/ZManaged$.html#firstSuccessOf[R,E,A](first:=>zio.ZManaged[R,E,A],rest:=>Iterable[zio.ZManaged[R,E,A]]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "finalizerRef", "tail" : "(initial: => Finalizer): ZManaged[R, Nothing, Ref[Finalizer]]", "member" : "zio.ZManaged.finalizerRef", "link" : "zio\/ZManaged$.html#finalizerRef[R](initial:=>zio.ZManaged.Finalizer):zio.ZManaged[R,Nothing,zio.Ref[zio.ZManaged.Finalizer]]", "kind" : "def"}, {"label" : "finalizerExit", "tail" : "(f: (Exit[Any, Any]) => URIO[R, Any]): ZManaged[R, Nothing, Unit]", "member" : "zio.ZManaged.finalizerExit", "link" : "zio\/ZManaged$.html#finalizerExit[R](f:zio.Exit[Any,Any]=>zio.URIO[R,Any]):zio.ZManaged[R,Nothing,Unit]", "kind" : "def"}, {"label" : "finalizer", "tail" : "(f: => URIO[R, Any]): ZManaged[R, Nothing, Unit]", "member" : "zio.ZManaged.finalizer", "link" : "zio\/ZManaged$.html#finalizer[R](f:=>zio.URIO[R,Any]):zio.ZManaged[R,Nothing,Unit]", "kind" : "def"}, {"label" : "fiberId", "tail" : ": ZManaged[Any, Nothing, FiberId]", "member" : "zio.ZManaged.fiberId", "link" : "zio\/ZManaged$.html#fiberId:zio.ZManaged[Any,Nothing,zio.FiberId]", "kind" : "lazy val"}, {"label" : "failCause", "tail" : "(cause: => Cause[E]): ZManaged[Any, E, Nothing]", "member" : "zio.ZManaged.failCause", "link" : "zio\/ZManaged$.html#failCause[E](cause:=>zio.Cause[E]):zio.ZManaged[Any,E,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(error: => E): ZManaged[Any, E, Nothing]", "member" : "zio.ZManaged.fail", "link" : "zio\/ZManaged$.html#fail[E](error:=>E):zio.ZManaged[Any,E,Nothing]", "kind" : "def"}, {"label" : "exists", "tail" : "(as: => Iterable[A])(f: (A) => ZManaged[R, E, Boolean]): ZManaged[R, E, Boolean]", "member" : "zio.ZManaged.exists", "link" : "zio\/ZManaged$.html#exists[R,E,A](as:=>Iterable[A])(f:A=>zio.ZManaged[R,E,Boolean]):zio.ZManaged[R,E,Boolean]", "kind" : "def"}, {"label" : "environment", "tail" : "(): ZManaged[R, Nothing, R]", "member" : "zio.ZManaged.environment", "link" : "zio\/ZManaged$.html#environment[R]:zio.ZManaged[R,Nothing,R]", "kind" : "def"}, {"label" : "effectTotal", "tail" : "(r: => A): ZManaged[Any, Nothing, A]", "member" : "zio.ZManaged.effectTotal", "link" : "zio\/ZManaged$.html#effectTotal[A](r:=>A):zio.ZManaged[Any,Nothing,A]", "kind" : "def"}, {"label" : "effect", "tail" : "(r: => A): ZManaged[Any, Throwable, A]", "member" : "zio.ZManaged.effect", "link" : "zio\/ZManaged$.html#effect[A](r:=>A):zio.ZManaged[Any,Throwable,A]", "kind" : "def"}, {"label" : "done", "tail" : "(r: => Exit[E, A]): ZManaged[Any, E, A]", "member" : "zio.ZManaged.done", "link" : "zio\/ZManaged$.html#done[E,A](r:=>zio.Exit[E,A]):zio.ZManaged[Any,E,A]", "kind" : "def"}, {"label" : "dieMessage", "tail" : "(message: => String): ZManaged[Any, Nothing, Nothing]", "member" : "zio.ZManaged.dieMessage", "link" : "zio\/ZManaged$.html#dieMessage(message:=>String):zio.ZManaged[Any,Nothing,Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(t: => Throwable): ZManaged[Any, Nothing, Nothing]", "member" : "zio.ZManaged.die", "link" : "zio\/ZManaged$.html#die(t:=>Throwable):zio.ZManaged[Any,Nothing,Nothing]", "kind" : "def"}, {"label" : "cond", "tail" : "(predicate: => Boolean, result: => A, error: => E): Managed[E, A]", "member" : "zio.ZManaged.cond", "link" : "zio\/ZManaged$.html#cond[E,A](predicate:=>Boolean,result:=>A,error:=>E):zio.Managed[E,A]", "kind" : "def"}, {"label" : "collectParN", "tail" : "(n: => Int)(in: Collection[A])(f: (A) => ZManaged[R, Option[E], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): ZManaged[R, E, Collection[B]]", "member" : "zio.ZManaged.collectParN", "link" : "zio\/ZManaged$.html#collectParN[R,E,A,B,Collection[+Element]<:Iterable[Element]](n:=>Int)(in:Collection[A])(f:A=>zio.ZManaged[R,Option[E],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.ZManaged[R,E,Collection[B]]", "kind" : "def"}, {"label" : "collectPar", "tail" : "(in: Collection[A])(f: (A) => ZManaged[R, Option[E], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): ZManaged[R, E, Collection[B]]", "member" : "zio.ZManaged.collectPar", "link" : "zio\/ZManaged$.html#collectPar[R,E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.ZManaged[R,Option[E],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.ZManaged[R,E,Collection[B]]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(as: => Iterable[A])(f: (A) => ZManaged[R, E, Option[B]]): ZManaged[R, E, Option[B]]", "member" : "zio.ZManaged.collectFirst", "link" : "zio\/ZManaged$.html#collectFirst[R,E,A,B](as:=>Iterable[A])(f:A=>zio.ZManaged[R,E,Option[B]]):zio.ZManaged[R,E,Option[B]]", "kind" : "def"}, {"label" : "collectAllParNDiscard", "tail" : "(n: => Int)(as: => Iterable[ZManaged[R, E, A]]): ZManaged[R, E, Unit]", "member" : "zio.ZManaged.collectAllParNDiscard", "link" : "zio\/ZManaged$.html#collectAllParNDiscard[R,E,A](n:=>Int)(as:=>Iterable[zio.ZManaged[R,E,A]]):zio.ZManaged[R,E,Unit]", "kind" : "def"}, {"label" : "collectAllParN_", "tail" : "(n: => Int)(as: => Iterable[ZManaged[R, E, A]]): ZManaged[R, E, Unit]", "member" : "zio.ZManaged.collectAllParN_", "link" : "zio\/ZManaged$.html#collectAllParN_[R,E,A](n:=>Int)(as:=>Iterable[zio.ZManaged[R,E,A]]):zio.ZManaged[R,E,Unit]", "kind" : "def"}, {"label" : "collectAllParN", "tail" : "(n: => Int)(as: Collection[ZManaged[R, E, A]])(bf: zio.BuildFrom[Collection[ZManaged[R, E, A]], A, Collection[A]]): ZManaged[R, E, Collection[A]]", "member" : "zio.ZManaged.collectAllParN", "link" : "zio\/ZManaged$.html#collectAllParN[R,E,A,Collection[+Element]<:Iterable[Element]](n:=>Int)(as:Collection[zio.ZManaged[R,E,A]])(implicitbf:zio.BuildFrom[Collection[zio.ZManaged[R,E,A]],A,Collection[A]]):zio.ZManaged[R,E,Collection[A]]", "kind" : "def"}, {"label" : "collectAllParDiscard", "tail" : "(as: => Iterable[ZManaged[R, E, A]]): ZManaged[R, E, Unit]", "member" : "zio.ZManaged.collectAllParDiscard", "link" : "zio\/ZManaged$.html#collectAllParDiscard[R,E,A](as:=>Iterable[zio.ZManaged[R,E,A]]):zio.ZManaged[R,E,Unit]", "kind" : "def"}, {"label" : "collectAllPar_", "tail" : "(as: => Iterable[ZManaged[R, E, A]]): ZManaged[R, E, Unit]", "member" : "zio.ZManaged.collectAllPar_", "link" : "zio\/ZManaged$.html#collectAllPar_[R,E,A](as:=>Iterable[zio.ZManaged[R,E,A]]):zio.ZManaged[R,E,Unit]", "kind" : "def"}, {"label" : "collectAllPar", "tail" : "(as: Collection[ZManaged[R, E, A]])(bf: zio.BuildFrom[Collection[ZManaged[R, E, A]], A, Collection[A]]): ZManaged[R, E, Collection[A]]", "member" : "zio.ZManaged.collectAllPar", "link" : "zio\/ZManaged$.html#collectAllPar[R,E,A,Collection[+Element]<:Iterable[Element]](as:Collection[zio.ZManaged[R,E,A]])(implicitbf:zio.BuildFrom[Collection[zio.ZManaged[R,E,A]],A,Collection[A]]):zio.ZManaged[R,E,Collection[A]]", "kind" : "def"}, {"label" : "collectAllDiscard", "tail" : "(ms: => Iterable[ZManaged[R, E, A]]): ZManaged[R, E, Unit]", "member" : "zio.ZManaged.collectAllDiscard", "link" : "zio\/ZManaged$.html#collectAllDiscard[R,E,A](ms:=>Iterable[zio.ZManaged[R,E,A]]):zio.ZManaged[R,E,Unit]", "kind" : "def"}, {"label" : "collectAll_", "tail" : "(ms: => Iterable[ZManaged[R, E, A]]): ZManaged[R, E, Unit]", "member" : "zio.ZManaged.collectAll_", "link" : "zio\/ZManaged$.html#collectAll_[R,E,A](ms:=>Iterable[zio.ZManaged[R,E,A]]):zio.ZManaged[R,E,Unit]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(ms: Collection[ZManaged[R, E, A]])(bf: zio.BuildFrom[Collection[ZManaged[R, E, A]], A, Collection[A]]): ZManaged[R, E, Collection[A]]", "member" : "zio.ZManaged.collectAll", "link" : "zio\/ZManaged$.html#collectAll[R,E,A,Collection[+Element]<:Iterable[Element]](ms:Collection[zio.ZManaged[R,E,A]])(implicitbf:zio.BuildFrom[Collection[zio.ZManaged[R,E,A]],A,Collection[A]]):zio.ZManaged[R,E,Collection[A]]", "kind" : "def"}, {"label" : "collect", "tail" : "(in: Collection[A])(f: (A) => ZManaged[R, Option[E], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): ZManaged[R, E, Collection[B]]", "member" : "zio.ZManaged.collect", "link" : "zio\/ZManaged$.html#collect[R,E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.ZManaged[R,Option[E],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.ZManaged[R,E,Collection[B]]", "kind" : "def"}, {"label" : "attempt", "tail" : "(r: => A): ZManaged[Any, Throwable, A]", "member" : "zio.ZManaged.attempt", "link" : "zio\/ZManaged$.html#attempt[A](r:=>A):zio.ZManaged[Any,Throwable,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(run0: ZIO[(R, ReleaseMap), E, (Finalizer, A)]): ZManaged[R, E, A]", "member" : "zio.ZManaged.apply", "link" : "zio\/ZManaged$.html#apply[R,E,A](run0:zio.ZIO[(R,zio.ZManaged.ReleaseMap),E,(zio.ZManaged.Finalizer,A)]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: => ZIO[R, E, A])(release: (A) => ZIO[R1, Nothing, Any]): ZManaged[R1, E, A]", "member" : "zio.ZManaged.acquireReleaseWith", "link" : "zio\/ZManaged$.html#acquireReleaseWith[R,R1<:R,E,A](acquire:=>zio.ZIO[R,E,A])(release:A=>zio.ZIO[R1,Nothing,Any]):zio.ZManaged[R1,E,A]", "kind" : "def"}, {"label" : "acquireReleaseSucceedWith", "tail" : "(acquire: => A)(release: (A) => Any): ZManaged[Any, Nothing, A]", "member" : "zio.ZManaged.acquireReleaseSucceedWith", "link" : "zio\/ZManaged$.html#acquireReleaseSucceedWith[A](acquire:=>A)(release:A=>Any):zio.ZManaged[Any,Nothing,A]", "kind" : "def"}, {"label" : "acquireReleaseSucceed", "tail" : "(acquire: => A)(release: => Any): ZManaged[Any, Nothing, A]", "member" : "zio.ZManaged.acquireReleaseSucceed", "link" : "zio\/ZManaged$.html#acquireReleaseSucceed[A](acquire:=>A)(release:=>Any):zio.ZManaged[Any,Nothing,A]", "kind" : "def"}, {"label" : "acquireReleaseInterruptibleWith", "tail" : "(acquire: => ZIO[R, E, A])(release: (A) => URIO[R1, Any]): ZManaged[R1, E, A]", "member" : "zio.ZManaged.acquireReleaseInterruptibleWith", "link" : "zio\/ZManaged$.html#acquireReleaseInterruptibleWith[R,R1<:R,E,A](acquire:=>zio.ZIO[R,E,A])(release:A=>zio.URIO[R1,Any]):zio.ZManaged[R1,E,A]", "kind" : "def"}, {"label" : "acquireReleaseInterruptible", "tail" : "(acquire: => ZIO[R, E, A])(release: => ZIO[R1, Nothing, Any]): ZManaged[R1, E, A]", "member" : "zio.ZManaged.acquireReleaseInterruptible", "link" : "zio\/ZManaged$.html#acquireReleaseInterruptible[R,R1<:R,E,A](acquire:=>zio.ZIO[R,E,A])(release:=>zio.ZIO[R1,Nothing,Any]):zio.ZManaged[R1,E,A]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: => ZIO[R, E, A])(release: (A, Exit[Any, Any]) => ZIO[R1, Nothing, Any]): ZManaged[R1, E, A]", "member" : "zio.ZManaged.acquireReleaseExitWith", "link" : "zio\/ZManaged$.html#acquireReleaseExitWith[R,R1<:R,E,A](acquire:=>zio.ZIO[R,E,A])(release:(A,zio.Exit[Any,Any])=>zio.ZIO[R1,Nothing,Any]):zio.ZManaged[R1,E,A]", "kind" : "def"}, {"label" : "acquireReleaseExit", "tail" : "(acquire: => ZIO[R, E, A])(release: (Exit[Any, Any]) => ZIO[R1, Nothing, Any]): ZManaged[R1, E, A]", "member" : "zio.ZManaged.acquireReleaseExit", "link" : "zio\/ZManaged$.html#acquireReleaseExit[R,R1<:R,E,A](acquire:=>zio.ZIO[R,E,A])(release:zio.Exit[Any,Any]=>zio.ZIO[R1,Nothing,Any]):zio.ZManaged[R1,E,A]", "kind" : "def"}, {"label" : "acquireReleaseAttemptWith", "tail" : "(acquire: => A)(release: (A) => Any): ZManaged[Any, Throwable, A]", "member" : "zio.ZManaged.acquireReleaseAttemptWith", "link" : "zio\/ZManaged$.html#acquireReleaseAttemptWith[A](acquire:=>A)(release:A=>Any):zio.ZManaged[Any,Throwable,A]", "kind" : "def"}, {"label" : "acquireReleaseAttempt", "tail" : "(acquire: => A)(release: => Any): ZManaged[Any, Throwable, A]", "member" : "zio.ZManaged.acquireReleaseAttempt", "link" : "zio\/ZManaged$.html#acquireReleaseAttempt[A](acquire:=>A)(release:=>Any):zio.ZManaged[Any,Throwable,A]", "kind" : "def"}, {"label" : "acquireRelease", "tail" : "(acquire: => ZIO[R, E, A])(release: => ZIO[R1, Nothing, Any]): ZManaged[R1, E, A]", "member" : "zio.ZManaged.acquireRelease", "link" : "zio\/ZManaged$.html#acquireRelease[R,R1<:R,E,A](acquire:=>zio.ZIO[R,E,A])(release:=>zio.ZIO[R1,Nothing,Any]):zio.ZManaged[R1,E,A]", "kind" : "def"}, {"label" : "accessManaged", "tail" : "(): AccessManagedPartiallyApplied[R]", "member" : "zio.ZManaged.accessManaged", "link" : "zio\/ZManaged$.html#accessManaged[R]:zio.ZManaged.AccessManagedPartiallyApplied[R]", "kind" : "def"}, {"label" : "accessZIO", "tail" : "(): AccessZIOPartiallyApplied[R]", "member" : "zio.ZManaged.accessZIO", "link" : "zio\/ZManaged$.html#accessZIO[R]:zio.ZManaged.AccessZIOPartiallyApplied[R]", "kind" : "def"}, {"label" : "accessM", "tail" : "(): AccessZIOPartiallyApplied[R]", "member" : "zio.ZManaged.accessM", "link" : "zio\/ZManaged$.html#accessM[R]:zio.ZManaged.AccessZIOPartiallyApplied[R]", "kind" : "def"}, {"label" : "access", "tail" : "(): AccessPartiallyApplied[R]", "member" : "zio.ZManaged.access", "link" : "zio\/ZManaged$.html#access[R]:zio.ZManaged.AccessPartiallyApplied[R]", "kind" : "def"}, {"label" : "absolve", "tail" : "(v: => ZManaged[R, E, Either[E, A]]): ZManaged[R, E, A]", "member" : "zio.ZManaged.absolve", "link" : "zio\/ZManaged$.html#absolve[R,E,A](v:=>zio.ZManaged[R,E,Either[E,A]]):zio.ZManaged[R,E,A]", "kind" : "def"}, {"label" : "ReleaseMap", "tail" : "", "member" : "zio.ZManaged.ReleaseMap", "link" : "zio\/ZManaged$.html#ReleaseMap", "kind" : "object"}, {"label" : "ReleaseMap", "tail" : "", "member" : "zio.ZManaged.ReleaseMap", "link" : "zio\/ZManaged$.html#ReleaseMapextendsSerializable", "kind" : "abstract class"}, {"label" : "WhenManaged", "tail" : "", "member" : "zio.ZManaged.WhenManaged", "link" : "zio\/ZManaged$.html#WhenManaged[R,E]extendsAnyVal", "kind" : "final class"}, {"label" : "UpdateServiceAt", "tail" : "", "member" : "zio.ZManaged.UpdateServiceAt", "link" : "zio\/ZManaged$.html#UpdateServiceAt[-R,+E,+A,Service]extendsAnyVal", "kind" : "final class"}, {"label" : "UpdateService", "tail" : "", "member" : "zio.ZManaged.UpdateService", "link" : "zio\/ZManaged$.html#UpdateService[-R,+E,+A,M]extendsAnyVal", "kind" : "final class"}, {"label" : "UnlessManaged", "tail" : "", "member" : "zio.ZManaged.UnlessManaged", "link" : "zio\/ZManaged$.html#UnlessManaged[R,E]extendsAnyVal", "kind" : "final class"}, {"label" : "ProvideSomeLayer", "tail" : "", "member" : "zio.ZManaged.ProvideSomeLayer", "link" : "zio\/ZManaged$.html#ProvideSomeLayer[R0,-R,+E,+A]extendsAnyVal", "kind" : "final class"}, {"label" : "IfManaged", "tail" : "", "member" : "zio.ZManaged.IfManaged", "link" : "zio\/ZManaged$.html#IfManaged[R,E]extendsAnyVal", "kind" : "final class"}, {"label" : "Finalizer", "tail" : "", "member" : "zio.ZManaged.Finalizer", "link" : "zio\/ZManaged$.html#Finalizer", "kind" : "object"}, {"label" : "Finalizer", "tail" : "", "member" : "zio.ZManaged.Finalizer", "link" : "zio\/ZManaged$.html#Finalizer=zio.Exit[Any,Any]=>zio.UIO[Any]", "kind" : "type"}, {"label" : "ServiceWithManagedPartiallyApplied", "tail" : "", "member" : "zio.ZManaged.ServiceWithManagedPartiallyApplied", "link" : "zio\/ZManaged$.html#ServiceWithManagedPartiallyApplied[Service]extendsAnyVal", "kind" : "final class"}, {"label" : "ServiceWithPartiallyApplied", "tail" : "", "member" : "zio.ZManaged.ServiceWithPartiallyApplied", "link" : "zio\/ZManaged$.html#ServiceWithPartiallyApplied[Service]extendsAnyVal", "kind" : "final class"}, {"label" : "ServiceAtPartiallyApplied", "tail" : "", "member" : "zio.ZManaged.ServiceAtPartiallyApplied", "link" : "zio\/ZManaged$.html#ServiceAtPartiallyApplied[Service]extendsAnyVal", "kind" : "final class"}, {"label" : "AccessManagedPartiallyApplied", "tail" : "", "member" : "zio.ZManaged.AccessManagedPartiallyApplied", "link" : "zio\/ZManaged$.html#AccessManagedPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "AccessZIOPartiallyApplied", "tail" : "", "member" : "zio.ZManaged.AccessZIOPartiallyApplied", "link" : "zio\/ZManaged$.html#AccessZIOPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "AccessPartiallyApplied", "tail" : "", "member" : "zio.ZManaged.AccessPartiallyApplied", "link" : "zio\/ZManaged$.html#AccessPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "writeFile", "tail" : "(path: Path): ZManaged[Any, IOException, ZOutputStream]", "member" : "zio.ZManagedPlatformSpecific.writeFile", "link" : "zio\/ZManaged$.html#writeFile(path:java.nio.file.Path):zio.ZManaged[Any,java.io.IOException,zio.ZOutputStream]", "kind" : "def"}, {"label" : "writeFile", "tail" : "(path: String): ZManaged[Any, IOException, ZOutputStream]", "member" : "zio.ZManagedPlatformSpecific.writeFile", "link" : "zio\/ZManaged$.html#writeFile(path:String):zio.ZManaged[Any,java.io.IOException,zio.ZOutputStream]", "kind" : "def"}, {"label" : "readURI", "tail" : "(uri: URI): ZManaged[Any, IOException, ZInputStream]", "member" : "zio.ZManagedPlatformSpecific.readURI", "link" : "zio\/ZManaged$.html#readURI(uri:java.net.URI):zio.ZManaged[Any,java.io.IOException,zio.ZInputStream]", "kind" : "def"}, {"label" : "readURL", "tail" : "(url: String): ZManaged[Any, IOException, ZInputStream]", "member" : "zio.ZManagedPlatformSpecific.readURL", "link" : "zio\/ZManaged$.html#readURL(url:String):zio.ZManaged[Any,java.io.IOException,zio.ZInputStream]", "kind" : "def"}, {"label" : "readURL", "tail" : "(url: URL): ZManaged[Any, IOException, ZInputStream]", "member" : "zio.ZManagedPlatformSpecific.readURL", "link" : "zio\/ZManaged$.html#readURL(url:java.net.URL):zio.ZManaged[Any,java.io.IOException,zio.ZInputStream]", "kind" : "def"}, {"label" : "readFile", "tail" : "(path: String): ZManaged[Any, IOException, ZInputStream]", "member" : "zio.ZManagedPlatformSpecific.readFile", "link" : "zio\/ZManaged$.html#readFile(path:String):zio.ZManaged[Any,java.io.IOException,zio.ZInputStream]", "kind" : "def"}, {"label" : "readFile", "tail" : "(path: Path): ZManaged[Any, IOException, ZInputStream]", "member" : "zio.ZManagedPlatformSpecific.readFile", "link" : "zio\/ZManaged$.html#readFile(path:java.nio.file.Path):zio.ZManaged[Any,java.io.IOException,zio.ZInputStream]", "kind" : "def"}, {"label" : "blocking", "tail" : ": ZManaged[Any, Nothing, Unit]", "member" : "zio.ZManagedPlatformSpecific.blocking", "link" : "zio\/ZManaged$.html#blocking:zio.ZManaged[Any,Nothing,Unit]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZManaged$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZManaged$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZManaged$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZManaged$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZManaged$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZManaged$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZManaged$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZManaged$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZManaged$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZManaged$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZManaged$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZManaged$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZManaged$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZManaged$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZManaged$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZManaged$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZManaged$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZManaged$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZManaged$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/ZManaged.html", "kind" : "class"}, {"name" : "zio.ZManagedAspect", "trait" : "zio\/ZManagedAspect.html", "kind" : "trait", "members_trait" : [{"label" : "andThen", "tail" : "(that: ZManagedAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]): ZManagedAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]", "member" : "zio.ZManagedAspect.andThen", "link" : "zio\/ZManagedAspect.html#andThen[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE,LowerA1>:LowerA,UpperA1<:UpperA](that:zio.ZManagedAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]):zio.ZManagedAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]", "kind" : "def"}, {"label" : "@@", "tail" : "(that: ZManagedAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]): ZManagedAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]", "member" : "zio.ZManagedAspect.@@", "link" : "zio\/ZManagedAspect.html#@@[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE,LowerA1>:LowerA,UpperA1<:UpperA](that:zio.ZManagedAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]):zio.ZManagedAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]", "kind" : "def"}, {"label" : ">>>", "tail" : "(that: ZManagedAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]): ZManagedAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]", "member" : "zio.ZManagedAspect.>>>", "link" : "zio\/ZManagedAspect.html#>>>[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE,LowerA1>:LowerA,UpperA1<:UpperA](that:zio.ZManagedAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]):zio.ZManagedAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZManagedAspect.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZManagedAspect.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZManagedAspect.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZManagedAspect.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZManagedAspect.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZManagedAspect.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZManagedAspect.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZManagedAspect.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZManagedAspect.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZManagedAspect.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZManagedAspect.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZManagedAspect.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZManagedAspect.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZManagedAspect.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZManagedAspect.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZManagedAspect.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZManagedAspect.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZManagedAspect.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZManagedAspect.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(managed: ZManaged[R, E, A]): ZManaged[R, E, A]", "member" : "zio.ZManagedAspect.apply", "link" : "zio\/ZManagedAspect.html#apply[R>:LowerR<:UpperR,E>:LowerE<:UpperE,A>:LowerA<:UpperA](managed:zio.ZManaged[R,E,A]):zio.ZManaged[R,E,A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.ZOutputStream", "shortDescription" : "", "object" : "zio\/ZOutputStream$.html", "members_class" : [{"member" : "zio.ZOutputStream#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZOutputStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZOutputStream.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZOutputStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZOutputStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZOutputStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZOutputStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZOutputStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZOutputStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZOutputStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZOutputStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZOutputStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZOutputStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZOutputStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZOutputStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZOutputStream.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZOutputStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZOutputStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZOutputStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZOutputStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "write", "tail" : "(chunk: Chunk[Byte]): IO[IOException, Unit]", "member" : "zio.ZOutputStream.write", "link" : "zio\/ZOutputStream.html#write(chunk:zio.Chunk[Byte]):zio.IO[java.io.IOException,Unit]", "kind" : "abstract def"}], "members_object" : [{"label" : "fromOutputStream", "tail" : "(os: OutputStream): ZOutputStream", "member" : "zio.ZOutputStream.fromOutputStream", "link" : "zio\/ZOutputStream$.html#fromOutputStream(os:java.io.OutputStream):zio.ZOutputStream", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZOutputStream$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZOutputStream$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZOutputStream$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZOutputStream$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZOutputStream$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZOutputStream$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZOutputStream$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZOutputStream$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZOutputStream$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZOutputStream$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZOutputStream$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZOutputStream$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZOutputStream$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZOutputStream$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZOutputStream$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZOutputStream$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZOutputStream$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZOutputStream$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZOutputStream$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/ZOutputStream.html", "kind" : "class"}, {"name" : "zio.ZQueue", "shortDescription" : "A ZQueue[RA, RB, EA, EB, A, B] is a lightweight, asynchronous queue into which values oftype A can be enqueued and of which elements of type B can be dequeued.", "object" : "zio\/ZQueue$.html", "members_class" : [{"label" : "poll", "tail" : "(): ZIO[RB, EB, Option[B]]", "member" : "zio.ZQueue.poll", "link" : "zio\/ZQueue.html#poll:zio.ZIO[RB,EB,Option[B]]", "kind" : "final def"}, {"label" : "mapZIO", "tail" : "(f: (B) => ZIO[R2, E2, C]): ZQueue[RA, R2, EA, E2, A, C]", "member" : "zio.ZQueue.mapZIO", "link" : "zio\/ZQueue.html#mapZIO[R2<:RB,E2>:EB,C](f:B=>zio.ZIO[R2,E2,C]):zio.ZQueue[RA,R2,EA,E2,A,C]", "kind" : "final def"}, {"label" : "mapM", "tail" : "(f: (B) => ZIO[R2, E2, C]): ZQueue[RA, R2, EA, E2, A, C]", "member" : "zio.ZQueue.mapM", "link" : "zio\/ZQueue.html#mapM[R2<:RB,E2>:EB,C](f:B=>zio.ZIO[R2,E2,C]):zio.ZQueue[RA,R2,EA,E2,A,C]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (B) => C): ZQueue[RA, RB, EA, EB, A, C]", "member" : "zio.ZQueue.map", "link" : "zio\/ZQueue.html#map[C](f:B=>C):zio.ZQueue[RA,RB,EA,EB,A,C]", "kind" : "final def"}, {"label" : "filterOutputZIO", "tail" : "(f: (B) => ZIO[RB1, EB1, Boolean]): ZQueue[RA, RB1, EA, EB1, A, B]", "member" : "zio.ZQueue.filterOutputZIO", "link" : "zio\/ZQueue.html#filterOutputZIO[RB1<:RB,EB1>:EB](f:B=>zio.ZIO[RB1,EB1,Boolean]):zio.ZQueue[RA,RB1,EA,EB1,A,B]", "kind" : "def"}, {"label" : "filterOutputM", "tail" : "(f: (B) => ZIO[RB1, EB1, Boolean]): ZQueue[RA, RB1, EA, EB1, A, B]", "member" : "zio.ZQueue.filterOutputM", "link" : "zio\/ZQueue.html#filterOutputM[RB1<:RB,EB1>:EB](f:B=>zio.ZIO[RB1,EB1,Boolean]):zio.ZQueue[RA,RB1,EA,EB1,A,B]", "kind" : "def"}, {"label" : "filterOutput", "tail" : "(f: (B) => Boolean): ZQueue[RA, RB, EA, EB, A, B]", "member" : "zio.ZQueue.filterOutput", "link" : "zio\/ZQueue.html#filterOutput(f:B=>Boolean):zio.ZQueue[RA,RB,EA,EB,A,B]", "kind" : "final def"}, {"label" : "filterInputZIO", "tail" : "(f: (A1) => ZIO[R2, E2, Boolean]): ZQueue[R2, RB, E2, EB, A1, B]", "member" : "zio.ZQueue.filterInputZIO", "link" : "zio\/ZQueue.html#filterInputZIO[R2<:RA,E2>:EA,A1<:A](f:A1=>zio.ZIO[R2,E2,Boolean]):zio.ZQueue[R2,RB,E2,EB,A1,B]", "kind" : "final def"}, {"label" : "filterInputM", "tail" : "(f: (A1) => ZIO[R2, E2, Boolean]): ZQueue[R2, RB, E2, EB, A1, B]", "member" : "zio.ZQueue.filterInputM", "link" : "zio\/ZQueue.html#filterInputM[R2<:RA,E2>:EA,A1<:A](f:A1=>zio.ZIO[R2,E2,Boolean]):zio.ZQueue[R2,RB,E2,EB,A1,B]", "kind" : "final def"}, {"label" : "filterInput", "tail" : "(f: (A1) => Boolean): ZQueue[RA, RB, EA, EB, A1, B]", "member" : "zio.ZQueue.filterInput", "link" : "zio\/ZQueue.html#filterInput[A1<:A](f:A1=>Boolean):zio.ZQueue[RA,RB,EA,EB,A1,B]", "kind" : "final def"}, {"label" : "dimapZIO", "tail" : "(f: (C) => ZIO[RC, EC, A], g: (B) => ZIO[RD, ED, D]): ZQueue[RC, RD, EC, ED, C, D]", "member" : "zio.ZQueue.dimapZIO", "link" : "zio\/ZQueue.html#dimapZIO[RC<:RA,RD<:RB,EC>:EA,ED>:EB,C,D](f:C=>zio.ZIO[RC,EC,A],g:B=>zio.ZIO[RD,ED,D]):zio.ZQueue[RC,RD,EC,ED,C,D]", "kind" : "final def"}, {"label" : "dimapM", "tail" : "(f: (C) => ZIO[RC, EC, A], g: (B) => ZIO[RD, ED, D]): ZQueue[RC, RD, EC, ED, C, D]", "member" : "zio.ZQueue.dimapM", "link" : "zio\/ZQueue.html#dimapM[RC<:RA,RD<:RB,EC>:EA,ED>:EB,C,D](f:C=>zio.ZIO[RC,EC,A],g:B=>zio.ZIO[RD,ED,D]):zio.ZQueue[RC,RD,EC,ED,C,D]", "kind" : "final def"}, {"label" : "dimap", "tail" : "(f: (C) => A, g: (B) => D): ZQueue[RA, RB, EA, EB, C, D]", "member" : "zio.ZQueue.dimap", "link" : "zio\/ZQueue.html#dimap[C,D](f:C=>A,g:B=>D):zio.ZQueue[RA,RB,EA,EB,C,D]", "kind" : "final def"}, {"label" : "contramapZIO", "tail" : "(f: (C) => ZIO[RA2, EA2, A]): ZQueue[RA2, RB, EA2, EB, C, B]", "member" : "zio.ZQueue.contramapZIO", "link" : "zio\/ZQueue.html#contramapZIO[RA2<:RA,EA2>:EA,C](f:C=>zio.ZIO[RA2,EA2,A]):zio.ZQueue[RA2,RB,EA2,EB,C,B]", "kind" : "final def"}, {"label" : "contramapM", "tail" : "(f: (C) => ZIO[RA2, EA2, A]): ZQueue[RA2, RB, EA2, EB, C, B]", "member" : "zio.ZQueue.contramapM", "link" : "zio\/ZQueue.html#contramapM[RA2<:RA,EA2>:EA,C](f:C=>zio.ZIO[RA2,EA2,A]):zio.ZQueue[RA2,RB,EA2,EB,C,B]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (C) => A): ZQueue[RA, RB, EA, EB, C, B]", "member" : "zio.ZQueue.contramap", "link" : "zio\/ZQueue.html#contramap[C](f:C=>A):zio.ZQueue[RA,RB,EA,EB,C,B]", "kind" : "final def"}, {"label" : "takeN", "tail" : "(n: Int): ZIO[RB, EB, Chunk[B]]", "member" : "zio.ZQueue.takeN", "link" : "zio\/ZQueue.html#takeN(n:Int):zio.ZIO[RB,EB,zio.Chunk[B]]", "kind" : "final def"}, {"label" : "takeBetween", "tail" : "(min: Int, max: Int): ZIO[RB, EB, Chunk[B]]", "member" : "zio.ZQueue.takeBetween", "link" : "zio\/ZQueue.html#takeBetween(min:Int,max:Int):zio.ZIO[RB,EB,zio.Chunk[B]]", "kind" : "final def"}, {"member" : "zio.ZQueue#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZQueue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZQueue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZQueue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZQueue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZQueue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZQueue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZQueue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZQueue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZQueue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZQueue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZQueue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZQueue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZQueue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZQueue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZQueue.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZQueue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZQueue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZQueue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZQueue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "takeUpTo", "tail" : "(max: Int): ZIO[RB, EB, Chunk[B]]", "member" : "zio.ZQueue.takeUpTo", "link" : "zio\/ZQueue.html#takeUpTo(max:Int):zio.ZIO[RB,EB,zio.Chunk[B]]", "kind" : "abstract def"}, {"label" : "takeAll", "tail" : "(): ZIO[RB, EB, Chunk[B]]", "member" : "zio.ZQueue.takeAll", "link" : "zio\/ZQueue.html#takeAll:zio.ZIO[RB,EB,zio.Chunk[B]]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(): ZIO[RB, EB, B]", "member" : "zio.ZQueue.take", "link" : "zio\/ZQueue.html#take:zio.ZIO[RB,EB,B]", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): UIO[Int]", "member" : "zio.ZQueue.size", "link" : "zio\/ZQueue.html#size:zio.UIO[Int]", "kind" : "abstract def"}, {"label" : "shutdown", "tail" : "(): UIO[Unit]", "member" : "zio.ZQueue.shutdown", "link" : "zio\/ZQueue.html#shutdown:zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "offerAll", "tail" : "(as: Iterable[A]): ZIO[RA, EA, Boolean]", "member" : "zio.ZQueue.offerAll", "link" : "zio\/ZQueue.html#offerAll(as:Iterable[A]):zio.ZIO[RA,EA,Boolean]", "kind" : "abstract def"}, {"label" : "offer", "tail" : "(a: A): ZIO[RA, EA, Boolean]", "member" : "zio.ZQueue.offer", "link" : "zio\/ZQueue.html#offer(a:A):zio.ZIO[RA,EA,Boolean]", "kind" : "abstract def"}, {"label" : "isShutdown", "tail" : "(): UIO[Boolean]", "member" : "zio.ZQueue.isShutdown", "link" : "zio\/ZQueue.html#isShutdown:zio.UIO[Boolean]", "kind" : "abstract def"}, {"label" : "capacity", "tail" : "(): Int", "member" : "zio.ZQueue.capacity", "link" : "zio\/ZQueue.html#capacity:Int", "kind" : "abstract def"}, {"label" : "awaitShutdown", "tail" : "(): UIO[Unit]", "member" : "zio.ZQueue.awaitShutdown", "link" : "zio\/ZQueue.html#awaitShutdown:zio.UIO[Unit]", "kind" : "abstract def"}], "members_object" : [{"label" : "unbounded", "tail" : "(): UIO[Queue[A]]", "member" : "zio.ZQueue.unbounded", "link" : "zio\/ZQueue$.html#unbounded[A]:zio.UIO[zio.Queue[A]]", "kind" : "def"}, {"label" : "sliding", "tail" : "(requestedCapacity: Int): UIO[Queue[A]]", "member" : "zio.ZQueue.sliding", "link" : "zio\/ZQueue$.html#sliding[A](requestedCapacity:Int):zio.UIO[zio.Queue[A]]", "kind" : "def"}, {"label" : "dropping", "tail" : "(requestedCapacity: Int): UIO[Queue[A]]", "member" : "zio.ZQueue.dropping", "link" : "zio\/ZQueue$.html#dropping[A](requestedCapacity:Int):zio.UIO[zio.Queue[A]]", "kind" : "def"}, {"label" : "bounded", "tail" : "(requestedCapacity: Int): UIO[Queue[A]]", "member" : "zio.ZQueue.bounded", "link" : "zio\/ZQueue$.html#bounded[A](requestedCapacity:Int):zio.UIO[zio.Queue[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZQueue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZQueue$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZQueue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZQueue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZQueue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZQueue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZQueue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZQueue$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZQueue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZQueue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZQueue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZQueue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZQueue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZQueue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZQueue$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZQueue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZQueue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZQueue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZQueue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/ZQueue.html", "kind" : "class"}, {"name" : "zio.ZRef", "shortDescription" : "A ZRef[RA, RB, EA, EB, A, B] is a polymorphic, purely functionaldescription of a mutable reference.", "object" : "zio\/ZRef$.html", "members_class" : [{"label" : "writeOnly", "tail" : "(): ZRef[RA, RB, EA, Unit, A, Nothing]", "member" : "zio.ZRef.writeOnly", "link" : "zio\/ZRef.html#writeOnly:zio.ZRef[RA,RB,EA,Unit,A,Nothing]", "kind" : "def"}, {"label" : "readOnly", "tail" : "(): ZRef[RA, RB, EA, EB, Nothing, B]", "member" : "zio.ZRef.readOnly", "link" : "zio\/ZRef.html#readOnly:zio.ZRef[RA,RB,EA,EB,Nothing,B]", "kind" : "def"}, {"label" : "mapEither", "tail" : "(f: (B) => Either[EC, C]): ZRef[RA, RB, EA, EC, A, C]", "member" : "zio.ZRef.mapEither", "link" : "zio\/ZRef.html#mapEither[EC>:EB,C](f:B=>Either[EC,C]):zio.ZRef[RA,RB,EA,EC,A,C]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => C): ZRef[RA, RB, EA, EB, A, C]", "member" : "zio.ZRef.map", "link" : "zio\/ZRef.html#map[C](f:B=>C):zio.ZRef[RA,RB,EA,EB,A,C]", "kind" : "def"}, {"label" : "filterOutput", "tail" : "(f: (B) => Boolean): ZRef[RA, RB, EA, Option[EB], A, B]", "member" : "zio.ZRef.filterOutput", "link" : "zio\/ZRef.html#filterOutput(f:B=>Boolean):zio.ZRef[RA,RB,EA,Option[EB],A,B]", "kind" : "def"}, {"label" : "filterInput", "tail" : "(f: (A1) => Boolean): ZRef[RA, RB, Option[EA], EB, A1, B]", "member" : "zio.ZRef.filterInput", "link" : "zio\/ZRef.html#filterInput[A1<:A](f:A1=>Boolean):zio.ZRef[RA,RB,Option[EA],EB,A1,B]", "kind" : "def"}, {"label" : "dimapError", "tail" : "(f: (EA) => EC, g: (EB) => ED): ZRef[RA, RB, EC, ED, A, B]", "member" : "zio.ZRef.dimapError", "link" : "zio\/ZRef.html#dimapError[EC,ED](f:EA=>EC,g:EB=>ED):zio.ZRef[RA,RB,EC,ED,A,B]", "kind" : "def"}, {"label" : "dimapEither", "tail" : "(f: (C) => Either[EC, A], g: (B) => Either[ED, D]): ZRef[RA, RB, EC, ED, C, D]", "member" : "zio.ZRef.dimapEither", "link" : "zio\/ZRef.html#dimapEither[EC>:EA,ED>:EB,C,D](f:C=>Either[EC,A],g:B=>Either[ED,D]):zio.ZRef[RA,RB,EC,ED,C,D]", "kind" : "def"}, {"label" : "dimap", "tail" : "(f: (C) => A, g: (B) => D): ZRef[RA, RB, EA, EB, C, D]", "member" : "zio.ZRef.dimap", "link" : "zio\/ZRef.html#dimap[C,D](f:C=>A,g:B=>D):zio.ZRef[RA,RB,EA,EB,C,D]", "kind" : "def"}, {"label" : "contramapEither", "tail" : "(f: (C) => Either[EC, A]): ZRef[RA, RB, EC, EB, C, B]", "member" : "zio.ZRef.contramapEither", "link" : "zio\/ZRef.html#contramapEither[EC>:EA,C](f:C=>Either[EC,A]):zio.ZRef[RA,RB,EC,EB,C,B]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (C) => A): ZRef[RA, RB, EA, EB, C, B]", "member" : "zio.ZRef.contramap", "link" : "zio\/ZRef.html#contramap[C](f:C=>A):zio.ZRef[RA,RB,EA,EB,C,B]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[B, C]): ZRef[RA, RB, EA, Option[EB], A, C]", "member" : "zio.ZRef.collect", "link" : "zio\/ZRef.html#collect[C](pf:PartialFunction[B,C]):zio.ZRef[RA,RB,EA,Option[EB],A,C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZRef.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZRef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZRef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZRef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZRef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZRef.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZRef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "setAsync", "tail" : "(a: A): ZIO[RA, EA, Unit]", "member" : "zio.ZRef.setAsync", "link" : "zio\/ZRef.html#setAsync(a:A):zio.ZIO[RA,EA,Unit]", "kind" : "abstract def"}, {"label" : "set", "tail" : "(a: A): ZIO[RA, EA, Unit]", "member" : "zio.ZRef.set", "link" : "zio\/ZRef.html#set(a:A):zio.ZIO[RA,EA,Unit]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): ZIO[RB, EB, B]", "member" : "zio.ZRef.get", "link" : "zio\/ZRef.html#get:zio.ZIO[RB,EB,B]", "kind" : "abstract def"}, {"label" : "foldAll", "tail" : "(ea: (EA) => EC, eb: (EB) => ED, ec: (EB) => EC, ca: (C) => (B) => Either[EC, A], bd: (B) => Either[ED, D]): ZRef[RA with RB, RB, EC, ED, C, D]", "member" : "zio.ZRef.foldAll", "link" : "zio\/ZRef.html#foldAll[EC,ED,C,D](ea:EA=>EC,eb:EB=>ED,ec:EB=>EC,ca:C=>(B=>Either[EC,A]),bd:B=>Either[ED,D]):zio.ZRef[RAwithRB,RB,EC,ED,C,D]", "kind" : "abstract def"}, {"label" : "fold", "tail" : "(ea: (EA) => EC, eb: (EB) => ED, ca: (C) => Either[EC, A], bd: (B) => Either[ED, D]): ZRef[RA, RB, EC, ED, C, D]", "member" : "zio.ZRef.fold", "link" : "zio\/ZRef.html#fold[EC,ED,C,D](ea:EA=>EC,eb:EB=>ED,ca:C=>Either[EC,A],bd:B=>Either[ED,D]):zio.ZRef[RA,RB,EC,ED,C,D]", "kind" : "abstract def"}], "members_object" : [{"label" : "Synchronized", "tail" : "", "member" : "zio.ZRef.Synchronized", "link" : "zio\/ZRef$.html#Synchronized", "kind" : "object"}, {"label" : "Synchronized", "tail" : "", "member" : "zio.ZRef.Synchronized", "link" : "zio\/ZRef$.html#Synchronized[-RA,-RB,+EA,+EB,-A,+B]extendsZRef[RA,RB,EA,EB,A,B]", "kind" : "sealed abstract class"}, {"label" : "UnifiedSyntax", "tail" : "", "member" : "zio.ZRef.UnifiedSyntax", "link" : "zio\/ZRef$.html#UnifiedSyntax[-R,+E,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "makeManaged", "tail" : "(a: A): Managed[Nothing, Ref[A]]", "member" : "zio.ZRef.makeManaged", "link" : "zio\/ZRef$.html#makeManaged[A](a:A):zio.Managed[Nothing,zio.Ref[A]]", "kind" : "def"}, {"label" : "make", "tail" : "(a: A): UIO[Ref[A]]", "member" : "zio.ZRef.make", "link" : "zio\/ZRef$.html#make[A](a:A):zio.UIO[zio.Ref[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZRef$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZRef$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZRef$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZRef$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZRef$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZRef$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZRef$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZRef$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZRef$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZRef$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZRef$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZRef$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZRef$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZRef$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZRef$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZRef$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZRef$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZRef$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZRef$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/ZRef.html", "kind" : "class"}, {"name" : "zio.ZRefM", "shortDescription" : "", "object" : "zio\/ZRefM$.html", "members_object" : [{"label" : "makeManaged", "tail" : "(a: A): UManaged[RefM[A]]", "member" : "zio.ZRefM.makeManaged", "link" : "zio\/ZRefM$.html#makeManaged[A](a:A):zio.UManaged[zio.RefM[A]]", "kind" : "def"}, {"label" : "make", "tail" : "(a: A): UIO[RefM[A]]", "member" : "zio.ZRefM.make", "link" : "zio\/ZRefM$.html#make[A](a:A):zio.UIO[zio.RefM[A]]", "kind" : "def"}, {"label" : "dequeueRef", "tail" : "(a: A): UIO[(RefM[A], Dequeue[A])]", "member" : "zio.ZRefM.dequeueRef", "link" : "zio\/ZRefM$.html#dequeueRef[A](a:A):zio.UIO[(zio.RefM[A],zio.Dequeue[A])]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZRefM$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZRefM$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZRefM$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZRefM$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZRefM$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZRefM$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZRefM$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZRefM$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZRefM$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZRefM$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZRefM$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZRefM$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZRefM$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZRefM$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZRefM$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZRefM$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZRefM$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZRefM$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZRefM$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.ZScope", "shortDescription" : "A ZScope[A] is a value that allows adding finalizers identified by a key.", "object" : "zio\/ZScope$.html", "members_class" : [{"label" : "isOpen", "tail" : "(): UIO[Boolean]", "member" : "zio.ZScope.isOpen", "link" : "zio\/ZScope.html#isOpen:zio.UIO[Boolean]", "kind" : "def"}, {"label" : "extend", "tail" : "(that: ZScope[Any]): UIO[Boolean]", "member" : "zio.ZScope.extend", "link" : "zio\/ZScope.html#extend(that:zio.ZScope[Any]):zio.UIO[Boolean]", "kind" : "final def"}, {"label" : "deny", "tail" : "(key: => Key): UIO[Boolean]", "member" : "zio.ZScope.deny", "link" : "zio\/ZScope.html#deny(key:=>zio.ZScope.Key):zio.UIO[Boolean]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZScope.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZScope.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZScope.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZScope.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZScope.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZScope.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZScope.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZScope.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZScope.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZScope.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZScope.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZScope.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZScope.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZScope.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZScope.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZScope.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZScope.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZScope.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZScope.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isReleased", "tail" : "(): UIO[Boolean]", "member" : "zio.ZScope.isReleased", "link" : "zio\/ZScope.html#isReleased:zio.UIO[Boolean]", "kind" : "abstract def"}, {"label" : "ensure", "tail" : "(finalizer: (A) => UIO[Any], mode: Mode): UIO[Either[A, Key]]", "member" : "zio.ZScope.ensure", "link" : "zio\/ZScope.html#ensure(finalizer:A=>zio.UIO[Any],mode:zio.ZScope.Mode):zio.UIO[Either[A,zio.ZScope.Key]]", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): UIO[Boolean]", "member" : "zio.ZScope.isEmpty", "link" : "zio\/ZScope.html#isEmpty:zio.UIO[Boolean]", "kind" : "abstract def"}, {"label" : "isClosed", "tail" : "(): UIO[Boolean]", "member" : "zio.ZScope.isClosed", "link" : "zio\/ZScope.html#isClosed:zio.UIO[Boolean]", "kind" : "abstract def"}], "members_object" : [{"label" : "Local", "tail" : "", "member" : "zio.ZScope.Local", "link" : "zio\/ZScope$.html#Local[A]extendsZScope[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "make", "tail" : "(): UIO[Open[A]]", "member" : "zio.ZScope.make", "link" : "zio\/ZScope$.html#make[A]:zio.UIO[zio.ZScope.Open[A]]", "kind" : "def"}, {"label" : "Open", "tail" : "", "member" : "zio.ZScope.Open", "link" : "zio\/ZScope$.html#Open[A]extendsProductwithSerializable", "kind" : "final case class"}, {"label" : "global", "tail" : "", "member" : "zio.ZScope.global", "link" : "zio\/ZScope$.html#global", "kind" : "object"}, {"label" : "Key", "tail" : "", "member" : "zio.ZScope.Key", "link" : "zio\/ZScope$.html#Key", "kind" : "object"}, {"label" : "Key", "tail" : "", "member" : "zio.ZScope.Key", "link" : "zio\/ZScope$.html#KeyextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "Mode", "tail" : "", "member" : "zio.ZScope.Mode", "link" : "zio\/ZScope$.html#Mode", "kind" : "object"}, {"label" : "Mode", "tail" : "", "member" : "zio.ZScope.Mode", "link" : "zio\/ZScope$.html#ModeextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZScope$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZScope$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZScope$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZScope$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZScope$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZScope$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZScope$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZScope$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZScope$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZScope$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZScope$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZScope$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZScope$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZScope$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZScope$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZScope$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZScope$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZScope$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZScope$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/ZScope.html", "kind" : "class"}, {"name" : "zio.ZState", "object" : "zio\/ZState$.html", "members_object" : [{"label" : "makeLayer", "tail" : "(s: S)(arg0: zio.Tag[S]): ZLayer[Any, Nothing, Has[ZState[S]]]", "member" : "zio.ZState.makeLayer", "link" : "zio\/ZState$.html#makeLayer[S](s:S)(implicitevidence$1:zio.Tag[S]):zio.ZLayer[Any,Nothing,zio.Has[zio.ZState[S]]]", "kind" : "def"}, {"label" : "make", "tail" : "(s: S): UIO[ZState[S]]", "member" : "zio.ZState.make", "link" : "zio\/ZState$.html#make[S](s:S):zio.UIO[zio.ZState[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZState$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZState$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZState$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZState$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZState$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZState$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZState$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZState$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZState$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZState$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZState$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZState$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZState$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZState$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZState$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZState$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZState$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZState$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZState$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/ZState.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZState.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZState.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZState.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZState.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZState.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZState.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZState.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "update", "tail" : "(f: (S) => S): UIO[Unit]", "member" : "zio.ZState.update", "link" : "zio\/ZState.html#update(f:S=>S):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "set", "tail" : "(s: S): UIO[Unit]", "member" : "zio.ZState.set", "link" : "zio\/ZState.html#set(s:S):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): UIO[S]", "member" : "zio.ZState.get", "link" : "zio\/ZState.html#get:zio.UIO[S]", "kind" : "abstract def"}], "shortDescription" : "ZState[S] models a value of type S that can be read from and written toduring the execution of an effect."}, {"name" : "zio.ZTrace", "shortDescription" : "", "object" : "zio\/ZTrace$.html", "members_object" : [{"label" : "truncatedParentTrace", "tail" : "(trace: ZTrace, maxAncestors: Int): Option[ZTrace]", "member" : "zio.ZTrace.truncatedParentTrace", "link" : "zio\/ZTrace$.html#truncatedParentTrace(trace:zio.ZTrace,maxAncestors:Int):Option[zio.ZTrace]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZTrace$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZTrace$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZTrace$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZTrace$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZTrace$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZTrace$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZTrace$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZTrace$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZTrace$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZTrace$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZTrace$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZTrace$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/ZTrace$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZTrace$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/ZTrace$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/ZTrace$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZTrace$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZTrace$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZTrace$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "ancestryLength", "tail" : "(): Int", "member" : "zio.ZTrace.ancestryLength", "link" : "zio\/ZTrace.html#ancestryLength:Int", "kind" : "def"}, {"label" : "parents", "tail" : "(): List[ZTrace]", "member" : "zio.ZTrace.parents", "link" : "zio\/ZTrace.html#parents:List[zio.ZTrace]", "kind" : "def"}, {"label" : "prettyPrint", "tail" : "(): String", "member" : "zio.ZTrace.prettyPrint", "link" : "zio\/ZTrace.html#prettyPrint:String", "kind" : "def"}, {"member" : "zio.ZTrace#<init>", "error" : "unsupported entity"}, {"label" : "parentTrace", "tail" : ": Option[ZTrace]", "member" : "zio.ZTrace.parentTrace", "link" : "zio\/ZTrace.html#parentTrace:Option[zio.ZTrace]", "kind" : "val"}, {"label" : "stackTrace", "tail" : ": List[ZTraceElement]", "member" : "zio.ZTrace.stackTrace", "link" : "zio\/ZTrace.html#stackTrace:List[zio.internal.stacktracer.ZTraceElement]", "kind" : "val"}, {"label" : "executionTrace", "tail" : ": List[ZTraceElement]", "member" : "zio.ZTrace.executionTrace", "link" : "zio\/ZTrace.html#executionTrace:List[zio.internal.stacktracer.ZTraceElement]", "kind" : "val"}, {"label" : "fiberId", "tail" : ": FiberId", "member" : "zio.ZTrace.fiberId", "link" : "zio\/ZTrace.html#fiberId:zio.FiberId", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/ZTrace.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/ZTrace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/ZTrace.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/ZTrace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/ZTrace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/ZTrace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/ZTrace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/ZTrace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZTrace.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZTrace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/ZTrace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/ZTrace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/ZTrace.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/ZTrace.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/ZTrace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/ZTrace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/ZTrace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/ZTrace.html", "kind" : "case class"}], "zio.stream.experimental" : [{"name" : "zio.stream.experimental.Deflate", "shortDescription" : "", "object" : "zio\/stream\/experimental\/Deflate$.html", "members_object" : [{"label" : "makeDeflater", "tail" : "(bufferSize: Int, noWrap: Boolean, level: CompressionLevel, strategy: CompressionStrategy, flushMode: FlushMode): ZChannel[Any, Err, Chunk[Byte], Done, Err, Chunk[Byte], Done]", "member" : "zio.stream.experimental.Deflate.makeDeflater", "link" : "zio\/stream\/experimental\/Deflate$.html#makeDeflater[Err,Done](bufferSize:Int,noWrap:Boolean,level:zio.stream.compression.CompressionLevel,strategy:zio.stream.compression.CompressionStrategy,flushMode:zio.stream.compression.FlushMode):zio.stream.experimental.ZChannel[Any,Err,zio.Chunk[Byte],Done,Err,zio.Chunk[Byte],Done]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/Deflate$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/Deflate$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/Deflate$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/Deflate$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/Deflate$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/Deflate$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/Deflate$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/Deflate$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/Deflate$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/Deflate$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/Deflate$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/Deflate$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/Deflate$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/Deflate$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/Deflate$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/Deflate$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/Deflate$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/Deflate$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/Deflate$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.stream.experimental.Gunzip", "shortDescription" : "", "object" : "zio\/stream\/experimental\/Gunzip$.html", "members_object" : [{"label" : "makeGunzipper", "tail" : "(bufferSize: Int): ZChannel[Any, CompressionException, Chunk[Byte], Done, CompressionException, Chunk[Byte], Done]", "member" : "zio.stream.experimental.Gunzip.makeGunzipper", "link" : "zio\/stream\/experimental\/Gunzip$.html#makeGunzipper[Done](bufferSize:Int):zio.stream.experimental.ZChannel[Any,zio.stream.compression.CompressionException,zio.Chunk[Byte],Done,zio.stream.compression.CompressionException,zio.Chunk[Byte],Done]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/Gunzip$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/Gunzip$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/Gunzip$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/Gunzip$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/Gunzip$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/Gunzip$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/Gunzip$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/Gunzip$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/Gunzip$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/Gunzip$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/Gunzip$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/Gunzip$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/Gunzip$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/Gunzip$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/Gunzip$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/Gunzip$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/Gunzip$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/Gunzip$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/Gunzip$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.stream.experimental.Gzip", "shortDescription" : "", "object" : "zio\/stream\/experimental\/Gzip$.html", "members_object" : [{"label" : "makeGzipper", "tail" : "(bufferSize: Int, level: CompressionLevel, strategy: CompressionStrategy, flushMode: FlushMode): ZChannel[Any, Err, Chunk[Byte], Done, Err, Chunk[Byte], Done]", "member" : "zio.stream.experimental.Gzip.makeGzipper", "link" : "zio\/stream\/experimental\/Gzip$.html#makeGzipper[Err,Done](bufferSize:Int,level:zio.stream.compression.CompressionLevel,strategy:zio.stream.compression.CompressionStrategy,flushMode:zio.stream.compression.FlushMode):zio.stream.experimental.ZChannel[Any,Err,zio.Chunk[Byte],Done,Err,zio.Chunk[Byte],Done]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/Gzip$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/Gzip$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/Gzip$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/Gzip$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/Gzip$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/Gzip$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/Gzip$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/Gzip$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/Gzip$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/Gzip$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/Gzip$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/Gzip$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/Gzip$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/Gzip$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/Gzip$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/Gzip$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/Gzip$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/Gzip$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/Gzip$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.stream.experimental.Inflate", "shortDescription" : "", "object" : "zio\/stream\/experimental\/Inflate$.html", "members_object" : [{"label" : "makeInflater", "tail" : "(bufferSize: Int, noWrap: Boolean): ZChannel[Any, Err, Chunk[Byte], Done, Err, Chunk[Byte], Done]", "member" : "zio.stream.experimental.Inflate.makeInflater", "link" : "zio\/stream\/experimental\/Inflate$.html#makeInflater[Err>:zio.stream.compression.CompressionException,Done](bufferSize:Int,noWrap:Boolean):zio.stream.experimental.ZChannel[Any,Err,zio.Chunk[Byte],Done,Err,zio.Chunk[Byte],Done]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/Inflate$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/Inflate$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/Inflate$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/Inflate$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/Inflate$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/Inflate$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/Inflate$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/Inflate$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/Inflate$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/Inflate$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/Inflate$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/Inflate$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/Inflate$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/Inflate$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/Inflate$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/Inflate$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/Inflate$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/Inflate$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/Inflate$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.stream.experimental.SubscriptionRef", "shortDescription" : "A SubscriptionRef[A] contains a Ref.Synchronized with a value of typeA and a ZStream that can be subscribed to in order to receive thecurrent value as well as all changes to the value.", "object" : "zio\/stream\/experimental\/SubscriptionRef$.html", "members_class" : [{"label" : "changes", "tail" : ": ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.SubscriptionRef.changes", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#changes:zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "val"}, {"label" : "ref", "tail" : ": Synchronized[Any, Any, Nothing, Nothing, A, A]", "member" : "zio.stream.experimental.SubscriptionRef.ref", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#ref:zio.ZRef.Synchronized[Any,Any,Nothing,Nothing,A,A]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/SubscriptionRef.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/SubscriptionRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "make", "tail" : "(a: A): UIO[SubscriptionRef[A]]", "member" : "zio.stream.experimental.SubscriptionRef.make", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#make[A](a:A):zio.UIO[zio.stream.experimental.SubscriptionRef[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/SubscriptionRef$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stream\/experimental\/SubscriptionRef.html", "kind" : "class"}, {"name" : "zio.stream.experimental.Take", "shortDescription" : "A Take[E, A] represents a single take from a queue modeling a stream ofvalues.", "object" : "zio\/stream\/experimental\/Take$.html", "members_object" : [{"label" : "end", "tail" : ": Take[Nothing, Nothing]", "member" : "zio.stream.experimental.Take.end", "link" : "zio\/stream\/experimental\/Take$.html#end:zio.stream.experimental.Take[Nothing,Nothing]", "kind" : "val"}, {"label" : "done", "tail" : "(exit: Exit[E, A]): Take[E, A]", "member" : "zio.stream.experimental.Take.done", "link" : "zio\/stream\/experimental\/Take$.html#done[E,A](exit:zio.Exit[E,A]):zio.stream.experimental.Take[E,A]", "kind" : "def"}, {"label" : "dieMessage", "tail" : "(msg: String): Take[Nothing, Nothing]", "member" : "zio.stream.experimental.Take.dieMessage", "link" : "zio\/stream\/experimental\/Take$.html#dieMessage(msg:String):zio.stream.experimental.Take[Nothing,Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(t: Throwable): Take[Nothing, Nothing]", "member" : "zio.stream.experimental.Take.die", "link" : "zio\/stream\/experimental\/Take$.html#die(t:Throwable):zio.stream.experimental.Take[Nothing,Nothing]", "kind" : "def"}, {"label" : "halt", "tail" : "(c: Cause[E]): Take[E, Nothing]", "member" : "zio.stream.experimental.Take.halt", "link" : "zio\/stream\/experimental\/Take$.html#halt[E](c:zio.Cause[E]):zio.stream.experimental.Take[E,Nothing]", "kind" : "def"}, {"label" : "fromPull", "tail" : "(pull: Pull[R, E, A]): URIO[R, Take[E, A]]", "member" : "zio.stream.experimental.Take.fromPull", "link" : "zio\/stream\/experimental\/Take$.html#fromPull[R,E,A](pull:zio.stream.experimental.ZStream.Pull[R,E,A]):zio.URIO[R,zio.stream.experimental.Take[E,A]]", "kind" : "def"}, {"label" : "fromZIO", "tail" : "(zio: ZIO[R, E, A]): URIO[R, Take[E, A]]", "member" : "zio.stream.experimental.Take.fromZIO", "link" : "zio\/stream\/experimental\/Take$.html#fromZIO[R,E,A](zio:zio.ZIO[R,E,A]):zio.URIO[R,zio.stream.experimental.Take[E,A]]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(zio: ZIO[R, E, A]): URIO[R, Take[E, A]]", "member" : "zio.stream.experimental.Take.fromEffect", "link" : "zio\/stream\/experimental\/Take$.html#fromEffect[R,E,A](zio:zio.ZIO[R,E,A]):zio.URIO[R,zio.stream.experimental.Take[E,A]]", "kind" : "def"}, {"label" : "failCause", "tail" : "(c: Cause[E]): Take[E, Nothing]", "member" : "zio.stream.experimental.Take.failCause", "link" : "zio\/stream\/experimental\/Take$.html#failCause[E](c:zio.Cause[E]):zio.stream.experimental.Take[E,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: E): Take[E, Nothing]", "member" : "zio.stream.experimental.Take.fail", "link" : "zio\/stream\/experimental\/Take$.html#fail[E](e:E):zio.stream.experimental.Take[E,Nothing]", "kind" : "def"}, {"label" : "chunk", "tail" : "(as: Chunk[A]): Take[Nothing, A]", "member" : "zio.stream.experimental.Take.chunk", "link" : "zio\/stream\/experimental\/Take$.html#chunk[A](as:zio.Chunk[A]):zio.stream.experimental.Take[Nothing,A]", "kind" : "def"}, {"label" : "single", "tail" : "(a: A): Take[Nothing, A]", "member" : "zio.stream.experimental.Take.single", "link" : "zio\/stream\/experimental\/Take$.html#single[A](a:A):zio.stream.experimental.Take[Nothing,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/Take$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/Take$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/Take$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/Take$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/Take$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/Take$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/Take$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/Take$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/Take$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/Take$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/Take$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/Take$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/Take$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/Take$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/Take$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/Take$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/Take$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/Take$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/Take$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "tap", "tail" : "(f: (Chunk[A]) => ZIO[R, E1, Any]): ZIO[R, E1, Unit]", "member" : "zio.stream.experimental.Take.tap", "link" : "zio\/stream\/experimental\/Take.html#tap[R,E1](f:zio.Chunk[A]=>zio.ZIO[R,E1,Any]):zio.ZIO[R,E1,Unit]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): Take[E, B]", "member" : "zio.stream.experimental.Take.map", "link" : "zio\/stream\/experimental\/Take.html#map[B](f:A=>B):zio.stream.experimental.Take[E,B]", "kind" : "def"}, {"label" : "isSuccess", "tail" : "(): Boolean", "member" : "zio.stream.experimental.Take.isSuccess", "link" : "zio\/stream\/experimental\/Take.html#isSuccess:Boolean", "kind" : "def"}, {"label" : "isFailure", "tail" : "(): Boolean", "member" : "zio.stream.experimental.Take.isFailure", "link" : "zio\/stream\/experimental\/Take.html#isFailure:Boolean", "kind" : "def"}, {"label" : "isDone", "tail" : "(): Boolean", "member" : "zio.stream.experimental.Take.isDone", "link" : "zio\/stream\/experimental\/Take.html#isDone:Boolean", "kind" : "def"}, {"label" : "foldZIO", "tail" : "(end: => ZIO[R, E1, Z], error: (Cause[E]) => ZIO[R, E1, Z], value: (Chunk[A]) => ZIO[R, E1, Z]): ZIO[R, E1, Z]", "member" : "zio.stream.experimental.Take.foldZIO", "link" : "zio\/stream\/experimental\/Take.html#foldZIO[R,E1,Z](end:=>zio.ZIO[R,E1,Z],error:zio.Cause[E]=>zio.ZIO[R,E1,Z],value:zio.Chunk[A]=>zio.ZIO[R,E1,Z]):zio.ZIO[R,E1,Z]", "kind" : "def"}, {"label" : "foldM", "tail" : "(end: => ZIO[R, E1, Z], error: (Cause[E]) => ZIO[R, E1, Z], value: (Chunk[A]) => ZIO[R, E1, Z]): ZIO[R, E1, Z]", "member" : "zio.stream.experimental.Take.foldM", "link" : "zio\/stream\/experimental\/Take.html#foldM[R,E1,Z](end:=>zio.ZIO[R,E1,Z],error:zio.Cause[E]=>zio.ZIO[R,E1,Z],value:zio.Chunk[A]=>zio.ZIO[R,E1,Z]):zio.ZIO[R,E1,Z]", "kind" : "def"}, {"label" : "fold", "tail" : "(end: => Z, error: (Cause[E]) => Z, value: (Chunk[A]) => Z): Z", "member" : "zio.stream.experimental.Take.fold", "link" : "zio\/stream\/experimental\/Take.html#fold[Z](end:=>Z,error:zio.Cause[E]=>Z,value:zio.Chunk[A]=>Z):Z", "kind" : "def"}, {"label" : "done", "tail" : "(): ZIO[R, Option[E], Chunk[A]]", "member" : "zio.stream.experimental.Take.done", "link" : "zio\/stream\/experimental\/Take.html#done[R]:zio.ZIO[R,Option[E],zio.Chunk[A]]", "kind" : "def"}, {"member" : "zio.stream.experimental.Take#<init>", "error" : "unsupported entity"}, {"label" : "exit", "tail" : ": Exit[Option[E], Chunk[A]]", "member" : "zio.stream.experimental.Take.exit", "link" : "zio\/stream\/experimental\/Take.html#exit:zio.Exit[Option[E],zio.Chunk[A]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/stream\/experimental\/Take.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "zio\/stream\/experimental\/Take.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "zio\/stream\/experimental\/Take.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/Take.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/Take.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "zio\/stream\/experimental\/Take.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "zio\/stream\/experimental\/Take.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "zio\/stream\/experimental\/Take.html", "kind" : "case class"}, {"name" : "zio.stream.experimental.ZChannel", "object" : "zio\/stream\/experimental\/ZChannel$.html", "members_object" : [{"label" : "MergeStrategy", "tail" : "", "member" : "zio.stream.experimental.ZChannel.MergeStrategy", "link" : "zio\/stream\/experimental\/ZChannel$.html#MergeStrategy", "kind" : "object"}, {"label" : "MergeStrategy", "tail" : "", "member" : "zio.stream.experimental.ZChannel.MergeStrategy", "link" : "zio\/stream\/experimental\/ZChannel$.html#MergeStrategyextendsAnyRef", "kind" : "sealed trait"}, {"label" : "toQueue", "tail" : "(queue: Enqueue[Exit[Either[Err, Done], Elem]]): ZChannel[Any, Err, Elem, Done, Nothing, Nothing, Any]", "member" : "zio.stream.experimental.ZChannel.toQueue", "link" : "zio\/stream\/experimental\/ZChannel$.html#toQueue[Err,Done,Elem](queue:zio.Enqueue[zio.Exit[Either[Err,Done],Elem]]):zio.stream.experimental.ZChannel[Any,Err,Elem,Done,Nothing,Nothing,Any]", "kind" : "def"}, {"label" : "toHub", "tail" : "(hub: Hub[Exit[Either[Err, Done], Elem]]): ZChannel[Any, Err, Elem, Done, Nothing, Nothing, Any]", "member" : "zio.stream.experimental.ZChannel.toHub", "link" : "zio\/stream\/experimental\/ZChannel$.html#toHub[Err,Done,Elem](hub:zio.Hub[zio.Exit[Either[Err,Done],Elem]]):zio.stream.experimental.ZChannel[Any,Err,Elem,Done,Nothing,Nothing,Any]", "kind" : "def"}, {"label" : "fromQueue", "tail" : "(queue: Dequeue[Exit[Either[Err, Done], Elem]]): ZChannel[Any, Any, Any, Any, Err, Elem, Done]", "member" : "zio.stream.experimental.ZChannel.fromQueue", "link" : "zio\/stream\/experimental\/ZChannel$.html#fromQueue[Err,Done,Elem](queue:zio.Dequeue[zio.Exit[Either[Err,Done],Elem]]):zio.stream.experimental.ZChannel[Any,Any,Any,Any,Err,Elem,Done]", "kind" : "def"}, {"label" : "fromInput", "tail" : "(input: AsyncInputConsumer[Err, Elem, Done]): ZChannel[Any, Any, Any, Any, Err, Elem, Done]", "member" : "zio.stream.experimental.ZChannel.fromInput", "link" : "zio\/stream\/experimental\/ZChannel$.html#fromInput[Err,Elem,Done](input:zio.stream.experimental.internal.AsyncInputConsumer[Err,Elem,Done]):zio.stream.experimental.ZChannel[Any,Any,Any,Any,Err,Elem,Done]", "kind" : "def"}, {"label" : "fromHub", "tail" : "(hub: Hub[Exit[Either[Err, Done], Elem]]): ZChannel[Any, Any, Any, Any, Err, Elem, Done]", "member" : "zio.stream.experimental.ZChannel.fromHub", "link" : "zio\/stream\/experimental\/ZChannel$.html#fromHub[Err,Done,Elem](hub:zio.Hub[zio.Exit[Either[Err,Done],Elem]]):zio.stream.experimental.ZChannel[Any,Any,Any,Any,Err,Elem,Done]", "kind" : "def"}, {"label" : "unwrapManaged", "tail" : "(channel: ZManaged[Env, OutErr, ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone]]): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.unwrapManaged", "link" : "zio\/stream\/experimental\/ZChannel$.html#unwrapManaged[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone](channel:zio.ZManaged[Env,OutErr,zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone]]):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone]", "kind" : "def"}, {"label" : "unwrap", "tail" : "(channel: ZIO[Env, OutErr, ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone]]): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.unwrap", "link" : "zio\/stream\/experimental\/ZChannel$.html#unwrap[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone](channel:zio.ZIO[Env,OutErr,zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone]]):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone]", "kind" : "def"}, {"label" : "unit", "tail" : ": ZChannel[Any, Any, Any, Any, Nothing, Nothing, Unit]", "member" : "zio.stream.experimental.ZChannel.unit", "link" : "zio\/stream\/experimental\/ZChannel$.html#unit:zio.stream.experimental.ZChannel[Any,Any,Any,Any,Nothing,Nothing,Unit]", "kind" : "val"}, {"label" : "succeed", "tail" : "(z: => Z): ZChannel[Any, Any, Any, Any, Nothing, Nothing, Z]", "member" : "zio.stream.experimental.ZChannel.succeed", "link" : "zio\/stream\/experimental\/ZChannel$.html#succeed[Z](z:=>Z):zio.stream.experimental.ZChannel[Any,Any,Any,Any,Nothing,Nothing,Z]", "kind" : "def"}, {"label" : "read", "tail" : "(): ZChannel[Any, Any, In, Any, None.type, Nothing, In]", "member" : "zio.stream.experimental.ZChannel.read", "link" : "zio\/stream\/experimental\/ZChannel$.html#read[In]:zio.stream.experimental.ZChannel[Any,Any,In,Any,None.type,Nothing,In]", "kind" : "def"}, {"label" : "readOrFail", "tail" : "(e: E): ZChannel[Any, Any, In, Any, E, Nothing, In]", "member" : "zio.stream.experimental.ZChannel.readOrFail", "link" : "zio\/stream\/experimental\/ZChannel$.html#readOrFail[E,In](e:E):zio.stream.experimental.ZChannel[Any,Any,In,Any,E,Nothing,In]", "kind" : "def"}, {"label" : "readWith", "tail" : "(in: (InElem) => ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone], error: (InErr) => ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone], done: (InDone) => ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone]): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.readWith", "link" : "zio\/stream\/experimental\/ZChannel$.html#readWith[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone](in:InElem=>zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone],error:InErr=>zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone],done:InDone=>zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone]):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone]", "kind" : "def"}, {"label" : "readWithCause", "tail" : "(in: (InElem) => ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone], halt: (Cause[InErr]) => ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone], done: (InDone) => ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone]): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.readWithCause", "link" : "zio\/stream\/experimental\/ZChannel$.html#readWithCause[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone](in:InElem=>zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone],halt:zio.Cause[InErr]=>zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone],done:InDone=>zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone]):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone]", "kind" : "def"}, {"label" : "mergeAllWith", "tail" : "(channels: ZChannel[Env, InErr, InElem, InDone, OutErr, ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone], OutDone], n: Int, bufferSize: Int, mergeStrategy: MergeStrategy)(f: (OutDone, OutDone) => OutDone): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.mergeAllWith", "link" : "zio\/stream\/experimental\/ZChannel$.html#mergeAllWith[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone](channels:zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone],OutDone],n:Int,bufferSize:Int,mergeStrategy:zio.stream.experimental.ZChannel.MergeStrategy)(f:(OutDone,OutDone)=>OutDone):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone]", "kind" : "def"}, {"label" : "mergeAllUnboundedWith", "tail" : "(channels: ZChannel[Env, InErr, InElem, InDone, OutErr, ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone], OutDone])(f: (OutDone, OutDone) => OutDone): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.mergeAllUnboundedWith", "link" : "zio\/stream\/experimental\/ZChannel$.html#mergeAllUnboundedWith[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone](channels:zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone],OutDone])(f:(OutDone,OutDone)=>OutDone):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone]", "kind" : "def"}, {"label" : "mergeAllUnbounded", "tail" : "(channels: ZChannel[Env, InErr, InElem, InDone, OutErr, ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, Any], Any]): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, Any]", "member" : "zio.stream.experimental.ZChannel.mergeAllUnbounded", "link" : "zio\/stream\/experimental\/ZChannel$.html#mergeAllUnbounded[Env,InErr,InElem,InDone,OutErr,OutElem](channels:zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,Any],Any]):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,Any]", "kind" : "def"}, {"label" : "mergeAll", "tail" : "(channels: ZChannel[Env, InErr, InElem, InDone, OutErr, ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, Any], Any], n: Int, bufferSize: Int, mergeStrategy: MergeStrategy): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, Any]", "member" : "zio.stream.experimental.ZChannel.mergeAll", "link" : "zio\/stream\/experimental\/ZChannel$.html#mergeAll[Env,InErr,InElem,InDone,OutErr,OutElem](channels:zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,Any],Any],n:Int,bufferSize:Int,mergeStrategy:zio.stream.experimental.ZChannel.MergeStrategy):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,Any]", "kind" : "def"}, {"label" : "managedOut", "tail" : "(m: ZManaged[R, E, A]): ZChannel[R, Any, Any, Any, E, A, Any]", "member" : "zio.stream.experimental.ZChannel.managedOut", "link" : "zio\/stream\/experimental\/ZChannel$.html#managedOut[R,E,A](m:zio.ZManaged[R,E,A]):zio.stream.experimental.ZChannel[R,Any,Any,Any,E,A,Any]", "kind" : "def"}, {"label" : "managed", "tail" : "(m: ZManaged[Env, OutErr, A])(use: (A) => ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone]): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.managed", "link" : "zio\/stream\/experimental\/ZChannel$.html#managed[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone,A](m:zio.ZManaged[Env,OutErr,A])(use:A=>zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone]):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone]", "kind" : "def"}, {"label" : "interrupt", "tail" : "(fiberId: FiberId): ZChannel[Any, Any, Any, Any, Nothing, Nothing, Nothing]", "member" : "zio.stream.experimental.ZChannel.interrupt", "link" : "zio\/stream\/experimental\/ZChannel$.html#interrupt(fiberId:zio.FiberId):zio.stream.experimental.ZChannel[Any,Any,Any,Any,Nothing,Nothing,Nothing]", "kind" : "def"}, {"label" : "identity", "tail" : "(): ZChannel[Any, Err, Elem, Done, Err, Elem, Done]", "member" : "zio.stream.experimental.ZChannel.identity", "link" : "zio\/stream\/experimental\/ZChannel$.html#identity[Err,Elem,Done]:zio.stream.experimental.ZChannel[Any,Err,Elem,Done,Err,Elem,Done]", "kind" : "def"}, {"label" : "failCause", "tail" : "(cause: => Cause[E]): ZChannel[Any, Any, Any, Any, E, Nothing, Nothing]", "member" : "zio.stream.experimental.ZChannel.failCause", "link" : "zio\/stream\/experimental\/ZChannel$.html#failCause[E](cause:=>zio.Cause[E]):zio.stream.experimental.ZChannel[Any,Any,Any,Any,E,Nothing,Nothing]", "kind" : "def"}, {"label" : "fromZIO", "tail" : "(zio: ZIO[R, E, A]): ZChannel[R, Any, Any, Any, E, Nothing, A]", "member" : "zio.stream.experimental.ZChannel.fromZIO", "link" : "zio\/stream\/experimental\/ZChannel$.html#fromZIO[R,E,A](zio:zio.ZIO[R,E,A]):zio.stream.experimental.ZChannel[R,Any,Any,Any,E,Nothing,A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(option: Option[A]): ZChannel[Any, Any, Any, Any, None.type, Nothing, A]", "member" : "zio.stream.experimental.ZChannel.fromOption", "link" : "zio\/stream\/experimental\/ZChannel$.html#fromOption[A](option:Option[A]):zio.stream.experimental.ZChannel[Any,Any,Any,Any,None.type,Nothing,A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(either: Either[E, A]): ZChannel[Any, Any, Any, Any, E, Nothing, A]", "member" : "zio.stream.experimental.ZChannel.fromEither", "link" : "zio\/stream\/experimental\/ZChannel$.html#fromEither[E,A](either:Either[E,A]):zio.stream.experimental.ZChannel[Any,Any,Any,Any,E,Nothing,A]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: => E): ZChannel[Any, Any, Any, Any, E, Nothing, Nothing]", "member" : "zio.stream.experimental.ZChannel.fail", "link" : "zio\/stream\/experimental\/ZChannel$.html#fail[E](e:=>E):zio.stream.experimental.ZChannel[Any,Any,Any,Any,E,Nothing,Nothing]", "kind" : "def"}, {"label" : "writeChunk", "tail" : "(outs: Chunk[Out]): ZChannel[Any, Any, Any, Any, Nothing, Out, Unit]", "member" : "zio.stream.experimental.ZChannel.writeChunk", "link" : "zio\/stream\/experimental\/ZChannel$.html#writeChunk[Out](outs:zio.Chunk[Out]):zio.stream.experimental.ZChannel[Any,Any,Any,Any,Nothing,Out,Unit]", "kind" : "def"}, {"label" : "writeAll", "tail" : "(outs: Out*): ZChannel[Any, Any, Any, Any, Nothing, Out, Unit]", "member" : "zio.stream.experimental.ZChannel.writeAll", "link" : "zio\/stream\/experimental\/ZChannel$.html#writeAll[Out](outs:Out*):zio.stream.experimental.ZChannel[Any,Any,Any,Any,Nothing,Out,Unit]", "kind" : "def"}, {"label" : "write", "tail" : "(out: Out): ZChannel[Any, Any, Any, Any, Nothing, Out, Unit]", "member" : "zio.stream.experimental.ZChannel.write", "link" : "zio\/stream\/experimental\/ZChannel$.html#write[Out](out:Out):zio.stream.experimental.ZChannel[Any,Any,Any,Any,Nothing,Out,Unit]", "kind" : "def"}, {"label" : "endWith", "tail" : "(f: (R) => Z): ZChannel[R, Any, Any, Any, Nothing, Nothing, Z]", "member" : "zio.stream.experimental.ZChannel.endWith", "link" : "zio\/stream\/experimental\/ZChannel$.html#endWith[R,Z](f:R=>Z):zio.stream.experimental.ZChannel[R,Any,Any,Any,Nothing,Nothing,Z]", "kind" : "def"}, {"label" : "end", "tail" : "(result: => Z): ZChannel[Any, Any, Any, Any, Nothing, Nothing, Z]", "member" : "zio.stream.experimental.ZChannel.end", "link" : "zio\/stream\/experimental\/ZChannel$.html#end[Z](result:=>Z):zio.stream.experimental.ZChannel[Any,Any,Any,Any,Nothing,Nothing,Z]", "kind" : "def"}, {"label" : "concatAllWith", "tail" : "(channels: ZChannel[Env, InErr, InElem, InDone, OutErr, ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone], OutDone2])(f: (OutDone, OutDone) => OutDone, g: (OutDone, OutDone2) => OutDone3): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone3]", "member" : "zio.stream.experimental.ZChannel.concatAllWith", "link" : "zio\/stream\/experimental\/ZChannel$.html#concatAllWith[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone,OutDone2,OutDone3](channels:zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone],OutDone2])(f:(OutDone,OutDone)=>OutDone,g:(OutDone,OutDone2)=>OutDone3):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone3]", "kind" : "def"}, {"label" : "concatAll", "tail" : "(channels: ZChannel[Env, InErr, InElem, InDone, OutErr, ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, Any], Any]): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, Any]", "member" : "zio.stream.experimental.ZChannel.concatAll", "link" : "zio\/stream\/experimental\/ZChannel$.html#concatAll[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone](channels:zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,Any],Any]):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,Any]", "kind" : "def"}, {"label" : "bufferChunk", "tail" : "(ref: Ref[Chunk[InElem]]): ZChannel[Any, InErr, Chunk[InElem], InDone, InErr, Chunk[InElem], InDone]", "member" : "zio.stream.experimental.ZChannel.bufferChunk", "link" : "zio\/stream\/experimental\/ZChannel$.html#bufferChunk[InErr,InElem,InDone](ref:zio.Ref[zio.Chunk[InElem]]):zio.stream.experimental.ZChannel[Any,InErr,zio.Chunk[InElem],InDone,InErr,zio.Chunk[InElem],InDone]", "kind" : "def"}, {"label" : "buffer", "tail" : "(empty: InElem, isEmpty: (InElem) => Boolean, ref: Ref[InElem]): ZChannel[Any, InErr, InElem, InDone, InErr, InElem, InDone]", "member" : "zio.stream.experimental.ZChannel.buffer", "link" : "zio\/stream\/experimental\/ZChannel$.html#buffer[InErr,InElem,InDone](empty:InElem,isEmpty:InElem=>Boolean,ref:zio.Ref[InElem]):zio.stream.experimental.ZChannel[Any,InErr,InElem,InDone,InErr,InElem,InDone]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: ZIO[Env, OutErr, Acquired])(release: (Acquired, Exit[OutErr, OutDone]) => URIO[Env, Any])(use: (Acquired) => ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem2, OutDone]): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem2, OutDone]", "member" : "zio.stream.experimental.ZChannel.acquireReleaseExitWith", "link" : "zio\/stream\/experimental\/ZChannel$.html#acquireReleaseExitWith[Env,InErr,InElem,InDone,OutErr,Acquired,OutElem2,OutDone](acquire:zio.ZIO[Env,OutErr,Acquired])(release:(Acquired,zio.Exit[OutErr,OutDone])=>zio.URIO[Env,Any])(use:Acquired=>zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem2,OutDone]):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem2,OutDone]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: ZIO[Env, OutErr, Acquired])(release: (Acquired) => URIO[Env, Any])(use: (Acquired) => ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem2, OutDone]): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem2, OutDone]", "member" : "zio.stream.experimental.ZChannel.acquireReleaseWith", "link" : "zio\/stream\/experimental\/ZChannel$.html#acquireReleaseWith[Env,InErr,InElem,InDone,OutErr,Acquired,OutElem2,OutDone](acquire:zio.ZIO[Env,OutErr,Acquired])(release:Acquired=>zio.URIO[Env,Any])(use:Acquired=>zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem2,OutDone]):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem2,OutDone]", "kind" : "def"}, {"label" : "acquireReleaseOutExitWith", "tail" : "(acquire: ZIO[Env, OutErr, Acquired])(release: (Acquired, Exit[Any, Any]) => URIO[Env, Any]): ZChannel[Env, Any, Any, Any, OutErr, Acquired, Unit]", "member" : "zio.stream.experimental.ZChannel.acquireReleaseOutExitWith", "link" : "zio\/stream\/experimental\/ZChannel$.html#acquireReleaseOutExitWith[Env,OutErr,Acquired](acquire:zio.ZIO[Env,OutErr,Acquired])(release:(Acquired,zio.Exit[Any,Any])=>zio.URIO[Env,Any]):zio.stream.experimental.ZChannel[Env,Any,Any,Any,OutErr,Acquired,Unit]", "kind" : "def"}, {"label" : "acquireReleaseOutWith", "tail" : "(acquire: ZIO[Env, OutErr, Acquired])(release: (Acquired) => URIO[Env, Any]): ZChannel[Env, Any, Any, Any, OutErr, Acquired, Unit]", "member" : "zio.stream.experimental.ZChannel.acquireReleaseOutWith", "link" : "zio\/stream\/experimental\/ZChannel$.html#acquireReleaseOutWith[Env,OutErr,Acquired](acquire:zio.ZIO[Env,OutErr,Acquired])(release:Acquired=>zio.URIO[Env,Any]):zio.stream.experimental.ZChannel[Env,Any,Any,Any,OutErr,Acquired,Unit]", "kind" : "def"}, {"label" : "MergeDecision", "tail" : "", "member" : "zio.stream.experimental.ZChannel.MergeDecision", "link" : "zio\/stream\/experimental\/ZChannel$.html#MergeDecision", "kind" : "object"}, {"label" : "MergeDecision", "tail" : "", "member" : "zio.stream.experimental.ZChannel.MergeDecision", "link" : "zio\/stream\/experimental\/ZChannel$.html#MergeDecision[-R,-E0,-Z0,+E,+Z]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "Fold", "tail" : "", "member" : "zio.stream.experimental.ZChannel.Fold", "link" : "zio\/stream\/experimental\/ZChannel$.html#Fold", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/ZChannel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/ZChannel$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/ZChannel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/ZChannel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/ZChannel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/ZChannel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/ZChannel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZChannel$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZChannel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZChannel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/ZChannel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/ZChannel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/ZChannel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/ZChannel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/ZChannel$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/ZChannel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/ZChannel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/ZChannel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/ZChannel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/stream\/experimental\/ZChannel.html", "kind" : "trait", "members_trait" : [{"label" : "zipRight", "tail" : "(that: => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2]", "member" : "zio.stream.experimental.ZChannel.zipRight", "link" : "zio\/stream\/experimental\/ZChannel.html#zipRight[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem1>:OutElem,OutDone2](that:=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2]", "kind" : "def"}, {"label" : "zipParRight", "tail" : "(that: => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2]", "member" : "zio.stream.experimental.ZChannel.zipParRight", "link" : "zio\/stream\/experimental\/ZChannel.html#zipParRight[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem1>:OutElem,OutDone2](that:=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2]", "kind" : "def"}, {"label" : "zipParLeft", "tail" : "(that: => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone]", "member" : "zio.stream.experimental.ZChannel.zipParLeft", "link" : "zio\/stream\/experimental\/ZChannel.html#zipParLeft[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem1>:OutElem,OutDone2](that:=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone]", "kind" : "def"}, {"label" : "zipPar", "tail" : "(that: => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2])(zippable: Zippable[OutDone, OutDone2]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, Out]", "member" : "zio.stream.experimental.ZChannel.zipPar", "link" : "zio\/stream\/experimental\/ZChannel.html#zipPar[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem1>:OutElem,OutDone2](that:=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2])(implicitzippable:zio.Zippable[OutDone,OutDone2]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,zippable.Out]", "kind" : "def"}, {"label" : "zipLeft", "tail" : "(that: => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone]", "member" : "zio.stream.experimental.ZChannel.zipLeft", "link" : "zio\/stream\/experimental\/ZChannel.html#zipLeft[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem1>:OutElem,OutDone2](that:=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone]", "kind" : "def"}, {"label" : "zipOutWith", "tail" : "(that: => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem2, OutDone2])(f: (OutElem, OutElem2) => OutElem3): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem3, (OutDone, OutDone2)]", "member" : "zio.stream.experimental.ZChannel.zipOutWith", "link" : "zio\/stream\/experimental\/ZChannel.html#zipOutWith[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem2,OutElem3,OutDone2](that:=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem2,OutDone2])(f:(OutElem,OutElem2)=>OutElem3):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem3,(OutDone,OutDone2)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2])(zippable: Zippable[OutDone, OutDone2]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, Out]", "member" : "zio.stream.experimental.ZChannel.zip", "link" : "zio\/stream\/experimental\/ZChannel.html#zip[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem1>:OutElem,OutDone2](that:=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2])(implicitzippable:zio.Zippable[OutDone,OutDone2]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,zippable.Out]", "kind" : "def"}, {"label" : "toPull", "tail" : "(): ZManaged[Env, Nothing, ZIO[Env, Either[OutErr, OutDone], OutElem]]", "member" : "zio.stream.experimental.ZChannel.toPull", "link" : "zio\/stream\/experimental\/ZChannel.html#toPull:zio.ZManaged[Env,Nothing,zio.ZIO[Env,Either[OutErr,OutDone],OutElem]]", "kind" : "def"}, {"label" : "unit", "tail" : "(): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, Unit]", "member" : "zio.stream.experimental.ZChannel.unit", "link" : "zio\/stream\/experimental\/ZChannel.html#unit:zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,Unit]", "kind" : "def"}, {"label" : "runDrain", "tail" : "(ev1: <:<[Any, InElem]): ZIO[Env, OutErr, OutDone]", "member" : "zio.stream.experimental.ZChannel.runDrain", "link" : "zio\/stream\/experimental\/ZChannel.html#runDrain(implicitev1:Any<:<InElem):zio.ZIO[Env,OutErr,OutDone]", "kind" : "def"}, {"label" : "runCollect", "tail" : "(ev1: <:<[Any, InElem]): ZIO[Env, OutErr, (Chunk[OutElem], OutDone)]", "member" : "zio.stream.experimental.ZChannel.runCollect", "link" : "zio\/stream\/experimental\/ZChannel.html#runCollect(implicitev1:Any<:<InElem):zio.ZIO[Env,OutErr,(zio.Chunk[OutElem],OutDone)]", "kind" : "def"}, {"label" : "run", "tail" : "(ev1: <:<[Any, InElem], ev2: <:<[OutElem, Nothing]): ZIO[Env, OutErr, OutDone]", "member" : "zio.stream.experimental.ZChannel.run", "link" : "zio\/stream\/experimental\/ZChannel.html#run(implicitev1:Any<:<InElem,implicitev2:OutElem<:<Nothing):zio.ZIO[Env,OutErr,OutDone]", "kind" : "def"}, {"label" : "runManaged", "tail" : "(ev1: <:<[Any, InElem], ev2: <:<[OutElem, Nothing]): ZManaged[Env, OutErr, OutDone]", "member" : "zio.stream.experimental.ZChannel.runManaged", "link" : "zio\/stream\/experimental\/ZChannel.html#runManaged(implicitev1:Any<:<InElem,implicitev2:OutElem<:<Nothing):zio.ZManaged[Env,OutErr,OutDone]", "kind" : "def"}, {"label" : "repeated", "tail" : "(): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, Nothing]", "member" : "zio.stream.experimental.ZChannel.repeated", "link" : "zio\/stream\/experimental\/ZChannel.html#repeated:zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,Nothing]", "kind" : "def"}, {"label" : "provide", "tail" : "(env: Env)(ev: NeedsEnv[Env]): ZChannel[Any, InErr, InElem, InDone, OutErr, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.provide", "link" : "zio\/stream\/experimental\/ZChannel.html#provide(env:Env)(implicitev:zio.NeedsEnv[Env]):zio.stream.experimental.ZChannel[Any,InErr,InElem,InDone,OutErr,OutElem,OutDone]", "kind" : "final def"}, {"label" : "pipeTo", "tail" : "(that: => ZChannel[Env1, OutErr, OutElem, OutDone, OutErr2, OutElem2, OutDone2]): ZChannel[Env1, InErr, InElem, InDone, OutErr2, OutElem2, OutDone2]", "member" : "zio.stream.experimental.ZChannel.pipeTo", "link" : "zio\/stream\/experimental\/ZChannel.html#pipeTo[Env1<:Env,OutErr2,OutElem2,OutDone2](that:=>zio.stream.experimental.ZChannel[Env1,OutErr,OutElem,OutDone,OutErr2,OutElem2,OutDone2]):zio.stream.experimental.ZChannel[Env1,InErr,InElem,InDone,OutErr2,OutElem2,OutDone2]", "kind" : "def"}, {"label" : "orDieWith", "tail" : "(f: (OutErr) => Throwable): ZChannel[Env, InErr, InElem, InDone, Nothing, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.orDieWith", "link" : "zio\/stream\/experimental\/ZChannel.html#orDieWith(f:OutErr=>Throwable):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,Nothing,OutElem,OutDone]", "kind" : "def"}, {"label" : "orDie", "tail" : "(ev: <:<[OutErr, Throwable]): ZChannel[Env, InErr, InElem, InDone, Nothing, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.orDie", "link" : "zio\/stream\/experimental\/ZChannel.html#orDie(implicitev:OutErr<:<Throwable):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,Nothing,OutElem,OutDone]", "kind" : "def"}, {"label" : "never", "tail" : ": ZChannel[Any, Any, Any, Any, Nothing, Nothing, Nothing]", "member" : "zio.stream.experimental.ZChannel.never", "link" : "zio\/stream\/experimental\/ZChannel.html#never:zio.stream.experimental.ZChannel[Any,Any,Any,Any,Nothing,Nothing,Nothing]", "kind" : "lazy val"}, {"label" : "mergeOutWith", "tail" : "(n: Int)(f: (OutDone1, OutDone1) => OutDone1)(ev: <:<[OutElem, ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem2, OutDone1]]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem2, OutDone1]", "member" : "zio.stream.experimental.ZChannel.mergeOutWith", "link" : "zio\/stream\/experimental\/ZChannel.html#mergeOutWith[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem2,OutDone1>:OutDone](n:Int)(f:(OutDone1,OutDone1)=>OutDone1)(implicitev:OutElem<:<zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem2,OutDone1]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem2,OutDone1]", "kind" : "def"}, {"label" : "mergeOut", "tail" : "(n: Int)(ev: <:<[OutElem, ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem2, Any]]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem2, Any]", "member" : "zio.stream.experimental.ZChannel.mergeOut", "link" : "zio\/stream\/experimental\/ZChannel.html#mergeOut[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem2](n:Int)(implicitev:OutElem<:<zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem2,Any]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem2,Any]", "kind" : "def"}, {"label" : "mapOutZIOPar", "tail" : "(n: Int)(f: (OutElem) => ZIO[Env1, OutErr1, OutElem2]): ZChannel[Env1, InErr, InElem, InDone, OutErr1, OutElem2, OutDone]", "member" : "zio.stream.experimental.ZChannel.mapOutZIOPar", "link" : "zio\/stream\/experimental\/ZChannel.html#mapOutZIOPar[Env1<:Env,OutErr1>:OutErr,OutElem2](n:Int)(f:OutElem=>zio.ZIO[Env1,OutErr1,OutElem2]):zio.stream.experimental.ZChannel[Env1,InErr,InElem,InDone,OutErr1,OutElem2,OutDone]", "kind" : "def"}, {"label" : "mapOutZIO", "tail" : "(f: (OutElem) => ZIO[Env1, OutErr1, OutElem2]): ZChannel[Env1, InErr, InElem, InDone, OutErr1, OutElem2, OutDone]", "member" : "zio.stream.experimental.ZChannel.mapOutZIO", "link" : "zio\/stream\/experimental\/ZChannel.html#mapOutZIO[Env1<:Env,OutErr1>:OutErr,OutElem2](f:OutElem=>zio.ZIO[Env1,OutErr1,OutElem2]):zio.stream.experimental.ZChannel[Env1,InErr,InElem,InDone,OutErr1,OutElem2,OutDone]", "kind" : "def"}, {"label" : "mapOut", "tail" : "(f: (OutElem) => OutElem2): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem2, OutDone]", "member" : "zio.stream.experimental.ZChannel.mapOut", "link" : "zio\/stream\/experimental\/ZChannel.html#mapOut[OutElem2](f:OutElem=>OutElem2):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem2,OutDone]", "kind" : "def"}, {"label" : "mergeMapWith", "tail" : "(n: Long)(f: (OutElem) => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem2, OutDone1])(g: (OutDone1, OutDone1) => OutDone1): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem2, OutDone1]", "member" : "zio.stream.experimental.ZChannel.mergeMapWith", "link" : "zio\/stream\/experimental\/ZChannel.html#mergeMapWith[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem2,OutDone1>:OutDone](n:Long)(f:OutElem=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem2,OutDone1])(g:(OutDone1,OutDone1)=>OutDone1):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem2,OutDone1]", "kind" : "def"}, {"label" : "mergeMap", "tail" : "(n: Int, bufferSize: Int, mergeStrategy: MergeStrategy)(f: (OutElem) => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem2, Any]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem2, Any]", "member" : "zio.stream.experimental.ZChannel.mergeMap", "link" : "zio\/stream\/experimental\/ZChannel.html#mergeMap[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem2](n:Int,bufferSize:Int,mergeStrategy:zio.stream.experimental.ZChannel.MergeStrategy)(f:OutElem=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem2,Any]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem2,Any]", "kind" : "def"}, {"label" : "mergeWith", "tail" : "(that: ZChannel[Env1, InErr1, InElem1, InDone1, OutErr2, OutElem1, OutDone2])(leftDone: (Exit[OutErr, OutDone]) => MergeDecision[Env1, OutErr2, OutDone2, OutErr3, OutDone3], rightDone: (Exit[OutErr2, OutDone2]) => MergeDecision[Env1, OutErr, OutDone, OutErr3, OutDone3]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr3, OutElem1, OutDone3]", "member" : "zio.stream.experimental.ZChannel.mergeWith", "link" : "zio\/stream\/experimental\/ZChannel.html#mergeWith[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr2,OutErr3,OutElem1>:OutElem,OutDone2,OutDone3](that:zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr2,OutElem1,OutDone2])(leftDone:zio.Exit[OutErr,OutDone]=>zio.stream.experimental.ZChannel.MergeDecision[Env1,OutErr2,OutDone2,OutErr3,OutDone3],rightDone:zio.Exit[OutErr2,OutDone2]=>zio.stream.experimental.ZChannel.MergeDecision[Env1,OutErr,OutDone,OutErr3,OutDone3]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr3,OutElem1,OutDone3]", "kind" : "final def"}, {"label" : "mapZIO", "tail" : "(f: (OutDone) => ZIO[Env1, OutErr1, OutDone2]): ZChannel[Env1, InErr, InElem, InDone, OutErr1, OutElem, OutDone2]", "member" : "zio.stream.experimental.ZChannel.mapZIO", "link" : "zio\/stream\/experimental\/ZChannel.html#mapZIO[Env1<:Env,OutErr1>:OutErr,OutDone2](f:OutDone=>zio.ZIO[Env1,OutErr1,OutDone2]):zio.stream.experimental.ZChannel[Env1,InErr,InElem,InDone,OutErr1,OutElem,OutDone2]", "kind" : "final def"}, {"label" : "mapErrorCause", "tail" : "(f: (Cause[OutErr]) => Cause[OutErr2]): ZChannel[Env, InErr, InElem, InDone, OutErr2, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.mapErrorCause", "link" : "zio\/stream\/experimental\/ZChannel.html#mapErrorCause[OutErr2](f:zio.Cause[OutErr]=>zio.Cause[OutErr2]):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr2,OutElem,OutDone]", "kind" : "final def"}, {"label" : "mapError", "tail" : "(f: (OutErr) => OutErr2): ZChannel[Env, InErr, InElem, InDone, OutErr2, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.mapError", "link" : "zio\/stream\/experimental\/ZChannel.html#mapError[OutErr2](f:OutErr=>OutErr2):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr2,OutElem,OutDone]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (OutDone) => OutDone2): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone2]", "member" : "zio.stream.experimental.ZChannel.map", "link" : "zio\/stream\/experimental\/ZChannel.html#map[OutDone2](f:OutDone=>OutDone2):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone2]", "kind" : "final def"}, {"label" : "orElse", "tail" : "(that: => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr2, OutElem1, OutDone1]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr2, OutElem1, OutDone1]", "member" : "zio.stream.experimental.ZChannel.orElse", "link" : "zio\/stream\/experimental\/ZChannel.html#orElse[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr2,OutElem1>:OutElem,OutDone1>:OutDone](that:=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr2,OutElem1,OutDone1]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr2,OutElem1,OutDone1]", "kind" : "final def"}, {"label" : "foldCauseChannel", "tail" : "(onErr: (Cause[OutErr]) => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone1], onSucc: (OutDone) => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone1]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone1]", "member" : "zio.stream.experimental.ZChannel.foldCauseChannel", "link" : "zio\/stream\/experimental\/ZChannel.html#foldCauseChannel[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1,OutElem1>:OutElem,OutDone1](onErr:zio.Cause[OutErr]=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone1],onSucc:OutDone=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone1]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone1]", "kind" : "final def"}, {"label" : "foldChannel", "tail" : "(onErr: (OutErr) => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone1], onSucc: (OutDone) => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone1]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone1]", "member" : "zio.stream.experimental.ZChannel.foldChannel", "link" : "zio\/stream\/experimental\/ZChannel.html#foldChannel[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1,OutElem1>:OutElem,OutDone1](onErr:OutErr=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone1],onSucc:OutDone=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone1]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone1]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[OutDone, ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2]]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2]", "member" : "zio.stream.experimental.ZChannel.flatten", "link" : "zio\/stream\/experimental\/ZChannel.html#flatten[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem1>:OutElem,OutDone2](implicitev:OutDone<:<zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (OutDone) => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2]", "member" : "zio.stream.experimental.ZChannel.flatMap", "link" : "zio\/stream\/experimental\/ZChannel.html#flatMap[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem1>:OutElem,OutDone2](f:OutDone=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2]", "kind" : "final def"}, {"label" : "ensuring", "tail" : "(finalizer: URIO[Env1, Any]): ZChannel[Env1, InErr, InElem, InDone, OutErr, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.ensuring", "link" : "zio\/stream\/experimental\/ZChannel.html#ensuring[Env1<:Env](finalizer:zio.URIO[Env1,Any]):zio.stream.experimental.ZChannel[Env1,InErr,InElem,InDone,OutErr,OutElem,OutDone]", "kind" : "final def"}, {"label" : "ensuringWith", "tail" : "(finalizer: (Exit[OutErr, OutDone]) => URIO[Env1, Any]): ZChannel[Env1, InErr, InElem, InDone, OutErr, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.ensuringWith", "link" : "zio\/stream\/experimental\/ZChannel.html#ensuringWith[Env1<:Env](finalizer:zio.Exit[OutErr,OutDone]=>zio.URIO[Env1,Any]):zio.stream.experimental.ZChannel[Env1,InErr,InElem,InDone,OutErr,OutElem,OutDone]", "kind" : "final def"}, {"label" : "emitCollect", "tail" : "(): ZChannel[Env, InErr, InElem, InDone, OutErr, (Chunk[OutElem], OutDone), Unit]", "member" : "zio.stream.experimental.ZChannel.emitCollect", "link" : "zio\/stream\/experimental\/ZChannel.html#emitCollect:zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,(zio.Chunk[OutElem],OutDone),Unit]", "kind" : "final def"}, {"label" : "interruptWhen", "tail" : "(promise: Promise[OutErr1, OutDone1]): ZChannel[Env, InErr, InElem, InDone, OutErr1, OutElem, OutDone1]", "member" : "zio.stream.experimental.ZChannel.interruptWhen", "link" : "zio\/stream\/experimental\/ZChannel.html#interruptWhen[OutErr1>:OutErr,OutDone1>:OutDone](promise:zio.Promise[OutErr1,OutDone1]):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr1,OutElem,OutDone1]", "kind" : "final def"}, {"label" : "interruptWhen", "tail" : "(io: ZIO[Env1, OutErr1, OutDone1]): ZChannel[Env1, InErr, InElem, InDone, OutErr1, OutElem, OutDone1]", "member" : "zio.stream.experimental.ZChannel.interruptWhen", "link" : "zio\/stream\/experimental\/ZChannel.html#interruptWhen[Env1<:Env,OutErr1>:OutErr,OutDone1>:OutDone](io:zio.ZIO[Env1,OutErr1,OutDone1]):zio.stream.experimental.ZChannel[Env1,InErr,InElem,InDone,OutErr1,OutElem,OutDone1]", "kind" : "final def"}, {"label" : "embedInput", "tail" : "(input: AsyncInputProducer[InErr2, InElem2, InDone2])(noInputErrors: <:<[Any, InErr], noInputElements: <:<[Any, InElem], noInputDone: <:<[Any, InDone]): ZChannel[Env, InErr2, InElem2, InDone2, OutErr, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.embedInput", "link" : "zio\/stream\/experimental\/ZChannel.html#embedInput[InErr2,InElem2,InDone2](input:zio.stream.experimental.internal.AsyncInputProducer[InErr2,InElem2,InDone2])(implicitnoInputErrors:Any<:<InErr,implicitnoInputElements:Any<:<InElem,implicitnoInputDone:Any<:<InDone):zio.stream.experimental.ZChannel[Env,InErr2,InElem2,InDone2,OutErr,OutElem,OutDone]", "kind" : "def"}, {"label" : "drain", "tail" : "(): ZChannel[Env, InErr, InElem, InDone, OutErr, Nothing, OutDone]", "member" : "zio.stream.experimental.ZChannel.drain", "link" : "zio\/stream\/experimental\/ZChannel.html#drain:zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,Nothing,OutDone]", "kind" : "def"}, {"label" : "doneCollect", "tail" : "(): ZChannel[Env, InErr, InElem, InDone, OutErr, Nothing, (Chunk[OutElem], OutDone)]", "member" : "zio.stream.experimental.ZChannel.doneCollect", "link" : "zio\/stream\/experimental\/ZChannel.html#doneCollect:zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,Nothing,(zio.Chunk[OutElem],OutDone)]", "kind" : "def"}, {"label" : "contramapZIO", "tail" : "(f: (InDone0) => ZIO[Env1, InErr, InDone]): ZChannel[Env1, InErr, InElem, InDone0, OutErr, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.contramapZIO", "link" : "zio\/stream\/experimental\/ZChannel.html#contramapZIO[InDone0,Env1<:Env](f:InDone0=>zio.ZIO[Env1,InErr,InDone]):zio.stream.experimental.ZChannel[Env1,InErr,InElem,InDone0,OutErr,OutElem,OutDone]", "kind" : "def"}, {"label" : "contramapInZIO", "tail" : "(f: (InElem0) => ZIO[Env1, InErr, InElem]): ZChannel[Env1, InErr, InElem0, InDone, OutErr, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.contramapInZIO", "link" : "zio\/stream\/experimental\/ZChannel.html#contramapInZIO[InElem0,Env1<:Env](f:InElem0=>zio.ZIO[Env1,InErr,InElem]):zio.stream.experimental.ZChannel[Env1,InErr,InElem0,InDone,OutErr,OutElem,OutDone]", "kind" : "def"}, {"label" : "contramapIn", "tail" : "(f: (InElem0) => InElem): ZChannel[Env, InErr, InElem0, InDone, OutErr, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.contramapIn", "link" : "zio\/stream\/experimental\/ZChannel.html#contramapIn[InElem0](f:InElem0=>InElem):zio.stream.experimental.ZChannel[Env,InErr,InElem0,InDone,OutErr,OutElem,OutDone]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (InDone0) => InDone): ZChannel[Env, InErr, InElem, InDone0, OutErr, OutElem, OutDone]", "member" : "zio.stream.experimental.ZChannel.contramap", "link" : "zio\/stream\/experimental\/ZChannel.html#contramap[InDone0](f:InDone0=>InDone):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone0,OutErr,OutElem,OutDone]", "kind" : "def"}, {"label" : "concatOut", "tail" : "(ev: <:<[OutElem, ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem2, Any]]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem2, Any]", "member" : "zio.stream.experimental.ZChannel.concatOut", "link" : "zio\/stream\/experimental\/ZChannel.html#concatOut[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem2](implicitev:OutElem<:<zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem2,Any]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem2,Any]", "kind" : "final def"}, {"label" : "collect", "tail" : "(f: PartialFunction[OutElem, OutElem2]): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem2, OutDone]", "member" : "zio.stream.experimental.ZChannel.collect", "link" : "zio\/stream\/experimental\/ZChannel.html#collect[OutElem2](f:PartialFunction[OutElem,OutElem2]):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem2,OutDone]", "kind" : "final def"}, {"label" : "concatMapWith", "tail" : "(f: (OutElem) => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem2, OutDone2])(g: (OutDone2, OutDone2) => OutDone2, h: (OutDone2, OutDone) => OutDone3): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem2, OutDone3]", "member" : "zio.stream.experimental.ZChannel.concatMapWith", "link" : "zio\/stream\/experimental\/ZChannel.html#concatMapWith[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem2,OutDone2,OutDone3](f:OutElem=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem2,OutDone2])(g:(OutDone2,OutDone2)=>OutDone2,h:(OutDone2,OutDone)=>OutDone3):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem2,OutDone3]", "kind" : "final def"}, {"label" : "concatMap", "tail" : "(f: (OutElem) => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem2, Any]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem2, Any]", "member" : "zio.stream.experimental.ZChannel.concatMap", "link" : "zio\/stream\/experimental\/ZChannel.html#concatMap[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem2](f:OutElem=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem2,Any]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem2,Any]", "kind" : "final def"}, {"label" : "catchAllCause", "tail" : "(f: (Cause[OutErr]) => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr2, OutElem1, OutDone1]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr2, OutElem1, OutDone1]", "member" : "zio.stream.experimental.ZChannel.catchAllCause", "link" : "zio\/stream\/experimental\/ZChannel.html#catchAllCause[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr2,OutElem1>:OutElem,OutDone1>:OutDone](f:zio.Cause[OutErr]=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr2,OutElem1,OutDone1]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr2,OutElem1,OutDone1]", "kind" : "final def"}, {"label" : "catchAll", "tail" : "(f: (OutErr) => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr2, OutElem1, OutDone1]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr2, OutElem1, OutDone1]", "member" : "zio.stream.experimental.ZChannel.catchAll", "link" : "zio\/stream\/experimental\/ZChannel.html#catchAll[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr2,OutElem1>:OutElem,OutDone1>:OutDone](f:OutErr=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr2,OutElem1,OutDone1]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr2,OutElem1,OutDone1]", "kind" : "final def"}, {"label" : "as", "tail" : "(z2: => OutDone2): ZChannel[Env, InErr, InElem, InDone, OutErr, OutElem, OutDone2]", "member" : "zio.stream.experimental.ZChannel.as", "link" : "zio\/stream\/experimental\/ZChannel.html#as[OutDone2](z2:=>OutDone2):zio.stream.experimental.ZChannel[Env,InErr,InElem,InDone,OutErr,OutElem,OutDone2]", "kind" : "final def"}, {"label" : ">>>", "tail" : "(that: => ZChannel[Env1, OutErr, OutElem, OutDone, OutErr2, OutElem2, OutDone2]): ZChannel[Env1, InErr, InElem, InDone, OutErr2, OutElem2, OutDone2]", "member" : "zio.stream.experimental.ZChannel.>>>", "link" : "zio\/stream\/experimental\/ZChannel.html#>>>[Env1<:Env,OutErr2,OutElem2,OutDone2](that:=>zio.stream.experimental.ZChannel[Env1,OutErr,OutElem,OutDone,OutErr2,OutElem2,OutDone2]):zio.stream.experimental.ZChannel[Env1,InErr,InElem,InDone,OutErr2,OutElem2,OutDone2]", "kind" : "final def"}, {"label" : "<*", "tail" : "(that: => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone]", "member" : "zio.stream.experimental.ZChannel.<*", "link" : "zio\/stream\/experimental\/ZChannel.html#<*[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem1>:OutElem,OutDone2](that:=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone]", "kind" : "final def"}, {"label" : "*>", "tail" : "(that: => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2]", "member" : "zio.stream.experimental.ZChannel.*>", "link" : "zio\/stream\/experimental\/ZChannel.html#*>[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem1>:OutElem,OutDone2](that:=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(that: => ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, OutDone2])(zippable: Zippable[OutDone, OutDone2]): ZChannel[Env1, InErr1, InElem1, InDone1, OutErr1, OutElem1, Out]", "member" : "zio.stream.experimental.ZChannel.<*>", "link" : "zio\/stream\/experimental\/ZChannel.html#<*>[Env1<:Env,InErr1<:InErr,InElem1<:InElem,InDone1<:InDone,OutErr1>:OutErr,OutElem1>:OutElem,OutDone2](that:=>zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,OutDone2])(implicitzippable:zio.Zippable[OutDone,OutDone2]):zio.stream.experimental.ZChannel[Env1,InErr1,InElem1,InDone1,OutErr1,OutElem1,zippable.Out]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/ZChannel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/ZChannel.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/ZChannel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/ZChannel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/ZChannel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/ZChannel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/ZChannel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZChannel.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZChannel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZChannel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/ZChannel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/ZChannel.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/ZChannel.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/ZChannel.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/ZChannel.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/ZChannel.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/ZChannel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/ZChannel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/ZChannel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "A ZChannel[In, Env, Err, Out, Z] is a nexus of I\/O operations, which supports both reading andwriting."}, {"name" : "zio.stream.experimental.ZPipeline", "object" : "zio\/stream\/experimental\/ZPipeline$.html", "members_object" : [{"label" : "takeWhile", "tail" : "(f: (In) => Boolean): ZPipeline[Any, Nothing, In, In]", "member" : "zio.stream.experimental.ZPipeline.takeWhile", "link" : "zio\/stream\/experimental\/ZPipeline$.html#takeWhile[In](f:In=>Boolean):zio.stream.experimental.ZPipeline[Any,Nothing,In,In]", "kind" : "def"}, {"label" : "takeUntil", "tail" : "(f: (In) => Boolean): ZPipeline[Any, Nothing, In, In]", "member" : "zio.stream.experimental.ZPipeline.takeUntil", "link" : "zio\/stream\/experimental\/ZPipeline$.html#takeUntil[In](f:In=>Boolean):zio.stream.experimental.ZPipeline[Any,Nothing,In,In]", "kind" : "def"}, {"label" : "succeed", "tail" : "(a: => A): ZPipeline[Any, Nothing, Any, A]", "member" : "zio.stream.experimental.ZPipeline.succeed", "link" : "zio\/stream\/experimental\/ZPipeline$.html#succeed[A](a:=>A):zio.stream.experimental.ZPipeline[Any,Nothing,Any,A]", "kind" : "def"}, {"label" : "mapZIO", "tail" : "(f: (In) => ZIO[Env0, Err0, Out]): ZPipeline[Env0, Err0, In, Out]", "member" : "zio.stream.experimental.ZPipeline.mapZIO", "link" : "zio\/stream\/experimental\/ZPipeline$.html#mapZIO[Env0,Err0,In,Out](f:In=>zio.ZIO[Env0,Err0,Out]):zio.stream.experimental.ZPipeline[Env0,Err0,In,Out]", "kind" : "def"}, {"label" : "mapM", "tail" : "(f: (In) => ZIO[Env0, Err0, Out]): ZPipeline[Env0, Err0, In, Out]", "member" : "zio.stream.experimental.ZPipeline.mapM", "link" : "zio\/stream\/experimental\/ZPipeline$.html#mapM[Env0,Err0,In,Out](f:In=>zio.ZIO[Env0,Err0,Out]):zio.stream.experimental.ZPipeline[Env0,Err0,In,Out]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (In) => Out): ZPipeline[Any, Nothing, In, Out]", "member" : "zio.stream.experimental.ZPipeline.map", "link" : "zio\/stream\/experimental\/ZPipeline$.html#map[In,Out](f:In=>Out):zio.stream.experimental.ZPipeline[Any,Nothing,In,Out]", "kind" : "def"}, {"label" : "identity", "tail" : "(): ZPipeline[Any, Nothing, A, A]", "member" : "zio.stream.experimental.ZPipeline.identity", "link" : "zio\/stream\/experimental\/ZPipeline$.html#identity[A]:zio.stream.experimental.ZPipeline[Any,Nothing,A,A]", "kind" : "def"}, {"label" : "halt", "tail" : "(cause: => Cause[E]): ZPipeline[Any, E, Any, Nothing]", "member" : "zio.stream.experimental.ZPipeline.halt", "link" : "zio\/stream\/experimental\/ZPipeline$.html#halt[E](cause:=>zio.Cause[E]):zio.stream.experimental.ZPipeline[Any,E,Any,Nothing]", "kind" : "def"}, {"label" : "fromZIO", "tail" : "(zio: ZIO[R, E, A]): ZPipeline[R, E, Any, A]", "member" : "zio.stream.experimental.ZPipeline.fromZIO", "link" : "zio\/stream\/experimental\/ZPipeline$.html#fromZIO[R,E,A](zio:zio.ZIO[R,E,A]):zio.stream.experimental.ZPipeline[R,E,Any,A]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(zio: ZIO[R, E, A]): ZPipeline[R, E, Any, A]", "member" : "zio.stream.experimental.ZPipeline.fromEffect", "link" : "zio\/stream\/experimental\/ZPipeline$.html#fromEffect[R,E,A](zio:zio.ZIO[R,E,A]):zio.stream.experimental.ZPipeline[R,E,Any,A]", "kind" : "def"}, {"label" : "foldZIO", "tail" : "(out0: O)(contFn: (O) => Boolean)(f: (O, I) => ZIO[R, E, O]): ZPipeline[R, E, I, O]", "member" : "zio.stream.experimental.ZPipeline.foldZIO", "link" : "zio\/stream\/experimental\/ZPipeline$.html#foldZIO[R,E,I,O](out0:O)(contFn:O=>Boolean)(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.experimental.ZPipeline[R,E,I,O]", "kind" : "def"}, {"label" : "foldUntilZIO", "tail" : "(z: O, max: Long)(f: (O, I) => ZIO[R, E, O]): ZPipeline[R, E, I, O]", "member" : "zio.stream.experimental.ZPipeline.foldUntilZIO", "link" : "zio\/stream\/experimental\/ZPipeline$.html#foldUntilZIO[R,E,I,O](z:O,max:Long)(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.experimental.ZPipeline[R,E,I,O]", "kind" : "def"}, {"label" : "foldUntilM", "tail" : "(z: O, max: Long)(f: (O, I) => ZIO[R, E, O]): ZPipeline[R, E, I, O]", "member" : "zio.stream.experimental.ZPipeline.foldUntilM", "link" : "zio\/stream\/experimental\/ZPipeline$.html#foldUntilM[R,E,I,O](z:O,max:Long)(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.experimental.ZPipeline[R,E,I,O]", "kind" : "def"}, {"label" : "foldUntil", "tail" : "(z: O, max: Long)(f: (O, I) => O): ZPipeline[Any, Nothing, I, O]", "member" : "zio.stream.experimental.ZPipeline.foldUntil", "link" : "zio\/stream\/experimental\/ZPipeline$.html#foldUntil[I,O](z:O,max:Long)(f:(O,I)=>O):zio.stream.experimental.ZPipeline[Any,Nothing,I,O]", "kind" : "def"}, {"label" : "foldM", "tail" : "(out0: O)(contFn: (O) => Boolean)(f: (O, I) => ZIO[R, E, O]): ZPipeline[R, E, I, O]", "member" : "zio.stream.experimental.ZPipeline.foldM", "link" : "zio\/stream\/experimental\/ZPipeline$.html#foldM[R,E,I,O](out0:O)(contFn:O=>Boolean)(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.experimental.ZPipeline[R,E,I,O]", "kind" : "def"}, {"label" : "fold", "tail" : "(out0: O)(contFn: (O) => Boolean)(f: (O, I) => O): ZPipeline[Any, Nothing, I, O]", "member" : "zio.stream.experimental.ZPipeline.fold", "link" : "zio\/stream\/experimental\/ZPipeline$.html#fold[I,O](out0:O)(contFn:O=>Boolean)(f:(O,I)=>O):zio.stream.experimental.ZPipeline[Any,Nothing,I,O]", "kind" : "def"}, {"label" : "foldLeftZIO", "tail" : "(z: O)(f: (O, I) => ZIO[R, E, O]): ZPipeline[R, E, I, O]", "member" : "zio.stream.experimental.ZPipeline.foldLeftZIO", "link" : "zio\/stream\/experimental\/ZPipeline$.html#foldLeftZIO[R,E,I,O](z:O)(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.experimental.ZPipeline[R,E,I,O]", "kind" : "def"}, {"label" : "foldLeftM", "tail" : "(z: O)(f: (O, I) => ZIO[R, E, O]): ZPipeline[R, E, I, O]", "member" : "zio.stream.experimental.ZPipeline.foldLeftM", "link" : "zio\/stream\/experimental\/ZPipeline$.html#foldLeftM[R,E,I,O](z:O)(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.experimental.ZPipeline[R,E,I,O]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: Out)(f: (Out, In) => Out): ZPipeline[Any, Nothing, In, Out]", "member" : "zio.stream.experimental.ZPipeline.foldLeft", "link" : "zio\/stream\/experimental\/ZPipeline$.html#foldLeft[In,Out](z:Out)(f:(Out,In)=>Out):zio.stream.experimental.ZPipeline[Any,Nothing,In,Out]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (In) => Boolean): ZPipeline[Any, Nothing, In, In]", "member" : "zio.stream.experimental.ZPipeline.filter", "link" : "zio\/stream\/experimental\/ZPipeline$.html#filter[In](f:In=>Boolean):zio.stream.experimental.ZPipeline[Any,Nothing,In,In]", "kind" : "def"}, {"label" : "failCause", "tail" : "(cause: => Cause[E]): ZPipeline[Any, E, Any, Nothing]", "member" : "zio.stream.experimental.ZPipeline.failCause", "link" : "zio\/stream\/experimental\/ZPipeline$.html#failCause[E](cause:=>zio.Cause[E]):zio.stream.experimental.ZPipeline[Any,E,Any,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: => E): ZPipeline[Any, E, Any, Nothing]", "member" : "zio.stream.experimental.ZPipeline.fail", "link" : "zio\/stream\/experimental\/ZPipeline$.html#fail[E](e:=>E):zio.stream.experimental.ZPipeline[Any,E,Any,Nothing]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(f: (In) => Boolean): ZPipeline[Any, Nothing, In, In]", "member" : "zio.stream.experimental.ZPipeline.dropWhile", "link" : "zio\/stream\/experimental\/ZPipeline$.html#dropWhile[In](f:In=>Boolean):zio.stream.experimental.ZPipeline[Any,Nothing,In,In]", "kind" : "def"}, {"label" : "dropUntil", "tail" : "(f: (In) => Boolean): ZPipeline[Any, Nothing, In, In]", "member" : "zio.stream.experimental.ZPipeline.dropUntil", "link" : "zio\/stream\/experimental\/ZPipeline$.html#dropUntil[In](f:In=>Boolean):zio.stream.experimental.ZPipeline[Any,Nothing,In,In]", "kind" : "def"}, {"label" : "die", "tail" : "(e: => Throwable): ZPipeline[Any, Nothing, Any, Nothing]", "member" : "zio.stream.experimental.ZPipeline.die", "link" : "zio\/stream\/experimental\/ZPipeline$.html#die(e:=>Throwable):zio.stream.experimental.ZPipeline[Any,Nothing,Any,Nothing]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[In, Out]): ZPipeline[Any, Nothing, In, Out]", "member" : "zio.stream.experimental.ZPipeline.collect", "link" : "zio\/stream\/experimental\/ZPipeline$.html#collect[In,Out](f:PartialFunction[In,Out]):zio.stream.experimental.ZPipeline[Any,Nothing,In,Out]", "kind" : "def"}, {"label" : "apply", "tail" : "(): ZPipeline[Any, Nothing, I, I]", "member" : "zio.stream.experimental.ZPipeline.apply", "link" : "zio\/stream\/experimental\/ZPipeline$.html#apply[I]:zio.stream.experimental.ZPipeline[Any,Nothing,I,I]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/ZPipeline$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/ZPipeline$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/ZPipeline$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/ZPipeline$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/ZPipeline$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/ZPipeline$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/ZPipeline$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZPipeline$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZPipeline$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZPipeline$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/ZPipeline$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/ZPipeline$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/ZPipeline$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/ZPipeline$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/ZPipeline$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/ZPipeline$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/ZPipeline$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/ZPipeline$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/ZPipeline$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/stream\/experimental\/ZPipeline.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(that: ZPipeline[Env1, Err1, In2, In]): ZPipeline[Env1, Err1, In2, Out]", "member" : "zio.stream.experimental.ZPipeline.compose", "link" : "zio\/stream\/experimental\/ZPipeline.html#compose[Env1<:Env,Err1>:Err,In2](that:zio.stream.experimental.ZPipeline[Env1,Err1,In2,In]):zio.stream.experimental.ZPipeline[Env1,Err1,In2,Out]", "kind" : "final def"}, {"label" : "andThen", "tail" : "(that: ZPipeline[Env1, Err1, Out, Out2]): ZPipeline[Env1, Err1, In, Out2]", "member" : "zio.stream.experimental.ZPipeline.andThen", "link" : "zio\/stream\/experimental\/ZPipeline.html#andThen[Env1<:Env,Err1>:Err,Out2](that:zio.stream.experimental.ZPipeline[Env1,Err1,Out,Out2]):zio.stream.experimental.ZPipeline[Env1,Err1,In,Out2]", "kind" : "final def"}, {"label" : "<<<", "tail" : "(that: ZPipeline[Env1, Err1, In2, In]): ZPipeline[Env1, Err1, In2, Out]", "member" : "zio.stream.experimental.ZPipeline.<<<", "link" : "zio\/stream\/experimental\/ZPipeline.html#<<<[Env1<:Env,Err1>:Err,In2](that:zio.stream.experimental.ZPipeline[Env1,Err1,In2,In]):zio.stream.experimental.ZPipeline[Env1,Err1,In2,Out]", "kind" : "final def"}, {"label" : ">>>", "tail" : "(that: ZPipeline[Env1, Err1, Out, Out2]): ZPipeline[Env1, Err1, In, Out2]", "member" : "zio.stream.experimental.ZPipeline.>>>", "link" : "zio\/stream\/experimental\/ZPipeline.html#>>>[Env1<:Env,Err1>:Err,Out2](that:zio.stream.experimental.ZPipeline[Env1,Err1,Out,Out2]):zio.stream.experimental.ZPipeline[Env1,Err1,In,Out2]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/ZPipeline.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/ZPipeline.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/ZPipeline.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/ZPipeline.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/ZPipeline.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/ZPipeline.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/ZPipeline.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZPipeline.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZPipeline.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZPipeline.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/ZPipeline.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/ZPipeline.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/ZPipeline.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/ZPipeline.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/ZPipeline.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/ZPipeline.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/ZPipeline.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/ZPipeline.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/ZPipeline.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(stream: ZStream[Env1, Err1, In]): ZStream[Env1, Err1, Out]", "member" : "zio.stream.experimental.ZPipeline.apply", "link" : "zio\/stream\/experimental\/ZPipeline.html#apply[Env1<:Env,Err1>:Err](stream:zio.stream.experimental.ZStream[Env1,Err1,In]):zio.stream.experimental.ZStream[Env1,Err1,Out]", "kind" : "abstract def"}], "shortDescription" : "A ZPipeline[Env, Err, In, Out] is a polymorphic stream transformer."}, {"name" : "zio.stream.experimental.ZSink", "shortDescription" : "", "object" : "zio\/stream\/experimental\/ZSink$.html", "members_class" : [{"label" : "provide", "tail" : "(r: R)(ev: NeedsEnv[R]): ZSink[Any, InErr, In, OutErr, L, Z]", "member" : "zio.stream.experimental.ZSink.provide", "link" : "zio\/stream\/experimental\/ZSink.html#provide(r:R)(implicitev:zio.NeedsEnv[R]):zio.stream.experimental.ZSink[Any,InErr,In,OutErr,L,Z]", "kind" : "def"}, {"label" : "untilOutputZIO", "tail" : "(f: (Z) => ZIO[R1, OutErr1, Boolean])(ev: <:<[L, In]): ZSink[R1, InErr, In, OutErr1, L, Option[Z]]", "member" : "zio.stream.experimental.ZSink.untilOutputZIO", "link" : "zio\/stream\/experimental\/ZSink.html#untilOutputZIO[R1<:R,OutErr1>:OutErr](f:Z=>zio.ZIO[R1,OutErr1,Boolean])(implicitev:L<:<In):zio.stream.experimental.ZSink[R1,InErr,In,OutErr1,L,Option[Z]]", "kind" : "def"}, {"label" : "untilOutputM", "tail" : "(f: (Z) => ZIO[R1, OutErr1, Boolean])(ev: <:<[L, In]): ZSink[R1, InErr, In, OutErr1, L, Option[Z]]", "member" : "zio.stream.experimental.ZSink.untilOutputM", "link" : "zio\/stream\/experimental\/ZSink.html#untilOutputM[R1<:R,OutErr1>:OutErr](f:Z=>zio.ZIO[R1,OutErr1,Boolean])(implicitev:L<:<In):zio.stream.experimental.ZSink[R1,InErr,In,OutErr1,L,Option[Z]]", "kind" : "def"}, {"label" : "dropLeftover", "tail" : "(): ZSink[R, InErr, In, OutErr, Nothing, Z]", "member" : "zio.stream.experimental.ZSink.dropLeftover", "link" : "zio\/stream\/experimental\/ZSink.html#dropLeftover:zio.stream.experimental.ZSink[R,InErr,In,OutErr,Nothing,Z]", "kind" : "def"}, {"label" : "exposeLeftover", "tail" : "(): ZSink[R, InErr, In, OutErr, Nothing, (Z, Chunk[L])]", "member" : "zio.stream.experimental.ZSink.exposeLeftover", "link" : "zio\/stream\/experimental\/ZSink.html#exposeLeftover:zio.stream.experimental.ZSink[R,InErr,In,OutErr,Nothing,(Z,zio.Chunk[L])]", "kind" : "def"}, {"label" : "zipWithPar", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1])(f: (Z, Z1) => Z2): ZSink[R1, InErr1, In1, OutErr1, L1, Z2]", "member" : "zio.stream.experimental.ZSink.zipWithPar", "link" : "zio\/stream\/experimental\/ZSink.html#zipWithPar[R1<:R,InErr1<:InErr,OutErr1>:OutErr,In1<:In,L1>:L<:In1,Z1,Z2](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1])(f:(Z,Z1)=>Z2):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z2]", "kind" : "final def"}, {"label" : "zipWith", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1])(f: (Z, Z1) => Z2)(ev: <:<[L, In1]): ZSink[R1, InErr1, In1, OutErr1, L1, Z2]", "member" : "zio.stream.experimental.ZSink.zipWith", "link" : "zio\/stream\/experimental\/ZSink.html#zipWith[R1<:R,InErr1<:InErr,OutErr1>:OutErr,In1<:In,L1>:L<:In1,Z1,Z2](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1])(f:(Z,Z1)=>Z2)(implicitev:L<:<In1):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z2]", "kind" : "final def"}, {"label" : "zipRight", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1])(ev: <:<[L, In1]): ZSink[R1, InErr1, In1, OutErr1, L1, Z1]", "member" : "zio.stream.experimental.ZSink.zipRight", "link" : "zio\/stream\/experimental\/ZSink.html#zipRight[R1<:R,InErr1<:InErr,In1<:In,OutErr1>:OutErr,L1>:L<:In1,Z1](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1])(implicitev:L<:<In1):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1]", "kind" : "final def"}, {"label" : "zipParRight", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1]): ZSink[R1, InErr1, In1, OutErr1, L1, Z1]", "member" : "zio.stream.experimental.ZSink.zipParRight", "link" : "zio\/stream\/experimental\/ZSink.html#zipParRight[R1<:R,InErr1<:InErr,In1<:In,OutErr1>:OutErr,L1>:L<:In1,Z1](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1]", "kind" : "final def"}, {"label" : "zipParLeft", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1]): ZSink[R1, InErr1, In1, OutErr1, L1, Z]", "member" : "zio.stream.experimental.ZSink.zipParLeft", "link" : "zio\/stream\/experimental\/ZSink.html#zipParLeft[R1<:R,InErr1<:InErr,In1<:In,OutErr1>:OutErr,L1>:L<:In1,Z1](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z]", "kind" : "final def"}, {"label" : "zipPar", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1])(zippable: Zippable[Z, Z1]): ZSink[R1, InErr1, In1, OutErr1, L1, Out]", "member" : "zio.stream.experimental.ZSink.zipPar", "link" : "zio\/stream\/experimental\/ZSink.html#zipPar[R1<:R,InErr1<:InErr,In1<:In,OutErr1>:OutErr,L1>:L<:In1,Z1](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1])(implicitzippable:zio.Zippable[Z,Z1]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,zippable.Out]", "kind" : "final def"}, {"label" : "zipLeft", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1])(ev: <:<[L, In1]): ZSink[R1, InErr1, In1, OutErr1, L1, Z]", "member" : "zio.stream.experimental.ZSink.zipLeft", "link" : "zio\/stream\/experimental\/ZSink.html#zipLeft[R1<:R,InErr1<:InErr,In1<:In,OutErr1>:OutErr,L1>:L<:In1,Z1](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1])(implicitev:L<:<In1):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z]", "kind" : "final def"}, {"label" : "zip", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1])(zippable: Zippable[Z, Z1], ev: <:<[L, In1]): ZSink[R1, InErr1, In1, OutErr1, L1, Out]", "member" : "zio.stream.experimental.ZSink.zip", "link" : "zio\/stream\/experimental\/ZSink.html#zip[R1<:R,InErr1<:InErr,In1<:In,OutErr1>:OutErr,L1>:L<:In1,Z1](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1])(implicitzippable:zio.Zippable[Z,Z1],implicitev:L<:<In1):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,zippable.Out]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: => ZSink[R1, InErr1, In1, OutErr2, L1, Z1]): ZSink[R1, InErr1, In1, OutErr2, L1, Z1]", "member" : "zio.stream.experimental.ZSink.orElse", "link" : "zio\/stream\/experimental\/ZSink.html#orElse[R1<:R,InErr1<:InErr,In1<:In,OutErr2>:OutErr,L1>:L,Z1>:Z](that:=>zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr2,L1,Z1]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr2,L1,Z1]", "kind" : "def"}, {"label" : "summarized", "tail" : "(summary: ZIO[R1, E1, B])(f: (B, B) => C): ZSink[R1, InErr, In, E1, L, (Z, C)]", "member" : "zio.stream.experimental.ZSink.summarized", "link" : "zio\/stream\/experimental\/ZSink.html#summarized[R1<:R,E1>:OutErr,B,C](summary:zio.ZIO[R1,E1,B])(f:(B,B)=>C):zio.stream.experimental.ZSink[R1,InErr,In,E1,L,(Z,C)]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(ev: <:<[L, In]): ZSink[R, InErr, In, OutErr, L, Chunk[Z]]", "member" : "zio.stream.experimental.ZSink.repeat", "link" : "zio\/stream\/experimental\/ZSink.html#repeat(implicitev:L<:<In):zio.stream.experimental.ZSink[R,InErr,In,OutErr,L,zio.Chunk[Z]]", "kind" : "def"}, {"label" : "timed", "tail" : "(): ZSink[R with Has[Clock], InErr, In, OutErr, L, (Z, zio.Duration)]", "member" : "zio.stream.experimental.ZSink.timed", "link" : "zio\/stream\/experimental\/ZSink.html#timed:zio.stream.experimental.ZSink[Rwithzio.Has[zio.Clock],InErr,In,OutErr,L,(Z,zio.Duration)]", "kind" : "final def"}, {"label" : "raceBoth", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1]): ZSink[R1, InErr1, In1, OutErr1, L1, Either[Z, Z1]]", "member" : "zio.stream.experimental.ZSink.raceBoth", "link" : "zio\/stream\/experimental\/ZSink.html#raceBoth[R1<:R,InErr1<:InErr,OutErr1>:OutErr,A0,In1<:In,L1>:L,Z1>:Z](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Either[Z,Z1]]", "kind" : "final def"}, {"label" : "race", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1]): ZSink[R1, InErr1, In1, OutErr1, L1, Z1]", "member" : "zio.stream.experimental.ZSink.race", "link" : "zio\/stream\/experimental\/ZSink.html#race[R1<:R,InErr1<:InErr,OutErr1>:OutErr,A0,In1<:In,L1>:L,Z1>:Z](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1]", "kind" : "final def"}, {"label" : "mapZIO", "tail" : "(f: (Z) => ZIO[R1, OutErr1, Z1]): ZSink[R1, InErr, In, OutErr1, L, Z1]", "member" : "zio.stream.experimental.ZSink.mapZIO", "link" : "zio\/stream\/experimental\/ZSink.html#mapZIO[R1<:R,OutErr1>:OutErr,Z1](f:Z=>zio.ZIO[R1,OutErr1,Z1]):zio.stream.experimental.ZSink[R1,InErr,In,OutErr1,L,Z1]", "kind" : "def"}, {"label" : "mapM", "tail" : "(f: (Z) => ZIO[R1, OutErr1, Z1]): ZSink[R1, InErr, In, OutErr1, L, Z1]", "member" : "zio.stream.experimental.ZSink.mapM", "link" : "zio\/stream\/experimental\/ZSink.html#mapM[R1<:R,OutErr1>:OutErr,Z1](f:Z=>zio.ZIO[R1,OutErr1,Z1]):zio.stream.experimental.ZSink[R1,InErr,In,OutErr1,L,Z1]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (OutErr) => OutErr2): ZSink[R, InErr, In, OutErr2, L, Z]", "member" : "zio.stream.experimental.ZSink.mapError", "link" : "zio\/stream\/experimental\/ZSink.html#mapError[OutErr2](f:OutErr=>OutErr2):zio.stream.experimental.ZSink[R,InErr,In,OutErr2,L,Z]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Z) => Z2): ZSink[R, InErr, In, OutErr, L, Z2]", "member" : "zio.stream.experimental.ZSink.map", "link" : "zio\/stream\/experimental\/ZSink.html#map[Z2](f:Z=>Z2):zio.stream.experimental.ZSink[R,InErr,In,OutErr,L,Z2]", "kind" : "def"}, {"label" : "foldSink", "tail" : "(failure: (OutErr) => ZSink[R1, InErr1, In1, OutErr2, L1, Z1], success: (Z) => ZSink[R1, InErr1, In1, OutErr2, L1, Z1])(ev: <:<[L, In1]): ZSink[R1, InErr1, In1, OutErr2, L1, Z1]", "member" : "zio.stream.experimental.ZSink.foldSink", "link" : "zio\/stream\/experimental\/ZSink.html#foldSink[R1<:R,InErr1<:InErr,OutErr2,In1<:In,L1>:L<:In1,Z1](failure:OutErr=>zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr2,L1,Z1],success:Z=>zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr2,L1,Z1])(implicitev:L<:<In1):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr2,L1,Z1]", "kind" : "def"}, {"label" : "foldM", "tail" : "(failure: (OutErr) => ZSink[R1, InErr1, In1, OutErr2, L1, Z1], success: (Z) => ZSink[R1, InErr1, In1, OutErr2, L1, Z1])(ev: <:<[L, In1]): ZSink[R1, InErr1, In1, OutErr2, L1, Z1]", "member" : "zio.stream.experimental.ZSink.foldM", "link" : "zio\/stream\/experimental\/ZSink.html#foldM[R1<:R,InErr1<:InErr,OutErr2,In1<:In,L1>:L<:In1,Z1](failure:OutErr=>zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr2,L1,Z1],success:Z=>zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr2,L1,Z1])(implicitev:L<:<In1):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr2,L1,Z1]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Z) => ZSink[R1, InErr1, In1, OutErr1, L1, Z1])(ev: <:<[L, In1]): ZSink[R1, InErr1, In1, OutErr1, L1, Z1]", "member" : "zio.stream.experimental.ZSink.flatMap", "link" : "zio\/stream\/experimental\/ZSink.html#flatMap[R1<:R,InErr1<:InErr,OutErr1>:OutErr,In1<:In,L1>:L<:In1,Z1](f:Z=>zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1])(implicitev:L<:<In1):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1]", "kind" : "def"}, {"label" : "filterInputZIO", "tail" : "(p: (In1) => ZIO[R1, InErr1, Boolean]): ZSink[R1, InErr1, In1, OutErr, L, Z]", "member" : "zio.stream.experimental.ZSink.filterInputZIO", "link" : "zio\/stream\/experimental\/ZSink.html#filterInputZIO[R1<:R,InErr1<:InErr,In1<:In](p:In1=>zio.ZIO[R1,InErr1,Boolean]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr,L,Z]", "kind" : "def"}, {"label" : "filterInputM", "tail" : "(p: (In1) => ZIO[R1, InErr1, Boolean]): ZSink[R1, InErr1, In1, OutErr, L, Z]", "member" : "zio.stream.experimental.ZSink.filterInputM", "link" : "zio\/stream\/experimental\/ZSink.html#filterInputM[R1<:R,InErr1<:InErr,In1<:In](p:In1=>zio.ZIO[R1,InErr1,Boolean]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr,L,Z]", "kind" : "def"}, {"label" : "filterInput", "tail" : "(p: (In1) => Boolean): ZSink[R, InErr, In1, OutErr, L, Z]", "member" : "zio.stream.experimental.ZSink.filterInput", "link" : "zio\/stream\/experimental\/ZSink.html#filterInput[In1<:In](p:In1=>Boolean):zio.stream.experimental.ZSink[R,InErr,In1,OutErr,L,Z]", "kind" : "def"}, {"label" : "dimapZIO", "tail" : "(f: (In1) => ZIO[R1, InErr1, In], g: (Z) => ZIO[R1, OutErr1, Z1]): ZSink[R1, InErr1, In1, OutErr1, L, Z1]", "member" : "zio.stream.experimental.ZSink.dimapZIO", "link" : "zio\/stream\/experimental\/ZSink.html#dimapZIO[R1<:R,InErr1<:InErr,OutErr1>:OutErr,In1,Z1](f:In1=>zio.ZIO[R1,InErr1,In],g:Z=>zio.ZIO[R1,OutErr1,Z1]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L,Z1]", "kind" : "def"}, {"label" : "dimapM", "tail" : "(f: (In1) => ZIO[R1, InErr1, In], g: (Z) => ZIO[R1, OutErr1, Z1]): ZSink[R1, InErr1, In1, OutErr1, L, Z1]", "member" : "zio.stream.experimental.ZSink.dimapM", "link" : "zio\/stream\/experimental\/ZSink.html#dimapM[R1<:R,InErr1<:InErr,OutErr1>:OutErr,In1,Z1](f:In1=>zio.ZIO[R1,InErr1,In],g:Z=>zio.ZIO[R1,OutErr1,Z1]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L,Z1]", "kind" : "def"}, {"label" : "dimapChunksZIO", "tail" : "(f: (Chunk[In1]) => ZIO[R1, InErr1, Chunk[In]], g: (Z) => ZIO[R1, OutErr1, Z1]): ZSink[R1, InErr1, In1, OutErr1, L, Z1]", "member" : "zio.stream.experimental.ZSink.dimapChunksZIO", "link" : "zio\/stream\/experimental\/ZSink.html#dimapChunksZIO[R1<:R,InErr1<:InErr,OutErr1>:OutErr,In1,Z1](f:zio.Chunk[In1]=>zio.ZIO[R1,InErr1,zio.Chunk[In]],g:Z=>zio.ZIO[R1,OutErr1,Z1]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L,Z1]", "kind" : "def"}, {"label" : "dimapChunksM", "tail" : "(f: (Chunk[In1]) => ZIO[R1, InErr1, Chunk[In]], g: (Z) => ZIO[R1, OutErr1, Z1]): ZSink[R1, InErr1, In1, OutErr1, L, Z1]", "member" : "zio.stream.experimental.ZSink.dimapChunksM", "link" : "zio\/stream\/experimental\/ZSink.html#dimapChunksM[R1<:R,InErr1<:InErr,OutErr1>:OutErr,In1,Z1](f:zio.Chunk[In1]=>zio.ZIO[R1,InErr1,zio.Chunk[In]],g:Z=>zio.ZIO[R1,OutErr1,Z1]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L,Z1]", "kind" : "def"}, {"label" : "dimapChunks", "tail" : "(f: (Chunk[In1]) => Chunk[In], g: (Z) => Z1): ZSink[R, InErr, In1, OutErr, L, Z1]", "member" : "zio.stream.experimental.ZSink.dimapChunks", "link" : "zio\/stream\/experimental\/ZSink.html#dimapChunks[In1,Z1](f:zio.Chunk[In1]=>zio.Chunk[In],g:Z=>Z1):zio.stream.experimental.ZSink[R,InErr,In1,OutErr,L,Z1]", "kind" : "def"}, {"label" : "dimap", "tail" : "(f: (In1) => In, g: (Z) => Z1): ZSink[R, InErr, In1, OutErr, L, Z1]", "member" : "zio.stream.experimental.ZSink.dimap", "link" : "zio\/stream\/experimental\/ZSink.html#dimap[In1,Z1](f:In1=>In,g:Z=>Z1):zio.stream.experimental.ZSink[R,InErr,In1,OutErr,L,Z1]", "kind" : "def"}, {"label" : "contramapZIO", "tail" : "(f: (In1) => ZIO[R1, InErr1, In]): ZSink[R1, InErr1, In1, OutErr, L, Z]", "member" : "zio.stream.experimental.ZSink.contramapZIO", "link" : "zio\/stream\/experimental\/ZSink.html#contramapZIO[R1<:R,InErr1<:InErr,In1](f:In1=>zio.ZIO[R1,InErr1,In]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr,L,Z]", "kind" : "def"}, {"label" : "contramapM", "tail" : "(f: (In1) => ZIO[R1, InErr1, In]): ZSink[R1, InErr1, In1, OutErr, L, Z]", "member" : "zio.stream.experimental.ZSink.contramapM", "link" : "zio\/stream\/experimental\/ZSink.html#contramapM[R1<:R,InErr1<:InErr,In1](f:In1=>zio.ZIO[R1,InErr1,In]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr,L,Z]", "kind" : "def"}, {"label" : "contramapChunksZIO", "tail" : "(f: (Chunk[In1]) => ZIO[R1, InErr1, Chunk[In]]): ZSink[R1, InErr1, In1, OutErr, L, Z]", "member" : "zio.stream.experimental.ZSink.contramapChunksZIO", "link" : "zio\/stream\/experimental\/ZSink.html#contramapChunksZIO[R1<:R,InErr1<:InErr,In1](f:zio.Chunk[In1]=>zio.ZIO[R1,InErr1,zio.Chunk[In]]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr,L,Z]", "kind" : "def"}, {"label" : "contramapChunksM", "tail" : "(f: (Chunk[In1]) => ZIO[R1, InErr1, Chunk[In]]): ZSink[R1, InErr1, In1, OutErr, L, Z]", "member" : "zio.stream.experimental.ZSink.contramapChunksM", "link" : "zio\/stream\/experimental\/ZSink.html#contramapChunksM[R1<:R,InErr1<:InErr,In1](f:zio.Chunk[In1]=>zio.ZIO[R1,InErr1,zio.Chunk[In]]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr,L,Z]", "kind" : "def"}, {"label" : "contramapChunks", "tail" : "(f: (Chunk[In1]) => Chunk[In]): ZSink[R, InErr, In1, OutErr, L, Z]", "member" : "zio.stream.experimental.ZSink.contramapChunks", "link" : "zio\/stream\/experimental\/ZSink.html#contramapChunks[In1](f:zio.Chunk[In1]=>zio.Chunk[In]):zio.stream.experimental.ZSink[R,InErr,In1,OutErr,L,Z]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (In1) => In): ZSink[R, InErr, In1, OutErr, L, Z]", "member" : "zio.stream.experimental.ZSink.contramap", "link" : "zio\/stream\/experimental\/ZSink.html#contramap[In1](f:In1=>In):zio.stream.experimental.ZSink[R,InErr,In1,OutErr,L,Z]", "kind" : "def"}, {"label" : "collectAllWhileWith", "tail" : "(z: S)(p: (Z) => Boolean)(f: (S, Z) => S)(ev: <:<[L, In]): ZSink[R, InErr, In, OutErr, L, S]", "member" : "zio.stream.experimental.ZSink.collectAllWhileWith", "link" : "zio\/stream\/experimental\/ZSink.html#collectAllWhileWith[S](z:S)(p:Z=>Boolean)(f:(S,Z)=>S)(implicitev:L<:<In):zio.stream.experimental.ZSink[R,InErr,In,OutErr,L,S]", "kind" : "def"}, {"label" : "as", "tail" : "(z: => Z2): ZSink[R, InErr, In, OutErr, L, Z2]", "member" : "zio.stream.experimental.ZSink.as", "link" : "zio\/stream\/experimental\/ZSink.html#as[Z2](z:=>Z2):zio.stream.experimental.ZSink[R,InErr,In,OutErr,L,Z2]", "kind" : "def"}, {"label" : "<&", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1])(ev: <:<[L, In1]): ZSink[R1, InErr1, In1, OutErr1, L1, Z]", "member" : "zio.stream.experimental.ZSink.<&", "link" : "zio\/stream\/experimental\/ZSink.html#<&[R1<:R,InErr1<:InErr,OutErr1>:OutErr,A0,In1<:In,L1>:L<:In1,Z1](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1])(implicitev:L<:<In1):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z]", "kind" : "final def"}, {"label" : "<*", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1])(ev: <:<[L, In1]): ZSink[R1, InErr1, In1, OutErr1, L1, Z]", "member" : "zio.stream.experimental.ZSink.<*", "link" : "zio\/stream\/experimental\/ZSink.html#<*[R1<:R,InErr1<:InErr,OutErr1>:OutErr,A0,In1<:In,L1>:L<:In1,Z1](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1])(implicitev:L<:<In1):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z]", "kind" : "final def"}, {"label" : "&>", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1])(ev: <:<[L, In1]): ZSink[R1, InErr1, In1, OutErr1, L1, Z1]", "member" : "zio.stream.experimental.ZSink.&>", "link" : "zio\/stream\/experimental\/ZSink.html#&>[R1<:R,InErr1<:InErr,OutErr1>:OutErr,A0,In1<:In,L1>:L<:In1,Z1](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1])(implicitev:L<:<In1):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1]", "kind" : "final def"}, {"label" : "*>", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1])(ev: <:<[L, In1]): ZSink[R1, InErr1, In1, OutErr1, L1, Z1]", "member" : "zio.stream.experimental.ZSink.*>", "link" : "zio\/stream\/experimental\/ZSink.html#*>[R1<:R,InErr1<:InErr,OutErr1>:OutErr,A0,In1<:In,L1>:L<:In1,Z1](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1])(implicitev:L<:<In1):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1]", "kind" : "final def"}, {"label" : "<&>", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1])(zippable: Zippable[Z, Z1]): ZSink[R1, InErr1, In1, OutErr1, L1, Out]", "member" : "zio.stream.experimental.ZSink.<&>", "link" : "zio\/stream\/experimental\/ZSink.html#<&>[R1<:R,InErr1<:InErr,OutErr1>:OutErr,A0,In1<:In,L1>:L<:In1,Z1](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1])(implicitzippable:zio.Zippable[Z,Z1]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,zippable.Out]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1])(zippable: Zippable[Z, Z1], ev: <:<[L, In1]): ZSink[R1, InErr1, In1, OutErr1, L1, Out]", "member" : "zio.stream.experimental.ZSink.<*>", "link" : "zio\/stream\/experimental\/ZSink.html#<*>[R1<:R,InErr1<:InErr,OutErr1>:OutErr,A0,In1<:In,L1>:L<:In1,Z1](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1])(implicitzippable:zio.Zippable[Z,Z1],implicitev:L<:<In1):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,zippable.Out]", "kind" : "final def"}, {"label" : "|", "tail" : "(that: ZSink[R1, InErr1, In1, OutErr1, L1, Z1]): ZSink[R1, InErr1, In1, OutErr1, L1, Z1]", "member" : "zio.stream.experimental.ZSink.|", "link" : "zio\/stream\/experimental\/ZSink.html#|[R1<:R,InErr1<:InErr,OutErr1>:OutErr,A0,In1<:In,L1>:L,Z1>:Z](that:zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1]):zio.stream.experimental.ZSink[R1,InErr1,In1,OutErr1,L1,Z1]", "kind" : "final def"}, {"member" : "zio.stream.experimental.ZSink#<init>", "error" : "unsupported entity"}, {"label" : "channel", "tail" : ": ZChannel[R, InErr, Chunk[In], Any, OutErr, Chunk[L], Z]", "member" : "zio.stream.experimental.ZSink.channel", "link" : "zio\/stream\/experimental\/ZSink.html#channel:zio.stream.experimental.ZChannel[R,InErr,zio.Chunk[In],Any,OutErr,zio.Chunk[L],Z]", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "zio\/stream\/experimental\/ZSink.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "zio\/stream\/experimental\/ZSink.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/ZSink.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/ZSink.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "zio\/stream\/experimental\/ZSink.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "zio\/stream\/experimental\/ZSink.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "zio\/stream\/experimental\/ZSink.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "usASCIIDecode", "tail" : "(): ZSink[Any, Err, Byte, Err, Nothing, Option[String]]", "member" : "zio.stream.experimental.ZSink.usASCIIDecode", "link" : "zio\/stream\/experimental\/ZSink$.html#usASCIIDecode[Err]:zio.stream.experimental.ZSink[Any,Err,Byte,Err,Nothing,Option[String]]", "kind" : "def"}, {"label" : "utf32LEDecode", "tail" : "(): ZSink[Any, Err, Byte, Err, Byte, Option[String]]", "member" : "zio.stream.experimental.ZSink.utf32LEDecode", "link" : "zio\/stream\/experimental\/ZSink$.html#utf32LEDecode[Err]:zio.stream.experimental.ZSink[Any,Err,Byte,Err,Byte,Option[String]]", "kind" : "def"}, {"label" : "utf32BEDecode", "tail" : "(): ZSink[Any, Err, Byte, Err, Byte, Option[String]]", "member" : "zio.stream.experimental.ZSink.utf32BEDecode", "link" : "zio\/stream\/experimental\/ZSink$.html#utf32BEDecode[Err]:zio.stream.experimental.ZSink[Any,Err,Byte,Err,Byte,Option[String]]", "kind" : "def"}, {"label" : "utf32Decode", "tail" : "(): ZSink[Any, Err, Byte, Err, Byte, Option[String]]", "member" : "zio.stream.experimental.ZSink.utf32Decode", "link" : "zio\/stream\/experimental\/ZSink$.html#utf32Decode[Err]:zio.stream.experimental.ZSink[Any,Err,Byte,Err,Byte,Option[String]]", "kind" : "def"}, {"label" : "utf16LEDecode", "tail" : "(): ZSink[Any, Err, Byte, Err, Byte, Option[String]]", "member" : "zio.stream.experimental.ZSink.utf16LEDecode", "link" : "zio\/stream\/experimental\/ZSink$.html#utf16LEDecode[Err]:zio.stream.experimental.ZSink[Any,Err,Byte,Err,Byte,Option[String]]", "kind" : "def"}, {"label" : "utf16BEDecode", "tail" : "(): ZSink[Any, Err, Byte, Err, Byte, Option[String]]", "member" : "zio.stream.experimental.ZSink.utf16BEDecode", "link" : "zio\/stream\/experimental\/ZSink$.html#utf16BEDecode[Err]:zio.stream.experimental.ZSink[Any,Err,Byte,Err,Byte,Option[String]]", "kind" : "def"}, {"label" : "utf16Decode", "tail" : "(): ZSink[Any, Err, Byte, Err, Byte, Option[String]]", "member" : "zio.stream.experimental.ZSink.utf16Decode", "link" : "zio\/stream\/experimental\/ZSink$.html#utf16Decode[Err]:zio.stream.experimental.ZSink[Any,Err,Byte,Err,Byte,Option[String]]", "kind" : "def"}, {"label" : "utf8Decode", "tail" : "(): ZSink[Any, Err, Byte, Err, Byte, Option[String]]", "member" : "zio.stream.experimental.ZSink.utf8Decode", "link" : "zio\/stream\/experimental\/ZSink$.html#utf8Decode[Err]:zio.stream.experimental.ZSink[Any,Err,Byte,Err,Byte,Option[String]]", "kind" : "def"}, {"label" : "utfDecode", "tail" : "(): ZSink[Any, Err, Byte, Err, Byte, Option[String]]", "member" : "zio.stream.experimental.ZSink.utfDecode", "link" : "zio\/stream\/experimental\/ZSink$.html#utfDecode[Err]:zio.stream.experimental.ZSink[Any,Err,Byte,Err,Byte,Option[String]]", "kind" : "def"}, {"label" : "AccessSinkPartiallyApplied", "tail" : "", "member" : "zio.stream.experimental.ZSink.AccessSinkPartiallyApplied", "link" : "zio\/stream\/experimental\/ZSink$.html#AccessSinkPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "unwrapManaged", "tail" : "(managed: ZManaged[R, OutErr, ZSink[R, InErr, In, OutErr, L, Z]]): ZSink[R, InErr, In, OutErr, L, Z]", "member" : "zio.stream.experimental.ZSink.unwrapManaged", "link" : "zio\/stream\/experimental\/ZSink$.html#unwrapManaged[R,InErr,In,OutErr,L,Z](managed:zio.ZManaged[R,OutErr,zio.stream.experimental.ZSink[R,InErr,In,OutErr,L,Z]]):zio.stream.experimental.ZSink[R,InErr,In,OutErr,L,Z]", "kind" : "def"}, {"label" : "unwrap", "tail" : "(zio: ZIO[R, OutErr, ZSink[R, InErr, In, OutErr, L, Z]]): ZSink[R, InErr, In, OutErr, L, Z]", "member" : "zio.stream.experimental.ZSink.unwrap", "link" : "zio\/stream\/experimental\/ZSink$.html#unwrap[R,InErr,In,OutErr,L,Z](zio:zio.ZIO[R,OutErr,zio.stream.experimental.ZSink[R,InErr,In,OutErr,L,Z]]):zio.stream.experimental.ZSink[R,InErr,In,OutErr,L,Z]", "kind" : "def"}, {"label" : "timed", "tail" : "(): ZSink[Has[Clock], Err, Any, Err, Nothing, zio.Duration]", "member" : "zio.stream.experimental.ZSink.timed", "link" : "zio\/stream\/experimental\/ZSink$.html#timed[Err]:zio.stream.experimental.ZSink[zio.Has[zio.Clock],Err,Any,Err,Nothing,zio.Duration]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): ZSink[Any, Err, In, Err, In, Chunk[In]]", "member" : "zio.stream.experimental.ZSink.take", "link" : "zio\/stream\/experimental\/ZSink$.html#take[Err,In](n:Int):zio.stream.experimental.ZSink[Any,Err,In,Err,In,zio.Chunk[In]]", "kind" : "def"}, {"label" : "sum", "tail" : "(A: Numeric[A]): ZSink[Any, Err, A, Err, Nothing, A]", "member" : "zio.stream.experimental.ZSink.sum", "link" : "zio\/stream\/experimental\/ZSink$.html#sum[Err,A](implicitA:Numeric[A]):zio.stream.experimental.ZSink[Any,Err,A,Err,Nothing,A]", "kind" : "def"}, {"label" : "succeed", "tail" : "(z: => Z): ZSink[Any, Any, Any, Nothing, Nothing, Z]", "member" : "zio.stream.experimental.ZSink.succeed", "link" : "zio\/stream\/experimental\/ZSink$.html#succeed[Z](z:=>Z):zio.stream.experimental.ZSink[Any,Any,Any,Nothing,Nothing,Z]", "kind" : "def"}, {"label" : "never", "tail" : ": ZSink[Any, Any, Any, Nothing, Nothing, Nothing]", "member" : "zio.stream.experimental.ZSink.never", "link" : "zio\/stream\/experimental\/ZSink$.html#never:zio.stream.experimental.ZSink[Any,Any,Any,Nothing,Nothing,Nothing]", "kind" : "val"}, {"label" : "managed", "tail" : "(resource: ZManaged[R, OutErr, A])(fn: (A) => ZSink[R, InErr, In, OutErr, L, Z]): ZSink[R, InErr, In, OutErr, In, Z]", "member" : "zio.stream.experimental.ZSink.managed", "link" : "zio\/stream\/experimental\/ZSink$.html#managed[R,InErr,In,OutErr>:InErr,A,L<:In,Z](resource:zio.ZManaged[R,OutErr,A])(fn:A=>zio.stream.experimental.ZSink[R,InErr,In,OutErr,L,Z]):zio.stream.experimental.ZSink[R,InErr,In,OutErr,In,Z]", "kind" : "def"}, {"label" : "mkString", "tail" : "(): ZSink[Any, Err, Any, Err, Nothing, String]", "member" : "zio.stream.experimental.ZSink.mkString", "link" : "zio\/stream\/experimental\/ZSink$.html#mkString[Err]:zio.stream.experimental.ZSink[Any,Err,Any,Err,Nothing,String]", "kind" : "def"}, {"label" : "leftover", "tail" : "(c: Chunk[L]): ZSink[Any, Any, Any, Nothing, L, Unit]", "member" : "zio.stream.experimental.ZSink.leftover", "link" : "zio\/stream\/experimental\/ZSink$.html#leftover[L](c:zio.Chunk[L]):zio.stream.experimental.ZSink[Any,Any,Any,Nothing,L,Unit]", "kind" : "def"}, {"label" : "last", "tail" : "(): ZSink[Any, Err, In, Err, In, Option[In]]", "member" : "zio.stream.experimental.ZSink.last", "link" : "zio\/stream\/experimental\/ZSink$.html#last[Err,In]:zio.stream.experimental.ZSink[Any,Err,In,Err,In,Option[In]]", "kind" : "def"}, {"label" : "iso_8859_1Decode", "tail" : ": ZSink[Any, Nothing, Byte, Nothing, Nothing, Option[String]]", "member" : "zio.stream.experimental.ZSink.iso_8859_1Decode", "link" : "zio\/stream\/experimental\/ZSink$.html#iso_8859_1Decode:zio.stream.experimental.ZSink[Any,Nothing,Byte,Nothing,Nothing,Option[String]]", "kind" : "val"}, {"label" : "head", "tail" : "(): ZSink[Any, Err, In, Err, In, Option[In]]", "member" : "zio.stream.experimental.ZSink.head", "link" : "zio\/stream\/experimental\/ZSink$.html#head[Err,In]:zio.stream.experimental.ZSink[Any,Err,In,Err,In,Option[In]]", "kind" : "def"}, {"label" : "halt", "tail" : "(e: => Cause[E]): ZSink[Any, Any, Any, E, Nothing, Nothing]", "member" : "zio.stream.experimental.ZSink.halt", "link" : "zio\/stream\/experimental\/ZSink$.html#halt[E](e:=>zio.Cause[E]):zio.stream.experimental.ZSink[Any,Any,Any,E,Nothing,Nothing]", "kind" : "def"}, {"label" : "fromZIO", "tail" : "(b: => ZIO[R, E, Z]): ZSink[R, Any, Any, E, Nothing, Z]", "member" : "zio.stream.experimental.ZSink.fromZIO", "link" : "zio\/stream\/experimental\/ZSink$.html#fromZIO[R,E,Z](b:=>zio.ZIO[R,E,Z]):zio.stream.experimental.ZSink[R,Any,Any,E,Nothing,Z]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(b: => ZIO[R, E, Z]): ZSink[R, Any, Any, E, Nothing, Z]", "member" : "zio.stream.experimental.ZSink.fromEffect", "link" : "zio\/stream\/experimental\/ZSink$.html#fromEffect[R,E,Z](b:=>zio.ZIO[R,E,Z]):zio.stream.experimental.ZSink[R,Any,Any,E,Nothing,Z]", "kind" : "def"}, {"label" : "foreachChunkWhile", "tail" : "(f: (Chunk[In]) => ZIO[R, Err, Boolean]): ZSink[R, Err, In, Err, In, Unit]", "member" : "zio.stream.experimental.ZSink.foreachChunkWhile", "link" : "zio\/stream\/experimental\/ZSink$.html#foreachChunkWhile[R,Err,In](f:zio.Chunk[In]=>zio.ZIO[R,Err,Boolean]):zio.stream.experimental.ZSink[R,Err,In,Err,In,Unit]", "kind" : "def"}, {"label" : "foreachWhile", "tail" : "(f: (In) => ZIO[R, Err, Boolean]): ZSink[R, Err, In, Err, In, Unit]", "member" : "zio.stream.experimental.ZSink.foreachWhile", "link" : "zio\/stream\/experimental\/ZSink$.html#foreachWhile[R,Err,In](f:In=>zio.ZIO[R,Err,Boolean]):zio.stream.experimental.ZSink[R,Err,In,Err,In,Unit]", "kind" : "final def"}, {"label" : "foreachChunk", "tail" : "(f: (Chunk[In]) => ZIO[R, Err, Any]): ZSink[R, Err, In, Err, In, Unit]", "member" : "zio.stream.experimental.ZSink.foreachChunk", "link" : "zio\/stream\/experimental\/ZSink$.html#foreachChunk[R,Err,In](f:zio.Chunk[In]=>zio.ZIO[R,Err,Any]):zio.stream.experimental.ZSink[R,Err,In,Err,In,Unit]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (In) => ZIO[R, Err, Any]): ZSink[R, Err, In, Err, In, Unit]", "member" : "zio.stream.experimental.ZSink.foreach", "link" : "zio\/stream\/experimental\/ZSink$.html#foreach[R,Err,In](f:In=>zio.ZIO[R,Err,Any]):zio.stream.experimental.ZSink[R,Err,In,Err,In,Unit]", "kind" : "def"}, {"label" : "foldZIO", "tail" : "(z: S)(contFn: (S) => Boolean)(f: (S, In) => ZIO[Env, Err, S]): ZSink[Env, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.foldZIO", "link" : "zio\/stream\/experimental\/ZSink$.html#foldZIO[Env,Err,In,S](z:S)(contFn:S=>Boolean)(f:(S,In)=>zio.ZIO[Env,Err,S]):zio.stream.experimental.ZSink[Env,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "foldWeightedZIO", "tail" : "(z: S)(costFn: (S, In) => ZIO[Env, Err, Long], max: Long)(f: (S, In) => ZIO[Env, Err, S]): ZSink[Env, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.foldWeightedZIO", "link" : "zio\/stream\/experimental\/ZSink$.html#foldWeightedZIO[Env,Err,In,S](z:S)(costFn:(S,In)=>zio.ZIO[Env,Err,Long],max:Long)(f:(S,In)=>zio.ZIO[Env,Err,S]):zio.stream.experimental.ZSink[Env,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "foldWeightedM", "tail" : "(z: S)(costFn: (S, In) => ZIO[Env, Err, Long], max: Long)(f: (S, In) => ZIO[Env, Err, S]): ZSink[Env, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.foldWeightedM", "link" : "zio\/stream\/experimental\/ZSink$.html#foldWeightedM[Env,Err,In,S](z:S)(costFn:(S,In)=>zio.ZIO[Env,Err,Long],max:Long)(f:(S,In)=>zio.ZIO[Env,Err,S]):zio.stream.experimental.ZSink[Env,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "foldWeightedDecomposeZIO", "tail" : "(z: S)(costFn: (S, In) => ZIO[Env, Err, Long], max: Long, decompose: (In) => ZIO[Env, Err, Chunk[In]])(f: (S, In) => ZIO[Env, Err, S]): ZSink[Env, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.foldWeightedDecomposeZIO", "link" : "zio\/stream\/experimental\/ZSink$.html#foldWeightedDecomposeZIO[Env,Err,In,S](z:S)(costFn:(S,In)=>zio.ZIO[Env,Err,Long],max:Long,decompose:In=>zio.ZIO[Env,Err,zio.Chunk[In]])(f:(S,In)=>zio.ZIO[Env,Err,S]):zio.stream.experimental.ZSink[Env,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "foldWeightedDecomposeM", "tail" : "(z: S)(costFn: (S, In) => ZIO[Env, Err, Long], max: Long, decompose: (In) => ZIO[Env, Err, Chunk[In]])(f: (S, In) => ZIO[Env, Err, S]): ZSink[Env, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.foldWeightedDecomposeM", "link" : "zio\/stream\/experimental\/ZSink$.html#foldWeightedDecomposeM[Env,Err,In,S](z:S)(costFn:(S,In)=>zio.ZIO[Env,Err,Long],max:Long,decompose:In=>zio.ZIO[Env,Err,zio.Chunk[In]])(f:(S,In)=>zio.ZIO[Env,Err,S]):zio.stream.experimental.ZSink[Env,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "foldWeightedDecompose", "tail" : "(z: S)(costFn: (S, In) => Long, max: Long, decompose: (In) => Chunk[In])(f: (S, In) => S): ZSink[Any, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.foldWeightedDecompose", "link" : "zio\/stream\/experimental\/ZSink$.html#foldWeightedDecompose[Err,In,S](z:S)(costFn:(S,In)=>Long,max:Long,decompose:In=>zio.Chunk[In])(f:(S,In)=>S):zio.stream.experimental.ZSink[Any,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "foldWeighted", "tail" : "(z: S)(costFn: (S, In) => Long, max: Long)(f: (S, In) => S): ZSink[Any, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.foldWeighted", "link" : "zio\/stream\/experimental\/ZSink$.html#foldWeighted[Err,In,S](z:S)(costFn:(S,In)=>Long,max:Long)(f:(S,In)=>S):zio.stream.experimental.ZSink[Any,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "foldUntilZIO", "tail" : "(z: S, max: Long)(f: (S, In) => ZIO[Env, Err, S]): ZSink[Env, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.foldUntilZIO", "link" : "zio\/stream\/experimental\/ZSink$.html#foldUntilZIO[Env,In,Err,S](z:S,max:Long)(f:(S,In)=>zio.ZIO[Env,Err,S]):zio.stream.experimental.ZSink[Env,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "foldUntilM", "tail" : "(z: S, max: Long)(f: (S, In) => ZIO[Env, Err, S]): ZSink[Env, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.foldUntilM", "link" : "zio\/stream\/experimental\/ZSink$.html#foldUntilM[Env,In,Err,S](z:S,max:Long)(f:(S,In)=>zio.ZIO[Env,Err,S]):zio.stream.experimental.ZSink[Env,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "foldUntil", "tail" : "(z: S, max: Long)(f: (S, In) => S): ZSink[Any, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.foldUntil", "link" : "zio\/stream\/experimental\/ZSink$.html#foldUntil[Err,In,S](z:S,max:Long)(f:(S,In)=>S):zio.stream.experimental.ZSink[Any,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "foldM", "tail" : "(z: S)(contFn: (S) => Boolean)(f: (S, In) => ZIO[Env, Err, S]): ZSink[Env, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.foldM", "link" : "zio\/stream\/experimental\/ZSink$.html#foldM[Env,Err,In,S](z:S)(contFn:S=>Boolean)(f:(S,In)=>zio.ZIO[Env,Err,S]):zio.stream.experimental.ZSink[Env,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "foldLeftZIO", "tail" : "(z: S)(f: (S, In) => ZIO[R, Err, S]): ZSink[R, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.foldLeftZIO", "link" : "zio\/stream\/experimental\/ZSink$.html#foldLeftZIO[R,Err,In,S](z:S)(f:(S,In)=>zio.ZIO[R,Err,S]):zio.stream.experimental.ZSink[R,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "foldLeftM", "tail" : "(z: S)(f: (S, In) => ZIO[R, Err, S]): ZSink[R, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.foldLeftM", "link" : "zio\/stream\/experimental\/ZSink$.html#foldLeftM[R,Err,In,S](z:S)(f:(S,In)=>zio.ZIO[R,Err,S]):zio.stream.experimental.ZSink[R,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "foldLeftChunksZIO", "tail" : "(z: S)(f: (S, Chunk[In]) => ZIO[R, Err, S]): ZSink[R, Err, In, Err, Nothing, S]", "member" : "zio.stream.experimental.ZSink.foldLeftChunksZIO", "link" : "zio\/stream\/experimental\/ZSink$.html#foldLeftChunksZIO[R,Err,In,S](z:S)(f:(S,zio.Chunk[In])=>zio.ZIO[R,Err,S]):zio.stream.experimental.ZSink[R,Err,In,Err,Nothing,S]", "kind" : "def"}, {"label" : "foldLeftChunksM", "tail" : "(z: S)(f: (S, Chunk[In]) => ZIO[R, Err, S]): ZSink[R, Err, In, Err, Nothing, S]", "member" : "zio.stream.experimental.ZSink.foldLeftChunksM", "link" : "zio\/stream\/experimental\/ZSink$.html#foldLeftChunksM[R,Err,In,S](z:S)(f:(S,zio.Chunk[In])=>zio.ZIO[R,Err,S]):zio.stream.experimental.ZSink[R,Err,In,Err,Nothing,S]", "kind" : "def"}, {"label" : "foldLeftChunks", "tail" : "(z: S)(f: (S, Chunk[In]) => S): ZSink[Any, Err, In, Err, Nothing, S]", "member" : "zio.stream.experimental.ZSink.foldLeftChunks", "link" : "zio\/stream\/experimental\/ZSink$.html#foldLeftChunks[Err,In,S](z:S)(f:(S,zio.Chunk[In])=>S):zio.stream.experimental.ZSink[Any,Err,In,Err,Nothing,S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: S)(f: (S, In) => S): ZSink[Any, Err, In, Err, Nothing, S]", "member" : "zio.stream.experimental.ZSink.foldLeft", "link" : "zio\/stream\/experimental\/ZSink$.html#foldLeft[Err,In,S](z:S)(f:(S,In)=>S):zio.stream.experimental.ZSink[Any,Err,In,Err,Nothing,S]", "kind" : "def"}, {"label" : "foldChunksZIO", "tail" : "(z: S)(contFn: (S) => Boolean)(f: (S, Chunk[In]) => ZIO[Env, Err, S]): ZSink[Env, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.foldChunksZIO", "link" : "zio\/stream\/experimental\/ZSink$.html#foldChunksZIO[Env,Err,In,S](z:S)(contFn:S=>Boolean)(f:(S,zio.Chunk[In])=>zio.ZIO[Env,Err,S]):zio.stream.experimental.ZSink[Env,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "foldChunksM", "tail" : "(z: S)(contFn: (S) => Boolean)(f: (S, Chunk[In]) => ZIO[Env, Err, S]): ZSink[Env, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.foldChunksM", "link" : "zio\/stream\/experimental\/ZSink$.html#foldChunksM[Env,Err,In,S](z:S)(contFn:S=>Boolean)(f:(S,zio.Chunk[In])=>zio.ZIO[Env,Err,S]):zio.stream.experimental.ZSink[Env,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "foldChunks", "tail" : "(z: S)(contFn: (S) => Boolean)(f: (S, Chunk[In]) => S): ZSink[Any, Err, In, Err, Nothing, S]", "member" : "zio.stream.experimental.ZSink.foldChunks", "link" : "zio\/stream\/experimental\/ZSink$.html#foldChunks[Err,In,S](z:S)(contFn:S=>Boolean)(f:(S,zio.Chunk[In])=>S):zio.stream.experimental.ZSink[Any,Err,In,Err,Nothing,S]", "kind" : "def"}, {"label" : "fold", "tail" : "(z: S)(contFn: (S) => Boolean)(f: (S, In) => S): ZSink[Any, Err, In, Err, In, S]", "member" : "zio.stream.experimental.ZSink.fold", "link" : "zio\/stream\/experimental\/ZSink$.html#fold[Err,In,S](z:S)(contFn:S=>Boolean)(f:(S,In)=>S):zio.stream.experimental.ZSink[Any,Err,In,Err,In,S]", "kind" : "def"}, {"label" : "failCause", "tail" : "(e: => Cause[E]): ZSink[Any, Any, Any, E, Nothing, Nothing]", "member" : "zio.stream.experimental.ZSink.failCause", "link" : "zio\/stream\/experimental\/ZSink$.html#failCause[E](e:=>zio.Cause[E]):zio.stream.experimental.ZSink[Any,Any,Any,E,Nothing,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: => E): ZSink[Any, Any, Any, E, Nothing, Nothing]", "member" : "zio.stream.experimental.ZSink.fail", "link" : "zio\/stream\/experimental\/ZSink$.html#fail[E](e:=>E):zio.stream.experimental.ZSink[Any,Any,Any,E,Nothing,Nothing]", "kind" : "def"}, {"label" : "effectTotal", "tail" : "(a: => A): ZSink[Any, Any, Any, Nothing, Nothing, A]", "member" : "zio.stream.experimental.ZSink.effectTotal", "link" : "zio\/stream\/experimental\/ZSink$.html#effectTotal[A](a:=>A):zio.stream.experimental.ZSink[Any,Any,Any,Nothing,Nothing,A]", "kind" : "def"}, {"label" : "effectSuspendTotal", "tail" : "(sink: => ZSink[Env, InErr, In, OutErr, Leftover, Done]): ZSink[Env, InErr, In, OutErr, Leftover, Done]", "member" : "zio.stream.experimental.ZSink.effectSuspendTotal", "link" : "zio\/stream\/experimental\/ZSink$.html#effectSuspendTotal[Env,InErr,In,OutErr,Leftover,Done](sink:=>zio.stream.experimental.ZSink[Env,InErr,In,OutErr,Leftover,Done]):zio.stream.experimental.ZSink[Env,InErr,In,OutErr,Leftover,Done]", "kind" : "def"}, {"label" : "dropWhileM", "tail" : "(p: (In) => ZIO[R, InErr, Boolean]): ZSink[R, InErr, In, InErr, In, Any]", "member" : "zio.stream.experimental.ZSink.dropWhileM", "link" : "zio\/stream\/experimental\/ZSink$.html#dropWhileM[R,InErr,In](p:In=>zio.ZIO[R,InErr,Boolean]):zio.stream.experimental.ZSink[R,InErr,In,InErr,In,Any]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (In) => Boolean): ZSink[Any, Err, In, Err, In, Any]", "member" : "zio.stream.experimental.ZSink.dropWhile", "link" : "zio\/stream\/experimental\/ZSink$.html#dropWhile[Err,In](p:In=>Boolean):zio.stream.experimental.ZSink[Any,Err,In,Err,In,Any]", "kind" : "def"}, {"label" : "drain", "tail" : "(): ZSink[Any, Err, Any, Err, Nothing, Unit]", "member" : "zio.stream.experimental.ZSink.drain", "link" : "zio\/stream\/experimental\/ZSink$.html#drain[Err]:zio.stream.experimental.ZSink[Any,Err,Any,Err,Nothing,Unit]", "kind" : "def"}, {"label" : "dieMessage", "tail" : "(m: => String): ZSink[Any, Any, Any, Nothing, Nothing, Nothing]", "member" : "zio.stream.experimental.ZSink.dieMessage", "link" : "zio\/stream\/experimental\/ZSink$.html#dieMessage(m:=>String):zio.stream.experimental.ZSink[Any,Any,Any,Nothing,Nothing,Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(e: => Throwable): ZSink[Any, Any, Any, Nothing, Nothing, Nothing]", "member" : "zio.stream.experimental.ZSink.die", "link" : "zio\/stream\/experimental\/ZSink$.html#die(e:=>Throwable):zio.stream.experimental.ZSink[Any,Any,Any,Nothing,Nothing,Nothing]", "kind" : "def"}, {"label" : "count", "tail" : "(): ZSink[Any, Err, Any, Err, Nothing, Long]", "member" : "zio.stream.experimental.ZSink.count", "link" : "zio\/stream\/experimental\/ZSink$.html#count[Err]:zio.stream.experimental.ZSink[Any,Err,Any,Err,Nothing,Long]", "kind" : "def"}, {"label" : "collectAllWhileZIO", "tail" : "(p: (In) => ZIO[Env, Err, Boolean]): ZSink[Env, Err, In, Err, In, Chunk[In]]", "member" : "zio.stream.experimental.ZSink.collectAllWhileZIO", "link" : "zio\/stream\/experimental\/ZSink$.html#collectAllWhileZIO[Env,Err,In](p:In=>zio.ZIO[Env,Err,Boolean]):zio.stream.experimental.ZSink[Env,Err,In,Err,In,zio.Chunk[In]]", "kind" : "def"}, {"label" : "collectAllWhileM", "tail" : "(p: (In) => ZIO[Env, Err, Boolean]): ZSink[Env, Err, In, Err, In, Chunk[In]]", "member" : "zio.stream.experimental.ZSink.collectAllWhileM", "link" : "zio\/stream\/experimental\/ZSink$.html#collectAllWhileM[Env,Err,In](p:In=>zio.ZIO[Env,Err,Boolean]):zio.stream.experimental.ZSink[Env,Err,In,Err,In,zio.Chunk[In]]", "kind" : "def"}, {"label" : "collectAllWhile", "tail" : "(p: (In) => Boolean): ZSink[Any, Err, In, Err, In, Chunk[In]]", "member" : "zio.stream.experimental.ZSink.collectAllWhile", "link" : "zio\/stream\/experimental\/ZSink$.html#collectAllWhile[Err,In](p:In=>Boolean):zio.stream.experimental.ZSink[Any,Err,In,Err,In,zio.Chunk[In]]", "kind" : "def"}, {"label" : "collectAllToSetN", "tail" : "(n: Long): ZSink[Any, Err, In, Err, In, Set[In]]", "member" : "zio.stream.experimental.ZSink.collectAllToSetN", "link" : "zio\/stream\/experimental\/ZSink$.html#collectAllToSetN[Err,In](n:Long):zio.stream.experimental.ZSink[Any,Err,In,Err,In,Set[In]]", "kind" : "def"}, {"label" : "collectAllToSet", "tail" : "(): ZSink[Any, Err, In, Err, Nothing, Set[In]]", "member" : "zio.stream.experimental.ZSink.collectAllToSet", "link" : "zio\/stream\/experimental\/ZSink$.html#collectAllToSet[Err,In]:zio.stream.experimental.ZSink[Any,Err,In,Err,Nothing,Set[In]]", "kind" : "def"}, {"label" : "collectAllToMapN", "tail" : "(n: Long)(key: (In) => K)(f: (In, In) => In): ZSink[Any, Err, In, Err, In, Map[K, In]]", "member" : "zio.stream.experimental.ZSink.collectAllToMapN", "link" : "zio\/stream\/experimental\/ZSink$.html#collectAllToMapN[Err,In,K](n:Long)(key:In=>K)(f:(In,In)=>In):zio.stream.experimental.ZSink[Any,Err,In,Err,In,Map[K,In]]", "kind" : "def"}, {"label" : "collectAllToMap", "tail" : "(key: (In) => K)(f: (In, In) => In): ZSink[Any, Err, In, Err, Nothing, Map[K, In]]", "member" : "zio.stream.experimental.ZSink.collectAllToMap", "link" : "zio\/stream\/experimental\/ZSink$.html#collectAllToMap[Err,In,K](key:In=>K)(f:(In,In)=>In):zio.stream.experimental.ZSink[Any,Err,In,Err,Nothing,Map[K,In]]", "kind" : "def"}, {"label" : "collectAllN", "tail" : "(n: Int): ZSink[Any, Err, In, Err, In, Chunk[In]]", "member" : "zio.stream.experimental.ZSink.collectAllN", "link" : "zio\/stream\/experimental\/ZSink$.html#collectAllN[Err,In](n:Int):zio.stream.experimental.ZSink[Any,Err,In,Err,In,zio.Chunk[In]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(): ZSink[Any, Err, In, Err, Nothing, Chunk[In]]", "member" : "zio.stream.experimental.ZSink.collectAll", "link" : "zio\/stream\/experimental\/ZSink$.html#collectAll[Err,In]:zio.stream.experimental.ZSink[Any,Err,In,Err,Nothing,zio.Chunk[In]]", "kind" : "def"}, {"label" : "accessSink", "tail" : "(): AccessSinkPartiallyApplied[R]", "member" : "zio.stream.experimental.ZSink.accessSink", "link" : "zio\/stream\/experimental\/ZSink$.html#accessSink[R]:zio.stream.experimental.ZSink.AccessSinkPartiallyApplied[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/ZSink$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/ZSink$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/ZSink$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/ZSink$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/ZSink$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/ZSink$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/ZSink$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZSink$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZSink$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZSink$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/ZSink$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/ZSink$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/ZSink$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/ZSink$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/ZSink$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/ZSink$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/ZSink$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/ZSink$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/ZSink$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stream\/experimental\/ZSink.html", "kind" : "class"}, {"name" : "zio.stream.experimental.ZStream", "shortDescription" : "", "object" : "zio\/stream\/experimental\/ZStream$.html", "members_class" : [{"label" : "zipWithPreviousAndNext", "tail" : "(): ZStream[R, E, (Option[A], A, Option[A])]", "member" : "zio.stream.experimental.ZStream.zipWithPreviousAndNext", "link" : "zio\/stream\/experimental\/ZStream.html#zipWithPreviousAndNext:zio.stream.experimental.ZStream[R,E,(Option[A],A,Option[A])]", "kind" : "final def"}, {"label" : "zipWithPrevious", "tail" : "(): ZStream[R, E, (Option[A], A)]", "member" : "zio.stream.experimental.ZStream.zipWithPrevious", "link" : "zio\/stream\/experimental\/ZStream.html#zipWithPrevious:zio.stream.experimental.ZStream[R,E,(Option[A],A)]", "kind" : "final def"}, {"label" : "zipWithNext", "tail" : "(): ZStream[R, E, (A, Option[A])]", "member" : "zio.stream.experimental.ZStream.zipWithNext", "link" : "zio\/stream\/experimental\/ZStream.html#zipWithNext:zio.stream.experimental.ZStream[R,E,(A,Option[A])]", "kind" : "final def"}, {"label" : "zipWithLatest", "tail" : "(that: ZStream[R1, E1, A2])(f: (A, A2) => A3): ZStream[R1, E1, A3]", "member" : "zio.stream.experimental.ZStream.zipWithLatest", "link" : "zio\/stream\/experimental\/ZStream.html#zipWithLatest[R1<:R,E1>:E,A2,A3](that:zio.stream.experimental.ZStream[R1,E1,A2])(f:(A,A2)=>A3):zio.stream.experimental.ZStream[R1,E1,A3]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): ZStream[R, E, (A, Long)]", "member" : "zio.stream.experimental.ZStream.zipWithIndex", "link" : "zio\/stream\/experimental\/ZStream.html#zipWithIndex:zio.stream.experimental.ZStream[R,E,(A,Long)]", "kind" : "final def"}, {"label" : "zipWith", "tail" : "(that: ZStream[R1, E1, A2])(f: (A, A2) => A3): ZStream[R1, E1, A3]", "member" : "zio.stream.experimental.ZStream.zipWith", "link" : "zio\/stream\/experimental\/ZStream.html#zipWith[R1<:R,E1>:E,A2,A3](that:zio.stream.experimental.ZStream[R1,E1,A2])(f:(A,A2)=>A3):zio.stream.experimental.ZStream[R1,E1,A3]", "kind" : "def"}, {"label" : "zipAllWithExec", "tail" : "(that: ZStream[R1, E1, A2])(exec: ExecutionStrategy)(left: (A) => A3, right: (A2) => A3)(both: (A, A2) => A3): ZStream[R1, E1, A3]", "member" : "zio.stream.experimental.ZStream.zipAllWithExec", "link" : "zio\/stream\/experimental\/ZStream.html#zipAllWithExec[R1<:R,E1>:E,A2,A3](that:zio.stream.experimental.ZStream[R1,E1,A2])(exec:zio.ExecutionStrategy)(left:A=>A3,right:A2=>A3)(both:(A,A2)=>A3):zio.stream.experimental.ZStream[R1,E1,A3]", "kind" : "def"}, {"label" : "zipAllWith", "tail" : "(that: ZStream[R1, E1, A2])(left: (A) => A3, right: (A2) => A3)(both: (A, A2) => A3): ZStream[R1, E1, A3]", "member" : "zio.stream.experimental.ZStream.zipAllWith", "link" : "zio\/stream\/experimental\/ZStream.html#zipAllWith[R1<:R,E1>:E,A2,A3](that:zio.stream.experimental.ZStream[R1,E1,A2])(left:A=>A3,right:A2=>A3)(both:(A,A2)=>A3):zio.stream.experimental.ZStream[R1,E1,A3]", "kind" : "def"}, {"label" : "zipAllRight", "tail" : "(that: ZStream[R1, E1, A2])(default: A2): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.zipAllRight", "link" : "zio\/stream\/experimental\/ZStream.html#zipAllRight[R1<:R,E1>:E,A2](that:zio.stream.experimental.ZStream[R1,E1,A2])(default:A2):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "def"}, {"label" : "zipAllLeft", "tail" : "(that: ZStream[R1, E1, A2])(default: A1): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.zipAllLeft", "link" : "zio\/stream\/experimental\/ZStream.html#zipAllLeft[R1<:R,E1>:E,A1>:A,A2](that:zio.stream.experimental.ZStream[R1,E1,A2])(default:A1):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: ZStream[R1, E1, A2])(defaultLeft: A1, defaultRight: A2): ZStream[R1, E1, (A1, A2)]", "member" : "zio.stream.experimental.ZStream.zipAll", "link" : "zio\/stream\/experimental\/ZStream.html#zipAll[R1<:R,E1>:E,A1>:A,A2](that:zio.stream.experimental.ZStream[R1,E1,A2])(defaultLeft:A1,defaultRight:A2):zio.stream.experimental.ZStream[R1,E1,(A1,A2)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: ZStream[R1, E1, A2])(zippable: Zippable[A, A2]): ZStream[R1, E1, Out]", "member" : "zio.stream.experimental.ZStream.zip", "link" : "zio\/stream\/experimental\/ZStream.html#zip[R1<:R,E1>:E,A2](that:zio.stream.experimental.ZStream[R1,E1,A2])(implicitzippable:zio.Zippable[A,A2]):zio.stream.experimental.ZStream[R1,E1,zippable.Out]", "kind" : "def"}, {"label" : "zipRight", "tail" : "(that: ZStream[R1, E1, A2]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.zipRight", "link" : "zio\/stream\/experimental\/ZStream.html#zipRight[R1<:R,E1>:E,A2](that:zio.stream.experimental.ZStream[R1,E1,A2]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "def"}, {"label" : "zipLeft", "tail" : "(that: ZStream[R1, E1, A2]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.zipLeft", "link" : "zio\/stream\/experimental\/ZStream.html#zipLeft[R1<:R,E1>:E,A2](that:zio.stream.experimental.ZStream[R1,E1,A2]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "def"}, {"label" : "withRuntimeConfig", "tail" : "(runtimeConfig: => RuntimeConfig): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.withRuntimeConfig", "link" : "zio\/stream\/experimental\/ZStream.html#withRuntimeConfig(runtimeConfig:=>zio.RuntimeConfig):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(predicate: (A) => Boolean): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.withFilter", "link" : "zio\/stream\/experimental\/ZStream.html#withFilter(predicate:A=>Boolean):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "via", "tail" : "(f: (ZStream[R, E, A]) => ZStream[R2, E2, A2]): ZStream[R2, E2, A2]", "member" : "zio.stream.experimental.ZStream.via", "link" : "zio\/stream\/experimental\/ZStream.html#via[R2,E2,A2](f:zio.stream.experimental.ZStream[R,E,A]=>zio.stream.experimental.ZStream[R2,E2,A2]):zio.stream.experimental.ZStream[R2,E2,A2]", "kind" : "final def"}, {"label" : "updateServiceAt", "tail" : "(): UpdateServiceAt[R, E, A, Service]", "member" : "zio.stream.experimental.ZStream.updateServiceAt", "link" : "zio\/stream\/experimental\/ZStream.html#updateServiceAt[Service]:zio.stream.experimental.ZStream.UpdateServiceAt[R,E,A,Service]", "kind" : "final def"}, {"label" : "updateService", "tail" : "(): UpdateService[R, E, A, M]", "member" : "zio.stream.experimental.ZStream.updateService", "link" : "zio\/stream\/experimental\/ZStream.html#updateService[M]:zio.stream.experimental.ZStream.UpdateService[R,E,A,M]", "kind" : "final def"}, {"label" : "transduce", "tail" : "(sink: ZSink[R1, E, A1, E1, A1, Z]): ZStream[R1, E1, Z]", "member" : "zio.stream.experimental.ZStream.transduce", "link" : "zio\/stream\/experimental\/ZStream.html#transduce[R1<:R,E1,A1>:A,Z](sink:zio.stream.experimental.ZSink[R1,E,A1,E1,A1,Z]):zio.stream.experimental.ZStream[R1,E1,Z]", "kind" : "def"}, {"label" : "toQueueUnbounded", "tail" : "(): ZManaged[R, Nothing, Dequeue[Take[E, A]]]", "member" : "zio.stream.experimental.ZStream.toQueueUnbounded", "link" : "zio\/stream\/experimental\/ZStream.html#toQueueUnbounded:zio.ZManaged[R,Nothing,zio.Dequeue[zio.stream.experimental.Take[E,A]]]", "kind" : "final def"}, {"label" : "toQueueSliding", "tail" : "(capacity: Int): ZManaged[R, Nothing, Dequeue[Take[E, A]]]", "member" : "zio.stream.experimental.ZStream.toQueueSliding", "link" : "zio\/stream\/experimental\/ZStream.html#toQueueSliding(capacity:Int):zio.ZManaged[R,Nothing,zio.Dequeue[zio.stream.experimental.Take[E,A]]]", "kind" : "final def"}, {"label" : "toQueueOfElements", "tail" : "(capacity: Int): ZManaged[R, Nothing, Dequeue[Exit[Option[E], A]]]", "member" : "zio.stream.experimental.ZStream.toQueueOfElements", "link" : "zio\/stream\/experimental\/ZStream.html#toQueueOfElements(capacity:Int):zio.ZManaged[R,Nothing,zio.Dequeue[zio.Exit[Option[E],A]]]", "kind" : "final def"}, {"label" : "toQueueDropping", "tail" : "(capacity: Int): ZManaged[R, Nothing, Dequeue[Take[E, A]]]", "member" : "zio.stream.experimental.ZStream.toQueueDropping", "link" : "zio\/stream\/experimental\/ZStream.html#toQueueDropping(capacity:Int):zio.ZManaged[R,Nothing,zio.Dequeue[zio.stream.experimental.Take[E,A]]]", "kind" : "final def"}, {"label" : "toQueue", "tail" : "(capacity: Int): ZManaged[R, Nothing, Dequeue[Take[E, A]]]", "member" : "zio.stream.experimental.ZStream.toQueue", "link" : "zio\/stream\/experimental\/ZStream.html#toQueue(capacity:Int):zio.ZManaged[R,Nothing,zio.Dequeue[zio.stream.experimental.Take[E,A]]]", "kind" : "final def"}, {"label" : "toReader", "tail" : "(ev0: <:<[E, Throwable], ev1: <:<[A, Char]): ZManaged[R, E, Reader]", "member" : "zio.stream.experimental.ZStream.toReader", "link" : "zio\/stream\/experimental\/ZStream.html#toReader(implicitev0:E<:<Throwable,implicitev1:A<:<Char):zio.ZManaged[R,E,java.io.Reader]", "kind" : "def"}, {"label" : "toPull", "tail" : "(): ZManaged[R, Nothing, ZIO[R, Option[E], Chunk[A]]]", "member" : "zio.stream.experimental.ZStream.toPull", "link" : "zio\/stream\/experimental\/ZStream.html#toPull:zio.ZManaged[R,Nothing,zio.ZIO[R,Option[E],zio.Chunk[A]]]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): ZManaged[R, Nothing, Iterator[Either[E, A]]]", "member" : "zio.stream.experimental.ZStream.toIterator", "link" : "zio\/stream\/experimental\/ZStream.html#toIterator:zio.ZManaged[R,Nothing,Iterator[Either[E,A]]]", "kind" : "def"}, {"label" : "toInputStream", "tail" : "(ev0: <:<[E, Throwable], ev1: <:<[A, Byte]): ZManaged[R, E, InputStream]", "member" : "zio.stream.experimental.ZStream.toInputStream", "link" : "zio\/stream\/experimental\/ZStream.html#toInputStream(implicitev0:E<:<Throwable,implicitev1:A<:<Byte):zio.ZManaged[R,E,java.io.InputStream]", "kind" : "def"}, {"label" : "toHub", "tail" : "(capacity: Int): ZManaged[R, Nothing, ZHub[Nothing, Any, Any, Nothing, Nothing, Take[E, A]]]", "member" : "zio.stream.experimental.ZStream.toHub", "link" : "zio\/stream\/experimental\/ZStream.html#toHub(capacity:Int):zio.ZManaged[R,Nothing,zio.ZHub[Nothing,Any,Any,Nothing,Nothing,zio.stream.experimental.Take[E,A]]]", "kind" : "def"}, {"label" : "timeoutTo", "tail" : "(d: zio.Duration)(that: ZStream[R1, E1, A2]): ZStream[R1 with Has[Clock], E1, A2]", "member" : "zio.stream.experimental.ZStream.timeoutTo", "link" : "zio\/stream\/experimental\/ZStream.html#timeoutTo[R1<:R,E1>:E,A2>:A](d:zio.Duration)(that:zio.stream.experimental.ZStream[R1,E1,A2]):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E1,A2]", "kind" : "final def"}, {"label" : "timeoutHalt", "tail" : "(cause: Cause[E1])(d: zio.Duration): ZStream[R with Has[Clock], E1, A]", "member" : "zio.stream.experimental.ZStream.timeoutHalt", "link" : "zio\/stream\/experimental\/ZStream.html#timeoutHalt[E1>:E](cause:zio.Cause[E1])(d:zio.Duration):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],E1,A]", "kind" : "final def"}, {"label" : "timeoutFailCause", "tail" : "(cause: Cause[E1])(d: zio.Duration): ZStream[R with Has[Clock], E1, A]", "member" : "zio.stream.experimental.ZStream.timeoutFailCause", "link" : "zio\/stream\/experimental\/ZStream.html#timeoutFailCause[E1>:E](cause:zio.Cause[E1])(d:zio.Duration):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],E1,A]", "kind" : "final def"}, {"label" : "timeoutFail", "tail" : "(e: => E1)(d: zio.Duration): ZStream[R with Has[Clock], E1, A]", "member" : "zio.stream.experimental.ZStream.timeoutFail", "link" : "zio\/stream\/experimental\/ZStream.html#timeoutFail[E1>:E](e:=>E1)(d:zio.Duration):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],E1,A]", "kind" : "final def"}, {"label" : "timeout", "tail" : "(d: zio.Duration): ZStream[R with Has[Clock], E, A]", "member" : "zio.stream.experimental.ZStream.timeout", "link" : "zio\/stream\/experimental\/ZStream.html#timeout(d:zio.Duration):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],E,A]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(d: zio.Duration): ZStream[R with Has[Clock], E, A]", "member" : "zio.stream.experimental.ZStream.debounce", "link" : "zio\/stream\/experimental\/ZStream.html#debounce(d:zio.Duration):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],E,A]", "kind" : "final def"}, {"label" : "throttleShapeZIO", "tail" : "(units: Long, duration: zio.Duration, burst: Long)(costFn: (Chunk[A]) => ZIO[R1, E1, Long]): ZStream[R1 with Has[Clock], E1, A]", "member" : "zio.stream.experimental.ZStream.throttleShapeZIO", "link" : "zio\/stream\/experimental\/ZStream.html#throttleShapeZIO[R1<:R,E1>:E](units:Long,duration:zio.Duration,burst:Long)(costFn:zio.Chunk[A]=>zio.ZIO[R1,E1,Long]):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E1,A]", "kind" : "final def"}, {"label" : "throttleShapeM", "tail" : "(units: Long, duration: zio.Duration, burst: Long)(costFn: (Chunk[A]) => ZIO[R1, E1, Long]): ZStream[R1 with Has[Clock], E1, A]", "member" : "zio.stream.experimental.ZStream.throttleShapeM", "link" : "zio\/stream\/experimental\/ZStream.html#throttleShapeM[R1<:R,E1>:E](units:Long,duration:zio.Duration,burst:Long)(costFn:zio.Chunk[A]=>zio.ZIO[R1,E1,Long]):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E1,A]", "kind" : "final def"}, {"label" : "throttleShape", "tail" : "(units: Long, duration: zio.Duration, burst: Long)(costFn: (Chunk[A]) => Long): ZStream[R with Has[Clock], E, A]", "member" : "zio.stream.experimental.ZStream.throttleShape", "link" : "zio\/stream\/experimental\/ZStream.html#throttleShape(units:Long,duration:zio.Duration,burst:Long)(costFn:zio.Chunk[A]=>Long):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],E,A]", "kind" : "final def"}, {"label" : "throttleEnforceZIO", "tail" : "(units: Long, duration: zio.Duration, burst: Long)(costFn: (Chunk[A]) => ZIO[R1, E1, Long]): ZStream[R1 with Has[Clock], E1, A]", "member" : "zio.stream.experimental.ZStream.throttleEnforceZIO", "link" : "zio\/stream\/experimental\/ZStream.html#throttleEnforceZIO[R1<:R,E1>:E](units:Long,duration:zio.Duration,burst:Long)(costFn:zio.Chunk[A]=>zio.ZIO[R1,E1,Long]):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E1,A]", "kind" : "final def"}, {"label" : "throttleEnforceM", "tail" : "(units: Long, duration: zio.Duration, burst: Long)(costFn: (Chunk[A]) => ZIO[R1, E1, Long]): ZStream[R1 with Has[Clock], E1, A]", "member" : "zio.stream.experimental.ZStream.throttleEnforceM", "link" : "zio\/stream\/experimental\/ZStream.html#throttleEnforceM[R1<:R,E1>:E](units:Long,duration:zio.Duration,burst:Long)(costFn:zio.Chunk[A]=>zio.ZIO[R1,E1,Long]):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E1,A]", "kind" : "final def"}, {"label" : "throttleEnforce", "tail" : "(units: Long, duration: zio.Duration, burst: Long)(costFn: (Chunk[A]) => Long): ZStream[R with Has[Clock], E, A]", "member" : "zio.stream.experimental.ZStream.throttleEnforce", "link" : "zio\/stream\/experimental\/ZStream.html#throttleEnforce(units:Long,duration:zio.Duration,burst:Long)(costFn:zio.Chunk[A]=>Long):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],E,A]", "kind" : "final def"}, {"label" : "tapError", "tail" : "(f: (E) => ZIO[R1, E1, Any])(ev: CanFail[E]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.tapError", "link" : "zio\/stream\/experimental\/ZStream.html#tapError[R1<:R,E1>:E](f:E=>zio.ZIO[R1,E1,Any])(implicitev:zio.CanFail[E]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "final def"}, {"label" : "tap", "tail" : "(f0: (A) => ZIO[R1, E1, Any]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.tap", "link" : "zio\/stream\/experimental\/ZStream.html#tap[R1<:R,E1>:E](f0:A=>zio.ZIO[R1,E1,Any]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(f: (A) => Boolean): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.takeWhile", "link" : "zio\/stream\/experimental\/ZStream.html#takeWhile(f:A=>Boolean):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "takeUntilZIO", "tail" : "(f: (A) => ZIO[R1, E1, Boolean]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.takeUntilZIO", "link" : "zio\/stream\/experimental\/ZStream.html#takeUntilZIO[R1<:R,E1>:E](f:A=>zio.ZIO[R1,E1,Boolean]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "def"}, {"label" : "takeUntilM", "tail" : "(f: (A) => ZIO[R1, E1, Boolean]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.takeUntilM", "link" : "zio\/stream\/experimental\/ZStream.html#takeUntilM[R1<:R,E1>:E](f:A=>zio.ZIO[R1,E1,Boolean]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "def"}, {"label" : "takeUntil", "tail" : "(f: (A) => Boolean): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.takeUntil", "link" : "zio\/stream\/experimental\/ZStream.html#takeUntil(f:A=>Boolean):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.takeRight", "link" : "zio\/stream\/experimental\/ZStream.html#takeRight(n:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Long): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.take", "link" : "zio\/stream\/experimental\/ZStream.html#take(n:Long):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "someOrFail", "tail" : "(e: => E1)(ev: <:<[A, Option[A2]]): ZStream[R, E1, A2]", "member" : "zio.stream.experimental.ZStream.someOrFail", "link" : "zio\/stream\/experimental\/ZStream.html#someOrFail[A2,E1>:E](e:=>E1)(implicitev:A<:<Option[A2]):zio.stream.experimental.ZStream[R,E1,A2]", "kind" : "final def"}, {"label" : "someOrElse", "tail" : "(default: => A2)(ev: <:<[A, Option[A2]]): ZStream[R, E, A2]", "member" : "zio.stream.experimental.ZStream.someOrElse", "link" : "zio\/stream\/experimental\/ZStream.html#someOrElse[A2](default:=>A2)(implicitev:A<:<Option[A2]):zio.stream.experimental.ZStream[R,E,A2]", "kind" : "final def"}, {"label" : "some", "tail" : "(ev: <:<[A, Option[A2]]): ZStream[R, Option[E], A2]", "member" : "zio.stream.experimental.ZStream.some", "link" : "zio\/stream\/experimental\/ZStream.html#some[A2](implicitev:A<:<Option[A2]):zio.stream.experimental.ZStream[R,Option[E],A2]", "kind" : "final def"}, {"label" : "scheduleWith", "tail" : "(schedule: Schedule[R1, A, B])(f: (A) => C, g: (B) => C): ZStream[R1 with Has[Clock], E1, C]", "member" : "zio.stream.experimental.ZStream.scheduleWith", "link" : "zio\/stream\/experimental\/ZStream.html#scheduleWith[R1<:R,E1>:E,B,C](schedule:zio.Schedule[R1,A,B])(f:A=>C,g:B=>C):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E1,C]", "kind" : "final def"}, {"label" : "scheduleEither", "tail" : "(schedule: Schedule[R1, A, B]): ZStream[R1 with Has[Clock], E1, Either[B, A]]", "member" : "zio.stream.experimental.ZStream.scheduleEither", "link" : "zio\/stream\/experimental\/ZStream.html#scheduleEither[R1<:R,E1>:E,B](schedule:zio.Schedule[R1,A,B]):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E1,Either[B,A]]", "kind" : "final def"}, {"label" : "schedule", "tail" : "(schedule: Schedule[R1, A, Any]): ZStream[R1 with Has[Clock], E, A]", "member" : "zio.stream.experimental.ZStream.schedule", "link" : "zio\/stream\/experimental\/ZStream.html#schedule[R1<:R](schedule:zio.Schedule[R1,A,Any]):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E,A]", "kind" : "final def"}, {"label" : "scanZIO", "tail" : "(s: S)(f: (S, A) => ZIO[R1, E1, S]): ZStream[R1, E1, S]", "member" : "zio.stream.experimental.ZStream.scanZIO", "link" : "zio\/stream\/experimental\/ZStream.html#scanZIO[R1<:R,E1>:E,S](s:S)(f:(S,A)=>zio.ZIO[R1,E1,S]):zio.stream.experimental.ZStream[R1,E1,S]", "kind" : "def"}, {"label" : "scanReduceZIO", "tail" : "(f: (A1, A) => ZIO[R1, E1, A1]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.scanReduceZIO", "link" : "zio\/stream\/experimental\/ZStream.html#scanReduceZIO[R1<:R,E1>:E,A1>:A](f:(A1,A)=>zio.ZIO[R1,E1,A1]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "def"}, {"label" : "scanReduceM", "tail" : "(f: (A1, A) => ZIO[R1, E1, A1]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.scanReduceM", "link" : "zio\/stream\/experimental\/ZStream.html#scanReduceM[R1<:R,E1>:E,A1>:A](f:(A1,A)=>zio.ZIO[R1,E1,A1]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "def"}, {"label" : "scanReduce", "tail" : "(f: (A1, A) => A1): ZStream[R, E, A1]", "member" : "zio.stream.experimental.ZStream.scanReduce", "link" : "zio\/stream\/experimental\/ZStream.html#scanReduce[A1>:A](f:(A1,A)=>A1):zio.stream.experimental.ZStream[R,E,A1]", "kind" : "def"}, {"label" : "scanM", "tail" : "(s: S)(f: (S, A) => ZIO[R1, E1, S]): ZStream[R1, E1, S]", "member" : "zio.stream.experimental.ZStream.scanM", "link" : "zio\/stream\/experimental\/ZStream.html#scanM[R1<:R,E1>:E,S](s:S)(f:(S,A)=>zio.ZIO[R1,E1,S]):zio.stream.experimental.ZStream[R1,E1,S]", "kind" : "def"}, {"label" : "scan", "tail" : "(s: S)(f: (S, A) => S): ZStream[R, E, S]", "member" : "zio.stream.experimental.ZStream.scan", "link" : "zio\/stream\/experimental\/ZStream.html#scan[S](s:S)(f:(S,A)=>S):zio.stream.experimental.ZStream[R,E,S]", "kind" : "def"}, {"label" : "runSum", "tail" : "(ev: Numeric[A1]): ZIO[R, E, A1]", "member" : "zio.stream.experimental.ZStream.runSum", "link" : "zio\/stream\/experimental\/ZStream.html#runSum[A1>:A](implicitev:Numeric[A1]):zio.ZIO[R,E,A1]", "kind" : "final def"}, {"label" : "runLast", "tail" : "(): ZIO[R, E, Option[A]]", "member" : "zio.stream.experimental.ZStream.runLast", "link" : "zio\/stream\/experimental\/ZStream.html#runLast:zio.ZIO[R,E,Option[A]]", "kind" : "def"}, {"label" : "runHead", "tail" : "(): ZIO[R, E, Option[A]]", "member" : "zio.stream.experimental.ZStream.runHead", "link" : "zio\/stream\/experimental\/ZStream.html#runHead:zio.ZIO[R,E,Option[A]]", "kind" : "def"}, {"label" : "runDrain", "tail" : "(): ZIO[R, E, Unit]", "member" : "zio.stream.experimental.ZStream.runDrain", "link" : "zio\/stream\/experimental\/ZStream.html#runDrain:zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "runCount", "tail" : "(): ZIO[R, E, Long]", "member" : "zio.stream.experimental.ZStream.runCount", "link" : "zio\/stream\/experimental\/ZStream.html#runCount:zio.ZIO[R,E,Long]", "kind" : "final def"}, {"label" : "runCollect", "tail" : "(): ZIO[R, E, Chunk[A]]", "member" : "zio.stream.experimental.ZStream.runCollect", "link" : "zio\/stream\/experimental\/ZStream.html#runCollect:zio.ZIO[R,E,zio.Chunk[A]]", "kind" : "def"}, {"label" : "runManaged", "tail" : "(sink: ZSink[R1, E, A, E2, Any, B]): ZManaged[R1, E2, B]", "member" : "zio.stream.experimental.ZStream.runManaged", "link" : "zio\/stream\/experimental\/ZStream.html#runManaged[R1<:R,E2,B](sink:zio.stream.experimental.ZSink[R1,E,A,E2,Any,B]):zio.ZManaged[R1,E2,B]", "kind" : "def"}, {"label" : "run", "tail" : "(sink: ZSink[R1, E, A, E2, Any, Z]): ZIO[R1, E2, Z]", "member" : "zio.stream.experimental.ZStream.run", "link" : "zio\/stream\/experimental\/ZStream.html#run[R1<:R,E2,Z](sink:zio.stream.experimental.ZSink[R1,E,A,E2,Any,Z]):zio.ZIO[R1,E2,Z]", "kind" : "def"}, {"label" : "rightOrFail", "tail" : "(e: => E1)(ev: <:<[A, Either[A1, A2]]): ZStream[R, E1, A2]", "member" : "zio.stream.experimental.ZStream.rightOrFail", "link" : "zio\/stream\/experimental\/ZStream.html#rightOrFail[A1,A2,E1>:E](e:=>E1)(implicitev:A<:<Either[A1,A2]):zio.stream.experimental.ZStream[R,E1,A2]", "kind" : "final def"}, {"label" : "right", "tail" : "(ev: <:<[A, Either[A1, A2]]): ZStream[R, Option[E], A2]", "member" : "zio.stream.experimental.ZStream.right", "link" : "zio\/stream\/experimental\/ZStream.html#right[A1,A2](implicitev:A<:<Either[A1,A2]):zio.stream.experimental.ZStream[R,Option[E],A2]", "kind" : "final def"}, {"label" : "repeatWith", "tail" : "(schedule: Schedule[R1, Any, B])(f: (A) => C, g: (B) => C): ZStream[R1 with Has[Clock], E, C]", "member" : "zio.stream.experimental.ZStream.repeatWith", "link" : "zio\/stream\/experimental\/ZStream.html#repeatWith[R1<:R,B,C](schedule:zio.Schedule[R1,Any,B])(f:A=>C,g:B=>C):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E,C]", "kind" : "final def"}, {"label" : "repeatElementsWith", "tail" : "(schedule: Schedule[R1, A, B])(f: (A) => C, g: (B) => C): ZStream[R1 with Has[Clock], E1, C]", "member" : "zio.stream.experimental.ZStream.repeatElementsWith", "link" : "zio\/stream\/experimental\/ZStream.html#repeatElementsWith[R1<:R,E1>:E,B,C](schedule:zio.Schedule[R1,A,B])(f:A=>C,g:B=>C):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E1,C]", "kind" : "final def"}, {"label" : "repeatElementsEither", "tail" : "(schedule: Schedule[R1, A, B]): ZStream[R1 with Has[Clock], E1, Either[B, A]]", "member" : "zio.stream.experimental.ZStream.repeatElementsEither", "link" : "zio\/stream\/experimental\/ZStream.html#repeatElementsEither[R1<:R,E1>:E,B](schedule:zio.Schedule[R1,A,B]):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E1,Either[B,A]]", "kind" : "final def"}, {"label" : "repeatElements", "tail" : "(schedule: Schedule[R1, A, Any]): ZStream[R1 with Has[Clock], E, A]", "member" : "zio.stream.experimental.ZStream.repeatElements", "link" : "zio\/stream\/experimental\/ZStream.html#repeatElements[R1<:R](schedule:zio.Schedule[R1,A,Any]):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E,A]", "kind" : "final def"}, {"label" : "repeatEither", "tail" : "(schedule: Schedule[R1, Any, B]): ZStream[R1 with Has[Clock], E, Either[B, A]]", "member" : "zio.stream.experimental.ZStream.repeatEither", "link" : "zio\/stream\/experimental\/ZStream.html#repeatEither[R1<:R,B](schedule:zio.Schedule[R1,Any,B]):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E,Either[B,A]]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(schedule: Schedule[R1, Any, B]): ZStream[R1 with Has[Clock], E, A]", "member" : "zio.stream.experimental.ZStream.repeat", "link" : "zio\/stream\/experimental\/ZStream.html#repeat[R1<:R,B](schedule:zio.Schedule[R1,Any,B]):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E,A]", "kind" : "final def"}, {"label" : "refineOrDieWith", "tail" : "(pf: PartialFunction[E, E1])(f: (E) => Throwable)(ev: CanFail[E]): ZStream[R, E1, A]", "member" : "zio.stream.experimental.ZStream.refineOrDieWith", "link" : "zio\/stream\/experimental\/ZStream.html#refineOrDieWith[E1](pf:PartialFunction[E,E1])(f:E=>Throwable)(implicitev:zio.CanFail[E]):zio.stream.experimental.ZStream[R,E1,A]", "kind" : "final def"}, {"label" : "refineOrDie", "tail" : "(pf: PartialFunction[E, E1])(ev1: <:<[E, Throwable], ev2: CanFail[E]): ZStream[R, E1, A]", "member" : "zio.stream.experimental.ZStream.refineOrDie", "link" : "zio\/stream\/experimental\/ZStream.html#refineOrDie[E1](pf:PartialFunction[E,E1])(implicitev1:E<:<Throwable,implicitev2:zio.CanFail[E]):zio.stream.experimental.ZStream[R,E1,A]", "kind" : "final def"}, {"label" : "rechunk", "tail" : "(n: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.rechunk", "link" : "zio\/stream\/experimental\/ZStream.html#rechunk(n:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "provideSomeLayer", "tail" : "(): ProvideSomeLayer[R0, R, E, A]", "member" : "zio.stream.experimental.ZStream.provideSomeLayer", "link" : "zio\/stream\/experimental\/ZStream.html#provideSomeLayer[R0]:zio.stream.experimental.ZStream.ProvideSomeLayer[R0,R,E,A]", "kind" : "final def"}, {"label" : "provideSome", "tail" : "(env: (R0) => R)(ev: NeedsEnv[R]): ZStream[R0, E, A]", "member" : "zio.stream.experimental.ZStream.provideSome", "link" : "zio\/stream\/experimental\/ZStream.html#provideSome[R0](env:R0=>R)(implicitev:zio.NeedsEnv[R]):zio.stream.experimental.ZStream[R0,E,A]", "kind" : "final def"}, {"label" : "provideLayer", "tail" : "(layer: ZLayer[R0, E1, R1])(ev: <:<[R1, R]): ZStream[R0, E1, A]", "member" : "zio.stream.experimental.ZStream.provideLayer", "link" : "zio\/stream\/experimental\/ZStream.html#provideLayer[E1>:E,R0,R1](layer:zio.ZLayer[R0,E1,R1])(implicitev:R1<:<R):zio.stream.experimental.ZStream[R0,E1,A]", "kind" : "final def"}, {"label" : "provideCustomLayer", "tail" : "(layer: ZLayer[zio.ZEnv, E1, R1])(ev1: <:<[zio.ZEnv with R1, R], ev2: Union[zio.ZEnv, R1], tagged: zio.Tag[R1]): ZStream[zio.ZEnv, E1, A]", "member" : "zio.stream.experimental.ZStream.provideCustomLayer", "link" : "zio\/stream\/experimental\/ZStream.html#provideCustomLayer[E1>:E,R1](layer:zio.ZLayer[zio.ZEnv,E1,R1])(implicitev1:zio.ZEnvwithR1<:<R,implicitev2:zio.Has.Union[zio.ZEnv,R1],implicittagged:zio.Tag[R1]):zio.stream.experimental.ZStream[zio.ZEnv,E1,A]", "kind" : "def"}, {"label" : "provide", "tail" : "(r: R)(ev: NeedsEnv[R]): ZStream[Any, E, A]", "member" : "zio.stream.experimental.ZStream.provide", "link" : "zio\/stream\/experimental\/ZStream.html#provide(r:R)(implicitev:zio.NeedsEnv[R]):zio.stream.experimental.ZStream[Any,E,A]", "kind" : "final def"}, {"label" : "pipeThrough", "tail" : "(sink: ZSink[R1, E1, A, E2, L, Z]): ZStream[R1, E2, L]", "member" : "zio.stream.experimental.ZStream.pipeThrough", "link" : "zio\/stream\/experimental\/ZStream.html#pipeThrough[R1<:R,E1>:E,E2,L,Z](sink:zio.stream.experimental.ZSink[R1,E1,A,E2,L,Z]):zio.stream.experimental.ZStream[R1,E2,L]", "kind" : "def"}, {"label" : "peel", "tail" : "(sink: ZSink[R1, E1, A1, E1, A1, Z]): ZManaged[R1, E1, (Z, ZStream[R1, E1, A1])]", "member" : "zio.stream.experimental.ZStream.peel", "link" : "zio\/stream\/experimental\/ZStream.html#peel[R1<:R,E1>:E,A1>:A,Z](sink:zio.stream.experimental.ZSink[R1,E1,A1,E1,A1,Z]):zio.ZManaged[R1,E1,(Z,zio.stream.experimental.ZStream[R1,E1,A1])]", "kind" : "def"}, {"label" : "partitionEither", "tail" : "(p: (A) => ZIO[R1, E1, Either[A2, A3]], buffer: Int): ZManaged[R1, E1, (ZStream[Any, E1, A2], ZStream[Any, E1, A3])]", "member" : "zio.stream.experimental.ZStream.partitionEither", "link" : "zio\/stream\/experimental\/ZStream.html#partitionEither[R1<:R,E1>:E,A2,A3](p:A=>zio.ZIO[R1,E1,Either[A2,A3]],buffer:Int):zio.ZManaged[R1,E1,(zio.stream.experimental.ZStream[Any,E1,A2],zio.stream.experimental.ZStream[Any,E1,A3])]", "kind" : "final def"}, {"label" : "partition", "tail" : "(p: (A) => Boolean, buffer: Int): ZManaged[R, E, (ZStream[Any, E, A], ZStream[Any, E, A])]", "member" : "zio.stream.experimental.ZStream.partition", "link" : "zio\/stream\/experimental\/ZStream.html#partition(p:A=>Boolean,buffer:Int):zio.ZManaged[R,E,(zio.stream.experimental.ZStream[Any,E,A],zio.stream.experimental.ZStream[Any,E,A])]", "kind" : "def"}, {"label" : "orElseSucceed", "tail" : "(A1: => A1)(ev: CanFail[E]): ZStream[R, Nothing, A1]", "member" : "zio.stream.experimental.ZStream.orElseSucceed", "link" : "zio\/stream\/experimental\/ZStream.html#orElseSucceed[A1>:A](A1:=>A1)(implicitev:zio.CanFail[E]):zio.stream.experimental.ZStream[R,Nothing,A1]", "kind" : "final def"}, {"label" : "orElseOptional", "tail" : "(that: => ZStream[R1, Option[E1], A1])(ev: <:<[E, Option[E1]]): ZStream[R1, Option[E1], A1]", "member" : "zio.stream.experimental.ZStream.orElseOptional", "link" : "zio\/stream\/experimental\/ZStream.html#orElseOptional[R1<:R,E1,A1>:A](that:=>zio.stream.experimental.ZStream[R1,Option[E1],A1])(implicitev:E<:<Option[E1]):zio.stream.experimental.ZStream[R1,Option[E1],A1]", "kind" : "final def"}, {"label" : "orElseFail", "tail" : "(e1: => E1)(ev: CanFail[E]): ZStream[R, E1, A]", "member" : "zio.stream.experimental.ZStream.orElseFail", "link" : "zio\/stream\/experimental\/ZStream.html#orElseFail[E1](e1:=>E1)(implicitev:zio.CanFail[E]):zio.stream.experimental.ZStream[R,E1,A]", "kind" : "final def"}, {"label" : "orElseEither", "tail" : "(that: => ZStream[R1, E2, A2])(ev: CanFail[E]): ZStream[R1, E2, Either[A, A2]]", "member" : "zio.stream.experimental.ZStream.orElseEither", "link" : "zio\/stream\/experimental\/ZStream.html#orElseEither[R1<:R,E2,A2](that:=>zio.stream.experimental.ZStream[R1,E2,A2])(implicitev:zio.CanFail[E]):zio.stream.experimental.ZStream[R1,E2,Either[A,A2]]", "kind" : "final def"}, {"label" : "orElse", "tail" : "(that: => ZStream[R1, E1, A1])(ev: CanFail[E]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.orElse", "link" : "zio\/stream\/experimental\/ZStream.html#orElse[R1<:R,E1,A1>:A](that:=>zio.stream.experimental.ZStream[R1,E1,A1])(implicitev:zio.CanFail[E]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "def"}, {"label" : "onExecutor", "tail" : "(executor: Executor): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.onExecutor", "link" : "zio\/stream\/experimental\/ZStream.html#onExecutor(executor:zio.Executor):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "onError", "tail" : "(cleanup: (Cause[E]) => URIO[R1, Any]): ZStream[R1, E, A]", "member" : "zio.stream.experimental.ZStream.onError", "link" : "zio\/stream\/experimental\/ZStream.html#onError[R1<:R](cleanup:zio.Cause[E]=>zio.URIO[R1,Any]):zio.stream.experimental.ZStream[R1,E,A]", "kind" : "final def"}, {"label" : "mergeWith", "tail" : "(that: ZStream[R1, E1, A2], strategy: TerminationStrategy)(l: (A) => A3, r: (A2) => A3): ZStream[R1, E1, A3]", "member" : "zio.stream.experimental.ZStream.mergeWith", "link" : "zio\/stream\/experimental\/ZStream.html#mergeWith[R1<:R,E1>:E,A2,A3](that:zio.stream.experimental.ZStream[R1,E1,A2],strategy:zio.stream.experimental.ZStream.TerminationStrategy)(l:A=>A3,r:A2=>A3):zio.stream.experimental.ZStream[R1,E1,A3]", "kind" : "final def"}, {"label" : "mergeEither", "tail" : "(that: ZStream[R1, E1, A2]): ZStream[R1, E1, Either[A, A2]]", "member" : "zio.stream.experimental.ZStream.mergeEither", "link" : "zio\/stream\/experimental\/ZStream.html#mergeEither[R1<:R,E1>:E,A2](that:zio.stream.experimental.ZStream[R1,E1,A2]):zio.stream.experimental.ZStream[R1,E1,Either[A,A2]]", "kind" : "final def"}, {"label" : "mergeTerminateRight", "tail" : "(that: ZStream[R1, E1, A1]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.mergeTerminateRight", "link" : "zio\/stream\/experimental\/ZStream.html#mergeTerminateRight[R1<:R,E1>:E,A1>:A](that:zio.stream.experimental.ZStream[R1,E1,A1]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "mergeTerminateLeft", "tail" : "(that: ZStream[R1, E1, A1]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.mergeTerminateLeft", "link" : "zio\/stream\/experimental\/ZStream.html#mergeTerminateLeft[R1<:R,E1>:E,A1>:A](that:zio.stream.experimental.ZStream[R1,E1,A1]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "mergeTerminateEither", "tail" : "(that: ZStream[R1, E1, A1]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.mergeTerminateEither", "link" : "zio\/stream\/experimental\/ZStream.html#mergeTerminateEither[R1<:R,E1>:E,A1>:A](that:zio.stream.experimental.ZStream[R1,E1,A1]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "merge", "tail" : "(that: ZStream[R1, E1, A1], strategy: TerminationStrategy): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.merge", "link" : "zio\/stream\/experimental\/ZStream.html#merge[R1<:R,E1>:E,A1>:A](that:zio.stream.experimental.ZStream[R1,E1,A1],strategy:zio.stream.experimental.ZStream.TerminationStrategy):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "mapZIOPartitioned", "tail" : "(keyBy: (A) => K, buffer: Int)(f: (A) => ZIO[R1, E1, A2]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.mapZIOPartitioned", "link" : "zio\/stream\/experimental\/ZStream.html#mapZIOPartitioned[R1<:R,E1>:E,A2,K](keyBy:A=>K,buffer:Int)(f:A=>zio.ZIO[R1,E1,A2]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "final def"}, {"label" : "mapZIOParUnordered", "tail" : "(n: Int)(f: (A) => ZIO[R1, E1, A2]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.mapZIOParUnordered", "link" : "zio\/stream\/experimental\/ZStream.html#mapZIOParUnordered[R1<:R,E1>:E,A2](n:Int)(f:A=>zio.ZIO[R1,E1,A2]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "final def"}, {"label" : "mapZIOPar", "tail" : "(n: Int)(f: (A) => ZIO[R1, E1, A2]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.mapZIOPar", "link" : "zio\/stream\/experimental\/ZStream.html#mapZIOPar[R1<:R,E1>:E,A2](n:Int)(f:A=>zio.ZIO[R1,E1,A2]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "final def"}, {"label" : "mapZIO", "tail" : "(f: (A) => ZIO[R1, E1, A1]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.mapZIO", "link" : "zio\/stream\/experimental\/ZStream.html#mapZIO[R1<:R,E1>:E,A1](f:A=>zio.ZIO[R1,E1,A1]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "def"}, {"label" : "mapMPartitioned", "tail" : "(keyBy: (A) => K, buffer: Int)(f: (A) => ZIO[R1, E1, A2]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.mapMPartitioned", "link" : "zio\/stream\/experimental\/ZStream.html#mapMPartitioned[R1<:R,E1>:E,A2,K](keyBy:A=>K,buffer:Int)(f:A=>zio.ZIO[R1,E1,A2]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "final def"}, {"label" : "mapMParUnordered", "tail" : "(n: Int)(f: (A) => ZIO[R1, E1, A2]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.mapMParUnordered", "link" : "zio\/stream\/experimental\/ZStream.html#mapMParUnordered[R1<:R,E1>:E,A2](n:Int)(f:A=>zio.ZIO[R1,E1,A2]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "final def"}, {"label" : "mapMPar", "tail" : "(n: Int)(f: (A) => ZIO[R1, E1, A2]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.mapMPar", "link" : "zio\/stream\/experimental\/ZStream.html#mapMPar[R1<:R,E1>:E,A2](n:Int)(f:A=>zio.ZIO[R1,E1,A2]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "final def"}, {"label" : "mapM", "tail" : "(f: (A) => ZIO[R1, E1, A1]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.mapM", "link" : "zio\/stream\/experimental\/ZStream.html#mapM[R1<:R,E1>:E,A1](f:A=>zio.ZIO[R1,E1,A1]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "def"}, {"label" : "mapErrorCause", "tail" : "(f: (Cause[E]) => Cause[E2]): ZStream[R, E2, A]", "member" : "zio.stream.experimental.ZStream.mapErrorCause", "link" : "zio\/stream\/experimental\/ZStream.html#mapErrorCause[E2](f:zio.Cause[E]=>zio.Cause[E2]):zio.stream.experimental.ZStream[R,E2,A]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (E) => E2): ZStream[R, E2, A]", "member" : "zio.stream.experimental.ZStream.mapError", "link" : "zio\/stream\/experimental\/ZStream.html#mapError[E2](f:E=>E2):zio.stream.experimental.ZStream[R,E2,A]", "kind" : "def"}, {"label" : "mapConcatZIO", "tail" : "(f: (A) => ZIO[R1, E1, Iterable[A2]]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.mapConcatZIO", "link" : "zio\/stream\/experimental\/ZStream.html#mapConcatZIO[R1<:R,E1>:E,A2](f:A=>zio.ZIO[R1,E1,Iterable[A2]]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "final def"}, {"label" : "mapConcatM", "tail" : "(f: (A) => ZIO[R1, E1, Iterable[A2]]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.mapConcatM", "link" : "zio\/stream\/experimental\/ZStream.html#mapConcatM[R1<:R,E1>:E,A2](f:A=>zio.ZIO[R1,E1,Iterable[A2]]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "final def"}, {"label" : "mapConcatChunkZIO", "tail" : "(f: (A) => ZIO[R1, E1, Chunk[A2]]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.mapConcatChunkZIO", "link" : "zio\/stream\/experimental\/ZStream.html#mapConcatChunkZIO[R1<:R,E1>:E,A2](f:A=>zio.ZIO[R1,E1,zio.Chunk[A2]]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "final def"}, {"label" : "mapConcatChunkM", "tail" : "(f: (A) => ZIO[R1, E1, Chunk[A2]]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.mapConcatChunkM", "link" : "zio\/stream\/experimental\/ZStream.html#mapConcatChunkM[R1<:R,E1>:E,A2](f:A=>zio.ZIO[R1,E1,zio.Chunk[A2]]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "final def"}, {"label" : "mapConcatChunk", "tail" : "(f: (A) => Chunk[A2]): ZStream[R, E, A2]", "member" : "zio.stream.experimental.ZStream.mapConcatChunk", "link" : "zio\/stream\/experimental\/ZStream.html#mapConcatChunk[A2](f:A=>zio.Chunk[A2]):zio.stream.experimental.ZStream[R,E,A2]", "kind" : "def"}, {"label" : "mapConcat", "tail" : "(f: (A) => Iterable[A2]): ZStream[R, E, A2]", "member" : "zio.stream.experimental.ZStream.mapConcat", "link" : "zio\/stream\/experimental\/ZStream.html#mapConcat[A2](f:A=>Iterable[A2]):zio.stream.experimental.ZStream[R,E,A2]", "kind" : "def"}, {"label" : "mapChunksZIO", "tail" : "(f: (Chunk[A]) => ZIO[R1, E1, Chunk[A2]]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.mapChunksZIO", "link" : "zio\/stream\/experimental\/ZStream.html#mapChunksZIO[R1<:R,E1>:E,A2](f:zio.Chunk[A]=>zio.ZIO[R1,E1,zio.Chunk[A2]]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "def"}, {"label" : "mapChunksM", "tail" : "(f: (Chunk[A]) => ZIO[R1, E1, Chunk[A2]]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.mapChunksM", "link" : "zio\/stream\/experimental\/ZStream.html#mapChunksM[R1<:R,E1>:E,A2](f:zio.Chunk[A]=>zio.ZIO[R1,E1,zio.Chunk[A2]]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "def"}, {"label" : "mapChunks", "tail" : "(f: (Chunk[A]) => Chunk[A2]): ZStream[R, E, A2]", "member" : "zio.stream.experimental.ZStream.mapChunks", "link" : "zio\/stream\/experimental\/ZStream.html#mapChunks[A2](f:zio.Chunk[A]=>zio.Chunk[A2]):zio.stream.experimental.ZStream[R,E,A2]", "kind" : "def"}, {"label" : "mapAccumZIO", "tail" : "(s: S)(f: (S, A) => ZIO[R1, E1, (S, A1)]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.mapAccumZIO", "link" : "zio\/stream\/experimental\/ZStream.html#mapAccumZIO[R1<:R,E1>:E,S,A1](s:S)(f:(S,A)=>zio.ZIO[R1,E1,(S,A1)]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "mapAccumM", "tail" : "(s: S)(f: (S, A) => ZIO[R1, E1, (S, A1)]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.mapAccumM", "link" : "zio\/stream\/experimental\/ZStream.html#mapAccumM[R1<:R,E1>:E,S,A1](s:S)(f:(S,A)=>zio.ZIO[R1,E1,(S,A1)]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "mapAccum", "tail" : "(s: S)(f: (S, A) => (S, A1)): ZStream[R, E, A1]", "member" : "zio.stream.experimental.ZStream.mapAccum", "link" : "zio\/stream\/experimental\/ZStream.html#mapAccum[S,A1](s:S)(f:(S,A)=>(S,A1)):zio.stream.experimental.ZStream[R,E,A1]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): ZStream[R, E, B]", "member" : "zio.stream.experimental.ZStream.map", "link" : "zio\/stream\/experimental\/ZStream.html#map[B](f:A=>B):zio.stream.experimental.ZStream[R,E,B]", "kind" : "final def"}, {"label" : "lock", "tail" : "(executor: Executor): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.lock", "link" : "zio\/stream\/experimental\/ZStream.html#lock(executor:zio.Executor):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "runIntoQueueElementsManaged", "tail" : "(queue: ZQueue[R1, Nothing, Nothing, Any, Exit[Option[E1], A], Any]): ZManaged[R1, E1, Unit]", "member" : "zio.stream.experimental.ZStream.runIntoQueueElementsManaged", "link" : "zio\/stream\/experimental\/ZStream.html#runIntoQueueElementsManaged[R1<:R,E1>:E](queue:zio.ZQueue[R1,Nothing,Nothing,Any,zio.Exit[Option[E1],A],Any]):zio.ZManaged[R1,E1,Unit]", "kind" : "final def"}, {"label" : "runIntoQueueManaged", "tail" : "(queue: ZQueue[R1, Nothing, Nothing, Any, Take[E1, A], Any]): ZManaged[R1, E1, Unit]", "member" : "zio.stream.experimental.ZStream.runIntoQueueManaged", "link" : "zio\/stream\/experimental\/ZStream.html#runIntoQueueManaged[R1<:R,E1>:E](queue:zio.ZQueue[R1,Nothing,Nothing,Any,zio.stream.experimental.Take[E1,A],Any]):zio.ZManaged[R1,E1,Unit]", "kind" : "final def"}, {"label" : "runIntoQueue", "tail" : "(queue: ZQueue[R1, Nothing, Nothing, Any, Take[E1, A], Any]): ZIO[R1, E1, Unit]", "member" : "zio.stream.experimental.ZStream.runIntoQueue", "link" : "zio\/stream\/experimental\/ZStream.html#runIntoQueue[R1<:R,E1>:E](queue:zio.ZQueue[R1,Nothing,Nothing,Any,zio.stream.experimental.Take[E1,A],Any]):zio.ZIO[R1,E1,Unit]", "kind" : "final def"}, {"label" : "runIntoManaged", "tail" : "(queue: ZQueue[R1, Nothing, Nothing, Any, Take[E1, A], Any]): ZManaged[R1, E1, Unit]", "member" : "zio.stream.experimental.ZStream.runIntoManaged", "link" : "zio\/stream\/experimental\/ZStream.html#runIntoManaged[R1<:R,E1>:E](queue:zio.ZQueue[R1,Nothing,Nothing,Any,zio.stream.experimental.Take[E1,A],Any]):zio.ZManaged[R1,E1,Unit]", "kind" : "final def"}, {"label" : "runIntoHubManaged", "tail" : "(hub: ZHub[R1, Nothing, Nothing, Any, Take[E1, A], Any]): ZManaged[R1, E1, Unit]", "member" : "zio.stream.experimental.ZStream.runIntoHubManaged", "link" : "zio\/stream\/experimental\/ZStream.html#runIntoHubManaged[R1<:R,E1>:E](hub:zio.ZHub[R1,Nothing,Nothing,Any,zio.stream.experimental.Take[E1,A],Any]):zio.ZManaged[R1,E1,Unit]", "kind" : "final def"}, {"label" : "runIntoHub", "tail" : "(hub: ZHub[R1, Nothing, Nothing, Any, Take[E1, A], Any]): ZIO[R1, E1, Unit]", "member" : "zio.stream.experimental.ZStream.runIntoHub", "link" : "zio\/stream\/experimental\/ZStream.html#runIntoHub[R1<:R,E1>:E](hub:zio.ZHub[R1,Nothing,Nothing,Any,zio.stream.experimental.Take[E1,A],Any]):zio.ZIO[R1,E1,Unit]", "kind" : "final def"}, {"label" : "runIntoElementsManaged", "tail" : "(queue: ZQueue[R1, Nothing, Nothing, Any, Exit[Option[E1], A], Any]): ZManaged[R1, E1, Unit]", "member" : "zio.stream.experimental.ZStream.runIntoElementsManaged", "link" : "zio\/stream\/experimental\/ZStream.html#runIntoElementsManaged[R1<:R,E1>:E](queue:zio.ZQueue[R1,Nothing,Nothing,Any,zio.Exit[Option[E1],A],Any]):zio.ZManaged[R1,E1,Unit]", "kind" : "final def"}, {"label" : "runInto", "tail" : "(queue: ZQueue[R1, Nothing, Nothing, Any, Take[E1, A], Any]): ZIO[R1, E1, Unit]", "member" : "zio.stream.experimental.ZStream.runInto", "link" : "zio\/stream\/experimental\/ZStream.html#runInto[R1<:R,E1>:E](queue:zio.ZQueue[R1,Nothing,Nothing,Any,zio.stream.experimental.Take[E1,A],Any]):zio.ZIO[R1,E1,Unit]", "kind" : "final def"}, {"label" : "mkString", "tail" : "(before: String, middle: String, after: String): ZIO[R, E, String]", "member" : "zio.stream.experimental.ZStream.mkString", "link" : "zio\/stream\/experimental\/ZStream.html#mkString(before:String,middle:String,after:String):zio.ZIO[R,E,String]", "kind" : "final def"}, {"label" : "mkString", "tail" : "(): ZIO[R, E, String]", "member" : "zio.stream.experimental.ZStream.mkString", "link" : "zio\/stream\/experimental\/ZStream.html#mkString:zio.ZIO[R,E,String]", "kind" : "final def"}, {"label" : "interruptAfter", "tail" : "(duration: zio.Duration): ZStream[R with Has[Clock], E, A]", "member" : "zio.stream.experimental.ZStream.interruptAfter", "link" : "zio\/stream\/experimental\/ZStream.html#interruptAfter(duration:zio.Duration):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],E,A]", "kind" : "final def"}, {"label" : "interruptWhen", "tail" : "(p: Promise[E1, _]): ZStream[R, E1, A]", "member" : "zio.stream.experimental.ZStream.interruptWhen", "link" : "zio\/stream\/experimental\/ZStream.html#interruptWhen[E1>:E](p:zio.Promise[E1,_]):zio.stream.experimental.ZStream[R,E1,A]", "kind" : "final def"}, {"label" : "interruptWhen", "tail" : "(io: ZIO[R1, E1, Any]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.interruptWhen", "link" : "zio\/stream\/experimental\/ZStream.html#interruptWhen[R1<:R,E1>:E](io:zio.ZIO[R1,E1,Any]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: A1, middle: A1, end: A1): ZStream[R, E, A1]", "member" : "zio.stream.experimental.ZStream.intersperse", "link" : "zio\/stream\/experimental\/ZStream.html#intersperse[A1>:A](start:A1,middle:A1,end:A1):zio.stream.experimental.ZStream[R,E,A1]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(middle: A1): ZStream[R, E, A1]", "member" : "zio.stream.experimental.ZStream.intersperse", "link" : "zio\/stream\/experimental\/ZStream.html#intersperse[A1>:A](middle:A1):zio.stream.experimental.ZStream[R,E,A1]", "kind" : "final def"}, {"label" : "interleaveWith", "tail" : "(that: ZStream[R1, E1, A1])(b: ZStream[R1, E1, Boolean]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.interleaveWith", "link" : "zio\/stream\/experimental\/ZStream.html#interleaveWith[R1<:R,E1>:E,A1>:A](that:zio.stream.experimental.ZStream[R1,E1,A1])(b:zio.stream.experimental.ZStream[R1,E1,Boolean]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(that: ZStream[R1, E1, A1]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.interleave", "link" : "zio\/stream\/experimental\/ZStream.html#interleave[R1<:R,E1>:E,A1>:A](that:zio.stream.experimental.ZStream[R1,E1,A1]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "haltWhen", "tail" : "(p: Promise[E1, _]): ZStream[R, E1, A]", "member" : "zio.stream.experimental.ZStream.haltWhen", "link" : "zio\/stream\/experimental\/ZStream.html#haltWhen[E1>:E](p:zio.Promise[E1,_]):zio.stream.experimental.ZStream[R,E1,A]", "kind" : "final def"}, {"label" : "haltAfter", "tail" : "(duration: zio.Duration): ZStream[R with Has[Clock], E, A]", "member" : "zio.stream.experimental.ZStream.haltAfter", "link" : "zio\/stream\/experimental\/ZStream.html#haltAfter(duration:zio.Duration):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],E,A]", "kind" : "final def"}, {"label" : "haltWhen", "tail" : "(io: ZIO[R1, E1, Any]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.haltWhen", "link" : "zio\/stream\/experimental\/ZStream.html#haltWhen[R1<:R,E1>:E](io:zio.ZIO[R1,E1,Any]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "final def"}, {"label" : "groupedWithin", "tail" : "(chunkSize: Int, within: zio.Duration): ZStream[R with Has[Clock], E, Chunk[A]]", "member" : "zio.stream.experimental.ZStream.groupedWithin", "link" : "zio\/stream\/experimental\/ZStream.html#groupedWithin(chunkSize:Int,within:zio.Duration):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],E,zio.Chunk[A]]", "kind" : "def"}, {"label" : "grouped", "tail" : "(chunkSize: Int): ZStream[R, E, Chunk[A]]", "member" : "zio.stream.experimental.ZStream.grouped", "link" : "zio\/stream\/experimental\/ZStream.html#grouped(chunkSize:Int):zio.stream.experimental.ZStream[R,E,zio.Chunk[A]]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(f: (A) => K, buffer: Int): GroupBy[R, E, K, A]", "member" : "zio.stream.experimental.ZStream.groupByKey", "link" : "zio\/stream\/experimental\/ZStream.html#groupByKey[K](f:A=>K,buffer:Int):zio.stream.experimental.ZStream.GroupBy[R,E,K,A]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(f: (A) => ZIO[R1, E1, (K, V)], buffer: Int): GroupBy[R1, E1, K, V]", "member" : "zio.stream.experimental.ZStream.groupBy", "link" : "zio\/stream\/experimental\/ZStream.html#groupBy[R1<:R,E1>:E,K,V](f:A=>zio.ZIO[R1,E1,(K,V)],buffer:Int):zio.stream.experimental.ZStream.GroupBy[R1,E1,K,V]", "kind" : "final def"}, {"label" : "flattenTake", "tail" : "(ev: <:<[A, Take[E1, A1]]): ZStream[R, E1, A1]", "member" : "zio.stream.experimental.ZStream.flattenTake", "link" : "zio\/stream\/experimental\/ZStream.html#flattenTake[E1>:E,A1](implicitev:A<:<zio.stream.experimental.Take[E1,A1]):zio.stream.experimental.ZStream[R,E1,A1]", "kind" : "final def"}, {"label" : "flattenParUnbounded", "tail" : "(outputBuffer: Int)(ev: <:<[A, ZStream[R1, E1, A1]]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.flattenParUnbounded", "link" : "zio\/stream\/experimental\/ZStream.html#flattenParUnbounded[R1<:R,E1>:E,A1](outputBuffer:Int)(implicitev:A<:<zio.stream.experimental.ZStream[R1,E1,A1]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "def"}, {"label" : "flattenPar", "tail" : "(n: Int, outputBuffer: Int)(ev: <:<[A, ZStream[R1, E1, A1]]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.flattenPar", "link" : "zio\/stream\/experimental\/ZStream.html#flattenPar[R1<:R,E1>:E,A1](n:Int,outputBuffer:Int)(implicitev:A<:<zio.stream.experimental.ZStream[R1,E1,A1]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "def"}, {"label" : "flattenIterables", "tail" : "(ev: <:<[A, Iterable[A1]]): ZStream[R, E, A1]", "member" : "zio.stream.experimental.ZStream.flattenIterables", "link" : "zio\/stream\/experimental\/ZStream.html#flattenIterables[A1](implicitev:A<:<Iterable[A1]):zio.stream.experimental.ZStream[R,E,A1]", "kind" : "def"}, {"label" : "flattenExitOption", "tail" : "(ev: <:<[A, Exit[Option[E1], A1]]): ZStream[R, E1, A1]", "member" : "zio.stream.experimental.ZStream.flattenExitOption", "link" : "zio\/stream\/experimental\/ZStream.html#flattenExitOption[E1>:E,A1](implicitev:A<:<zio.Exit[Option[E1],A1]):zio.stream.experimental.ZStream[R,E1,A1]", "kind" : "def"}, {"label" : "flattenExit", "tail" : "(ev: <:<[A, Exit[E1, A1]]): ZStream[R, E1, A1]", "member" : "zio.stream.experimental.ZStream.flattenExit", "link" : "zio\/stream\/experimental\/ZStream.html#flattenExit[E1>:E,A1](implicitev:A<:<zio.Exit[E1,A1]):zio.stream.experimental.ZStream[R,E1,A1]", "kind" : "def"}, {"label" : "flattenChunks", "tail" : "(ev: <:<[A, Chunk[A1]]): ZStream[R, E, A1]", "member" : "zio.stream.experimental.ZStream.flattenChunks", "link" : "zio\/stream\/experimental\/ZStream.html#flattenChunks[A1](implicitev:A<:<zio.Chunk[A1]):zio.stream.experimental.ZStream[R,E,A1]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, ZStream[R1, E1, A1]]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.flatten", "link" : "zio\/stream\/experimental\/ZStream.html#flatten[R1<:R,E1>:E,A1](implicitev:A<:<zio.stream.experimental.ZStream[R1,E1,A1]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "def"}, {"label" : "flatMapParSwitch", "tail" : "(n: Int, bufferSize: Int)(f: (A) => ZStream[R1, E1, B]): ZStream[R1, E1, B]", "member" : "zio.stream.experimental.ZStream.flatMapParSwitch", "link" : "zio\/stream\/experimental\/ZStream.html#flatMapParSwitch[R1<:R,E1>:E,B](n:Int,bufferSize:Int)(f:A=>zio.stream.experimental.ZStream[R1,E1,B]):zio.stream.experimental.ZStream[R1,E1,B]", "kind" : "final def"}, {"label" : "flatMapPar", "tail" : "(n: Int, bufferSize: Int)(f: (A) => ZStream[R1, E1, B]): ZStream[R1, E1, B]", "member" : "zio.stream.experimental.ZStream.flatMapPar", "link" : "zio\/stream\/experimental\/ZStream.html#flatMapPar[R1<:R,E1>:E,B](n:Int,bufferSize:Int)(f:A=>zio.stream.experimental.ZStream[R1,E1,B]):zio.stream.experimental.ZStream[R1,E1,B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => ZStream[R1, E1, B]): ZStream[R1, E1, B]", "member" : "zio.stream.experimental.ZStream.flatMap", "link" : "zio\/stream\/experimental\/ZStream.html#flatMap[R1<:R,E1>:E,B](f:A=>zio.stream.experimental.ZStream[R1,E1,B]):zio.stream.experimental.ZStream[R1,E1,B]", "kind" : "final def"}, {"label" : "fixed", "tail" : "(duration: zio.Duration): ZStream[R with Has[Clock], E, A]", "member" : "zio.stream.experimental.ZStream.fixed", "link" : "zio\/stream\/experimental\/ZStream.html#fixed(duration:zio.Duration):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],E,A]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(pred: (A) => Boolean): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.filterNot", "link" : "zio\/stream\/experimental\/ZStream.html#filterNot(pred:A=>Boolean):zio.stream.experimental.ZStream[R,E,A]", "kind" : "final def"}, {"label" : "filterZIO", "tail" : "(f: (A) => ZIO[R1, E1, Boolean]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.filterZIO", "link" : "zio\/stream\/experimental\/ZStream.html#filterZIO[R1<:R,E1>:E](f:A=>zio.ZIO[R1,E1,Boolean]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "def"}, {"label" : "filterM", "tail" : "(f: (A) => ZIO[R1, E1, Boolean]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.filterM", "link" : "zio\/stream\/experimental\/ZStream.html#filterM[R1<:R,E1>:E](f:A=>zio.ZIO[R1,E1,Boolean]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "def"}, {"label" : "forever", "tail" : "(): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.forever", "link" : "zio\/stream\/experimental\/ZStream.html#forever:zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "runForeachWhileManaged", "tail" : "(f: (A) => ZIO[R1, E1, Boolean]): ZManaged[R1, E1, Unit]", "member" : "zio.stream.experimental.ZStream.runForeachWhileManaged", "link" : "zio\/stream\/experimental\/ZStream.html#runForeachWhileManaged[R1<:R,E1>:E](f:A=>zio.ZIO[R1,E1,Boolean]):zio.ZManaged[R1,E1,Unit]", "kind" : "final def"}, {"label" : "runForeachWhile", "tail" : "(f: (A) => ZIO[R1, E1, Boolean]): ZIO[R1, E1, Unit]", "member" : "zio.stream.experimental.ZStream.runForeachWhile", "link" : "zio\/stream\/experimental\/ZStream.html#runForeachWhile[R1<:R,E1>:E](f:A=>zio.ZIO[R1,E1,Boolean]):zio.ZIO[R1,E1,Unit]", "kind" : "final def"}, {"label" : "runForeachManaged", "tail" : "(f: (A) => ZIO[R1, E1, Any]): ZManaged[R1, E1, Unit]", "member" : "zio.stream.experimental.ZStream.runForeachManaged", "link" : "zio\/stream\/experimental\/ZStream.html#runForeachManaged[R1<:R,E1>:E](f:A=>zio.ZIO[R1,E1,Any]):zio.ZManaged[R1,E1,Unit]", "kind" : "final def"}, {"label" : "runForeachChunkManaged", "tail" : "(f: (Chunk[A]) => ZIO[R1, E1, Any]): ZManaged[R1, E1, Unit]", "member" : "zio.stream.experimental.ZStream.runForeachChunkManaged", "link" : "zio\/stream\/experimental\/ZStream.html#runForeachChunkManaged[R1<:R,E1>:E](f:zio.Chunk[A]=>zio.ZIO[R1,E1,Any]):zio.ZManaged[R1,E1,Unit]", "kind" : "final def"}, {"label" : "runForeachChunk", "tail" : "(f: (Chunk[A]) => ZIO[R1, E1, Any]): ZIO[R1, E1, Unit]", "member" : "zio.stream.experimental.ZStream.runForeachChunk", "link" : "zio\/stream\/experimental\/ZStream.html#runForeachChunk[R1<:R,E1>:E](f:zio.Chunk[A]=>zio.ZIO[R1,E1,Any]):zio.ZIO[R1,E1,Unit]", "kind" : "final def"}, {"label" : "runForeach", "tail" : "(f: (A) => ZIO[R1, E1, Any]): ZIO[R1, E1, Unit]", "member" : "zio.stream.experimental.ZStream.runForeach", "link" : "zio\/stream\/experimental\/ZStream.html#runForeach[R1<:R,E1>:E](f:A=>zio.ZIO[R1,E1,Any]):zio.ZIO[R1,E1,Unit]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(f: (A) => ZIO[R1, E1, Any]): ZIO[R1, E1, Unit]", "member" : "zio.stream.experimental.ZStream.foreach", "link" : "zio\/stream\/experimental\/ZStream.html#foreach[R1<:R,E1>:E](f:A=>zio.ZIO[R1,E1,Any]):zio.ZIO[R1,E1,Unit]", "kind" : "final def"}, {"label" : "runFoldZIO", "tail" : "(s: S)(f: (S, A) => ZIO[R1, E1, S]): ZIO[R1, E1, S]", "member" : "zio.stream.experimental.ZStream.runFoldZIO", "link" : "zio\/stream\/experimental\/ZStream.html#runFoldZIO[R1<:R,E1>:E,S](s:S)(f:(S,A)=>zio.ZIO[R1,E1,S]):zio.ZIO[R1,E1,S]", "kind" : "final def"}, {"label" : "runFoldWhileManaged", "tail" : "(s: S)(cont: (S) => Boolean)(f: (S, A) => S): ZManaged[R, E, S]", "member" : "zio.stream.experimental.ZStream.runFoldWhileManaged", "link" : "zio\/stream\/experimental\/ZStream.html#runFoldWhileManaged[S](s:S)(cont:S=>Boolean)(f:(S,A)=>S):zio.ZManaged[R,E,S]", "kind" : "def"}, {"label" : "runFoldWhileZIO", "tail" : "(s: S)(cont: (S) => Boolean)(f: (S, A) => ZIO[R1, E1, S]): ZIO[R1, E1, S]", "member" : "zio.stream.experimental.ZStream.runFoldWhileZIO", "link" : "zio\/stream\/experimental\/ZStream.html#runFoldWhileZIO[R1<:R,E1>:E,S](s:S)(cont:S=>Boolean)(f:(S,A)=>zio.ZIO[R1,E1,S]):zio.ZIO[R1,E1,S]", "kind" : "final def"}, {"label" : "runFoldWhileManagedZIO", "tail" : "(s: S)(cont: (S) => Boolean)(f: (S, A) => ZIO[R1, E1, S]): ZManaged[R1, E1, S]", "member" : "zio.stream.experimental.ZStream.runFoldWhileManagedZIO", "link" : "zio\/stream\/experimental\/ZStream.html#runFoldWhileManagedZIO[R1<:R,E1>:E,S](s:S)(cont:S=>Boolean)(f:(S,A)=>zio.ZIO[R1,E1,S]):zio.ZManaged[R1,E1,S]", "kind" : "final def"}, {"label" : "runFoldWhileManagedM", "tail" : "(s: S)(cont: (S) => Boolean)(f: (S, A) => ZIO[R1, E1, S]): ZManaged[R1, E1, S]", "member" : "zio.stream.experimental.ZStream.runFoldWhileManagedM", "link" : "zio\/stream\/experimental\/ZStream.html#runFoldWhileManagedM[R1<:R,E1>:E,S](s:S)(cont:S=>Boolean)(f:(S,A)=>zio.ZIO[R1,E1,S]):zio.ZManaged[R1,E1,S]", "kind" : "final def"}, {"label" : "runFoldWhileM", "tail" : "(s: S)(cont: (S) => Boolean)(f: (S, A) => ZIO[R1, E1, S]): ZIO[R1, E1, S]", "member" : "zio.stream.experimental.ZStream.runFoldWhileM", "link" : "zio\/stream\/experimental\/ZStream.html#runFoldWhileM[R1<:R,E1>:E,S](s:S)(cont:S=>Boolean)(f:(S,A)=>zio.ZIO[R1,E1,S]):zio.ZIO[R1,E1,S]", "kind" : "final def"}, {"label" : "runFoldWhile", "tail" : "(s: S)(cont: (S) => Boolean)(f: (S, A) => S): ZIO[R, E, S]", "member" : "zio.stream.experimental.ZStream.runFoldWhile", "link" : "zio\/stream\/experimental\/ZStream.html#runFoldWhile[S](s:S)(cont:S=>Boolean)(f:(S,A)=>S):zio.ZIO[R,E,S]", "kind" : "final def"}, {"label" : "runFoldManagedZIO", "tail" : "(s: S)(f: (S, A) => ZIO[R1, E1, S]): ZManaged[R1, E1, S]", "member" : "zio.stream.experimental.ZStream.runFoldManagedZIO", "link" : "zio\/stream\/experimental\/ZStream.html#runFoldManagedZIO[R1<:R,E1>:E,S](s:S)(f:(S,A)=>zio.ZIO[R1,E1,S]):zio.ZManaged[R1,E1,S]", "kind" : "final def"}, {"label" : "runFoldManagedM", "tail" : "(s: S)(f: (S, A) => ZIO[R1, E1, S]): ZManaged[R1, E1, S]", "member" : "zio.stream.experimental.ZStream.runFoldManagedM", "link" : "zio\/stream\/experimental\/ZStream.html#runFoldManagedM[R1<:R,E1>:E,S](s:S)(f:(S,A)=>zio.ZIO[R1,E1,S]):zio.ZManaged[R1,E1,S]", "kind" : "final def"}, {"label" : "runFoldManaged", "tail" : "(s: S)(f: (S, A) => S): ZManaged[R, E, S]", "member" : "zio.stream.experimental.ZStream.runFoldManaged", "link" : "zio\/stream\/experimental\/ZStream.html#runFoldManaged[S](s:S)(f:(S,A)=>S):zio.ZManaged[R,E,S]", "kind" : "final def"}, {"label" : "runFoldM", "tail" : "(s: S)(f: (S, A) => ZIO[R1, E1, S]): ZIO[R1, E1, S]", "member" : "zio.stream.experimental.ZStream.runFoldM", "link" : "zio\/stream\/experimental\/ZStream.html#runFoldM[R1<:R,E1>:E,S](s:S)(f:(S,A)=>zio.ZIO[R1,E1,S]):zio.ZIO[R1,E1,S]", "kind" : "final def"}, {"label" : "runFold", "tail" : "(s: S)(f: (S, A) => S): ZIO[R, E, S]", "member" : "zio.stream.experimental.ZStream.runFold", "link" : "zio\/stream\/experimental\/ZStream.html#runFold[S](s:S)(f:(S,A)=>S):zio.ZIO[R,E,S]", "kind" : "final def"}, {"label" : "findZIO", "tail" : "(f: (A) => ZIO[R1, E1, Boolean]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.findZIO", "link" : "zio\/stream\/experimental\/ZStream.html#findZIO[R1<:R,E1>:E,S](f:A=>zio.ZIO[R1,E1,Boolean]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "final def"}, {"label" : "findM", "tail" : "(f: (A) => ZIO[R1, E1, Boolean]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.findM", "link" : "zio\/stream\/experimental\/ZStream.html#findM[R1<:R,E1>:E,S](f:A=>zio.ZIO[R1,E1,Boolean]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "final def"}, {"label" : "find", "tail" : "(f: (A) => Boolean): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.find", "link" : "zio\/stream\/experimental\/ZStream.html#find(f:A=>Boolean):zio.stream.experimental.ZStream[R,E,A]", "kind" : "final def"}, {"label" : "filter", "tail" : "(f: (A) => Boolean): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.filter", "link" : "zio\/stream\/experimental\/ZStream.html#filter(f:A=>Boolean):zio.stream.experimental.ZStream[R,E,A]", "kind" : "final def"}, {"label" : "ensuringFirst", "tail" : "(fin: ZIO[R1, Nothing, Any]): ZStream[R1, E, A]", "member" : "zio.stream.experimental.ZStream.ensuringFirst", "link" : "zio\/stream\/experimental\/ZStream.html#ensuringFirst[R1<:R](fin:zio.ZIO[R1,Nothing,Any]):zio.stream.experimental.ZStream[R1,E,A]", "kind" : "final def"}, {"label" : "ensuring", "tail" : "(fin: ZIO[R1, Nothing, Any]): ZStream[R1, E, A]", "member" : "zio.stream.experimental.ZStream.ensuring", "link" : "zio\/stream\/experimental\/ZStream.html#ensuring[R1<:R](fin:zio.ZIO[R1,Nothing,Any]):zio.stream.experimental.ZStream[R1,E,A]", "kind" : "final def"}, {"label" : "either", "tail" : "(ev: CanFail[E]): ZStream[R, Nothing, Either[E, A]]", "member" : "zio.stream.experimental.ZStream.either", "link" : "zio\/stream\/experimental\/ZStream.html#either(implicitev:zio.CanFail[E]):zio.stream.experimental.ZStream[R,Nothing,Either[E,A]]", "kind" : "final def"}, {"label" : "dropUntil", "tail" : "(pred: (A) => Boolean): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.dropUntil", "link" : "zio\/stream\/experimental\/ZStream.html#dropUntil(pred:A=>Boolean):zio.stream.experimental.ZStream[R,E,A]", "kind" : "final def"}, {"label" : "dropWhileM", "tail" : "(f: (A) => ZIO[R1, E1, Boolean]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.dropWhileM", "link" : "zio\/stream\/experimental\/ZStream.html#dropWhileM[R1<:R,E1>:E](f:A=>zio.ZIO[R1,E1,Boolean]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(f: (A) => Boolean): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.dropWhile", "link" : "zio\/stream\/experimental\/ZStream.html#dropWhile(f:A=>Boolean):zio.stream.experimental.ZStream[R,E,A]", "kind" : "final def"}, {"label" : "dropRight", "tail" : "(n: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.dropRight", "link" : "zio\/stream\/experimental\/ZStream.html#dropRight(n:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.drop", "link" : "zio\/stream\/experimental\/ZStream.html#drop(n:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "drainFork", "tail" : "(other: ZStream[R1, E1, Any]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.drainFork", "link" : "zio\/stream\/experimental\/ZStream.html#drainFork[R1<:R,E1>:E](other:zio.stream.experimental.ZStream[R1,E1,Any]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "final def"}, {"label" : "drain", "tail" : "(): ZStream[R, E, Nothing]", "member" : "zio.stream.experimental.ZStream.drain", "link" : "zio\/stream\/experimental\/ZStream.html#drain:zio.stream.experimental.ZStream[R,E,Nothing]", "kind" : "final def"}, {"label" : "distributedWithDynamic", "tail" : "(maximumLag: Int, decide: (A) => UIO[(UniqueKey) => Boolean], done: (Exit[Option[E], Nothing]) => UIO[Any]): ZManaged[R, Nothing, UIO[(UniqueKey, Dequeue[Exit[Option[E], A]])]]", "member" : "zio.stream.experimental.ZStream.distributedWithDynamic", "link" : "zio\/stream\/experimental\/ZStream.html#distributedWithDynamic(maximumLag:Int,decide:A=>zio.UIO[zio.internal.UniqueKey=>Boolean],done:zio.Exit[Option[E],Nothing]=>zio.UIO[Any]):zio.ZManaged[R,Nothing,zio.UIO[(zio.internal.UniqueKey,zio.Dequeue[zio.Exit[Option[E],A]])]]", "kind" : "final def"}, {"label" : "distributedWith", "tail" : "(n: Int, maximumLag: Int, decide: (A) => UIO[(Int) => Boolean]): ZManaged[R, Nothing, List[Dequeue[Exit[Option[E1], A]]]]", "member" : "zio.stream.experimental.ZStream.distributedWith", "link" : "zio\/stream\/experimental\/ZStream.html#distributedWith[E1>:E](n:Int,maximumLag:Int,decide:A=>zio.UIO[Int=>Boolean]):zio.ZManaged[R,Nothing,List[zio.Dequeue[zio.Exit[Option[E1],A]]]]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(stream: ZStream[R1, E1, A1]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.defaultIfEmpty", "link" : "zio\/stream\/experimental\/ZStream.html#defaultIfEmpty[R1<:R,E1>:E,A1>:A](stream:zio.stream.experimental.ZStream[R1,E1,A1]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(chunk: Chunk[A1]): ZStream[R, E, A1]", "member" : "zio.stream.experimental.ZStream.defaultIfEmpty", "link" : "zio\/stream\/experimental\/ZStream.html#defaultIfEmpty[A1>:A](chunk:zio.Chunk[A1]):zio.stream.experimental.ZStream[R,E,A1]", "kind" : "final def"}, {"label" : "defaultIfEmpty", "tail" : "(a: A1): ZStream[R, E, A1]", "member" : "zio.stream.experimental.ZStream.defaultIfEmpty", "link" : "zio\/stream\/experimental\/ZStream.html#defaultIfEmpty[A1>:A](a:A1):zio.stream.experimental.ZStream[R,E,A1]", "kind" : "final def"}, {"label" : "crossWith", "tail" : "(that: ZStream[R1, E1, A2])(f: (A, A2) => C): ZStream[R1, E1, C]", "member" : "zio.stream.experimental.ZStream.crossWith", "link" : "zio\/stream\/experimental\/ZStream.html#crossWith[R1<:R,E1>:E,A2,C](that:zio.stream.experimental.ZStream[R1,E1,A2])(f:(A,A2)=>C):zio.stream.experimental.ZStream[R1,E1,C]", "kind" : "final def"}, {"label" : "crossRight", "tail" : "(that: => ZStream[R1, E1, B]): ZStream[R1, E1, B]", "member" : "zio.stream.experimental.ZStream.crossRight", "link" : "zio\/stream\/experimental\/ZStream.html#crossRight[R1<:R,E1>:E,B](that:=>zio.stream.experimental.ZStream[R1,E1,B]):zio.stream.experimental.ZStream[R1,E1,B]", "kind" : "def"}, {"label" : "crossLeft", "tail" : "(that: => ZStream[R1, E1, B]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.crossLeft", "link" : "zio\/stream\/experimental\/ZStream.html#crossLeft[R1<:R,E1>:E,B](that:=>zio.stream.experimental.ZStream[R1,E1,B]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "final def"}, {"label" : "cross", "tail" : "(that: => ZStream[R1, E1, B])(zippable: Zippable[A, B]): ZStream[R1, E1, Out]", "member" : "zio.stream.experimental.ZStream.cross", "link" : "zio\/stream\/experimental\/ZStream.html#cross[R1<:R,E1>:E,B](that:=>zio.stream.experimental.ZStream[R1,E1,B])(implicitzippable:zio.Zippable[A,B]):zio.stream.experimental.ZStream[R1,E1,zippable.Out]", "kind" : "final def"}, {"label" : "concat", "tail" : "(that: => ZStream[R1, E1, A1]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.concat", "link" : "zio\/stream\/experimental\/ZStream.html#concat[R1<:R,E1>:E,A1>:A](that:=>zio.stream.experimental.ZStream[R1,E1,A1]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "def"}, {"label" : "combineChunks", "tail" : "(that: ZStream[R1, E1, A2])(s: S)(f: (S, ZIO[R, Option[E], Chunk[A]], ZIO[R1, Option[E1], Chunk[A2]]) => ZIO[R1, Nothing, Exit[Option[E1], (Chunk[A3], S)]]): ZStream[R1, E1, A3]", "member" : "zio.stream.experimental.ZStream.combineChunks", "link" : "zio\/stream\/experimental\/ZStream.html#combineChunks[R1<:R,E1>:E,S,A2,A3](that:zio.stream.experimental.ZStream[R1,E1,A2])(s:S)(f:(S,zio.ZIO[R,Option[E],zio.Chunk[A]],zio.ZIO[R1,Option[E1],zio.Chunk[A2]])=>zio.ZIO[R1,Nothing,zio.Exit[Option[E1],(zio.Chunk[A3],S)]]):zio.stream.experimental.ZStream[R1,E1,A3]", "kind" : "final def"}, {"label" : "combine", "tail" : "(that: ZStream[R1, E1, A2])(s: S)(f: (S, ZIO[R, Option[E], A], ZIO[R1, Option[E1], A2]) => ZIO[R1, Nothing, Exit[Option[E1], (A3, S)]]): ZStream[R1, E1, A3]", "member" : "zio.stream.experimental.ZStream.combine", "link" : "zio\/stream\/experimental\/ZStream.html#combine[R1<:R,E1>:E,S,A2,A3](that:zio.stream.experimental.ZStream[R1,E1,A2])(s:S)(f:(S,zio.ZIO[R,Option[E],A],zio.ZIO[R1,Option[E1],A2])=>zio.ZIO[R1,Nothing,zio.Exit[Option[E1],(A3,S)]]):zio.stream.experimental.ZStream[R1,E1,A3]", "kind" : "final def"}, {"label" : "collectWhileZIO", "tail" : "(pf: PartialFunction[A, ZIO[R1, E1, A1]]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.collectWhileZIO", "link" : "zio\/stream\/experimental\/ZStream.html#collectWhileZIO[R1<:R,E1>:E,A1](pf:PartialFunction[A,zio.ZIO[R1,E1,A1]]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "collectWhileSuccess", "tail" : "(ev: <:<[A, Exit[L1, A1]]): ZStream[R, E, A1]", "member" : "zio.stream.experimental.ZStream.collectWhileSuccess", "link" : "zio\/stream\/experimental\/ZStream.html#collectWhileSuccess[L1,A1](implicitev:A<:<zio.Exit[L1,A1]):zio.stream.experimental.ZStream[R,E,A1]", "kind" : "final def"}, {"label" : "collectWhileRight", "tail" : "(ev: <:<[A, Either[L1, A1]]): ZStream[R, E, A1]", "member" : "zio.stream.experimental.ZStream.collectWhileRight", "link" : "zio\/stream\/experimental\/ZStream.html#collectWhileRight[L1,A1](implicitev:A<:<Either[L1,A1]):zio.stream.experimental.ZStream[R,E,A1]", "kind" : "final def"}, {"label" : "collectWhileSome", "tail" : "(ev: <:<[A, Option[A1]]): ZStream[R, E, A1]", "member" : "zio.stream.experimental.ZStream.collectWhileSome", "link" : "zio\/stream\/experimental\/ZStream.html#collectWhileSome[A1](implicitev:A<:<Option[A1]):zio.stream.experimental.ZStream[R,E,A1]", "kind" : "final def"}, {"label" : "collectWhileM", "tail" : "(pf: PartialFunction[A, ZIO[R1, E1, A1]]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.collectWhileM", "link" : "zio\/stream\/experimental\/ZStream.html#collectWhileM[R1<:R,E1>:E,A1](pf:PartialFunction[A,zio.ZIO[R1,E1,A1]]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "collectWhileLeft", "tail" : "(ev: <:<[A, Either[L1, A1]]): ZStream[R, E, L1]", "member" : "zio.stream.experimental.ZStream.collectWhileLeft", "link" : "zio\/stream\/experimental\/ZStream.html#collectWhileLeft[L1,A1](implicitev:A<:<Either[L1,A1]):zio.stream.experimental.ZStream[R,E,L1]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(pf: PartialFunction[A, A1]): ZStream[R, E, A1]", "member" : "zio.stream.experimental.ZStream.collectWhile", "link" : "zio\/stream\/experimental\/ZStream.html#collectWhile[A1](pf:PartialFunction[A,A1]):zio.stream.experimental.ZStream[R,E,A1]", "kind" : "def"}, {"label" : "collectZIO", "tail" : "(pf: PartialFunction[A, ZIO[R1, E1, A1]]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.collectZIO", "link" : "zio\/stream\/experimental\/ZStream.html#collectZIO[R1<:R,E1>:E,A1](pf:PartialFunction[A,zio.ZIO[R1,E1,A1]]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "collectM", "tail" : "(pf: PartialFunction[A, ZIO[R1, E1, A1]]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.collectM", "link" : "zio\/stream\/experimental\/ZStream.html#collectM[R1<:R,E1>:E,A1](pf:PartialFunction[A,zio.ZIO[R1,E1,A1]]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "collectRight", "tail" : "(ev: <:<[A, Either[L1, A1]]): ZStream[R, E, A1]", "member" : "zio.stream.experimental.ZStream.collectRight", "link" : "zio\/stream\/experimental\/ZStream.html#collectRight[L1,A1](implicitev:A<:<Either[L1,A1]):zio.stream.experimental.ZStream[R,E,A1]", "kind" : "final def"}, {"label" : "collectSuccess", "tail" : "(ev: <:<[A, Exit[L1, A1]]): ZStream[R, E, A1]", "member" : "zio.stream.experimental.ZStream.collectSuccess", "link" : "zio\/stream\/experimental\/ZStream.html#collectSuccess[L1,A1](implicitev:A<:<zio.Exit[L1,A1]):zio.stream.experimental.ZStream[R,E,A1]", "kind" : "final def"}, {"label" : "collectSome", "tail" : "(ev: <:<[A, Option[A1]]): ZStream[R, E, A1]", "member" : "zio.stream.experimental.ZStream.collectSome", "link" : "zio\/stream\/experimental\/ZStream.html#collectSome[A1](implicitev:A<:<Option[A1]):zio.stream.experimental.ZStream[R,E,A1]", "kind" : "final def"}, {"label" : "collectLeft", "tail" : "(ev: <:<[A, Either[L1, A1]]): ZStream[R, E, L1]", "member" : "zio.stream.experimental.ZStream.collectLeft", "link" : "zio\/stream\/experimental\/ZStream.html#collectLeft[L1,A1](implicitev:A<:<Either[L1,A1]):zio.stream.experimental.ZStream[R,E,L1]", "kind" : "final def"}, {"label" : "collect", "tail" : "(f: PartialFunction[A, B]): ZStream[R, E, B]", "member" : "zio.stream.experimental.ZStream.collect", "link" : "zio\/stream\/experimental\/ZStream.html#collect[B](f:PartialFunction[A,B]):zio.stream.experimental.ZStream[R,E,B]", "kind" : "final def"}, {"label" : "chunks", "tail" : "(): ZStream[R, E, Chunk[A]]", "member" : "zio.stream.experimental.ZStream.chunks", "link" : "zio\/stream\/experimental\/ZStream.html#chunks:zio.stream.experimental.ZStream[R,E,zio.Chunk[A]]", "kind" : "def"}, {"label" : "chunkN", "tail" : "(n: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.chunkN", "link" : "zio\/stream\/experimental\/ZStream.html#chunkN(n:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "changesWithZIO", "tail" : "(f: (A, A) => ZIO[R1, E1, Boolean]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.changesWithZIO", "link" : "zio\/stream\/experimental\/ZStream.html#changesWithZIO[R1<:R,E1>:E](f:(A,A)=>zio.ZIO[R1,E1,Boolean]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "def"}, {"label" : "changesWith", "tail" : "(f: (A, A) => Boolean): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.changesWith", "link" : "zio\/stream\/experimental\/ZStream.html#changesWith(f:(A,A)=>Boolean):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "changes", "tail" : "(): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.changes", "link" : "zio\/stream\/experimental\/ZStream.html#changes:zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "catchSomeCause", "tail" : "(pf: PartialFunction[Cause[E], ZStream[R1, E1, A1]]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.catchSomeCause", "link" : "zio\/stream\/experimental\/ZStream.html#catchSomeCause[R1<:R,E1>:E,A1>:A](pf:PartialFunction[zio.Cause[E],zio.stream.experimental.ZStream[R1,E1,A1]]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "catchSome", "tail" : "(pf: PartialFunction[E, ZStream[R1, E1, A1]]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.catchSome", "link" : "zio\/stream\/experimental\/ZStream.html#catchSome[R1<:R,E1>:E,A1>:A](pf:PartialFunction[E,zio.stream.experimental.ZStream[R1,E1,A1]]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "catchAllCause", "tail" : "(f: (Cause[E]) => ZStream[R1, E2, A1]): ZStream[R1, E2, A1]", "member" : "zio.stream.experimental.ZStream.catchAllCause", "link" : "zio\/stream\/experimental\/ZStream.html#catchAllCause[R1<:R,E2,A1>:A](f:zio.Cause[E]=>zio.stream.experimental.ZStream[R1,E2,A1]):zio.stream.experimental.ZStream[R1,E2,A1]", "kind" : "final def"}, {"label" : "catchAll", "tail" : "(f: (E) => ZStream[R1, E2, A1])(ev: CanFail[E]): ZStream[R1, E2, A1]", "member" : "zio.stream.experimental.ZStream.catchAll", "link" : "zio\/stream\/experimental\/ZStream.html#catchAll[R1<:R,E2,A1>:A](f:E=>zio.stream.experimental.ZStream[R1,E2,A1])(implicitev:zio.CanFail[E]):zio.stream.experimental.ZStream[R1,E2,A1]", "kind" : "final def"}, {"label" : "bufferUnbounded", "tail" : "(): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.bufferUnbounded", "link" : "zio\/stream\/experimental\/ZStream.html#bufferUnbounded:zio.stream.experimental.ZStream[R,E,A]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(capacity: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.bufferSliding", "link" : "zio\/stream\/experimental\/ZStream.html#bufferSliding(capacity:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "final def"}, {"label" : "bufferDropping", "tail" : "(capacity: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.bufferDropping", "link" : "zio\/stream\/experimental\/ZStream.html#bufferDropping(capacity:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "final def"}, {"label" : "bufferChunksSliding", "tail" : "(capacity: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.bufferChunksSliding", "link" : "zio\/stream\/experimental\/ZStream.html#bufferChunksSliding(capacity:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "final def"}, {"label" : "bufferChunksDropping", "tail" : "(capacity: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.bufferChunksDropping", "link" : "zio\/stream\/experimental\/ZStream.html#bufferChunksDropping(capacity:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "final def"}, {"label" : "bufferChunks", "tail" : "(capacity: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.bufferChunks", "link" : "zio\/stream\/experimental\/ZStream.html#bufferChunks(capacity:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "final def"}, {"label" : "buffer", "tail" : "(capacity: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.buffer", "link" : "zio\/stream\/experimental\/ZStream.html#buffer(capacity:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "final def"}, {"label" : "broadcastedQueuesDynamic", "tail" : "(maximumLag: Int): ZManaged[R, Nothing, ZManaged[Any, Nothing, Dequeue[Take[E, A]]]]", "member" : "zio.stream.experimental.ZStream.broadcastedQueuesDynamic", "link" : "zio\/stream\/experimental\/ZStream.html#broadcastedQueuesDynamic(maximumLag:Int):zio.ZManaged[R,Nothing,zio.ZManaged[Any,Nothing,zio.Dequeue[zio.stream.experimental.Take[E,A]]]]", "kind" : "final def"}, {"label" : "broadcastedQueues", "tail" : "(n: Int, maximumLag: Int): ZManaged[R, Nothing, List[Dequeue[Take[E, A]]]]", "member" : "zio.stream.experimental.ZStream.broadcastedQueues", "link" : "zio\/stream\/experimental\/ZStream.html#broadcastedQueues(n:Int,maximumLag:Int):zio.ZManaged[R,Nothing,List[zio.Dequeue[zio.stream.experimental.Take[E,A]]]]", "kind" : "final def"}, {"label" : "broadcastDynamic", "tail" : "(maximumLag: Int): ZManaged[R, Nothing, ZStream[Any, E, A]]", "member" : "zio.stream.experimental.ZStream.broadcastDynamic", "link" : "zio\/stream\/experimental\/ZStream.html#broadcastDynamic(maximumLag:Int):zio.ZManaged[R,Nothing,zio.stream.experimental.ZStream[Any,E,A]]", "kind" : "final def"}, {"label" : "broadcast", "tail" : "(n: Int, maximumLag: Int): ZManaged[R, Nothing, List[ZStream[Any, E, A]]]", "member" : "zio.stream.experimental.ZStream.broadcast", "link" : "zio\/stream\/experimental\/ZStream.html#broadcast(n:Int,maximumLag:Int):zio.ZManaged[R,Nothing,List[zio.stream.experimental.ZStream[Any,E,A]]]", "kind" : "final def"}, {"label" : "bimap", "tail" : "(f: (E) => E1, g: (A) => A1)(ev: CanFail[E]): ZStream[R, E1, A1]", "member" : "zio.stream.experimental.ZStream.bimap", "link" : "zio\/stream\/experimental\/ZStream.html#bimap[E1,A1](f:E=>E1,g:A=>A1)(implicitev:zio.CanFail[E]):zio.stream.experimental.ZStream[R,E1,A1]", "kind" : "def"}, {"label" : "as", "tail" : "(A2: => A2): ZStream[R, E, A2]", "member" : "zio.stream.experimental.ZStream.as", "link" : "zio\/stream\/experimental\/ZStream.html#as[A2](A2:=>A2):zio.stream.experimental.ZStream[R,E,A2]", "kind" : "def"}, {"label" : "aggregateAsyncWithinEither", "tail" : "(sink: ZSink[R1, E1, A1, E2, A1, B], schedule: Schedule[R1, Option[B], C]): ZStream[R1 with Has[Clock], E2, Either[C, B]]", "member" : "zio.stream.experimental.ZStream.aggregateAsyncWithinEither", "link" : "zio\/stream\/experimental\/ZStream.html#aggregateAsyncWithinEither[R1<:R,E1>:E,A1>:A,E2,B,C](sink:zio.stream.experimental.ZSink[R1,E1,A1,E2,A1,B],schedule:zio.Schedule[R1,Option[B],C]):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E2,Either[C,B]]", "kind" : "def"}, {"label" : "aggregateAsyncWithin", "tail" : "(sink: ZSink[R1, E1, A1, E2, A1, B], schedule: Schedule[R1, Option[B], Any]): ZStream[R1 with Has[Clock], E2, B]", "member" : "zio.stream.experimental.ZStream.aggregateAsyncWithin", "link" : "zio\/stream\/experimental\/ZStream.html#aggregateAsyncWithin[R1<:R,E1>:E,E2,A1>:A,B](sink:zio.stream.experimental.ZSink[R1,E1,A1,E2,A1,B],schedule:zio.Schedule[R1,Option[B],Any]):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E2,B]", "kind" : "final def"}, {"label" : "aggregateAsync", "tail" : "(sink: ZSink[R1, E1, A1, E2, A1, B]): ZStream[R1 with Has[Clock], E2, B]", "member" : "zio.stream.experimental.ZStream.aggregateAsync", "link" : "zio\/stream\/experimental\/ZStream.html#aggregateAsync[R1<:R,E1>:E,E2,A1>:A,B](sink:zio.stream.experimental.ZSink[R1,E1,A1,E2,A1,B]):zio.stream.experimental.ZStream[R1withzio.Has[zio.Clock],E2,B]", "kind" : "final def"}, {"label" : "absolve", "tail" : "(ev: <:<[ZStream[R, E, A], ZStream[R1, E1, Either[E1, A1]]]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.absolve", "link" : "zio\/stream\/experimental\/ZStream.html#absolve[R1<:R,E1,A1](implicitev:zio.stream.experimental.ZStream[R,E,A]<:<zio.stream.experimental.ZStream[R1,E1,Either[E1,A1]]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: => ZStream[R1, E2, A1])(ev: CanFail[E]): ZStream[R1, E2, A1]", "member" : "zio.stream.experimental.ZStream.<>", "link" : "zio\/stream\/experimental\/ZStream.html#<>[R1<:R,E2,A1>:A](that:=>zio.stream.experimental.ZStream[R1,E2,A1])(implicitev:zio.CanFail[E]):zio.stream.experimental.ZStream[R1,E2,A1]", "kind" : "final def"}, {"label" : "++", "tail" : "(that: => ZStream[R1, E1, A1]): ZStream[R1, E1, A1]", "member" : "zio.stream.experimental.ZStream.++", "link" : "zio\/stream\/experimental\/ZStream.html#++[R1<:R,E1>:E,A1>:A](that:=>zio.stream.experimental.ZStream[R1,E1,A1]):zio.stream.experimental.ZStream[R1,E1,A1]", "kind" : "def"}, {"label" : ">>>", "tail" : "(sink: ZSink[R1, E, A2, E2, Any, Z]): ZIO[R1, E2, Z]", "member" : "zio.stream.experimental.ZStream.>>>", "link" : "zio\/stream\/experimental\/ZStream.html#>>>[R1<:R,E2,A2>:A,Z](sink:zio.stream.experimental.ZSink[R1,E,A2,E2,Any,Z]):zio.ZIO[R1,E2,Z]", "kind" : "def"}, {"label" : ">>=", "tail" : "(f0: (A) => ZStream[R1, E1, A2]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.>>=", "link" : "zio\/stream\/experimental\/ZStream.html#>>=[R1<:R,E1>:E,A2](f0:A=>zio.stream.experimental.ZStream[R1,E1,A2]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "def"}, {"label" : "&>", "tail" : "(that: ZStream[R1, E1, A2]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.&>", "link" : "zio\/stream\/experimental\/ZStream.html#&>[R1<:R,E1>:E,A2](that:zio.stream.experimental.ZStream[R1,E1,A2]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "final def"}, {"label" : "<&", "tail" : "(that: ZStream[R1, E1, A2]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.<&", "link" : "zio\/stream\/experimental\/ZStream.html#<&[R1<:R,E1>:E,A2](that:zio.stream.experimental.ZStream[R1,E1,A2]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "final def"}, {"label" : "<&>", "tail" : "(that: ZStream[R1, E1, A2])(zippable: Zippable[A, A2]): ZStream[R1, E1, Out]", "member" : "zio.stream.experimental.ZStream.<&>", "link" : "zio\/stream\/experimental\/ZStream.html#<&>[R1<:R,E1>:E,A2](that:zio.stream.experimental.ZStream[R1,E1,A2])(implicitzippable:zio.Zippable[A,A2]):zio.stream.experimental.ZStream[R1,E1,zippable.Out]", "kind" : "final def"}, {"label" : "*>", "tail" : "(that: ZStream[R1, E1, A2]): ZStream[R1, E1, A2]", "member" : "zio.stream.experimental.ZStream.*>", "link" : "zio\/stream\/experimental\/ZStream.html#*>[R1<:R,E1>:E,A2](that:zio.stream.experimental.ZStream[R1,E1,A2]):zio.stream.experimental.ZStream[R1,E1,A2]", "kind" : "final def"}, {"label" : "<*", "tail" : "(that: ZStream[R1, E1, A2]): ZStream[R1, E1, A]", "member" : "zio.stream.experimental.ZStream.<*", "link" : "zio\/stream\/experimental\/ZStream.html#<*[R1<:R,E1>:E,A2](that:zio.stream.experimental.ZStream[R1,E1,A2]):zio.stream.experimental.ZStream[R1,E1,A]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(that: ZStream[R1, E1, A2])(zippable: Zippable[A, A2]): ZStream[R1, E1, Out]", "member" : "zio.stream.experimental.ZStream.<*>", "link" : "zio\/stream\/experimental\/ZStream.html#<*>[R1<:R,E1>:E,A2](that:zio.stream.experimental.ZStream[R1,E1,A2])(implicitzippable:zio.Zippable[A,A2]):zio.stream.experimental.ZStream[R1,E1,zippable.Out]", "kind" : "final def"}, {"label" : "@@", "tail" : "(aspect: ZStreamAspect[LowerR, UpperR, LowerE, UpperE, LowerA, UpperA]): ZStream[UpperR, LowerE, LowerA]", "member" : "zio.stream.experimental.ZStream.@@", "link" : "zio\/stream\/experimental\/ZStream.html#@@[LowerR<:UpperR,UpperR<:R,LowerE>:E,UpperE>:LowerE,LowerA>:A,UpperA>:LowerA](aspect:zio.stream.experimental.ZStreamAspect[LowerR,UpperR,LowerE,UpperE,LowerA,UpperA]):zio.stream.experimental.ZStream[UpperR,LowerE,LowerA]", "kind" : "final def"}, {"member" : "zio.stream.experimental.ZStream#<init>", "error" : "unsupported entity"}, {"label" : "channel", "tail" : ": ZChannel[R, Any, Any, Any, E, Chunk[A], Any]", "member" : "zio.stream.experimental.ZStream.channel", "link" : "zio\/stream\/experimental\/ZStream.html#channel:zio.stream.experimental.ZChannel[R,Any,Any,Any,E,zio.Chunk[A],Any]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/ZStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/ZStream.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/ZStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/ZStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/ZStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/ZStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/ZStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/ZStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/ZStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/ZStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/ZStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/ZStream.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/ZStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/ZStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/ZStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/ZStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "ZStreamConstructorPlatformSpecific", "tail" : "", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.ZStreamConstructorPlatformSpecific", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#ZStreamConstructorPlatformSpecificextendsZStreamPlatformSpecificConstructors.this.ZStreamConstructorLowPriority1", "kind" : "trait"}, {"label" : "Connection", "tail" : "", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.Connection", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#Connection", "kind" : "object"}, {"label" : "Connection", "tail" : "", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.Connection", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#ConnectionextendsAnyRef", "kind" : "final class"}, {"label" : "SortedByKey", "tail" : "", "member" : "zio.stream.experimental.ZStream.SortedByKey", "link" : "zio\/stream\/experimental\/ZStream$.html#SortedByKey[R,E,K,A]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Emit", "tail" : "", "member" : "zio.stream.experimental.ZStream.Emit", "link" : "zio\/stream\/experimental\/ZStream$.html#Emit[+R,-E,-A,+B]extendszio.ZIO[R,Option[E],zio.Chunk[A]]=>B", "kind" : "trait"}, {"label" : "SyntaxOps", "tail" : "", "member" : "zio.stream.experimental.ZStream.SyntaxOps", "link" : "zio\/stream\/experimental\/ZStream$.html#SyntaxOps[-R,+E,O]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "RefineToOrDieOps", "tail" : "", "member" : "zio.stream.experimental.ZStream.RefineToOrDieOps", "link" : "zio\/stream\/experimental\/ZStream$.html#RefineToOrDieOps[R,E<:Throwable,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "TerminationStrategy", "tail" : "", "member" : "zio.stream.experimental.ZStream.TerminationStrategy", "link" : "zio\/stream\/experimental\/ZStream$.html#TerminationStrategy", "kind" : "object"}, {"label" : "TerminationStrategy", "tail" : "", "member" : "zio.stream.experimental.ZStream.TerminationStrategy", "link" : "zio\/stream\/experimental\/ZStream$.html#TerminationStrategyextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Take", "tail" : "", "member" : "zio.stream.experimental.ZStream.Take", "link" : "zio\/stream\/experimental\/ZStream$.html#Take", "kind" : "object"}, {"label" : "Take", "tail" : "", "member" : "zio.stream.experimental.ZStream.Take", "link" : "zio\/stream\/experimental\/ZStream$.html#Take[+E,+A]=zio.Exit[Option[E],zio.Chunk[A]]", "kind" : "type"}, {"label" : "Pull", "tail" : "", "member" : "zio.stream.experimental.ZStream.Pull", "link" : "zio\/stream\/experimental\/ZStream$.html#Pull[-R,+E,+A]=zio.ZIO[R,Option[E],zio.Chunk[A]]", "kind" : "type"}, {"label" : "ZStreamConstructorLowPriority3", "tail" : "", "member" : "zio.stream.experimental.ZStream.ZStreamConstructorLowPriority3", "link" : "zio\/stream\/experimental\/ZStream$.html#ZStreamConstructorLowPriority3extendsAnyRef", "kind" : "trait"}, {"label" : "ZStreamConstructorLowPriority2", "tail" : "", "member" : "zio.stream.experimental.ZStream.ZStreamConstructorLowPriority2", "link" : "zio\/stream\/experimental\/ZStream$.html#ZStreamConstructorLowPriority2extendsZStream.ZStreamConstructorLowPriority3", "kind" : "trait"}, {"label" : "ZStreamConstructorLowPriority1", "tail" : "", "member" : "zio.stream.experimental.ZStream.ZStreamConstructorLowPriority1", "link" : "zio\/stream\/experimental\/ZStream$.html#ZStreamConstructorLowPriority1extendsZStream.ZStreamConstructorLowPriority2", "kind" : "trait"}, {"label" : "ZStreamConstructor", "tail" : "", "member" : "zio.stream.experimental.ZStream.ZStreamConstructor", "link" : "zio\/stream\/experimental\/ZStream$.html#ZStreamConstructor", "kind" : "object"}, {"label" : "ZStreamConstructor", "tail" : "", "member" : "zio.stream.experimental.ZStream.ZStreamConstructor", "link" : "zio\/stream\/experimental\/ZStream$.html#ZStreamConstructor[Input]extendsAnyRef", "kind" : "trait"}, {"label" : "UpdateServiceAt", "tail" : "", "member" : "zio.stream.experimental.ZStream.UpdateServiceAt", "link" : "zio\/stream\/experimental\/ZStream$.html#UpdateServiceAt[-R,+E,+A,Service]extendsAnyVal", "kind" : "final class"}, {"label" : "UpdateService", "tail" : "", "member" : "zio.stream.experimental.ZStream.UpdateService", "link" : "zio\/stream\/experimental\/ZStream$.html#UpdateService[-R,+E,+A,M]extendsAnyVal", "kind" : "final class"}, {"label" : "ProvideSomeLayer", "tail" : "", "member" : "zio.stream.experimental.ZStream.ProvideSomeLayer", "link" : "zio\/stream\/experimental\/ZStream$.html#ProvideSomeLayer[R0,-R,+E,+A]extendsAnyVal", "kind" : "final class"}, {"label" : "GroupBy", "tail" : "", "member" : "zio.stream.experimental.ZStream.GroupBy", "link" : "zio\/stream\/experimental\/ZStream$.html#GroupBy[-R,+E,+K,+V]extendsAnyRef", "kind" : "final class"}, {"label" : "ServiceAtPartiallyApplied", "tail" : "", "member" : "zio.stream.experimental.ZStream.ServiceAtPartiallyApplied", "link" : "zio\/stream\/experimental\/ZStream$.html#ServiceAtPartiallyApplied[Service]extendsAnyVal", "kind" : "final class"}, {"label" : "AccessStreamPartiallyApplied", "tail" : "", "member" : "zio.stream.experimental.ZStream.AccessStreamPartiallyApplied", "link" : "zio\/stream\/experimental\/ZStream$.html#AccessStreamPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "AccessZIOPartiallyApplied", "tail" : "", "member" : "zio.stream.experimental.ZStream.AccessZIOPartiallyApplied", "link" : "zio\/stream\/experimental\/ZStream$.html#AccessZIOPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "AccessPartiallyApplied", "tail" : "", "member" : "zio.stream.experimental.ZStream.AccessPartiallyApplied", "link" : "zio\/stream\/experimental\/ZStream$.html#AccessPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "zipN", "tail" : "(zStream1: ZStream[R, E, A], zStream2: ZStream[R, E, B], zStream3: ZStream[R, E, C], zStream4: ZStream[R, E, D])(f: (A, B, C, D) => F): ZStream[R, E, F]", "member" : "zio.stream.experimental.ZStream.zipN", "link" : "zio\/stream\/experimental\/ZStream$.html#zipN[R,E,A,B,C,D,F](zStream1:zio.stream.experimental.ZStream[R,E,A],zStream2:zio.stream.experimental.ZStream[R,E,B],zStream3:zio.stream.experimental.ZStream[R,E,C],zStream4:zio.stream.experimental.ZStream[R,E,D])(f:(A,B,C,D)=>F):zio.stream.experimental.ZStream[R,E,F]", "kind" : "def"}, {"label" : "zipN", "tail" : "(zStream1: ZStream[R, E, A], zStream2: ZStream[R, E, B], zStream3: ZStream[R, E, C])(f: (A, B, C) => D): ZStream[R, E, D]", "member" : "zio.stream.experimental.ZStream.zipN", "link" : "zio\/stream\/experimental\/ZStream$.html#zipN[R,E,A,B,C,D](zStream1:zio.stream.experimental.ZStream[R,E,A],zStream2:zio.stream.experimental.ZStream[R,E,B],zStream3:zio.stream.experimental.ZStream[R,E,C])(f:(A,B,C)=>D):zio.stream.experimental.ZStream[R,E,D]", "kind" : "def"}, {"label" : "zipN", "tail" : "(zStream1: ZStream[R, E, A], zStream2: ZStream[R, E, B])(f: (A, B) => C): ZStream[R, E, C]", "member" : "zio.stream.experimental.ZStream.zipN", "link" : "zio\/stream\/experimental\/ZStream$.html#zipN[R,E,A,B,C](zStream1:zio.stream.experimental.ZStream[R,E,A],zStream2:zio.stream.experimental.ZStream[R,E,B])(f:(A,B)=>C):zio.stream.experimental.ZStream[R,E,C]", "kind" : "def"}, {"label" : "unwrapManaged", "tail" : "(fa: ZManaged[R, E, ZStream[R, E, A]]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.unwrapManaged", "link" : "zio\/stream\/experimental\/ZStream$.html#unwrapManaged[R,E,A](fa:zio.ZManaged[R,E,zio.stream.experimental.ZStream[R,E,A]]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "unwrap", "tail" : "(fa: ZIO[R, E, ZStream[R, E, A]]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.unwrap", "link" : "zio\/stream\/experimental\/ZStream$.html#unwrap[R,E,A](fa:zio.ZIO[R,E,zio.stream.experimental.ZStream[R,E,A]]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "unfoldZIO", "tail" : "(s: S)(f: (S) => ZIO[R, E, Option[(A, S)]]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.unfoldZIO", "link" : "zio\/stream\/experimental\/ZStream$.html#unfoldZIO[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,Option[(A,S)]]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "unfoldM", "tail" : "(s: S)(f: (S) => ZIO[R, E, Option[(A, S)]]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.unfoldM", "link" : "zio\/stream\/experimental\/ZStream$.html#unfoldM[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,Option[(A,S)]]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "unfoldChunkZIO", "tail" : "(s: S)(f: (S) => ZIO[R, E, Option[(Chunk[A], S)]]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.unfoldChunkZIO", "link" : "zio\/stream\/experimental\/ZStream$.html#unfoldChunkZIO[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,Option[(zio.Chunk[A],S)]]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "unfoldChunkM", "tail" : "(s: S)(f: (S) => ZIO[R, E, Option[(Chunk[A], S)]]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.unfoldChunkM", "link" : "zio\/stream\/experimental\/ZStream$.html#unfoldChunkM[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,Option[(zio.Chunk[A],S)]]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "unfoldChunk", "tail" : "(s: S)(f: (S) => Option[(Chunk[A], S)]): ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.ZStream.unfoldChunk", "link" : "zio\/stream\/experimental\/ZStream$.html#unfoldChunk[S,A](s:S)(f:S=>Option[(zio.Chunk[A],S)]):zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "unfold", "tail" : "(s: S)(f: (S) => Option[(A, S)]): ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.ZStream.unfold", "link" : "zio\/stream\/experimental\/ZStream$.html#unfold[S,A](s:S)(f:S=>Option[(A,S)]):zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "unit", "tail" : ": ZStream[Any, Nothing, Unit]", "member" : "zio.stream.experimental.ZStream.unit", "link" : "zio\/stream\/experimental\/ZStream$.html#unit:zio.stream.experimental.ZStream[Any,Nothing,Unit]", "kind" : "val"}, {"label" : "tick", "tail" : "(interval: zio.Duration): ZStream[Has[Clock], Nothing, Unit]", "member" : "zio.stream.experimental.ZStream.tick", "link" : "zio\/stream\/experimental\/ZStream$.html#tick(interval:zio.Duration):zio.stream.experimental.ZStream[zio.Has[zio.Clock],Nothing,Unit]", "kind" : "def"}, {"label" : "succeed", "tail" : "(a: => A): ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.ZStream.succeed", "link" : "zio\/stream\/experimental\/ZStream$.html#succeed[A](a:=>A):zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D]): ZStream[Has[A] with Has[B] with Has[C] with Has[D], Nothing, (A, B, C, D)]", "member" : "zio.stream.experimental.ZStream.services", "link" : "zio\/stream\/experimental\/ZStream$.html#services[A,B,C,D](implicitevidence$7:zio.Tag[A],implicitevidence$8:zio.Tag[B],implicitevidence$9:zio.Tag[C],implicitevidence$10:zio.Tag[D]):zio.stream.experimental.ZStream[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D],Nothing,(A,B,C,D)]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C]): ZStream[Has[A] with Has[B] with Has[C], Nothing, (A, B, C)]", "member" : "zio.stream.experimental.ZStream.services", "link" : "zio\/stream\/experimental\/ZStream$.html#services[A,B,C](implicitevidence$4:zio.Tag[A],implicitevidence$5:zio.Tag[B],implicitevidence$6:zio.Tag[C]):zio.stream.experimental.ZStream[zio.Has[A]withzio.Has[B]withzio.Has[C],Nothing,(A,B,C)]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B]): ZStream[Has[A] with Has[B], Nothing, (A, B)]", "member" : "zio.stream.experimental.ZStream.services", "link" : "zio\/stream\/experimental\/ZStream$.html#services[A,B](implicitevidence$2:zio.Tag[A],implicitevidence$3:zio.Tag[B]):zio.stream.experimental.ZStream[zio.Has[A]withzio.Has[B],Nothing,(A,B)]", "kind" : "def"}, {"label" : "serviceAt", "tail" : "(): ServiceAtPartiallyApplied[Service]", "member" : "zio.stream.experimental.ZStream.serviceAt", "link" : "zio\/stream\/experimental\/ZStream$.html#serviceAt[Service]:zio.stream.experimental.ZStream.ServiceAtPartiallyApplied[Service]", "kind" : "def"}, {"label" : "service", "tail" : "(arg0: zio.Tag[A]): ZStream[Has[A], Nothing, A]", "member" : "zio.stream.experimental.ZStream.service", "link" : "zio\/stream\/experimental\/ZStream$.html#service[A](implicitevidence$1:zio.Tag[A]):zio.stream.experimental.ZStream[zio.Has[A],Nothing,A]", "kind" : "def"}, {"label" : "repeatZIOWithSchedule", "tail" : "(effect: ZIO[R, E, A], schedule: Schedule[R, A, Any]): ZStream[R with Has[Clock], E, A]", "member" : "zio.stream.experimental.ZStream.repeatZIOWithSchedule", "link" : "zio\/stream\/experimental\/ZStream$.html#repeatZIOWithSchedule[R,E,A](effect:zio.ZIO[R,E,A],schedule:zio.Schedule[R,A,Any]):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],E,A]", "kind" : "def"}, {"label" : "repeatZIOOption", "tail" : "(fa: ZIO[R, Option[E], A]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.repeatZIOOption", "link" : "zio\/stream\/experimental\/ZStream$.html#repeatZIOOption[R,E,A](fa:zio.ZIO[R,Option[E],A]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeatZIOChunkOption", "tail" : "(fa: ZIO[R, Option[E], Chunk[A]]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.repeatZIOChunkOption", "link" : "zio\/stream\/experimental\/ZStream$.html#repeatZIOChunkOption[R,E,A](fa:zio.ZIO[R,Option[E],zio.Chunk[A]]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeatZIOChunk", "tail" : "(fa: ZIO[R, E, Chunk[A]]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.repeatZIOChunk", "link" : "zio\/stream\/experimental\/ZStream$.html#repeatZIOChunk[R,E,A](fa:zio.ZIO[R,E,zio.Chunk[A]]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeatZIO", "tail" : "(fa: ZIO[R, E, A]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.repeatZIO", "link" : "zio\/stream\/experimental\/ZStream$.html#repeatZIO[R,E,A](fa:zio.ZIO[R,E,A]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeatWithSchedule", "tail" : "(a: => A, schedule: Schedule[R, A, _]): ZStream[R with Has[Clock], Nothing, A]", "member" : "zio.stream.experimental.ZStream.repeatWithSchedule", "link" : "zio\/stream\/experimental\/ZStream$.html#repeatWithSchedule[R,A](a:=>A,schedule:zio.Schedule[R,A,_]):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],Nothing,A]", "kind" : "def"}, {"label" : "repeatWith", "tail" : "(a: => A, schedule: Schedule[R, A, _]): ZStream[R with Has[Clock], Nothing, A]", "member" : "zio.stream.experimental.ZStream.repeatWith", "link" : "zio\/stream\/experimental\/ZStream$.html#repeatWith[R,A](a:=>A,schedule:zio.Schedule[R,A,_]):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],Nothing,A]", "kind" : "def"}, {"label" : "repeatEffectWith", "tail" : "(effect: ZIO[R, E, A], schedule: Schedule[R, A, Any]): ZStream[R with Has[Clock], E, A]", "member" : "zio.stream.experimental.ZStream.repeatEffectWith", "link" : "zio\/stream\/experimental\/ZStream$.html#repeatEffectWith[R,E,A](effect:zio.ZIO[R,E,A],schedule:zio.Schedule[R,A,Any]):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],E,A]", "kind" : "def"}, {"label" : "repeatEffectChunkOption", "tail" : "(fa: ZIO[R, Option[E], Chunk[A]]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.repeatEffectChunkOption", "link" : "zio\/stream\/experimental\/ZStream$.html#repeatEffectChunkOption[R,E,A](fa:zio.ZIO[R,Option[E],zio.Chunk[A]]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeatEffectChunk", "tail" : "(fa: ZIO[R, E, Chunk[A]]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.repeatEffectChunk", "link" : "zio\/stream\/experimental\/ZStream$.html#repeatEffectChunk[R,E,A](fa:zio.ZIO[R,E,zio.Chunk[A]]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeatEffectOption", "tail" : "(fa: ZIO[R, Option[E], A]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.repeatEffectOption", "link" : "zio\/stream\/experimental\/ZStream$.html#repeatEffectOption[R,E,A](fa:zio.ZIO[R,Option[E],A]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeatEffect", "tail" : "(fa: ZIO[R, E, A]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.repeatEffect", "link" : "zio\/stream\/experimental\/ZStream$.html#repeatEffect[R,E,A](fa:zio.ZIO[R,E,A]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(a: => A): ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.ZStream.repeat", "link" : "zio\/stream\/experimental\/ZStream$.html#repeat[A](a:=>A):zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "range", "tail" : "(min: Int, max: Int, chunkSize: Int): ZStream[Any, Nothing, Int]", "member" : "zio.stream.experimental.ZStream.range", "link" : "zio\/stream\/experimental\/ZStream$.html#range(min:Int,max:Int,chunkSize:Int):zio.stream.experimental.ZStream[Any,Nothing,Int]", "kind" : "def"}, {"label" : "paginateZIO", "tail" : "(s: S)(f: (S) => ZIO[R, E, (A, Option[S])]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.paginateZIO", "link" : "zio\/stream\/experimental\/ZStream$.html#paginateZIO[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,(A,Option[S])]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "paginateM", "tail" : "(s: S)(f: (S) => ZIO[R, E, (A, Option[S])]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.paginateM", "link" : "zio\/stream\/experimental\/ZStream$.html#paginateM[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,(A,Option[S])]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "paginateChunkZIO", "tail" : "(s: S)(f: (S) => ZIO[R, E, (Chunk[A], Option[S])]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.paginateChunkZIO", "link" : "zio\/stream\/experimental\/ZStream$.html#paginateChunkZIO[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,(zio.Chunk[A],Option[S])]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "paginateChunkM", "tail" : "(s: S)(f: (S) => ZIO[R, E, (Chunk[A], Option[S])]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.paginateChunkM", "link" : "zio\/stream\/experimental\/ZStream$.html#paginateChunkM[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,(zio.Chunk[A],Option[S])]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "paginateChunk", "tail" : "(s: S)(f: (S) => (Chunk[A], Option[S])): ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.ZStream.paginateChunk", "link" : "zio\/stream\/experimental\/ZStream$.html#paginateChunk[A,S](s:S)(f:S=>(zio.Chunk[A],Option[S])):zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "paginate", "tail" : "(s: S)(f: (S) => (A, Option[S])): ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.ZStream.paginate", "link" : "zio\/stream\/experimental\/ZStream$.html#paginate[R,E,A,S](s:S)(f:S=>(A,Option[S])):zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "never", "tail" : ": ZStream[Any, Nothing, Nothing]", "member" : "zio.stream.experimental.ZStream.never", "link" : "zio\/stream\/experimental\/ZStream$.html#never:zio.stream.experimental.ZStream[Any,Nothing,Nothing]", "kind" : "val"}, {"label" : "mergeAllUnbounded", "tail" : "(outputBuffer: Int)(streams: ZStream[R, E, O]*): ZStream[R, E, O]", "member" : "zio.stream.experimental.ZStream.mergeAllUnbounded", "link" : "zio\/stream\/experimental\/ZStream$.html#mergeAllUnbounded[R,E,O](outputBuffer:Int)(streams:zio.stream.experimental.ZStream[R,E,O]*):zio.stream.experimental.ZStream[R,E,O]", "kind" : "def"}, {"label" : "mergeAll", "tail" : "(n: Int, outputBuffer: Int)(streams: ZStream[R, E, O]*): ZStream[R, E, O]", "member" : "zio.stream.experimental.ZStream.mergeAll", "link" : "zio\/stream\/experimental\/ZStream$.html#mergeAll[R,E,O](n:Int,outputBuffer:Int)(streams:zio.stream.experimental.ZStream[R,E,O]*):zio.stream.experimental.ZStream[R,E,O]", "kind" : "def"}, {"label" : "managed", "tail" : "(managed: ZManaged[R, E, A]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.managed", "link" : "zio\/stream\/experimental\/ZStream$.html#managed[R,E,A](managed:zio.ZManaged[R,E,A]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "iterate", "tail" : "(a: A)(f: (A) => A): ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.ZStream.iterate", "link" : "zio\/stream\/experimental\/ZStream$.html#iterate[A](a:A)(f:A=>A):zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "halt", "tail" : "(cause: => Cause[E]): ZStream[Any, E, Nothing]", "member" : "zio.stream.experimental.ZStream.halt", "link" : "zio\/stream\/experimental\/ZStream$.html#halt[E](cause:=>zio.Cause[E]):zio.stream.experimental.ZStream[Any,E,Nothing]", "kind" : "def"}, {"label" : "fromZIOOption", "tail" : "(fa: ZIO[R, Option[E], A]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.fromZIOOption", "link" : "zio\/stream\/experimental\/ZStream$.html#fromZIOOption[R,E,A](fa:zio.ZIO[R,Option[E],A]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "fromZIO", "tail" : "(fa: ZIO[R, E, A]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.fromZIO", "link" : "zio\/stream\/experimental\/ZStream$.html#fromZIO[R,E,A](fa:zio.ZIO[R,E,A]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "fromTQueue", "tail" : "(queue: TQueue[A]): ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.ZStream.fromTQueue", "link" : "zio\/stream\/experimental\/ZStream$.html#fromTQueue[A](queue:zio.stm.TQueue[A]):zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "fromSchedule", "tail" : "(schedule: Schedule[R, Any, A]): ZStream[R with Has[Clock], Nothing, A]", "member" : "zio.stream.experimental.ZStream.fromSchedule", "link" : "zio\/stream\/experimental\/ZStream$.html#fromSchedule[R,A](schedule:zio.Schedule[R,Any,A]):zio.stream.experimental.ZStream[Rwithzio.Has[zio.Clock],Nothing,A]", "kind" : "def"}, {"label" : "fromQueueWithShutdown", "tail" : "(queue: ZQueue[Nothing, R, Any, E, Nothing, O], maxChunkSize: Int): ZStream[R, E, O]", "member" : "zio.stream.experimental.ZStream.fromQueueWithShutdown", "link" : "zio\/stream\/experimental\/ZStream$.html#fromQueueWithShutdown[R,E,O](queue:zio.ZQueue[Nothing,R,Any,E,Nothing,O],maxChunkSize:Int):zio.stream.experimental.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromQueue", "tail" : "(queue: ZQueue[Nothing, R, Any, E, Nothing, O], maxChunkSize: Int): ZStream[R, E, O]", "member" : "zio.stream.experimental.ZStream.fromQueue", "link" : "zio\/stream\/experimental\/ZStream$.html#fromQueue[R,E,O](queue:zio.ZQueue[Nothing,R,Any,E,Nothing,O],maxChunkSize:Int):zio.stream.experimental.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromJavaIteratorZIO", "tail" : "(iterator: ZIO[R, Throwable, Iterator[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.experimental.ZStream.fromJavaIteratorZIO", "link" : "zio\/stream\/experimental\/ZStream$.html#fromJavaIteratorZIO[R,A](iterator:zio.ZIO[R,Throwable,java.util.Iterator[A]]):zio.stream.experimental.ZStream[R,Throwable,A]", "kind" : "def"}, {"label" : "fromJavaIteratorTotal", "tail" : "(iterator: => Iterator[A]): ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.ZStream.fromJavaIteratorTotal", "link" : "zio\/stream\/experimental\/ZStream$.html#fromJavaIteratorTotal[A](iterator:=>java.util.Iterator[A]):zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "fromJavaIteratorSucceed", "tail" : "(iterator: => Iterator[A]): ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.ZStream.fromJavaIteratorSucceed", "link" : "zio\/stream\/experimental\/ZStream$.html#fromJavaIteratorSucceed[A](iterator:=>java.util.Iterator[A]):zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "fromJavaIteratorManaged", "tail" : "(iterator: ZManaged[R, Throwable, Iterator[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.experimental.ZStream.fromJavaIteratorManaged", "link" : "zio\/stream\/experimental\/ZStream$.html#fromJavaIteratorManaged[R,A](iterator:zio.ZManaged[R,Throwable,java.util.Iterator[A]]):zio.stream.experimental.ZStream[R,Throwable,A]", "kind" : "def"}, {"label" : "fromJavaIteratorEffect", "tail" : "(iterator: ZIO[R, Throwable, Iterator[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.experimental.ZStream.fromJavaIteratorEffect", "link" : "zio\/stream\/experimental\/ZStream$.html#fromJavaIteratorEffect[R,A](iterator:zio.ZIO[R,Throwable,java.util.Iterator[A]]):zio.stream.experimental.ZStream[R,Throwable,A]", "kind" : "def"}, {"label" : "fromJavaIterator", "tail" : "(iterator: => Iterator[A]): ZStream[Any, Throwable, A]", "member" : "zio.stream.experimental.ZStream.fromJavaIterator", "link" : "zio\/stream\/experimental\/ZStream$.html#fromJavaIterator[A](iterator:=>java.util.Iterator[A]):zio.stream.experimental.ZStream[Any,Throwable,A]", "kind" : "def"}, {"label" : "fromIteratorZIO", "tail" : "(iterator: ZIO[R, Throwable, Iterator[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.experimental.ZStream.fromIteratorZIO", "link" : "zio\/stream\/experimental\/ZStream$.html#fromIteratorZIO[R,A](iterator:zio.ZIO[R,Throwable,Iterator[A]]):zio.stream.experimental.ZStream[R,Throwable,A]", "kind" : "def"}, {"label" : "fromIteratorTotal", "tail" : "(iterator: => Iterator[A]): ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.ZStream.fromIteratorTotal", "link" : "zio\/stream\/experimental\/ZStream$.html#fromIteratorTotal[A](iterator:=>Iterator[A]):zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "fromIteratorSucceed", "tail" : "(iterator: => Iterator[A]): ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.ZStream.fromIteratorSucceed", "link" : "zio\/stream\/experimental\/ZStream$.html#fromIteratorSucceed[A](iterator:=>Iterator[A]):zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "fromIteratorManaged", "tail" : "(iterator: ZManaged[R, Throwable, Iterator[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.experimental.ZStream.fromIteratorManaged", "link" : "zio\/stream\/experimental\/ZStream$.html#fromIteratorManaged[R,A](iterator:zio.ZManaged[R,Throwable,Iterator[A]]):zio.stream.experimental.ZStream[R,Throwable,A]", "kind" : "def"}, {"label" : "fromIteratorEffect", "tail" : "(iterator: ZIO[R, Throwable, Iterator[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.experimental.ZStream.fromIteratorEffect", "link" : "zio\/stream\/experimental\/ZStream$.html#fromIteratorEffect[R,A](iterator:zio.ZIO[R,Throwable,Iterator[A]]):zio.stream.experimental.ZStream[R,Throwable,A]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(iterator: => Iterator[A]): ZStream[Any, Throwable, A]", "member" : "zio.stream.experimental.ZStream.fromIterator", "link" : "zio\/stream\/experimental\/ZStream$.html#fromIterator[A](iterator:=>Iterator[A]):zio.stream.experimental.ZStream[Any,Throwable,A]", "kind" : "def"}, {"label" : "fromIterableZIO", "tail" : "(iterable: ZIO[R, E, Iterable[O]]): ZStream[R, E, O]", "member" : "zio.stream.experimental.ZStream.fromIterableZIO", "link" : "zio\/stream\/experimental\/ZStream$.html#fromIterableZIO[R,E,O](iterable:zio.ZIO[R,E,Iterable[O]]):zio.stream.experimental.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromIterableM", "tail" : "(iterable: ZIO[R, E, Iterable[O]]): ZStream[R, E, O]", "member" : "zio.stream.experimental.ZStream.fromIterableM", "link" : "zio\/stream\/experimental\/ZStream$.html#fromIterableM[R,E,O](iterable:zio.ZIO[R,E,Iterable[O]]):zio.stream.experimental.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(as: => Iterable[O]): ZStream[Any, Nothing, O]", "member" : "zio.stream.experimental.ZStream.fromIterable", "link" : "zio\/stream\/experimental\/ZStream$.html#fromIterable[O](as:=>Iterable[O]):zio.stream.experimental.ZStream[Any,Nothing,O]", "kind" : "def"}, {"label" : "fromHubManagedWithShutdown", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, A], maxChunkSize: Int): ZManaged[Any, Nothing, ZStream[R, E, A]]", "member" : "zio.stream.experimental.ZStream.fromHubManagedWithShutdown", "link" : "zio\/stream\/experimental\/ZStream$.html#fromHubManagedWithShutdown[R,E,A](hub:zio.ZHub[Nothing,R,Any,E,Nothing,A],maxChunkSize:Int):zio.ZManaged[Any,Nothing,zio.stream.experimental.ZStream[R,E,A]]", "kind" : "def"}, {"label" : "fromHubWithShutdown", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, A], maxChunkSize: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.fromHubWithShutdown", "link" : "zio\/stream\/experimental\/ZStream$.html#fromHubWithShutdown[R,E,A](hub:zio.ZHub[Nothing,R,Any,E,Nothing,A],maxChunkSize:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "fromHubManaged", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, A], maxChunkSize: Int): ZManaged[Any, Nothing, ZStream[R, E, A]]", "member" : "zio.stream.experimental.ZStream.fromHubManaged", "link" : "zio\/stream\/experimental\/ZStream$.html#fromHubManaged[R,E,A](hub:zio.ZHub[Nothing,R,Any,E,Nothing,A],maxChunkSize:Int):zio.ZManaged[Any,Nothing,zio.stream.experimental.ZStream[R,E,A]]", "kind" : "def"}, {"label" : "fromHub", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, A], maxChunkSize: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.fromHub", "link" : "zio\/stream\/experimental\/ZStream$.html#fromHub[R,E,A](hub:zio.ZHub[Nothing,R,Any,E,Nothing,A],maxChunkSize:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "fromEffectOption", "tail" : "(fa: ZIO[R, Option[E], A]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.fromEffectOption", "link" : "zio\/stream\/experimental\/ZStream$.html#fromEffectOption[R,E,A](fa:zio.ZIO[R,Option[E],A]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(fa: ZIO[R, E, A]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.fromEffect", "link" : "zio\/stream\/experimental\/ZStream$.html#fromEffect[R,E,A](fa:zio.ZIO[R,E,A]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "fromChunks", "tail" : "(cs: Chunk[O]*): ZStream[Any, Nothing, O]", "member" : "zio.stream.experimental.ZStream.fromChunks", "link" : "zio\/stream\/experimental\/ZStream$.html#fromChunks[O](cs:zio.Chunk[O]*):zio.stream.experimental.ZStream[Any,Nothing,O]", "kind" : "def"}, {"label" : "fromChunkQueueWithShutdown", "tail" : "(queue: ZQueue[Nothing, R, Any, E, Nothing, Chunk[O]]): ZStream[R, E, O]", "member" : "zio.stream.experimental.ZStream.fromChunkQueueWithShutdown", "link" : "zio\/stream\/experimental\/ZStream$.html#fromChunkQueueWithShutdown[R,E,O](queue:zio.ZQueue[Nothing,R,Any,E,Nothing,zio.Chunk[O]]):zio.stream.experimental.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromChunkQueue", "tail" : "(queue: ZQueue[Nothing, R, Any, E, Nothing, Chunk[O]]): ZStream[R, E, O]", "member" : "zio.stream.experimental.ZStream.fromChunkQueue", "link" : "zio\/stream\/experimental\/ZStream$.html#fromChunkQueue[R,E,O](queue:zio.ZQueue[Nothing,R,Any,E,Nothing,zio.Chunk[O]]):zio.stream.experimental.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromChunkHubManagedWithShutdown", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, Chunk[O]]): ZManaged[Any, Nothing, ZStream[R, E, O]]", "member" : "zio.stream.experimental.ZStream.fromChunkHubManagedWithShutdown", "link" : "zio\/stream\/experimental\/ZStream$.html#fromChunkHubManagedWithShutdown[R,E,O](hub:zio.ZHub[Nothing,R,Any,E,Nothing,zio.Chunk[O]]):zio.ZManaged[Any,Nothing,zio.stream.experimental.ZStream[R,E,O]]", "kind" : "def"}, {"label" : "fromChunkHubWithShutdown", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, Chunk[O]]): ZStream[R, E, O]", "member" : "zio.stream.experimental.ZStream.fromChunkHubWithShutdown", "link" : "zio\/stream\/experimental\/ZStream$.html#fromChunkHubWithShutdown[R,E,O](hub:zio.ZHub[Nothing,R,Any,E,Nothing,zio.Chunk[O]]):zio.stream.experimental.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromChunkHubManaged", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, Chunk[O]]): ZManaged[Any, Nothing, ZStream[R, E, O]]", "member" : "zio.stream.experimental.ZStream.fromChunkHubManaged", "link" : "zio\/stream\/experimental\/ZStream$.html#fromChunkHubManaged[R,E,O](hub:zio.ZHub[Nothing,R,Any,E,Nothing,zio.Chunk[O]]):zio.ZManaged[Any,Nothing,zio.stream.experimental.ZStream[R,E,O]]", "kind" : "def"}, {"label" : "fromChunkHub", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, Chunk[O]]): ZStream[R, E, O]", "member" : "zio.stream.experimental.ZStream.fromChunkHub", "link" : "zio\/stream\/experimental\/ZStream$.html#fromChunkHub[R,E,O](hub:zio.ZHub[Nothing,R,Any,E,Nothing,zio.Chunk[O]]):zio.stream.experimental.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromChunk", "tail" : "(c: => Chunk[O]): ZStream[Any, Nothing, O]", "member" : "zio.stream.experimental.ZStream.fromChunk", "link" : "zio\/stream\/experimental\/ZStream$.html#fromChunk[O](c:=>zio.Chunk[O]):zio.stream.experimental.ZStream[Any,Nothing,O]", "kind" : "def"}, {"label" : "fromBlockingJavaIterator", "tail" : "(iter: => Iterator[A]): ZStream[Any, Throwable, A]", "member" : "zio.stream.experimental.ZStream.fromBlockingJavaIterator", "link" : "zio\/stream\/experimental\/ZStream$.html#fromBlockingJavaIterator[A](iter:=>java.util.Iterator[A]):zio.stream.experimental.ZStream[Any,Throwable,A]", "kind" : "def"}, {"label" : "fromBlockingIterator", "tail" : "(iterator: => Iterator[A]): ZStream[Any, Throwable, A]", "member" : "zio.stream.experimental.ZStream.fromBlockingIterator", "link" : "zio\/stream\/experimental\/ZStream$.html#fromBlockingIterator[A](iterator:=>Iterator[A]):zio.stream.experimental.ZStream[Any,Throwable,A]", "kind" : "def"}, {"label" : "from", "tail" : "(input: => Input)(constructor: ZStreamConstructor[Input]): Out", "member" : "zio.stream.experimental.ZStream.from", "link" : "zio\/stream\/experimental\/ZStream$.html#from[Input](input:=>Input)(implicitconstructor:zio.stream.experimental.ZStream.ZStreamConstructor[Input]):constructor.Out", "kind" : "def"}, {"label" : "finalizer", "tail" : "(finalizer: URIO[R, Any]): ZStream[R, Nothing, Any]", "member" : "zio.stream.experimental.ZStream.finalizer", "link" : "zio\/stream\/experimental\/ZStream$.html#finalizer[R](finalizer:zio.URIO[R,Any]):zio.stream.experimental.ZStream[R,Nothing,Any]", "kind" : "def"}, {"label" : "failCause", "tail" : "(cause: => Cause[E]): ZStream[Any, E, Nothing]", "member" : "zio.stream.experimental.ZStream.failCause", "link" : "zio\/stream\/experimental\/ZStream$.html#failCause[E](cause:=>zio.Cause[E]):zio.stream.experimental.ZStream[Any,E,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(error: => E): ZStream[Any, E, Nothing]", "member" : "zio.stream.experimental.ZStream.fail", "link" : "zio\/stream\/experimental\/ZStream$.html#fail[E](error:=>E):zio.stream.experimental.ZStream[Any,E,Nothing]", "kind" : "def"}, {"label" : "execute", "tail" : "(zio: ZIO[R, E, Any]): ZStream[R, E, Nothing]", "member" : "zio.stream.experimental.ZStream.execute", "link" : "zio\/stream\/experimental\/ZStream$.html#execute[R,E](zio:zio.ZIO[R,E,Any]):zio.stream.experimental.ZStream[R,E,Nothing]", "kind" : "def"}, {"label" : "environment", "tail" : "(): ZStream[R, Nothing, R]", "member" : "zio.stream.experimental.ZStream.environment", "link" : "zio\/stream\/experimental\/ZStream$.html#environment[R]:zio.stream.experimental.ZStream[R,Nothing,R]", "kind" : "def"}, {"label" : "empty", "tail" : ": ZStream[Any, Nothing, Nothing]", "member" : "zio.stream.experimental.ZStream.empty", "link" : "zio\/stream\/experimental\/ZStream$.html#empty:zio.stream.experimental.ZStream[Any,Nothing,Nothing]", "kind" : "val"}, {"label" : "done", "tail" : "(exit: Exit[E, A]): ZStream[Any, E, A]", "member" : "zio.stream.experimental.ZStream.done", "link" : "zio\/stream\/experimental\/ZStream$.html#done[E,A](exit:zio.Exit[E,A]):zio.stream.experimental.ZStream[Any,E,A]", "kind" : "def"}, {"label" : "dieMessage", "tail" : "(msg: => String): ZStream[Any, Nothing, Nothing]", "member" : "zio.stream.experimental.ZStream.dieMessage", "link" : "zio\/stream\/experimental\/ZStream$.html#dieMessage(msg:=>String):zio.stream.experimental.ZStream[Any,Nothing,Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(ex: => Throwable): ZStream[Any, Nothing, Nothing]", "member" : "zio.stream.experimental.ZStream.die", "link" : "zio\/stream\/experimental\/ZStream$.html#die(ex:=>Throwable):zio.stream.experimental.ZStream[Any,Nothing,Nothing]", "kind" : "def"}, {"label" : "concatAll", "tail" : "(streams: Chunk[ZStream[R, E, O]]): ZStream[R, E, O]", "member" : "zio.stream.experimental.ZStream.concatAll", "link" : "zio\/stream\/experimental\/ZStream$.html#concatAll[R,E,O](streams:zio.Chunk[zio.stream.experimental.ZStream[R,E,O]]):zio.stream.experimental.ZStream[R,E,O]", "kind" : "def"}, {"label" : "crossN", "tail" : "(zStream1: ZStream[R, E, A], zStream2: ZStream[R, E, B], zStream3: ZStream[R, E, C], zStream4: ZStream[R, E, D])(f: (A, B, C, D) => F): ZStream[R, E, F]", "member" : "zio.stream.experimental.ZStream.crossN", "link" : "zio\/stream\/experimental\/ZStream$.html#crossN[R,E,A,B,C,D,F](zStream1:zio.stream.experimental.ZStream[R,E,A],zStream2:zio.stream.experimental.ZStream[R,E,B],zStream3:zio.stream.experimental.ZStream[R,E,C],zStream4:zio.stream.experimental.ZStream[R,E,D])(f:(A,B,C,D)=>F):zio.stream.experimental.ZStream[R,E,F]", "kind" : "def"}, {"label" : "crossN", "tail" : "(zStream1: ZStream[R, E, A], zStream2: ZStream[R, E, B], zStream3: ZStream[R, E, C])(f: (A, B, C) => D): ZStream[R, E, D]", "member" : "zio.stream.experimental.ZStream.crossN", "link" : "zio\/stream\/experimental\/ZStream$.html#crossN[R,E,A,B,C,D](zStream1:zio.stream.experimental.ZStream[R,E,A],zStream2:zio.stream.experimental.ZStream[R,E,B],zStream3:zio.stream.experimental.ZStream[R,E,C])(f:(A,B,C)=>D):zio.stream.experimental.ZStream[R,E,D]", "kind" : "def"}, {"label" : "crossN", "tail" : "(zStream1: ZStream[R, E, A], zStream2: ZStream[R, E, B])(f: (A, B) => C): ZStream[R, E, C]", "member" : "zio.stream.experimental.ZStream.crossN", "link" : "zio\/stream\/experimental\/ZStream$.html#crossN[R,E,A,B,C](zStream1:zio.stream.experimental.ZStream[R,E,A],zStream2:zio.stream.experimental.ZStream[R,E,B])(f:(A,B)=>C):zio.stream.experimental.ZStream[R,E,C]", "kind" : "def"}, {"label" : "bracketExit", "tail" : "(acquire: ZIO[R, E, A])(release: (A, Exit[Any, Any]) => URIO[R, Any]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.bracketExit", "link" : "zio\/stream\/experimental\/ZStream$.html#bracketExit[R,E,A](acquire:zio.ZIO[R,E,A])(release:(A,zio.Exit[Any,Any])=>zio.URIO[R,Any]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: ZIO[R, E, A])(release: (A) => URIO[R, Any]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.bracket", "link" : "zio\/stream\/experimental\/ZStream$.html#bracket[R,E,A](acquire:zio.ZIO[R,E,A])(release:A=>zio.URIO[R,Any]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "blocking", "tail" : "(stream: ZStream[R, E, A]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.blocking", "link" : "zio\/stream\/experimental\/ZStream$.html#blocking[R,E,A](stream:zio.stream.experimental.ZStream[R,E,A]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(as: A*): ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.ZStream.apply", "link" : "zio\/stream\/experimental\/ZStream$.html#apply[A](as:A*):zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: ZIO[R, E, A])(release: (A, Exit[Any, Any]) => URIO[R, Any]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.acquireReleaseExitWith", "link" : "zio\/stream\/experimental\/ZStream$.html#acquireReleaseExitWith[R,E,A](acquire:zio.ZIO[R,E,A])(release:(A,zio.Exit[Any,Any])=>zio.URIO[R,Any]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: ZIO[R, E, A])(release: (A) => URIO[R, Any]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.acquireReleaseWith", "link" : "zio\/stream\/experimental\/ZStream$.html#acquireReleaseWith[R,E,A](acquire:zio.ZIO[R,E,A])(release:A=>zio.URIO[R,Any]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "accessStream", "tail" : "(): AccessStreamPartiallyApplied[R]", "member" : "zio.stream.experimental.ZStream.accessStream", "link" : "zio\/stream\/experimental\/ZStream$.html#accessStream[R]:zio.stream.experimental.ZStream.AccessStreamPartiallyApplied[R]", "kind" : "def"}, {"label" : "accessZIO", "tail" : "(): AccessZIOPartiallyApplied[R]", "member" : "zio.stream.experimental.ZStream.accessZIO", "link" : "zio\/stream\/experimental\/ZStream$.html#accessZIO[R]:zio.stream.experimental.ZStream.AccessZIOPartiallyApplied[R]", "kind" : "def"}, {"label" : "accessM", "tail" : "(): AccessZIOPartiallyApplied[R]", "member" : "zio.stream.experimental.ZStream.accessM", "link" : "zio\/stream\/experimental\/ZStream$.html#accessM[R]:zio.stream.experimental.ZStream.AccessZIOPartiallyApplied[R]", "kind" : "def"}, {"label" : "access", "tail" : "(): AccessPartiallyApplied[R]", "member" : "zio.stream.experimental.ZStream.access", "link" : "zio\/stream\/experimental\/ZStream$.html#access[R]:zio.stream.experimental.ZStream.AccessPartiallyApplied[R]", "kind" : "def"}, {"label" : "absolve", "tail" : "(xs: ZStream[R, E, Either[E, O]]): ZStream[R, E, O]", "member" : "zio.stream.experimental.ZStream.absolve", "link" : "zio\/stream\/experimental\/ZStream$.html#absolve[R,E,O](xs:zio.stream.experimental.ZStream[R,E,Either[E,O]]):zio.stream.experimental.ZStream[R,E,O]", "kind" : "def"}, {"label" : "DefaultChunkSize", "tail" : ": Int(4096)", "member" : "zio.stream.experimental.ZStream.DefaultChunkSize", "link" : "zio\/stream\/experimental\/ZStream$.html#DefaultChunkSize:Int(4096)", "kind" : "final val"}, {"label" : "fromPull", "tail" : "(zio: ZManaged[R, Nothing, ZIO[R, Option[E], Chunk[A]]]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStream.fromPull", "link" : "zio\/stream\/experimental\/ZStream$.html#fromPull[R,E,A](zio:zio.ZManaged[R,Nothing,zio.ZIO[R,Option[E],zio.Chunk[A]]]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "fromSocketServer", "tail" : "(port: Int, host: Option[String]): ZStream[Any, Throwable, Connection]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromSocketServer", "link" : "zio\/stream\/experimental\/ZStream$.html#fromSocketServer(port:Int,host:Option[String]):zio.stream.experimental.ZStream[Any,Throwable,ZStreamPlatformSpecificConstructors.this.Connection]", "kind" : "def"}, {"label" : "fromJavaStreamTotal", "tail" : "(stream: => java.util.stream.Stream[A]): ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromJavaStreamTotal", "link" : "zio\/stream\/experimental\/ZStream$.html#fromJavaStreamTotal[A](stream:=>java.util.stream.Stream[A]):zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "final def"}, {"label" : "fromJavaStreamManaged", "tail" : "(stream: ZManaged[R, Throwable, java.util.stream.Stream[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromJavaStreamManaged", "link" : "zio\/stream\/experimental\/ZStream$.html#fromJavaStreamManaged[R,A](stream:zio.ZManaged[R,Throwable,java.util.stream.Stream[A]]):zio.stream.experimental.ZStream[R,Throwable,A]", "kind" : "final def"}, {"label" : "fromJavaStreamEffect", "tail" : "(stream: ZIO[R, Throwable, java.util.stream.Stream[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromJavaStreamEffect", "link" : "zio\/stream\/experimental\/ZStream$.html#fromJavaStreamEffect[R,A](stream:zio.ZIO[R,Throwable,java.util.stream.Stream[A]]):zio.stream.experimental.ZStream[R,Throwable,A]", "kind" : "final def"}, {"label" : "fromJavaStream", "tail" : "(stream: => java.util.stream.Stream[A]): ZStream[R, Throwable, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromJavaStream", "link" : "zio\/stream\/experimental\/ZStream$.html#fromJavaStream[R,A](stream:=>java.util.stream.Stream[A]):zio.stream.experimental.ZStream[R,Throwable,A]", "kind" : "final def"}, {"label" : "fromOutputStreamWriter", "tail" : "(write: (OutputStream) => Unit, chunkSize: Int): ZStream[Any, Throwable, Byte]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromOutputStreamWriter", "link" : "zio\/stream\/experimental\/ZStream$.html#fromOutputStreamWriter(write:java.io.OutputStream=>Unit,chunkSize:Int):zio.stream.experimental.ZStream[Any,Throwable,Byte]", "kind" : "def"}, {"label" : "fromReaderManaged", "tail" : "(reader: => ZManaged[R, IOException, Reader], chunkSize: Int): ZStream[R, IOException, Char]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromReaderManaged", "link" : "zio\/stream\/experimental\/ZStream$.html#fromReaderManaged[R](reader:=>zio.ZManaged[R,java.io.IOException,java.io.Reader],chunkSize:Int):zio.stream.experimental.ZStream[R,java.io.IOException,Char]", "kind" : "def"}, {"label" : "fromReaderEffect", "tail" : "(reader: => ZIO[R, IOException, Reader], chunkSize: Int): ZStream[R, IOException, Char]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromReaderEffect", "link" : "zio\/stream\/experimental\/ZStream$.html#fromReaderEffect[R](reader:=>zio.ZIO[R,java.io.IOException,java.io.Reader],chunkSize:Int):zio.stream.experimental.ZStream[R,java.io.IOException,Char]", "kind" : "def"}, {"label" : "fromReader", "tail" : "(reader: => Reader, chunkSize: Int): ZStream[Any, IOException, Char]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromReader", "link" : "zio\/stream\/experimental\/ZStream$.html#fromReader(reader:=>java.io.Reader,chunkSize:Int):zio.stream.experimental.ZStream[Any,java.io.IOException,Char]", "kind" : "def"}, {"label" : "fromInputStreamManaged", "tail" : "(is: ZManaged[R, IOException, InputStream], chunkSize: Int): ZStream[R, IOException, Byte]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromInputStreamManaged", "link" : "zio\/stream\/experimental\/ZStream$.html#fromInputStreamManaged[R](is:zio.ZManaged[R,java.io.IOException,java.io.InputStream],chunkSize:Int):zio.stream.experimental.ZStream[R,java.io.IOException,Byte]", "kind" : "def"}, {"label" : "fromInputStreamEffect", "tail" : "(is: ZIO[R, IOException, InputStream], chunkSize: Int): ZStream[R, IOException, Byte]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromInputStreamEffect", "link" : "zio\/stream\/experimental\/ZStream$.html#fromInputStreamEffect[R](is:zio.ZIO[R,java.io.IOException,java.io.InputStream],chunkSize:Int):zio.stream.experimental.ZStream[R,java.io.IOException,Byte]", "kind" : "def"}, {"label" : "fromResource", "tail" : "(path: String, chunkSize: Int): ZStream[Any, IOException, Byte]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromResource", "link" : "zio\/stream\/experimental\/ZStream$.html#fromResource(path:String,chunkSize:Int):zio.stream.experimental.ZStream[Any,java.io.IOException,Byte]", "kind" : "final def"}, {"label" : "fromInputStream", "tail" : "(is: => InputStream, chunkSize: Int): ZStream[Any, IOException, Byte]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromInputStream", "link" : "zio\/stream\/experimental\/ZStream$.html#fromInputStream(is:=>java.io.InputStream,chunkSize:Int):zio.stream.experimental.ZStream[Any,java.io.IOException,Byte]", "kind" : "def"}, {"label" : "fromFile", "tail" : "(path: => Path, chunkSize: Int): ZStream[Any, Throwable, Byte]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromFile", "link" : "zio\/stream\/experimental\/ZStream$.html#fromFile(path:=>java.nio.file.Path,chunkSize:Int):zio.stream.experimental.ZStream[Any,Throwable,Byte]", "kind" : "def"}, {"label" : "effectAsyncMaybe", "tail" : "(register: (Emit[R, E, A, Unit]) => Option[ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.effectAsyncMaybe", "link" : "zio\/stream\/experimental\/ZStream$.html#effectAsyncMaybe[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>Option[zio.stream.experimental.ZStream[R,E,A]],outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "effectAsyncM", "tail" : "(register: (Emit[R, E, A, Unit]) => ZIO[R, E, Any], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.effectAsyncM", "link" : "zio\/stream\/experimental\/ZStream$.html#effectAsyncM[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>zio.ZIO[R,E,Any],outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "effectAsyncInterrupt", "tail" : "(register: (Emit[R, E, A, Unit]) => Either[Canceler[R], ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.effectAsyncInterrupt", "link" : "zio\/stream\/experimental\/ZStream$.html#effectAsyncInterrupt[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>Either[zio.Canceler[R],zio.stream.experimental.ZStream[R,E,A]],outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "effectAsync", "tail" : "(register: (Emit[R, E, A, Unit]) => Unit, outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.effectAsync", "link" : "zio\/stream\/experimental\/ZStream$.html#effectAsync[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>Unit,outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncMaybe", "tail" : "(register: (Emit[R, E, A, Unit]) => Option[ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.asyncMaybe", "link" : "zio\/stream\/experimental\/ZStream$.html#asyncMaybe[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>Option[zio.stream.experimental.ZStream[R,E,A]],outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncZIO", "tail" : "(register: (Emit[R, E, A, Unit]) => ZIO[R, E, Any], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.asyncZIO", "link" : "zio\/stream\/experimental\/ZStream$.html#asyncZIO[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>zio.ZIO[R,E,Any],outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncManaged", "tail" : "(register: ((ZIO[R, Option[E], Chunk[A]]) => Unit) => ZManaged[R, E, Any], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.asyncManaged", "link" : "zio\/stream\/experimental\/ZStream$.html#asyncManaged[R,E,A](register:(zio.ZIO[R,Option[E],zio.Chunk[A]]=>Unit)=>zio.ZManaged[R,E,Any],outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncInterrupt", "tail" : "(register: (Emit[R, E, A, Unit]) => Either[Canceler[R], ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.asyncInterrupt", "link" : "zio\/stream\/experimental\/ZStream$.html#asyncInterrupt[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>Either[zio.Canceler[R],zio.stream.experimental.ZStream[R,E,A]],outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "async", "tail" : "(register: (Emit[R, E, A, Unit]) => Unit, outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.async", "link" : "zio\/stream\/experimental\/ZStream$.html#async[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>Unit,outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/ZStream$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/ZStream$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/ZStream$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/ZStream$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/ZStream$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/ZStream$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/ZStream$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZStream$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZStream$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZStream$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/ZStream$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/ZStream$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/ZStream$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/ZStream$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/ZStream$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/ZStream$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/ZStream$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/ZStream$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/ZStream$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stream\/experimental\/ZStream.html", "kind" : "class"}, {"name" : "zio.stream.experimental.ZStreamAspect", "object" : "zio\/stream\/experimental\/ZStreamAspect$.html", "members_object" : [{"label" : "rechunk", "tail" : "(n: Int): ZStreamAspect[Nothing, Any, Nothing, Any, Nothing, Any]", "member" : "zio.stream.experimental.ZStreamAspect.rechunk", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#rechunk(n:Int):zio.stream.experimental.ZStreamAspect[Nothing,Any,Nothing,Any,Nothing,Any]", "kind" : "def"}, {"label" : "chunkN", "tail" : "(n: Int): ZStreamAspect[Nothing, Any, Nothing, Any, Nothing, Any]", "member" : "zio.stream.experimental.ZStreamAspect.chunkN", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#chunkN(n:Int):zio.stream.experimental.ZStreamAspect[Nothing,Any,Nothing,Any,Nothing,Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/ZStreamAspect$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/stream\/experimental\/ZStreamAspect.html", "kind" : "trait", "members_trait" : [{"label" : "andThen", "tail" : "(that: ZStreamAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]): ZStreamAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]", "member" : "zio.stream.experimental.ZStreamAspect.andThen", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#andThen[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE,LowerA1>:LowerA,UpperA1<:UpperA](that:zio.stream.experimental.ZStreamAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]):zio.stream.experimental.ZStreamAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]", "kind" : "def"}, {"label" : "@@", "tail" : "(that: ZStreamAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]): ZStreamAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]", "member" : "zio.stream.experimental.ZStreamAspect.@@", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#@@[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE,LowerA1>:LowerA,UpperA1<:UpperA](that:zio.stream.experimental.ZStreamAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]):zio.stream.experimental.ZStreamAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]", "kind" : "def"}, {"label" : ">>>", "tail" : "(that: ZStreamAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]): ZStreamAspect[LowerR1, UpperR1, LowerE1, UpperE1, LowerA1, UpperA1]", "member" : "zio.stream.experimental.ZStreamAspect.>>>", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#>>>[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE,LowerA1>:LowerA,UpperA1<:UpperA](that:zio.stream.experimental.ZStreamAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]):zio.stream.experimental.ZStreamAspect[LowerR1,UpperR1,LowerE1,UpperE1,LowerA1,UpperA1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/ZStreamAspect.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(stream: ZStream[R, E, A]): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamAspect.apply", "link" : "zio\/stream\/experimental\/ZStreamAspect.html#apply[R>:LowerR<:UpperR,E>:LowerE<:UpperE,A>:LowerA<:UpperA](stream:zio.stream.experimental.ZStream[R,E,A]):zio.stream.experimental.ZStream[R,E,A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors", "trait" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html", "kind" : "trait", "members_trait" : [{"label" : "ZStreamConstructorPlatformSpecific", "tail" : "", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.ZStreamConstructorPlatformSpecific", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#ZStreamConstructorPlatformSpecificextendsZStreamPlatformSpecificConstructors.this.ZStreamConstructorLowPriority1", "kind" : "trait"}, {"label" : "Connection", "tail" : "", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.Connection", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#Connection", "kind" : "object"}, {"label" : "Connection", "tail" : "", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.Connection", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#ConnectionextendsAnyRef", "kind" : "final class"}, {"label" : "fromSocketServer", "tail" : "(port: Int, host: Option[String]): ZStream[Any, Throwable, ZStream.Connection]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromSocketServer", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#fromSocketServer(port:Int,host:Option[String]):zio.stream.experimental.ZStream[Any,Throwable,ZStreamPlatformSpecificConstructors.this.Connection]", "kind" : "def"}, {"label" : "fromJavaStreamTotal", "tail" : "(stream: => java.util.stream.Stream[A]): ZStream[Any, Nothing, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromJavaStreamTotal", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#fromJavaStreamTotal[A](stream:=>java.util.stream.Stream[A]):zio.stream.experimental.ZStream[Any,Nothing,A]", "kind" : "final def"}, {"label" : "fromJavaStreamManaged", "tail" : "(stream: ZManaged[R, Throwable, java.util.stream.Stream[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromJavaStreamManaged", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#fromJavaStreamManaged[R,A](stream:zio.ZManaged[R,Throwable,java.util.stream.Stream[A]]):zio.stream.experimental.ZStream[R,Throwable,A]", "kind" : "final def"}, {"label" : "fromJavaStreamEffect", "tail" : "(stream: ZIO[R, Throwable, java.util.stream.Stream[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromJavaStreamEffect", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#fromJavaStreamEffect[R,A](stream:zio.ZIO[R,Throwable,java.util.stream.Stream[A]]):zio.stream.experimental.ZStream[R,Throwable,A]", "kind" : "final def"}, {"label" : "fromJavaStream", "tail" : "(stream: => java.util.stream.Stream[A]): ZStream[R, Throwable, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromJavaStream", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#fromJavaStream[R,A](stream:=>java.util.stream.Stream[A]):zio.stream.experimental.ZStream[R,Throwable,A]", "kind" : "final def"}, {"label" : "fromOutputStreamWriter", "tail" : "(write: (OutputStream) => Unit, chunkSize: Int): ZStream[Any, Throwable, Byte]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromOutputStreamWriter", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#fromOutputStreamWriter(write:java.io.OutputStream=>Unit,chunkSize:Int):zio.stream.experimental.ZStream[Any,Throwable,Byte]", "kind" : "def"}, {"label" : "fromReaderManaged", "tail" : "(reader: => ZManaged[R, IOException, Reader], chunkSize: Int): ZStream[R, IOException, Char]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromReaderManaged", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#fromReaderManaged[R](reader:=>zio.ZManaged[R,java.io.IOException,java.io.Reader],chunkSize:Int):zio.stream.experimental.ZStream[R,java.io.IOException,Char]", "kind" : "def"}, {"label" : "fromReaderEffect", "tail" : "(reader: => ZIO[R, IOException, Reader], chunkSize: Int): ZStream[R, IOException, Char]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromReaderEffect", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#fromReaderEffect[R](reader:=>zio.ZIO[R,java.io.IOException,java.io.Reader],chunkSize:Int):zio.stream.experimental.ZStream[R,java.io.IOException,Char]", "kind" : "def"}, {"label" : "fromReader", "tail" : "(reader: => Reader, chunkSize: Int): ZStream[Any, IOException, Char]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromReader", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#fromReader(reader:=>java.io.Reader,chunkSize:Int):zio.stream.experimental.ZStream[Any,java.io.IOException,Char]", "kind" : "def"}, {"label" : "fromInputStreamManaged", "tail" : "(is: ZManaged[R, IOException, InputStream], chunkSize: Int): ZStream[R, IOException, Byte]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromInputStreamManaged", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#fromInputStreamManaged[R](is:zio.ZManaged[R,java.io.IOException,java.io.InputStream],chunkSize:Int):zio.stream.experimental.ZStream[R,java.io.IOException,Byte]", "kind" : "def"}, {"label" : "fromInputStreamEffect", "tail" : "(is: ZIO[R, IOException, InputStream], chunkSize: Int): ZStream[R, IOException, Byte]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromInputStreamEffect", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#fromInputStreamEffect[R](is:zio.ZIO[R,java.io.IOException,java.io.InputStream],chunkSize:Int):zio.stream.experimental.ZStream[R,java.io.IOException,Byte]", "kind" : "def"}, {"label" : "fromResource", "tail" : "(path: String, chunkSize: Int): ZStream[Any, IOException, Byte]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromResource", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#fromResource(path:String,chunkSize:Int):zio.stream.experimental.ZStream[Any,java.io.IOException,Byte]", "kind" : "final def"}, {"label" : "fromInputStream", "tail" : "(is: => InputStream, chunkSize: Int): ZStream[Any, IOException, Byte]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromInputStream", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#fromInputStream(is:=>java.io.InputStream,chunkSize:Int):zio.stream.experimental.ZStream[Any,java.io.IOException,Byte]", "kind" : "def"}, {"label" : "fromFile", "tail" : "(path: => Path, chunkSize: Int): ZStream[Any, Throwable, Byte]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.fromFile", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#fromFile(path:=>java.nio.file.Path,chunkSize:Int):zio.stream.experimental.ZStream[Any,Throwable,Byte]", "kind" : "def"}, {"label" : "effectAsyncMaybe", "tail" : "(register: (Emit[R, E, A, Unit]) => Option[ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.effectAsyncMaybe", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#effectAsyncMaybe[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>Option[zio.stream.experimental.ZStream[R,E,A]],outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "effectAsyncM", "tail" : "(register: (Emit[R, E, A, Unit]) => ZIO[R, E, Any], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.effectAsyncM", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#effectAsyncM[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>zio.ZIO[R,E,Any],outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "effectAsyncInterrupt", "tail" : "(register: (Emit[R, E, A, Unit]) => Either[Canceler[R], ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.effectAsyncInterrupt", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#effectAsyncInterrupt[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>Either[zio.Canceler[R],zio.stream.experimental.ZStream[R,E,A]],outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "effectAsync", "tail" : "(register: (Emit[R, E, A, Unit]) => Unit, outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.effectAsync", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#effectAsync[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>Unit,outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncMaybe", "tail" : "(register: (Emit[R, E, A, Unit]) => Option[ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.asyncMaybe", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#asyncMaybe[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>Option[zio.stream.experimental.ZStream[R,E,A]],outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncZIO", "tail" : "(register: (Emit[R, E, A, Unit]) => ZIO[R, E, Any], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.asyncZIO", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#asyncZIO[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>zio.ZIO[R,E,Any],outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncManaged", "tail" : "(register: ((ZIO[R, Option[E], Chunk[A]]) => Unit) => ZManaged[R, E, Any], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.asyncManaged", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#asyncManaged[R,E,A](register:(zio.ZIO[R,Option[E],zio.Chunk[A]]=>Unit)=>zio.ZManaged[R,E,Any],outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncInterrupt", "tail" : "(register: (Emit[R, E, A, Unit]) => Either[Canceler[R], ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.asyncInterrupt", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#asyncInterrupt[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>Either[zio.Canceler[R],zio.stream.experimental.ZStream[R,E,A]],outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "async", "tail" : "(register: (Emit[R, E, A, Unit]) => Unit, outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.experimental.ZStreamPlatformSpecificConstructors.async", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#async[R,E,A](register:zio.stream.experimental.ZStream.Emit[R,E,A,Unit]=>Unit,outputBuffer:Int):zio.stream.experimental.ZStream[R,E,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/ZStreamPlatformSpecificConstructors.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "zio.stream.experimental.internal" : [{"name" : "zio.stream.experimental.internal.ChannelExecutor", "shortDescription" : "", "object" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html", "members_class" : [{"label" : "finishWithExit", "tail" : "(exit: Exit[Any, Any]): ZIO[Env, Any, Any]", "member" : "zio.stream.experimental.internal.ChannelExecutor.finishWithExit", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#finishWithExit(exit:zio.Exit[Any,Any]):zio.ZIO[Env,Any,Any]", "kind" : "def"}, {"label" : "input", "tail" : ": ErasedExecutor[Env]", "member" : "zio.stream.experimental.internal.ChannelExecutor.input", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#input:zio.stream.experimental.internal.ChannelExecutor.ErasedExecutor[Env]", "kind" : "var"}, {"label" : "run", "tail" : "(): ChannelState[Env, Any]", "member" : "zio.stream.experimental.internal.ChannelExecutor.run", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#run():zio.stream.experimental.internal.ChannelExecutor.ChannelState[Env,Any]", "kind" : "final def"}, {"label" : "cancelWith", "tail" : "(exit: Exit[OutErr, OutDone]): Unit", "member" : "zio.stream.experimental.internal.ChannelExecutor.cancelWith", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#cancelWith(exit:zio.Exit[OutErr,OutDone]):Unit", "kind" : "def"}, {"label" : "getEmit", "tail" : "(): OutElem", "member" : "zio.stream.experimental.internal.ChannelExecutor.getEmit", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#getEmit:OutElem", "kind" : "def"}, {"label" : "getDone", "tail" : "(): Exit[OutErr, OutDone]", "member" : "zio.stream.experimental.internal.ChannelExecutor.getDone", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#getDone:zio.Exit[OutErr,OutDone]", "kind" : "def"}, {"label" : "close", "tail" : "(ex: Exit[Any, Any]): ZIO[Env, Nothing, Any]", "member" : "zio.stream.experimental.internal.ChannelExecutor.close", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#close(ex:zio.Exit[Any,Any]):zio.ZIO[Env,Nothing,Any]", "kind" : "def"}, {"member" : "zio.stream.experimental.internal.ChannelExecutor#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "SubexecutorStack", "tail" : "", "member" : "zio.stream.experimental.internal.ChannelExecutor.SubexecutorStack", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#SubexecutorStack", "kind" : "object"}, {"label" : "SubexecutorStack", "tail" : "", "member" : "zio.stream.experimental.internal.ChannelExecutor.SubexecutorStack", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#SubexecutorStack[-R]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "maybeCloseBoth", "tail" : "(l: ZIO[Env, Nothing, Any], r: ZIO[Env, Nothing, Any]): URIO[Env, Exit[Nothing, Any]]", "member" : "zio.stream.experimental.internal.ChannelExecutor.maybeCloseBoth", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#maybeCloseBoth[Env](l:zio.ZIO[Env,Nothing,Any],r:zio.ZIO[Env,Nothing,Any]):zio.URIO[Env,zio.Exit[Nothing,Any]]", "kind" : "def"}, {"label" : "ChannelState", "tail" : "", "member" : "zio.stream.experimental.internal.ChannelExecutor.ChannelState", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#ChannelState", "kind" : "object"}, {"label" : "ChannelState", "tail" : "", "member" : "zio.stream.experimental.internal.ChannelExecutor.ChannelState", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#ChannelState[-R,+E]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "Finalizer", "tail" : "", "member" : "zio.stream.experimental.internal.ChannelExecutor.Finalizer", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#Finalizer[R]=zio.Exit[Any,Any]=>zio.URIO[R,Any]", "kind" : "type"}, {"label" : "ErasedContinuation", "tail" : "", "member" : "zio.stream.experimental.internal.ChannelExecutor.ErasedContinuation", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#ErasedContinuation[R]=zio.stream.experimental.ZChannel.Fold.Continuation[R,Any,Any,Any,Any,Any,Any,Any,Any]", "kind" : "type"}, {"label" : "ErasedExecutor", "tail" : "", "member" : "zio.stream.experimental.internal.ChannelExecutor.ErasedExecutor", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#ErasedExecutor[Env]=zio.stream.experimental.internal.ChannelExecutor[Env,Any,Any,Any,Any,Any,Any]", "kind" : "type"}, {"label" : "Channel", "tail" : "", "member" : "zio.stream.experimental.internal.ChannelExecutor.Channel", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#Channel[R]=zio.stream.experimental.ZChannel[R,Any,Any,Any,Any,Any,Any]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/internal\/ChannelExecutor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stream\/experimental\/internal\/ChannelExecutor.html", "kind" : "class"}, {"name" : "zio.stream.experimental.internal.Utils", "shortDescription" : "", "object" : "zio\/stream\/experimental\/internal\/Utils$.html", "members_object" : [{"label" : "zipChunks", "tail" : "(cl: Chunk[A], cr: Chunk[B], f: (A, B) => C): (Chunk[C], Either[Chunk[A], Chunk[B]])", "member" : "zio.stream.experimental.internal.Utils.zipChunks", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#zipChunks[A,B,C](cl:zio.Chunk[A],cr:zio.Chunk[B],f:(A,B)=>C):(zio.Chunk[C],Either[zio.Chunk[A],zio.Chunk[B]])", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/experimental\/internal\/Utils$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/experimental\/internal\/Utils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "zio.test.environment" : [{"name" : "zio.test.environment.Live", "object" : "zio\/test\/environment\/Live$.html", "members_object" : [{"label" : "withLive", "tail" : "(zio: ZIO[R, E, A])(f: (IO[E, A]) => ZIO[zio.ZEnv, E1, B]): ZIO[R, E1, B]", "member" : "zio.test.environment.Live.withLive", "link" : "zio\/test\/environment\/Live$.html#withLive[R<:zio.Has[zio.test.environment.Live],E,E1,A,B](zio:zio.ZIO[R,E,A])(f:zio.IO[E,A]=>zio.ZIO[zio.ZEnv,E1,B]):zio.ZIO[R,E1,B]", "kind" : "def"}, {"label" : "live", "tail" : "(zio: ZIO[zio.ZEnv, E, A]): ZIO[Has[Live], E, A]", "member" : "zio.test.environment.Live.live", "link" : "zio\/test\/environment\/Live$.html#live[E,A](zio:zio.ZIO[zio.ZEnv,E,A]):zio.ZIO[zio.Has[zio.test.environment.Live],E,A]", "kind" : "def"}, {"label" : "default", "tail" : "(): ZLayer[zio.ZEnv, Nothing, Has[Live]]", "member" : "zio.test.environment.Live.default", "link" : "zio\/test\/environment\/Live$.html#default:zio.ZLayer[zio.ZEnv,Nothing,zio.Has[zio.test.environment.Live]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/environment\/Live$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/environment\/Live$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/environment\/Live$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/environment\/Live$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/environment\/Live$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/environment\/Live$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/environment\/Live$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/Live$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/Live$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/Live$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/environment\/Live$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/environment\/Live$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/environment\/Live$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/environment\/Live$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/environment\/Live$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/environment\/Live$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/environment\/Live$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/environment\/Live$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/environment\/Live$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/environment\/Live.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/environment\/Live.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/environment\/Live.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/environment\/Live.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/environment\/Live.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/environment\/Live.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/environment\/Live.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/environment\/Live.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/Live.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/Live.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/Live.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/environment\/Live.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/environment\/Live.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/environment\/Live.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/environment\/Live.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/environment\/Live.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/environment\/Live.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/environment\/Live.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/environment\/Live.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/environment\/Live.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "provide", "tail" : "(zio: ZIO[zio.ZEnv, E, A]): IO[E, A]", "member" : "zio.test.environment.Live.provide", "link" : "zio\/test\/environment\/Live.html#provide[E,A](zio:zio.ZIO[zio.ZEnv,E,A]):zio.IO[E,A]", "kind" : "abstract def"}], "shortDescription" : "The Live trait provides access to the \"live\" environment from within thetest environment for effects such as printing test results to the console ortiming out tests where it is necessary to access the real environment."}, {"name" : "zio.test.environment.Restorable", "trait" : "zio\/test\/environment\/Restorable.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/environment\/Restorable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/environment\/Restorable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/environment\/Restorable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/environment\/Restorable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/environment\/Restorable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/environment\/Restorable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/environment\/Restorable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/Restorable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/Restorable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/Restorable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/environment\/Restorable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/environment\/Restorable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/environment\/Restorable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/environment\/Restorable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/environment\/Restorable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/environment\/Restorable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/environment\/Restorable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/environment\/Restorable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/environment\/Restorable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "save", "tail" : ": UIO[UIO[Unit]]", "member" : "zio.test.environment.Restorable.save", "link" : "zio\/test\/environment\/Restorable.html#save:zio.UIO[zio.UIO[Unit]]", "kind" : "abstract val"}], "shortDescription" : ""}, {"name" : "zio.test.environment.TestClock", "object" : "zio\/test\/environment\/TestClock$.html", "members_object" : [{"label" : "SuspendedWarningData", "tail" : "", "member" : "zio.test.environment.TestClock.SuspendedWarningData", "link" : "zio\/test\/environment\/TestClock$.html#SuspendedWarningData", "kind" : "object"}, {"label" : "SuspendedWarningData", "tail" : "", "member" : "zio.test.environment.TestClock.SuspendedWarningData", "link" : "zio\/test\/environment\/TestClock$.html#SuspendedWarningDataextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "WarningData", "tail" : "", "member" : "zio.test.environment.TestClock.WarningData", "link" : "zio\/test\/environment\/TestClock$.html#WarningData", "kind" : "object"}, {"label" : "WarningData", "tail" : "", "member" : "zio.test.environment.TestClock.WarningData", "link" : "zio\/test\/environment\/TestClock$.html#WarningDataextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "Sleep", "tail" : "", "member" : "zio.test.environment.TestClock.Sleep", "link" : "zio\/test\/environment\/TestClock$.html#SleepextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "Data", "tail" : "", "member" : "zio.test.environment.TestClock.Data", "link" : "zio\/test\/environment\/TestClock$.html#DataextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "timeZone", "tail" : ": URIO[Has[TestClock], ZoneId]", "member" : "zio.test.environment.TestClock.timeZone", "link" : "zio\/test\/environment\/TestClock$.html#timeZone:zio.URIO[zio.Has[zio.test.environment.TestClock],java.time.ZoneId]", "kind" : "val"}, {"label" : "sleeps", "tail" : ": ZIO[Has[TestClock], Nothing, List[zio.Duration]]", "member" : "zio.test.environment.TestClock.sleeps", "link" : "zio\/test\/environment\/TestClock$.html#sleeps:zio.ZIO[zio.Has[zio.test.environment.TestClock],Nothing,List[zio.Duration]]", "kind" : "val"}, {"label" : "setTimeZone", "tail" : "(zone: => ZoneId): URIO[Has[TestClock], Unit]", "member" : "zio.test.environment.TestClock.setTimeZone", "link" : "zio\/test\/environment\/TestClock$.html#setTimeZone(zone:=>java.time.ZoneId):zio.URIO[zio.Has[zio.test.environment.TestClock],Unit]", "kind" : "def"}, {"label" : "setTime", "tail" : "(duration: => zio.Duration): URIO[Has[TestClock], Unit]", "member" : "zio.test.environment.TestClock.setTime", "link" : "zio\/test\/environment\/TestClock$.html#setTime(duration:=>zio.Duration):zio.URIO[zio.Has[zio.test.environment.TestClock],Unit]", "kind" : "def"}, {"label" : "setDateTime", "tail" : "(dateTime: => OffsetDateTime): URIO[Has[TestClock], Unit]", "member" : "zio.test.environment.TestClock.setDateTime", "link" : "zio\/test\/environment\/TestClock$.html#setDateTime(dateTime:=>java.time.OffsetDateTime):zio.URIO[zio.Has[zio.test.environment.TestClock],Unit]", "kind" : "def"}, {"label" : "save", "tail" : ": ZIO[Has[TestClock], Nothing, UIO[Unit]]", "member" : "zio.test.environment.TestClock.save", "link" : "zio\/test\/environment\/TestClock$.html#save:zio.ZIO[zio.Has[zio.test.environment.TestClock],Nothing,zio.UIO[Unit]]", "kind" : "val"}, {"label" : "adjust", "tail" : "(duration: => zio.Duration): URIO[Has[TestClock], Unit]", "member" : "zio.test.environment.TestClock.adjust", "link" : "zio\/test\/environment\/TestClock$.html#adjust(duration:=>zio.Duration):zio.URIO[zio.Has[zio.test.environment.TestClock],Unit]", "kind" : "def"}, {"label" : "default", "tail" : ": ZLayer[Has[Live] with Has[Annotations], Nothing, Has[Clock] with Has[TestClock]]", "member" : "zio.test.environment.TestClock.default", "link" : "zio\/test\/environment\/TestClock$.html#default:zio.ZLayer[zio.Has[zio.test.environment.Live]withzio.Has[zio.test.Annotations],Nothing,zio.Has[zio.Clock]withzio.Has[zio.test.environment.TestClock]]", "kind" : "val"}, {"label" : "any", "tail" : ": ZLayer[Has[Clock] with Has[TestClock], Nothing, Has[Clock] with Has[TestClock]]", "member" : "zio.test.environment.TestClock.any", "link" : "zio\/test\/environment\/TestClock$.html#any:zio.ZLayer[zio.Has[zio.Clock]withzio.Has[zio.test.environment.TestClock],Nothing,zio.Has[zio.Clock]withzio.Has[zio.test.environment.TestClock]]", "kind" : "val"}, {"label" : "live", "tail" : "(data: Data): ZLayer[Has[Annotations] with Has[Live], Nothing, Has[Clock] with Has[TestClock]]", "member" : "zio.test.environment.TestClock.live", "link" : "zio\/test\/environment\/TestClock$.html#live(data:zio.test.environment.TestClock.Data):zio.ZLayer[zio.Has[zio.test.Annotations]withzio.Has[zio.test.environment.Live],Nothing,zio.Has[zio.Clock]withzio.Has[zio.test.environment.TestClock]]", "kind" : "def"}, {"label" : "Test", "tail" : "", "member" : "zio.test.environment.TestClock.Test", "link" : "zio\/test\/environment\/TestClock$.html#TestextendsClockwithTestClockwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/environment\/TestClock$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/environment\/TestClock$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/environment\/TestClock$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/environment\/TestClock$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/environment\/TestClock$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/environment\/TestClock$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/environment\/TestClock$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestClock$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestClock$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestClock$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/environment\/TestClock$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/environment\/TestClock$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/environment\/TestClock$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/environment\/TestClock$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/environment\/TestClock$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/environment\/TestClock$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/environment\/TestClock$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/environment\/TestClock$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/environment\/TestClock$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/environment\/TestClock.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/environment\/TestClock.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/environment\/TestClock.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/environment\/TestClock.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/environment\/TestClock.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/environment\/TestClock.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/environment\/TestClock.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/environment\/TestClock.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestClock.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestClock.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestClock.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/environment\/TestClock.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/environment\/TestClock.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/environment\/TestClock.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/environment\/TestClock.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/environment\/TestClock.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/environment\/TestClock.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/environment\/TestClock.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/environment\/TestClock.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/environment\/TestClock.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "timeZone", "tail" : "(): UIO[ZoneId]", "member" : "zio.test.environment.TestClock.timeZone", "link" : "zio\/test\/environment\/TestClock.html#timeZone:zio.UIO[java.time.ZoneId]", "kind" : "abstract def"}, {"label" : "sleeps", "tail" : "(): UIO[List[zio.Duration]]", "member" : "zio.test.environment.TestClock.sleeps", "link" : "zio\/test\/environment\/TestClock.html#sleeps:zio.UIO[List[zio.Duration]]", "kind" : "abstract def"}, {"label" : "setTimeZone", "tail" : "(zone: ZoneId): UIO[Unit]", "member" : "zio.test.environment.TestClock.setTimeZone", "link" : "zio\/test\/environment\/TestClock.html#setTimeZone(zone:java.time.ZoneId):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "setTime", "tail" : "(duration: zio.Duration): UIO[Unit]", "member" : "zio.test.environment.TestClock.setTime", "link" : "zio\/test\/environment\/TestClock.html#setTime(duration:zio.Duration):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "setDateTime", "tail" : "(dateTime: OffsetDateTime): UIO[Unit]", "member" : "zio.test.environment.TestClock.setDateTime", "link" : "zio\/test\/environment\/TestClock.html#setDateTime(dateTime:java.time.OffsetDateTime):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "adjust", "tail" : "(duration: zio.Duration): UIO[Unit]", "member" : "zio.test.environment.TestClock.adjust", "link" : "zio\/test\/environment\/TestClock.html#adjust(duration:zio.Duration):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "save", "tail" : ": UIO[UIO[Unit]]", "member" : "zio.test.environment.Restorable.save", "link" : "zio\/test\/environment\/TestClock.html#save:zio.UIO[zio.UIO[Unit]]", "kind" : "abstract val"}], "shortDescription" : "TestClock makes it easy to deterministically and efficiently testeffects involving the passage of time."}, {"name" : "zio.test.environment.TestConsole", "object" : "zio\/test\/environment\/TestConsole$.html", "members_object" : [{"label" : "Data", "tail" : "", "member" : "zio.test.environment.TestConsole.Data", "link" : "zio\/test\/environment\/TestConsole$.html#DataextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "silent", "tail" : "(zio: ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.test.environment.TestConsole.silent", "link" : "zio\/test\/environment\/TestConsole$.html#silent[R<:zio.Has[zio.test.environment.TestConsole],E,A](zio:zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "save", "tail" : ": ZIO[Has[TestConsole], Nothing, UIO[Unit]]", "member" : "zio.test.environment.TestConsole.save", "link" : "zio\/test\/environment\/TestConsole$.html#save:zio.ZIO[zio.Has[zio.test.environment.TestConsole],Nothing,zio.UIO[Unit]]", "kind" : "val"}, {"label" : "outputErr", "tail" : ": ZIO[Has[TestConsole], Nothing, Vector[String]]", "member" : "zio.test.environment.TestConsole.outputErr", "link" : "zio\/test\/environment\/TestConsole$.html#outputErr:zio.ZIO[zio.Has[zio.test.environment.TestConsole],Nothing,Vector[String]]", "kind" : "val"}, {"label" : "output", "tail" : ": ZIO[Has[TestConsole], Nothing, Vector[String]]", "member" : "zio.test.environment.TestConsole.output", "link" : "zio\/test\/environment\/TestConsole$.html#output:zio.ZIO[zio.Has[zio.test.environment.TestConsole],Nothing,Vector[String]]", "kind" : "val"}, {"label" : "feedLines", "tail" : "(lines: String*): URIO[Has[TestConsole], Unit]", "member" : "zio.test.environment.TestConsole.feedLines", "link" : "zio\/test\/environment\/TestConsole$.html#feedLines(lines:String*):zio.URIO[zio.Has[zio.test.environment.TestConsole],Unit]", "kind" : "def"}, {"label" : "debug", "tail" : "(zio: ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.test.environment.TestConsole.debug", "link" : "zio\/test\/environment\/TestConsole$.html#debug[R<:zio.Has[zio.test.environment.TestConsole],E,A](zio:zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "clearOutput", "tail" : ": URIO[Has[TestConsole], Unit]", "member" : "zio.test.environment.TestConsole.clearOutput", "link" : "zio\/test\/environment\/TestConsole$.html#clearOutput:zio.URIO[zio.Has[zio.test.environment.TestConsole],Unit]", "kind" : "val"}, {"label" : "clearInput", "tail" : ": URIO[Has[TestConsole], Unit]", "member" : "zio.test.environment.TestConsole.clearInput", "link" : "zio\/test\/environment\/TestConsole$.html#clearInput:zio.URIO[zio.Has[zio.test.environment.TestConsole],Unit]", "kind" : "val"}, {"label" : "silent", "tail" : ": ZLayer[Has[Live], Nothing, Has[Console] with Has[TestConsole]]", "member" : "zio.test.environment.TestConsole.silent", "link" : "zio\/test\/environment\/TestConsole$.html#silent:zio.ZLayer[zio.Has[zio.test.environment.Live],Nothing,zio.Has[zio.Console]withzio.Has[zio.test.environment.TestConsole]]", "kind" : "val"}, {"label" : "debug", "tail" : ": ZLayer[Has[Live], Nothing, Has[Console] with Has[TestConsole]]", "member" : "zio.test.environment.TestConsole.debug", "link" : "zio\/test\/environment\/TestConsole$.html#debug:zio.ZLayer[zio.Has[zio.test.environment.Live],Nothing,zio.Has[zio.Console]withzio.Has[zio.test.environment.TestConsole]]", "kind" : "val"}, {"label" : "any", "tail" : ": ZLayer[Has[Console] with Has[TestConsole], Nothing, Has[Console] with Has[TestConsole]]", "member" : "zio.test.environment.TestConsole.any", "link" : "zio\/test\/environment\/TestConsole$.html#any:zio.ZLayer[zio.Has[zio.Console]withzio.Has[zio.test.environment.TestConsole],Nothing,zio.Has[zio.Console]withzio.Has[zio.test.environment.TestConsole]]", "kind" : "val"}, {"label" : "make", "tail" : "(data: Data, debug: Boolean): ZLayer[Has[Live], Nothing, Has[Console] with Has[TestConsole]]", "member" : "zio.test.environment.TestConsole.make", "link" : "zio\/test\/environment\/TestConsole$.html#make(data:zio.test.environment.TestConsole.Data,debug:Boolean):zio.ZLayer[zio.Has[zio.test.environment.Live],Nothing,zio.Has[zio.Console]withzio.Has[zio.test.environment.TestConsole]]", "kind" : "def"}, {"label" : "Test", "tail" : "", "member" : "zio.test.environment.TestConsole.Test", "link" : "zio\/test\/environment\/TestConsole$.html#TestextendsConsolewithTestConsolewithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/environment\/TestConsole$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/environment\/TestConsole$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/environment\/TestConsole$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/environment\/TestConsole$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/environment\/TestConsole$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/environment\/TestConsole$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/environment\/TestConsole$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestConsole$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestConsole$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestConsole$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/environment\/TestConsole$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/environment\/TestConsole$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/environment\/TestConsole$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/environment\/TestConsole$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/environment\/TestConsole$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/environment\/TestConsole$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/environment\/TestConsole$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/environment\/TestConsole$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/environment\/TestConsole$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/environment\/TestConsole.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/environment\/TestConsole.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/environment\/TestConsole.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/environment\/TestConsole.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/environment\/TestConsole.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/environment\/TestConsole.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/environment\/TestConsole.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/environment\/TestConsole.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestConsole.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestConsole.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestConsole.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/environment\/TestConsole.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/environment\/TestConsole.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/environment\/TestConsole.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/environment\/TestConsole.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/environment\/TestConsole.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/environment\/TestConsole.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/environment\/TestConsole.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/environment\/TestConsole.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/environment\/TestConsole.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "silent", "tail" : "(zio: ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.test.environment.TestConsole.silent", "link" : "zio\/test\/environment\/TestConsole.html#silent[R,E,A](zio:zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "abstract def"}, {"label" : "outputErr", "tail" : "(): UIO[Vector[String]]", "member" : "zio.test.environment.TestConsole.outputErr", "link" : "zio\/test\/environment\/TestConsole.html#outputErr:zio.UIO[Vector[String]]", "kind" : "abstract def"}, {"label" : "output", "tail" : "(): UIO[Vector[String]]", "member" : "zio.test.environment.TestConsole.output", "link" : "zio\/test\/environment\/TestConsole.html#output:zio.UIO[Vector[String]]", "kind" : "abstract def"}, {"label" : "feedLines", "tail" : "(lines: String*): UIO[Unit]", "member" : "zio.test.environment.TestConsole.feedLines", "link" : "zio\/test\/environment\/TestConsole.html#feedLines(lines:String*):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "debug", "tail" : "(zio: ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.test.environment.TestConsole.debug", "link" : "zio\/test\/environment\/TestConsole.html#debug[R,E,A](zio:zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "abstract def"}, {"label" : "clearOutput", "tail" : "(): UIO[Unit]", "member" : "zio.test.environment.TestConsole.clearOutput", "link" : "zio\/test\/environment\/TestConsole.html#clearOutput:zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "clearInput", "tail" : "(): UIO[Unit]", "member" : "zio.test.environment.TestConsole.clearInput", "link" : "zio\/test\/environment\/TestConsole.html#clearInput:zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "save", "tail" : ": UIO[UIO[Unit]]", "member" : "zio.test.environment.Restorable.save", "link" : "zio\/test\/environment\/TestConsole.html#save:zio.UIO[zio.UIO[Unit]]", "kind" : "abstract val"}], "shortDescription" : "TestConsole provides a testable interface for programs interacting withthe console by modeling input and output as reading from and writing toinput and output buffers maintained by TestConsole and backed by aRef."}, {"name" : "zio.test.environment.TestRandom", "object" : "zio\/test\/environment\/TestRandom$.html", "members_object" : [{"label" : "Buffer", "tail" : "", "member" : "zio.test.environment.TestRandom.Buffer", "link" : "zio\/test\/environment\/TestRandom$.html#BufferextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "setSeed", "tail" : "(seed: => Long): URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.setSeed", "link" : "zio\/test\/environment\/TestRandom$.html#setSeed(seed:=>Long):zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "def"}, {"label" : "save", "tail" : ": ZIO[Has[TestRandom], Nothing, UIO[Unit]]", "member" : "zio.test.environment.TestRandom.save", "link" : "zio\/test\/environment\/TestRandom$.html#save:zio.ZIO[zio.Has[zio.test.environment.TestRandom],Nothing,zio.UIO[Unit]]", "kind" : "val"}, {"label" : "makeTest", "tail" : "(data: Data): UIO[Test]", "member" : "zio.test.environment.TestRandom.makeTest", "link" : "zio\/test\/environment\/TestRandom$.html#makeTest(data:zio.test.environment.TestRandom.Data):zio.UIO[zio.test.environment.TestRandom.Test]", "kind" : "def"}, {"label" : "random", "tail" : ": ZLayer[Has[Clock], Nothing, Has[Random] with Has[TestRandom]]", "member" : "zio.test.environment.TestRandom.random", "link" : "zio\/test\/environment\/TestRandom$.html#random:zio.ZLayer[zio.Has[zio.Clock],Nothing,zio.Has[zio.Random]withzio.Has[zio.test.environment.TestRandom]]", "kind" : "val"}, {"label" : "deterministic", "tail" : ": Layer[Nothing, Has[Random] with Has[TestRandom]]", "member" : "zio.test.environment.TestRandom.deterministic", "link" : "zio\/test\/environment\/TestRandom$.html#deterministic:zio.Layer[Nothing,zio.Has[zio.Random]withzio.Has[zio.test.environment.TestRandom]]", "kind" : "val"}, {"label" : "any", "tail" : ": ZLayer[Has[Random] with Has[TestRandom], Nothing, Has[Random] with Has[TestRandom]]", "member" : "zio.test.environment.TestRandom.any", "link" : "zio\/test\/environment\/TestRandom$.html#any:zio.ZLayer[zio.Has[zio.Random]withzio.Has[zio.test.environment.TestRandom],Nothing,zio.Has[zio.Random]withzio.Has[zio.test.environment.TestRandom]]", "kind" : "val"}, {"label" : "make", "tail" : "(data: Data): Layer[Nothing, Has[Random] with Has[TestRandom]]", "member" : "zio.test.environment.TestRandom.make", "link" : "zio\/test\/environment\/TestRandom$.html#make(data:zio.test.environment.TestRandom.Data):zio.Layer[Nothing,zio.Has[zio.Random]withzio.Has[zio.test.environment.TestRandom]]", "kind" : "def"}, {"label" : "getSeed", "tail" : ": URIO[Has[TestRandom], Long]", "member" : "zio.test.environment.TestRandom.getSeed", "link" : "zio\/test\/environment\/TestRandom$.html#getSeed:zio.URIO[zio.Has[zio.test.environment.TestRandom],Long]", "kind" : "val"}, {"label" : "feedStrings", "tail" : "(strings: String*): URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.feedStrings", "link" : "zio\/test\/environment\/TestRandom$.html#feedStrings(strings:String*):zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "def"}, {"label" : "feedLongs", "tail" : "(longs: Long*): URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.feedLongs", "link" : "zio\/test\/environment\/TestRandom$.html#feedLongs(longs:Long*):zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "def"}, {"label" : "feedInts", "tail" : "(ints: Int*): URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.feedInts", "link" : "zio\/test\/environment\/TestRandom$.html#feedInts(ints:Int*):zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "def"}, {"label" : "feedFloats", "tail" : "(floats: Float*): URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.feedFloats", "link" : "zio\/test\/environment\/TestRandom$.html#feedFloats(floats:Float*):zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "def"}, {"label" : "feedDoubles", "tail" : "(doubles: Double*): URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.feedDoubles", "link" : "zio\/test\/environment\/TestRandom$.html#feedDoubles(doubles:Double*):zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "def"}, {"label" : "feedChars", "tail" : "(chars: Char*): URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.feedChars", "link" : "zio\/test\/environment\/TestRandom$.html#feedChars(chars:Char*):zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "def"}, {"label" : "feedBytes", "tail" : "(bytes: Chunk[Byte]*): URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.feedBytes", "link" : "zio\/test\/environment\/TestRandom$.html#feedBytes(bytes:zio.Chunk[Byte]*):zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "def"}, {"label" : "feedBooleans", "tail" : "(booleans: Boolean*): URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.feedBooleans", "link" : "zio\/test\/environment\/TestRandom$.html#feedBooleans(booleans:Boolean*):zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "def"}, {"label" : "clearStrings", "tail" : ": URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.clearStrings", "link" : "zio\/test\/environment\/TestRandom$.html#clearStrings:zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "val"}, {"label" : "clearLongs", "tail" : ": URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.clearLongs", "link" : "zio\/test\/environment\/TestRandom$.html#clearLongs:zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "val"}, {"label" : "clearInts", "tail" : ": URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.clearInts", "link" : "zio\/test\/environment\/TestRandom$.html#clearInts:zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "val"}, {"label" : "clearFloats", "tail" : ": URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.clearFloats", "link" : "zio\/test\/environment\/TestRandom$.html#clearFloats:zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "val"}, {"label" : "clearDoubles", "tail" : ": URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.clearDoubles", "link" : "zio\/test\/environment\/TestRandom$.html#clearDoubles:zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "val"}, {"label" : "clearChars", "tail" : ": URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.clearChars", "link" : "zio\/test\/environment\/TestRandom$.html#clearChars:zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "val"}, {"label" : "clearBytes", "tail" : ": URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.clearBytes", "link" : "zio\/test\/environment\/TestRandom$.html#clearBytes:zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "val"}, {"label" : "clearBooleans", "tail" : ": URIO[Has[TestRandom], Unit]", "member" : "zio.test.environment.TestRandom.clearBooleans", "link" : "zio\/test\/environment\/TestRandom$.html#clearBooleans:zio.URIO[zio.Has[zio.test.environment.TestRandom],Unit]", "kind" : "val"}, {"label" : "Data", "tail" : "", "member" : "zio.test.environment.TestRandom.Data", "link" : "zio\/test\/environment\/TestRandom$.html#DataextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "DefaultData", "tail" : ": Data", "member" : "zio.test.environment.TestRandom.DefaultData", "link" : "zio\/test\/environment\/TestRandom$.html#DefaultData:zio.test.environment.TestRandom.Data", "kind" : "val"}, {"label" : "Test", "tail" : "", "member" : "zio.test.environment.TestRandom.Test", "link" : "zio\/test\/environment\/TestRandom$.html#TestextendsRandomwithTestRandomwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/environment\/TestRandom$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/environment\/TestRandom$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/environment\/TestRandom$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/environment\/TestRandom$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/environment\/TestRandom$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/environment\/TestRandom$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/environment\/TestRandom$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestRandom$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestRandom$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestRandom$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/environment\/TestRandom$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/environment\/TestRandom$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/environment\/TestRandom$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/environment\/TestRandom$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/environment\/TestRandom$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/environment\/TestRandom$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/environment\/TestRandom$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/environment\/TestRandom$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/environment\/TestRandom$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/environment\/TestRandom.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/environment\/TestRandom.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/environment\/TestRandom.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/environment\/TestRandom.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/environment\/TestRandom.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/environment\/TestRandom.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/environment\/TestRandom.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/environment\/TestRandom.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestRandom.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestRandom.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestRandom.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/environment\/TestRandom.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/environment\/TestRandom.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/environment\/TestRandom.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/environment\/TestRandom.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/environment\/TestRandom.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/environment\/TestRandom.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/environment\/TestRandom.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/environment\/TestRandom.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/environment\/TestRandom.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "setSeed", "tail" : "(seed: => Long): UIO[Unit]", "member" : "zio.test.environment.TestRandom.setSeed", "link" : "zio\/test\/environment\/TestRandom.html#setSeed(seed:=>Long):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "getSeed", "tail" : "(): UIO[Long]", "member" : "zio.test.environment.TestRandom.getSeed", "link" : "zio\/test\/environment\/TestRandom.html#getSeed:zio.UIO[Long]", "kind" : "abstract def"}, {"label" : "feedStrings", "tail" : "(strings: String*): UIO[Unit]", "member" : "zio.test.environment.TestRandom.feedStrings", "link" : "zio\/test\/environment\/TestRandom.html#feedStrings(strings:String*):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "feedLongs", "tail" : "(longs: Long*): UIO[Unit]", "member" : "zio.test.environment.TestRandom.feedLongs", "link" : "zio\/test\/environment\/TestRandom.html#feedLongs(longs:Long*):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "feedInts", "tail" : "(ints: Int*): UIO[Unit]", "member" : "zio.test.environment.TestRandom.feedInts", "link" : "zio\/test\/environment\/TestRandom.html#feedInts(ints:Int*):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "feedFloats", "tail" : "(floats: Float*): UIO[Unit]", "member" : "zio.test.environment.TestRandom.feedFloats", "link" : "zio\/test\/environment\/TestRandom.html#feedFloats(floats:Float*):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "feedDoubles", "tail" : "(doubles: Double*): UIO[Unit]", "member" : "zio.test.environment.TestRandom.feedDoubles", "link" : "zio\/test\/environment\/TestRandom.html#feedDoubles(doubles:Double*):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "feedChars", "tail" : "(chars: Char*): UIO[Unit]", "member" : "zio.test.environment.TestRandom.feedChars", "link" : "zio\/test\/environment\/TestRandom.html#feedChars(chars:Char*):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "feedBytes", "tail" : "(bytes: Chunk[Byte]*): UIO[Unit]", "member" : "zio.test.environment.TestRandom.feedBytes", "link" : "zio\/test\/environment\/TestRandom.html#feedBytes(bytes:zio.Chunk[Byte]*):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "feedBooleans", "tail" : "(booleans: Boolean*): UIO[Unit]", "member" : "zio.test.environment.TestRandom.feedBooleans", "link" : "zio\/test\/environment\/TestRandom.html#feedBooleans(booleans:Boolean*):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "clearStrings", "tail" : "(): UIO[Unit]", "member" : "zio.test.environment.TestRandom.clearStrings", "link" : "zio\/test\/environment\/TestRandom.html#clearStrings:zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "clearLongs", "tail" : "(): UIO[Unit]", "member" : "zio.test.environment.TestRandom.clearLongs", "link" : "zio\/test\/environment\/TestRandom.html#clearLongs:zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "clearInts", "tail" : "(): UIO[Unit]", "member" : "zio.test.environment.TestRandom.clearInts", "link" : "zio\/test\/environment\/TestRandom.html#clearInts:zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "clearFloats", "tail" : "(): UIO[Unit]", "member" : "zio.test.environment.TestRandom.clearFloats", "link" : "zio\/test\/environment\/TestRandom.html#clearFloats:zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "clearDoubles", "tail" : "(): UIO[Unit]", "member" : "zio.test.environment.TestRandom.clearDoubles", "link" : "zio\/test\/environment\/TestRandom.html#clearDoubles:zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "clearChars", "tail" : "(): UIO[Unit]", "member" : "zio.test.environment.TestRandom.clearChars", "link" : "zio\/test\/environment\/TestRandom.html#clearChars:zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "clearBytes", "tail" : "(): UIO[Unit]", "member" : "zio.test.environment.TestRandom.clearBytes", "link" : "zio\/test\/environment\/TestRandom.html#clearBytes:zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "clearBooleans", "tail" : "(): UIO[Unit]", "member" : "zio.test.environment.TestRandom.clearBooleans", "link" : "zio\/test\/environment\/TestRandom.html#clearBooleans:zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "save", "tail" : ": UIO[UIO[Unit]]", "member" : "zio.test.environment.Restorable.save", "link" : "zio\/test\/environment\/TestRandom.html#save:zio.UIO[zio.UIO[Unit]]", "kind" : "abstract val"}], "shortDescription" : "TestRandom allows for deterministically testing effects involvingrandomness."}, {"name" : "zio.test.environment.TestSystem", "object" : "zio\/test\/environment\/TestSystem$.html", "members_object" : [{"label" : "Data", "tail" : "", "member" : "zio.test.environment.TestSystem.Data", "link" : "zio\/test\/environment\/TestSystem$.html#DataextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "clearProperty", "tail" : "(prop: => String): URIO[Has[TestSystem], Unit]", "member" : "zio.test.environment.TestSystem.clearProperty", "link" : "zio\/test\/environment\/TestSystem$.html#clearProperty(prop:=>String):zio.URIO[zio.Has[zio.test.environment.TestSystem],Unit]", "kind" : "def"}, {"label" : "clearEnv", "tail" : "(variable: => String): URIO[Has[TestSystem], Unit]", "member" : "zio.test.environment.TestSystem.clearEnv", "link" : "zio\/test\/environment\/TestSystem$.html#clearEnv(variable:=>String):zio.URIO[zio.Has[zio.test.environment.TestSystem],Unit]", "kind" : "def"}, {"label" : "setLineSeparator", "tail" : "(lineSep: => String): URIO[Has[TestSystem], Unit]", "member" : "zio.test.environment.TestSystem.setLineSeparator", "link" : "zio\/test\/environment\/TestSystem$.html#setLineSeparator(lineSep:=>String):zio.URIO[zio.Has[zio.test.environment.TestSystem],Unit]", "kind" : "def"}, {"label" : "save", "tail" : ": ZIO[Has[TestSystem], Nothing, UIO[Unit]]", "member" : "zio.test.environment.TestSystem.save", "link" : "zio\/test\/environment\/TestSystem$.html#save:zio.ZIO[zio.Has[zio.test.environment.TestSystem],Nothing,zio.UIO[Unit]]", "kind" : "val"}, {"label" : "putProperty", "tail" : "(name: => String, value: => String): URIO[Has[TestSystem], Unit]", "member" : "zio.test.environment.TestSystem.putProperty", "link" : "zio\/test\/environment\/TestSystem$.html#putProperty(name:=>String,value:=>String):zio.URIO[zio.Has[zio.test.environment.TestSystem],Unit]", "kind" : "def"}, {"label" : "putEnv", "tail" : "(name: => String, value: => String): URIO[Has[TestSystem], Unit]", "member" : "zio.test.environment.TestSystem.putEnv", "link" : "zio\/test\/environment\/TestSystem$.html#putEnv(name:=>String,value:=>String):zio.URIO[zio.Has[zio.test.environment.TestSystem],Unit]", "kind" : "def"}, {"label" : "default", "tail" : ": Layer[Nothing, Has[System] with Has[TestSystem]]", "member" : "zio.test.environment.TestSystem.default", "link" : "zio\/test\/environment\/TestSystem$.html#default:zio.Layer[Nothing,zio.Has[zio.System]withzio.Has[zio.test.environment.TestSystem]]", "kind" : "val"}, {"label" : "any", "tail" : ": ZLayer[Has[System] with Has[TestSystem], Nothing, Has[System] with Has[TestSystem]]", "member" : "zio.test.environment.TestSystem.any", "link" : "zio\/test\/environment\/TestSystem$.html#any:zio.ZLayer[zio.Has[zio.System]withzio.Has[zio.test.environment.TestSystem],Nothing,zio.Has[zio.System]withzio.Has[zio.test.environment.TestSystem]]", "kind" : "val"}, {"label" : "live", "tail" : "(data: Data): Layer[Nothing, Has[System] with Has[TestSystem]]", "member" : "zio.test.environment.TestSystem.live", "link" : "zio\/test\/environment\/TestSystem$.html#live(data:zio.test.environment.TestSystem.Data):zio.Layer[Nothing,zio.Has[zio.System]withzio.Has[zio.test.environment.TestSystem]]", "kind" : "def"}, {"label" : "DefaultData", "tail" : ": Data", "member" : "zio.test.environment.TestSystem.DefaultData", "link" : "zio\/test\/environment\/TestSystem$.html#DefaultData:zio.test.environment.TestSystem.Data", "kind" : "val"}, {"label" : "Test", "tail" : "", "member" : "zio.test.environment.TestSystem.Test", "link" : "zio\/test\/environment\/TestSystem$.html#TestextendsSystemwithTestSystemwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/environment\/TestSystem$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/environment\/TestSystem$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/environment\/TestSystem$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/environment\/TestSystem$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/environment\/TestSystem$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/environment\/TestSystem$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/environment\/TestSystem$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestSystem$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestSystem$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestSystem$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/environment\/TestSystem$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/environment\/TestSystem$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/environment\/TestSystem$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/environment\/TestSystem$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/environment\/TestSystem$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/environment\/TestSystem$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/environment\/TestSystem$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/environment\/TestSystem$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/environment\/TestSystem$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/environment\/TestSystem.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/environment\/TestSystem.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/environment\/TestSystem.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/environment\/TestSystem.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/environment\/TestSystem.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/environment\/TestSystem.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/environment\/TestSystem.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/environment\/TestSystem.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestSystem.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestSystem.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/environment\/TestSystem.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/environment\/TestSystem.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/environment\/TestSystem.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/environment\/TestSystem.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/environment\/TestSystem.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/environment\/TestSystem.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/environment\/TestSystem.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/environment\/TestSystem.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/environment\/TestSystem.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/environment\/TestSystem.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "clearProperty", "tail" : "(prop: String): UIO[Unit]", "member" : "zio.test.environment.TestSystem.clearProperty", "link" : "zio\/test\/environment\/TestSystem.html#clearProperty(prop:String):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "clearEnv", "tail" : "(variable: String): UIO[Unit]", "member" : "zio.test.environment.TestSystem.clearEnv", "link" : "zio\/test\/environment\/TestSystem.html#clearEnv(variable:String):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "setLineSeparator", "tail" : "(lineSep: String): UIO[Unit]", "member" : "zio.test.environment.TestSystem.setLineSeparator", "link" : "zio\/test\/environment\/TestSystem.html#setLineSeparator(lineSep:String):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "putProperty", "tail" : "(name: String, value: String): UIO[Unit]", "member" : "zio.test.environment.TestSystem.putProperty", "link" : "zio\/test\/environment\/TestSystem.html#putProperty(name:String,value:String):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "putEnv", "tail" : "(name: String, value: String): UIO[Unit]", "member" : "zio.test.environment.TestSystem.putEnv", "link" : "zio\/test\/environment\/TestSystem.html#putEnv(name:String,value:String):zio.UIO[Unit]", "kind" : "abstract def"}, {"label" : "save", "tail" : ": UIO[UIO[Unit]]", "member" : "zio.test.environment.Restorable.save", "link" : "zio\/test\/environment\/TestSystem.html#save:zio.UIO[zio.UIO[Unit]]", "kind" : "abstract val"}], "shortDescription" : "TestSystem supports deterministic testing of effects involving systemproperties."}], "zio.stream" : [{"name" : "zio.stream.BuildInfo", "case object" : "zio\/stream\/BuildInfo$.html", "shortDescription" : "This object was generated by sbt-buildinfo.", "members_case object" : [{"label" : "toString", "tail" : ": String", "member" : "zio.stream.BuildInfo.toString", "link" : "zio\/stream\/BuildInfo$.html#toString:String", "kind" : "val"}, {"label" : "isSnapshot", "tail" : ": Boolean", "member" : "zio.stream.BuildInfo.isSnapshot", "link" : "zio\/stream\/BuildInfo$.html#isSnapshot:Boolean", "kind" : "val"}, {"label" : "sbtVersion", "tail" : ": String", "member" : "zio.stream.BuildInfo.sbtVersion", "link" : "zio\/stream\/BuildInfo$.html#sbtVersion:String", "kind" : "val"}, {"label" : "scalaVersion", "tail" : ": String", "member" : "zio.stream.BuildInfo.scalaVersion", "link" : "zio\/stream\/BuildInfo$.html#scalaVersion:String", "kind" : "val"}, {"label" : "version", "tail" : ": String", "member" : "zio.stream.BuildInfo.version", "link" : "zio\/stream\/BuildInfo$.html#version:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "zio.stream.BuildInfo.name", "link" : "zio\/stream\/BuildInfo$.html#name:String", "kind" : "val"}, {"label" : "moduleName", "tail" : ": String", "member" : "zio.stream.BuildInfo.moduleName", "link" : "zio\/stream\/BuildInfo$.html#moduleName:String", "kind" : "val"}, {"label" : "organization", "tail" : ": String", "member" : "zio.stream.BuildInfo.organization", "link" : "zio\/stream\/BuildInfo$.html#organization:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/stream\/BuildInfo$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "zio\/stream\/BuildInfo$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/BuildInfo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/BuildInfo$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/BuildInfo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/BuildInfo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/BuildInfo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/BuildInfo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/BuildInfo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/BuildInfo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/BuildInfo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/BuildInfo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/BuildInfo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/BuildInfo$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/BuildInfo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/BuildInfo$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/BuildInfo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/BuildInfo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/BuildInfo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}, {"name" : "zio.stream.SubscriptionRef", "shortDescription" : "A SubscriptionRef[A] contains a Ref.Synchronized with a value of typeA and a ZStream that can be subscribed to in order to receive thecurrent value as well as all changes to the value.", "object" : "zio\/stream\/SubscriptionRef$.html", "members_class" : [{"label" : "changes", "tail" : ": Stream[Nothing, A]", "member" : "zio.stream.SubscriptionRef.changes", "link" : "zio\/stream\/SubscriptionRef.html#changes:zio.stream.Stream[Nothing,A]", "kind" : "val"}, {"label" : "ref", "tail" : ": Synchronized[Any, Any, Nothing, Nothing, A, A]", "member" : "zio.stream.SubscriptionRef.ref", "link" : "zio\/stream\/SubscriptionRef.html#ref:zio.ZRef.Synchronized[Any,Any,Nothing,Nothing,A,A]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/SubscriptionRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/SubscriptionRef.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/SubscriptionRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/SubscriptionRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/SubscriptionRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/SubscriptionRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/SubscriptionRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/SubscriptionRef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/SubscriptionRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/SubscriptionRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/SubscriptionRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/SubscriptionRef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/SubscriptionRef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/SubscriptionRef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/SubscriptionRef.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/SubscriptionRef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/SubscriptionRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/SubscriptionRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/SubscriptionRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "make", "tail" : "(a: A): UIO[SubscriptionRef[A]]", "member" : "zio.stream.SubscriptionRef.make", "link" : "zio\/stream\/SubscriptionRef$.html#make[A](a:A):zio.UIO[zio.stream.SubscriptionRef[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/SubscriptionRef$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/SubscriptionRef$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/SubscriptionRef$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/SubscriptionRef$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/SubscriptionRef$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/SubscriptionRef$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/SubscriptionRef$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/SubscriptionRef$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/SubscriptionRef$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/SubscriptionRef$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/SubscriptionRef$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/SubscriptionRef$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/SubscriptionRef$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/SubscriptionRef$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/SubscriptionRef$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/SubscriptionRef$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/SubscriptionRef$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/SubscriptionRef$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/SubscriptionRef$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stream\/SubscriptionRef.html", "kind" : "class"}, {"name" : "zio.stream.Take", "shortDescription" : "A Take[E, A] represents a single take from a queue modeling a stream ofvalues.", "object" : "zio\/stream\/Take$.html", "members_object" : [{"label" : "end", "tail" : ": Take[Nothing, Nothing]", "member" : "zio.stream.Take.end", "link" : "zio\/stream\/Take$.html#end:zio.stream.Take[Nothing,Nothing]", "kind" : "val"}, {"label" : "done", "tail" : "(exit: Exit[E, A]): Take[E, A]", "member" : "zio.stream.Take.done", "link" : "zio\/stream\/Take$.html#done[E,A](exit:zio.Exit[E,A]):zio.stream.Take[E,A]", "kind" : "def"}, {"label" : "dieMessage", "tail" : "(msg: String): Take[Nothing, Nothing]", "member" : "zio.stream.Take.dieMessage", "link" : "zio\/stream\/Take$.html#dieMessage(msg:String):zio.stream.Take[Nothing,Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(t: Throwable): Take[Nothing, Nothing]", "member" : "zio.stream.Take.die", "link" : "zio\/stream\/Take$.html#die(t:Throwable):zio.stream.Take[Nothing,Nothing]", "kind" : "def"}, {"label" : "halt", "tail" : "(c: Cause[E]): Take[E, Nothing]", "member" : "zio.stream.Take.halt", "link" : "zio\/stream\/Take$.html#halt[E](c:zio.Cause[E]):zio.stream.Take[E,Nothing]", "kind" : "def"}, {"label" : "fromZIO", "tail" : "(zio: ZIO[R, E, A]): URIO[R, Take[E, A]]", "member" : "zio.stream.Take.fromZIO", "link" : "zio\/stream\/Take$.html#fromZIO[R,E,A](zio:zio.ZIO[R,E,A]):zio.URIO[R,zio.stream.Take[E,A]]", "kind" : "def"}, {"label" : "fromPull", "tail" : "(pull: Pull[R, E, A]): URIO[R, Take[E, A]]", "member" : "zio.stream.Take.fromPull", "link" : "zio\/stream\/Take$.html#fromPull[R,E,A](pull:zio.stream.ZStream.Pull[R,E,A]):zio.URIO[R,zio.stream.Take[E,A]]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(zio: ZIO[R, E, A]): URIO[R, Take[E, A]]", "member" : "zio.stream.Take.fromEffect", "link" : "zio\/stream\/Take$.html#fromEffect[R,E,A](zio:zio.ZIO[R,E,A]):zio.URIO[R,zio.stream.Take[E,A]]", "kind" : "def"}, {"label" : "failCause", "tail" : "(c: Cause[E]): Take[E, Nothing]", "member" : "zio.stream.Take.failCause", "link" : "zio\/stream\/Take$.html#failCause[E](c:zio.Cause[E]):zio.stream.Take[E,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: E): Take[E, Nothing]", "member" : "zio.stream.Take.fail", "link" : "zio\/stream\/Take$.html#fail[E](e:E):zio.stream.Take[E,Nothing]", "kind" : "def"}, {"label" : "chunk", "tail" : "(as: Chunk[A]): Take[Nothing, A]", "member" : "zio.stream.Take.chunk", "link" : "zio\/stream\/Take$.html#chunk[A](as:zio.Chunk[A]):zio.stream.Take[Nothing,A]", "kind" : "def"}, {"label" : "single", "tail" : "(a: A): Take[Nothing, A]", "member" : "zio.stream.Take.single", "link" : "zio\/stream\/Take$.html#single[A](a:A):zio.stream.Take[Nothing,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/Take$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/Take$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/Take$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/Take$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/Take$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/Take$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/Take$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/Take$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/Take$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/Take$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/Take$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/Take$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/Take$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/Take$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/Take$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/Take$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/Take$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/Take$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/Take$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "tap", "tail" : "(f: (Chunk[A]) => ZIO[R, E1, Any]): ZIO[R, E1, Unit]", "member" : "zio.stream.Take.tap", "link" : "zio\/stream\/Take.html#tap[R,E1](f:zio.Chunk[A]=>zio.ZIO[R,E1,Any]):zio.ZIO[R,E1,Unit]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): Take[E, B]", "member" : "zio.stream.Take.map", "link" : "zio\/stream\/Take.html#map[B](f:A=>B):zio.stream.Take[E,B]", "kind" : "def"}, {"label" : "isSuccess", "tail" : "(): Boolean", "member" : "zio.stream.Take.isSuccess", "link" : "zio\/stream\/Take.html#isSuccess:Boolean", "kind" : "def"}, {"label" : "isFailure", "tail" : "(): Boolean", "member" : "zio.stream.Take.isFailure", "link" : "zio\/stream\/Take.html#isFailure:Boolean", "kind" : "def"}, {"label" : "isDone", "tail" : "(): Boolean", "member" : "zio.stream.Take.isDone", "link" : "zio\/stream\/Take.html#isDone:Boolean", "kind" : "def"}, {"label" : "foldZIO", "tail" : "(end: => ZIO[R, E1, Z], error: (Cause[E]) => ZIO[R, E1, Z], value: (Chunk[A]) => ZIO[R, E1, Z]): ZIO[R, E1, Z]", "member" : "zio.stream.Take.foldZIO", "link" : "zio\/stream\/Take.html#foldZIO[R,E1,Z](end:=>zio.ZIO[R,E1,Z],error:zio.Cause[E]=>zio.ZIO[R,E1,Z],value:zio.Chunk[A]=>zio.ZIO[R,E1,Z]):zio.ZIO[R,E1,Z]", "kind" : "def"}, {"label" : "foldM", "tail" : "(end: => ZIO[R, E1, Z], error: (Cause[E]) => ZIO[R, E1, Z], value: (Chunk[A]) => ZIO[R, E1, Z]): ZIO[R, E1, Z]", "member" : "zio.stream.Take.foldM", "link" : "zio\/stream\/Take.html#foldM[R,E1,Z](end:=>zio.ZIO[R,E1,Z],error:zio.Cause[E]=>zio.ZIO[R,E1,Z],value:zio.Chunk[A]=>zio.ZIO[R,E1,Z]):zio.ZIO[R,E1,Z]", "kind" : "def"}, {"label" : "fold", "tail" : "(end: => Z, error: (Cause[E]) => Z, value: (Chunk[A]) => Z): Z", "member" : "zio.stream.Take.fold", "link" : "zio\/stream\/Take.html#fold[Z](end:=>Z,error:zio.Cause[E]=>Z,value:zio.Chunk[A]=>Z):Z", "kind" : "def"}, {"label" : "done", "tail" : "(): ZIO[R, Option[E], Chunk[A]]", "member" : "zio.stream.Take.done", "link" : "zio\/stream\/Take.html#done[R]:zio.ZIO[R,Option[E],zio.Chunk[A]]", "kind" : "def"}, {"member" : "zio.stream.Take#<init>", "error" : "unsupported entity"}, {"label" : "exit", "tail" : ": Exit[Option[E], Chunk[A]]", "member" : "zio.stream.Take.exit", "link" : "zio\/stream\/Take.html#exit:zio.Exit[Option[E],zio.Chunk[A]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/stream\/Take.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "zio\/stream\/Take.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "zio\/stream\/Take.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/Take.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/Take.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "zio\/stream\/Take.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "zio\/stream\/Take.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "zio\/stream\/Take.html", "kind" : "case class"}, {"name" : "zio.stream.ZSink", "shortDescription" : "", "object" : "zio\/stream\/ZSink$.html", "members_class" : [{"label" : "provide", "tail" : "(r: R)(ev: NeedsEnv[R]): ZSink[Any, E, I, L, Z]", "member" : "zio.stream.ZSink.provide", "link" : "zio\/stream\/ZSink.html#provide(r:R)(implicitev:zio.NeedsEnv[R]):zio.stream.ZSink[Any,E,I,L,Z]", "kind" : "def"}, {"label" : "untilOutputZIO", "tail" : "(f: (Z) => ZIO[R1, E1, Boolean])(ev: <:<[L, I]): ZSink[R1, E1, I, L, Option[Z]]", "member" : "zio.stream.ZSink.untilOutputZIO", "link" : "zio\/stream\/ZSink.html#untilOutputZIO[R1<:R,E1>:E](f:Z=>zio.ZIO[R1,E1,Boolean])(implicitev:L<:<I):zio.stream.ZSink[R1,E1,I,L,Option[Z]]", "kind" : "def"}, {"label" : "untilOutputM", "tail" : "(f: (Z) => ZIO[R1, E1, Boolean])(ev: <:<[L, I]): ZSink[R1, E1, I, L, Option[Z]]", "member" : "zio.stream.ZSink.untilOutputM", "link" : "zio\/stream\/ZSink.html#untilOutputM[R1<:R,E1>:E](f:Z=>zio.ZIO[R1,E1,Boolean])(implicitev:L<:<I):zio.stream.ZSink[R1,E1,I,L,Option[Z]]", "kind" : "def"}, {"label" : "dropLeftover", "tail" : "(): ZSink[R, E, I, Nothing, Z]", "member" : "zio.stream.ZSink.dropLeftover", "link" : "zio\/stream\/ZSink.html#dropLeftover:zio.stream.ZSink[R,E,I,Nothing,Z]", "kind" : "def"}, {"label" : "exposeLeftover", "tail" : "(): ZSink[R, E, I, Nothing, (Z, Chunk[L])]", "member" : "zio.stream.ZSink.exposeLeftover", "link" : "zio\/stream\/ZSink.html#exposeLeftover:zio.stream.ZSink[R,E,I,Nothing,(Z,zio.Chunk[L])]", "kind" : "def"}, {"label" : "zipWithPar", "tail" : "(that: ZSink[R1, E1, I1, L1, Z1])(f: (Z, Z1) => Z2): ZSink[R1, E1, I1, L1, Z2]", "member" : "zio.stream.ZSink.zipWithPar", "link" : "zio\/stream\/ZSink.html#zipWithPar[R1<:R,E1>:E,I1<:I,L1>:L,Z1,Z2](that:zio.stream.ZSink[R1,E1,I1,L1,Z1])(f:(Z,Z1)=>Z2):zio.stream.ZSink[R1,E1,I1,L1,Z2]", "kind" : "final def"}, {"label" : "zipWith", "tail" : "(that: ZSink[R1, E1, I1, L1, Z1])(f: (Z, Z1) => Z2)(ev: <:<[L, I1]): ZSink[R1, E1, I1, L1, Z2]", "member" : "zio.stream.ZSink.zipWith", "link" : "zio\/stream\/ZSink.html#zipWith[R1<:R,E1>:E,I1<:I,L1>:L,Z1,Z2](that:zio.stream.ZSink[R1,E1,I1,L1,Z1])(f:(Z,Z1)=>Z2)(implicitev:L<:<I1):zio.stream.ZSink[R1,E1,I1,L1,Z2]", "kind" : "final def"}, {"label" : "zipRight", "tail" : "(that: ZSink[R1, E1, I1, L1, Z1])(ev: <:<[L, I1]): ZSink[R1, E1, I1, L1, Z1]", "member" : "zio.stream.ZSink.zipRight", "link" : "zio\/stream\/ZSink.html#zipRight[R1<:R,E1>:E,I1<:I,L1>:L,Z1,Z2](that:zio.stream.ZSink[R1,E1,I1,L1,Z1])(implicitev:L<:<I1):zio.stream.ZSink[R1,E1,I1,L1,Z1]", "kind" : "final def"}, {"label" : "zipParRight", "tail" : "(that: ZSink[R1, E1, I1, L1, Z1]): ZSink[R1, E1, I1, L1, Z1]", "member" : "zio.stream.ZSink.zipParRight", "link" : "zio\/stream\/ZSink.html#zipParRight[R1<:R,E1>:E,I1<:I,Z1,L1>:L](that:zio.stream.ZSink[R1,E1,I1,L1,Z1]):zio.stream.ZSink[R1,E1,I1,L1,Z1]", "kind" : "final def"}, {"label" : "zipParLeft", "tail" : "(that: ZSink[R1, E1, I1, L1, Any]): ZSink[R1, E1, I1, L1, Z]", "member" : "zio.stream.ZSink.zipParLeft", "link" : "zio\/stream\/ZSink.html#zipParLeft[R1<:R,E1>:E,I1<:I,L1>:L](that:zio.stream.ZSink[R1,E1,I1,L1,Any]):zio.stream.ZSink[R1,E1,I1,L1,Z]", "kind" : "final def"}, {"label" : "zipPar", "tail" : "(that: ZSink[R1, E1, I1, L1, Z1])(zippable: Zippable[Z, Z1]): ZSink[R1, E1, I1, L1, Out]", "member" : "zio.stream.ZSink.zipPar", "link" : "zio\/stream\/ZSink.html#zipPar[R1<:R,E1>:E,I1<:I,L1>:L,Z1](that:zio.stream.ZSink[R1,E1,I1,L1,Z1])(implicitzippable:zio.Zippable[Z,Z1]):zio.stream.ZSink[R1,E1,I1,L1,zippable.Out]", "kind" : "final def"}, {"label" : "zipLeft", "tail" : "(that: ZSink[R1, E1, I1, L1, Z1])(ev: <:<[L, I1]): ZSink[R1, E1, I1, L1, Z]", "member" : "zio.stream.ZSink.zipLeft", "link" : "zio\/stream\/ZSink.html#zipLeft[R1<:R,E1>:E,I1<:I,L1>:L,Z1,Z2](that:zio.stream.ZSink[R1,E1,I1,L1,Z1])(implicitev:L<:<I1):zio.stream.ZSink[R1,E1,I1,L1,Z]", "kind" : "final def"}, {"label" : "zip", "tail" : "(that: ZSink[R1, E1, I1, L1, Z1])(zippable: Zippable[Z, Z1], ev: <:<[L, I1]): ZSink[R1, E1, I1, L1, Out]", "member" : "zio.stream.ZSink.zip", "link" : "zio\/stream\/ZSink.html#zip[R1<:R,E1>:E,I1<:I,L1>:L,Z1,Z2](that:zio.stream.ZSink[R1,E1,I1,L1,Z1])(implicitzippable:zio.Zippable[Z,Z1],implicitev:L<:<I1):zio.stream.ZSink[R1,E1,I1,L1,zippable.Out]", "kind" : "final def"}, {"label" : "toTransducer", "tail" : "(ev: <:<[L, I]): ZTransducer[R, E, I, Z]", "member" : "zio.stream.ZSink.toTransducer", "link" : "zio\/stream\/ZSink.html#toTransducer(implicitev:L<:<I):zio.stream.ZTransducer[R,E,I,Z]", "kind" : "def"}, {"label" : "timed", "tail" : "(): ZSink[R with Has[Clock], E, I, L, (Z, zio.Duration)]", "member" : "zio.stream.ZSink.timed", "link" : "zio\/stream\/ZSink.html#timed:zio.stream.ZSink[Rwithzio.Has[zio.Clock],E,I,L,(Z,zio.Duration)]", "kind" : "final def"}, {"label" : "raceBoth", "tail" : "(that: ZSink[R1, E1, I1, L1, Z1]): ZSink[R1, E1, I1, L1, Either[Z, Z1]]", "member" : "zio.stream.ZSink.raceBoth", "link" : "zio\/stream\/ZSink.html#raceBoth[R1<:R,E1>:E,I1<:I,L1>:L,Z1](that:zio.stream.ZSink[R1,E1,I1,L1,Z1]):zio.stream.ZSink[R1,E1,I1,L1,Either[Z,Z1]]", "kind" : "final def"}, {"label" : "race", "tail" : "(that: ZSink[R1, E1, I1, L1, Z1]): ZSink[R1, E1, I1, L1, Z1]", "member" : "zio.stream.ZSink.race", "link" : "zio\/stream\/ZSink.html#race[R1<:R,E1>:E,A0,I1<:I,L1>:L,Z1>:Z](that:zio.stream.ZSink[R1,E1,I1,L1,Z1]):zio.stream.ZSink[R1,E1,I1,L1,Z1]", "kind" : "final def"}, {"label" : "mapZIO", "tail" : "(f: (Z) => ZIO[R1, E1, Z2]): ZSink[R1, E1, I, L, Z2]", "member" : "zio.stream.ZSink.mapZIO", "link" : "zio\/stream\/ZSink.html#mapZIO[R1<:R,E1>:E,Z2](f:Z=>zio.ZIO[R1,E1,Z2]):zio.stream.ZSink[R1,E1,I,L,Z2]", "kind" : "def"}, {"label" : "mapM", "tail" : "(f: (Z) => ZIO[R1, E1, Z2]): ZSink[R1, E1, I, L, Z2]", "member" : "zio.stream.ZSink.mapM", "link" : "zio\/stream\/ZSink.html#mapM[R1<:R,E1>:E,Z2](f:Z=>zio.ZIO[R1,E1,Z2]):zio.stream.ZSink[R1,E1,I,L,Z2]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (E) => E2): ZSink[R, E2, I, L, Z]", "member" : "zio.stream.ZSink.mapError", "link" : "zio\/stream\/ZSink.html#mapError[E2](f:E=>E2):zio.stream.ZSink[R,E2,I,L,Z]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Z) => Z2): ZSink[R, E, I, L, Z2]", "member" : "zio.stream.ZSink.map", "link" : "zio\/stream\/ZSink.html#map[Z2](f:Z=>Z2):zio.stream.ZSink[R,E,I,L,Z2]", "kind" : "def"}, {"label" : "foldSink", "tail" : "(failure: (E) => ZSink[R1, E2, I2, L2, Z2], success: (Z) => ZSink[R1, E2, I2, L2, Z2])(ev: <:<[L, I2]): ZSink[R1, E2, I2, L2, Z2]", "member" : "zio.stream.ZSink.foldSink", "link" : "zio\/stream\/ZSink.html#foldSink[R1<:R,E2,I2<:I,L2,Z2](failure:E=>zio.stream.ZSink[R1,E2,I2,L2,Z2],success:Z=>zio.stream.ZSink[R1,E2,I2,L2,Z2])(implicitev:L<:<I2):zio.stream.ZSink[R1,E2,I2,L2,Z2]", "kind" : "def"}, {"label" : "foldM", "tail" : "(failure: (E) => ZSink[R1, E2, I2, L2, Z2], success: (Z) => ZSink[R1, E2, I2, L2, Z2])(ev: <:<[L, I2]): ZSink[R1, E2, I2, L2, Z2]", "member" : "zio.stream.ZSink.foldM", "link" : "zio\/stream\/ZSink.html#foldM[R1<:R,E2,I2<:I,L2,Z2](failure:E=>zio.stream.ZSink[R1,E2,I2,L2,Z2],success:Z=>zio.stream.ZSink[R1,E2,I2,L2,Z2])(implicitev:L<:<I2):zio.stream.ZSink[R1,E2,I2,L2,Z2]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Z) => ZSink[R1, E1, I2, L2, Z2])(ev: <:<[L, I2]): ZSink[R1, E1, I2, L2, Z2]", "member" : "zio.stream.ZSink.flatMap", "link" : "zio\/stream\/ZSink.html#flatMap[R1<:R,E1>:E,I2<:I,L2,Z2](f:Z=>zio.stream.ZSink[R1,E1,I2,L2,Z2])(implicitev:L<:<I2):zio.stream.ZSink[R1,E1,I2,L2,Z2]", "kind" : "def"}, {"label" : "dimapZIO", "tail" : "(f: (I2) => ZIO[R1, E1, I], g: (Z) => ZIO[R1, E1, Z2]): ZSink[R1, E1, I2, L, Z2]", "member" : "zio.stream.ZSink.dimapZIO", "link" : "zio\/stream\/ZSink.html#dimapZIO[R1<:R,E1>:E,I2,Z2](f:I2=>zio.ZIO[R1,E1,I],g:Z=>zio.ZIO[R1,E1,Z2]):zio.stream.ZSink[R1,E1,I2,L,Z2]", "kind" : "def"}, {"label" : "dimapM", "tail" : "(f: (I2) => ZIO[R1, E1, I], g: (Z) => ZIO[R1, E1, Z2]): ZSink[R1, E1, I2, L, Z2]", "member" : "zio.stream.ZSink.dimapM", "link" : "zio\/stream\/ZSink.html#dimapM[R1<:R,E1>:E,I2,Z2](f:I2=>zio.ZIO[R1,E1,I],g:Z=>zio.ZIO[R1,E1,Z2]):zio.stream.ZSink[R1,E1,I2,L,Z2]", "kind" : "def"}, {"label" : "dimapChunksZIO", "tail" : "(f: (Chunk[I2]) => ZIO[R1, E1, Chunk[I]], g: (Z) => ZIO[R1, E1, Z2]): ZSink[R1, E1, I2, L, Z2]", "member" : "zio.stream.ZSink.dimapChunksZIO", "link" : "zio\/stream\/ZSink.html#dimapChunksZIO[R1<:R,E1>:E,I2,Z2](f:zio.Chunk[I2]=>zio.ZIO[R1,E1,zio.Chunk[I]],g:Z=>zio.ZIO[R1,E1,Z2]):zio.stream.ZSink[R1,E1,I2,L,Z2]", "kind" : "def"}, {"label" : "dimapChunksM", "tail" : "(f: (Chunk[I2]) => ZIO[R1, E1, Chunk[I]], g: (Z) => ZIO[R1, E1, Z2]): ZSink[R1, E1, I2, L, Z2]", "member" : "zio.stream.ZSink.dimapChunksM", "link" : "zio\/stream\/ZSink.html#dimapChunksM[R1<:R,E1>:E,I2,Z2](f:zio.Chunk[I2]=>zio.ZIO[R1,E1,zio.Chunk[I]],g:Z=>zio.ZIO[R1,E1,Z2]):zio.stream.ZSink[R1,E1,I2,L,Z2]", "kind" : "def"}, {"label" : "dimapChunks", "tail" : "(f: (Chunk[I2]) => Chunk[I], g: (Z) => Z2): ZSink[R, E, I2, L, Z2]", "member" : "zio.stream.ZSink.dimapChunks", "link" : "zio\/stream\/ZSink.html#dimapChunks[I2,Z2](f:zio.Chunk[I2]=>zio.Chunk[I],g:Z=>Z2):zio.stream.ZSink[R,E,I2,L,Z2]", "kind" : "def"}, {"label" : "dimap", "tail" : "(f: (I2) => I, g: (Z) => Z2): ZSink[R, E, I2, L, Z2]", "member" : "zio.stream.ZSink.dimap", "link" : "zio\/stream\/ZSink.html#dimap[I2,Z2](f:I2=>I,g:Z=>Z2):zio.stream.ZSink[R,E,I2,L,Z2]", "kind" : "def"}, {"label" : "contramapZIO", "tail" : "(f: (I2) => ZIO[R1, E1, I]): ZSink[R1, E1, I2, L, Z]", "member" : "zio.stream.ZSink.contramapZIO", "link" : "zio\/stream\/ZSink.html#contramapZIO[R1<:R,E1>:E,I2](f:I2=>zio.ZIO[R1,E1,I]):zio.stream.ZSink[R1,E1,I2,L,Z]", "kind" : "def"}, {"label" : "contramapM", "tail" : "(f: (I2) => ZIO[R1, E1, I]): ZSink[R1, E1, I2, L, Z]", "member" : "zio.stream.ZSink.contramapM", "link" : "zio\/stream\/ZSink.html#contramapM[R1<:R,E1>:E,I2](f:I2=>zio.ZIO[R1,E1,I]):zio.stream.ZSink[R1,E1,I2,L,Z]", "kind" : "def"}, {"label" : "contramapChunksZIO", "tail" : "(f: (Chunk[I2]) => ZIO[R1, E1, Chunk[I]]): ZSink[R1, E1, I2, L, Z]", "member" : "zio.stream.ZSink.contramapChunksZIO", "link" : "zio\/stream\/ZSink.html#contramapChunksZIO[R1<:R,E1>:E,I2](f:zio.Chunk[I2]=>zio.ZIO[R1,E1,zio.Chunk[I]]):zio.stream.ZSink[R1,E1,I2,L,Z]", "kind" : "def"}, {"label" : "contramapChunksM", "tail" : "(f: (Chunk[I2]) => ZIO[R1, E1, Chunk[I]]): ZSink[R1, E1, I2, L, Z]", "member" : "zio.stream.ZSink.contramapChunksM", "link" : "zio\/stream\/ZSink.html#contramapChunksM[R1<:R,E1>:E,I2](f:zio.Chunk[I2]=>zio.ZIO[R1,E1,zio.Chunk[I]]):zio.stream.ZSink[R1,E1,I2,L,Z]", "kind" : "def"}, {"label" : "contramapChunks", "tail" : "(f: (Chunk[I2]) => Chunk[I]): ZSink[R, E, I2, L, Z]", "member" : "zio.stream.ZSink.contramapChunks", "link" : "zio\/stream\/ZSink.html#contramapChunks[I2](f:zio.Chunk[I2]=>zio.Chunk[I]):zio.stream.ZSink[R,E,I2,L,Z]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (I2) => I): ZSink[R, E, I2, L, Z]", "member" : "zio.stream.ZSink.contramap", "link" : "zio\/stream\/ZSink.html#contramap[I2](f:I2=>I):zio.stream.ZSink[R,E,I2,L,Z]", "kind" : "def"}, {"label" : "collectAllWhileWith", "tail" : "(z: S)(p: (Z) => Boolean)(f: (S, Z) => S)(ev: <:<[L, I]): ZSink[R, E, I, L, S]", "member" : "zio.stream.ZSink.collectAllWhileWith", "link" : "zio\/stream\/ZSink.html#collectAllWhileWith[S](z:S)(p:Z=>Boolean)(f:(S,Z)=>S)(implicitev:L<:<I):zio.stream.ZSink[R,E,I,L,S]", "kind" : "def"}, {"label" : "as", "tail" : "(z: => Z2): ZSink[R, E, I, L, Z2]", "member" : "zio.stream.ZSink.as", "link" : "zio\/stream\/ZSink.html#as[Z2](z:=>Z2):zio.stream.ZSink[R,E,I,L,Z2]", "kind" : "def"}, {"label" : "<&", "tail" : "(that: ZSink[R1, E1, I1, L1, Any]): ZSink[R1, E1, I1, L1, Z]", "member" : "zio.stream.ZSink.<&", "link" : "zio\/stream\/ZSink.html#<&[R1<:R,E1>:E,I1<:I,L1>:L](that:zio.stream.ZSink[R1,E1,I1,L1,Any]):zio.stream.ZSink[R1,E1,I1,L1,Z]", "kind" : "final def"}, {"label" : "<*", "tail" : "(that: ZSink[R1, E1, I1, L1, Z1])(ev: <:<[L, I1]): ZSink[R1, E1, I1, L1, Z]", "member" : "zio.stream.ZSink.<*", "link" : "zio\/stream\/ZSink.html#<*[R1<:R,E1>:E,I1<:I,L1>:L,Z1,Z2](that:zio.stream.ZSink[R1,E1,I1,L1,Z1])(implicitev:L<:<I1):zio.stream.ZSink[R1,E1,I1,L1,Z]", "kind" : "final def"}, {"label" : "&>", "tail" : "(that: ZSink[R1, E1, I1, L1, Z1]): ZSink[R1, E1, I1, L1, Z1]", "member" : "zio.stream.ZSink.&>", "link" : "zio\/stream\/ZSink.html#&>[R1<:R,E1>:E,I1<:I,L1>:L,Z1](that:zio.stream.ZSink[R1,E1,I1,L1,Z1]):zio.stream.ZSink[R1,E1,I1,L1,Z1]", "kind" : "final def"}, {"label" : "*>", "tail" : "(that: ZSink[R1, E1, I1, L1, Z1])(ev: <:<[L, I1]): ZSink[R1, E1, I1, L1, Z1]", "member" : "zio.stream.ZSink.*>", "link" : "zio\/stream\/ZSink.html#*>[R1<:R,E1>:E,I1<:I,L1>:L,Z1,Z2](that:zio.stream.ZSink[R1,E1,I1,L1,Z1])(implicitev:L<:<I1):zio.stream.ZSink[R1,E1,I1,L1,Z1]", "kind" : "final def"}, {"label" : "<&>", "tail" : "(that: ZSink[R1, E1, I1, L1, Z1])(zippable: Zippable[Z, Z1]): ZSink[R1, E1, I1, L1, Out]", "member" : "zio.stream.ZSink.<&>", "link" : "zio\/stream\/ZSink.html#<&>[R1<:R,E1>:E,I1<:I,L1>:L,Z1](that:zio.stream.ZSink[R1,E1,I1,L1,Z1])(implicitzippable:zio.Zippable[Z,Z1]):zio.stream.ZSink[R1,E1,I1,L1,zippable.Out]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(that: ZSink[R1, E1, I1, L1, Z1])(zippable: Zippable[Z, Z1], ev: <:<[L, I1]): ZSink[R1, E1, I1, L1, Out]", "member" : "zio.stream.ZSink.<*>", "link" : "zio\/stream\/ZSink.html#<*>[R1<:R,E1>:E,I1<:I,L1>:L,Z1,Z2](that:zio.stream.ZSink[R1,E1,I1,L1,Z1])(implicitzippable:zio.Zippable[Z,Z1],implicitev:L<:<I1):zio.stream.ZSink[R1,E1,I1,L1,zippable.Out]", "kind" : "final def"}, {"label" : "|", "tail" : "(that: ZSink[R1, E1, I1, L1, Z1]): ZSink[R1, E1, I1, L1, Z1]", "member" : "zio.stream.ZSink.|", "link" : "zio\/stream\/ZSink.html#|[R1<:R,E1>:E,A0,I1<:I,L1>:L,Z1>:Z](that:zio.stream.ZSink[R1,E1,I1,L1,Z1]):zio.stream.ZSink[R1,E1,I1,L1,Z1]", "kind" : "final def"}, {"label" : "push", "tail" : ": ZManaged[R, Nothing, Push[R, E, I, L, Z]]", "member" : "zio.stream.ZSink.push", "link" : "zio\/stream\/ZSink.html#push:zio.ZManaged[R,Nothing,zio.stream.ZSink.Push[R,E,I,L,Z]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/ZSink.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/ZSink.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/ZSink.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/ZSink.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/ZSink.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/ZSink.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/ZSink.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZSink.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZSink.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZSink.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/ZSink.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/ZSink.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/ZSink.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/ZSink.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/ZSink.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/ZSink.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/ZSink.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/ZSink.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/ZSink.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "AccessSinkPartiallyApplied", "tail" : "", "member" : "zio.stream.ZSink.AccessSinkPartiallyApplied", "link" : "zio\/stream\/ZSink$.html#AccessSinkPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "unwrapManaged", "tail" : "(managed: ZManaged[R, E, ZSink[R, E, I, L, Z]]): ZSink[R, E, I, I, Z]", "member" : "zio.stream.ZSink.unwrapManaged", "link" : "zio\/stream\/ZSink$.html#unwrapManaged[R,E,I,L<:I,Z](managed:zio.ZManaged[R,E,zio.stream.ZSink[R,E,I,L,Z]]):zio.stream.ZSink[R,E,I,I,Z]", "kind" : "def"}, {"label" : "unwrap", "tail" : "(zio: ZIO[R, E, ZSink[R, E, I, L, Z]]): ZSink[R, E, I, I, Z]", "member" : "zio.stream.ZSink.unwrap", "link" : "zio\/stream\/ZSink$.html#unwrap[R,E,I,L<:I,Z](zio:zio.ZIO[R,E,zio.stream.ZSink[R,E,I,L,Z]]):zio.stream.ZSink[R,E,I,I,Z]", "kind" : "def"}, {"label" : "timed", "tail" : "(): ZSink[Has[Clock], Nothing, Any, Nothing, zio.Duration]", "member" : "zio.stream.ZSink.timed", "link" : "zio\/stream\/ZSink$.html#timed:zio.stream.ZSink[zio.Has[zio.Clock],Nothing,Any,Nothing,zio.Duration]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): ZSink[Any, Nothing, I, I, Chunk[I]]", "member" : "zio.stream.ZSink.take", "link" : "zio\/stream\/ZSink$.html#take[I](n:Int):zio.stream.ZSink[Any,Nothing,I,I,zio.Chunk[I]]", "kind" : "def"}, {"label" : "sum", "tail" : "(A: Numeric[A]): ZSink[Any, Nothing, A, Nothing, A]", "member" : "zio.stream.ZSink.sum", "link" : "zio\/stream\/ZSink$.html#sum[A](implicitA:Numeric[A]):zio.stream.ZSink[Any,Nothing,A,Nothing,A]", "kind" : "def"}, {"label" : "succeed", "tail" : "(z: => Z): ZSink[Any, Nothing, I, I, Z]", "member" : "zio.stream.ZSink.succeed", "link" : "zio\/stream\/ZSink$.html#succeed[I,Z](z:=>Z):zio.stream.ZSink[Any,Nothing,I,I,Z]", "kind" : "def"}, {"label" : "managed", "tail" : "(resource: ZManaged[R, E, A])(fn: (A) => ZSink[R, E, I, L, Z]): ZSink[R, E, I, I, Z]", "member" : "zio.stream.ZSink.managed", "link" : "zio\/stream\/ZSink$.html#managed[R,E,I,A,L<:I,Z](resource:zio.ZManaged[R,E,A])(fn:A=>zio.stream.ZSink[R,E,I,L,Z]):zio.stream.ZSink[R,E,I,I,Z]", "kind" : "def"}, {"label" : "last", "tail" : "(): ZSink[Any, Nothing, I, Nothing, Option[I]]", "member" : "zio.stream.ZSink.last", "link" : "zio\/stream\/ZSink$.html#last[I]:zio.stream.ZSink[Any,Nothing,I,Nothing,Option[I]]", "kind" : "def"}, {"label" : "head", "tail" : "(): ZSink[Any, Nothing, I, I, Option[I]]", "member" : "zio.stream.ZSink.head", "link" : "zio\/stream\/ZSink$.html#head[I]:zio.stream.ZSink[Any,Nothing,I,I,Option[I]]", "kind" : "def"}, {"label" : "halt", "tail" : "(e: => Cause[E]): ZSink[Any, E, Any, Nothing, Nothing]", "member" : "zio.stream.ZSink.halt", "link" : "zio\/stream\/ZSink$.html#halt[E](e:=>zio.Cause[E]):zio.stream.ZSink[Any,E,Any,Nothing,Nothing]", "kind" : "def"}, {"label" : "fromZIO", "tail" : "(b: => ZIO[R, E, Z]): ZSink[R, E, I, I, Z]", "member" : "zio.stream.ZSink.fromZIO", "link" : "zio\/stream\/ZSink$.html#fromZIO[R,E,I,Z](b:=>zio.ZIO[R,E,Z]):zio.stream.ZSink[R,E,I,I,Z]", "kind" : "def"}, {"label" : "fromQueueWithShutdown", "tail" : "(queue: ZQueue[R, Nothing, E, Any, I, Any]): ZSink[R, E, I, Nothing, Unit]", "member" : "zio.stream.ZSink.fromQueueWithShutdown", "link" : "zio\/stream\/ZSink$.html#fromQueueWithShutdown[R,E,I](queue:zio.ZQueue[R,Nothing,E,Any,I,Any]):zio.stream.ZSink[R,E,I,Nothing,Unit]", "kind" : "def"}, {"label" : "fromQueue", "tail" : "(queue: ZQueue[R, Nothing, E, Any, I, Any]): ZSink[R, E, I, Nothing, Unit]", "member" : "zio.stream.ZSink.fromQueue", "link" : "zio\/stream\/ZSink$.html#fromQueue[R,E,I](queue:zio.ZQueue[R,Nothing,E,Any,I,Any]):zio.stream.ZSink[R,E,I,Nothing,Unit]", "kind" : "def"}, {"label" : "fromPush", "tail" : "(sink: Push[R, E, I, L, Z]): ZSink[R, E, I, L, Z]", "member" : "zio.stream.ZSink.fromPush", "link" : "zio\/stream\/ZSink$.html#fromPush[R,E,I,L,Z](sink:zio.stream.ZSink.Push[R,E,I,L,Z]):zio.stream.ZSink[R,E,I,L,Z]", "kind" : "def"}, {"label" : "fromHubWithShutdown", "tail" : "(hub: ZHub[R, Nothing, E, Any, I, Any]): ZSink[R, E, I, Nothing, Unit]", "member" : "zio.stream.ZSink.fromHubWithShutdown", "link" : "zio\/stream\/ZSink$.html#fromHubWithShutdown[R,E,I](hub:zio.ZHub[R,Nothing,E,Any,I,Any]):zio.stream.ZSink[R,E,I,Nothing,Unit]", "kind" : "def"}, {"label" : "fromHub", "tail" : "(hub: ZHub[R, Nothing, E, Any, I, Any]): ZSink[R, E, I, Nothing, Unit]", "member" : "zio.stream.ZSink.fromHub", "link" : "zio\/stream\/ZSink$.html#fromHub[R,E,I](hub:zio.ZHub[R,Nothing,E,Any,I,Any]):zio.stream.ZSink[R,E,I,Nothing,Unit]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(b: => ZIO[R, E, Z]): ZSink[R, E, I, I, Z]", "member" : "zio.stream.ZSink.fromEffect", "link" : "zio\/stream\/ZSink$.html#fromEffect[R,E,I,Z](b:=>zio.ZIO[R,E,Z]):zio.stream.ZSink[R,E,I,I,Z]", "kind" : "def"}, {"label" : "foreachWhile", "tail" : "(f: (I) => ZIO[R, E, Boolean]): ZSink[R, E, I, I, Unit]", "member" : "zio.stream.ZSink.foreachWhile", "link" : "zio\/stream\/ZSink$.html#foreachWhile[R,E,I](f:I=>zio.ZIO[R,E,Boolean]):zio.stream.ZSink[R,E,I,I,Unit]", "kind" : "final def"}, {"label" : "foreachChunk", "tail" : "(f: (Chunk[I]) => ZIO[R, E, Any]): ZSink[R, E, I, Nothing, Unit]", "member" : "zio.stream.ZSink.foreachChunk", "link" : "zio\/stream\/ZSink$.html#foreachChunk[R,E,I](f:zio.Chunk[I]=>zio.ZIO[R,E,Any]):zio.stream.ZSink[R,E,I,Nothing,Unit]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (I) => ZIO[R, E, Any]): ZSink[R, E, I, I, Unit]", "member" : "zio.stream.ZSink.foreach", "link" : "zio\/stream\/ZSink$.html#foreach[R,E,I](f:I=>zio.ZIO[R,E,Any]):zio.stream.ZSink[R,E,I,I,Unit]", "kind" : "def"}, {"label" : "foldLeftZIO", "tail" : "(z: S)(f: (S, I) => ZIO[R, E, S]): ZSink[R, E, I, I, S]", "member" : "zio.stream.ZSink.foldLeftZIO", "link" : "zio\/stream\/ZSink$.html#foldLeftZIO[R,E,I,S](z:S)(f:(S,I)=>zio.ZIO[R,E,S]):zio.stream.ZSink[R,E,I,I,S]", "kind" : "def"}, {"label" : "foldLeftM", "tail" : "(z: S)(f: (S, I) => ZIO[R, E, S]): ZSink[R, E, I, I, S]", "member" : "zio.stream.ZSink.foldLeftM", "link" : "zio\/stream\/ZSink$.html#foldLeftM[R,E,I,S](z:S)(f:(S,I)=>zio.ZIO[R,E,S]):zio.stream.ZSink[R,E,I,I,S]", "kind" : "def"}, {"label" : "foldLeftChunksZIO", "tail" : "(z: S)(f: (S, Chunk[I]) => ZIO[R, E, S]): ZSink[R, E, I, Nothing, S]", "member" : "zio.stream.ZSink.foldLeftChunksZIO", "link" : "zio\/stream\/ZSink$.html#foldLeftChunksZIO[R,E,I,S](z:S)(f:(S,zio.Chunk[I])=>zio.ZIO[R,E,S]):zio.stream.ZSink[R,E,I,Nothing,S]", "kind" : "def"}, {"label" : "foldLeftChunksM", "tail" : "(z: S)(f: (S, Chunk[I]) => ZIO[R, E, S]): ZSink[R, E, I, Nothing, S]", "member" : "zio.stream.ZSink.foldLeftChunksM", "link" : "zio\/stream\/ZSink$.html#foldLeftChunksM[R,E,I,S](z:S)(f:(S,zio.Chunk[I])=>zio.ZIO[R,E,S]):zio.stream.ZSink[R,E,I,Nothing,S]", "kind" : "def"}, {"label" : "foldLeftChunks", "tail" : "(z: S)(f: (S, Chunk[I]) => S): ZSink[Any, Nothing, I, Nothing, S]", "member" : "zio.stream.ZSink.foldLeftChunks", "link" : "zio\/stream\/ZSink$.html#foldLeftChunks[I,S](z:S)(f:(S,zio.Chunk[I])=>S):zio.stream.ZSink[Any,Nothing,I,Nothing,S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: S)(f: (S, I) => S): ZSink[Any, Nothing, I, Nothing, S]", "member" : "zio.stream.ZSink.foldLeft", "link" : "zio\/stream\/ZSink$.html#foldLeft[I,S](z:S)(f:(S,I)=>S):zio.stream.ZSink[Any,Nothing,I,Nothing,S]", "kind" : "def"}, {"label" : "foldZIO", "tail" : "(z: S)(contFn: (S) => Boolean)(f: (S, I) => ZIO[R, E, S]): ZSink[R, E, I, I, S]", "member" : "zio.stream.ZSink.foldZIO", "link" : "zio\/stream\/ZSink$.html#foldZIO[R,E,I,S](z:S)(contFn:S=>Boolean)(f:(S,I)=>zio.ZIO[R,E,S]):zio.stream.ZSink[R,E,I,I,S]", "kind" : "def"}, {"label" : "foldM", "tail" : "(z: S)(contFn: (S) => Boolean)(f: (S, I) => ZIO[R, E, S]): ZSink[R, E, I, I, S]", "member" : "zio.stream.ZSink.foldM", "link" : "zio\/stream\/ZSink$.html#foldM[R,E,I,S](z:S)(contFn:S=>Boolean)(f:(S,I)=>zio.ZIO[R,E,S]):zio.stream.ZSink[R,E,I,I,S]", "kind" : "def"}, {"label" : "foldChunksZIO", "tail" : "(z: S)(contFn: (S) => Boolean)(f: (S, Chunk[I]) => ZIO[R, E, S]): ZSink[R, E, I, I, S]", "member" : "zio.stream.ZSink.foldChunksZIO", "link" : "zio\/stream\/ZSink$.html#foldChunksZIO[R,E,I,S](z:S)(contFn:S=>Boolean)(f:(S,zio.Chunk[I])=>zio.ZIO[R,E,S]):zio.stream.ZSink[R,E,I,I,S]", "kind" : "def"}, {"label" : "foldChunksM", "tail" : "(z: S)(contFn: (S) => Boolean)(f: (S, Chunk[I]) => ZIO[R, E, S]): ZSink[R, E, I, I, S]", "member" : "zio.stream.ZSink.foldChunksM", "link" : "zio\/stream\/ZSink$.html#foldChunksM[R,E,I,S](z:S)(contFn:S=>Boolean)(f:(S,zio.Chunk[I])=>zio.ZIO[R,E,S]):zio.stream.ZSink[R,E,I,I,S]", "kind" : "def"}, {"label" : "foldChunks", "tail" : "(z: S)(contFn: (S) => Boolean)(f: (S, Chunk[I]) => S): ZSink[Any, Nothing, I, I, S]", "member" : "zio.stream.ZSink.foldChunks", "link" : "zio\/stream\/ZSink$.html#foldChunks[I,S](z:S)(contFn:S=>Boolean)(f:(S,zio.Chunk[I])=>S):zio.stream.ZSink[Any,Nothing,I,I,S]", "kind" : "def"}, {"label" : "fold", "tail" : "(z: S)(contFn: (S) => Boolean)(f: (S, I) => S): ZSink[Any, Nothing, I, I, S]", "member" : "zio.stream.ZSink.fold", "link" : "zio\/stream\/ZSink$.html#fold[I,S](z:S)(contFn:S=>Boolean)(f:(S,I)=>S):zio.stream.ZSink[Any,Nothing,I,I,S]", "kind" : "def"}, {"label" : "failCause", "tail" : "(e: => Cause[E]): ZSink[Any, E, Any, Nothing, Nothing]", "member" : "zio.stream.ZSink.failCause", "link" : "zio\/stream\/ZSink$.html#failCause[E](e:=>zio.Cause[E]):zio.stream.ZSink[Any,E,Any,Nothing,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: => E): ZSink[Any, E, I, I, Nothing]", "member" : "zio.stream.ZSink.fail", "link" : "zio\/stream\/ZSink$.html#fail[E,I](e:=>E):zio.stream.ZSink[Any,E,I,I,Nothing]", "kind" : "def"}, {"label" : "drain", "tail" : ": ZSink[Any, Nothing, Any, Nothing, Unit]", "member" : "zio.stream.ZSink.drain", "link" : "zio\/stream\/ZSink$.html#drain:zio.stream.ZSink[Any,Nothing,Any,Nothing,Unit]", "kind" : "val"}, {"label" : "dieMessage", "tail" : "(m: => String): ZSink[Any, Nothing, Any, Nothing, Nothing]", "member" : "zio.stream.ZSink.dieMessage", "link" : "zio\/stream\/ZSink$.html#dieMessage(m:=>String):zio.stream.ZSink[Any,Nothing,Any,Nothing,Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(e: => Throwable): ZSink[Any, Nothing, Any, Nothing, Nothing]", "member" : "zio.stream.ZSink.die", "link" : "zio\/stream\/ZSink$.html#die(e:=>Throwable):zio.stream.ZSink[Any,Nothing,Any,Nothing,Nothing]", "kind" : "def"}, {"label" : "count", "tail" : ": ZSink[Any, Nothing, Any, Nothing, Long]", "member" : "zio.stream.ZSink.count", "link" : "zio\/stream\/ZSink$.html#count:zio.stream.ZSink[Any,Nothing,Any,Nothing,Long]", "kind" : "val"}, {"label" : "collectAllToSet", "tail" : "(): ZSink[Any, Nothing, A, Nothing, Set[A]]", "member" : "zio.stream.ZSink.collectAllToSet", "link" : "zio\/stream\/ZSink$.html#collectAllToSet[A]:zio.stream.ZSink[Any,Nothing,A,Nothing,Set[A]]", "kind" : "def"}, {"label" : "collectAllToMap", "tail" : "(key: (A) => K)(f: (A, A) => A): ZSink[Any, Nothing, A, Nothing, Map[K, A]]", "member" : "zio.stream.ZSink.collectAllToMap", "link" : "zio\/stream\/ZSink$.html#collectAllToMap[A,K](key:A=>K)(f:(A,A)=>A):zio.stream.ZSink[Any,Nothing,A,Nothing,Map[K,A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(): ZSink[Any, Nothing, A, Nothing, Chunk[A]]", "member" : "zio.stream.ZSink.collectAll", "link" : "zio\/stream\/ZSink$.html#collectAll[A]:zio.stream.ZSink[Any,Nothing,A,Nothing,zio.Chunk[A]]", "kind" : "def"}, {"label" : "accessSink", "tail" : "(): AccessSinkPartiallyApplied[R]", "member" : "zio.stream.ZSink.accessSink", "link" : "zio\/stream\/ZSink$.html#accessSink[R]:zio.stream.ZSink.AccessSinkPartiallyApplied[R]", "kind" : "def"}, {"label" : "apply", "tail" : "(push: ZManaged[R, Nothing, Push[R, E, I, L, Z]]): ZSink[R, E, I, L, Z]", "member" : "zio.stream.ZSink.apply", "link" : "zio\/stream\/ZSink$.html#apply[R,E,I,L,Z](push:zio.ZManaged[R,Nothing,zio.stream.ZSink.Push[R,E,I,L,Z]]):zio.stream.ZSink[R,E,I,L,Z]", "kind" : "def"}, {"label" : "Push", "tail" : "", "member" : "zio.stream.ZSink.Push", "link" : "zio\/stream\/ZSink$.html#Push", "kind" : "object"}, {"label" : "Push", "tail" : "", "member" : "zio.stream.ZSink.Push", "link" : "zio\/stream\/ZSink$.html#Push[-R,+E,-I,+L,+Z]=Option[zio.Chunk[I]]=>zio.ZIO[R,(Either[E,Z],zio.Chunk[L]),Unit]", "kind" : "type"}, {"label" : "fromFile", "tail" : "(path: => Path, position: Long, options: Set[OpenOption]): ZSink[Any, Throwable, Byte, Byte, Long]", "member" : "zio.stream.ZSinkPlatformSpecificConstructors.fromFile", "link" : "zio\/stream\/ZSink$.html#fromFile(path:=>java.nio.file.Path,position:Long,options:Set[java.nio.file.OpenOption]):zio.stream.ZSink[Any,Throwable,Byte,Byte,Long]", "kind" : "final def"}, {"label" : "fromOutputStreamManaged", "tail" : "(os: ZManaged[Any, IOException, OutputStream]): ZSink[Any, IOException, Byte, Byte, Long]", "member" : "zio.stream.ZSinkPlatformSpecificConstructors.fromOutputStreamManaged", "link" : "zio\/stream\/ZSink$.html#fromOutputStreamManaged(os:zio.ZManaged[Any,java.io.IOException,java.io.OutputStream]):zio.stream.ZSink[Any,java.io.IOException,Byte,Byte,Long]", "kind" : "final def"}, {"label" : "fromOutputStream", "tail" : "(os: OutputStream): ZSink[Any, IOException, Byte, Byte, Long]", "member" : "zio.stream.ZSinkPlatformSpecificConstructors.fromOutputStream", "link" : "zio\/stream\/ZSink$.html#fromOutputStream(os:java.io.OutputStream):zio.stream.ZSink[Any,java.io.IOException,Byte,Byte,Long]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/ZSink$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/ZSink$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/ZSink$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/ZSink$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/ZSink$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/ZSink$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/ZSink$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZSink$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZSink$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZSink$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/ZSink$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/ZSink$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/ZSink$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/ZSink$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/ZSink$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/ZSink$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/ZSink$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/ZSink$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/ZSink$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stream\/ZSink.html", "kind" : "class"}, {"name" : "zio.stream.ZSinkPlatformSpecificConstructors", "trait" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html", "kind" : "trait", "members_trait" : [{"label" : "fromFile", "tail" : "(path: => Path, position: Long, options: Set[OpenOption]): ZSink[Any, Throwable, Byte, Byte, Long]", "member" : "zio.stream.ZSinkPlatformSpecificConstructors.fromFile", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#fromFile(path:=>java.nio.file.Path,position:Long,options:Set[java.nio.file.OpenOption]):zio.stream.ZSink[Any,Throwable,Byte,Byte,Long]", "kind" : "final def"}, {"label" : "fromOutputStreamManaged", "tail" : "(os: ZManaged[Any, IOException, OutputStream]): ZSink[Any, IOException, Byte, Byte, Long]", "member" : "zio.stream.ZSinkPlatformSpecificConstructors.fromOutputStreamManaged", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#fromOutputStreamManaged(os:zio.ZManaged[Any,java.io.IOException,java.io.OutputStream]):zio.stream.ZSink[Any,java.io.IOException,Byte,Byte,Long]", "kind" : "final def"}, {"label" : "fromOutputStream", "tail" : "(os: OutputStream): ZSink[Any, IOException, Byte, Byte, Long]", "member" : "zio.stream.ZSinkPlatformSpecificConstructors.fromOutputStream", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#fromOutputStream(os:java.io.OutputStream):zio.stream.ZSink[Any,java.io.IOException,Byte,Byte,Long]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/ZSinkPlatformSpecificConstructors.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.stream.ZStream", "shortDescription" : "A ZStream[R, E, O] is a description of a program that, when evaluated,may emit 0 or more values of type O, may fail with errors of type Eand uses an environment of type R.", "object" : "zio\/stream\/ZStream$.html", "members_class" : [{"label" : "zipWithPreviousAndNext", "tail" : "(): ZStream[R, E, (Option[O], O, Option[O])]", "member" : "zio.stream.ZStream.zipWithPreviousAndNext", "link" : "zio\/stream\/ZStream.html#zipWithPreviousAndNext:zio.stream.ZStream[R,E,(Option[O],O,Option[O])]", "kind" : "final def"}, {"label" : "zipWithPrevious", "tail" : "(): ZStream[R, E, (Option[O], O)]", "member" : "zio.stream.ZStream.zipWithPrevious", "link" : "zio\/stream\/ZStream.html#zipWithPrevious:zio.stream.ZStream[R,E,(Option[O],O)]", "kind" : "final def"}, {"label" : "zipWithNext", "tail" : "(): ZStream[R, E, (O, Option[O])]", "member" : "zio.stream.ZStream.zipWithNext", "link" : "zio\/stream\/ZStream.html#zipWithNext:zio.stream.ZStream[R,E,(O,Option[O])]", "kind" : "final def"}, {"label" : "zipWithLatest", "tail" : "(that: ZStream[R1, E1, O2])(f: (O, O2) => O3): ZStream[R1, E1, O3]", "member" : "zio.stream.ZStream.zipWithLatest", "link" : "zio\/stream\/ZStream.html#zipWithLatest[R1<:R,E1>:E,O2,O3](that:zio.stream.ZStream[R1,E1,O2])(f:(O,O2)=>O3):zio.stream.ZStream[R1,E1,O3]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(): ZStream[R, E, (O, Long)]", "member" : "zio.stream.ZStream.zipWithIndex", "link" : "zio\/stream\/ZStream.html#zipWithIndex:zio.stream.ZStream[R,E,(O,Long)]", "kind" : "final def"}, {"label" : "zipWith", "tail" : "(that: ZStream[R1, E1, O2])(f: (O, O2) => O3): ZStream[R1, E1, O3]", "member" : "zio.stream.ZStream.zipWith", "link" : "zio\/stream\/ZStream.html#zipWith[R1<:R,E1>:E,O2,O3](that:zio.stream.ZStream[R1,E1,O2])(f:(O,O2)=>O3):zio.stream.ZStream[R1,E1,O3]", "kind" : "def"}, {"label" : "zipAllWithExec", "tail" : "(that: ZStream[R1, E1, O2])(exec: ExecutionStrategy)(left: (O) => O3, right: (O2) => O3)(both: (O, O2) => O3): ZStream[R1, E1, O3]", "member" : "zio.stream.ZStream.zipAllWithExec", "link" : "zio\/stream\/ZStream.html#zipAllWithExec[R1<:R,E1>:E,O2,O3](that:zio.stream.ZStream[R1,E1,O2])(exec:zio.ExecutionStrategy)(left:O=>O3,right:O2=>O3)(both:(O,O2)=>O3):zio.stream.ZStream[R1,E1,O3]", "kind" : "def"}, {"label" : "zipAllWith", "tail" : "(that: ZStream[R1, E1, O2])(left: (O) => O3, right: (O2) => O3)(both: (O, O2) => O3): ZStream[R1, E1, O3]", "member" : "zio.stream.ZStream.zipAllWith", "link" : "zio\/stream\/ZStream.html#zipAllWith[R1<:R,E1>:E,O2,O3](that:zio.stream.ZStream[R1,E1,O2])(left:O=>O3,right:O2=>O3)(both:(O,O2)=>O3):zio.stream.ZStream[R1,E1,O3]", "kind" : "def"}, {"label" : "zipAllRight", "tail" : "(that: ZStream[R1, E1, O2])(default: O2): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.zipAllRight", "link" : "zio\/stream\/ZStream.html#zipAllRight[R1<:R,E1>:E,O2](that:zio.stream.ZStream[R1,E1,O2])(default:O2):zio.stream.ZStream[R1,E1,O2]", "kind" : "def"}, {"label" : "zipAllLeft", "tail" : "(that: ZStream[R1, E1, O2])(default: O1): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.zipAllLeft", "link" : "zio\/stream\/ZStream.html#zipAllLeft[R1<:R,E1>:E,O1>:O,O2](that:zio.stream.ZStream[R1,E1,O2])(default:O1):zio.stream.ZStream[R1,E1,O1]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: ZStream[R1, E1, O2])(defaultLeft: O1, defaultRight: O2): ZStream[R1, E1, (O1, O2)]", "member" : "zio.stream.ZStream.zipAll", "link" : "zio\/stream\/ZStream.html#zipAll[R1<:R,E1>:E,O1>:O,O2](that:zio.stream.ZStream[R1,E1,O2])(defaultLeft:O1,defaultRight:O2):zio.stream.ZStream[R1,E1,(O1,O2)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: ZStream[R1, E1, O2])(zippable: Zippable[O, O2]): ZStream[R1, E1, Out]", "member" : "zio.stream.ZStream.zip", "link" : "zio\/stream\/ZStream.html#zip[R1<:R,E1>:E,O2](that:zio.stream.ZStream[R1,E1,O2])(implicitzippable:zio.Zippable[O,O2]):zio.stream.ZStream[R1,E1,zippable.Out]", "kind" : "def"}, {"label" : "zipRight", "tail" : "(that: ZStream[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.zipRight", "link" : "zio\/stream\/ZStream.html#zipRight[R1<:R,E1>:E,O2](that:zio.stream.ZStream[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "def"}, {"label" : "zipLeft", "tail" : "(that: ZStream[R1, E1, O2]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.zipLeft", "link" : "zio\/stream\/ZStream.html#zipLeft[R1<:R,E1>:E,O2](that:zio.stream.ZStream[R1,E1,O2]):zio.stream.ZStream[R1,E1,O]", "kind" : "def"}, {"label" : "withRuntimeConfig", "tail" : "(runtimeConfig: => RuntimeConfig): ZStream[R, E, O]", "member" : "zio.stream.ZStream.withRuntimeConfig", "link" : "zio\/stream\/ZStream.html#withRuntimeConfig(runtimeConfig:=>zio.RuntimeConfig):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(predicate: (O) => Boolean): ZStream[R, E, O]", "member" : "zio.stream.ZStream.withFilter", "link" : "zio\/stream\/ZStream.html#withFilter(predicate:O=>Boolean):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "whenZIO", "tail" : "(b: ZIO[R1, E1, Boolean]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.whenZIO", "link" : "zio\/stream\/ZStream.html#whenZIO[R1<:R,E1>:E](b:zio.ZIO[R1,E1,Boolean]):zio.stream.ZStream[R1,E1,O]", "kind" : "def"}, {"label" : "whenM", "tail" : "(b: ZIO[R1, E1, Boolean]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.whenM", "link" : "zio\/stream\/ZStream.html#whenM[R1<:R,E1>:E](b:zio.ZIO[R1,E1,Boolean]):zio.stream.ZStream[R1,E1,O]", "kind" : "def"}, {"label" : "when", "tail" : "(b: => Boolean): ZStream[R, E, O]", "member" : "zio.stream.ZStream.when", "link" : "zio\/stream\/ZStream.html#when(b:=>Boolean):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "via", "tail" : "(f: (ZStream[R, E, O]) => ZStream[R2, E2, O2]): ZStream[R2, E2, O2]", "member" : "zio.stream.ZStream.via", "link" : "zio\/stream\/ZStream.html#via[R2,E2,O2](f:zio.stream.ZStream[R,E,O]=>zio.stream.ZStream[R2,E2,O2]):zio.stream.ZStream[R2,E2,O2]", "kind" : "final def"}, {"label" : "updateServiceAt", "tail" : "(): UpdateServiceAt[R, E, O, Service]", "member" : "zio.stream.ZStream.updateServiceAt", "link" : "zio\/stream\/ZStream.html#updateServiceAt[Service]:zio.stream.ZStream.UpdateServiceAt[R,E,O,Service]", "kind" : "final def"}, {"label" : "updateService", "tail" : "(): UpdateService[R, E, O, M]", "member" : "zio.stream.ZStream.updateService", "link" : "zio\/stream\/ZStream.html#updateService[M]:zio.stream.ZStream.UpdateService[R,E,O,M]", "kind" : "final def"}, {"label" : "transduce", "tail" : "(transducer: ZTransducer[R1, E1, O, O3]): ZStream[R1, E1, O3]", "member" : "zio.stream.ZStream.transduce", "link" : "zio\/stream\/ZStream.html#transduce[R1<:R,E1>:E,O3](transducer:zio.stream.ZTransducer[R1,E1,O,O3]):zio.stream.ZStream[R1,E1,O3]", "kind" : "def"}, {"label" : "toQueueUnbounded", "tail" : "(): ZManaged[R, Nothing, Dequeue[Take[E, O]]]", "member" : "zio.stream.ZStream.toQueueUnbounded", "link" : "zio\/stream\/ZStream.html#toQueueUnbounded:zio.ZManaged[R,Nothing,zio.Dequeue[zio.stream.Take[E,O]]]", "kind" : "final def"}, {"label" : "toQueue", "tail" : "(capacity: Int): ZManaged[R, Nothing, Dequeue[Take[E, O]]]", "member" : "zio.stream.ZStream.toQueue", "link" : "zio\/stream\/ZStream.html#toQueue(capacity:Int):zio.ZManaged[R,Nothing,zio.Dequeue[zio.stream.Take[E,O]]]", "kind" : "final def"}, {"label" : "toReader", "tail" : "(ev0: <:<[E, Throwable], ev1: <:<[O, Char]): ZManaged[R, E, Reader]", "member" : "zio.stream.ZStream.toReader", "link" : "zio\/stream\/ZStream.html#toReader(implicitev0:E<:<Throwable,implicitev1:O<:<Char):zio.ZManaged[R,E,java.io.Reader]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): ZManaged[R, Nothing, Iterator[Either[E, O]]]", "member" : "zio.stream.ZStream.toIterator", "link" : "zio\/stream\/ZStream.html#toIterator:zio.ZManaged[R,Nothing,Iterator[Either[E,O]]]", "kind" : "def"}, {"label" : "toInputStream", "tail" : "(ev0: <:<[E, Throwable], ev1: <:<[O, Byte]): ZManaged[R, E, InputStream]", "member" : "zio.stream.ZStream.toInputStream", "link" : "zio\/stream\/ZStream.html#toInputStream(implicitev0:E<:<Throwable,implicitev1:O<:<Byte):zio.ZManaged[R,E,java.io.InputStream]", "kind" : "def"}, {"label" : "toHub", "tail" : "(capacity: Int): ZManaged[R, Nothing, ZHub[Nothing, Any, Any, Nothing, Nothing, Take[E, O]]]", "member" : "zio.stream.ZStream.toHub", "link" : "zio\/stream\/ZStream.html#toHub(capacity:Int):zio.ZManaged[R,Nothing,zio.ZHub[Nothing,Any,Any,Nothing,Nothing,zio.stream.Take[E,O]]]", "kind" : "def"}, {"label" : "timeoutTo", "tail" : "(d: zio.Duration)(that: ZStream[R1, E1, O2]): ZStream[R1 with Has[Clock], E1, O2]", "member" : "zio.stream.ZStream.timeoutTo", "link" : "zio\/stream\/ZStream.html#timeoutTo[R1<:R,E1>:E,O2>:O](d:zio.Duration)(that:zio.stream.ZStream[R1,E1,O2]):zio.stream.ZStream[R1withzio.Has[zio.Clock],E1,O2]", "kind" : "final def"}, {"label" : "timeoutErrorCause", "tail" : "(cause: Cause[E1])(d: zio.Duration): ZStream[R with Has[Clock], E1, O]", "member" : "zio.stream.ZStream.timeoutErrorCause", "link" : "zio\/stream\/ZStream.html#timeoutErrorCause[E1>:E](cause:zio.Cause[E1])(d:zio.Duration):zio.stream.ZStream[Rwithzio.Has[zio.Clock],E1,O]", "kind" : "final def"}, {"label" : "timeoutError", "tail" : "(e: => E1)(d: zio.Duration): ZStream[R with Has[Clock], E1, O]", "member" : "zio.stream.ZStream.timeoutError", "link" : "zio\/stream\/ZStream.html#timeoutError[E1>:E](e:=>E1)(d:zio.Duration):zio.stream.ZStream[Rwithzio.Has[zio.Clock],E1,O]", "kind" : "final def"}, {"label" : "timeout", "tail" : "(d: zio.Duration): ZStream[R with Has[Clock], E, O]", "member" : "zio.stream.ZStream.timeout", "link" : "zio\/stream\/ZStream.html#timeout(d:zio.Duration):zio.stream.ZStream[Rwithzio.Has[zio.Clock],E,O]", "kind" : "final def"}, {"label" : "debounce", "tail" : "(d: zio.Duration): ZStream[R with Has[Clock], E1, O2]", "member" : "zio.stream.ZStream.debounce", "link" : "zio\/stream\/ZStream.html#debounce[E1>:E,O2>:O](d:zio.Duration):zio.stream.ZStream[Rwithzio.Has[zio.Clock],E1,O2]", "kind" : "final def"}, {"label" : "throttleShapeZIO", "tail" : "(units: Long, duration: zio.Duration, burst: Long)(costFn: (Chunk[O]) => ZIO[R1, E1, Long]): ZStream[R1 with Has[Clock], E1, O]", "member" : "zio.stream.ZStream.throttleShapeZIO", "link" : "zio\/stream\/ZStream.html#throttleShapeZIO[R1<:R,E1>:E](units:Long,duration:zio.Duration,burst:Long)(costFn:zio.Chunk[O]=>zio.ZIO[R1,E1,Long]):zio.stream.ZStream[R1withzio.Has[zio.Clock],E1,O]", "kind" : "final def"}, {"label" : "throttleShapeM", "tail" : "(units: Long, duration: zio.Duration, burst: Long)(costFn: (Chunk[O]) => ZIO[R1, E1, Long]): ZStream[R1 with Has[Clock], E1, O]", "member" : "zio.stream.ZStream.throttleShapeM", "link" : "zio\/stream\/ZStream.html#throttleShapeM[R1<:R,E1>:E](units:Long,duration:zio.Duration,burst:Long)(costFn:zio.Chunk[O]=>zio.ZIO[R1,E1,Long]):zio.stream.ZStream[R1withzio.Has[zio.Clock],E1,O]", "kind" : "final def"}, {"label" : "throttleShape", "tail" : "(units: Long, duration: zio.Duration, burst: Long)(costFn: (Chunk[O]) => Long): ZStream[R with Has[Clock], E, O]", "member" : "zio.stream.ZStream.throttleShape", "link" : "zio\/stream\/ZStream.html#throttleShape(units:Long,duration:zio.Duration,burst:Long)(costFn:zio.Chunk[O]=>Long):zio.stream.ZStream[Rwithzio.Has[zio.Clock],E,O]", "kind" : "final def"}, {"label" : "throttleEnforceZIO", "tail" : "(units: Long, duration: zio.Duration, burst: Long)(costFn: (Chunk[O]) => ZIO[R1, E1, Long]): ZStream[R1 with Has[Clock], E1, O]", "member" : "zio.stream.ZStream.throttleEnforceZIO", "link" : "zio\/stream\/ZStream.html#throttleEnforceZIO[R1<:R,E1>:E](units:Long,duration:zio.Duration,burst:Long)(costFn:zio.Chunk[O]=>zio.ZIO[R1,E1,Long]):zio.stream.ZStream[R1withzio.Has[zio.Clock],E1,O]", "kind" : "final def"}, {"label" : "throttleEnforceM", "tail" : "(units: Long, duration: zio.Duration, burst: Long)(costFn: (Chunk[O]) => ZIO[R1, E1, Long]): ZStream[R1 with Has[Clock], E1, O]", "member" : "zio.stream.ZStream.throttleEnforceM", "link" : "zio\/stream\/ZStream.html#throttleEnforceM[R1<:R,E1>:E](units:Long,duration:zio.Duration,burst:Long)(costFn:zio.Chunk[O]=>zio.ZIO[R1,E1,Long]):zio.stream.ZStream[R1withzio.Has[zio.Clock],E1,O]", "kind" : "final def"}, {"label" : "throttleEnforce", "tail" : "(units: Long, duration: zio.Duration, burst: Long)(costFn: (Chunk[O]) => Long): ZStream[R with Has[Clock], E, O]", "member" : "zio.stream.ZStream.throttleEnforce", "link" : "zio\/stream\/ZStream.html#throttleEnforce(units:Long,duration:zio.Duration,burst:Long)(costFn:zio.Chunk[O]=>Long):zio.stream.ZStream[Rwithzio.Has[zio.Clock],E,O]", "kind" : "final def"}, {"label" : "tapError", "tail" : "(f: (E) => ZIO[R1, E1, Any])(ev: CanFail[E]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.tapError", "link" : "zio\/stream\/ZStream.html#tapError[R1<:R,E1>:E](f:E=>zio.ZIO[R1,E1,Any])(implicitev:zio.CanFail[E]):zio.stream.ZStream[R1,E1,O]", "kind" : "final def"}, {"label" : "tap", "tail" : "(f0: (O) => ZIO[R1, E1, Any]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.tap", "link" : "zio\/stream\/ZStream.html#tap[R1<:R,E1>:E](f0:O=>zio.ZIO[R1,E1,Any]):zio.stream.ZStream[R1,E1,O]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(pred: (O) => Boolean): ZStream[R, E, O]", "member" : "zio.stream.ZStream.takeWhile", "link" : "zio\/stream\/ZStream.html#takeWhile(pred:O=>Boolean):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "takeUntilZIO", "tail" : "(pred: (O) => ZIO[R1, E1, Boolean]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.takeUntilZIO", "link" : "zio\/stream\/ZStream.html#takeUntilZIO[R1<:R,E1>:E](pred:O=>zio.ZIO[R1,E1,Boolean]):zio.stream.ZStream[R1,E1,O]", "kind" : "def"}, {"label" : "takeUntilM", "tail" : "(pred: (O) => ZIO[R1, E1, Boolean]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.takeUntilM", "link" : "zio\/stream\/ZStream.html#takeUntilM[R1<:R,E1>:E](pred:O=>zio.ZIO[R1,E1,Boolean]):zio.stream.ZStream[R1,E1,O]", "kind" : "def"}, {"label" : "takeUntil", "tail" : "(pred: (O) => Boolean): ZStream[R, E, O]", "member" : "zio.stream.ZStream.takeUntil", "link" : "zio\/stream\/ZStream.html#takeUntil(pred:O=>Boolean):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): ZStream[R, E, O]", "member" : "zio.stream.ZStream.takeRight", "link" : "zio\/stream\/ZStream.html#takeRight(n:Int):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Long): ZStream[R, E, O]", "member" : "zio.stream.ZStream.take", "link" : "zio\/stream\/ZStream.html#take(n:Long):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "someOrFail", "tail" : "(e: => E1)(ev: <:<[O, Option[O2]]): ZStream[R, E1, O2]", "member" : "zio.stream.ZStream.someOrFail", "link" : "zio\/stream\/ZStream.html#someOrFail[O2,E1>:E](e:=>E1)(implicitev:O<:<Option[O2]):zio.stream.ZStream[R,E1,O2]", "kind" : "final def"}, {"label" : "someOrElse", "tail" : "(default: => O2)(ev: <:<[O, Option[O2]]): ZStream[R, E, O2]", "member" : "zio.stream.ZStream.someOrElse", "link" : "zio\/stream\/ZStream.html#someOrElse[O2](default:=>O2)(implicitev:O<:<Option[O2]):zio.stream.ZStream[R,E,O2]", "kind" : "final def"}, {"label" : "some", "tail" : "(ev: <:<[O, Option[O2]]): ZStream[R, Option[E], O2]", "member" : "zio.stream.ZStream.some", "link" : "zio\/stream\/ZStream.html#some[O2](implicitev:O<:<Option[O2]):zio.stream.ZStream[R,Option[E],O2]", "kind" : "final def"}, {"label" : "scheduleWith", "tail" : "(schedule: Schedule[R1, O, B])(f: (O) => C, g: (B) => C): ZStream[R1 with Has[Clock], E1, C]", "member" : "zio.stream.ZStream.scheduleWith", "link" : "zio\/stream\/ZStream.html#scheduleWith[R1<:R,E1>:E,B,C](schedule:zio.Schedule[R1,O,B])(f:O=>C,g:B=>C):zio.stream.ZStream[R1withzio.Has[zio.Clock],E1,C]", "kind" : "final def"}, {"label" : "scheduleEither", "tail" : "(schedule: Schedule[R1, O, B]): ZStream[R1 with Has[Clock], E1, Either[B, O]]", "member" : "zio.stream.ZStream.scheduleEither", "link" : "zio\/stream\/ZStream.html#scheduleEither[R1<:R,E1>:E,B](schedule:zio.Schedule[R1,O,B]):zio.stream.ZStream[R1withzio.Has[zio.Clock],E1,Either[B,O]]", "kind" : "final def"}, {"label" : "schedule", "tail" : "(schedule: Schedule[R1, O, Any]): ZStream[R1 with Has[Clock], E, O]", "member" : "zio.stream.ZStream.schedule", "link" : "zio\/stream\/ZStream.html#schedule[R1<:R](schedule:zio.Schedule[R1,O,Any]):zio.stream.ZStream[R1withzio.Has[zio.Clock],E,O]", "kind" : "final def"}, {"label" : "scanZIO", "tail" : "(s: S)(f: (S, O) => ZIO[R1, E1, S]): ZStream[R1, E1, S]", "member" : "zio.stream.ZStream.scanZIO", "link" : "zio\/stream\/ZStream.html#scanZIO[R1<:R,E1>:E,S](s:S)(f:(S,O)=>zio.ZIO[R1,E1,S]):zio.stream.ZStream[R1,E1,S]", "kind" : "def"}, {"label" : "scanReduceZIO", "tail" : "(f: (O1, O) => ZIO[R1, E1, O1]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.scanReduceZIO", "link" : "zio\/stream\/ZStream.html#scanReduceZIO[R1<:R,E1>:E,O1>:O](f:(O1,O)=>zio.ZIO[R1,E1,O1]):zio.stream.ZStream[R1,E1,O1]", "kind" : "def"}, {"label" : "scanReduceM", "tail" : "(f: (O1, O) => ZIO[R1, E1, O1]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.scanReduceM", "link" : "zio\/stream\/ZStream.html#scanReduceM[R1<:R,E1>:E,O1>:O](f:(O1,O)=>zio.ZIO[R1,E1,O1]):zio.stream.ZStream[R1,E1,O1]", "kind" : "def"}, {"label" : "scanReduce", "tail" : "(f: (O1, O) => O1): ZStream[R, E, O1]", "member" : "zio.stream.ZStream.scanReduce", "link" : "zio\/stream\/ZStream.html#scanReduce[O1>:O](f:(O1,O)=>O1):zio.stream.ZStream[R,E,O1]", "kind" : "def"}, {"label" : "scanM", "tail" : "(s: S)(f: (S, O) => ZIO[R1, E1, S]): ZStream[R1, E1, S]", "member" : "zio.stream.ZStream.scanM", "link" : "zio\/stream\/ZStream.html#scanM[R1<:R,E1>:E,S](s:S)(f:(S,O)=>zio.ZIO[R1,E1,S]):zio.stream.ZStream[R1,E1,S]", "kind" : "def"}, {"label" : "scan", "tail" : "(s: S)(f: (S, O) => S): ZStream[R, E, S]", "member" : "zio.stream.ZStream.scan", "link" : "zio\/stream\/ZStream.html#scan[S](s:S)(f:(S,O)=>S):zio.stream.ZStream[R,E,S]", "kind" : "def"}, {"label" : "runSum", "tail" : "(ev: Numeric[O1]): ZIO[R, E, O1]", "member" : "zio.stream.ZStream.runSum", "link" : "zio\/stream\/ZStream.html#runSum[O1>:O](implicitev:Numeric[O1]):zio.ZIO[R,E,O1]", "kind" : "final def"}, {"label" : "runLast", "tail" : "(): ZIO[R, E, Option[O]]", "member" : "zio.stream.ZStream.runLast", "link" : "zio\/stream\/ZStream.html#runLast:zio.ZIO[R,E,Option[O]]", "kind" : "def"}, {"label" : "runHead", "tail" : "(): ZIO[R, E, Option[O]]", "member" : "zio.stream.ZStream.runHead", "link" : "zio\/stream\/ZStream.html#runHead:zio.ZIO[R,E,Option[O]]", "kind" : "def"}, {"label" : "runDrain", "tail" : "(): ZIO[R, E, Unit]", "member" : "zio.stream.ZStream.runDrain", "link" : "zio\/stream\/ZStream.html#runDrain:zio.ZIO[R,E,Unit]", "kind" : "def"}, {"label" : "runCount", "tail" : "(): ZIO[R, E, Long]", "member" : "zio.stream.ZStream.runCount", "link" : "zio\/stream\/ZStream.html#runCount:zio.ZIO[R,E,Long]", "kind" : "final def"}, {"label" : "runCollect", "tail" : "(): ZIO[R, E, Chunk[O]]", "member" : "zio.stream.ZStream.runCollect", "link" : "zio\/stream\/ZStream.html#runCollect:zio.ZIO[R,E,zio.Chunk[O]]", "kind" : "def"}, {"label" : "runManaged", "tail" : "(sink: ZSink[R1, E1, O, Any, B]): ZManaged[R1, E1, B]", "member" : "zio.stream.ZStream.runManaged", "link" : "zio\/stream\/ZStream.html#runManaged[R1<:R,E1>:E,B](sink:zio.stream.ZSink[R1,E1,O,Any,B]):zio.ZManaged[R1,E1,B]", "kind" : "def"}, {"label" : "run", "tail" : "(sink: ZSink[R1, E1, O, Any, B]): ZIO[R1, E1, B]", "member" : "zio.stream.ZStream.run", "link" : "zio\/stream\/ZStream.html#run[R1<:R,E1>:E,B](sink:zio.stream.ZSink[R1,E1,O,Any,B]):zio.ZIO[R1,E1,B]", "kind" : "def"}, {"label" : "rightOrFail", "tail" : "(e: => E1)(ev: <:<[O, Either[O1, O2]]): ZStream[R, E1, O2]", "member" : "zio.stream.ZStream.rightOrFail", "link" : "zio\/stream\/ZStream.html#rightOrFail[O1,O2,E1>:E](e:=>E1)(implicitev:O<:<Either[O1,O2]):zio.stream.ZStream[R,E1,O2]", "kind" : "final def"}, {"label" : "right", "tail" : "(ev: <:<[O, Either[O1, O2]]): ZStream[R, Option[E], O2]", "member" : "zio.stream.ZStream.right", "link" : "zio\/stream\/ZStream.html#right[O1,O2](implicitev:O<:<Either[O1,O2]):zio.stream.ZStream[R,Option[E],O2]", "kind" : "final def"}, {"label" : "retry", "tail" : "(schedule: Schedule[R1, E, _]): ZStream[R1 with Has[Clock], E, O]", "member" : "zio.stream.ZStream.retry", "link" : "zio\/stream\/ZStream.html#retry[R1<:R](schedule:zio.Schedule[R1,E,_]):zio.stream.ZStream[R1withzio.Has[zio.Clock],E,O]", "kind" : "def"}, {"label" : "repeatWith", "tail" : "(schedule: Schedule[R1, Any, B])(f: (O) => C, g: (B) => C): ZStream[R1 with Has[Clock], E, C]", "member" : "zio.stream.ZStream.repeatWith", "link" : "zio\/stream\/ZStream.html#repeatWith[R1<:R,B,C](schedule:zio.Schedule[R1,Any,B])(f:O=>C,g:B=>C):zio.stream.ZStream[R1withzio.Has[zio.Clock],E,C]", "kind" : "final def"}, {"label" : "repeatElementsWith", "tail" : "(schedule: Schedule[R1, O, B])(f: (O) => C, g: (B) => C): ZStream[R1 with Has[Clock], E1, C]", "member" : "zio.stream.ZStream.repeatElementsWith", "link" : "zio\/stream\/ZStream.html#repeatElementsWith[R1<:R,E1>:E,B,C](schedule:zio.Schedule[R1,O,B])(f:O=>C,g:B=>C):zio.stream.ZStream[R1withzio.Has[zio.Clock],E1,C]", "kind" : "final def"}, {"label" : "repeatElementsEither", "tail" : "(schedule: Schedule[R1, O, B]): ZStream[R1 with Has[Clock], E1, Either[B, O]]", "member" : "zio.stream.ZStream.repeatElementsEither", "link" : "zio\/stream\/ZStream.html#repeatElementsEither[R1<:R,E1>:E,B](schedule:zio.Schedule[R1,O,B]):zio.stream.ZStream[R1withzio.Has[zio.Clock],E1,Either[B,O]]", "kind" : "final def"}, {"label" : "repeatElements", "tail" : "(schedule: Schedule[R1, O, Any]): ZStream[R1 with Has[Clock], E, O]", "member" : "zio.stream.ZStream.repeatElements", "link" : "zio\/stream\/ZStream.html#repeatElements[R1<:R](schedule:zio.Schedule[R1,O,Any]):zio.stream.ZStream[R1withzio.Has[zio.Clock],E,O]", "kind" : "final def"}, {"label" : "repeatEither", "tail" : "(schedule: Schedule[R1, Any, B]): ZStream[R1 with Has[Clock], E, Either[B, O]]", "member" : "zio.stream.ZStream.repeatEither", "link" : "zio\/stream\/ZStream.html#repeatEither[R1<:R,B](schedule:zio.Schedule[R1,Any,B]):zio.stream.ZStream[R1withzio.Has[zio.Clock],E,Either[B,O]]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(schedule: Schedule[R1, Any, B]): ZStream[R1 with Has[Clock], E, O]", "member" : "zio.stream.ZStream.repeat", "link" : "zio\/stream\/ZStream.html#repeat[R1<:R,B](schedule:zio.Schedule[R1,Any,B]):zio.stream.ZStream[R1withzio.Has[zio.Clock],E,O]", "kind" : "final def"}, {"label" : "refineOrDieWith", "tail" : "(pf: PartialFunction[E, E1])(f: (E) => Throwable)(ev: CanFail[E]): ZStream[R, E1, O]", "member" : "zio.stream.ZStream.refineOrDieWith", "link" : "zio\/stream\/ZStream.html#refineOrDieWith[E1](pf:PartialFunction[E,E1])(f:E=>Throwable)(implicitev:zio.CanFail[E]):zio.stream.ZStream[R,E1,O]", "kind" : "final def"}, {"label" : "refineOrDie", "tail" : "(pf: PartialFunction[E, E1])(ev1: <:<[E, Throwable], ev2: CanFail[E]): ZStream[R, E1, O]", "member" : "zio.stream.ZStream.refineOrDie", "link" : "zio\/stream\/ZStream.html#refineOrDie[E1](pf:PartialFunction[E,E1])(implicitev1:E<:<Throwable,implicitev2:zio.CanFail[E]):zio.stream.ZStream[R,E1,O]", "kind" : "final def"}, {"label" : "rechunk", "tail" : "(n: Int): ZStream[R, E, O]", "member" : "zio.stream.ZStream.rechunk", "link" : "zio\/stream\/ZStream.html#rechunk(n:Int):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "provideSomeLayer", "tail" : "(): ProvideSomeLayer[R0, R, E, O]", "member" : "zio.stream.ZStream.provideSomeLayer", "link" : "zio\/stream\/ZStream.html#provideSomeLayer[R0]:zio.stream.ZStream.ProvideSomeLayer[R0,R,E,O]", "kind" : "final def"}, {"label" : "provideSome", "tail" : "(env: (R0) => R)(ev: NeedsEnv[R]): ZStream[R0, E, O]", "member" : "zio.stream.ZStream.provideSome", "link" : "zio\/stream\/ZStream.html#provideSome[R0](env:R0=>R)(implicitev:zio.NeedsEnv[R]):zio.stream.ZStream[R0,E,O]", "kind" : "final def"}, {"label" : "provideLayer", "tail" : "(layer: ZLayer[R0, E1, R1])(ev: <:<[R1, R]): ZStream[R0, E1, O]", "member" : "zio.stream.ZStream.provideLayer", "link" : "zio\/stream\/ZStream.html#provideLayer[E1>:E,R0,R1](layer:zio.ZLayer[R0,E1,R1])(implicitev:R1<:<R):zio.stream.ZStream[R0,E1,O]", "kind" : "final def"}, {"label" : "provideCustomLayer", "tail" : "(layer: ZLayer[zio.ZEnv, E1, R1])(ev1: <:<[zio.ZEnv with R1, R], ev2: Union[zio.ZEnv, R1], tagged: zio.Tag[R1]): ZStream[zio.ZEnv, E1, O]", "member" : "zio.stream.ZStream.provideCustomLayer", "link" : "zio\/stream\/ZStream.html#provideCustomLayer[E1>:E,R1](layer:zio.ZLayer[zio.ZEnv,E1,R1])(implicitev1:zio.ZEnvwithR1<:<R,implicitev2:zio.Has.Union[zio.ZEnv,R1],implicittagged:zio.Tag[R1]):zio.stream.ZStream[zio.ZEnv,E1,O]", "kind" : "def"}, {"label" : "provide", "tail" : "(r: R)(ev: NeedsEnv[R]): ZStream[Any, E, O]", "member" : "zio.stream.ZStream.provide", "link" : "zio\/stream\/ZStream.html#provide(r:R)(implicitev:zio.NeedsEnv[R]):zio.stream.ZStream[Any,E,O]", "kind" : "final def"}, {"label" : "peel", "tail" : "(sink: ZSink[R1, E1, O, O1, Z]): ZManaged[R1, E1, (Z, ZStream[R, E, O1])]", "member" : "zio.stream.ZStream.peel", "link" : "zio\/stream\/ZStream.html#peel[R1<:R,E1>:E,O1>:O,Z](sink:zio.stream.ZSink[R1,E1,O,O1,Z]):zio.ZManaged[R1,E1,(Z,zio.stream.ZStream[R,E,O1])]", "kind" : "def"}, {"label" : "partitionEither", "tail" : "(p: (O) => ZIO[R1, E1, Either[O2, O3]], buffer: Int): ZManaged[R1, E1, (ZStream[Any, E1, O2], ZStream[Any, E1, O3])]", "member" : "zio.stream.ZStream.partitionEither", "link" : "zio\/stream\/ZStream.html#partitionEither[R1<:R,E1>:E,O2,O3](p:O=>zio.ZIO[R1,E1,Either[O2,O3]],buffer:Int):zio.ZManaged[R1,E1,(zio.stream.ZStream[Any,E1,O2],zio.stream.ZStream[Any,E1,O3])]", "kind" : "final def"}, {"label" : "partition", "tail" : "(p: (O) => Boolean, buffer: Int): ZManaged[R, E, (ZStream[Any, E, O], ZStream[Any, E, O])]", "member" : "zio.stream.ZStream.partition", "link" : "zio\/stream\/ZStream.html#partition(p:O=>Boolean,buffer:Int):zio.ZManaged[R,E,(zio.stream.ZStream[Any,E,O],zio.stream.ZStream[Any,E,O])]", "kind" : "def"}, {"label" : "orElseSucceed", "tail" : "(o1: => O1)(ev: CanFail[E]): ZStream[R, Nothing, O1]", "member" : "zio.stream.ZStream.orElseSucceed", "link" : "zio\/stream\/ZStream.html#orElseSucceed[O1>:O](o1:=>O1)(implicitev:zio.CanFail[E]):zio.stream.ZStream[R,Nothing,O1]", "kind" : "final def"}, {"label" : "orElseOptional", "tail" : "(that: => ZStream[R1, Option[E1], O1])(ev: <:<[E, Option[E1]]): ZStream[R1, Option[E1], O1]", "member" : "zio.stream.ZStream.orElseOptional", "link" : "zio\/stream\/ZStream.html#orElseOptional[R1<:R,E1,O1>:O](that:=>zio.stream.ZStream[R1,Option[E1],O1])(implicitev:E<:<Option[E1]):zio.stream.ZStream[R1,Option[E1],O1]", "kind" : "final def"}, {"label" : "orElseFail", "tail" : "(e1: => E1)(ev: CanFail[E]): ZStream[R, E1, O]", "member" : "zio.stream.ZStream.orElseFail", "link" : "zio\/stream\/ZStream.html#orElseFail[E1](e1:=>E1)(implicitev:zio.CanFail[E]):zio.stream.ZStream[R,E1,O]", "kind" : "final def"}, {"label" : "orElseEither", "tail" : "(that: => ZStream[R1, E2, O2])(ev: CanFail[E]): ZStream[R1, E2, Either[O, O2]]", "member" : "zio.stream.ZStream.orElseEither", "link" : "zio\/stream\/ZStream.html#orElseEither[R1<:R,E2,O2](that:=>zio.stream.ZStream[R1,E2,O2])(implicitev:zio.CanFail[E]):zio.stream.ZStream[R1,E2,Either[O,O2]]", "kind" : "final def"}, {"label" : "orElse", "tail" : "(that: => ZStream[R1, E2, O1])(ev: CanFail[E]): ZStream[R1, E2, O1]", "member" : "zio.stream.ZStream.orElse", "link" : "zio\/stream\/ZStream.html#orElse[R1<:R,E2,O1>:O](that:=>zio.stream.ZStream[R1,E2,O1])(implicitev:zio.CanFail[E]):zio.stream.ZStream[R1,E2,O1]", "kind" : "final def"}, {"label" : "onExecutor", "tail" : "(executor: Executor): ZStream[R, E, O]", "member" : "zio.stream.ZStream.onExecutor", "link" : "zio\/stream\/ZStream.html#onExecutor(executor:zio.Executor):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "onError", "tail" : "(cleanup: (Cause[E]) => URIO[R1, Any]): ZStream[R1, E, O]", "member" : "zio.stream.ZStream.onError", "link" : "zio\/stream\/ZStream.html#onError[R1<:R](cleanup:zio.Cause[E]=>zio.URIO[R1,Any]):zio.stream.ZStream[R1,E,O]", "kind" : "final def"}, {"label" : "mergeWith", "tail" : "(that: ZStream[R1, E1, O2], strategy: TerminationStrategy)(l: (O) => O3, r: (O2) => O3): ZStream[R1, E1, O3]", "member" : "zio.stream.ZStream.mergeWith", "link" : "zio\/stream\/ZStream.html#mergeWith[R1<:R,E1>:E,O2,O3](that:zio.stream.ZStream[R1,E1,O2],strategy:zio.stream.ZStream.TerminationStrategy)(l:O=>O3,r:O2=>O3):zio.stream.ZStream[R1,E1,O3]", "kind" : "final def"}, {"label" : "mergeEither", "tail" : "(that: ZStream[R1, E1, O2]): ZStream[R1, E1, Either[O, O2]]", "member" : "zio.stream.ZStream.mergeEither", "link" : "zio\/stream\/ZStream.html#mergeEither[R1<:R,E1>:E,O2](that:zio.stream.ZStream[R1,E1,O2]):zio.stream.ZStream[R1,E1,Either[O,O2]]", "kind" : "final def"}, {"label" : "mergeTerminateRight", "tail" : "(that: ZStream[R1, E1, O1]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.mergeTerminateRight", "link" : "zio\/stream\/ZStream.html#mergeTerminateRight[R1<:R,E1>:E,O1>:O](that:zio.stream.ZStream[R1,E1,O1]):zio.stream.ZStream[R1,E1,O1]", "kind" : "final def"}, {"label" : "mergeTerminateLeft", "tail" : "(that: ZStream[R1, E1, O1]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.mergeTerminateLeft", "link" : "zio\/stream\/ZStream.html#mergeTerminateLeft[R1<:R,E1>:E,O1>:O](that:zio.stream.ZStream[R1,E1,O1]):zio.stream.ZStream[R1,E1,O1]", "kind" : "final def"}, {"label" : "mergeTerminateEither", "tail" : "(that: ZStream[R1, E1, O1]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.mergeTerminateEither", "link" : "zio\/stream\/ZStream.html#mergeTerminateEither[R1<:R,E1>:E,O1>:O](that:zio.stream.ZStream[R1,E1,O1]):zio.stream.ZStream[R1,E1,O1]", "kind" : "final def"}, {"label" : "merge", "tail" : "(that: ZStream[R1, E1, O1], strategy: TerminationStrategy): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.merge", "link" : "zio\/stream\/ZStream.html#merge[R1<:R,E1>:E,O1>:O](that:zio.stream.ZStream[R1,E1,O1],strategy:zio.stream.ZStream.TerminationStrategy):zio.stream.ZStream[R1,E1,O1]", "kind" : "final def"}, {"label" : "mapZIOPartitioned", "tail" : "(keyBy: (O) => K, buffer: Int)(f: (O) => ZIO[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.mapZIOPartitioned", "link" : "zio\/stream\/ZStream.html#mapZIOPartitioned[R1<:R,E1>:E,O2,K](keyBy:O=>K,buffer:Int)(f:O=>zio.ZIO[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "mapZIOParUnordered", "tail" : "(n: Int)(f: (O) => ZIO[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.mapZIOParUnordered", "link" : "zio\/stream\/ZStream.html#mapZIOParUnordered[R1<:R,E1>:E,O2](n:Int)(f:O=>zio.ZIO[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "mapZIOPar", "tail" : "(n: Int)(f: (O) => ZIO[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.mapZIOPar", "link" : "zio\/stream\/ZStream.html#mapZIOPar[R1<:R,E1>:E,O2](n:Int)(f:O=>zio.ZIO[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "mapZIO", "tail" : "(f: (O) => ZIO[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.mapZIO", "link" : "zio\/stream\/ZStream.html#mapZIO[R1<:R,E1>:E,O2](f:O=>zio.ZIO[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "def"}, {"label" : "mapMPartitioned", "tail" : "(keyBy: (O) => K, buffer: Int)(f: (O) => ZIO[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.mapMPartitioned", "link" : "zio\/stream\/ZStream.html#mapMPartitioned[R1<:R,E1>:E,O2,K](keyBy:O=>K,buffer:Int)(f:O=>zio.ZIO[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "mapMParUnordered", "tail" : "(n: Int)(f: (O) => ZIO[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.mapMParUnordered", "link" : "zio\/stream\/ZStream.html#mapMParUnordered[R1<:R,E1>:E,O2](n:Int)(f:O=>zio.ZIO[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "mapMPar", "tail" : "(n: Int)(f: (O) => ZIO[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.mapMPar", "link" : "zio\/stream\/ZStream.html#mapMPar[R1<:R,E1>:E,O2](n:Int)(f:O=>zio.ZIO[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "mapM", "tail" : "(f: (O) => ZIO[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.mapM", "link" : "zio\/stream\/ZStream.html#mapM[R1<:R,E1>:E,O2](f:O=>zio.ZIO[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "def"}, {"label" : "mapErrorCause", "tail" : "(f: (Cause[E]) => Cause[E2]): ZStream[R, E2, O]", "member" : "zio.stream.ZStream.mapErrorCause", "link" : "zio\/stream\/ZStream.html#mapErrorCause[E2](f:zio.Cause[E]=>zio.Cause[E2]):zio.stream.ZStream[R,E2,O]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (E) => E2): ZStream[R, E2, O]", "member" : "zio.stream.ZStream.mapError", "link" : "zio\/stream\/ZStream.html#mapError[E2](f:E=>E2):zio.stream.ZStream[R,E2,O]", "kind" : "def"}, {"label" : "mapBoth", "tail" : "(f: (E) => E1, g: (O) => O1)(ev: CanFail[E]): ZStream[R, E1, O1]", "member" : "zio.stream.ZStream.mapBoth", "link" : "zio\/stream\/ZStream.html#mapBoth[E1,O1](f:E=>E1,g:O=>O1)(implicitev:zio.CanFail[E]):zio.stream.ZStream[R,E1,O1]", "kind" : "def"}, {"label" : "mapConcatZIO", "tail" : "(f: (O) => ZIO[R1, E1, Iterable[O2]]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.mapConcatZIO", "link" : "zio\/stream\/ZStream.html#mapConcatZIO[R1<:R,E1>:E,O2](f:O=>zio.ZIO[R1,E1,Iterable[O2]]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "mapConcatM", "tail" : "(f: (O) => ZIO[R1, E1, Iterable[O2]]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.mapConcatM", "link" : "zio\/stream\/ZStream.html#mapConcatM[R1<:R,E1>:E,O2](f:O=>zio.ZIO[R1,E1,Iterable[O2]]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "mapConcatChunkZIO", "tail" : "(f: (O) => ZIO[R1, E1, Chunk[O2]]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.mapConcatChunkZIO", "link" : "zio\/stream\/ZStream.html#mapConcatChunkZIO[R1<:R,E1>:E,O2](f:O=>zio.ZIO[R1,E1,zio.Chunk[O2]]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "mapConcatChunkM", "tail" : "(f: (O) => ZIO[R1, E1, Chunk[O2]]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.mapConcatChunkM", "link" : "zio\/stream\/ZStream.html#mapConcatChunkM[R1<:R,E1>:E,O2](f:O=>zio.ZIO[R1,E1,zio.Chunk[O2]]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "mapConcatChunk", "tail" : "(f: (O) => Chunk[O2]): ZStream[R, E, O2]", "member" : "zio.stream.ZStream.mapConcatChunk", "link" : "zio\/stream\/ZStream.html#mapConcatChunk[O2](f:O=>zio.Chunk[O2]):zio.stream.ZStream[R,E,O2]", "kind" : "def"}, {"label" : "mapConcat", "tail" : "(f: (O) => Iterable[O2]): ZStream[R, E, O2]", "member" : "zio.stream.ZStream.mapConcat", "link" : "zio\/stream\/ZStream.html#mapConcat[O2](f:O=>Iterable[O2]):zio.stream.ZStream[R,E,O2]", "kind" : "def"}, {"label" : "mapChunksZIO", "tail" : "(f: (Chunk[O]) => ZIO[R1, E1, Chunk[O2]]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.mapChunksZIO", "link" : "zio\/stream\/ZStream.html#mapChunksZIO[R1<:R,E1>:E,O2](f:zio.Chunk[O]=>zio.ZIO[R1,E1,zio.Chunk[O2]]):zio.stream.ZStream[R1,E1,O2]", "kind" : "def"}, {"label" : "mapChunksM", "tail" : "(f: (Chunk[O]) => ZIO[R1, E1, Chunk[O2]]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.mapChunksM", "link" : "zio\/stream\/ZStream.html#mapChunksM[R1<:R,E1>:E,O2](f:zio.Chunk[O]=>zio.ZIO[R1,E1,zio.Chunk[O2]]):zio.stream.ZStream[R1,E1,O2]", "kind" : "def"}, {"label" : "mapChunks", "tail" : "(f: (Chunk[O]) => Chunk[O2]): ZStream[R, E, O2]", "member" : "zio.stream.ZStream.mapChunks", "link" : "zio\/stream\/ZStream.html#mapChunks[O2](f:zio.Chunk[O]=>zio.Chunk[O2]):zio.stream.ZStream[R,E,O2]", "kind" : "def"}, {"label" : "mapAccumZIO", "tail" : "(s: S)(f: (S, O) => ZIO[R1, E1, (S, O1)]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.mapAccumZIO", "link" : "zio\/stream\/ZStream.html#mapAccumZIO[R1<:R,E1>:E,S,O1](s:S)(f:(S,O)=>zio.ZIO[R1,E1,(S,O1)]):zio.stream.ZStream[R1,E1,O1]", "kind" : "final def"}, {"label" : "mapAccumM", "tail" : "(s: S)(f: (S, O) => ZIO[R1, E1, (S, O1)]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.mapAccumM", "link" : "zio\/stream\/ZStream.html#mapAccumM[R1<:R,E1>:E,S,O1](s:S)(f:(S,O)=>zio.ZIO[R1,E1,(S,O1)]):zio.stream.ZStream[R1,E1,O1]", "kind" : "final def"}, {"label" : "mapAccum", "tail" : "(s: S)(f: (S, O) => (S, O1)): ZStream[R, E, O1]", "member" : "zio.stream.ZStream.mapAccum", "link" : "zio\/stream\/ZStream.html#mapAccum[S,O1](s:S)(f:(S,O)=>(S,O1)):zio.stream.ZStream[R,E,O1]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (O) => O2): ZStream[R, E, O2]", "member" : "zio.stream.ZStream.map", "link" : "zio\/stream\/ZStream.html#map[O2](f:O=>O2):zio.stream.ZStream[R,E,O2]", "kind" : "def"}, {"label" : "lock", "tail" : "(executor: Executor): ZStream[R, E, O]", "member" : "zio.stream.ZStream.lock", "link" : "zio\/stream\/ZStream.html#lock(executor:zio.Executor):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "intoQueueManaged", "tail" : "(queue: ZQueue[R1, Nothing, Nothing, Any, Take[E1, O], Any]): ZManaged[R1, E1, Unit]", "member" : "zio.stream.ZStream.intoQueueManaged", "link" : "zio\/stream\/ZStream.html#intoQueueManaged[R1<:R,E1>:E](queue:zio.ZQueue[R1,Nothing,Nothing,Any,zio.stream.Take[E1,O],Any]):zio.ZManaged[R1,E1,Unit]", "kind" : "final def"}, {"label" : "intoQueue", "tail" : "(queue: ZQueue[R1, Nothing, Nothing, Any, Take[E1, O], Any]): ZIO[R1, E1, Unit]", "member" : "zio.stream.ZStream.intoQueue", "link" : "zio\/stream\/ZStream.html#intoQueue[R1<:R,E1>:E](queue:zio.ZQueue[R1,Nothing,Nothing,Any,zio.stream.Take[E1,O],Any]):zio.ZIO[R1,E1,Unit]", "kind" : "final def"}, {"label" : "intoManaged", "tail" : "(queue: ZQueue[R1, Nothing, Nothing, Any, Take[E1, O], Any]): ZManaged[R1, E1, Unit]", "member" : "zio.stream.ZStream.intoManaged", "link" : "zio\/stream\/ZStream.html#intoManaged[R1<:R,E1>:E](queue:zio.ZQueue[R1,Nothing,Nothing,Any,zio.stream.Take[E1,O],Any]):zio.ZManaged[R1,E1,Unit]", "kind" : "final def"}, {"label" : "intoHubManaged", "tail" : "(hub: ZHub[R1, Nothing, Nothing, Any, Take[E1, O], Any]): ZManaged[R1, E1, Unit]", "member" : "zio.stream.ZStream.intoHubManaged", "link" : "zio\/stream\/ZStream.html#intoHubManaged[R1<:R,E1>:E](hub:zio.ZHub[R1,Nothing,Nothing,Any,zio.stream.Take[E1,O],Any]):zio.ZManaged[R1,E1,Unit]", "kind" : "final def"}, {"label" : "intoHub", "tail" : "(hub: ZHub[R1, Nothing, Nothing, Any, Take[E1, O], Any]): ZIO[R1, E1, Unit]", "member" : "zio.stream.ZStream.intoHub", "link" : "zio\/stream\/ZStream.html#intoHub[R1<:R,E1>:E](hub:zio.ZHub[R1,Nothing,Nothing,Any,zio.stream.Take[E1,O],Any]):zio.ZIO[R1,E1,Unit]", "kind" : "final def"}, {"label" : "into", "tail" : "(queue: ZQueue[R1, Nothing, Nothing, Any, Take[E1, O], Any]): ZIO[R1, E1, Unit]", "member" : "zio.stream.ZStream.into", "link" : "zio\/stream\/ZStream.html#into[R1<:R,E1>:E](queue:zio.ZQueue[R1,Nothing,Nothing,Any,zio.stream.Take[E1,O],Any]):zio.ZIO[R1,E1,Unit]", "kind" : "final def"}, {"label" : "interruptAfter", "tail" : "(duration: zio.Duration): ZStream[R with Has[Clock], E, O]", "member" : "zio.stream.ZStream.interruptAfter", "link" : "zio\/stream\/ZStream.html#interruptAfter(duration:zio.Duration):zio.stream.ZStream[Rwithzio.Has[zio.Clock],E,O]", "kind" : "final def"}, {"label" : "interruptWhen", "tail" : "(p: Promise[E1, _]): ZStream[R, E1, O]", "member" : "zio.stream.ZStream.interruptWhen", "link" : "zio\/stream\/ZStream.html#interruptWhen[E1>:E](p:zio.Promise[E1,_]):zio.stream.ZStream[R,E1,O]", "kind" : "final def"}, {"label" : "interruptWhen", "tail" : "(io: ZIO[R1, E1, Any]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.interruptWhen", "link" : "zio\/stream\/ZStream.html#interruptWhen[R1<:R,E1>:E](io:zio.ZIO[R1,E1,Any]):zio.stream.ZStream[R1,E1,O]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(start: O1, middle: O1, end: O1): ZStream[R, E, O1]", "member" : "zio.stream.ZStream.intersperse", "link" : "zio\/stream\/ZStream.html#intersperse[O1>:O](start:O1,middle:O1,end:O1):zio.stream.ZStream[R,E,O1]", "kind" : "final def"}, {"label" : "intersperse", "tail" : "(middle: O1): ZStream[R, E, O1]", "member" : "zio.stream.ZStream.intersperse", "link" : "zio\/stream\/ZStream.html#intersperse[O1>:O](middle:O1):zio.stream.ZStream[R,E,O1]", "kind" : "final def"}, {"label" : "interleaveWith", "tail" : "(that: ZStream[R1, E1, O1])(b: ZStream[R1, E1, Boolean]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.interleaveWith", "link" : "zio\/stream\/ZStream.html#interleaveWith[R1<:R,E1>:E,O1>:O](that:zio.stream.ZStream[R1,E1,O1])(b:zio.stream.ZStream[R1,E1,Boolean]):zio.stream.ZStream[R1,E1,O1]", "kind" : "final def"}, {"label" : "interleave", "tail" : "(that: ZStream[R1, E1, O1]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.interleave", "link" : "zio\/stream\/ZStream.html#interleave[R1<:R,E1>:E,O1>:O](that:zio.stream.ZStream[R1,E1,O1]):zio.stream.ZStream[R1,E1,O1]", "kind" : "final def"}, {"label" : "haltWhen", "tail" : "(p: Promise[E1, _]): ZStream[R, E1, O]", "member" : "zio.stream.ZStream.haltWhen", "link" : "zio\/stream\/ZStream.html#haltWhen[E1>:E](p:zio.Promise[E1,_]):zio.stream.ZStream[R,E1,O]", "kind" : "final def"}, {"label" : "groupedWithin", "tail" : "(chunkSize: Int, within: zio.Duration): ZStream[R with Has[Clock], E, Chunk[O]]", "member" : "zio.stream.ZStream.groupedWithin", "link" : "zio\/stream\/ZStream.html#groupedWithin(chunkSize:Int,within:zio.Duration):zio.stream.ZStream[Rwithzio.Has[zio.Clock],E,zio.Chunk[O]]", "kind" : "def"}, {"label" : "grouped", "tail" : "(chunkSize: Int): ZStream[R, E, Chunk[O]]", "member" : "zio.stream.ZStream.grouped", "link" : "zio\/stream\/ZStream.html#grouped(chunkSize:Int):zio.stream.ZStream[R,E,zio.Chunk[O]]", "kind" : "def"}, {"label" : "haltAfter", "tail" : "(duration: zio.Duration): ZStream[R with Has[Clock], E, O]", "member" : "zio.stream.ZStream.haltAfter", "link" : "zio\/stream\/ZStream.html#haltAfter(duration:zio.Duration):zio.stream.ZStream[Rwithzio.Has[zio.Clock],E,O]", "kind" : "final def"}, {"label" : "haltWhen", "tail" : "(io: ZIO[R1, E1, Any]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.haltWhen", "link" : "zio\/stream\/ZStream.html#haltWhen[R1<:R,E1>:E](io:zio.ZIO[R1,E1,Any]):zio.stream.ZStream[R1,E1,O]", "kind" : "final def"}, {"label" : "groupByKey", "tail" : "(f: (O) => K, buffer: Int): GroupBy[R, E, K, O]", "member" : "zio.stream.ZStream.groupByKey", "link" : "zio\/stream\/ZStream.html#groupByKey[K](f:O=>K,buffer:Int):zio.stream.ZStream.GroupBy[R,E,K,O]", "kind" : "final def"}, {"label" : "groupBy", "tail" : "(f: (O) => ZIO[R1, E1, (K, V)], buffer: Int): GroupBy[R1, E1, K, V]", "member" : "zio.stream.ZStream.groupBy", "link" : "zio\/stream\/ZStream.html#groupBy[R1<:R,E1>:E,K,V](f:O=>zio.ZIO[R1,E1,(K,V)],buffer:Int):zio.stream.ZStream.GroupBy[R1,E1,K,V]", "kind" : "final def"}, {"label" : "flattenTake", "tail" : "(ev: <:<[O, Take[E1, O1]]): ZStream[R, E1, O1]", "member" : "zio.stream.ZStream.flattenTake", "link" : "zio\/stream\/ZStream.html#flattenTake[E1>:E,O1](implicitev:O<:<zio.stream.Take[E1,O1]):zio.stream.ZStream[R,E1,O1]", "kind" : "final def"}, {"label" : "flattenParUnbounded", "tail" : "(outputBuffer: Int)(ev: <:<[O, ZStream[R1, E1, O1]]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.flattenParUnbounded", "link" : "zio\/stream\/ZStream.html#flattenParUnbounded[R1<:R,E1>:E,O1](outputBuffer:Int)(implicitev:O<:<zio.stream.ZStream[R1,E1,O1]):zio.stream.ZStream[R1,E1,O1]", "kind" : "def"}, {"label" : "flattenPar", "tail" : "(n: Int, outputBuffer: Int)(ev: <:<[O, ZStream[R1, E1, O1]]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.flattenPar", "link" : "zio\/stream\/ZStream.html#flattenPar[R1<:R,E1>:E,O1](n:Int,outputBuffer:Int)(implicitev:O<:<zio.stream.ZStream[R1,E1,O1]):zio.stream.ZStream[R1,E1,O1]", "kind" : "def"}, {"label" : "flattenIterables", "tail" : "(ev: <:<[O, Iterable[O1]]): ZStream[R, E, O1]", "member" : "zio.stream.ZStream.flattenIterables", "link" : "zio\/stream\/ZStream.html#flattenIterables[O1](implicitev:O<:<Iterable[O1]):zio.stream.ZStream[R,E,O1]", "kind" : "def"}, {"label" : "flattenExitOption", "tail" : "(ev: <:<[O, Exit[Option[E1], O1]]): ZStream[R, E1, O1]", "member" : "zio.stream.ZStream.flattenExitOption", "link" : "zio\/stream\/ZStream.html#flattenExitOption[E1>:E,O1](implicitev:O<:<zio.Exit[Option[E1],O1]):zio.stream.ZStream[R,E1,O1]", "kind" : "def"}, {"label" : "flattenExit", "tail" : "(ev: <:<[O, Exit[E1, O1]]): ZStream[R, E1, O1]", "member" : "zio.stream.ZStream.flattenExit", "link" : "zio\/stream\/ZStream.html#flattenExit[E1>:E,O1](implicitev:O<:<zio.Exit[E1,O1]):zio.stream.ZStream[R,E1,O1]", "kind" : "def"}, {"label" : "flattenChunks", "tail" : "(ev: <:<[O, Chunk[O1]]): ZStream[R, E, O1]", "member" : "zio.stream.ZStream.flattenChunks", "link" : "zio\/stream\/ZStream.html#flattenChunks[O1](implicitev:O<:<zio.Chunk[O1]):zio.stream.ZStream[R,E,O1]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[O, ZStream[R1, E1, O1]]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.flatten", "link" : "zio\/stream\/ZStream.html#flatten[R1<:R,E1>:E,O1](implicitev:O<:<zio.stream.ZStream[R1,E1,O1]):zio.stream.ZStream[R1,E1,O1]", "kind" : "def"}, {"label" : "flatMapParSwitch", "tail" : "(n: Int, bufferSize: Int)(f: (O) => ZStream[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.flatMapParSwitch", "link" : "zio\/stream\/ZStream.html#flatMapParSwitch[R1<:R,E1>:E,O2](n:Int,bufferSize:Int)(f:O=>zio.stream.ZStream[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "flatMapPar", "tail" : "(n: Int, outputBuffer: Int)(f: (O) => ZStream[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.flatMapPar", "link" : "zio\/stream\/ZStream.html#flatMapPar[R1<:R,E1>:E,O2](n:Int,outputBuffer:Int)(f:O=>zio.stream.ZStream[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f0: (O) => ZStream[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.flatMap", "link" : "zio\/stream\/ZStream.html#flatMap[R1<:R,E1>:E,O2](f0:O=>zio.stream.ZStream[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "def"}, {"label" : "fixed", "tail" : "(duration: zio.Duration): ZStream[R with Has[Clock], E, O]", "member" : "zio.stream.ZStream.fixed", "link" : "zio\/stream\/ZStream.html#fixed(duration:zio.Duration):zio.stream.ZStream[Rwithzio.Has[zio.Clock],E,O]", "kind" : "final def"}, {"label" : "filterNot", "tail" : "(pred: (O) => Boolean): ZStream[R, E, O]", "member" : "zio.stream.ZStream.filterNot", "link" : "zio\/stream\/ZStream.html#filterNot(pred:O=>Boolean):zio.stream.ZStream[R,E,O]", "kind" : "final def"}, {"label" : "filterZIO", "tail" : "(f: (O) => ZIO[R1, E1, Boolean]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.filterZIO", "link" : "zio\/stream\/ZStream.html#filterZIO[R1<:R,E1>:E](f:O=>zio.ZIO[R1,E1,Boolean]):zio.stream.ZStream[R1,E1,O]", "kind" : "def"}, {"label" : "filterM", "tail" : "(f: (O) => ZIO[R1, E1, Boolean]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.filterM", "link" : "zio\/stream\/ZStream.html#filterM[R1<:R,E1>:E](f:O=>zio.ZIO[R1,E1,Boolean]):zio.stream.ZStream[R1,E1,O]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (O) => Boolean): ZStream[R, E, O]", "member" : "zio.stream.ZStream.filter", "link" : "zio\/stream\/ZStream.html#filter(f:O=>Boolean):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "forever", "tail" : "(): ZStream[R, E, O]", "member" : "zio.stream.ZStream.forever", "link" : "zio\/stream\/ZStream.html#forever:zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "foreachWhileManaged", "tail" : "(f: (O) => ZIO[R1, E1, Boolean]): ZManaged[R1, E1, Unit]", "member" : "zio.stream.ZStream.foreachWhileManaged", "link" : "zio\/stream\/ZStream.html#foreachWhileManaged[R1<:R,E1>:E](f:O=>zio.ZIO[R1,E1,Boolean]):zio.ZManaged[R1,E1,Unit]", "kind" : "final def"}, {"label" : "foreachWhile", "tail" : "(f: (O) => ZIO[R1, E1, Boolean]): ZIO[R1, E1, Unit]", "member" : "zio.stream.ZStream.foreachWhile", "link" : "zio\/stream\/ZStream.html#foreachWhile[R1<:R,E1>:E](f:O=>zio.ZIO[R1,E1,Boolean]):zio.ZIO[R1,E1,Unit]", "kind" : "final def"}, {"label" : "foreachManaged", "tail" : "(f: (O) => ZIO[R1, E1, Any]): ZManaged[R1, E1, Unit]", "member" : "zio.stream.ZStream.foreachManaged", "link" : "zio\/stream\/ZStream.html#foreachManaged[R1<:R,E1>:E](f:O=>zio.ZIO[R1,E1,Any]):zio.ZManaged[R1,E1,Unit]", "kind" : "final def"}, {"label" : "foreachChunkManaged", "tail" : "(f: (Chunk[O]) => ZIO[R1, E1, Any]): ZManaged[R1, E1, Unit]", "member" : "zio.stream.ZStream.foreachChunkManaged", "link" : "zio\/stream\/ZStream.html#foreachChunkManaged[R1<:R,E1>:E](f:zio.Chunk[O]=>zio.ZIO[R1,E1,Any]):zio.ZManaged[R1,E1,Unit]", "kind" : "final def"}, {"label" : "foreachChunk", "tail" : "(f: (Chunk[O]) => ZIO[R1, E1, Any]): ZIO[R1, E1, Unit]", "member" : "zio.stream.ZStream.foreachChunk", "link" : "zio\/stream\/ZStream.html#foreachChunk[R1<:R,E1>:E](f:zio.Chunk[O]=>zio.ZIO[R1,E1,Any]):zio.ZIO[R1,E1,Unit]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(f: (O) => ZIO[R1, E1, Any]): ZIO[R1, E1, Unit]", "member" : "zio.stream.ZStream.foreach", "link" : "zio\/stream\/ZStream.html#foreach[R1<:R,E1>:E](f:O=>zio.ZIO[R1,E1,Any]):zio.ZIO[R1,E1,Unit]", "kind" : "final def"}, {"label" : "foldZIO", "tail" : "(s: S)(f: (S, O) => ZIO[R1, E1, S]): ZIO[R1, E1, S]", "member" : "zio.stream.ZStream.foldZIO", "link" : "zio\/stream\/ZStream.html#foldZIO[R1<:R,E1>:E,S](s:S)(f:(S,O)=>zio.ZIO[R1,E1,S]):zio.ZIO[R1,E1,S]", "kind" : "final def"}, {"label" : "foldWhileZIO", "tail" : "(s: S)(cont: (S) => Boolean)(f: (S, O) => ZIO[R1, E1, S]): ZIO[R1, E1, S]", "member" : "zio.stream.ZStream.foldWhileZIO", "link" : "zio\/stream\/ZStream.html#foldWhileZIO[R1<:R,E1>:E,S](s:S)(cont:S=>Boolean)(f:(S,O)=>zio.ZIO[R1,E1,S]):zio.ZIO[R1,E1,S]", "kind" : "final def"}, {"label" : "foldWhileManagedZIO", "tail" : "(s: S)(cont: (S) => Boolean)(f: (S, O) => ZIO[R1, E1, S]): ZManaged[R1, E1, S]", "member" : "zio.stream.ZStream.foldWhileManagedZIO", "link" : "zio\/stream\/ZStream.html#foldWhileManagedZIO[R1<:R,E1>:E,S](s:S)(cont:S=>Boolean)(f:(S,O)=>zio.ZIO[R1,E1,S]):zio.ZManaged[R1,E1,S]", "kind" : "final def"}, {"label" : "foldWhileManagedM", "tail" : "(s: S)(cont: (S) => Boolean)(f: (S, O) => ZIO[R1, E1, S]): ZManaged[R1, E1, S]", "member" : "zio.stream.ZStream.foldWhileManagedM", "link" : "zio\/stream\/ZStream.html#foldWhileManagedM[R1<:R,E1>:E,S](s:S)(cont:S=>Boolean)(f:(S,O)=>zio.ZIO[R1,E1,S]):zio.ZManaged[R1,E1,S]", "kind" : "final def"}, {"label" : "foldWhileManaged", "tail" : "(s: S)(cont: (S) => Boolean)(f: (S, O) => S): ZManaged[R, E, S]", "member" : "zio.stream.ZStream.foldWhileManaged", "link" : "zio\/stream\/ZStream.html#foldWhileManaged[S](s:S)(cont:S=>Boolean)(f:(S,O)=>S):zio.ZManaged[R,E,S]", "kind" : "def"}, {"label" : "foldWhileM", "tail" : "(s: S)(cont: (S) => Boolean)(f: (S, O) => ZIO[R1, E1, S]): ZIO[R1, E1, S]", "member" : "zio.stream.ZStream.foldWhileM", "link" : "zio\/stream\/ZStream.html#foldWhileM[R1<:R,E1>:E,S](s:S)(cont:S=>Boolean)(f:(S,O)=>zio.ZIO[R1,E1,S]):zio.ZIO[R1,E1,S]", "kind" : "final def"}, {"label" : "foldWhile", "tail" : "(s: S)(cont: (S) => Boolean)(f: (S, O) => S): ZIO[R, E, S]", "member" : "zio.stream.ZStream.foldWhile", "link" : "zio\/stream\/ZStream.html#foldWhile[S](s:S)(cont:S=>Boolean)(f:(S,O)=>S):zio.ZIO[R,E,S]", "kind" : "final def"}, {"label" : "foldManagedZIO", "tail" : "(s: S)(f: (S, O) => ZIO[R1, E1, S]): ZManaged[R1, E1, S]", "member" : "zio.stream.ZStream.foldManagedZIO", "link" : "zio\/stream\/ZStream.html#foldManagedZIO[R1<:R,E1>:E,S](s:S)(f:(S,O)=>zio.ZIO[R1,E1,S]):zio.ZManaged[R1,E1,S]", "kind" : "final def"}, {"label" : "foldManagedM", "tail" : "(s: S)(f: (S, O) => ZIO[R1, E1, S]): ZManaged[R1, E1, S]", "member" : "zio.stream.ZStream.foldManagedM", "link" : "zio\/stream\/ZStream.html#foldManagedM[R1<:R,E1>:E,S](s:S)(f:(S,O)=>zio.ZIO[R1,E1,S]):zio.ZManaged[R1,E1,S]", "kind" : "final def"}, {"label" : "foldManaged", "tail" : "(s: S)(f: (S, O) => S): ZManaged[R, E, S]", "member" : "zio.stream.ZStream.foldManaged", "link" : "zio\/stream\/ZStream.html#foldManaged[S](s:S)(f:(S,O)=>S):zio.ZManaged[R,E,S]", "kind" : "final def"}, {"label" : "foldM", "tail" : "(s: S)(f: (S, O) => ZIO[R1, E1, S]): ZIO[R1, E1, S]", "member" : "zio.stream.ZStream.foldM", "link" : "zio\/stream\/ZStream.html#foldM[R1<:R,E1>:E,S](s:S)(f:(S,O)=>zio.ZIO[R1,E1,S]):zio.ZIO[R1,E1,S]", "kind" : "final def"}, {"label" : "fold", "tail" : "(s: S)(f: (S, O) => S): ZIO[R, E, S]", "member" : "zio.stream.ZStream.fold", "link" : "zio\/stream\/ZStream.html#fold[S](s:S)(f:(S,O)=>S):zio.ZIO[R,E,S]", "kind" : "final def"}, {"label" : "ensuringFirst", "tail" : "(fin: ZIO[R1, Nothing, Any]): ZStream[R1, E, O]", "member" : "zio.stream.ZStream.ensuringFirst", "link" : "zio\/stream\/ZStream.html#ensuringFirst[R1<:R](fin:zio.ZIO[R1,Nothing,Any]):zio.stream.ZStream[R1,E,O]", "kind" : "final def"}, {"label" : "ensuring", "tail" : "(fin: ZIO[R1, Nothing, Any]): ZStream[R1, E, O]", "member" : "zio.stream.ZStream.ensuring", "link" : "zio\/stream\/ZStream.html#ensuring[R1<:R](fin:zio.ZIO[R1,Nothing,Any]):zio.stream.ZStream[R1,E,O]", "kind" : "final def"}, {"label" : "either", "tail" : "(ev: CanFail[E]): ZStream[R, Nothing, Either[E, O]]", "member" : "zio.stream.ZStream.either", "link" : "zio\/stream\/ZStream.html#either(implicitev:zio.CanFail[E]):zio.stream.ZStream[R,Nothing,Either[E,O]]", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(pred: (O) => Boolean): ZStream[R, E, O]", "member" : "zio.stream.ZStream.dropWhile", "link" : "zio\/stream\/ZStream.html#dropWhile(pred:O=>Boolean):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "dropUntil", "tail" : "(pred: (O) => Boolean): ZStream[R, E, O]", "member" : "zio.stream.ZStream.dropUntil", "link" : "zio\/stream\/ZStream.html#dropUntil(pred:O=>Boolean):zio.stream.ZStream[R,E,O]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Long): ZStream[R, E, O]", "member" : "zio.stream.ZStream.drop", "link" : "zio\/stream\/ZStream.html#drop(n:Long):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "drainFork", "tail" : "(other: ZStream[R1, E1, Any]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.drainFork", "link" : "zio\/stream\/ZStream.html#drainFork[R1<:R,E1>:E](other:zio.stream.ZStream[R1,E1,Any]):zio.stream.ZStream[R1,E1,O]", "kind" : "final def"}, {"label" : "drain", "tail" : "(): ZStream[R, E, Nothing]", "member" : "zio.stream.ZStream.drain", "link" : "zio\/stream\/ZStream.html#drain:zio.stream.ZStream[R,E,Nothing]", "kind" : "final def"}, {"label" : "distributedWithDynamic", "tail" : "(maximumLag: Int, decide: (O) => UIO[(UniqueKey) => Boolean], done: (Exit[Option[E], Nothing]) => UIO[Any]): ZManaged[R, Nothing, UIO[(UniqueKey, Dequeue[Exit[Option[E], O]])]]", "member" : "zio.stream.ZStream.distributedWithDynamic", "link" : "zio\/stream\/ZStream.html#distributedWithDynamic(maximumLag:Int,decide:O=>zio.UIO[zio.internal.UniqueKey=>Boolean],done:zio.Exit[Option[E],Nothing]=>zio.UIO[Any]):zio.ZManaged[R,Nothing,zio.UIO[(zio.internal.UniqueKey,zio.Dequeue[zio.Exit[Option[E],O]])]]", "kind" : "final def"}, {"label" : "distributedWith", "tail" : "(n: Int, maximumLag: Int, decide: (O) => UIO[(Int) => Boolean]): ZManaged[R, Nothing, List[Dequeue[Exit[Option[E1], O]]]]", "member" : "zio.stream.ZStream.distributedWith", "link" : "zio\/stream\/ZStream.html#distributedWith[E1>:E](n:Int,maximumLag:Int,decide:O=>zio.UIO[Int=>Boolean]):zio.ZManaged[R,Nothing,List[zio.Dequeue[zio.Exit[Option[E1],O]]]]", "kind" : "final def"}, {"label" : "crossRight", "tail" : "(that: ZStream[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.crossRight", "link" : "zio\/stream\/ZStream.html#crossRight[R1<:R,E1>:E,O2](that:zio.stream.ZStream[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "crossLeft", "tail" : "(that: ZStream[R1, E1, O2]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.crossLeft", "link" : "zio\/stream\/ZStream.html#crossLeft[R1<:R,E1>:E,O2](that:zio.stream.ZStream[R1,E1,O2]):zio.stream.ZStream[R1,E1,O]", "kind" : "final def"}, {"label" : "cross", "tail" : "(that: ZStream[R1, E1, O2])(zippable: Zippable[O, O2]): ZStream[R1, E1, Out]", "member" : "zio.stream.ZStream.cross", "link" : "zio\/stream\/ZStream.html#cross[R1<:R,E1>:E,O2](that:zio.stream.ZStream[R1,E1,O2])(implicitzippable:zio.Zippable[O,O2]):zio.stream.ZStream[R1,E1,zippable.Out]", "kind" : "final def"}, {"label" : "crossWith", "tail" : "(that: ZStream[R1, E1, O2])(f: (O, O2) => C): ZStream[R1, E1, C]", "member" : "zio.stream.ZStream.crossWith", "link" : "zio\/stream\/ZStream.html#crossWith[R1<:R,E1>:E,O2,C](that:zio.stream.ZStream[R1,E1,O2])(f:(O,O2)=>C):zio.stream.ZStream[R1,E1,C]", "kind" : "final def"}, {"label" : "concat", "tail" : "(that: => ZStream[R1, E1, O1]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.concat", "link" : "zio\/stream\/ZStream.html#concat[R1<:R,E1>:E,O1>:O](that:=>zio.stream.ZStream[R1,E1,O1]):zio.stream.ZStream[R1,E1,O1]", "kind" : "def"}, {"label" : "combineChunks", "tail" : "(that: ZStream[R1, E1, O2])(s: S)(f: (S, ZIO[R, Option[E], Chunk[O]], ZIO[R1, Option[E1], Chunk[O2]]) => ZIO[R1, Nothing, Exit[Option[E1], (Chunk[O3], S)]]): ZStream[R1, E1, O3]", "member" : "zio.stream.ZStream.combineChunks", "link" : "zio\/stream\/ZStream.html#combineChunks[R1<:R,E1>:E,S,O2,O3](that:zio.stream.ZStream[R1,E1,O2])(s:S)(f:(S,zio.ZIO[R,Option[E],zio.Chunk[O]],zio.ZIO[R1,Option[E1],zio.Chunk[O2]])=>zio.ZIO[R1,Nothing,zio.Exit[Option[E1],(zio.Chunk[O3],S)]]):zio.stream.ZStream[R1,E1,O3]", "kind" : "final def"}, {"label" : "combine", "tail" : "(that: ZStream[R1, E1, O2])(s: S)(f: (S, ZIO[R, Option[E], O], ZIO[R1, Option[E1], O2]) => ZIO[R1, Nothing, Exit[Option[E1], (O3, S)]]): ZStream[R1, E1, O3]", "member" : "zio.stream.ZStream.combine", "link" : "zio\/stream\/ZStream.html#combine[R1<:R,E1>:E,S,O2,O3](that:zio.stream.ZStream[R1,E1,O2])(s:S)(f:(S,zio.ZIO[R,Option[E],O],zio.ZIO[R1,Option[E1],O2])=>zio.ZIO[R1,Nothing,zio.Exit[Option[E1],(O3,S)]]):zio.stream.ZStream[R1,E1,O3]", "kind" : "final def"}, {"label" : "collectWhileSuccess", "tail" : "(ev: <:<[O, Exit[L1, O1]]): ZStream[R, E, O1]", "member" : "zio.stream.ZStream.collectWhileSuccess", "link" : "zio\/stream\/ZStream.html#collectWhileSuccess[L1,O1](implicitev:O<:<zio.Exit[L1,O1]):zio.stream.ZStream[R,E,O1]", "kind" : "final def"}, {"label" : "collectWhileRight", "tail" : "(ev: <:<[O, Either[L1, O1]]): ZStream[R, E, O1]", "member" : "zio.stream.ZStream.collectWhileRight", "link" : "zio\/stream\/ZStream.html#collectWhileRight[L1,O1](implicitev:O<:<Either[L1,O1]):zio.stream.ZStream[R,E,O1]", "kind" : "final def"}, {"label" : "collectWhileSome", "tail" : "(ev: <:<[O, Option[O1]]): ZStream[R, E, O1]", "member" : "zio.stream.ZStream.collectWhileSome", "link" : "zio\/stream\/ZStream.html#collectWhileSome[O1](implicitev:O<:<Option[O1]):zio.stream.ZStream[R,E,O1]", "kind" : "final def"}, {"label" : "collectWhileZIO", "tail" : "(pf: PartialFunction[O, ZIO[R1, E1, O2]]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.collectWhileZIO", "link" : "zio\/stream\/ZStream.html#collectWhileZIO[R1<:R,E1>:E,O2](pf:PartialFunction[O,zio.ZIO[R1,E1,O2]]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "collectWhileM", "tail" : "(pf: PartialFunction[O, ZIO[R1, E1, O2]]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.collectWhileM", "link" : "zio\/stream\/ZStream.html#collectWhileM[R1<:R,E1>:E,O2](pf:PartialFunction[O,zio.ZIO[R1,E1,O2]]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "collectWhileLeft", "tail" : "(ev: <:<[O, Either[L1, O1]]): ZStream[R, E, L1]", "member" : "zio.stream.ZStream.collectWhileLeft", "link" : "zio\/stream\/ZStream.html#collectWhileLeft[L1,O1](implicitev:O<:<Either[L1,O1]):zio.stream.ZStream[R,E,L1]", "kind" : "final def"}, {"label" : "collectWhile", "tail" : "(p: PartialFunction[O, O2]): ZStream[R, E, O2]", "member" : "zio.stream.ZStream.collectWhile", "link" : "zio\/stream\/ZStream.html#collectWhile[O2](p:PartialFunction[O,O2]):zio.stream.ZStream[R,E,O2]", "kind" : "def"}, {"label" : "collectZIO", "tail" : "(pf: PartialFunction[O, ZIO[R1, E1, O1]]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.collectZIO", "link" : "zio\/stream\/ZStream.html#collectZIO[R1<:R,E1>:E,O1](pf:PartialFunction[O,zio.ZIO[R1,E1,O1]]):zio.stream.ZStream[R1,E1,O1]", "kind" : "final def"}, {"label" : "collectM", "tail" : "(pf: PartialFunction[O, ZIO[R1, E1, O1]]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.collectM", "link" : "zio\/stream\/ZStream.html#collectM[R1<:R,E1>:E,O1](pf:PartialFunction[O,zio.ZIO[R1,E1,O1]]):zio.stream.ZStream[R1,E1,O1]", "kind" : "final def"}, {"label" : "collectRight", "tail" : "(ev: <:<[O, Either[L1, O1]]): ZStream[R, E, O1]", "member" : "zio.stream.ZStream.collectRight", "link" : "zio\/stream\/ZStream.html#collectRight[L1,O1](implicitev:O<:<Either[L1,O1]):zio.stream.ZStream[R,E,O1]", "kind" : "final def"}, {"label" : "collectSuccess", "tail" : "(ev: <:<[O, Exit[L1, O1]]): ZStream[R, E, O1]", "member" : "zio.stream.ZStream.collectSuccess", "link" : "zio\/stream\/ZStream.html#collectSuccess[L1,O1](implicitev:O<:<zio.Exit[L1,O1]):zio.stream.ZStream[R,E,O1]", "kind" : "final def"}, {"label" : "collectSome", "tail" : "(ev: <:<[O, Option[O1]]): ZStream[R, E, O1]", "member" : "zio.stream.ZStream.collectSome", "link" : "zio\/stream\/ZStream.html#collectSome[O1](implicitev:O<:<Option[O1]):zio.stream.ZStream[R,E,O1]", "kind" : "final def"}, {"label" : "collectLeft", "tail" : "(ev: <:<[O, Either[L1, O1]]): ZStream[R, E, L1]", "member" : "zio.stream.ZStream.collectLeft", "link" : "zio\/stream\/ZStream.html#collectLeft[L1,O1](implicitev:O<:<Either[L1,O1]):zio.stream.ZStream[R,E,L1]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[O, O1]): ZStream[R, E, O1]", "member" : "zio.stream.ZStream.collect", "link" : "zio\/stream\/ZStream.html#collect[O1](pf:PartialFunction[O,O1]):zio.stream.ZStream[R,E,O1]", "kind" : "def"}, {"label" : "chunks", "tail" : "(): ZStream[R, E, Chunk[O]]", "member" : "zio.stream.ZStream.chunks", "link" : "zio\/stream\/ZStream.html#chunks:zio.stream.ZStream[R,E,zio.Chunk[O]]", "kind" : "def"}, {"label" : "chunkN", "tail" : "(n: Int): ZStream[R, E, O]", "member" : "zio.stream.ZStream.chunkN", "link" : "zio\/stream\/ZStream.html#chunkN(n:Int):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "changesWithZIO", "tail" : "(f: (O, O) => ZIO[R1, E1, Boolean]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.changesWithZIO", "link" : "zio\/stream\/ZStream.html#changesWithZIO[R1<:R,E1>:E](f:(O,O)=>zio.ZIO[R1,E1,Boolean]):zio.stream.ZStream[R1,E1,O]", "kind" : "def"}, {"label" : "changesWith", "tail" : "(f: (O, O) => Boolean): ZStream[R, E, O]", "member" : "zio.stream.ZStream.changesWith", "link" : "zio\/stream\/ZStream.html#changesWith(f:(O,O)=>Boolean):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "changes", "tail" : "(): ZStream[R, E, O]", "member" : "zio.stream.ZStream.changes", "link" : "zio\/stream\/ZStream.html#changes:zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "catchSomeCause", "tail" : "(pf: PartialFunction[Cause[E], ZStream[R1, E1, O1]]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.catchSomeCause", "link" : "zio\/stream\/ZStream.html#catchSomeCause[R1<:R,E1>:E,O1>:O](pf:PartialFunction[zio.Cause[E],zio.stream.ZStream[R1,E1,O1]]):zio.stream.ZStream[R1,E1,O1]", "kind" : "final def"}, {"label" : "catchSome", "tail" : "(pf: PartialFunction[E, ZStream[R1, E1, O1]]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.catchSome", "link" : "zio\/stream\/ZStream.html#catchSome[R1<:R,E1>:E,O1>:O](pf:PartialFunction[E,zio.stream.ZStream[R1,E1,O1]]):zio.stream.ZStream[R1,E1,O1]", "kind" : "final def"}, {"label" : "catchAllCause", "tail" : "(f: (Cause[E]) => ZStream[R1, E2, O1]): ZStream[R1, E2, O1]", "member" : "zio.stream.ZStream.catchAllCause", "link" : "zio\/stream\/ZStream.html#catchAllCause[R1<:R,E2,O1>:O](f:zio.Cause[E]=>zio.stream.ZStream[R1,E2,O1]):zio.stream.ZStream[R1,E2,O1]", "kind" : "final def"}, {"label" : "catchAll", "tail" : "(f: (E) => ZStream[R1, E2, O1])(ev: CanFail[E]): ZStream[R1, E2, O1]", "member" : "zio.stream.ZStream.catchAll", "link" : "zio\/stream\/ZStream.html#catchAll[R1<:R,E2,O1>:O](f:E=>zio.stream.ZStream[R1,E2,O1])(implicitev:zio.CanFail[E]):zio.stream.ZStream[R1,E2,O1]", "kind" : "final def"}, {"label" : "bufferUnbounded", "tail" : "(): ZStream[R, E, O]", "member" : "zio.stream.ZStream.bufferUnbounded", "link" : "zio\/stream\/ZStream.html#bufferUnbounded:zio.stream.ZStream[R,E,O]", "kind" : "final def"}, {"label" : "bufferSliding", "tail" : "(capacity: Int): ZStream[R, E, O]", "member" : "zio.stream.ZStream.bufferSliding", "link" : "zio\/stream\/ZStream.html#bufferSliding(capacity:Int):zio.stream.ZStream[R,E,O]", "kind" : "final def"}, {"label" : "bufferDropping", "tail" : "(capacity: Int): ZStream[R, E, O]", "member" : "zio.stream.ZStream.bufferDropping", "link" : "zio\/stream\/ZStream.html#bufferDropping(capacity:Int):zio.stream.ZStream[R,E,O]", "kind" : "final def"}, {"label" : "buffer", "tail" : "(capacity: Int): ZStream[R, E, O]", "member" : "zio.stream.ZStream.buffer", "link" : "zio\/stream\/ZStream.html#buffer(capacity:Int):zio.stream.ZStream[R,E,O]", "kind" : "final def"}, {"label" : "broadcastedQueuesDynamic", "tail" : "(maximumLag: Int): ZManaged[R, Nothing, ZManaged[Any, Nothing, Dequeue[Take[E, O]]]]", "member" : "zio.stream.ZStream.broadcastedQueuesDynamic", "link" : "zio\/stream\/ZStream.html#broadcastedQueuesDynamic(maximumLag:Int):zio.ZManaged[R,Nothing,zio.ZManaged[Any,Nothing,zio.Dequeue[zio.stream.Take[E,O]]]]", "kind" : "final def"}, {"label" : "broadcastedQueues", "tail" : "(n: Int, maximumLag: Int): ZManaged[R, Nothing, List[Dequeue[Take[E, O]]]]", "member" : "zio.stream.ZStream.broadcastedQueues", "link" : "zio\/stream\/ZStream.html#broadcastedQueues(n:Int,maximumLag:Int):zio.ZManaged[R,Nothing,List[zio.Dequeue[zio.stream.Take[E,O]]]]", "kind" : "final def"}, {"label" : "broadcastDynamic", "tail" : "(maximumLag: Int): ZManaged[R, Nothing, ZStream[Any, E, O]]", "member" : "zio.stream.ZStream.broadcastDynamic", "link" : "zio\/stream\/ZStream.html#broadcastDynamic(maximumLag:Int):zio.ZManaged[R,Nothing,zio.stream.ZStream[Any,E,O]]", "kind" : "final def"}, {"label" : "broadcast", "tail" : "(n: Int, maximumLag: Int): ZManaged[R, Nothing, List[ZStream[Any, E, O]]]", "member" : "zio.stream.ZStream.broadcast", "link" : "zio\/stream\/ZStream.html#broadcast(n:Int,maximumLag:Int):zio.ZManaged[R,Nothing,List[zio.stream.ZStream[Any,E,O]]]", "kind" : "final def"}, {"label" : "bimap", "tail" : "(f: (E) => E1, g: (O) => O1)(ev: CanFail[E]): ZStream[R, E1, O1]", "member" : "zio.stream.ZStream.bimap", "link" : "zio\/stream\/ZStream.html#bimap[E1,O1](f:E=>E1,g:O=>O1)(implicitev:zio.CanFail[E]):zio.stream.ZStream[R,E1,O1]", "kind" : "def"}, {"label" : "as", "tail" : "(o2: => O2): ZStream[R, E, O2]", "member" : "zio.stream.ZStream.as", "link" : "zio\/stream\/ZStream.html#as[O2](o2:=>O2):zio.stream.ZStream[R,E,O2]", "kind" : "def"}, {"label" : "aggregateAsyncWithinEither", "tail" : "(transducer: ZTransducer[R1, E1, O, P], schedule: Schedule[R1, Chunk[P], Q]): ZStream[R1 with Has[Clock], E1, Either[Q, P]]", "member" : "zio.stream.ZStream.aggregateAsyncWithinEither", "link" : "zio\/stream\/ZStream.html#aggregateAsyncWithinEither[R1<:R,E1>:E,P,Q](transducer:zio.stream.ZTransducer[R1,E1,O,P],schedule:zio.Schedule[R1,zio.Chunk[P],Q]):zio.stream.ZStream[R1withzio.Has[zio.Clock],E1,Either[Q,P]]", "kind" : "final def"}, {"label" : "aggregateAsyncWithin", "tail" : "(transducer: ZTransducer[R1, E1, O, P], schedule: Schedule[R1, Chunk[P], Any]): ZStream[R1 with Has[Clock], E1, P]", "member" : "zio.stream.ZStream.aggregateAsyncWithin", "link" : "zio\/stream\/ZStream.html#aggregateAsyncWithin[R1<:R,E1>:E,P](transducer:zio.stream.ZTransducer[R1,E1,O,P],schedule:zio.Schedule[R1,zio.Chunk[P],Any]):zio.stream.ZStream[R1withzio.Has[zio.Clock],E1,P]", "kind" : "final def"}, {"label" : "aggregateAsync", "tail" : "(transducer: ZTransducer[R1, E1, O, P]): ZStream[R1 with Has[Clock], E1, P]", "member" : "zio.stream.ZStream.aggregateAsync", "link" : "zio\/stream\/ZStream.html#aggregateAsync[R1<:R,E1>:E,P](transducer:zio.stream.ZTransducer[R1,E1,O,P]):zio.stream.ZStream[R1withzio.Has[zio.Clock],E1,P]", "kind" : "final def"}, {"label" : "aggregate", "tail" : "(transducer: ZTransducer[R1, E1, O, P]): ZStream[R1, E1, P]", "member" : "zio.stream.ZStream.aggregate", "link" : "zio\/stream\/ZStream.html#aggregate[R1<:R,E1>:E,P](transducer:zio.stream.ZTransducer[R1,E1,O,P]):zio.stream.ZStream[R1,E1,P]", "kind" : "def"}, {"label" : "absolve", "tail" : "(ev: <:<[ZStream[R, E, O], ZStream[R1, E1, Either[E1, O1]]]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.absolve", "link" : "zio\/stream\/ZStream.html#absolve[R1<:R,E1,O1](implicitev:zio.stream.ZStream[R,E,O]<:<zio.stream.ZStream[R1,E1,Either[E1,O1]]):zio.stream.ZStream[R1,E1,O1]", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: => ZStream[R1, E2, O1])(ev: CanFail[E]): ZStream[R1, E2, O1]", "member" : "zio.stream.ZStream.<>", "link" : "zio\/stream\/ZStream.html#<>[R1<:R,E2,O1>:O](that:=>zio.stream.ZStream[R1,E2,O1])(implicitev:zio.CanFail[E]):zio.stream.ZStream[R1,E2,O1]", "kind" : "final def"}, {"label" : "++", "tail" : "(that: => ZStream[R1, E1, O1]): ZStream[R1, E1, O1]", "member" : "zio.stream.ZStream.++", "link" : "zio\/stream\/ZStream.html#++[R1<:R,E1>:E,O1>:O](that:=>zio.stream.ZStream[R1,E1,O1]):zio.stream.ZStream[R1,E1,O1]", "kind" : "def"}, {"label" : ">>>", "tail" : "(sink: ZSink[R1, E1, O2, Any, Z]): ZIO[R1, E1, Z]", "member" : "zio.stream.ZStream.>>>", "link" : "zio\/stream\/ZStream.html#>>>[R1<:R,E1>:E,O2>:O,Z](sink:zio.stream.ZSink[R1,E1,O2,Any,Z]):zio.ZIO[R1,E1,Z]", "kind" : "def"}, {"label" : ">>>", "tail" : "(transducer: ZTransducer[R1, E1, O2, O3]): ZStream[R1, E1, O3]", "member" : "zio.stream.ZStream.>>>", "link" : "zio\/stream\/ZStream.html#>>>[R1<:R,E1>:E,O2>:O,O3](transducer:zio.stream.ZTransducer[R1,E1,O2,O3]):zio.stream.ZStream[R1,E1,O3]", "kind" : "def"}, {"label" : ">>=", "tail" : "(f0: (O) => ZStream[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.>>=", "link" : "zio\/stream\/ZStream.html#>>=[R1<:R,E1>:E,O2](f0:O=>zio.stream.ZStream[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "def"}, {"label" : "&>", "tail" : "(that: ZStream[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.&>", "link" : "zio\/stream\/ZStream.html#&>[R1<:R,E1>:E,O2](that:zio.stream.ZStream[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "<&", "tail" : "(that: ZStream[R1, E1, O2]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.<&", "link" : "zio\/stream\/ZStream.html#<&[R1<:R,E1>:E,O2](that:zio.stream.ZStream[R1,E1,O2]):zio.stream.ZStream[R1,E1,O]", "kind" : "final def"}, {"label" : "<&>", "tail" : "(that: ZStream[R1, E1, O2])(zippable: Zippable[O, O2]): ZStream[R1, E1, Out]", "member" : "zio.stream.ZStream.<&>", "link" : "zio\/stream\/ZStream.html#<&>[R1<:R,E1>:E,O2](that:zio.stream.ZStream[R1,E1,O2])(implicitzippable:zio.Zippable[O,O2]):zio.stream.ZStream[R1,E1,zippable.Out]", "kind" : "final def"}, {"label" : "*>", "tail" : "(that: ZStream[R1, E1, O2]): ZStream[R1, E1, O2]", "member" : "zio.stream.ZStream.*>", "link" : "zio\/stream\/ZStream.html#*>[R1<:R,E1>:E,O2](that:zio.stream.ZStream[R1,E1,O2]):zio.stream.ZStream[R1,E1,O2]", "kind" : "final def"}, {"label" : "<*", "tail" : "(that: ZStream[R1, E1, O2]): ZStream[R1, E1, O]", "member" : "zio.stream.ZStream.<*", "link" : "zio\/stream\/ZStream.html#<*[R1<:R,E1>:E,O2](that:zio.stream.ZStream[R1,E1,O2]):zio.stream.ZStream[R1,E1,O]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(that: ZStream[R1, E1, O2])(zippable: Zippable[O, O2]): ZStream[R1, E1, Out]", "member" : "zio.stream.ZStream.<*>", "link" : "zio\/stream\/ZStream.html#<*>[R1<:R,E1>:E,O2](that:zio.stream.ZStream[R1,E1,O2])(implicitzippable:zio.Zippable[O,O2]):zio.stream.ZStream[R1,E1,zippable.Out]", "kind" : "final def"}, {"member" : "zio.stream.ZStream#<init>", "error" : "unsupported entity"}, {"label" : "process", "tail" : ": ZManaged[R, Nothing, ZIO[R, Option[E], Chunk[O]]]", "member" : "zio.stream.ZStream.process", "link" : "zio\/stream\/ZStream.html#process:zio.ZManaged[R,Nothing,zio.ZIO[R,Option[E],zio.Chunk[O]]]", "kind" : "val"}, {"label" : "inject", "tail" : "(layers: ZLayer[_, E1, _]*): ZStream[Any, E1, O]", "member" : "zio.stream.ZStreamVersionSpecific.inject", "link" : "zio\/stream\/ZStream.html#inject[E1>:E](layers:zio.ZLayer[_,E1,_]*):zio.stream.ZStream[Any,E1,O]", "kind" : "macro def"}, {"label" : "injectSome", "tail" : "(): ProvideSomeLayerStreamPartiallyApplied[R0, R, E, O]", "member" : "zio.stream.ZStreamVersionSpecific.injectSome", "link" : "zio\/stream\/ZStream.html#injectSome[R0<:zio.Has[_]]:zio.stream.ProvideSomeLayerStreamPartiallyApplied[R0,R,E,O]", "kind" : "def"}, {"label" : "injectCustom", "tail" : "(layers: ZLayer[_, E1, _]*): ZStream[zio.ZEnv, E1, O]", "member" : "zio.stream.ZStreamVersionSpecific.injectCustom", "link" : "zio\/stream\/ZStream.html#injectCustom[E1>:E](layers:zio.ZLayer[_,E1,_]*):zio.stream.ZStream[zio.ZEnv,E1,O]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/ZStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/ZStream.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/ZStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/ZStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/ZStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/ZStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/ZStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/ZStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/ZStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/ZStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/ZStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/ZStream.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/ZStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/ZStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/ZStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/ZStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "ZStreamConstructorPlatformSpecific", "tail" : "", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.ZStreamConstructorPlatformSpecific", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#ZStreamConstructorPlatformSpecificextendsZStreamPlatformSpecificConstructors.this.ZStreamConstructorLowPriority1", "kind" : "trait"}, {"label" : "Connection", "tail" : "", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.Connection", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#Connection", "kind" : "object"}, {"label" : "Connection", "tail" : "", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.Connection", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#ConnectionextendsAnyRef", "kind" : "class"}, {"label" : "SortedByKey", "tail" : "", "member" : "zio.stream.ZStream.SortedByKey", "link" : "zio\/stream\/ZStream$.html#SortedByKey[R,E,K,A]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "Emit", "tail" : "", "member" : "zio.stream.ZStream.Emit", "link" : "zio\/stream\/ZStream$.html#Emit[+R,-E,-A,+B]extendszio.ZIO[R,Option[E],zio.Chunk[A]]=>B", "kind" : "trait"}, {"label" : "SyntaxOps", "tail" : "", "member" : "zio.stream.ZStream.SyntaxOps", "link" : "zio\/stream\/ZStream$.html#SyntaxOps[-R,+E,O]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "RefineToOrDieOps", "tail" : "", "member" : "zio.stream.ZStream.RefineToOrDieOps", "link" : "zio\/stream\/ZStream$.html#RefineToOrDieOps[R,E<:Throwable,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "TerminationStrategy", "tail" : "", "member" : "zio.stream.ZStream.TerminationStrategy", "link" : "zio\/stream\/ZStream$.html#TerminationStrategy", "kind" : "object"}, {"label" : "TerminationStrategy", "tail" : "", "member" : "zio.stream.ZStream.TerminationStrategy", "link" : "zio\/stream\/ZStream$.html#TerminationStrategyextendsAnyRef", "kind" : "sealed trait"}, {"label" : "WhenCaseZIO", "tail" : "", "member" : "zio.stream.ZStream.WhenCaseZIO", "link" : "zio\/stream\/ZStream$.html#WhenCaseZIO[R,E,A]extendsAnyVal", "kind" : "final class"}, {"label" : "WhenZIO", "tail" : "", "member" : "zio.stream.ZStream.WhenZIO", "link" : "zio\/stream\/ZStream$.html#WhenZIO[R,E]extendsAnyVal", "kind" : "final class"}, {"label" : "Pull", "tail" : "", "member" : "zio.stream.ZStream.Pull", "link" : "zio\/stream\/ZStream$.html#Pull[-R,+E,+O]=zio.ZIO[R,Option[E],zio.Chunk[O]]", "kind" : "type"}, {"label" : "ZStreamConstructorLowPriority3", "tail" : "", "member" : "zio.stream.ZStream.ZStreamConstructorLowPriority3", "link" : "zio\/stream\/ZStream$.html#ZStreamConstructorLowPriority3extendsAnyRef", "kind" : "trait"}, {"label" : "ZStreamConstructorLowPriority2", "tail" : "", "member" : "zio.stream.ZStream.ZStreamConstructorLowPriority2", "link" : "zio\/stream\/ZStream$.html#ZStreamConstructorLowPriority2extendsZStream.ZStreamConstructorLowPriority3", "kind" : "trait"}, {"label" : "ZStreamConstructorLowPriority1", "tail" : "", "member" : "zio.stream.ZStream.ZStreamConstructorLowPriority1", "link" : "zio\/stream\/ZStream$.html#ZStreamConstructorLowPriority1extendsZStream.ZStreamConstructorLowPriority2", "kind" : "trait"}, {"label" : "ZStreamConstructor", "tail" : "", "member" : "zio.stream.ZStream.ZStreamConstructor", "link" : "zio\/stream\/ZStream$.html#ZStreamConstructor", "kind" : "object"}, {"label" : "ZStreamConstructor", "tail" : "", "member" : "zio.stream.ZStream.ZStreamConstructor", "link" : "zio\/stream\/ZStream$.html#ZStreamConstructor[Input]extendsAnyRef", "kind" : "trait"}, {"label" : "UpdateServiceAt", "tail" : "", "member" : "zio.stream.ZStream.UpdateServiceAt", "link" : "zio\/stream\/ZStream$.html#UpdateServiceAt[-R,+E,+A,Service]extendsAnyVal", "kind" : "final class"}, {"label" : "UpdateService", "tail" : "", "member" : "zio.stream.ZStream.UpdateService", "link" : "zio\/stream\/ZStream$.html#UpdateService[-R,+E,+O,M]extendsAnyVal", "kind" : "final class"}, {"label" : "ProvideSomeLayer", "tail" : "", "member" : "zio.stream.ZStream.ProvideSomeLayer", "link" : "zio\/stream\/ZStream$.html#ProvideSomeLayer[R0,-R,+E,+A]extendsAnyVal", "kind" : "final class"}, {"label" : "GroupBy", "tail" : "", "member" : "zio.stream.ZStream.GroupBy", "link" : "zio\/stream\/ZStream$.html#GroupBy[-R,+E,+K,+V]extendsAnyRef", "kind" : "final class"}, {"label" : "ServiceWithStreamPartiallyApplied", "tail" : "", "member" : "zio.stream.ZStream.ServiceWithStreamPartiallyApplied", "link" : "zio\/stream\/ZStream$.html#ServiceWithStreamPartiallyApplied[Service]extendsAnyVal", "kind" : "final class"}, {"label" : "ServiceWithPartiallyApplied", "tail" : "", "member" : "zio.stream.ZStream.ServiceWithPartiallyApplied", "link" : "zio\/stream\/ZStream$.html#ServiceWithPartiallyApplied[Service]extendsAnyVal", "kind" : "final class"}, {"label" : "ServiceAtPartiallyApplied", "tail" : "", "member" : "zio.stream.ZStream.ServiceAtPartiallyApplied", "link" : "zio\/stream\/ZStream$.html#ServiceAtPartiallyApplied[Service]extendsAnyVal", "kind" : "final class"}, {"label" : "AccessStreamPartiallyApplied", "tail" : "", "member" : "zio.stream.ZStream.AccessStreamPartiallyApplied", "link" : "zio\/stream\/ZStream$.html#AccessStreamPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "AccessZIOPartiallyApplied", "tail" : "", "member" : "zio.stream.ZStream.AccessZIOPartiallyApplied", "link" : "zio\/stream\/ZStream$.html#AccessZIOPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "AccessPartiallyApplied", "tail" : "", "member" : "zio.stream.ZStream.AccessPartiallyApplied", "link" : "zio\/stream\/ZStream$.html#AccessPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "zipN", "tail" : "(zStream1: ZStream[R, E, A], zStream2: ZStream[R, E, B], zStream3: ZStream[R, E, C], zStream4: ZStream[R, E, D])(f: (A, B, C, D) => F): ZStream[R, E, F]", "member" : "zio.stream.ZStream.zipN", "link" : "zio\/stream\/ZStream$.html#zipN[R,E,A,B,C,D,F](zStream1:zio.stream.ZStream[R,E,A],zStream2:zio.stream.ZStream[R,E,B],zStream3:zio.stream.ZStream[R,E,C],zStream4:zio.stream.ZStream[R,E,D])(f:(A,B,C,D)=>F):zio.stream.ZStream[R,E,F]", "kind" : "def"}, {"label" : "zipN", "tail" : "(zStream1: ZStream[R, E, A], zStream2: ZStream[R, E, B], zStream3: ZStream[R, E, C])(f: (A, B, C) => D): ZStream[R, E, D]", "member" : "zio.stream.ZStream.zipN", "link" : "zio\/stream\/ZStream$.html#zipN[R,E,A,B,C,D](zStream1:zio.stream.ZStream[R,E,A],zStream2:zio.stream.ZStream[R,E,B],zStream3:zio.stream.ZStream[R,E,C])(f:(A,B,C)=>D):zio.stream.ZStream[R,E,D]", "kind" : "def"}, {"label" : "zipN", "tail" : "(zStream1: ZStream[R, E, A], zStream2: ZStream[R, E, B])(f: (A, B) => C): ZStream[R, E, C]", "member" : "zio.stream.ZStream.zipN", "link" : "zio\/stream\/ZStream$.html#zipN[R,E,A,B,C](zStream1:zio.stream.ZStream[R,E,A],zStream2:zio.stream.ZStream[R,E,B])(f:(A,B)=>C):zio.stream.ZStream[R,E,C]", "kind" : "def"}, {"label" : "whenZIO", "tail" : "(b: ZIO[R, E, Boolean]): WhenZIO[R, E]", "member" : "zio.stream.ZStream.whenZIO", "link" : "zio\/stream\/ZStream$.html#whenZIO[R,E](b:zio.ZIO[R,E,Boolean]):zio.stream.ZStream.WhenZIO[R,E]", "kind" : "def"}, {"label" : "whenM", "tail" : "(b: ZIO[R, E, Boolean]): WhenZIO[R, E]", "member" : "zio.stream.ZStream.whenM", "link" : "zio\/stream\/ZStream$.html#whenM[R,E](b:zio.ZIO[R,E,Boolean]):zio.stream.ZStream.WhenZIO[R,E]", "kind" : "def"}, {"label" : "whenCaseZIO", "tail" : "(a: ZIO[R, E, A]): WhenCaseZIO[R, E, A]", "member" : "zio.stream.ZStream.whenCaseZIO", "link" : "zio\/stream\/ZStream$.html#whenCaseZIO[R,E,A](a:zio.ZIO[R,E,A]):zio.stream.ZStream.WhenCaseZIO[R,E,A]", "kind" : "def"}, {"label" : "whenCaseM", "tail" : "(a: ZIO[R, E, A]): WhenCaseZIO[R, E, A]", "member" : "zio.stream.ZStream.whenCaseM", "link" : "zio\/stream\/ZStream$.html#whenCaseM[R,E,A](a:zio.ZIO[R,E,A]):zio.stream.ZStream.WhenCaseZIO[R,E,A]", "kind" : "def"}, {"label" : "whenCase", "tail" : "(a: => A)(pf: PartialFunction[A, ZStream[R, E, O]]): ZStream[R, E, O]", "member" : "zio.stream.ZStream.whenCase", "link" : "zio\/stream\/ZStream$.html#whenCase[R,E,A,O](a:=>A)(pf:PartialFunction[A,zio.stream.ZStream[R,E,O]]):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "when", "tail" : "(b: => Boolean)(zStream: => ZStream[R, E, O]): ZStream[R, E, O]", "member" : "zio.stream.ZStream.when", "link" : "zio\/stream\/ZStream$.html#when[R,E,O](b:=>Boolean)(zStream:=>zio.stream.ZStream[R,E,O]):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "unwrapManaged", "tail" : "(fa: ZManaged[R, E, ZStream[R, E, A]]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.unwrapManaged", "link" : "zio\/stream\/ZStream$.html#unwrapManaged[R,E,A](fa:zio.ZManaged[R,E,zio.stream.ZStream[R,E,A]]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "unwrap", "tail" : "(fa: ZIO[R, E, ZStream[R, E, A]]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.unwrap", "link" : "zio\/stream\/ZStream$.html#unwrap[R,E,A](fa:zio.ZIO[R,E,zio.stream.ZStream[R,E,A]]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "unfoldZIO", "tail" : "(s: S)(f: (S) => ZIO[R, E, Option[(A, S)]]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.unfoldZIO", "link" : "zio\/stream\/ZStream$.html#unfoldZIO[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,Option[(A,S)]]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "unfoldM", "tail" : "(s: S)(f: (S) => ZIO[R, E, Option[(A, S)]]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.unfoldM", "link" : "zio\/stream\/ZStream$.html#unfoldM[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,Option[(A,S)]]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "unfoldChunkZIO", "tail" : "(s: S)(f: (S) => ZIO[R, E, Option[(Chunk[A], S)]]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.unfoldChunkZIO", "link" : "zio\/stream\/ZStream$.html#unfoldChunkZIO[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,Option[(zio.Chunk[A],S)]]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "unfoldChunkM", "tail" : "(s: S)(f: (S) => ZIO[R, E, Option[(Chunk[A], S)]]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.unfoldChunkM", "link" : "zio\/stream\/ZStream$.html#unfoldChunkM[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,Option[(zio.Chunk[A],S)]]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "unfoldChunk", "tail" : "(s: S)(f: (S) => Option[(Chunk[A], S)]): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStream.unfoldChunk", "link" : "zio\/stream\/ZStream$.html#unfoldChunk[S,A](s:S)(f:S=>Option[(zio.Chunk[A],S)]):zio.stream.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "unfold", "tail" : "(s: S)(f: (S) => Option[(A, S)]): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStream.unfold", "link" : "zio\/stream\/ZStream$.html#unfold[S,A](s:S)(f:S=>Option[(A,S)]):zio.stream.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "unit", "tail" : ": ZStream[Any, Nothing, Unit]", "member" : "zio.stream.ZStream.unit", "link" : "zio\/stream\/ZStream$.html#unit:zio.stream.ZStream[Any,Nothing,Unit]", "kind" : "val"}, {"label" : "tick", "tail" : "(interval: zio.Duration): ZStream[Has[Clock], Nothing, Unit]", "member" : "zio.stream.ZStream.tick", "link" : "zio\/stream\/ZStream$.html#tick(interval:zio.Duration):zio.stream.ZStream[zio.Has[zio.Clock],Nothing,Unit]", "kind" : "def"}, {"label" : "succeed", "tail" : "(a: => A): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStream.succeed", "link" : "zio\/stream\/ZStream$.html#succeed[A](a:=>A):zio.stream.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "serviceWithStream", "tail" : "(): ServiceWithStreamPartiallyApplied[Service]", "member" : "zio.stream.ZStream.serviceWithStream", "link" : "zio\/stream\/ZStream$.html#serviceWithStream[Service]:zio.stream.ZStream.ServiceWithStreamPartiallyApplied[Service]", "kind" : "def"}, {"label" : "serviceWith", "tail" : "(): ServiceWithPartiallyApplied[Service]", "member" : "zio.stream.ZStream.serviceWith", "link" : "zio\/stream\/ZStream$.html#serviceWith[Service]:zio.stream.ZStream.ServiceWithPartiallyApplied[Service]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D]): ZStream[Has[A] with Has[B] with Has[C] with Has[D], Nothing, (A, B, C, D)]", "member" : "zio.stream.ZStream.services", "link" : "zio\/stream\/ZStream$.html#services[A,B,C,D](implicitevidence$7:zio.Tag[A],implicitevidence$8:zio.Tag[B],implicitevidence$9:zio.Tag[C],implicitevidence$10:zio.Tag[D]):zio.stream.ZStream[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D],Nothing,(A,B,C,D)]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C]): ZStream[Has[A] with Has[B] with Has[C], Nothing, (A, B, C)]", "member" : "zio.stream.ZStream.services", "link" : "zio\/stream\/ZStream$.html#services[A,B,C](implicitevidence$4:zio.Tag[A],implicitevidence$5:zio.Tag[B],implicitevidence$6:zio.Tag[C]):zio.stream.ZStream[zio.Has[A]withzio.Has[B]withzio.Has[C],Nothing,(A,B,C)]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B]): ZStream[Has[A] with Has[B], Nothing, (A, B)]", "member" : "zio.stream.ZStream.services", "link" : "zio\/stream\/ZStream$.html#services[A,B](implicitevidence$2:zio.Tag[A],implicitevidence$3:zio.Tag[B]):zio.stream.ZStream[zio.Has[A]withzio.Has[B],Nothing,(A,B)]", "kind" : "def"}, {"label" : "serviceAt", "tail" : "(): ServiceAtPartiallyApplied[Service]", "member" : "zio.stream.ZStream.serviceAt", "link" : "zio\/stream\/ZStream$.html#serviceAt[Service]:zio.stream.ZStream.ServiceAtPartiallyApplied[Service]", "kind" : "def"}, {"label" : "service", "tail" : "(arg0: zio.Tag[A]): ZStream[Has[A], Nothing, A]", "member" : "zio.stream.ZStream.service", "link" : "zio\/stream\/ZStream$.html#service[A](implicitevidence$1:zio.Tag[A]):zio.stream.ZStream[zio.Has[A],Nothing,A]", "kind" : "def"}, {"label" : "repeatZIOWithSchedule", "tail" : "(effect: ZIO[R, E, A], schedule: Schedule[R, A, Any]): ZStream[R with Has[Clock], E, A]", "member" : "zio.stream.ZStream.repeatZIOWithSchedule", "link" : "zio\/stream\/ZStream$.html#repeatZIOWithSchedule[R,E,A](effect:zio.ZIO[R,E,A],schedule:zio.Schedule[R,A,Any]):zio.stream.ZStream[Rwithzio.Has[zio.Clock],E,A]", "kind" : "def"}, {"label" : "repeatZIOOption", "tail" : "(fa: ZIO[R, Option[E], A]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.repeatZIOOption", "link" : "zio\/stream\/ZStream$.html#repeatZIOOption[R,E,A](fa:zio.ZIO[R,Option[E],A]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeatZIOChunkOption", "tail" : "(fa: ZIO[R, Option[E], Chunk[A]]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.repeatZIOChunkOption", "link" : "zio\/stream\/ZStream$.html#repeatZIOChunkOption[R,E,A](fa:zio.ZIO[R,Option[E],zio.Chunk[A]]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeatZIOChunk", "tail" : "(fa: ZIO[R, E, Chunk[A]]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.repeatZIOChunk", "link" : "zio\/stream\/ZStream$.html#repeatZIOChunk[R,E,A](fa:zio.ZIO[R,E,zio.Chunk[A]]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeatZIO", "tail" : "(fa: ZIO[R, E, A]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.repeatZIO", "link" : "zio\/stream\/ZStream$.html#repeatZIO[R,E,A](fa:zio.ZIO[R,E,A]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeatWithSchedule", "tail" : "(a: => A, schedule: Schedule[R, A, _]): ZStream[R with Has[Clock], Nothing, A]", "member" : "zio.stream.ZStream.repeatWithSchedule", "link" : "zio\/stream\/ZStream$.html#repeatWithSchedule[R,A](a:=>A,schedule:zio.Schedule[R,A,_]):zio.stream.ZStream[Rwithzio.Has[zio.Clock],Nothing,A]", "kind" : "def"}, {"label" : "repeatWith", "tail" : "(a: => A, schedule: Schedule[R, A, _]): ZStream[R with Has[Clock], Nothing, A]", "member" : "zio.stream.ZStream.repeatWith", "link" : "zio\/stream\/ZStream$.html#repeatWith[R,A](a:=>A,schedule:zio.Schedule[R,A,_]):zio.stream.ZStream[Rwithzio.Has[zio.Clock],Nothing,A]", "kind" : "def"}, {"label" : "repeatEffectWith", "tail" : "(effect: ZIO[R, E, A], schedule: Schedule[R, A, Any]): ZStream[R with Has[Clock], E, A]", "member" : "zio.stream.ZStream.repeatEffectWith", "link" : "zio\/stream\/ZStream$.html#repeatEffectWith[R,E,A](effect:zio.ZIO[R,E,A],schedule:zio.Schedule[R,A,Any]):zio.stream.ZStream[Rwithzio.Has[zio.Clock],E,A]", "kind" : "def"}, {"label" : "repeatEffectOption", "tail" : "(fa: ZIO[R, Option[E], A]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.repeatEffectOption", "link" : "zio\/stream\/ZStream$.html#repeatEffectOption[R,E,A](fa:zio.ZIO[R,Option[E],A]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeatEffectChunkOption", "tail" : "(fa: ZIO[R, Option[E], Chunk[A]]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.repeatEffectChunkOption", "link" : "zio\/stream\/ZStream$.html#repeatEffectChunkOption[R,E,A](fa:zio.ZIO[R,Option[E],zio.Chunk[A]]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeatEffectChunk", "tail" : "(fa: ZIO[R, E, Chunk[A]]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.repeatEffectChunk", "link" : "zio\/stream\/ZStream$.html#repeatEffectChunk[R,E,A](fa:zio.ZIO[R,E,zio.Chunk[A]]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeatEffect", "tail" : "(fa: ZIO[R, E, A]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.repeatEffect", "link" : "zio\/stream\/ZStream$.html#repeatEffect[R,E,A](fa:zio.ZIO[R,E,A]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(a: => A): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStream.repeat", "link" : "zio\/stream\/ZStream$.html#repeat[A](a:=>A):zio.stream.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "range", "tail" : "(min: Int, max: Int, chunkSize: Int): ZStream[Any, Nothing, Int]", "member" : "zio.stream.ZStream.range", "link" : "zio\/stream\/ZStream$.html#range(min:Int,max:Int,chunkSize:Int):zio.stream.ZStream[Any,Nothing,Int]", "kind" : "def"}, {"label" : "paginateZIO", "tail" : "(s: S)(f: (S) => ZIO[R, E, (A, Option[S])]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.paginateZIO", "link" : "zio\/stream\/ZStream$.html#paginateZIO[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,(A,Option[S])]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "paginateM", "tail" : "(s: S)(f: (S) => ZIO[R, E, (A, Option[S])]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.paginateM", "link" : "zio\/stream\/ZStream$.html#paginateM[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,(A,Option[S])]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "paginateChunkZIO", "tail" : "(s: S)(f: (S) => ZIO[R, E, (Chunk[A], Option[S])]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.paginateChunkZIO", "link" : "zio\/stream\/ZStream$.html#paginateChunkZIO[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,(zio.Chunk[A],Option[S])]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "paginateChunkM", "tail" : "(s: S)(f: (S) => ZIO[R, E, (Chunk[A], Option[S])]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.paginateChunkM", "link" : "zio\/stream\/ZStream$.html#paginateChunkM[R,E,A,S](s:S)(f:S=>zio.ZIO[R,E,(zio.Chunk[A],Option[S])]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "paginateChunk", "tail" : "(s: S)(f: (S) => (Chunk[A], Option[S])): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStream.paginateChunk", "link" : "zio\/stream\/ZStream$.html#paginateChunk[A,S](s:S)(f:S=>(zio.Chunk[A],Option[S])):zio.stream.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "paginate", "tail" : "(s: S)(f: (S) => (A, Option[S])): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStream.paginate", "link" : "zio\/stream\/ZStream$.html#paginate[R,E,A,S](s:S)(f:S=>(A,Option[S])):zio.stream.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "never", "tail" : ": ZStream[Any, Nothing, Nothing]", "member" : "zio.stream.ZStream.never", "link" : "zio\/stream\/ZStream$.html#never:zio.stream.ZStream[Any,Nothing,Nothing]", "kind" : "val"}, {"label" : "mergeAllUnbounded", "tail" : "(outputBuffer: Int)(streams: ZStream[R, E, O]*): ZStream[R, E, O]", "member" : "zio.stream.ZStream.mergeAllUnbounded", "link" : "zio\/stream\/ZStream$.html#mergeAllUnbounded[R,E,O](outputBuffer:Int)(streams:zio.stream.ZStream[R,E,O]*):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "mergeAll", "tail" : "(n: Int, outputBuffer: Int)(streams: ZStream[R, E, O]*): ZStream[R, E, O]", "member" : "zio.stream.ZStream.mergeAll", "link" : "zio\/stream\/ZStream$.html#mergeAll[R,E,O](n:Int,outputBuffer:Int)(streams:zio.stream.ZStream[R,E,O]*):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "managed", "tail" : "(managed: ZManaged[R, E, A]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.managed", "link" : "zio\/stream\/ZStream$.html#managed[R,E,A](managed:zio.ZManaged[R,E,A]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "iterate", "tail" : "(a: A)(f: (A) => A): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStream.iterate", "link" : "zio\/stream\/ZStream$.html#iterate[A](a:A)(f:A=>A):zio.stream.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "halt", "tail" : "(cause: => Cause[E]): ZStream[Any, E, Nothing]", "member" : "zio.stream.ZStream.halt", "link" : "zio\/stream\/ZStream$.html#halt[E](cause:=>zio.Cause[E]):zio.stream.ZStream[Any,E,Nothing]", "kind" : "def"}, {"label" : "fromTQueue", "tail" : "(queue: TQueue[A]): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStream.fromTQueue", "link" : "zio\/stream\/ZStream$.html#fromTQueue[A](queue:zio.stm.TQueue[A]):zio.stream.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "fromSchedule", "tail" : "(schedule: Schedule[R, Any, A]): ZStream[R with Has[Clock], Nothing, A]", "member" : "zio.stream.ZStream.fromSchedule", "link" : "zio\/stream\/ZStream$.html#fromSchedule[R,A](schedule:zio.Schedule[R,Any,A]):zio.stream.ZStream[Rwithzio.Has[zio.Clock],Nothing,A]", "kind" : "def"}, {"label" : "fromQueueWithShutdown", "tail" : "(queue: ZQueue[Nothing, R, Any, E, Nothing, O], maxChunkSize: Int): ZStream[R, E, O]", "member" : "zio.stream.ZStream.fromQueueWithShutdown", "link" : "zio\/stream\/ZStream$.html#fromQueueWithShutdown[R,E,O](queue:zio.ZQueue[Nothing,R,Any,E,Nothing,O],maxChunkSize:Int):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromQueue", "tail" : "(queue: ZQueue[Nothing, R, Any, E, Nothing, O], maxChunkSize: Int): ZStream[R, E, O]", "member" : "zio.stream.ZStream.fromQueue", "link" : "zio\/stream\/ZStream$.html#fromQueue[R,E,O](queue:zio.ZQueue[Nothing,R,Any,E,Nothing,O],maxChunkSize:Int):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromJavaIteratorZIO", "tail" : "(iterator: ZIO[R, Throwable, Iterator[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.ZStream.fromJavaIteratorZIO", "link" : "zio\/stream\/ZStream$.html#fromJavaIteratorZIO[R,A](iterator:zio.ZIO[R,Throwable,java.util.Iterator[A]]):zio.stream.ZStream[R,Throwable,A]", "kind" : "def"}, {"label" : "fromJavaIteratorTotal", "tail" : "(iterator: => Iterator[A]): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStream.fromJavaIteratorTotal", "link" : "zio\/stream\/ZStream$.html#fromJavaIteratorTotal[A](iterator:=>java.util.Iterator[A]):zio.stream.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "fromJavaIteratorSucceed", "tail" : "(iterator: => Iterator[A]): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStream.fromJavaIteratorSucceed", "link" : "zio\/stream\/ZStream$.html#fromJavaIteratorSucceed[A](iterator:=>java.util.Iterator[A]):zio.stream.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "fromJavaIteratorManaged", "tail" : "(iterator: ZManaged[R, Throwable, Iterator[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.ZStream.fromJavaIteratorManaged", "link" : "zio\/stream\/ZStream$.html#fromJavaIteratorManaged[R,A](iterator:zio.ZManaged[R,Throwable,java.util.Iterator[A]]):zio.stream.ZStream[R,Throwable,A]", "kind" : "def"}, {"label" : "fromJavaIteratorEffect", "tail" : "(iterator: ZIO[R, Throwable, Iterator[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.ZStream.fromJavaIteratorEffect", "link" : "zio\/stream\/ZStream$.html#fromJavaIteratorEffect[R,A](iterator:zio.ZIO[R,Throwable,java.util.Iterator[A]]):zio.stream.ZStream[R,Throwable,A]", "kind" : "def"}, {"label" : "fromJavaIterator", "tail" : "(iterator: => Iterator[A]): ZStream[Any, Throwable, A]", "member" : "zio.stream.ZStream.fromJavaIterator", "link" : "zio\/stream\/ZStream$.html#fromJavaIterator[A](iterator:=>java.util.Iterator[A]):zio.stream.ZStream[Any,Throwable,A]", "kind" : "def"}, {"label" : "fromIteratorZIO", "tail" : "(iterator: ZIO[R, Throwable, Iterator[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.ZStream.fromIteratorZIO", "link" : "zio\/stream\/ZStream$.html#fromIteratorZIO[R,A](iterator:zio.ZIO[R,Throwable,Iterator[A]]):zio.stream.ZStream[R,Throwable,A]", "kind" : "def"}, {"label" : "fromIteratorTotal", "tail" : "(iterator: => Iterator[A], maxChunkSize: Int): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStream.fromIteratorTotal", "link" : "zio\/stream\/ZStream$.html#fromIteratorTotal[A](iterator:=>Iterator[A],maxChunkSize:Int):zio.stream.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "fromIteratorSucceed", "tail" : "(iterator: => Iterator[A], maxChunkSize: Int): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStream.fromIteratorSucceed", "link" : "zio\/stream\/ZStream$.html#fromIteratorSucceed[A](iterator:=>Iterator[A],maxChunkSize:Int):zio.stream.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "fromIteratorManaged", "tail" : "(iterator: ZManaged[R, Throwable, Iterator[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.ZStream.fromIteratorManaged", "link" : "zio\/stream\/ZStream$.html#fromIteratorManaged[R,A](iterator:zio.ZManaged[R,Throwable,Iterator[A]]):zio.stream.ZStream[R,Throwable,A]", "kind" : "def"}, {"label" : "fromIteratorEffect", "tail" : "(iterator: ZIO[R, Throwable, Iterator[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.ZStream.fromIteratorEffect", "link" : "zio\/stream\/ZStream$.html#fromIteratorEffect[R,A](iterator:zio.ZIO[R,Throwable,Iterator[A]]):zio.stream.ZStream[R,Throwable,A]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(iterator: => Iterator[A], maxChunkSize: Int): ZStream[Any, Throwable, A]", "member" : "zio.stream.ZStream.fromIterator", "link" : "zio\/stream\/ZStream$.html#fromIterator[A](iterator:=>Iterator[A],maxChunkSize:Int):zio.stream.ZStream[Any,Throwable,A]", "kind" : "def"}, {"label" : "fromIterableZIO", "tail" : "(iterable: ZIO[R, E, Iterable[O]]): ZStream[R, E, O]", "member" : "zio.stream.ZStream.fromIterableZIO", "link" : "zio\/stream\/ZStream$.html#fromIterableZIO[R,E,O](iterable:zio.ZIO[R,E,Iterable[O]]):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromIterableM", "tail" : "(iterable: ZIO[R, E, Iterable[O]]): ZStream[R, E, O]", "member" : "zio.stream.ZStream.fromIterableM", "link" : "zio\/stream\/ZStream$.html#fromIterableM[R,E,O](iterable:zio.ZIO[R,E,Iterable[O]]):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(as: => Iterable[O]): ZStream[Any, Nothing, O]", "member" : "zio.stream.ZStream.fromIterable", "link" : "zio\/stream\/ZStream$.html#fromIterable[O](as:=>Iterable[O]):zio.stream.ZStream[Any,Nothing,O]", "kind" : "def"}, {"label" : "fromHubManagedWithShutdown", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, A], maxChunkSize: Int): ZManaged[Any, Nothing, ZStream[R, E, A]]", "member" : "zio.stream.ZStream.fromHubManagedWithShutdown", "link" : "zio\/stream\/ZStream$.html#fromHubManagedWithShutdown[R,E,A](hub:zio.ZHub[Nothing,R,Any,E,Nothing,A],maxChunkSize:Int):zio.ZManaged[Any,Nothing,zio.stream.ZStream[R,E,A]]", "kind" : "def"}, {"label" : "fromHubWithShutdown", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, A], maxChunkSize: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStream.fromHubWithShutdown", "link" : "zio\/stream\/ZStream$.html#fromHubWithShutdown[R,E,A](hub:zio.ZHub[Nothing,R,Any,E,Nothing,A],maxChunkSize:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "fromHubManaged", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, A], maxChunkSize: Int): ZManaged[Any, Nothing, ZStream[R, E, A]]", "member" : "zio.stream.ZStream.fromHubManaged", "link" : "zio\/stream\/ZStream$.html#fromHubManaged[R,E,A](hub:zio.ZHub[Nothing,R,Any,E,Nothing,A],maxChunkSize:Int):zio.ZManaged[Any,Nothing,zio.stream.ZStream[R,E,A]]", "kind" : "def"}, {"label" : "fromHub", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, A], maxChunkSize: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStream.fromHub", "link" : "zio\/stream\/ZStream$.html#fromHub[R,E,A](hub:zio.ZHub[Nothing,R,Any,E,Nothing,A],maxChunkSize:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "fromZIOOption", "tail" : "(fa: ZIO[R, Option[E], A]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.fromZIOOption", "link" : "zio\/stream\/ZStream$.html#fromZIOOption[R,E,A](fa:zio.ZIO[R,Option[E],A]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "fromZIO", "tail" : "(fa: ZIO[R, E, A]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.fromZIO", "link" : "zio\/stream\/ZStream$.html#fromZIO[R,E,A](fa:zio.ZIO[R,E,A]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "fromEffectOption", "tail" : "(fa: ZIO[R, Option[E], A]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.fromEffectOption", "link" : "zio\/stream\/ZStream$.html#fromEffectOption[R,E,A](fa:zio.ZIO[R,Option[E],A]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(fa: ZIO[R, E, A]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.fromEffect", "link" : "zio\/stream\/ZStream$.html#fromEffect[R,E,A](fa:zio.ZIO[R,E,A]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "fromChunks", "tail" : "(cs: Chunk[O]*): ZStream[Any, Nothing, O]", "member" : "zio.stream.ZStream.fromChunks", "link" : "zio\/stream\/ZStream$.html#fromChunks[O](cs:zio.Chunk[O]*):zio.stream.ZStream[Any,Nothing,O]", "kind" : "def"}, {"label" : "fromChunkQueueWithShutdown", "tail" : "(queue: ZQueue[Nothing, R, Any, E, Nothing, Chunk[O]]): ZStream[R, E, O]", "member" : "zio.stream.ZStream.fromChunkQueueWithShutdown", "link" : "zio\/stream\/ZStream$.html#fromChunkQueueWithShutdown[R,E,O](queue:zio.ZQueue[Nothing,R,Any,E,Nothing,zio.Chunk[O]]):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromChunkQueue", "tail" : "(queue: ZQueue[Nothing, R, Any, E, Nothing, Chunk[O]]): ZStream[R, E, O]", "member" : "zio.stream.ZStream.fromChunkQueue", "link" : "zio\/stream\/ZStream$.html#fromChunkQueue[R,E,O](queue:zio.ZQueue[Nothing,R,Any,E,Nothing,zio.Chunk[O]]):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromChunkHubManagedWithShutdown", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, Chunk[O]]): ZManaged[Any, Nothing, ZStream[R, E, O]]", "member" : "zio.stream.ZStream.fromChunkHubManagedWithShutdown", "link" : "zio\/stream\/ZStream$.html#fromChunkHubManagedWithShutdown[R,E,O](hub:zio.ZHub[Nothing,R,Any,E,Nothing,zio.Chunk[O]]):zio.ZManaged[Any,Nothing,zio.stream.ZStream[R,E,O]]", "kind" : "def"}, {"label" : "fromChunkHubWithShutdown", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, Chunk[O]]): ZStream[R, E, O]", "member" : "zio.stream.ZStream.fromChunkHubWithShutdown", "link" : "zio\/stream\/ZStream$.html#fromChunkHubWithShutdown[R,E,O](hub:zio.ZHub[Nothing,R,Any,E,Nothing,zio.Chunk[O]]):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromChunkHubManaged", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, Chunk[O]]): ZManaged[Any, Nothing, ZStream[R, E, O]]", "member" : "zio.stream.ZStream.fromChunkHubManaged", "link" : "zio\/stream\/ZStream$.html#fromChunkHubManaged[R,E,O](hub:zio.ZHub[Nothing,R,Any,E,Nothing,zio.Chunk[O]]):zio.ZManaged[Any,Nothing,zio.stream.ZStream[R,E,O]]", "kind" : "def"}, {"label" : "fromChunkHub", "tail" : "(hub: ZHub[Nothing, R, Any, E, Nothing, Chunk[O]]): ZStream[R, E, O]", "member" : "zio.stream.ZStream.fromChunkHub", "link" : "zio\/stream\/ZStream$.html#fromChunkHub[R,E,O](hub:zio.ZHub[Nothing,R,Any,E,Nothing,zio.Chunk[O]]):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "fromChunk", "tail" : "(c: => Chunk[O]): ZStream[Any, Nothing, O]", "member" : "zio.stream.ZStream.fromChunk", "link" : "zio\/stream\/ZStream$.html#fromChunk[O](c:=>zio.Chunk[O]):zio.stream.ZStream[Any,Nothing,O]", "kind" : "def"}, {"label" : "from", "tail" : "(input: => Input)(constructor: ZStreamConstructor[Input]): Out", "member" : "zio.stream.ZStream.from", "link" : "zio\/stream\/ZStream$.html#from[Input](input:=>Input)(implicitconstructor:zio.stream.ZStream.ZStreamConstructor[Input]):constructor.Out", "kind" : "def"}, {"label" : "finalizer", "tail" : "(finalizer: URIO[R, Any]): ZStream[R, Nothing, Any]", "member" : "zio.stream.ZStream.finalizer", "link" : "zio\/stream\/ZStream$.html#finalizer[R](finalizer:zio.URIO[R,Any]):zio.stream.ZStream[R,Nothing,Any]", "kind" : "def"}, {"label" : "failCause", "tail" : "(cause: => Cause[E]): ZStream[Any, E, Nothing]", "member" : "zio.stream.ZStream.failCause", "link" : "zio\/stream\/ZStream$.html#failCause[E](cause:=>zio.Cause[E]):zio.stream.ZStream[Any,E,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(error: => E): ZStream[Any, E, Nothing]", "member" : "zio.stream.ZStream.fail", "link" : "zio\/stream\/ZStream$.html#fail[E](error:=>E):zio.stream.ZStream[Any,E,Nothing]", "kind" : "def"}, {"label" : "execute", "tail" : "(zio: ZIO[R, E, Any]): ZStream[R, E, Nothing]", "member" : "zio.stream.ZStream.execute", "link" : "zio\/stream\/ZStream$.html#execute[R,E](zio:zio.ZIO[R,E,Any]):zio.stream.ZStream[R,E,Nothing]", "kind" : "def"}, {"label" : "environment", "tail" : "(): ZStream[R, Nothing, R]", "member" : "zio.stream.ZStream.environment", "link" : "zio\/stream\/ZStream$.html#environment[R]:zio.stream.ZStream[R,Nothing,R]", "kind" : "def"}, {"label" : "empty", "tail" : ": ZStream[Any, Nothing, Nothing]", "member" : "zio.stream.ZStream.empty", "link" : "zio\/stream\/ZStream$.html#empty:zio.stream.ZStream[Any,Nothing,Nothing]", "kind" : "val"}, {"label" : "done", "tail" : "(exit: Exit[E, A]): ZStream[Any, E, A]", "member" : "zio.stream.ZStream.done", "link" : "zio\/stream\/ZStream$.html#done[E,A](exit:zio.Exit[E,A]):zio.stream.ZStream[Any,E,A]", "kind" : "def"}, {"label" : "dieMessage", "tail" : "(msg: => String): ZStream[Any, Nothing, Nothing]", "member" : "zio.stream.ZStream.dieMessage", "link" : "zio\/stream\/ZStream$.html#dieMessage(msg:=>String):zio.stream.ZStream[Any,Nothing,Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(ex: => Throwable): ZStream[Any, Nothing, Nothing]", "member" : "zio.stream.ZStream.die", "link" : "zio\/stream\/ZStream$.html#die(ex:=>Throwable):zio.stream.ZStream[Any,Nothing,Nothing]", "kind" : "def"}, {"label" : "concatAll", "tail" : "(streams: Chunk[ZStream[R, E, O]]): ZStream[R, E, O]", "member" : "zio.stream.ZStream.concatAll", "link" : "zio\/stream\/ZStream$.html#concatAll[R,E,O](streams:zio.Chunk[zio.stream.ZStream[R,E,O]]):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "crossN", "tail" : "(zStream1: ZStream[R, E, A], zStream2: ZStream[R, E, B], zStream3: ZStream[R, E, C], zStream4: ZStream[R, E, D])(f: (A, B, C, D) => F): ZStream[R, E, F]", "member" : "zio.stream.ZStream.crossN", "link" : "zio\/stream\/ZStream$.html#crossN[R,E,A,B,C,D,F](zStream1:zio.stream.ZStream[R,E,A],zStream2:zio.stream.ZStream[R,E,B],zStream3:zio.stream.ZStream[R,E,C],zStream4:zio.stream.ZStream[R,E,D])(f:(A,B,C,D)=>F):zio.stream.ZStream[R,E,F]", "kind" : "def"}, {"label" : "crossN", "tail" : "(zStream1: ZStream[R, E, A], zStream2: ZStream[R, E, B], zStream3: ZStream[R, E, C])(f: (A, B, C) => D): ZStream[R, E, D]", "member" : "zio.stream.ZStream.crossN", "link" : "zio\/stream\/ZStream$.html#crossN[R,E,A,B,C,D](zStream1:zio.stream.ZStream[R,E,A],zStream2:zio.stream.ZStream[R,E,B],zStream3:zio.stream.ZStream[R,E,C])(f:(A,B,C)=>D):zio.stream.ZStream[R,E,D]", "kind" : "def"}, {"label" : "crossN", "tail" : "(zStream1: ZStream[R, E, A], zStream2: ZStream[R, E, B])(f: (A, B) => C): ZStream[R, E, C]", "member" : "zio.stream.ZStream.crossN", "link" : "zio\/stream\/ZStream$.html#crossN[R,E,A,B,C](zStream1:zio.stream.ZStream[R,E,A],zStream2:zio.stream.ZStream[R,E,B])(f:(A,B)=>C):zio.stream.ZStream[R,E,C]", "kind" : "def"}, {"label" : "bracketExit", "tail" : "(acquire: ZIO[R, E, A])(release: (A, Exit[Any, Any]) => URIO[R, Any]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.bracketExit", "link" : "zio\/stream\/ZStream$.html#bracketExit[R,E,A](acquire:zio.ZIO[R,E,A])(release:(A,zio.Exit[Any,Any])=>zio.URIO[R,Any]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: ZIO[R, E, A])(release: (A) => URIO[R, Any]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.bracket", "link" : "zio\/stream\/ZStream$.html#bracket[R,E,A](acquire:zio.ZIO[R,E,A])(release:A=>zio.URIO[R,Any]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "blocking", "tail" : "(stream: ZStream[R, E, A]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.blocking", "link" : "zio\/stream\/ZStream$.html#blocking[R,E,A](stream:zio.stream.ZStream[R,E,A]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(as: A*): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStream.apply", "link" : "zio\/stream\/ZStream$.html#apply[A](as:A*):zio.stream.ZStream[Any,Nothing,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(process: ZManaged[R, Nothing, ZIO[R, Option[E], Chunk[O]]]): ZStream[R, E, O]", "member" : "zio.stream.ZStream.apply", "link" : "zio\/stream\/ZStream$.html#apply[R,E,O](process:zio.ZManaged[R,Nothing,zio.ZIO[R,Option[E],zio.Chunk[O]]]):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "acquireReleaseExitWith", "tail" : "(acquire: ZIO[R, E, A])(release: (A, Exit[Any, Any]) => URIO[R, Any]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.acquireReleaseExitWith", "link" : "zio\/stream\/ZStream$.html#acquireReleaseExitWith[R,E,A](acquire:zio.ZIO[R,E,A])(release:(A,zio.Exit[Any,Any])=>zio.URIO[R,Any]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "acquireReleaseWith", "tail" : "(acquire: ZIO[R, E, A])(release: (A) => URIO[R, Any]): ZStream[R, E, A]", "member" : "zio.stream.ZStream.acquireReleaseWith", "link" : "zio\/stream\/ZStream$.html#acquireReleaseWith[R,E,A](acquire:zio.ZIO[R,E,A])(release:A=>zio.URIO[R,Any]):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "accessStream", "tail" : "(): AccessStreamPartiallyApplied[R]", "member" : "zio.stream.ZStream.accessStream", "link" : "zio\/stream\/ZStream$.html#accessStream[R]:zio.stream.ZStream.AccessStreamPartiallyApplied[R]", "kind" : "def"}, {"label" : "accessZIO", "tail" : "(): AccessZIOPartiallyApplied[R]", "member" : "zio.stream.ZStream.accessZIO", "link" : "zio\/stream\/ZStream$.html#accessZIO[R]:zio.stream.ZStream.AccessZIOPartiallyApplied[R]", "kind" : "def"}, {"label" : "accessM", "tail" : "(): AccessZIOPartiallyApplied[R]", "member" : "zio.stream.ZStream.accessM", "link" : "zio\/stream\/ZStream$.html#accessM[R]:zio.stream.ZStream.AccessZIOPartiallyApplied[R]", "kind" : "def"}, {"label" : "access", "tail" : "(): AccessPartiallyApplied[R]", "member" : "zio.stream.ZStream.access", "link" : "zio\/stream\/ZStream$.html#access[R]:zio.stream.ZStream.AccessPartiallyApplied[R]", "kind" : "def"}, {"label" : "absolve", "tail" : "(xs: ZStream[R, E, Either[E, O]]): ZStream[R, E, O]", "member" : "zio.stream.ZStream.absolve", "link" : "zio\/stream\/ZStream$.html#absolve[R,E,O](xs:zio.stream.ZStream[R,E,Either[E,O]]):zio.stream.ZStream[R,E,O]", "kind" : "def"}, {"label" : "DefaultChunkSize", "tail" : ": Int(4096)", "member" : "zio.stream.ZStream.DefaultChunkSize", "link" : "zio\/stream\/ZStream$.html#DefaultChunkSize:Int(4096)", "kind" : "final val"}, {"label" : "fromSocketServer", "tail" : "(port: Int, host: Option[String]): ZStream[Any, Throwable, Connection]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromSocketServer", "link" : "zio\/stream\/ZStream$.html#fromSocketServer(port:Int,host:Option[String]):zio.stream.ZStream[Any,Throwable,ZStreamPlatformSpecificConstructors.this.Connection]", "kind" : "def"}, {"label" : "fromJavaStreamZIO", "tail" : "(stream: ZIO[R, Throwable, java.util.stream.Stream[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromJavaStreamZIO", "link" : "zio\/stream\/ZStream$.html#fromJavaStreamZIO[R,A](stream:zio.ZIO[R,Throwable,java.util.stream.Stream[A]]):zio.stream.ZStream[R,Throwable,A]", "kind" : "final def"}, {"label" : "fromJavaStreamTotal", "tail" : "(stream: => java.util.stream.Stream[A]): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromJavaStreamTotal", "link" : "zio\/stream\/ZStream$.html#fromJavaStreamTotal[A](stream:=>java.util.stream.Stream[A]):zio.stream.ZStream[Any,Nothing,A]", "kind" : "final def"}, {"label" : "fromJavaStreamSucceed", "tail" : "(stream: => java.util.stream.Stream[A]): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromJavaStreamSucceed", "link" : "zio\/stream\/ZStream$.html#fromJavaStreamSucceed[A](stream:=>java.util.stream.Stream[A]):zio.stream.ZStream[Any,Nothing,A]", "kind" : "final def"}, {"label" : "fromJavaStreamManaged", "tail" : "(stream: ZManaged[R, Throwable, java.util.stream.Stream[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromJavaStreamManaged", "link" : "zio\/stream\/ZStream$.html#fromJavaStreamManaged[R,A](stream:zio.ZManaged[R,Throwable,java.util.stream.Stream[A]]):zio.stream.ZStream[R,Throwable,A]", "kind" : "final def"}, {"label" : "fromJavaStreamEffect", "tail" : "(stream: ZIO[R, Throwable, java.util.stream.Stream[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromJavaStreamEffect", "link" : "zio\/stream\/ZStream$.html#fromJavaStreamEffect[R,A](stream:zio.ZIO[R,Throwable,java.util.stream.Stream[A]]):zio.stream.ZStream[R,Throwable,A]", "kind" : "final def"}, {"label" : "fromJavaStream", "tail" : "(stream: => java.util.stream.Stream[A]): ZStream[Any, Throwable, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromJavaStream", "link" : "zio\/stream\/ZStream$.html#fromJavaStream[A](stream:=>java.util.stream.Stream[A]):zio.stream.ZStream[Any,Throwable,A]", "kind" : "final def"}, {"label" : "fromOutputStreamWriter", "tail" : "(write: (OutputStream) => Unit, chunkSize: Int): ZStream[Any, Throwable, Byte]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromOutputStreamWriter", "link" : "zio\/stream\/ZStream$.html#fromOutputStreamWriter(write:java.io.OutputStream=>Unit,chunkSize:Int):zio.stream.ZStream[Any,Throwable,Byte]", "kind" : "def"}, {"label" : "fromReaderZIO", "tail" : "(reader: => ZIO[R, IOException, Reader], chunkSize: Int): ZStream[R, IOException, Char]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromReaderZIO", "link" : "zio\/stream\/ZStream$.html#fromReaderZIO[R](reader:=>zio.ZIO[R,java.io.IOException,java.io.Reader],chunkSize:Int):zio.stream.ZStream[R,java.io.IOException,Char]", "kind" : "def"}, {"label" : "fromReaderManaged", "tail" : "(reader: => ZManaged[R, IOException, Reader], chunkSize: Int): ZStream[R, IOException, Char]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromReaderManaged", "link" : "zio\/stream\/ZStream$.html#fromReaderManaged[R](reader:=>zio.ZManaged[R,java.io.IOException,java.io.Reader],chunkSize:Int):zio.stream.ZStream[R,java.io.IOException,Char]", "kind" : "def"}, {"label" : "fromReaderEffect", "tail" : "(reader: => ZIO[R, IOException, Reader], chunkSize: Int): ZStream[R, IOException, Char]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromReaderEffect", "link" : "zio\/stream\/ZStream$.html#fromReaderEffect[R](reader:=>zio.ZIO[R,java.io.IOException,java.io.Reader],chunkSize:Int):zio.stream.ZStream[R,java.io.IOException,Char]", "kind" : "def"}, {"label" : "fromReader", "tail" : "(reader: => Reader, chunkSize: Int): ZStream[Any, IOException, Char]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromReader", "link" : "zio\/stream\/ZStream$.html#fromReader(reader:=>java.io.Reader,chunkSize:Int):zio.stream.ZStream[Any,java.io.IOException,Char]", "kind" : "def"}, {"label" : "fromInputStreamManaged", "tail" : "(is: ZManaged[R, IOException, InputStream], chunkSize: Int): ZStream[R, IOException, Byte]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromInputStreamManaged", "link" : "zio\/stream\/ZStream$.html#fromInputStreamManaged[R](is:zio.ZManaged[R,java.io.IOException,java.io.InputStream],chunkSize:Int):zio.stream.ZStream[R,java.io.IOException,Byte]", "kind" : "def"}, {"label" : "fromInputStreamZIO", "tail" : "(is: ZIO[R, IOException, InputStream], chunkSize: Int): ZStream[R, IOException, Byte]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromInputStreamZIO", "link" : "zio\/stream\/ZStream$.html#fromInputStreamZIO[R](is:zio.ZIO[R,java.io.IOException,java.io.InputStream],chunkSize:Int):zio.stream.ZStream[R,java.io.IOException,Byte]", "kind" : "def"}, {"label" : "fromInputStreamEffect", "tail" : "(is: ZIO[R, IOException, InputStream], chunkSize: Int): ZStream[R, IOException, Byte]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromInputStreamEffect", "link" : "zio\/stream\/ZStream$.html#fromInputStreamEffect[R](is:zio.ZIO[R,java.io.IOException,java.io.InputStream],chunkSize:Int):zio.stream.ZStream[R,java.io.IOException,Byte]", "kind" : "def"}, {"label" : "fromResource", "tail" : "(path: String, chunkSize: Int): ZStream[Any, IOException, Byte]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromResource", "link" : "zio\/stream\/ZStream$.html#fromResource(path:String,chunkSize:Int):zio.stream.ZStream[Any,java.io.IOException,Byte]", "kind" : "final def"}, {"label" : "fromInputStream", "tail" : "(is: => InputStream, chunkSize: Int): ZStream[Any, IOException, Byte]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromInputStream", "link" : "zio\/stream\/ZStream$.html#fromInputStream(is:=>java.io.InputStream,chunkSize:Int):zio.stream.ZStream[Any,java.io.IOException,Byte]", "kind" : "def"}, {"label" : "fromFile", "tail" : "(path: => Path, chunkSize: Int): ZStream[Any, Throwable, Byte]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromFile", "link" : "zio\/stream\/ZStream$.html#fromFile(path:=>java.nio.file.Path,chunkSize:Int):zio.stream.ZStream[Any,Throwable,Byte]", "kind" : "def"}, {"label" : "fromBlockingJavaIterator", "tail" : "(iter: => Iterator[A], maxChunkSize: Int): ZStream[Any, Throwable, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromBlockingJavaIterator", "link" : "zio\/stream\/ZStream$.html#fromBlockingJavaIterator[A](iter:=>java.util.Iterator[A],maxChunkSize:Int):zio.stream.ZStream[Any,Throwable,A]", "kind" : "def"}, {"label" : "fromBlockingIterator", "tail" : "(iterator: => Iterator[A], maxChunkSize: Int): ZStream[Any, Throwable, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromBlockingIterator", "link" : "zio\/stream\/ZStream$.html#fromBlockingIterator[A](iterator:=>Iterator[A],maxChunkSize:Int):zio.stream.ZStream[Any,Throwable,A]", "kind" : "def"}, {"label" : "effectAsyncMaybe", "tail" : "(register: (Emit[R, E, A, Unit]) => Option[ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.effectAsyncMaybe", "link" : "zio\/stream\/ZStream$.html#effectAsyncMaybe[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>Option[zio.stream.ZStream[R,E,A]],outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "effectAsyncM", "tail" : "(register: (Emit[R, E, A, Unit]) => ZIO[R, E, Any], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.effectAsyncM", "link" : "zio\/stream\/ZStream$.html#effectAsyncM[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>zio.ZIO[R,E,Any],outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "effectAsyncInterrupt", "tail" : "(register: (Emit[R, E, A, Unit]) => Either[Canceler[R], ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.effectAsyncInterrupt", "link" : "zio\/stream\/ZStream$.html#effectAsyncInterrupt[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>Either[zio.Canceler[R],zio.stream.ZStream[R,E,A]],outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "effectAsync", "tail" : "(register: (Emit[R, E, A, Unit]) => Unit, outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.effectAsync", "link" : "zio\/stream\/ZStream$.html#effectAsync[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>Unit,outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncMaybe", "tail" : "(register: (Emit[R, E, A, Unit]) => Option[ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.asyncMaybe", "link" : "zio\/stream\/ZStream$.html#asyncMaybe[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>Option[zio.stream.ZStream[R,E,A]],outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncZIO", "tail" : "(register: (Emit[R, E, A, Unit]) => ZIO[R, E, Any], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.asyncZIO", "link" : "zio\/stream\/ZStream$.html#asyncZIO[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>zio.ZIO[R,E,Any],outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncManaged", "tail" : "(register: ((ZIO[R, Option[E], Chunk[A]]) => Unit) => ZManaged[R, E, Any], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.asyncManaged", "link" : "zio\/stream\/ZStream$.html#asyncManaged[R,E,A](register:(zio.ZIO[R,Option[E],zio.Chunk[A]]=>Unit)=>zio.ZManaged[R,E,Any],outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncInterrupt", "tail" : "(register: (Emit[R, E, A, Unit]) => Either[Canceler[R], ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.asyncInterrupt", "link" : "zio\/stream\/ZStream$.html#asyncInterrupt[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>Either[zio.Canceler[R],zio.stream.ZStream[R,E,A]],outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "async", "tail" : "(register: (Emit[R, E, A, Unit]) => Unit, outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.async", "link" : "zio\/stream\/ZStream$.html#async[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>Unit,outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/ZStream$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/ZStream$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/ZStream$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/ZStream$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/ZStream$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/ZStream$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/ZStream$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZStream$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZStream$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZStream$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/ZStream$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/ZStream$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/ZStream$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/ZStream$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/ZStream$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/ZStream$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/ZStream$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/ZStream$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/ZStream$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stream\/ZStream.html", "kind" : "class"}, {"name" : "zio.stream.ZStreamPlatformSpecificConstructors", "trait" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html", "kind" : "trait", "members_trait" : [{"label" : "ZStreamConstructorPlatformSpecific", "tail" : "", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.ZStreamConstructorPlatformSpecific", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#ZStreamConstructorPlatformSpecificextendsZStreamPlatformSpecificConstructors.this.ZStreamConstructorLowPriority1", "kind" : "trait"}, {"label" : "Connection", "tail" : "", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.Connection", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#Connection", "kind" : "object"}, {"label" : "Connection", "tail" : "", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.Connection", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#ConnectionextendsAnyRef", "kind" : "class"}, {"label" : "fromSocketServer", "tail" : "(port: Int, host: Option[String]): ZStream[Any, Throwable, ZStream.Connection]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromSocketServer", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromSocketServer(port:Int,host:Option[String]):zio.stream.ZStream[Any,Throwable,ZStreamPlatformSpecificConstructors.this.Connection]", "kind" : "def"}, {"label" : "fromJavaStreamZIO", "tail" : "(stream: ZIO[R, Throwable, java.util.stream.Stream[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromJavaStreamZIO", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromJavaStreamZIO[R,A](stream:zio.ZIO[R,Throwable,java.util.stream.Stream[A]]):zio.stream.ZStream[R,Throwable,A]", "kind" : "final def"}, {"label" : "fromJavaStreamTotal", "tail" : "(stream: => java.util.stream.Stream[A]): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromJavaStreamTotal", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromJavaStreamTotal[A](stream:=>java.util.stream.Stream[A]):zio.stream.ZStream[Any,Nothing,A]", "kind" : "final def"}, {"label" : "fromJavaStreamSucceed", "tail" : "(stream: => java.util.stream.Stream[A]): ZStream[Any, Nothing, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromJavaStreamSucceed", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromJavaStreamSucceed[A](stream:=>java.util.stream.Stream[A]):zio.stream.ZStream[Any,Nothing,A]", "kind" : "final def"}, {"label" : "fromJavaStreamManaged", "tail" : "(stream: ZManaged[R, Throwable, java.util.stream.Stream[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromJavaStreamManaged", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromJavaStreamManaged[R,A](stream:zio.ZManaged[R,Throwable,java.util.stream.Stream[A]]):zio.stream.ZStream[R,Throwable,A]", "kind" : "final def"}, {"label" : "fromJavaStreamEffect", "tail" : "(stream: ZIO[R, Throwable, java.util.stream.Stream[A]]): ZStream[R, Throwable, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromJavaStreamEffect", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromJavaStreamEffect[R,A](stream:zio.ZIO[R,Throwable,java.util.stream.Stream[A]]):zio.stream.ZStream[R,Throwable,A]", "kind" : "final def"}, {"label" : "fromJavaStream", "tail" : "(stream: => java.util.stream.Stream[A]): ZStream[Any, Throwable, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromJavaStream", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromJavaStream[A](stream:=>java.util.stream.Stream[A]):zio.stream.ZStream[Any,Throwable,A]", "kind" : "final def"}, {"label" : "fromOutputStreamWriter", "tail" : "(write: (OutputStream) => Unit, chunkSize: Int): ZStream[Any, Throwable, Byte]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromOutputStreamWriter", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromOutputStreamWriter(write:java.io.OutputStream=>Unit,chunkSize:Int):zio.stream.ZStream[Any,Throwable,Byte]", "kind" : "def"}, {"label" : "fromReaderZIO", "tail" : "(reader: => ZIO[R, IOException, Reader], chunkSize: Int): ZStream[R, IOException, Char]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromReaderZIO", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromReaderZIO[R](reader:=>zio.ZIO[R,java.io.IOException,java.io.Reader],chunkSize:Int):zio.stream.ZStream[R,java.io.IOException,Char]", "kind" : "def"}, {"label" : "fromReaderManaged", "tail" : "(reader: => ZManaged[R, IOException, Reader], chunkSize: Int): ZStream[R, IOException, Char]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromReaderManaged", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromReaderManaged[R](reader:=>zio.ZManaged[R,java.io.IOException,java.io.Reader],chunkSize:Int):zio.stream.ZStream[R,java.io.IOException,Char]", "kind" : "def"}, {"label" : "fromReaderEffect", "tail" : "(reader: => ZIO[R, IOException, Reader], chunkSize: Int): ZStream[R, IOException, Char]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromReaderEffect", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromReaderEffect[R](reader:=>zio.ZIO[R,java.io.IOException,java.io.Reader],chunkSize:Int):zio.stream.ZStream[R,java.io.IOException,Char]", "kind" : "def"}, {"label" : "fromReader", "tail" : "(reader: => Reader, chunkSize: Int): ZStream[Any, IOException, Char]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromReader", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromReader(reader:=>java.io.Reader,chunkSize:Int):zio.stream.ZStream[Any,java.io.IOException,Char]", "kind" : "def"}, {"label" : "fromInputStreamManaged", "tail" : "(is: ZManaged[R, IOException, InputStream], chunkSize: Int): ZStream[R, IOException, Byte]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromInputStreamManaged", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromInputStreamManaged[R](is:zio.ZManaged[R,java.io.IOException,java.io.InputStream],chunkSize:Int):zio.stream.ZStream[R,java.io.IOException,Byte]", "kind" : "def"}, {"label" : "fromInputStreamZIO", "tail" : "(is: ZIO[R, IOException, InputStream], chunkSize: Int): ZStream[R, IOException, Byte]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromInputStreamZIO", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromInputStreamZIO[R](is:zio.ZIO[R,java.io.IOException,java.io.InputStream],chunkSize:Int):zio.stream.ZStream[R,java.io.IOException,Byte]", "kind" : "def"}, {"label" : "fromInputStreamEffect", "tail" : "(is: ZIO[R, IOException, InputStream], chunkSize: Int): ZStream[R, IOException, Byte]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromInputStreamEffect", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromInputStreamEffect[R](is:zio.ZIO[R,java.io.IOException,java.io.InputStream],chunkSize:Int):zio.stream.ZStream[R,java.io.IOException,Byte]", "kind" : "def"}, {"label" : "fromResource", "tail" : "(path: String, chunkSize: Int): ZStream[Any, IOException, Byte]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromResource", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromResource(path:String,chunkSize:Int):zio.stream.ZStream[Any,java.io.IOException,Byte]", "kind" : "final def"}, {"label" : "fromInputStream", "tail" : "(is: => InputStream, chunkSize: Int): ZStream[Any, IOException, Byte]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromInputStream", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromInputStream(is:=>java.io.InputStream,chunkSize:Int):zio.stream.ZStream[Any,java.io.IOException,Byte]", "kind" : "def"}, {"label" : "fromFile", "tail" : "(path: => Path, chunkSize: Int): ZStream[Any, Throwable, Byte]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromFile", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromFile(path:=>java.nio.file.Path,chunkSize:Int):zio.stream.ZStream[Any,Throwable,Byte]", "kind" : "def"}, {"label" : "fromBlockingJavaIterator", "tail" : "(iter: => Iterator[A], maxChunkSize: Int): ZStream[Any, Throwable, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromBlockingJavaIterator", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromBlockingJavaIterator[A](iter:=>java.util.Iterator[A],maxChunkSize:Int):zio.stream.ZStream[Any,Throwable,A]", "kind" : "def"}, {"label" : "fromBlockingIterator", "tail" : "(iterator: => Iterator[A], maxChunkSize: Int): ZStream[Any, Throwable, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.fromBlockingIterator", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#fromBlockingIterator[A](iterator:=>Iterator[A],maxChunkSize:Int):zio.stream.ZStream[Any,Throwable,A]", "kind" : "def"}, {"label" : "effectAsyncMaybe", "tail" : "(register: (Emit[R, E, A, Unit]) => Option[ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.effectAsyncMaybe", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#effectAsyncMaybe[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>Option[zio.stream.ZStream[R,E,A]],outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "effectAsyncM", "tail" : "(register: (Emit[R, E, A, Unit]) => ZIO[R, E, Any], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.effectAsyncM", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#effectAsyncM[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>zio.ZIO[R,E,Any],outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "effectAsyncInterrupt", "tail" : "(register: (Emit[R, E, A, Unit]) => Either[Canceler[R], ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.effectAsyncInterrupt", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#effectAsyncInterrupt[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>Either[zio.Canceler[R],zio.stream.ZStream[R,E,A]],outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "effectAsync", "tail" : "(register: (Emit[R, E, A, Unit]) => Unit, outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.effectAsync", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#effectAsync[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>Unit,outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncMaybe", "tail" : "(register: (Emit[R, E, A, Unit]) => Option[ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.asyncMaybe", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#asyncMaybe[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>Option[zio.stream.ZStream[R,E,A]],outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncZIO", "tail" : "(register: (Emit[R, E, A, Unit]) => ZIO[R, E, Any], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.asyncZIO", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#asyncZIO[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>zio.ZIO[R,E,Any],outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncManaged", "tail" : "(register: ((ZIO[R, Option[E], Chunk[A]]) => Unit) => ZManaged[R, E, Any], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.asyncManaged", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#asyncManaged[R,E,A](register:(zio.ZIO[R,Option[E],zio.Chunk[A]]=>Unit)=>zio.ZManaged[R,E,Any],outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "asyncInterrupt", "tail" : "(register: (Emit[R, E, A, Unit]) => Either[Canceler[R], ZStream[R, E, A]], outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.asyncInterrupt", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#asyncInterrupt[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>Either[zio.Canceler[R],zio.stream.ZStream[R,E,A]],outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "async", "tail" : "(register: (Emit[R, E, A, Unit]) => Unit, outputBuffer: Int): ZStream[R, E, A]", "member" : "zio.stream.ZStreamPlatformSpecificConstructors.async", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#async[R,E,A](register:zio.stream.ZStream.Emit[R,E,A,Unit]=>Unit,outputBuffer:Int):zio.stream.ZStream[R,E,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/ZStreamPlatformSpecificConstructors.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.stream.ZTransducer", "shortDescription" : "", "object" : "zio\/stream\/ZTransducer$.html", "members_class" : [{"label" : "mapZIO", "tail" : "(f: (O) => ZIO[R1, E1, P]): ZTransducer[R1, E1, I, P]", "member" : "zio.stream.ZTransducer.mapZIO", "link" : "zio\/stream\/ZTransducer.html#mapZIO[R1<:R,E1>:E,P](f:O=>zio.ZIO[R1,E1,P]):zio.stream.ZTransducer[R1,E1,I,P]", "kind" : "final def"}, {"label" : "mapM", "tail" : "(f: (O) => ZIO[R1, E1, P]): ZTransducer[R1, E1, I, P]", "member" : "zio.stream.ZTransducer.mapM", "link" : "zio\/stream\/ZTransducer.html#mapM[R1<:R,E1>:E,P](f:O=>zio.ZIO[R1,E1,P]):zio.stream.ZTransducer[R1,E1,I,P]", "kind" : "final def"}, {"label" : "mapError", "tail" : "(f: (E) => E1): ZTransducer[R, E1, I, O]", "member" : "zio.stream.ZTransducer.mapError", "link" : "zio\/stream\/ZTransducer.html#mapError[E1](f:E=>E1):zio.stream.ZTransducer[R,E1,I,O]", "kind" : "final def"}, {"label" : "mapChunksZIO", "tail" : "(f: (Chunk[O]) => ZIO[R1, E1, Chunk[O2]]): ZTransducer[R1, E1, I, O2]", "member" : "zio.stream.ZTransducer.mapChunksZIO", "link" : "zio\/stream\/ZTransducer.html#mapChunksZIO[R1<:R,E1>:E,O2](f:zio.Chunk[O]=>zio.ZIO[R1,E1,zio.Chunk[O2]]):zio.stream.ZTransducer[R1,E1,I,O2]", "kind" : "final def"}, {"label" : "mapChunksM", "tail" : "(f: (Chunk[O]) => ZIO[R1, E1, Chunk[O2]]): ZTransducer[R1, E1, I, O2]", "member" : "zio.stream.ZTransducer.mapChunksM", "link" : "zio\/stream\/ZTransducer.html#mapChunksM[R1<:R,E1>:E,O2](f:zio.Chunk[O]=>zio.ZIO[R1,E1,zio.Chunk[O2]]):zio.stream.ZTransducer[R1,E1,I,O2]", "kind" : "final def"}, {"label" : "mapChunks", "tail" : "(f: (Chunk[O]) => Chunk[O2]): ZTransducer[R, E, I, O2]", "member" : "zio.stream.ZTransducer.mapChunks", "link" : "zio\/stream\/ZTransducer.html#mapChunks[O2](f:zio.Chunk[O]=>zio.Chunk[O2]):zio.stream.ZTransducer[R,E,I,O2]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (O) => P): ZTransducer[R, E, I, P]", "member" : "zio.stream.ZTransducer.map", "link" : "zio\/stream\/ZTransducer.html#map[P](f:O=>P):zio.stream.ZTransducer[R,E,I,P]", "kind" : "final def"}, {"label" : "filterInputZIO", "tail" : "(p: (I1) => ZIO[R1, E1, Boolean]): ZTransducer[R1, E1, I1, O]", "member" : "zio.stream.ZTransducer.filterInputZIO", "link" : "zio\/stream\/ZTransducer.html#filterInputZIO[R1<:R,E1>:E,I1<:I](p:I1=>zio.ZIO[R1,E1,Boolean]):zio.stream.ZTransducer[R1,E1,I1,O]", "kind" : "final def"}, {"label" : "filterInputM", "tail" : "(p: (I1) => ZIO[R1, E1, Boolean]): ZTransducer[R1, E1, I1, O]", "member" : "zio.stream.ZTransducer.filterInputM", "link" : "zio\/stream\/ZTransducer.html#filterInputM[R1<:R,E1>:E,I1<:I](p:I1=>zio.ZIO[R1,E1,Boolean]):zio.stream.ZTransducer[R1,E1,I1,O]", "kind" : "final def"}, {"label" : "filterInput", "tail" : "(p: (I1) => Boolean): ZTransducer[R, E, I1, O]", "member" : "zio.stream.ZTransducer.filterInput", "link" : "zio\/stream\/ZTransducer.html#filterInput[I1<:I](p:I1=>Boolean):zio.stream.ZTransducer[R,E,I1,O]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (O) => Boolean): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.filter", "link" : "zio\/stream\/ZTransducer.html#filter(p:O=>Boolean):zio.stream.ZTransducer[R,E,I,O]", "kind" : "final def"}, {"label" : "contramapZIO", "tail" : "(f: (J) => ZIO[R1, E1, I]): ZTransducer[R1, E1, J, O]", "member" : "zio.stream.ZTransducer.contramapZIO", "link" : "zio\/stream\/ZTransducer.html#contramapZIO[R1<:R,E1>:E,J](f:J=>zio.ZIO[R1,E1,I]):zio.stream.ZTransducer[R1,E1,J,O]", "kind" : "final def"}, {"label" : "contramapM", "tail" : "(f: (J) => ZIO[R1, E1, I]): ZTransducer[R1, E1, J, O]", "member" : "zio.stream.ZTransducer.contramapM", "link" : "zio\/stream\/ZTransducer.html#contramapM[R1<:R,E1>:E,J](f:J=>zio.ZIO[R1,E1,I]):zio.stream.ZTransducer[R1,E1,J,O]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (J) => I): ZTransducer[R, E, J, O]", "member" : "zio.stream.ZTransducer.contramap", "link" : "zio\/stream\/ZTransducer.html#contramap[J](f:J=>I):zio.stream.ZTransducer[R,E,J,O]", "kind" : "final def"}, {"label" : ">>>", "tail" : "(that: ZSink[R1, E1, O2, L, Z]): ZSink[R1, E1, I1, L, Z]", "member" : "zio.stream.ZTransducer.>>>", "link" : "zio\/stream\/ZTransducer.html#>>>[R1<:R,E1>:E,O2>:O,I1<:I,L,Z](that:zio.stream.ZSink[R1,E1,O2,L,Z]):zio.stream.ZSink[R1,E1,I1,L,Z]", "kind" : "def"}, {"label" : ">>>", "tail" : "(that: ZTransducer[R1, E1, O2, O3]): ZTransducer[R1, E1, I, O3]", "member" : "zio.stream.ZTransducer.>>>", "link" : "zio\/stream\/ZTransducer.html#>>>[R1<:R,E1>:E,O2>:O,O3](that:zio.stream.ZTransducer[R1,E1,O2,O3]):zio.stream.ZTransducer[R1,E1,I,O3]", "kind" : "def"}, {"member" : "zio.stream.ZTransducer#<init>", "error" : "unsupported entity"}, {"label" : "push", "tail" : ": ZManaged[R, Nothing, (Option[Chunk[I]]) => ZIO[R, E, Chunk[O]]]", "member" : "zio.stream.ZTransducer.push", "link" : "zio\/stream\/ZTransducer.html#push:zio.ZManaged[R,Nothing,Option[zio.Chunk[I]]=>zio.ZIO[R,E,zio.Chunk[O]]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/ZTransducer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/ZTransducer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/ZTransducer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/ZTransducer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/ZTransducer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/ZTransducer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/ZTransducer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZTransducer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZTransducer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZTransducer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/ZTransducer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/ZTransducer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/ZTransducer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/ZTransducer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/ZTransducer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/ZTransducer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/ZTransducer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/ZTransducer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/ZTransducer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Push", "tail" : "", "member" : "zio.stream.ZTransducer.Push", "link" : "zio\/stream\/ZTransducer$.html#Push", "kind" : "object"}, {"label" : "usASCIIDecode", "tail" : ": ZTransducer[Any, Nothing, Byte, String]", "member" : "zio.stream.ZTransducer.usASCIIDecode", "link" : "zio\/stream\/ZTransducer$.html#usASCIIDecode:zio.stream.ZTransducer[Any,Nothing,Byte,String]", "kind" : "val"}, {"label" : "utf32LEDecode", "tail" : ": ZTransducer[Any, Nothing, Byte, String]", "member" : "zio.stream.ZTransducer.utf32LEDecode", "link" : "zio\/stream\/ZTransducer$.html#utf32LEDecode:zio.stream.ZTransducer[Any,Nothing,Byte,String]", "kind" : "lazy val"}, {"label" : "utf32BEDecode", "tail" : ": ZTransducer[Any, Nothing, Byte, String]", "member" : "zio.stream.ZTransducer.utf32BEDecode", "link" : "zio\/stream\/ZTransducer$.html#utf32BEDecode:zio.stream.ZTransducer[Any,Nothing,Byte,String]", "kind" : "lazy val"}, {"label" : "utf32Decode", "tail" : ": ZTransducer[Any, Nothing, Byte, String]", "member" : "zio.stream.ZTransducer.utf32Decode", "link" : "zio\/stream\/ZTransducer$.html#utf32Decode:zio.stream.ZTransducer[Any,Nothing,Byte,String]", "kind" : "lazy val"}, {"label" : "utf16LEDecode", "tail" : ": ZTransducer[Any, Nothing, Byte, String]", "member" : "zio.stream.ZTransducer.utf16LEDecode", "link" : "zio\/stream\/ZTransducer$.html#utf16LEDecode:zio.stream.ZTransducer[Any,Nothing,Byte,String]", "kind" : "val"}, {"label" : "utf16BEDecode", "tail" : ": ZTransducer[Any, Nothing, Byte, String]", "member" : "zio.stream.ZTransducer.utf16BEDecode", "link" : "zio\/stream\/ZTransducer$.html#utf16BEDecode:zio.stream.ZTransducer[Any,Nothing,Byte,String]", "kind" : "val"}, {"label" : "utf16Decode", "tail" : ": ZTransducer[Any, Nothing, Byte, String]", "member" : "zio.stream.ZTransducer.utf16Decode", "link" : "zio\/stream\/ZTransducer$.html#utf16Decode:zio.stream.ZTransducer[Any,Nothing,Byte,String]", "kind" : "val"}, {"label" : "utf8Decode", "tail" : ": ZTransducer[Any, Nothing, Byte, String]", "member" : "zio.stream.ZTransducer.utf8Decode", "link" : "zio\/stream\/ZTransducer$.html#utf8Decode:zio.stream.ZTransducer[Any,Nothing,Byte,String]", "kind" : "val"}, {"label" : "utfDecode", "tail" : ": ZTransducer[Any, Nothing, Byte, String]", "member" : "zio.stream.ZTransducer.utfDecode", "link" : "zio\/stream\/ZTransducer$.html#utfDecode:zio.stream.ZTransducer[Any,Nothing,Byte,String]", "kind" : "val"}, {"label" : "unwrapManaged", "tail" : "(managed: ZManaged[R, E, ZTransducer[R, E, I, O]]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.unwrapManaged", "link" : "zio\/stream\/ZTransducer$.html#unwrapManaged[R,E,I,O](managed:zio.ZManaged[R,E,zio.stream.ZTransducer[R,E,I,O]]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "unwrap", "tail" : "(zio: ZIO[R, E, ZTransducer[R, E, I, O]]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.unwrap", "link" : "zio\/stream\/ZTransducer$.html#unwrap[R,E,I,O](zio:zio.ZIO[R,E,zio.stream.ZTransducer[R,E,I,O]]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "splitOnChunk", "tail" : "(delimiter: Chunk[A]): ZTransducer[Any, Nothing, A, Chunk[A]]", "member" : "zio.stream.ZTransducer.splitOnChunk", "link" : "zio\/stream\/ZTransducer$.html#splitOnChunk[A](delimiter:zio.Chunk[A]):zio.stream.ZTransducer[Any,Nothing,A,zio.Chunk[A]]", "kind" : "def"}, {"label" : "splitOn", "tail" : "(delimiter: String): ZTransducer[Any, Nothing, String, String]", "member" : "zio.stream.ZTransducer.splitOn", "link" : "zio\/stream\/ZTransducer$.html#splitOn(delimiter:String):zio.stream.ZTransducer[Any,Nothing,String,String]", "kind" : "def"}, {"label" : "splitLines", "tail" : ": ZTransducer[Any, Nothing, String, String]", "member" : "zio.stream.ZTransducer.splitLines", "link" : "zio\/stream\/ZTransducer$.html#splitLines:zio.stream.ZTransducer[Any,Nothing,String,String]", "kind" : "val"}, {"label" : "prepend", "tail" : "(values: Chunk[A]): ZTransducer[Any, Nothing, A, A]", "member" : "zio.stream.ZTransducer.prepend", "link" : "zio\/stream\/ZTransducer$.html#prepend[A](values:zio.Chunk[A]):zio.stream.ZTransducer[Any,Nothing,A,A]", "kind" : "def"}, {"label" : "last", "tail" : "(): ZTransducer[Any, Nothing, O, Option[O]]", "member" : "zio.stream.ZTransducer.last", "link" : "zio\/stream\/ZTransducer$.html#last[O]:zio.stream.ZTransducer[Any,Nothing,O,Option[O]]", "kind" : "def"}, {"label" : "iso_8859_1Decode", "tail" : ": ZTransducer[Any, Nothing, Byte, String]", "member" : "zio.stream.ZTransducer.iso_8859_1Decode", "link" : "zio\/stream\/ZTransducer$.html#iso_8859_1Decode:zio.stream.ZTransducer[Any,Nothing,Byte,String]", "kind" : "val"}, {"label" : "identity", "tail" : "(): ZTransducer[Any, Nothing, I, I]", "member" : "zio.stream.ZTransducer.identity", "link" : "zio\/stream\/ZTransducer$.html#identity[I]:zio.stream.ZTransducer[Any,Nothing,I,I]", "kind" : "def"}, {"label" : "head", "tail" : "(): ZTransducer[Any, Nothing, O, Option[O]]", "member" : "zio.stream.ZTransducer.head", "link" : "zio\/stream\/ZTransducer$.html#head[O]:zio.stream.ZTransducer[Any,Nothing,O,Option[O]]", "kind" : "def"}, {"label" : "fromZIO", "tail" : "(zio: ZIO[R, E, A]): ZTransducer[R, E, Any, A]", "member" : "zio.stream.ZTransducer.fromZIO", "link" : "zio\/stream\/ZTransducer$.html#fromZIO[R,E,A](zio:zio.ZIO[R,E,A]):zio.stream.ZTransducer[R,E,Any,A]", "kind" : "def"}, {"label" : "fromPush", "tail" : "(push: (Option[Chunk[I]]) => ZIO[R, E, Chunk[O]]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.fromPush", "link" : "zio\/stream\/ZTransducer$.html#fromPush[R,E,I,O](push:Option[zio.Chunk[I]]=>zio.ZIO[R,E,zio.Chunk[O]]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "fromFunctionZIO", "tail" : "(f: (I) => ZIO[R, E, O]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.fromFunctionZIO", "link" : "zio\/stream\/ZTransducer$.html#fromFunctionZIO[R,E,I,O](f:I=>zio.ZIO[R,E,O]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "fromFunctionM", "tail" : "(f: (I) => ZIO[R, E, O]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.fromFunctionM", "link" : "zio\/stream\/ZTransducer$.html#fromFunctionM[R,E,I,O](f:I=>zio.ZIO[R,E,O]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "fromFunction", "tail" : "(f: (I) => O): ZTransducer[Any, Nothing, I, O]", "member" : "zio.stream.ZTransducer.fromFunction", "link" : "zio\/stream\/ZTransducer$.html#fromFunction[I,O](f:I=>O):zio.stream.ZTransducer[Any,Nothing,I,O]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(zio: ZIO[R, E, A]): ZTransducer[R, E, Any, A]", "member" : "zio.stream.ZTransducer.fromEffect", "link" : "zio\/stream\/ZTransducer$.html#fromEffect[R,E,A](zio:zio.ZIO[R,E,A]):zio.stream.ZTransducer[R,E,Any,A]", "kind" : "def"}, {"label" : "foldZIO", "tail" : "(z: O)(contFn: (O) => Boolean)(f: (O, I) => ZIO[R, E, O]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.foldZIO", "link" : "zio\/stream\/ZTransducer$.html#foldZIO[R,E,I,O](z:O)(contFn:O=>Boolean)(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "foldWeightedZIO", "tail" : "(z: O)(costFn: (O, I) => ZIO[R, E, Long], max: Long)(f: (O, I) => ZIO[R, E, O]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.foldWeightedZIO", "link" : "zio\/stream\/ZTransducer$.html#foldWeightedZIO[R,E,I,O](z:O)(costFn:(O,I)=>zio.ZIO[R,E,Long],max:Long)(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "foldWeightedM", "tail" : "(z: O)(costFn: (O, I) => ZIO[R, E, Long], max: Long)(f: (O, I) => ZIO[R, E, O]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.foldWeightedM", "link" : "zio\/stream\/ZTransducer$.html#foldWeightedM[R,E,I,O](z:O)(costFn:(O,I)=>zio.ZIO[R,E,Long],max:Long)(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "foldWeightedDecomposeZIO", "tail" : "(z: O)(costFn: (O, I) => ZIO[R, E, Long], max: Long, decompose: (I) => ZIO[R, E, Chunk[I]])(f: (O, I) => ZIO[R, E, O]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.foldWeightedDecomposeZIO", "link" : "zio\/stream\/ZTransducer$.html#foldWeightedDecomposeZIO[R,E,I,O](z:O)(costFn:(O,I)=>zio.ZIO[R,E,Long],max:Long,decompose:I=>zio.ZIO[R,E,zio.Chunk[I]])(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "foldWeightedDecomposeM", "tail" : "(z: O)(costFn: (O, I) => ZIO[R, E, Long], max: Long, decompose: (I) => ZIO[R, E, Chunk[I]])(f: (O, I) => ZIO[R, E, O]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.foldWeightedDecomposeM", "link" : "zio\/stream\/ZTransducer$.html#foldWeightedDecomposeM[R,E,I,O](z:O)(costFn:(O,I)=>zio.ZIO[R,E,Long],max:Long,decompose:I=>zio.ZIO[R,E,zio.Chunk[I]])(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "foldWeightedDecompose", "tail" : "(z: O)(costFn: (O, I) => Long, max: Long, decompose: (I) => Chunk[I])(f: (O, I) => O): ZTransducer[Any, Nothing, I, O]", "member" : "zio.stream.ZTransducer.foldWeightedDecompose", "link" : "zio\/stream\/ZTransducer$.html#foldWeightedDecompose[I,O](z:O)(costFn:(O,I)=>Long,max:Long,decompose:I=>zio.Chunk[I])(f:(O,I)=>O):zio.stream.ZTransducer[Any,Nothing,I,O]", "kind" : "def"}, {"label" : "foldWeighted", "tail" : "(z: O)(costFn: (O, I) => Long, max: Long)(f: (O, I) => O): ZTransducer[Any, Nothing, I, O]", "member" : "zio.stream.ZTransducer.foldWeighted", "link" : "zio\/stream\/ZTransducer$.html#foldWeighted[I,O](z:O)(costFn:(O,I)=>Long,max:Long)(f:(O,I)=>O):zio.stream.ZTransducer[Any,Nothing,I,O]", "kind" : "def"}, {"label" : "foldUntilZIO", "tail" : "(z: O, max: Long)(f: (O, I) => ZIO[R, E, O]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.foldUntilZIO", "link" : "zio\/stream\/ZTransducer$.html#foldUntilZIO[R,E,I,O](z:O,max:Long)(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "foldUntilM", "tail" : "(z: O, max: Long)(f: (O, I) => ZIO[R, E, O]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.foldUntilM", "link" : "zio\/stream\/ZTransducer$.html#foldUntilM[R,E,I,O](z:O,max:Long)(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "foldUntil", "tail" : "(z: O, max: Long)(f: (O, I) => O): ZTransducer[Any, Nothing, I, O]", "member" : "zio.stream.ZTransducer.foldUntil", "link" : "zio\/stream\/ZTransducer$.html#foldUntil[I,O](z:O,max:Long)(f:(O,I)=>O):zio.stream.ZTransducer[Any,Nothing,I,O]", "kind" : "def"}, {"label" : "foldM", "tail" : "(z: O)(contFn: (O) => Boolean)(f: (O, I) => ZIO[R, E, O]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.foldM", "link" : "zio\/stream\/ZTransducer$.html#foldM[R,E,I,O](z:O)(contFn:O=>Boolean)(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "foldLeftZIO", "tail" : "(z: O)(f: (O, I) => ZIO[R, E, O]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.foldLeftZIO", "link" : "zio\/stream\/ZTransducer$.html#foldLeftZIO[R,E,I,O](z:O)(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "foldLeftM", "tail" : "(z: O)(f: (O, I) => ZIO[R, E, O]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.foldLeftM", "link" : "zio\/stream\/ZTransducer$.html#foldLeftM[R,E,I,O](z:O)(f:(O,I)=>zio.ZIO[R,E,O]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: O)(f: (O, I) => O): ZTransducer[Any, Nothing, I, O]", "member" : "zio.stream.ZTransducer.foldLeft", "link" : "zio\/stream\/ZTransducer$.html#foldLeft[I,O](z:O)(f:(O,I)=>O):zio.stream.ZTransducer[Any,Nothing,I,O]", "kind" : "def"}, {"label" : "fold", "tail" : "(z: O)(contFn: (O) => Boolean)(f: (O, I) => O): ZTransducer[Any, Nothing, I, O]", "member" : "zio.stream.ZTransducer.fold", "link" : "zio\/stream\/ZTransducer$.html#fold[I,O](z:O)(contFn:O=>Boolean)(f:(O,I)=>O):zio.stream.ZTransducer[Any,Nothing,I,O]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: => E): ZTransducer[Any, E, Any, Nothing]", "member" : "zio.stream.ZTransducer.fail", "link" : "zio\/stream\/ZTransducer$.html#fail[E](e:=>E):zio.stream.ZTransducer[Any,E,Any,Nothing]", "kind" : "def"}, {"label" : "dropWhileZIO", "tail" : "(p: (I) => ZIO[R, E, Boolean]): ZTransducer[R, E, I, I]", "member" : "zio.stream.ZTransducer.dropWhileZIO", "link" : "zio\/stream\/ZTransducer$.html#dropWhileZIO[R,E,I](p:I=>zio.ZIO[R,E,Boolean]):zio.stream.ZTransducer[R,E,I,I]", "kind" : "def"}, {"label" : "dropWhileM", "tail" : "(p: (I) => ZIO[R, E, Boolean]): ZTransducer[R, E, I, I]", "member" : "zio.stream.ZTransducer.dropWhileM", "link" : "zio\/stream\/ZTransducer$.html#dropWhileM[R,E,I](p:I=>zio.ZIO[R,E,Boolean]):zio.stream.ZTransducer[R,E,I,I]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (I) => Boolean): ZTransducer[Any, Nothing, I, I]", "member" : "zio.stream.ZTransducer.dropWhile", "link" : "zio\/stream\/ZTransducer$.html#dropWhile[I](p:I=>Boolean):zio.stream.ZTransducer[Any,Nothing,I,I]", "kind" : "def"}, {"label" : "die", "tail" : "(e: => Throwable): ZTransducer[Any, Nothing, Any, Nothing]", "member" : "zio.stream.ZTransducer.die", "link" : "zio\/stream\/ZTransducer$.html#die(e:=>Throwable):zio.stream.ZTransducer[Any,Nothing,Any,Nothing]", "kind" : "def"}, {"label" : "collectAllWhileZIO", "tail" : "(p: (I) => ZIO[R, E, Boolean]): ZTransducer[R, E, I, List[I]]", "member" : "zio.stream.ZTransducer.collectAllWhileZIO", "link" : "zio\/stream\/ZTransducer$.html#collectAllWhileZIO[R,E,I](p:I=>zio.ZIO[R,E,Boolean]):zio.stream.ZTransducer[R,E,I,List[I]]", "kind" : "def"}, {"label" : "collectAllWhileM", "tail" : "(p: (I) => ZIO[R, E, Boolean]): ZTransducer[R, E, I, List[I]]", "member" : "zio.stream.ZTransducer.collectAllWhileM", "link" : "zio\/stream\/ZTransducer$.html#collectAllWhileM[R,E,I](p:I=>zio.ZIO[R,E,Boolean]):zio.stream.ZTransducer[R,E,I,List[I]]", "kind" : "def"}, {"label" : "collectAllWhile", "tail" : "(p: (I) => Boolean): ZTransducer[Any, Nothing, I, List[I]]", "member" : "zio.stream.ZTransducer.collectAllWhile", "link" : "zio\/stream\/ZTransducer$.html#collectAllWhile[I](p:I=>Boolean):zio.stream.ZTransducer[Any,Nothing,I,List[I]]", "kind" : "def"}, {"label" : "collectAllToSetN", "tail" : "(n: Long): ZTransducer[Any, Nothing, I, Set[I]]", "member" : "zio.stream.ZTransducer.collectAllToSetN", "link" : "zio\/stream\/ZTransducer$.html#collectAllToSetN[I](n:Long):zio.stream.ZTransducer[Any,Nothing,I,Set[I]]", "kind" : "def"}, {"label" : "collectAllToMapN", "tail" : "(n: Long)(key: (I) => K)(f: (I, I) => I): ZTransducer[Any, Nothing, I, Map[K, I]]", "member" : "zio.stream.ZTransducer.collectAllToMapN", "link" : "zio\/stream\/ZTransducer$.html#collectAllToMapN[K,I](n:Long)(key:I=>K)(f:(I,I)=>I):zio.stream.ZTransducer[Any,Nothing,I,Map[K,I]]", "kind" : "def"}, {"label" : "collectAllN", "tail" : "(n: Int): ZTransducer[Any, Nothing, I, Chunk[I]]", "member" : "zio.stream.ZTransducer.collectAllN", "link" : "zio\/stream\/ZTransducer$.html#collectAllN[I](n:Int):zio.stream.ZTransducer[Any,Nothing,I,zio.Chunk[I]]", "kind" : "def"}, {"label" : "branchAfter", "tail" : "(n: Int)(f: (Chunk[I]) => ZTransducer[R, E, I, O]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.branchAfter", "link" : "zio\/stream\/ZTransducer$.html#branchAfter[R,E,I,O](n:Int)(f:zio.Chunk[I]=>zio.stream.ZTransducer[R,E,I,O]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "apply", "tail" : "(): ZTransducer[Any, Nothing, I, I]", "member" : "zio.stream.ZTransducer.apply", "link" : "zio\/stream\/ZTransducer$.html#apply[I]:zio.stream.ZTransducer[Any,Nothing,I,I]", "kind" : "def"}, {"label" : "apply", "tail" : "(push: ZManaged[R, Nothing, (Option[Chunk[I]]) => ZIO[R, E, Chunk[O]]]): ZTransducer[R, E, I, O]", "member" : "zio.stream.ZTransducer.apply", "link" : "zio\/stream\/ZTransducer$.html#apply[R,E,I,O](push:zio.ZManaged[R,Nothing,Option[zio.Chunk[I]]=>zio.ZIO[R,E,zio.Chunk[O]]]):zio.stream.ZTransducer[R,E,I,O]", "kind" : "def"}, {"label" : "gunzip", "tail" : "(bufferSize: Int): ZTransducer[Any, CompressionException, Byte, Byte]", "member" : "zio.stream.ZTransducerPlatformSpecificConstructors.gunzip", "link" : "zio\/stream\/ZTransducer$.html#gunzip(bufferSize:Int):zio.stream.ZTransducer[Any,zio.stream.compression.CompressionException,Byte,Byte]", "kind" : "def"}, {"label" : "gzip", "tail" : "(bufferSize: Int, level: CompressionLevel, strategy: CompressionStrategy, flushMode: FlushMode): ZTransducer[Any, Nothing, Byte, Byte]", "member" : "zio.stream.ZTransducerPlatformSpecificConstructors.gzip", "link" : "zio\/stream\/ZTransducer$.html#gzip(bufferSize:Int,level:zio.stream.compression.CompressionLevel,strategy:zio.stream.compression.CompressionStrategy,flushMode:zio.stream.compression.FlushMode):zio.stream.ZTransducer[Any,Nothing,Byte,Byte]", "kind" : "def"}, {"label" : "inflate", "tail" : "(bufferSize: Int, noWrap: Boolean): ZTransducer[Any, CompressionException, Byte, Byte]", "member" : "zio.stream.ZTransducerPlatformSpecificConstructors.inflate", "link" : "zio\/stream\/ZTransducer$.html#inflate(bufferSize:Int,noWrap:Boolean):zio.stream.ZTransducer[Any,zio.stream.compression.CompressionException,Byte,Byte]", "kind" : "def"}, {"label" : "deflate", "tail" : "(bufferSize: Int, noWrap: Boolean, level: CompressionLevel, strategy: CompressionStrategy, flushMode: FlushMode): ZTransducer[Any, Nothing, Byte, Byte]", "member" : "zio.stream.ZTransducerPlatformSpecificConstructors.deflate", "link" : "zio\/stream\/ZTransducer$.html#deflate(bufferSize:Int,noWrap:Boolean,level:zio.stream.compression.CompressionLevel,strategy:zio.stream.compression.CompressionStrategy,flushMode:zio.stream.compression.FlushMode):zio.stream.ZTransducer[Any,Nothing,Byte,Byte]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/ZTransducer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/ZTransducer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/ZTransducer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/ZTransducer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/ZTransducer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/ZTransducer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/ZTransducer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZTransducer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZTransducer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZTransducer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/ZTransducer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/ZTransducer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/ZTransducer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/ZTransducer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/ZTransducer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/ZTransducer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/ZTransducer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/ZTransducer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/ZTransducer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stream\/ZTransducer.html", "kind" : "class"}, {"name" : "zio.stream.ZTransducerPlatformSpecificConstructors", "trait" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html", "kind" : "trait", "members_trait" : [{"label" : "gunzip", "tail" : "(bufferSize: Int): ZTransducer[Any, CompressionException, Byte, Byte]", "member" : "zio.stream.ZTransducerPlatformSpecificConstructors.gunzip", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#gunzip(bufferSize:Int):zio.stream.ZTransducer[Any,zio.stream.compression.CompressionException,Byte,Byte]", "kind" : "def"}, {"label" : "gzip", "tail" : "(bufferSize: Int, level: CompressionLevel, strategy: CompressionStrategy, flushMode: FlushMode): ZTransducer[Any, Nothing, Byte, Byte]", "member" : "zio.stream.ZTransducerPlatformSpecificConstructors.gzip", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#gzip(bufferSize:Int,level:zio.stream.compression.CompressionLevel,strategy:zio.stream.compression.CompressionStrategy,flushMode:zio.stream.compression.FlushMode):zio.stream.ZTransducer[Any,Nothing,Byte,Byte]", "kind" : "def"}, {"label" : "inflate", "tail" : "(bufferSize: Int, noWrap: Boolean): ZTransducer[Any, CompressionException, Byte, Byte]", "member" : "zio.stream.ZTransducerPlatformSpecificConstructors.inflate", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#inflate(bufferSize:Int,noWrap:Boolean):zio.stream.ZTransducer[Any,zio.stream.compression.CompressionException,Byte,Byte]", "kind" : "def"}, {"label" : "deflate", "tail" : "(bufferSize: Int, noWrap: Boolean, level: CompressionLevel, strategy: CompressionStrategy, flushMode: FlushMode): ZTransducer[Any, Nothing, Byte, Byte]", "member" : "zio.stream.ZTransducerPlatformSpecificConstructors.deflate", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#deflate(bufferSize:Int,noWrap:Boolean,level:zio.stream.compression.CompressionLevel,strategy:zio.stream.compression.CompressionStrategy,flushMode:zio.stream.compression.FlushMode):zio.stream.ZTransducer[Any,Nothing,Byte,Byte]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/ZTransducerPlatformSpecificConstructors.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "zio.stream.internal" : [{"name" : "zio.stream.internal.Utils", "shortDescription" : "", "object" : "zio\/stream\/internal\/Utils$.html", "members_object" : [{"label" : "zipChunks", "tail" : "(cl: Chunk[A], cr: Chunk[B], f: (A, B) => C): (Chunk[C], Either[Chunk[A], Chunk[B]])", "member" : "zio.stream.internal.Utils.zipChunks", "link" : "zio\/stream\/internal\/Utils$.html#zipChunks[A,B,C](cl:zio.Chunk[A],cr:zio.Chunk[B],f:(A,B)=>C):(zio.Chunk[C],Either[zio.Chunk[A],zio.Chunk[B]])", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/internal\/Utils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/internal\/Utils$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/internal\/Utils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/internal\/Utils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/internal\/Utils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/internal\/Utils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/internal\/Utils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/internal\/Utils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/internal\/Utils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/internal\/Utils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/internal\/Utils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/internal\/Utils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/internal\/Utils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/internal\/Utils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/internal\/Utils$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/internal\/Utils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/internal\/Utils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/internal\/Utils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/internal\/Utils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "zio.metrics" : [{"name" : "zio.metrics.MetricClient", "shortDescription" : "A MetricClient provides the functionality to consume metrics produced byZIO applications.", "object" : "zio\/metrics\/MetricClient$.html", "members_object" : [{"label" : "unsafeSnapshot", "tail" : "(): Map[MetricKey, MetricState]", "member" : "zio.metrics.MetricClient.unsafeSnapshot", "link" : "zio\/metrics\/MetricClient$.html#unsafeSnapshot:Map[zio.metrics.MetricKey,zio.metrics.MetricState]", "kind" : "final def"}, {"label" : "unsafeRemoveListener", "tail" : "(listener: MetricListener): Unit", "member" : "zio.metrics.MetricClient.unsafeRemoveListener", "link" : "zio\/metrics\/MetricClient$.html#unsafeRemoveListener(listener:zio.metrics.MetricListener):Unit", "kind" : "final def"}, {"label" : "unsafeInstallListener", "tail" : "(listener: MetricListener): Unit", "member" : "zio.metrics.MetricClient.unsafeInstallListener", "link" : "zio\/metrics\/MetricClient$.html#unsafeInstallListener(listener:zio.metrics.MetricListener):Unit", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/metrics\/MetricClient$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/metrics\/MetricClient$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/metrics\/MetricClient$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/metrics\/MetricClient$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/metrics\/MetricClient$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/metrics\/MetricClient$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/metrics\/MetricClient$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricClient$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricClient$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricClient$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/metrics\/MetricClient$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/metrics\/MetricClient$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/metrics\/MetricClient$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/metrics\/MetricClient$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/metrics\/MetricClient$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/metrics\/MetricClient$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/metrics\/MetricClient$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/metrics\/MetricClient$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/metrics\/MetricClient$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.metrics.MetricKey", "object" : "zio\/metrics\/MetricKey$.html", "members_object" : [{"label" : "SetCount", "tail" : "", "member" : "zio.metrics.MetricKey.SetCount", "link" : "zio\/metrics\/MetricKey$.html#SetCountextendsMetricKeywithProductwithSerializable", "kind" : "final case class"}, {"label" : "Summary", "tail" : "", "member" : "zio.metrics.MetricKey.Summary", "link" : "zio\/metrics\/MetricKey$.html#SummaryextendsMetricKeywithProductwithSerializable", "kind" : "final case class"}, {"label" : "Histogram", "tail" : "", "member" : "zio.metrics.MetricKey.Histogram", "link" : "zio\/metrics\/MetricKey$.html#HistogramextendsMetricKeywithProductwithSerializable", "kind" : "final case class"}, {"label" : "Gauge", "tail" : "", "member" : "zio.metrics.MetricKey.Gauge", "link" : "zio\/metrics\/MetricKey$.html#GaugeextendsMetricKeywithProductwithSerializable", "kind" : "final case class"}, {"label" : "Counter", "tail" : "", "member" : "zio.metrics.MetricKey.Counter", "link" : "zio\/metrics\/MetricKey$.html#CounterextendsMetricKeywithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/metrics\/MetricKey$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/metrics\/MetricKey$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/metrics\/MetricKey$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/metrics\/MetricKey$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/metrics\/MetricKey$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/metrics\/MetricKey$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/metrics\/MetricKey$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricKey$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricKey$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricKey$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/metrics\/MetricKey$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/metrics\/MetricKey$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/metrics\/MetricKey$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/metrics\/MetricKey$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/metrics\/MetricKey$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/metrics\/MetricKey$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/metrics\/MetricKey$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/metrics\/MetricKey$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/metrics\/MetricKey$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/metrics\/MetricKey.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/metrics\/MetricKey.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/metrics\/MetricKey.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/metrics\/MetricKey.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/metrics\/MetricKey.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/metrics\/MetricKey.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/metrics\/MetricKey.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/metrics\/MetricKey.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricKey.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricKey.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricKey.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/metrics\/MetricKey.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/metrics\/MetricKey.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/metrics\/MetricKey.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/metrics\/MetricKey.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/metrics\/MetricKey.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/metrics\/MetricKey.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/metrics\/MetricKey.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/metrics\/MetricKey.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/metrics\/MetricKey.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "A MetricKey is a unique key associated with each metric."}, {"name" : "zio.metrics.MetricListener", "trait" : "zio\/metrics\/MetricListener.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/metrics\/MetricListener.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/metrics\/MetricListener.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/metrics\/MetricListener.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/metrics\/MetricListener.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/metrics\/MetricListener.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/metrics\/MetricListener.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/metrics\/MetricListener.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricListener.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricListener.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricListener.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/metrics\/MetricListener.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/metrics\/MetricListener.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/metrics\/MetricListener.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/metrics\/MetricListener.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/metrics\/MetricListener.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/metrics\/MetricListener.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/metrics\/MetricListener.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/metrics\/MetricListener.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/metrics\/MetricListener.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unsafeSetChanged", "tail" : "(key: SetCount, value: MetricState): Unit", "member" : "zio.metrics.MetricListener.unsafeSetChanged", "link" : "zio\/metrics\/MetricListener.html#unsafeSetChanged(key:zio.metrics.MetricKey.SetCount,value:zio.metrics.MetricState):Unit", "kind" : "abstract def"}, {"label" : "unsafeSummaryChanged", "tail" : "(key: Summary, value: MetricState): Unit", "member" : "zio.metrics.MetricListener.unsafeSummaryChanged", "link" : "zio\/metrics\/MetricListener.html#unsafeSummaryChanged(key:zio.metrics.MetricKey.Summary,value:zio.metrics.MetricState):Unit", "kind" : "abstract def"}, {"label" : "unsafeHistogramChanged", "tail" : "(key: Histogram, value: MetricState): Unit", "member" : "zio.metrics.MetricListener.unsafeHistogramChanged", "link" : "zio\/metrics\/MetricListener.html#unsafeHistogramChanged(key:zio.metrics.MetricKey.Histogram,value:zio.metrics.MetricState):Unit", "kind" : "abstract def"}, {"label" : "unsafeCounterChanged", "tail" : "(key: Counter, absValue: Double, delta: Double): Unit", "member" : "zio.metrics.MetricListener.unsafeCounterChanged", "link" : "zio\/metrics\/MetricListener.html#unsafeCounterChanged(key:zio.metrics.MetricKey.Counter,absValue:Double,delta:Double):Unit", "kind" : "abstract def"}, {"label" : "unsafeGaugeChanged", "tail" : "(key: Gauge, value: Double, delta: Double): Unit", "member" : "zio.metrics.MetricListener.unsafeGaugeChanged", "link" : "zio\/metrics\/MetricListener.html#unsafeGaugeChanged(key:zio.metrics.MetricKey.Gauge,value:Double,delta:Double):Unit", "kind" : "abstract def"}], "shortDescription" : "A MetricListener is capable of taking some action in response to a metricbeing recorded, such as sending that metric to a third party service."}, {"name" : "zio.metrics.MetricState", "shortDescription" : "MetricState represents a snapshot of the current state of a metric as ofa poiint in time.", "object" : "zio\/metrics\/MetricState$.html", "members_object" : [{"label" : "setCount", "tail" : "(key: SetCount, help: String, values: Chunk[(String, Long)]): MetricState", "member" : "zio.metrics.MetricState.setCount", "link" : "zio\/metrics\/MetricState$.html#setCount(key:zio.metrics.MetricKey.SetCount,help:String,values:zio.Chunk[(String,Long)]):zio.metrics.MetricState", "kind" : "def"}, {"label" : "summary", "tail" : "(key: Summary, help: String, quantiles: Chunk[(Double, Option[Double])], count: Long, sum: Double): MetricState", "member" : "zio.metrics.MetricState.summary", "link" : "zio\/metrics\/MetricState$.html#summary(key:zio.metrics.MetricKey.Summary,help:String,quantiles:zio.Chunk[(Double,Option[Double])],count:Long,sum:Double):zio.metrics.MetricState", "kind" : "def"}, {"label" : "histogram", "tail" : "(key: Histogram, help: String, buckets: Chunk[(Double, Long)], count: Long, sum: Double): MetricState", "member" : "zio.metrics.MetricState.histogram", "link" : "zio\/metrics\/MetricState$.html#histogram(key:zio.metrics.MetricKey.Histogram,help:String,buckets:zio.Chunk[(Double,Long)],count:Long,sum:Double):zio.metrics.MetricState", "kind" : "def"}, {"label" : "gauge", "tail" : "(key: Gauge, help: String, startAt: Double): MetricState", "member" : "zio.metrics.MetricState.gauge", "link" : "zio\/metrics\/MetricState$.html#gauge(key:zio.metrics.MetricKey.Gauge,help:String,startAt:Double):zio.metrics.MetricState", "kind" : "def"}, {"label" : "counter", "tail" : "(key: Counter, help: String, value: Double): MetricState", "member" : "zio.metrics.MetricState.counter", "link" : "zio\/metrics\/MetricState$.html#counter(key:zio.metrics.MetricKey.Counter,help:String,value:Double):zio.metrics.MetricState", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/metrics\/MetricState$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/metrics\/MetricState$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/metrics\/MetricState$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/metrics\/MetricState$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/metrics\/MetricState$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/metrics\/MetricState$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/metrics\/MetricState$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricState$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricState$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricState$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/metrics\/MetricState$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/metrics\/MetricState$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/metrics\/MetricState$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/metrics\/MetricState$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/metrics\/MetricState$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/metrics\/MetricState$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/metrics\/MetricState$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/metrics\/MetricState$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/metrics\/MetricState$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "zio.metrics.MetricState.toString", "link" : "zio\/metrics\/MetricState.html#toString():String", "kind" : "def"}, {"member" : "zio.metrics.MetricState#<init>", "error" : "unsupported entity"}, {"label" : "details", "tail" : ": MetricType", "member" : "zio.metrics.MetricState.details", "link" : "zio\/metrics\/MetricState.html#details:zio.metrics.MetricType", "kind" : "val"}, {"label" : "labels", "tail" : ": Chunk[MetricLabel]", "member" : "zio.metrics.MetricState.labels", "link" : "zio\/metrics\/MetricState.html#labels:zio.Chunk[zio.MetricLabel]", "kind" : "val"}, {"label" : "help", "tail" : ": String", "member" : "zio.metrics.MetricState.help", "link" : "zio\/metrics\/MetricState.html#help:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "zio.metrics.MetricState.name", "link" : "zio\/metrics\/MetricState.html#name:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/metrics\/MetricState.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/metrics\/MetricState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/metrics\/MetricState.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/metrics\/MetricState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/metrics\/MetricState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/metrics\/MetricState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/metrics\/MetricState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/metrics\/MetricState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricState.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/metrics\/MetricState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/metrics\/MetricState.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/metrics\/MetricState.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/metrics\/MetricState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/metrics\/MetricState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/metrics\/MetricState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/metrics\/MetricState.html", "kind" : "case class"}, {"name" : "zio.metrics.MetricType", "object" : "zio\/metrics\/MetricType$.html", "members_object" : [{"label" : "SetCount", "tail" : "", "member" : "zio.metrics.MetricType.SetCount", "link" : "zio\/metrics\/MetricType$.html#SetCountextendsMetricTypewithProductwithSerializable", "kind" : "final case class"}, {"label" : "Summary", "tail" : "", "member" : "zio.metrics.MetricType.Summary", "link" : "zio\/metrics\/MetricType$.html#SummaryextendsMetricTypewithProductwithSerializable", "kind" : "final case class"}, {"label" : "DoubleHistogram", "tail" : "", "member" : "zio.metrics.MetricType.DoubleHistogram", "link" : "zio\/metrics\/MetricType$.html#DoubleHistogramextendsMetricTypewithProductwithSerializable", "kind" : "final case class"}, {"label" : "Gauge", "tail" : "", "member" : "zio.metrics.MetricType.Gauge", "link" : "zio\/metrics\/MetricType$.html#GaugeextendsMetricTypewithProductwithSerializable", "kind" : "final case class"}, {"label" : "Counter", "tail" : "", "member" : "zio.metrics.MetricType.Counter", "link" : "zio\/metrics\/MetricType$.html#CounterextendsMetricTypewithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/metrics\/MetricType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/metrics\/MetricType$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/metrics\/MetricType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/metrics\/MetricType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/metrics\/MetricType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/metrics\/MetricType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/metrics\/MetricType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/metrics\/MetricType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/metrics\/MetricType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/metrics\/MetricType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/metrics\/MetricType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/metrics\/MetricType$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/metrics\/MetricType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/metrics\/MetricType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/metrics\/MetricType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/metrics\/MetricType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/metrics\/MetricType.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/metrics\/MetricType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/metrics\/MetricType.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/metrics\/MetricType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/metrics\/MetricType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/metrics\/MetricType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/metrics\/MetricType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/metrics\/MetricType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/metrics\/MetricType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/metrics\/MetricType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/metrics\/MetricType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/metrics\/MetricType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/metrics\/MetricType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/metrics\/MetricType.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/metrics\/MetricType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/metrics\/MetricType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/metrics\/MetricType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/metrics\/MetricType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "MetricType represents information about the state of a metric that isparticular to a certain type of metric, such as a histogram as opposed to acounter."}], "zio.test.render" : [{"name" : "zio.test.render.ConsoleRenderer", "object" : "zio\/test\/render\/ConsoleRenderer$.html", "members_object" : [{"label" : "renderToStringLines", "tail" : "(message: Message): Seq[String]", "member" : "zio.test.render.ConsoleRenderer.renderToStringLines", "link" : "zio\/test\/render\/ConsoleRenderer$.html#renderToStringLines(message:zio.test.render.LogLine.Message):Seq[String]", "kind" : "def"}, {"label" : "render", "tail" : "(results: Seq[ExecutionResult], testAnnotationRenderer: TestAnnotationRenderer): Seq[String]", "member" : "zio.test.render.ConsoleRenderer.render", "link" : "zio\/test\/render\/ConsoleRenderer$.html#render(results:Seq[zio.test.render.ExecutionResult],testAnnotationRenderer:zio.test.TestAnnotationRenderer):Seq[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/render\/ConsoleRenderer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/render\/ConsoleRenderer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/render\/ConsoleRenderer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/render\/ConsoleRenderer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/render\/ConsoleRenderer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/render\/ConsoleRenderer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/render\/ConsoleRenderer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/ConsoleRenderer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/ConsoleRenderer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/ConsoleRenderer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/render\/ConsoleRenderer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/render\/ConsoleRenderer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/render\/ConsoleRenderer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/render\/ConsoleRenderer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/render\/ConsoleRenderer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/render\/ConsoleRenderer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/render\/ConsoleRenderer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/render\/ConsoleRenderer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/render\/ConsoleRenderer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/render\/ConsoleRenderer.html", "kind" : "trait", "members_trait" : [{"label" : "renderToStringLines", "tail" : "(message: Message): Seq[String]", "member" : "zio.test.render.ConsoleRenderer.renderToStringLines", "link" : "zio\/test\/render\/ConsoleRenderer.html#renderToStringLines(message:zio.test.render.LogLine.Message):Seq[String]", "kind" : "def"}, {"label" : "render", "tail" : "(results: Seq[ExecutionResult], testAnnotationRenderer: TestAnnotationRenderer): Seq[String]", "member" : "zio.test.render.ConsoleRenderer.render", "link" : "zio\/test\/render\/ConsoleRenderer.html#render(results:Seq[zio.test.render.ExecutionResult],testAnnotationRenderer:zio.test.TestAnnotationRenderer):Seq[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/render\/ConsoleRenderer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/render\/ConsoleRenderer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/render\/ConsoleRenderer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/render\/ConsoleRenderer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/render\/ConsoleRenderer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/render\/ConsoleRenderer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/render\/ConsoleRenderer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/ConsoleRenderer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/ConsoleRenderer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/ConsoleRenderer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/render\/ConsoleRenderer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/render\/ConsoleRenderer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/render\/ConsoleRenderer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/render\/ConsoleRenderer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/render\/ConsoleRenderer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/render\/ConsoleRenderer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/render\/ConsoleRenderer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/render\/ConsoleRenderer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/render\/ConsoleRenderer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.render.ExecutionResult", "shortDescription" : "", "object" : "zio\/test\/render\/ExecutionResult$.html", "members_object" : [{"label" : "ResultType", "tail" : "", "member" : "zio.test.render.ExecutionResult.ResultType", "link" : "zio\/test\/render\/ExecutionResult$.html#ResultType", "kind" : "object"}, {"label" : "ResultType", "tail" : "", "member" : "zio.test.render.ExecutionResult.ResultType", "link" : "zio\/test\/render\/ExecutionResult$.html#ResultTypeextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "Status", "tail" : "", "member" : "zio.test.render.ExecutionResult.Status", "link" : "zio\/test\/render\/ExecutionResult$.html#Status", "kind" : "object"}, {"label" : "Status", "tail" : "", "member" : "zio.test.render.ExecutionResult.Status", "link" : "zio\/test\/render\/ExecutionResult$.html#StatusextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/render\/ExecutionResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/render\/ExecutionResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/render\/ExecutionResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/render\/ExecutionResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/render\/ExecutionResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/render\/ExecutionResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/render\/ExecutionResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/ExecutionResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/ExecutionResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/ExecutionResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/render\/ExecutionResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/render\/ExecutionResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/render\/ExecutionResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/render\/ExecutionResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/render\/ExecutionResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/render\/ExecutionResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/render\/ExecutionResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/render\/ExecutionResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/render\/ExecutionResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "withAnnotations", "tail" : "(annotations: List[TestAnnotationMap]): ExecutionResult", "member" : "zio.test.render.ExecutionResult.withAnnotations", "link" : "zio\/test\/render\/ExecutionResult.html#withAnnotations(annotations:List[zio.test.TestAnnotationMap]):zio.test.render.ExecutionResult", "kind" : "def"}, {"label" : "unary_!", "tail" : "(): ExecutionResult", "member" : "zio.test.render.ExecutionResult.unary_!", "link" : "zio\/test\/render\/ExecutionResult.html#unary_!:zio.test.render.ExecutionResult", "kind" : "def"}, {"label" : "||", "tail" : "(that: ExecutionResult): ExecutionResult", "member" : "zio.test.render.ExecutionResult.||", "link" : "zio\/test\/render\/ExecutionResult.html#||(that:zio.test.render.ExecutionResult):zio.test.render.ExecutionResult", "kind" : "def"}, {"label" : "&&", "tail" : "(that: ExecutionResult): ExecutionResult", "member" : "zio.test.render.ExecutionResult.&&", "link" : "zio\/test\/render\/ExecutionResult.html#&&(that:zio.test.render.ExecutionResult):zio.test.render.ExecutionResult", "kind" : "def"}, {"member" : "zio.test.render.ExecutionResult#<init>", "error" : "unsupported entity"}, {"label" : "lines", "tail" : ": List[Line]", "member" : "zio.test.render.ExecutionResult.lines", "link" : "zio\/test\/render\/ExecutionResult.html#lines:List[zio.test.render.LogLine.Line]", "kind" : "val"}, {"label" : "annotations", "tail" : ": List[TestAnnotationMap]", "member" : "zio.test.render.ExecutionResult.annotations", "link" : "zio\/test\/render\/ExecutionResult.html#annotations:List[zio.test.TestAnnotationMap]", "kind" : "val"}, {"label" : "offset", "tail" : ": Int", "member" : "zio.test.render.ExecutionResult.offset", "link" : "zio\/test\/render\/ExecutionResult.html#offset:Int", "kind" : "val"}, {"label" : "status", "tail" : ": Status", "member" : "zio.test.render.ExecutionResult.status", "link" : "zio\/test\/render\/ExecutionResult.html#status:zio.test.render.ExecutionResult.Status", "kind" : "val"}, {"label" : "label", "tail" : ": String", "member" : "zio.test.render.ExecutionResult.label", "link" : "zio\/test\/render\/ExecutionResult.html#label:String", "kind" : "val"}, {"label" : "resultType", "tail" : ": ResultType", "member" : "zio.test.render.ExecutionResult.resultType", "link" : "zio\/test\/render\/ExecutionResult.html#resultType:zio.test.render.ExecutionResult.ResultType", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/render\/ExecutionResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/render\/ExecutionResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/render\/ExecutionResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/render\/ExecutionResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/render\/ExecutionResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/render\/ExecutionResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/render\/ExecutionResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/render\/ExecutionResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/ExecutionResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/ExecutionResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/ExecutionResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/render\/ExecutionResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/render\/ExecutionResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/render\/ExecutionResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/render\/ExecutionResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/render\/ExecutionResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/render\/ExecutionResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/test\/render\/ExecutionResult.html", "kind" : "case class"}, {"name" : "zio.test.render.IntelliJRenderer", "object" : "zio\/test\/render\/IntelliJRenderer$.html", "members_object" : [{"label" : "locationRenderer", "tail" : ": TestAnnotationRenderer", "member" : "zio.test.render.IntelliJRenderer.locationRenderer", "link" : "zio\/test\/render\/IntelliJRenderer$.html#locationRenderer:zio.test.TestAnnotationRenderer", "kind" : "val"}, {"label" : "escape", "tail" : "(str: String): String", "member" : "zio.test.render.IntelliJRenderer.escape", "link" : "zio\/test\/render\/IntelliJRenderer$.html#escape(str:String):String", "kind" : "def"}, {"label" : "render", "tail" : "(results: Seq[ExecutionResult], testAnnotationRenderer: TestAnnotationRenderer): Seq[String]", "member" : "zio.test.render.IntelliJRenderer.render", "link" : "zio\/test\/render\/IntelliJRenderer$.html#render(results:Seq[zio.test.render.ExecutionResult],testAnnotationRenderer:zio.test.TestAnnotationRenderer):Seq[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/render\/IntelliJRenderer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/render\/IntelliJRenderer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/render\/IntelliJRenderer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/render\/IntelliJRenderer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/render\/IntelliJRenderer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/render\/IntelliJRenderer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/render\/IntelliJRenderer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/IntelliJRenderer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/IntelliJRenderer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/IntelliJRenderer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/render\/IntelliJRenderer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/render\/IntelliJRenderer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/render\/IntelliJRenderer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/render\/IntelliJRenderer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/render\/IntelliJRenderer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/render\/IntelliJRenderer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/render\/IntelliJRenderer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/render\/IntelliJRenderer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/render\/IntelliJRenderer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/render\/IntelliJRenderer.html", "kind" : "trait", "members_trait" : [{"label" : "escape", "tail" : "(str: String): String", "member" : "zio.test.render.IntelliJRenderer.escape", "link" : "zio\/test\/render\/IntelliJRenderer.html#escape(str:String):String", "kind" : "def"}, {"label" : "render", "tail" : "(results: Seq[ExecutionResult], testAnnotationRenderer: TestAnnotationRenderer): Seq[String]", "member" : "zio.test.render.IntelliJRenderer.render", "link" : "zio\/test\/render\/IntelliJRenderer.html#render(results:Seq[zio.test.render.ExecutionResult],testAnnotationRenderer:zio.test.TestAnnotationRenderer):Seq[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/render\/IntelliJRenderer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/render\/IntelliJRenderer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/render\/IntelliJRenderer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/render\/IntelliJRenderer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/render\/IntelliJRenderer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/render\/IntelliJRenderer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/render\/IntelliJRenderer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/IntelliJRenderer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/IntelliJRenderer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/IntelliJRenderer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/render\/IntelliJRenderer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/render\/IntelliJRenderer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/render\/IntelliJRenderer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/render\/IntelliJRenderer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/render\/IntelliJRenderer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/render\/IntelliJRenderer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/render\/IntelliJRenderer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/render\/IntelliJRenderer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/render\/IntelliJRenderer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.render.LogLine", "shortDescription" : "", "object" : "zio\/test\/render\/LogLine$.html", "members_object" : [{"label" : "Fragment", "tail" : "", "member" : "zio.test.render.LogLine.Fragment", "link" : "zio\/test\/render\/LogLine$.html#Fragment", "kind" : "object"}, {"label" : "Fragment", "tail" : "", "member" : "zio.test.render.LogLine.Fragment", "link" : "zio\/test\/render\/LogLine$.html#FragmentextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Line", "tail" : "", "member" : "zio.test.render.LogLine.Line", "link" : "zio\/test\/render\/LogLine$.html#Line", "kind" : "object"}, {"label" : "Line", "tail" : "", "member" : "zio.test.render.LogLine.Line", "link" : "zio\/test\/render\/LogLine$.html#LineextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Message", "tail" : "", "member" : "zio.test.render.LogLine.Message", "link" : "zio\/test\/render\/LogLine$.html#Message", "kind" : "object"}, {"label" : "Message", "tail" : "", "member" : "zio.test.render.LogLine.Message", "link" : "zio\/test\/render\/LogLine$.html#MessageextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/render\/LogLine$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/render\/LogLine$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/render\/LogLine$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/render\/LogLine$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/render\/LogLine$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/render\/LogLine$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/render\/LogLine$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/LogLine$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/LogLine$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/LogLine$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/render\/LogLine$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/render\/LogLine$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/render\/LogLine$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/render\/LogLine$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/render\/LogLine$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/render\/LogLine$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/render\/LogLine$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/render\/LogLine$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/render\/LogLine$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.render.TestRenderer", "object" : "zio\/test\/render\/TestRenderer$.html", "members_object" : [{"label" : "default", "tail" : ": TestRenderer", "member" : "zio.test.render.TestRenderer.default", "link" : "zio\/test\/render\/TestRenderer$.html#default:zio.test.render.TestRenderer", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/render\/TestRenderer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/render\/TestRenderer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/render\/TestRenderer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/render\/TestRenderer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/render\/TestRenderer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/render\/TestRenderer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/render\/TestRenderer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/TestRenderer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/TestRenderer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/TestRenderer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/render\/TestRenderer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/render\/TestRenderer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/render\/TestRenderer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/render\/TestRenderer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/render\/TestRenderer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/render\/TestRenderer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/render\/TestRenderer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/render\/TestRenderer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/render\/TestRenderer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/render\/TestRenderer.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/render\/TestRenderer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/render\/TestRenderer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/render\/TestRenderer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/render\/TestRenderer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/render\/TestRenderer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/render\/TestRenderer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/render\/TestRenderer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/TestRenderer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/TestRenderer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/render\/TestRenderer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/render\/TestRenderer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/render\/TestRenderer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/render\/TestRenderer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/render\/TestRenderer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/render\/TestRenderer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/render\/TestRenderer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/render\/TestRenderer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/render\/TestRenderer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/render\/TestRenderer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "render", "tail" : "(results: Seq[ExecutionResult], testAnnotationRenderer: TestAnnotationRenderer): Seq[String]", "member" : "zio.test.render.TestRenderer.render", "link" : "zio\/test\/render\/TestRenderer.html#render(results:Seq[zio.test.render.ExecutionResult],testAnnotationRenderer:zio.test.TestAnnotationRenderer):Seq[String]", "kind" : "abstract def"}], "shortDescription" : ""}], "zio.test.magnolia.diff" : [{"name" : "zio.test.magnolia.diff.DeriveDiff", "trait" : "zio\/test\/magnolia\/diff\/DeriveDiff.html", "kind" : "trait", "members_trait" : [{"label" : "gen", "tail" : "(): Diff[A]", "member" : "zio.test.magnolia.diff.DeriveDiff.gen", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#gen[A]:zio.test.diff.Diff[A]", "kind" : "implicit macro def"}, {"label" : "dispatch", "tail" : "(ctx: SealedTrait[Diff, A]): Diff[A]", "member" : "zio.test.magnolia.diff.DeriveDiff.dispatch", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#dispatch[A](ctx:magnolia.SealedTrait[zio.test.diff.Diff,A]):zio.test.diff.Diff[A]", "kind" : "def"}, {"label" : "combine", "tail" : "(caseClass: CaseClass[Diff, A]): Diff[A]", "member" : "zio.test.magnolia.diff.DeriveDiff.combine", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#combine[A](caseClass:magnolia.CaseClass[zio.test.diff.Diff,A]):zio.test.diff.Diff[A]", "kind" : "def"}, {"label" : "Typeclass", "tail" : "", "member" : "zio.test.magnolia.diff.DeriveDiff.Typeclass", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#Typeclass[A]=zio.test.diff.Diff[A]", "kind" : "type"}, {"label" : "fallback", "tail" : "(): Diff[A]", "member" : "zio.test.magnolia.diff.LowPri.fallback", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#fallback[A]:zio.test.diff.Diff[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/magnolia\/diff\/DeriveDiff.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.magnolia.diff.LowPri", "trait" : "zio\/test\/magnolia\/diff\/LowPri.html", "kind" : "trait", "members_trait" : [{"label" : "fallback", "tail" : "(): Diff[A]", "member" : "zio.test.magnolia.diff.LowPri.fallback", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#fallback[A]:zio.test.diff.Diff[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/magnolia\/diff\/LowPri.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/magnolia\/diff\/LowPri.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "zio.test.diff" : [{"name" : "zio.test.diff.Diff", "object" : "zio\/test\/diff\/Diff$.html", "members_object" : [{"label" : "DiffOps", "tail" : "", "member" : "zio.test.diff.Diff.DiffOps", "link" : "zio\/test\/diff\/Diff$.html#DiffOps[A]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "render", "tail" : "(oldValue: A, newValue: A)(arg0: Diff[A]): String", "member" : "zio.test.diff.Diff.render", "link" : "zio\/test\/diff\/Diff$.html#render[A](oldValue:A,newValue:A)(implicitevidence$1:zio.test.diff.Diff[A]):String", "kind" : "def"}, {"label" : "setDiff", "tail" : "(arg0: Diff[A]): Diff[Set[A]]", "member" : "zio.test.diff.DiffInstances.setDiff", "link" : "zio\/test\/diff\/Diff$.html#setDiff[A](implicitevidence$12:zio.test.diff.Diff[A]):zio.test.diff.Diff[Set[A]]", "kind" : "implicit def"}, {"label" : "mkSeqDiff", "tail" : "(name: String)(f: (F[A]) => Seq[A])(arg0: Diff[A]): Diff[F[A]]", "member" : "zio.test.diff.DiffInstances.mkSeqDiff", "link" : "zio\/test\/diff\/Diff$.html#mkSeqDiff[F[_],A](name:String)(f:F[A]=>Seq[A])(implicitevidence$11:zio.test.diff.Diff[A]):zio.test.diff.Diff[F[A]]", "kind" : "def"}, {"label" : "listBufferDiff", "tail" : "(arg0: Diff[A]): Diff[ListBuffer[A]]", "member" : "zio.test.diff.DiffInstances.listBufferDiff", "link" : "zio\/test\/diff\/Diff$.html#listBufferDiff[A](implicitevidence$10:zio.test.diff.Diff[A]):zio.test.diff.Diff[scala.collection.mutable.ListBuffer[A]]", "kind" : "implicit def"}, {"label" : "arrayBufferDiff", "tail" : "(arg0: Diff[A]): Diff[ArrayBuffer[A]]", "member" : "zio.test.diff.DiffInstances.arrayBufferDiff", "link" : "zio\/test\/diff\/Diff$.html#arrayBufferDiff[A](implicitevidence$9:zio.test.diff.Diff[A]):zio.test.diff.Diff[scala.collection.mutable.ArrayBuffer[A]]", "kind" : "implicit def"}, {"label" : "arrayDiff", "tail" : "(arg0: Diff[A]): Diff[Array[A]]", "member" : "zio.test.diff.DiffInstances.arrayDiff", "link" : "zio\/test\/diff\/Diff$.html#arrayDiff[A](implicitevidence$8:zio.test.diff.Diff[A]):zio.test.diff.Diff[Array[A]]", "kind" : "implicit def"}, {"label" : "nonEmptyChunk", "tail" : "(arg0: Diff[A]): Diff[NonEmptyChunk[A]]", "member" : "zio.test.diff.DiffInstances.nonEmptyChunk", "link" : "zio\/test\/diff\/Diff$.html#nonEmptyChunk[A](implicitevidence$7:zio.test.diff.Diff[A]):zio.test.diff.Diff[zio.NonEmptyChunk[A]]", "kind" : "implicit def"}, {"label" : "chunkDiff", "tail" : "(arg0: Diff[A]): Diff[Chunk[A]]", "member" : "zio.test.diff.DiffInstances.chunkDiff", "link" : "zio\/test\/diff\/Diff$.html#chunkDiff[A](implicitevidence$6:zio.test.diff.Diff[A]):zio.test.diff.Diff[zio.Chunk[A]]", "kind" : "implicit def"}, {"label" : "vectorDiff", "tail" : "(arg0: Diff[A]): Diff[Vector[A]]", "member" : "zio.test.diff.DiffInstances.vectorDiff", "link" : "zio\/test\/diff\/Diff$.html#vectorDiff[A](implicitevidence$5:zio.test.diff.Diff[A]):zio.test.diff.Diff[Vector[A]]", "kind" : "implicit def"}, {"label" : "listDiff", "tail" : "(arg0: Diff[A]): Diff[List[A]]", "member" : "zio.test.diff.DiffInstances.listDiff", "link" : "zio\/test\/diff\/Diff$.html#listDiff[A](implicitevidence$4:zio.test.diff.Diff[A]):zio.test.diff.Diff[List[A]]", "kind" : "implicit def"}, {"label" : "optionDiff", "tail" : "(arg0: Diff[A]): Diff[Option[A]]", "member" : "zio.test.diff.DiffInstances.optionDiff", "link" : "zio\/test\/diff\/Diff$.html#optionDiff[A](implicitevidence$3:zio.test.diff.Diff[A]):zio.test.diff.Diff[Option[A]]", "kind" : "implicit def"}, {"label" : "mapDiff", "tail" : "(arg0: Diff[V]): Diff[Map[K, V]]", "member" : "zio.test.diff.DiffInstances.mapDiff", "link" : "zio\/test\/diff\/Diff$.html#mapDiff[K,V](implicitevidence$2:zio.test.diff.Diff[V]):zio.test.diff.Diff[Map[K,V]]", "kind" : "implicit def"}, {"label" : "stringDiff", "tail" : ": Diff[String]", "member" : "zio.test.diff.DiffInstances.stringDiff", "link" : "zio\/test\/diff\/Diff$.html#stringDiff:zio.test.diff.Diff[String]", "kind" : "implicit val"}, {"label" : "anyDiff", "tail" : "(): Diff[A]", "member" : "zio.test.diff.LowPriDiff.anyDiff", "link" : "zio\/test\/diff\/Diff$.html#anyDiff[A]:zio.test.diff.Diff[A]", "kind" : "def"}, {"label" : "anyValDiff", "tail" : ": Diff[AnyVal]", "member" : "zio.test.diff.LowPriDiff.anyValDiff", "link" : "zio\/test\/diff\/Diff$.html#anyValDiff:zio.test.diff.Diff[AnyVal]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/diff\/Diff$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/diff\/Diff$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/diff\/Diff$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/diff\/Diff$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/diff\/Diff$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/diff\/Diff$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/diff\/Diff$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/Diff$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/Diff$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/Diff$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/diff\/Diff$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/diff\/Diff$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/diff\/Diff$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/diff\/Diff$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/diff\/Diff$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/diff\/Diff$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/diff\/Diff$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/diff\/Diff$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/diff\/Diff$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/diff\/Diff.html", "kind" : "trait", "members_trait" : [{"label" : "isLowPriority", "tail" : "(): Boolean", "member" : "zio.test.diff.Diff.isLowPriority", "link" : "zio\/test\/diff\/Diff.html#isLowPriority:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/diff\/Diff.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/diff\/Diff.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/diff\/Diff.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/diff\/Diff.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/diff\/Diff.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/diff\/Diff.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/diff\/Diff.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/Diff.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/Diff.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/Diff.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/diff\/Diff.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/diff\/Diff.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/diff\/Diff.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/diff\/Diff.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/diff\/Diff.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/diff\/Diff.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/diff\/Diff.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/diff\/Diff.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/diff\/Diff.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "diff", "tail" : "(x: A, y: A): DiffResult", "member" : "zio.test.diff.Diff.diff", "link" : "zio\/test\/diff\/Diff.html#diff(x:A,y:A):zio.test.diff.DiffResult", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.test.diff.DiffInstances", "trait" : "zio\/test\/diff\/DiffInstances.html", "kind" : "trait", "members_trait" : [{"label" : "setDiff", "tail" : "(arg0: Diff[A]): Diff[Set[A]]", "member" : "zio.test.diff.DiffInstances.setDiff", "link" : "zio\/test\/diff\/DiffInstances.html#setDiff[A](implicitevidence$12:zio.test.diff.Diff[A]):zio.test.diff.Diff[Set[A]]", "kind" : "implicit def"}, {"label" : "mkSeqDiff", "tail" : "(name: String)(f: (F[A]) => Seq[A])(arg0: Diff[A]): Diff[F[A]]", "member" : "zio.test.diff.DiffInstances.mkSeqDiff", "link" : "zio\/test\/diff\/DiffInstances.html#mkSeqDiff[F[_],A](name:String)(f:F[A]=>Seq[A])(implicitevidence$11:zio.test.diff.Diff[A]):zio.test.diff.Diff[F[A]]", "kind" : "def"}, {"label" : "listBufferDiff", "tail" : "(arg0: Diff[A]): Diff[ListBuffer[A]]", "member" : "zio.test.diff.DiffInstances.listBufferDiff", "link" : "zio\/test\/diff\/DiffInstances.html#listBufferDiff[A](implicitevidence$10:zio.test.diff.Diff[A]):zio.test.diff.Diff[scala.collection.mutable.ListBuffer[A]]", "kind" : "implicit def"}, {"label" : "arrayBufferDiff", "tail" : "(arg0: Diff[A]): Diff[ArrayBuffer[A]]", "member" : "zio.test.diff.DiffInstances.arrayBufferDiff", "link" : "zio\/test\/diff\/DiffInstances.html#arrayBufferDiff[A](implicitevidence$9:zio.test.diff.Diff[A]):zio.test.diff.Diff[scala.collection.mutable.ArrayBuffer[A]]", "kind" : "implicit def"}, {"label" : "arrayDiff", "tail" : "(arg0: Diff[A]): Diff[Array[A]]", "member" : "zio.test.diff.DiffInstances.arrayDiff", "link" : "zio\/test\/diff\/DiffInstances.html#arrayDiff[A](implicitevidence$8:zio.test.diff.Diff[A]):zio.test.diff.Diff[Array[A]]", "kind" : "implicit def"}, {"label" : "nonEmptyChunk", "tail" : "(arg0: Diff[A]): Diff[NonEmptyChunk[A]]", "member" : "zio.test.diff.DiffInstances.nonEmptyChunk", "link" : "zio\/test\/diff\/DiffInstances.html#nonEmptyChunk[A](implicitevidence$7:zio.test.diff.Diff[A]):zio.test.diff.Diff[zio.NonEmptyChunk[A]]", "kind" : "implicit def"}, {"label" : "chunkDiff", "tail" : "(arg0: Diff[A]): Diff[Chunk[A]]", "member" : "zio.test.diff.DiffInstances.chunkDiff", "link" : "zio\/test\/diff\/DiffInstances.html#chunkDiff[A](implicitevidence$6:zio.test.diff.Diff[A]):zio.test.diff.Diff[zio.Chunk[A]]", "kind" : "implicit def"}, {"label" : "vectorDiff", "tail" : "(arg0: Diff[A]): Diff[Vector[A]]", "member" : "zio.test.diff.DiffInstances.vectorDiff", "link" : "zio\/test\/diff\/DiffInstances.html#vectorDiff[A](implicitevidence$5:zio.test.diff.Diff[A]):zio.test.diff.Diff[Vector[A]]", "kind" : "implicit def"}, {"label" : "listDiff", "tail" : "(arg0: Diff[A]): Diff[List[A]]", "member" : "zio.test.diff.DiffInstances.listDiff", "link" : "zio\/test\/diff\/DiffInstances.html#listDiff[A](implicitevidence$4:zio.test.diff.Diff[A]):zio.test.diff.Diff[List[A]]", "kind" : "implicit def"}, {"label" : "optionDiff", "tail" : "(arg0: Diff[A]): Diff[Option[A]]", "member" : "zio.test.diff.DiffInstances.optionDiff", "link" : "zio\/test\/diff\/DiffInstances.html#optionDiff[A](implicitevidence$3:zio.test.diff.Diff[A]):zio.test.diff.Diff[Option[A]]", "kind" : "implicit def"}, {"label" : "mapDiff", "tail" : "(arg0: Diff[V]): Diff[Map[K, V]]", "member" : "zio.test.diff.DiffInstances.mapDiff", "link" : "zio\/test\/diff\/DiffInstances.html#mapDiff[K,V](implicitevidence$2:zio.test.diff.Diff[V]):zio.test.diff.Diff[Map[K,V]]", "kind" : "implicit def"}, {"label" : "stringDiff", "tail" : ": Diff[String]", "member" : "zio.test.diff.DiffInstances.stringDiff", "link" : "zio\/test\/diff\/DiffInstances.html#stringDiff:zio.test.diff.Diff[String]", "kind" : "implicit val"}, {"label" : "anyDiff", "tail" : "(): Diff[A]", "member" : "zio.test.diff.LowPriDiff.anyDiff", "link" : "zio\/test\/diff\/DiffInstances.html#anyDiff[A]:zio.test.diff.Diff[A]", "kind" : "def"}, {"label" : "anyValDiff", "tail" : ": Diff[AnyVal]", "member" : "zio.test.diff.LowPriDiff.anyValDiff", "link" : "zio\/test\/diff\/DiffInstances.html#anyValDiff:zio.test.diff.Diff[AnyVal]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/diff\/DiffInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/diff\/DiffInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/diff\/DiffInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/diff\/DiffInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/diff\/DiffInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/diff\/DiffInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/diff\/DiffInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/DiffInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/DiffInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/DiffInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/diff\/DiffInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/diff\/DiffInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/diff\/DiffInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/diff\/DiffInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/diff\/DiffInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/diff\/DiffInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/diff\/DiffInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/diff\/DiffInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/diff\/DiffInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.diff.DiffResult", "object" : "zio\/test\/diff\/DiffResult$.html", "members_object" : [{"label" : "indent", "tail" : "(string: String, amount: Int): String", "member" : "zio.test.diff.DiffResult.indent", "link" : "zio\/test\/diff\/DiffResult$.html#indent(string:String,amount:Int):String", "kind" : "def"}, {"label" : "Identical", "tail" : "", "member" : "zio.test.diff.DiffResult.Identical", "link" : "zio\/test\/diff\/DiffResult$.html#IdenticalextendsDiffResultwithProductwithSerializable", "kind" : "case class"}, {"label" : "Added", "tail" : "", "member" : "zio.test.diff.DiffResult.Added", "link" : "zio\/test\/diff\/DiffResult$.html#AddedextendsDiffResultwithProductwithSerializable", "kind" : "case class"}, {"label" : "Removed", "tail" : "", "member" : "zio.test.diff.DiffResult.Removed", "link" : "zio\/test\/diff\/DiffResult$.html#RemovedextendsDiffResultwithProductwithSerializable", "kind" : "case class"}, {"label" : "Different", "tail" : "", "member" : "zio.test.diff.DiffResult.Different", "link" : "zio\/test\/diff\/DiffResult$.html#DifferentextendsDiffResultwithProductwithSerializable", "kind" : "case class"}, {"label" : "Nested", "tail" : "", "member" : "zio.test.diff.DiffResult.Nested", "link" : "zio\/test\/diff\/DiffResult$.html#NestedextendsDiffResultwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/diff\/DiffResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/diff\/DiffResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/diff\/DiffResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/diff\/DiffResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/diff\/DiffResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/diff\/DiffResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/diff\/DiffResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/DiffResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/DiffResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/DiffResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/diff\/DiffResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/diff\/DiffResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/diff\/DiffResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/diff\/DiffResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/diff\/DiffResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/diff\/DiffResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/diff\/DiffResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/diff\/DiffResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/diff\/DiffResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/diff\/DiffResult.html", "kind" : "trait", "members_trait" : [{"label" : "render", "tail" : "(): String", "member" : "zio.test.diff.DiffResult.render", "link" : "zio\/test\/diff\/DiffResult.html#render:String", "kind" : "def"}, {"label" : "hasDiff", "tail" : "(): Boolean", "member" : "zio.test.diff.DiffResult.hasDiff", "link" : "zio\/test\/diff\/DiffResult.html#hasDiff:Boolean", "kind" : "def"}, {"label" : "noDiff", "tail" : "(): Boolean", "member" : "zio.test.diff.DiffResult.noDiff", "link" : "zio\/test\/diff\/DiffResult.html#noDiff:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/diff\/DiffResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/diff\/DiffResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/diff\/DiffResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/diff\/DiffResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/diff\/DiffResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/diff\/DiffResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/diff\/DiffResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/DiffResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/DiffResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/DiffResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/diff\/DiffResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/diff\/DiffResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/diff\/DiffResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/diff\/DiffResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/diff\/DiffResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/diff\/DiffResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/diff\/DiffResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/diff\/DiffResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/diff\/DiffResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.diff.LowPriDiff", "trait" : "zio\/test\/diff\/LowPriDiff.html", "kind" : "trait", "members_trait" : [{"label" : "anyDiff", "tail" : "(): Diff[A]", "member" : "zio.test.diff.LowPriDiff.anyDiff", "link" : "zio\/test\/diff\/LowPriDiff.html#anyDiff[A]:zio.test.diff.Diff[A]", "kind" : "def"}, {"label" : "anyValDiff", "tail" : ": Diff[AnyVal]", "member" : "zio.test.diff.LowPriDiff.anyValDiff", "link" : "zio\/test\/diff\/LowPriDiff.html#anyValDiff:zio.test.diff.Diff[AnyVal]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/diff\/LowPriDiff.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/diff\/LowPriDiff.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/diff\/LowPriDiff.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/diff\/LowPriDiff.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/diff\/LowPriDiff.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/diff\/LowPriDiff.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/diff\/LowPriDiff.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/LowPriDiff.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/LowPriDiff.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/diff\/LowPriDiff.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/diff\/LowPriDiff.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/diff\/LowPriDiff.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/diff\/LowPriDiff.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/diff\/LowPriDiff.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/diff\/LowPriDiff.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/diff\/LowPriDiff.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/diff\/LowPriDiff.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/diff\/LowPriDiff.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/diff\/LowPriDiff.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "zio.test.refined" : [{"name" : "zio.test.refined.all", "shortDescription" : "", "object" : "zio\/test\/refined\/all$.html", "members_object" : [{"label" : "FiniteStringPartiallyApplied", "tail" : "", "member" : "zio.test.refined.types.StringInstance.FiniteStringPartiallyApplied", "link" : "zio\/test\/refined\/types\/StringInstance.html#FiniteStringPartiallyApplied[N<:Int,P]extendsAnyRef", "kind" : "class"}, {"label" : "millsDeriveGen", "tail" : "(): DeriveGen[Millis]", "member" : "zio.test.refined.types.TimeInstances.millsDeriveGen", "link" : "zio\/test\/refined\/all$.html#millsDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Millis]", "kind" : "implicit def"}, {"label" : "secondDeriveGen", "tail" : "(): DeriveGen[Second]", "member" : "zio.test.refined.types.TimeInstances.secondDeriveGen", "link" : "zio\/test\/refined\/all$.html#secondDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Second]", "kind" : "implicit def"}, {"label" : "minuteDeriveGen", "tail" : "(): DeriveGen[Minute]", "member" : "zio.test.refined.types.TimeInstances.minuteDeriveGen", "link" : "zio\/test\/refined\/all$.html#minuteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Minute]", "kind" : "implicit def"}, {"label" : "hourDeriveGen", "tail" : "(): DeriveGen[Hour]", "member" : "zio.test.refined.types.TimeInstances.hourDeriveGen", "link" : "zio\/test\/refined\/all$.html#hourDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Hour]", "kind" : "implicit def"}, {"label" : "dayDeriveGen", "tail" : "(): DeriveGen[Day]", "member" : "zio.test.refined.types.TimeInstances.dayDeriveGen", "link" : "zio\/test\/refined\/all$.html#dayDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Day]", "kind" : "implicit def"}, {"label" : "monthDeriveGen", "tail" : "(): DeriveGen[Month]", "member" : "zio.test.refined.types.TimeInstances.monthDeriveGen", "link" : "zio\/test\/refined\/all$.html#monthDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.time.Month]", "kind" : "implicit def"}, {"label" : "millsGen", "tail" : ": Gen[Has[Random], Millis]", "member" : "zio.test.refined.types.TimeInstances.millsGen", "link" : "zio\/test\/refined\/all$.html#millsGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Millis]", "kind" : "val"}, {"label" : "secondGen", "tail" : ": Gen[Has[Random], Second]", "member" : "zio.test.refined.types.TimeInstances.secondGen", "link" : "zio\/test\/refined\/all$.html#secondGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Second]", "kind" : "val"}, {"label" : "minuteGen", "tail" : ": Gen[Has[Random], Minute]", "member" : "zio.test.refined.types.TimeInstances.minuteGen", "link" : "zio\/test\/refined\/all$.html#minuteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Minute]", "kind" : "val"}, {"label" : "hourGen", "tail" : ": Gen[Has[Random], Hour]", "member" : "zio.test.refined.types.TimeInstances.hourGen", "link" : "zio\/test\/refined\/all$.html#hourGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Hour]", "kind" : "val"}, {"label" : "dayGen", "tail" : ": Gen[Has[Random], Day]", "member" : "zio.test.refined.types.TimeInstances.dayGen", "link" : "zio\/test\/refined\/all$.html#dayGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Day]", "kind" : "val"}, {"label" : "monthGen", "tail" : ": Gen[Has[Random], Month]", "member" : "zio.test.refined.types.TimeInstances.monthGen", "link" : "zio\/test\/refined\/all$.html#monthGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.time.Month]", "kind" : "val"}, {"label" : "hexStringDeriveGen", "tail" : "(): DeriveGen[HexString]", "member" : "zio.test.refined.types.StringInstance.hexStringDeriveGen", "link" : "zio\/test\/refined\/all$.html#hexStringDeriveGen[R]:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.HexString]", "kind" : "implicit def"}, {"label" : "trimmedStringDeriveGen", "tail" : "(charGen: DeriveGen[Char]): DeriveGen[TrimmedString]", "member" : "zio.test.refined.types.StringInstance.trimmedStringDeriveGen", "link" : "zio\/test\/refined\/all$.html#trimmedStringDeriveGen[R](implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.TrimmedString]", "kind" : "implicit def"}, {"label" : "nonEmptyFiniteStringDeriveGen", "tail" : "(ws: Aux[N], charGen: DeriveGen[Char]): DeriveGen[NonEmptyFiniteString[N]]", "member" : "zio.test.refined.types.StringInstance.nonEmptyFiniteStringDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonEmptyFiniteStringDeriveGen[N<:Int](implicitws:shapeless.Witness.Aux[N],implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.NonEmptyFiniteString[N]]", "kind" : "implicit def"}, {"label" : "nonEmptyStringDeriveGen", "tail" : "(charGen: DeriveGen[Char]): DeriveGen[NonEmptyString]", "member" : "zio.test.refined.types.StringInstance.nonEmptyStringDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonEmptyStringDeriveGen[R](implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.NonEmptyString]", "kind" : "implicit def"}, {"label" : "finiteStringDeriveGen", "tail" : "(ws: Aux[N], charGen: DeriveGen[Char]): DeriveGen[FiniteString[N]]", "member" : "zio.test.refined.types.StringInstance.finiteStringDeriveGen", "link" : "zio\/test\/refined\/all$.html#finiteStringDeriveGen[N<:Int](implicitws:shapeless.Witness.Aux[N],implicitcharGen:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.types.string.FiniteString[N]]", "kind" : "implicit def"}, {"label" : "hexStringGen", "tail" : "(): Gen[Has[Random] with Has[Sized], HexString]", "member" : "zio.test.refined.types.StringInstance.hexStringGen", "link" : "zio\/test\/refined\/all$.html#hexStringGen:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.types.string.HexString]", "kind" : "def"}, {"label" : "trimmedStringGen", "tail" : "(charGen: Gen[R, Char]): Gen[R with Has[Random] with Has[Sized], TrimmedString]", "member" : "zio.test.refined.types.StringInstance.trimmedStringGen", "link" : "zio\/test\/refined\/all$.html#trimmedStringGen[R](charGen:zio.test.Gen[R,Char]):zio.test.Gen[Rwithzio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.types.string.TrimmedString]", "kind" : "def"}, {"label" : "nonEmptyFiniteStringGen", "tail" : "(): FiniteStringPartiallyApplied[N, Size[Closed[shapeless.Nat._1, N]]]", "member" : "zio.test.refined.types.StringInstance.nonEmptyFiniteStringGen", "link" : "zio\/test\/refined\/all$.html#nonEmptyFiniteStringGen[N<:Int]:StringInstance.this.FiniteStringPartiallyApplied[N,eu.timepit.refined.collection.Size[eu.timepit.refined.numeric.Interval.Closed[shapeless.Nat._1,N]]]", "kind" : "def"}, {"label" : "nonEmptyStringGen", "tail" : "(charGen: Gen[R, Char]): Gen[R with Has[Random] with Has[Sized], NonEmptyString]", "member" : "zio.test.refined.types.StringInstance.nonEmptyStringGen", "link" : "zio\/test\/refined\/all$.html#nonEmptyStringGen[R](charGen:zio.test.Gen[R,Char]):zio.test.Gen[Rwithzio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.types.string.NonEmptyString]", "kind" : "def"}, {"label" : "finiteStringGen", "tail" : "(): FiniteStringPartiallyApplied[N, MaxSize[N]]", "member" : "zio.test.refined.types.StringInstance.finiteStringGen", "link" : "zio\/test\/refined\/all$.html#finiteStringGen[N<:Int]:StringInstance.this.FiniteStringPartiallyApplied[N,eu.timepit.refined.collection.MaxSize[N]]", "kind" : "def"}, {"label" : "nonNanDoubleDeriveGen", "tail" : ": DeriveGen[NonNaNDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNanDoubleDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonNanDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNaNDouble]", "kind" : "implicit val"}, {"label" : "nonNanFloatDeriveGen", "tail" : ": DeriveGen[NonNaNFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNanFloatDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonNanFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNaNFloat]", "kind" : "implicit val"}, {"label" : "nonPosBigDecimalDeriveGen", "tail" : ": DeriveGen[NonPosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigDecimalDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonPosBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosBigDecimal]", "kind" : "implicit val"}, {"label" : "negBigDecimalDeriveGen", "tail" : ": DeriveGen[NegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.negBigDecimalDeriveGen", "link" : "zio\/test\/refined\/all$.html#negBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegBigDecimal]", "kind" : "implicit val"}, {"label" : "nonNegBigDecimalDeriveGen", "tail" : ": DeriveGen[NonNegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigDecimalDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonNegBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegBigDecimal]", "kind" : "implicit val"}, {"label" : "posBigDecimalDeriveGen", "tail" : ": DeriveGen[PosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.posBigDecimalDeriveGen", "link" : "zio\/test\/refined\/all$.html#posBigDecimalDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosBigDecimal]", "kind" : "implicit val"}, {"label" : "nonPosDoubleDeriveGen", "tail" : ": DeriveGen[NonPosDouble]", "member" : "zio.test.refined.types.NumericInstances.nonPosDoubleDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonPosDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosDouble]", "kind" : "implicit val"}, {"label" : "negDoubleDeriveGen", "tail" : ": DeriveGen[NegDouble]", "member" : "zio.test.refined.types.NumericInstances.negDoubleDeriveGen", "link" : "zio\/test\/refined\/all$.html#negDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegDouble]", "kind" : "implicit val"}, {"label" : "nonNegDoubleDeriveGen", "tail" : ": DeriveGen[NonNegDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNegDoubleDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonNegDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegDouble]", "kind" : "implicit val"}, {"label" : "posDoubleDeriveGen", "tail" : ": DeriveGen[PosDouble]", "member" : "zio.test.refined.types.NumericInstances.posDoubleDeriveGen", "link" : "zio\/test\/refined\/all$.html#posDoubleDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosDouble]", "kind" : "implicit val"}, {"label" : "nonPosFloatDeriveGen", "tail" : ": DeriveGen[NonPosFloat]", "member" : "zio.test.refined.types.NumericInstances.nonPosFloatDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonPosFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosFloat]", "kind" : "implicit val"}, {"label" : "negFloatDeriveGen", "tail" : ": DeriveGen[NegFloat]", "member" : "zio.test.refined.types.NumericInstances.negFloatDeriveGen", "link" : "zio\/test\/refined\/all$.html#negFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegFloat]", "kind" : "implicit val"}, {"label" : "nonNegFloatDeriveGen", "tail" : ": DeriveGen[NonNegFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNegFloatDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonNegFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegFloat]", "kind" : "implicit val"}, {"label" : "posFloatDeriveGen", "tail" : ": DeriveGen[PosFloat]", "member" : "zio.test.refined.types.NumericInstances.posFloatDeriveGen", "link" : "zio\/test\/refined\/all$.html#posFloatDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosFloat]", "kind" : "implicit val"}, {"label" : "nonPosBigIntDeriveGen", "tail" : ": DeriveGen[NonPosBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigIntDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonPosBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosBigInt]", "kind" : "implicit val"}, {"label" : "negBigIntDeriveGen", "tail" : ": DeriveGen[NegBigInt]", "member" : "zio.test.refined.types.NumericInstances.negBigIntDeriveGen", "link" : "zio\/test\/refined\/all$.html#negBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegBigInt]", "kind" : "implicit val"}, {"label" : "nonNegBigIntDeriveGen", "tail" : ": DeriveGen[NonNegBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigIntDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonNegBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegBigInt]", "kind" : "implicit val"}, {"label" : "posBigIntDeriveGen", "tail" : ": DeriveGen[PosBigInt]", "member" : "zio.test.refined.types.NumericInstances.posBigIntDeriveGen", "link" : "zio\/test\/refined\/all$.html#posBigIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosBigInt]", "kind" : "implicit val"}, {"label" : "nonPosLongDeriveGen", "tail" : ": DeriveGen[NonPosLong]", "member" : "zio.test.refined.types.NumericInstances.nonPosLongDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonPosLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosLong]", "kind" : "implicit val"}, {"label" : "negLongDeriveGen", "tail" : ": DeriveGen[NegLong]", "member" : "zio.test.refined.types.NumericInstances.negLongDeriveGen", "link" : "zio\/test\/refined\/all$.html#negLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegLong]", "kind" : "implicit val"}, {"label" : "nonNegLongDeriveGen", "tail" : ": DeriveGen[NonNegLong]", "member" : "zio.test.refined.types.NumericInstances.nonNegLongDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonNegLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegLong]", "kind" : "implicit val"}, {"label" : "posLongDeriveGen", "tail" : ": DeriveGen[PosLong]", "member" : "zio.test.refined.types.NumericInstances.posLongDeriveGen", "link" : "zio\/test\/refined\/all$.html#posLongDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosLong]", "kind" : "implicit val"}, {"label" : "nonPosIntDeriveGen", "tail" : ": DeriveGen[NonPosInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosIntDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonPosIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosInt]", "kind" : "implicit val"}, {"label" : "negIntDeriveGen", "tail" : ": DeriveGen[NegInt]", "member" : "zio.test.refined.types.NumericInstances.negIntDeriveGen", "link" : "zio\/test\/refined\/all$.html#negIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegInt]", "kind" : "implicit val"}, {"label" : "nonNegIntDeriveGen", "tail" : ": DeriveGen[NonNegInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegIntDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonNegIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegInt]", "kind" : "implicit val"}, {"label" : "posIntDeriveGen", "tail" : ": DeriveGen[PosInt]", "member" : "zio.test.refined.types.NumericInstances.posIntDeriveGen", "link" : "zio\/test\/refined\/all$.html#posIntDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosInt]", "kind" : "implicit val"}, {"label" : "nonPosShortDeriveGen", "tail" : ": DeriveGen[NonPosShort]", "member" : "zio.test.refined.types.NumericInstances.nonPosShortDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonPosShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosShort]", "kind" : "implicit val"}, {"label" : "negShortDeriveGen", "tail" : ": DeriveGen[NegShort]", "member" : "zio.test.refined.types.NumericInstances.negShortDeriveGen", "link" : "zio\/test\/refined\/all$.html#negShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegShort]", "kind" : "implicit val"}, {"label" : "nonNegShortDeriveGen", "tail" : ": DeriveGen[NonNegShort]", "member" : "zio.test.refined.types.NumericInstances.nonNegShortDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonNegShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegShort]", "kind" : "implicit val"}, {"label" : "posShortDeriveGen", "tail" : ": DeriveGen[PosShort]", "member" : "zio.test.refined.types.NumericInstances.posShortDeriveGen", "link" : "zio\/test\/refined\/all$.html#posShortDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosShort]", "kind" : "implicit val"}, {"label" : "nonPosByteDeriveGen", "tail" : ": DeriveGen[NonPosByte]", "member" : "zio.test.refined.types.NumericInstances.nonPosByteDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonPosByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonPosByte]", "kind" : "implicit val"}, {"label" : "negByteDeriveGen", "tail" : ": DeriveGen[NegByte]", "member" : "zio.test.refined.types.NumericInstances.negByteDeriveGen", "link" : "zio\/test\/refined\/all$.html#negByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NegByte]", "kind" : "implicit val"}, {"label" : "nonNegByteDeriveGen", "tail" : ": DeriveGen[NonNegByte]", "member" : "zio.test.refined.types.NumericInstances.nonNegByteDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonNegByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.NonNegByte]", "kind" : "implicit val"}, {"label" : "posByteDeriveGen", "tail" : ": DeriveGen[PosByte]", "member" : "zio.test.refined.types.NumericInstances.posByteDeriveGen", "link" : "zio\/test\/refined\/all$.html#posByteDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.numeric.PosByte]", "kind" : "implicit val"}, {"label" : "nonNanDoubleGen", "tail" : ": Gen[Has[Random], NonNaNDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNanDoubleGen", "link" : "zio\/test\/refined\/all$.html#nonNanDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNaNDouble]", "kind" : "val"}, {"label" : "nonNanFloatGen", "tail" : ": Gen[Has[Random], NonNaNFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNanFloatGen", "link" : "zio\/test\/refined\/all$.html#nonNanFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNaNFloat]", "kind" : "val"}, {"label" : "nonPosBigDecimalGen", "tail" : ": Gen[Has[Random], NonPosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigDecimalGen", "link" : "zio\/test\/refined\/all$.html#nonPosBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosBigDecimal]", "kind" : "val"}, {"label" : "negBigDecimalGen", "tail" : ": Gen[Has[Random], NegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.negBigDecimalGen", "link" : "zio\/test\/refined\/all$.html#negBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegBigDecimal]", "kind" : "val"}, {"label" : "nonNegBigDecimalGen", "tail" : ": Gen[Has[Random], NonNegBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigDecimalGen", "link" : "zio\/test\/refined\/all$.html#nonNegBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegBigDecimal]", "kind" : "val"}, {"label" : "posBigDecimalGen", "tail" : ": Gen[Has[Random], PosBigDecimal]", "member" : "zio.test.refined.types.NumericInstances.posBigDecimalGen", "link" : "zio\/test\/refined\/all$.html#posBigDecimalGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosBigDecimal]", "kind" : "val"}, {"label" : "nonPosDoubleGen", "tail" : ": Gen[Has[Random], NonPosDouble]", "member" : "zio.test.refined.types.NumericInstances.nonPosDoubleGen", "link" : "zio\/test\/refined\/all$.html#nonPosDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosDouble]", "kind" : "val"}, {"label" : "negDoubleGen", "tail" : ": Gen[Has[Random], NegDouble]", "member" : "zio.test.refined.types.NumericInstances.negDoubleGen", "link" : "zio\/test\/refined\/all$.html#negDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegDouble]", "kind" : "val"}, {"label" : "nonNegDoubleGen", "tail" : ": Gen[Has[Random], NonNegDouble]", "member" : "zio.test.refined.types.NumericInstances.nonNegDoubleGen", "link" : "zio\/test\/refined\/all$.html#nonNegDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegDouble]", "kind" : "val"}, {"label" : "posDoubleGen", "tail" : ": Gen[Has[Random], PosDouble]", "member" : "zio.test.refined.types.NumericInstances.posDoubleGen", "link" : "zio\/test\/refined\/all$.html#posDoubleGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosDouble]", "kind" : "val"}, {"label" : "nonPosFloatGen", "tail" : ": Gen[Has[Random], NonPosFloat]", "member" : "zio.test.refined.types.NumericInstances.nonPosFloatGen", "link" : "zio\/test\/refined\/all$.html#nonPosFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosFloat]", "kind" : "val"}, {"label" : "negFloatGen", "tail" : ": Gen[Has[Random], NegFloat]", "member" : "zio.test.refined.types.NumericInstances.negFloatGen", "link" : "zio\/test\/refined\/all$.html#negFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegFloat]", "kind" : "val"}, {"label" : "nonNegFloatGen", "tail" : ": Gen[Has[Random], NonNegFloat]", "member" : "zio.test.refined.types.NumericInstances.nonNegFloatGen", "link" : "zio\/test\/refined\/all$.html#nonNegFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegFloat]", "kind" : "val"}, {"label" : "posFloatGen", "tail" : ": Gen[Has[Random], PosFloat]", "member" : "zio.test.refined.types.NumericInstances.posFloatGen", "link" : "zio\/test\/refined\/all$.html#posFloatGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosFloat]", "kind" : "val"}, {"label" : "nonPosBigIntGen", "tail" : ": Gen[Has[Random], NonPosBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosBigIntGen", "link" : "zio\/test\/refined\/all$.html#nonPosBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosBigInt]", "kind" : "val"}, {"label" : "negBigIntGen", "tail" : ": Gen[Has[Random], NegBigInt]", "member" : "zio.test.refined.types.NumericInstances.negBigIntGen", "link" : "zio\/test\/refined\/all$.html#negBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegBigInt]", "kind" : "val"}, {"label" : "nonNegBigIntGen", "tail" : ": Gen[Has[Random], NonNegBigInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegBigIntGen", "link" : "zio\/test\/refined\/all$.html#nonNegBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegBigInt]", "kind" : "val"}, {"label" : "posBigIntGen", "tail" : ": Gen[Has[Random], PosBigInt]", "member" : "zio.test.refined.types.NumericInstances.posBigIntGen", "link" : "zio\/test\/refined\/all$.html#posBigIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosBigInt]", "kind" : "val"}, {"label" : "nonPosLongGen", "tail" : ": Gen[Has[Random], NonPosLong]", "member" : "zio.test.refined.types.NumericInstances.nonPosLongGen", "link" : "zio\/test\/refined\/all$.html#nonPosLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosLong]", "kind" : "val"}, {"label" : "negLongGen", "tail" : ": Gen[Has[Random], NegLong]", "member" : "zio.test.refined.types.NumericInstances.negLongGen", "link" : "zio\/test\/refined\/all$.html#negLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegLong]", "kind" : "val"}, {"label" : "nonNegLongGen", "tail" : ": Gen[Has[Random], NonNegLong]", "member" : "zio.test.refined.types.NumericInstances.nonNegLongGen", "link" : "zio\/test\/refined\/all$.html#nonNegLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegLong]", "kind" : "val"}, {"label" : "posLongGen", "tail" : ": Gen[Has[Random], PosLong]", "member" : "zio.test.refined.types.NumericInstances.posLongGen", "link" : "zio\/test\/refined\/all$.html#posLongGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosLong]", "kind" : "val"}, {"label" : "nonPosIntGen", "tail" : ": Gen[Has[Random], NonPosInt]", "member" : "zio.test.refined.types.NumericInstances.nonPosIntGen", "link" : "zio\/test\/refined\/all$.html#nonPosIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosInt]", "kind" : "val"}, {"label" : "negIntGen", "tail" : ": Gen[Has[Random], NegInt]", "member" : "zio.test.refined.types.NumericInstances.negIntGen", "link" : "zio\/test\/refined\/all$.html#negIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegInt]", "kind" : "val"}, {"label" : "nonNegIntGen", "tail" : ": Gen[Has[Random], NonNegInt]", "member" : "zio.test.refined.types.NumericInstances.nonNegIntGen", "link" : "zio\/test\/refined\/all$.html#nonNegIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegInt]", "kind" : "val"}, {"label" : "posIntGen", "tail" : ": Gen[Has[Random], PosInt]", "member" : "zio.test.refined.types.NumericInstances.posIntGen", "link" : "zio\/test\/refined\/all$.html#posIntGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosInt]", "kind" : "val"}, {"label" : "nonPosShortGen", "tail" : ": Gen[Has[Random], NonPosShort]", "member" : "zio.test.refined.types.NumericInstances.nonPosShortGen", "link" : "zio\/test\/refined\/all$.html#nonPosShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosShort]", "kind" : "val"}, {"label" : "negShortGen", "tail" : ": Gen[Has[Random], NegShort]", "member" : "zio.test.refined.types.NumericInstances.negShortGen", "link" : "zio\/test\/refined\/all$.html#negShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegShort]", "kind" : "val"}, {"label" : "nonNegShortGen", "tail" : ": Gen[Has[Random], NonNegShort]", "member" : "zio.test.refined.types.NumericInstances.nonNegShortGen", "link" : "zio\/test\/refined\/all$.html#nonNegShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegShort]", "kind" : "val"}, {"label" : "posShortGen", "tail" : ": Gen[Has[Random], PosShort]", "member" : "zio.test.refined.types.NumericInstances.posShortGen", "link" : "zio\/test\/refined\/all$.html#posShortGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosShort]", "kind" : "val"}, {"label" : "nonPosByteGen", "tail" : ": Gen[Has[Random], NonPosByte]", "member" : "zio.test.refined.types.NumericInstances.nonPosByteGen", "link" : "zio\/test\/refined\/all$.html#nonPosByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonPosByte]", "kind" : "val"}, {"label" : "negByteGen", "tail" : ": Gen[Has[Random], NegByte]", "member" : "zio.test.refined.types.NumericInstances.negByteGen", "link" : "zio\/test\/refined\/all$.html#negByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NegByte]", "kind" : "val"}, {"label" : "nonNegByteGen", "tail" : ": Gen[Has[Random], NonNegByte]", "member" : "zio.test.refined.types.NumericInstances.nonNegByteGen", "link" : "zio\/test\/refined\/all$.html#nonNegByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.NonNegByte]", "kind" : "val"}, {"label" : "posByteGen", "tail" : ": Gen[Has[Random], PosByte]", "member" : "zio.test.refined.types.NumericInstances.posByteGen", "link" : "zio\/test\/refined\/all$.html#posByteGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.numeric.PosByte]", "kind" : "val"}, {"label" : "privateNetworkDeriveGen", "tail" : ": DeriveGen[PrivateNetwork]", "member" : "zio.test.refined.types.NetInstances.privateNetworkDeriveGen", "link" : "zio\/test\/refined\/all$.html#privateNetworkDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.PrivateNetwork]", "kind" : "implicit val"}, {"label" : "rfc2544BenchmarkDeriveGen", "tail" : ": DeriveGen[Rfc2544Benchmark]", "member" : "zio.test.refined.types.NetInstances.rfc2544BenchmarkDeriveGen", "link" : "zio\/test\/refined\/all$.html#rfc2544BenchmarkDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc2544Benchmark]", "kind" : "implicit val"}, {"label" : "rfc3927LocalLinkDeriveGen", "tail" : ": DeriveGen[Rfc3927LocalLink]", "member" : "zio.test.refined.types.NetInstances.rfc3927LocalLinkDeriveGen", "link" : "zio\/test\/refined\/all$.html#rfc3927LocalLinkDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc3927LocalLink]", "kind" : "implicit val"}, {"label" : "rfc5737TestnetDeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet]", "member" : "zio.test.refined.types.NetInstances.rfc5737TestnetDeriveGen", "link" : "zio\/test\/refined\/all$.html#rfc5737TestnetDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet]", "kind" : "implicit val"}, {"label" : "rfc5737Testnet3DeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet3]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet3DeriveGen", "link" : "zio\/test\/refined\/all$.html#rfc5737Testnet3DeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet3]", "kind" : "implicit val"}, {"label" : "rfc5737Testnet2DeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet2]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet2DeriveGen", "link" : "zio\/test\/refined\/all$.html#rfc5737Testnet2DeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet2]", "kind" : "implicit val"}, {"label" : "rfc5737Testnet1DeriveGen", "tail" : ": DeriveGen[Rfc5737Testnet1]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet1DeriveGen", "link" : "zio\/test\/refined\/all$.html#rfc5737Testnet1DeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc5737Testnet1]", "kind" : "implicit val"}, {"label" : "rfc1918PrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918Private]", "member" : "zio.test.refined.types.NetInstances.rfc1918PrivateDeriveGen", "link" : "zio\/test\/refined\/all$.html#rfc1918PrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918Private]", "kind" : "implicit val"}, {"label" : "rfc1918ClassCPrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918ClassCPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassCPrivateDeriveGen", "link" : "zio\/test\/refined\/all$.html#rfc1918ClassCPrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918ClassCPrivate]", "kind" : "implicit val"}, {"label" : "rfc1918ClassBPrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918ClassBPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassBPrivateDeriveGen", "link" : "zio\/test\/refined\/all$.html#rfc1918ClassBPrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918ClassBPrivate]", "kind" : "implicit val"}, {"label" : "rfc1918ClassAPrivateDeriveGen", "tail" : ": DeriveGen[Rfc1918ClassAPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassAPrivateDeriveGen", "link" : "zio\/test\/refined\/all$.html#rfc1918ClassAPrivateDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.Rfc1918ClassAPrivate]", "kind" : "implicit val"}, {"label" : "nonSystemPortNumberDeriveGen", "tail" : ": DeriveGen[NonSystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.nonSystemPortNumberDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonSystemPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.NonSystemPortNumber]", "kind" : "implicit val"}, {"label" : "dynamicPortNumberDeriveGen", "tail" : ": DeriveGen[DynamicPortNumber]", "member" : "zio.test.refined.types.NetInstances.dynamicPortNumberDeriveGen", "link" : "zio\/test\/refined\/all$.html#dynamicPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.DynamicPortNumber]", "kind" : "implicit val"}, {"label" : "userPortNumberDeriveGen", "tail" : ": DeriveGen[UserPortNumber]", "member" : "zio.test.refined.types.NetInstances.userPortNumberDeriveGen", "link" : "zio\/test\/refined\/all$.html#userPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.UserPortNumber]", "kind" : "implicit val"}, {"label" : "systemPortNumberDeriveGen", "tail" : ": DeriveGen[SystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.systemPortNumberDeriveGen", "link" : "zio\/test\/refined\/all$.html#systemPortNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.SystemPortNumber]", "kind" : "implicit val"}, {"label" : "portNumberDeriveGen", "tail" : ": DeriveGen[PortNumber]", "member" : "zio.test.refined.types.NetInstances.portNumberDeriveGen", "link" : "zio\/test\/refined\/all$.html#portNumberDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.net.PortNumber]", "kind" : "implicit val"}, {"label" : "privateNetworkGen", "tail" : ": Gen[Has[Random], PrivateNetwork]", "member" : "zio.test.refined.types.NetInstances.privateNetworkGen", "link" : "zio\/test\/refined\/all$.html#privateNetworkGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.PrivateNetwork]", "kind" : "val"}, {"label" : "rfc2544BenchmarkGen", "tail" : ": Gen[Has[Random], Rfc2544Benchmark]", "member" : "zio.test.refined.types.NetInstances.rfc2544BenchmarkGen", "link" : "zio\/test\/refined\/all$.html#rfc2544BenchmarkGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc2544Benchmark]", "kind" : "val"}, {"label" : "rfc3927LocalLinkGen", "tail" : ": Gen[Has[Random], Rfc3927LocalLink]", "member" : "zio.test.refined.types.NetInstances.rfc3927LocalLinkGen", "link" : "zio\/test\/refined\/all$.html#rfc3927LocalLinkGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc3927LocalLink]", "kind" : "val"}, {"label" : "rfc5737TestnetGen", "tail" : ": Gen[Has[Random], Rfc5737Testnet]", "member" : "zio.test.refined.types.NetInstances.rfc5737TestnetGen", "link" : "zio\/test\/refined\/all$.html#rfc5737TestnetGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet]", "kind" : "val"}, {"label" : "rfc5737Testnet3Gen", "tail" : ": Gen[Has[Random], Rfc5737Testnet3]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet3Gen", "link" : "zio\/test\/refined\/all$.html#rfc5737Testnet3Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet3]", "kind" : "val"}, {"label" : "rfc5737Testnet2Gen", "tail" : ": Gen[Has[Random], Rfc5737Testnet2]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet2Gen", "link" : "zio\/test\/refined\/all$.html#rfc5737Testnet2Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet2]", "kind" : "val"}, {"label" : "rfc5737Testnet1Gen", "tail" : ": Gen[Has[Random], Rfc5737Testnet1]", "member" : "zio.test.refined.types.NetInstances.rfc5737Testnet1Gen", "link" : "zio\/test\/refined\/all$.html#rfc5737Testnet1Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc5737Testnet1]", "kind" : "val"}, {"label" : "rfc1918PrivateGen", "tail" : ": Gen[Has[Random], Rfc1918Private]", "member" : "zio.test.refined.types.NetInstances.rfc1918PrivateGen", "link" : "zio\/test\/refined\/all$.html#rfc1918PrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918Private]", "kind" : "val"}, {"label" : "rfc1918ClassCPrivateGen", "tail" : ": Gen[Has[Random], Rfc1918ClassCPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassCPrivateGen", "link" : "zio\/test\/refined\/all$.html#rfc1918ClassCPrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918ClassCPrivate]", "kind" : "val"}, {"label" : "rfc1918ClassBPrivateGen", "tail" : ": Gen[Has[Random], Rfc1918ClassBPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassBPrivateGen", "link" : "zio\/test\/refined\/all$.html#rfc1918ClassBPrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918ClassBPrivate]", "kind" : "val"}, {"label" : "rfc1918ClassAPrivateGen", "tail" : ": Gen[Has[Random], Rfc1918ClassAPrivate]", "member" : "zio.test.refined.types.NetInstances.rfc1918ClassAPrivateGen", "link" : "zio\/test\/refined\/all$.html#rfc1918ClassAPrivateGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.Rfc1918ClassAPrivate]", "kind" : "val"}, {"label" : "nonSystemPortNumberGen", "tail" : ": Gen[Has[Random], NonSystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.nonSystemPortNumberGen", "link" : "zio\/test\/refined\/all$.html#nonSystemPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.NonSystemPortNumber]", "kind" : "val"}, {"label" : "dynamicPortNumberGen", "tail" : ": Gen[Has[Random], DynamicPortNumber]", "member" : "zio.test.refined.types.NetInstances.dynamicPortNumberGen", "link" : "zio\/test\/refined\/all$.html#dynamicPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.DynamicPortNumber]", "kind" : "val"}, {"label" : "userPortNumberGen", "tail" : ": Gen[Has[Random], UserPortNumber]", "member" : "zio.test.refined.types.NetInstances.userPortNumberGen", "link" : "zio\/test\/refined\/all$.html#userPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.UserPortNumber]", "kind" : "val"}, {"label" : "systemPortNumberGen", "tail" : ": Gen[Has[Random], SystemPortNumber]", "member" : "zio.test.refined.types.NetInstances.systemPortNumberGen", "link" : "zio\/test\/refined\/all$.html#systemPortNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.SystemPortNumber]", "kind" : "val"}, {"label" : "portNumberGen", "tail" : ": Gen[Has[Random], PortNumber]", "member" : "zio.test.refined.types.NetInstances.portNumberGen", "link" : "zio\/test\/refined\/all$.html#portNumberGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.net.PortNumber]", "kind" : "val"}, {"label" : "sha512Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA512]", "member" : "zio.test.refined.types.DigitInstances.sha512Arbitrary", "link" : "zio\/test\/refined\/all$.html#sha512Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA512]", "kind" : "implicit val"}, {"label" : "sha384Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA384]", "member" : "zio.test.refined.types.DigitInstances.sha384Arbitrary", "link" : "zio\/test\/refined\/all$.html#sha384Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA384]", "kind" : "implicit val"}, {"label" : "sha256Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA256]", "member" : "zio.test.refined.types.DigitInstances.sha256Arbitrary", "link" : "zio\/test\/refined\/all$.html#sha256Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA256]", "kind" : "implicit val"}, {"label" : "sha224Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA224]", "member" : "zio.test.refined.types.DigitInstances.sha224Arbitrary", "link" : "zio\/test\/refined\/all$.html#sha224Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA224]", "kind" : "implicit val"}, {"label" : "sha1Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.SHA1]", "member" : "zio.test.refined.types.DigitInstances.sha1Arbitrary", "link" : "zio\/test\/refined\/all$.html#sha1Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.SHA1]", "kind" : "implicit val"}, {"label" : "md5Arbitrary", "tail" : ": DeriveGen[eu.timepit.refined.types.all.MD5]", "member" : "zio.test.refined.types.DigitInstances.md5Arbitrary", "link" : "zio\/test\/refined\/all$.html#md5Arbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.all.MD5]", "kind" : "implicit val"}, {"label" : "sha512Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA512]", "member" : "zio.test.refined.types.DigitInstances.sha512Gen", "link" : "zio\/test\/refined\/all$.html#sha512Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA512]", "kind" : "val"}, {"label" : "sha384Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA384]", "member" : "zio.test.refined.types.DigitInstances.sha384Gen", "link" : "zio\/test\/refined\/all$.html#sha384Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA384]", "kind" : "val"}, {"label" : "sha256Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA256]", "member" : "zio.test.refined.types.DigitInstances.sha256Gen", "link" : "zio\/test\/refined\/all$.html#sha256Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA256]", "kind" : "val"}, {"label" : "sha224Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA224]", "member" : "zio.test.refined.types.DigitInstances.sha224Gen", "link" : "zio\/test\/refined\/all$.html#sha224Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA224]", "kind" : "val"}, {"label" : "sha1Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.SHA1]", "member" : "zio.test.refined.types.DigitInstances.sha1Gen", "link" : "zio\/test\/refined\/all$.html#sha1Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.SHA1]", "kind" : "val"}, {"label" : "md5Gen", "tail" : ": Gen[Has[Random], eu.timepit.refined.types.all.MD5]", "member" : "zio.test.refined.types.DigitInstances.md5Gen", "link" : "zio\/test\/refined\/all$.html#md5Gen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.all.MD5]", "kind" : "val"}, {"label" : "upperCaseCharDeriveGen", "tail" : ": DeriveGen[UpperCaseChar]", "member" : "zio.test.refined.types.CharInstances.upperCaseCharDeriveGen", "link" : "zio\/test\/refined\/all$.html#upperCaseCharDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.char.UpperCaseChar]", "kind" : "implicit val"}, {"label" : "lowerCaseCharDeriveGen", "tail" : ": DeriveGen[LowerCaseChar]", "member" : "zio.test.refined.types.CharInstances.lowerCaseCharDeriveGen", "link" : "zio\/test\/refined\/all$.html#lowerCaseCharDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.types.char.LowerCaseChar]", "kind" : "implicit val"}, {"label" : "upperCaseCharGen", "tail" : ": Gen[Has[Random], UpperCaseChar]", "member" : "zio.test.refined.types.CharInstances.upperCaseCharGen", "link" : "zio\/test\/refined\/all$.html#upperCaseCharGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.char.UpperCaseChar]", "kind" : "val"}, {"label" : "lowerCaseCharGen", "tail" : ": Gen[Has[Random], LowerCaseChar]", "member" : "zio.test.refined.types.CharInstances.lowerCaseCharGen", "link" : "zio\/test\/refined\/all$.html#lowerCaseCharGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.types.char.LowerCaseChar]", "kind" : "val"}, {"label" : "doubleLessThan", "tail" : "(wn: WitnessAs[N, Double]): DeriveGen[Refined[Double, Less[N]]]", "member" : "zio.test.refined.NumericInstances.doubleLessThan", "link" : "zio\/test\/refined\/all$.html#doubleLessThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Double]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Double,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "byteLessThan", "tail" : "(wn: WitnessAs[N, Byte]): DeriveGen[Refined[Byte, Less[N]]]", "member" : "zio.test.refined.NumericInstances.byteLessThan", "link" : "zio\/test\/refined\/all$.html#byteLessThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Byte]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Byte,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "shortLessThan", "tail" : "(wn: WitnessAs[N, Short]): DeriveGen[Refined[Short, Less[N]]]", "member" : "zio.test.refined.NumericInstances.shortLessThan", "link" : "zio\/test\/refined\/all$.html#shortLessThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Short]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Short,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "longLessThan", "tail" : "(wn: WitnessAs[N, Long]): DeriveGen[Refined[Long, Less[N]]]", "member" : "zio.test.refined.NumericInstances.longLessThan", "link" : "zio\/test\/refined\/all$.html#longLessThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Long]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Long,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "intLessThan", "tail" : "(wn: WitnessAs[N, Int]): DeriveGen[Refined[Int, Less[N]]]", "member" : "zio.test.refined.NumericInstances.intLessThan", "link" : "zio\/test\/refined\/all$.html#intLessThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Int]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "doubleGreaterThan", "tail" : "(wn: WitnessAs[N, Double]): DeriveGen[Refined[Double, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.doubleGreaterThan", "link" : "zio\/test\/refined\/all$.html#doubleGreaterThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Double]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Double,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "byteGreaterThan", "tail" : "(wn: WitnessAs[N, Byte]): DeriveGen[Refined[Byte, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.byteGreaterThan", "link" : "zio\/test\/refined\/all$.html#byteGreaterThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Byte]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Byte,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "shortGreaterThan", "tail" : "(wn: WitnessAs[N, Short]): DeriveGen[Refined[Short, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.shortGreaterThan", "link" : "zio\/test\/refined\/all$.html#shortGreaterThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Short]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Short,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "longGreaterThan", "tail" : "(wn: WitnessAs[N, Long]): DeriveGen[Refined[Long, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.longGreaterThan", "link" : "zio\/test\/refined\/all$.html#longGreaterThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Long]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Long,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "intGreaterThan", "tail" : "(wn: WitnessAs[N, Int]): DeriveGen[Refined[Int, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.intGreaterThan", "link" : "zio\/test\/refined\/all$.html#intGreaterThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Int]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "doubleLessThanGen", "tail" : "(wn: WitnessAs[N, Double]): Gen[Has[Random], Refined[Double, Less[N]]]", "member" : "zio.test.refined.NumericInstances.doubleLessThanGen", "link" : "zio\/test\/refined\/all$.html#doubleLessThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Double]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Double,eu.timepit.refined.numeric.Less[N]]]", "kind" : "def"}, {"label" : "byteLessThanGen", "tail" : "(wn: WitnessAs[N, Byte]): Gen[Has[Random], Refined[Byte, Less[N]]]", "member" : "zio.test.refined.NumericInstances.byteLessThanGen", "link" : "zio\/test\/refined\/all$.html#byteLessThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Byte]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Byte,eu.timepit.refined.numeric.Less[N]]]", "kind" : "def"}, {"label" : "shortLessThanGen", "tail" : "(wn: WitnessAs[N, Short]): Gen[Has[Random], Refined[Short, Less[N]]]", "member" : "zio.test.refined.NumericInstances.shortLessThanGen", "link" : "zio\/test\/refined\/all$.html#shortLessThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Short]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Short,eu.timepit.refined.numeric.Less[N]]]", "kind" : "def"}, {"label" : "longLessThanGen", "tail" : "(wn: WitnessAs[N, Long]): Gen[Has[Random], Refined[Long, Less[N]]]", "member" : "zio.test.refined.NumericInstances.longLessThanGen", "link" : "zio\/test\/refined\/all$.html#longLessThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Long]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Long,eu.timepit.refined.numeric.Less[N]]]", "kind" : "def"}, {"label" : "intLessThanGen", "tail" : "(wn: WitnessAs[N, Int]): Gen[Has[Random], Refined[Int, Less[N]]]", "member" : "zio.test.refined.NumericInstances.intLessThanGen", "link" : "zio\/test\/refined\/all$.html#intLessThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Int]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Less[N]]]", "kind" : "def"}, {"label" : "doubleGreaterThanGen", "tail" : "(wn: WitnessAs[N, Double]): Gen[Has[Random], Refined[Double, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.doubleGreaterThanGen", "link" : "zio\/test\/refined\/all$.html#doubleGreaterThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Double]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Double,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "def"}, {"label" : "byteGreaterThanGen", "tail" : "(wn: WitnessAs[N, Byte]): Gen[Has[Random], Refined[Byte, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.byteGreaterThanGen", "link" : "zio\/test\/refined\/all$.html#byteGreaterThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Byte]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Byte,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "def"}, {"label" : "shortGreaterThanGen", "tail" : "(wn: WitnessAs[N, Short]): Gen[Has[Random], Refined[Short, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.shortGreaterThanGen", "link" : "zio\/test\/refined\/all$.html#shortGreaterThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Short]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Short,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "def"}, {"label" : "longGreaterThanGen", "tail" : "(wn: WitnessAs[N, Long]): Gen[Has[Random], Refined[Long, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.longGreaterThanGen", "link" : "zio\/test\/refined\/all$.html#longGreaterThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Long]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Long,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "def"}, {"label" : "intGreaterThanGen", "tail" : "(wn: WitnessAs[N, Int]): Gen[Has[Random], Refined[Int, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.intGreaterThanGen", "link" : "zio\/test\/refined\/all$.html#intGreaterThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Int]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "def"}, {"label" : "startsWithStringNDeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char], deriveGenSize: DeriveGen[Refined[Int, P]]): DeriveGen[Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithStringNDeriveGen", "link" : "zio\/test\/refined\/all$.html#startsWithStringNDeriveGen[S<:String,P](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char],implicitderiveGenSize:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,P]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "implicit def"}, {"label" : "endsWithStringNDeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char], deriveGenSize: DeriveGen[Refined[Int, P]]): DeriveGen[Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithStringNDeriveGen", "link" : "zio\/test\/refined\/all$.html#endsWithStringNDeriveGen[S<:String,P](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char],implicitderiveGenSize:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,P]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "implicit def"}, {"label" : "startsWithString1DeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char]): DeriveGen[Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithString1DeriveGen", "link" : "zio\/test\/refined\/all$.html#startsWithString1DeriveGen[S<:String](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "implicit def"}, {"label" : "endsWithString1DeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char]): DeriveGen[Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithString1DeriveGen", "link" : "zio\/test\/refined\/all$.html#endsWithString1DeriveGen[S<:String](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "implicit def"}, {"label" : "startsWithStringDeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char]): DeriveGen[Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithStringDeriveGen", "link" : "zio\/test\/refined\/all$.html#startsWithStringDeriveGen[S<:String](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "implicit def"}, {"label" : "endsWithStringDeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char]): DeriveGen[Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithStringDeriveGen", "link" : "zio\/test\/refined\/all$.html#endsWithStringDeriveGen[S<:String](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "implicit def"}, {"label" : "uuidStringDeriveGen", "tail" : ": DeriveGen[Refined[String, Uuid]]", "member" : "zio.test.refined.StringInstances.uuidStringDeriveGen", "link" : "zio\/test\/refined\/all$.html#uuidStringDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.Uuid]]", "kind" : "implicit val"}, {"label" : "uuidStringGen", "tail" : ": Gen[Has[Random], Refined[String, Uuid]]", "member" : "zio.test.refined.StringInstances.uuidStringGen", "link" : "zio\/test\/refined\/all$.html#uuidStringGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.Uuid]]", "kind" : "val"}, {"label" : "startsWithStringNGen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char], sizeGen: Gen[R, Refined[Int, P]]): Gen[R, Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithStringNGen", "link" : "zio\/test\/refined\/all$.html#startsWithStringNGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String,P](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char],implicitsizeGen:zio.test.Gen[R,eu.timepit.refined.api.Refined[Int,P]]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "def"}, {"label" : "startsWithString1Gen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char]): Gen[R, Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithString1Gen", "link" : "zio\/test\/refined\/all$.html#startsWithString1Gen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "def"}, {"label" : "startsWithStringGen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char]): Gen[R, Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithStringGen", "link" : "zio\/test\/refined\/all$.html#startsWithStringGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "def"}, {"label" : "endsWithStringNGen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char], sizeGen: Gen[R, Refined[Int, P]]): Gen[R, Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithStringNGen", "link" : "zio\/test\/refined\/all$.html#endsWithStringNGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String,P](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char],implicitsizeGen:zio.test.Gen[R,eu.timepit.refined.api.Refined[Int,P]]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "def"}, {"label" : "endsWithString1Gen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char]): Gen[R, Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithString1Gen", "link" : "zio\/test\/refined\/all$.html#endsWithString1Gen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "def"}, {"label" : "endsWithStringGen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char]): Gen[R, Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithStringGen", "link" : "zio\/test\/refined\/all$.html#endsWithStringGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "def"}, {"label" : "equalArbitrary", "tail" : "(wu: Aux[U]): DeriveGen[Refined[T, Equal[U]]]", "member" : "zio.test.refined.GenericInstances.equalArbitrary", "link" : "zio\/test\/refined\/all$.html#equalArbitrary[T,U<:T](implicitwu:shapeless.Witness.Aux[U]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[T,eu.timepit.refined.generic.Equal[U]]]", "kind" : "implicit def"}, {"label" : "equalArbitraryGen", "tail" : "(wu: Aux[U]): Gen[Has[Random] with Has[Sized], Refined[T, Equal[U]]]", "member" : "zio.test.refined.GenericInstances.equalArbitraryGen", "link" : "zio\/test\/refined\/all$.html#equalArbitraryGen[T,U<:T](implicitwu:shapeless.Witness.Aux[U]):zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.api.Refined[T,eu.timepit.refined.generic.Equal[U]]]", "kind" : "def"}, {"label" : "vectorSizeRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T], deriveGenSize: DeriveGen[Refined[Int, P]]): DeriveGen[Refined[Vector[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.vectorSizeRefinedDeriveGen", "link" : "zio\/test\/refined\/all$.html#vectorSizeRefinedDeriveGen[T,P](implicitderiveGenT:zio.test.magnolia.DeriveGen[T],implicitderiveGenSize:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,P]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Vector[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "implicit def"}, {"label" : "listSizeRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T], deriveGenSize: DeriveGen[Refined[Int, P]]): DeriveGen[Refined[List[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.listSizeRefinedDeriveGen", "link" : "zio\/test\/refined\/all$.html#listSizeRefinedDeriveGen[T,P](implicitderiveGenT:zio.test.magnolia.DeriveGen[T],implicitderiveGenSize:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,P]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[List[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "implicit def"}, {"label" : "sizedChunkRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T], deriveGenSize: DeriveGen[Refined[Int, P]]): DeriveGen[Refined[Chunk[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.sizedChunkRefinedDeriveGen", "link" : "zio\/test\/refined\/all$.html#sizedChunkRefinedDeriveGen[T,P](implicitderiveGenT:zio.test.magnolia.DeriveGen[T],implicitderiveGenSize:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,P]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[zio.Chunk[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "implicit def"}, {"label" : "nonEmptyVectorRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T]): DeriveGen[Refined[Vector[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyVectorRefinedDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonEmptyVectorRefinedDeriveGen[T](implicitderiveGenT:zio.test.magnolia.DeriveGen[T]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Vector[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "implicit def"}, {"label" : "nonEmptyListRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T]): DeriveGen[Refined[List[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyListRefinedDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonEmptyListRefinedDeriveGen[T](implicitderiveGenT:zio.test.magnolia.DeriveGen[T]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[List[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "implicit def"}, {"label" : "nonEmptyChunkRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T]): DeriveGen[Refined[NonEmptyChunk[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyChunkRefinedDeriveGen", "link" : "zio\/test\/refined\/all$.html#nonEmptyChunkRefinedDeriveGen[C,T](implicitderiveGenT:zio.test.magnolia.DeriveGen[T]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[zio.NonEmptyChunk[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "implicit def"}, {"label" : "vectorSizeRefinedGen", "tail" : "(genT: Gen[R, T], sizeGen: Gen[R, Refined[Int, P]]): Gen[R, Refined[Vector[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.vectorSizeRefinedGen", "link" : "zio\/test\/refined\/all$.html#vectorSizeRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T,P](implicitgenT:zio.test.Gen[R,T],implicitsizeGen:zio.test.Gen[R,eu.timepit.refined.api.Refined[Int,P]]):zio.test.Gen[R,eu.timepit.refined.api.Refined[Vector[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "def"}, {"label" : "listSizeRefinedGen", "tail" : "(genT: Gen[R, T], sizeGen: Gen[R, Refined[Int, P]]): Gen[R, Refined[List[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.listSizeRefinedGen", "link" : "zio\/test\/refined\/all$.html#listSizeRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T,P](implicitgenT:zio.test.Gen[R,T],implicitsizeGen:zio.test.Gen[R,eu.timepit.refined.api.Refined[Int,P]]):zio.test.Gen[R,eu.timepit.refined.api.Refined[List[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "def"}, {"label" : "sizedChunkRefinedGen", "tail" : "(genT: Gen[R, T], sizeGen: Gen[R, Refined[Int, P]]): Gen[R, Refined[Chunk[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.sizedChunkRefinedGen", "link" : "zio\/test\/refined\/all$.html#sizedChunkRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T,P](implicitgenT:zio.test.Gen[R,T],implicitsizeGen:zio.test.Gen[R,eu.timepit.refined.api.Refined[Int,P]]):zio.test.Gen[R,eu.timepit.refined.api.Refined[zio.Chunk[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "def"}, {"label" : "nonEmptyVectorRefinedGen", "tail" : "(genT: Gen[R, T]): Gen[R, Refined[Vector[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyVectorRefinedGen", "link" : "zio\/test\/refined\/all$.html#nonEmptyVectorRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T](implicitgenT:zio.test.Gen[R,T]):zio.test.Gen[R,eu.timepit.refined.api.Refined[Vector[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "def"}, {"label" : "nonEmptyListRefinedGen", "tail" : "(genT: Gen[R, T]): Gen[R, Refined[List[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyListRefinedGen", "link" : "zio\/test\/refined\/all$.html#nonEmptyListRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T](implicitgenT:zio.test.Gen[R,T]):zio.test.Gen[R,eu.timepit.refined.api.Refined[List[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "def"}, {"label" : "nonEmptyChunkRefinedGen", "tail" : "(genT: Gen[R, T]): Gen[R, Refined[NonEmptyChunk[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyChunkRefinedGen", "link" : "zio\/test\/refined\/all$.html#nonEmptyChunkRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T](implicitgenT:zio.test.Gen[R,T]):zio.test.Gen[R,eu.timepit.refined.api.Refined[zio.NonEmptyChunk[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "def"}, {"label" : "whitespaceDeriveGen", "tail" : "(): DeriveGen[Refined[Char, Whitespace]]", "member" : "zio.test.refined.CharInstances.whitespaceDeriveGen", "link" : "zio\/test\/refined\/all$.html#whitespaceDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Whitespace]]", "kind" : "implicit def"}, {"label" : "upperCaseDeriveGen", "tail" : "(): DeriveGen[Refined[Char, UpperCase]]", "member" : "zio.test.refined.CharInstances.upperCaseDeriveGen", "link" : "zio\/test\/refined\/all$.html#upperCaseDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.UpperCase]]", "kind" : "implicit def"}, {"label" : "lowerCaseDeriveGen", "tail" : "(): DeriveGen[Refined[Char, LowerCase]]", "member" : "zio.test.refined.CharInstances.lowerCaseDeriveGen", "link" : "zio\/test\/refined\/all$.html#lowerCaseDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.LowerCase]]", "kind" : "implicit def"}, {"label" : "letterDeriveGen", "tail" : "(): DeriveGen[Refined[Char, Letter]]", "member" : "zio.test.refined.CharInstances.letterDeriveGen", "link" : "zio\/test\/refined\/all$.html#letterDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Letter]]", "kind" : "implicit def"}, {"label" : "digitArbitrary", "tail" : "(): DeriveGen[Refined[Char, Digit]]", "member" : "zio.test.refined.CharInstances.digitArbitrary", "link" : "zio\/test\/refined\/all$.html#digitArbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Digit]]", "kind" : "implicit def"}, {"label" : "whitespaceGen", "tail" : ": Gen[Has[Random], Refined[Char, Whitespace]]", "member" : "zio.test.refined.CharInstances.whitespaceGen", "link" : "zio\/test\/refined\/all$.html#whitespaceGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Whitespace]]", "kind" : "val"}, {"label" : "upperCaseGen", "tail" : ": Gen[Has[Random], Refined[Char, UpperCase]]", "member" : "zio.test.refined.CharInstances.upperCaseGen", "link" : "zio\/test\/refined\/all$.html#upperCaseGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.UpperCase]]", "kind" : "val"}, {"label" : "lowerCaseGen", "tail" : ": Gen[Has[Random], Refined[Char, LowerCase]]", "member" : "zio.test.refined.CharInstances.lowerCaseGen", "link" : "zio\/test\/refined\/all$.html#lowerCaseGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.LowerCase]]", "kind" : "val"}, {"label" : "letterGen", "tail" : ": Gen[Has[Random], Refined[Char, Letter]]", "member" : "zio.test.refined.CharInstances.letterGen", "link" : "zio\/test\/refined\/all$.html#letterGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Letter]]", "kind" : "val"}, {"label" : "digitGen", "tail" : ": Gen[Has[Random], Refined[Char, Digit]]", "member" : "zio.test.refined.CharInstances.digitGen", "link" : "zio\/test\/refined\/all$.html#digitGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Digit]]", "kind" : "val"}, {"label" : "orGen", "tail" : "(genA: Gen[R, T], genB: Gen[R, T]): Gen[R, Refined[T, Or[A, B]]]", "member" : "zio.test.refined.BooleanInstances.orGen", "link" : "zio\/test\/refined\/all$.html#orGen[R<:zio.Has[zio.Random],T,A,B](implicitgenA:zio.test.Gen[R,T],implicitgenB:zio.test.Gen[R,T]):zio.test.Gen[R,eu.timepit.refined.api.Refined[T,eu.timepit.refined.boolean.Or[A,B]]]", "kind" : "def"}, {"label" : "orDeriveGen", "tail" : "(raGen: DeriveGen[Refined[T, A]], rbGen: DeriveGen[Refined[T, B]]): DeriveGen[Refined[T, Or[A, B]]]", "member" : "zio.test.refined.BooleanInstances.orDeriveGen", "link" : "zio\/test\/refined\/all$.html#orDeriveGen[T,A,B](implicitraGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[T,A]],implicitrbGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[T,B]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[T,eu.timepit.refined.boolean.Or[A,B]]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/all$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/all$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/all$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/all$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/all$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/all$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/all$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/all$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/all$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/all$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/all$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/all$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/all$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/all$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/all$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/all$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/all$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/all$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/all$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.refined.boolean", "shortDescription" : "", "object" : "zio\/test\/refined\/boolean$.html", "members_object" : [{"label" : "orGen", "tail" : "(genA: Gen[R, T], genB: Gen[R, T]): Gen[R, Refined[T, Or[A, B]]]", "member" : "zio.test.refined.BooleanInstances.orGen", "link" : "zio\/test\/refined\/boolean$.html#orGen[R<:zio.Has[zio.Random],T,A,B](implicitgenA:zio.test.Gen[R,T],implicitgenB:zio.test.Gen[R,T]):zio.test.Gen[R,eu.timepit.refined.api.Refined[T,eu.timepit.refined.boolean.Or[A,B]]]", "kind" : "def"}, {"label" : "orDeriveGen", "tail" : "(raGen: DeriveGen[Refined[T, A]], rbGen: DeriveGen[Refined[T, B]]): DeriveGen[Refined[T, Or[A, B]]]", "member" : "zio.test.refined.BooleanInstances.orDeriveGen", "link" : "zio\/test\/refined\/boolean$.html#orDeriveGen[T,A,B](implicitraGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[T,A]],implicitrbGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[T,B]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[T,eu.timepit.refined.boolean.Or[A,B]]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/boolean$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/boolean$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/boolean$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/boolean$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/boolean$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/boolean$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/boolean$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/boolean$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/boolean$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/boolean$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/boolean$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/boolean$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/boolean$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/boolean$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/boolean$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/boolean$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/boolean$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/boolean$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/boolean$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.refined.BooleanInstances", "trait" : "zio\/test\/refined\/BooleanInstances.html", "kind" : "trait", "members_trait" : [{"label" : "orGen", "tail" : "(genA: Gen[R, T], genB: Gen[R, T]): Gen[R, Refined[T, Or[A, B]]]", "member" : "zio.test.refined.BooleanInstances.orGen", "link" : "zio\/test\/refined\/BooleanInstances.html#orGen[R<:zio.Has[zio.Random],T,A,B](implicitgenA:zio.test.Gen[R,T],implicitgenB:zio.test.Gen[R,T]):zio.test.Gen[R,eu.timepit.refined.api.Refined[T,eu.timepit.refined.boolean.Or[A,B]]]", "kind" : "def"}, {"label" : "orDeriveGen", "tail" : "(raGen: DeriveGen[Refined[T, A]], rbGen: DeriveGen[Refined[T, B]]): DeriveGen[Refined[T, Or[A, B]]]", "member" : "zio.test.refined.BooleanInstances.orDeriveGen", "link" : "zio\/test\/refined\/BooleanInstances.html#orDeriveGen[T,A,B](implicitraGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[T,A]],implicitrbGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[T,B]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[T,eu.timepit.refined.boolean.Or[A,B]]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/BooleanInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/BooleanInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/BooleanInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/BooleanInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/BooleanInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/BooleanInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/BooleanInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/BooleanInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/BooleanInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/BooleanInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/BooleanInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/BooleanInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/BooleanInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/BooleanInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/BooleanInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/BooleanInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/BooleanInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/BooleanInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/BooleanInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.refined.char", "shortDescription" : "", "object" : "zio\/test\/refined\/char$.html", "members_object" : [{"label" : "whitespaceDeriveGen", "tail" : "(): DeriveGen[Refined[Char, Whitespace]]", "member" : "zio.test.refined.CharInstances.whitespaceDeriveGen", "link" : "zio\/test\/refined\/char$.html#whitespaceDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Whitespace]]", "kind" : "implicit def"}, {"label" : "upperCaseDeriveGen", "tail" : "(): DeriveGen[Refined[Char, UpperCase]]", "member" : "zio.test.refined.CharInstances.upperCaseDeriveGen", "link" : "zio\/test\/refined\/char$.html#upperCaseDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.UpperCase]]", "kind" : "implicit def"}, {"label" : "lowerCaseDeriveGen", "tail" : "(): DeriveGen[Refined[Char, LowerCase]]", "member" : "zio.test.refined.CharInstances.lowerCaseDeriveGen", "link" : "zio\/test\/refined\/char$.html#lowerCaseDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.LowerCase]]", "kind" : "implicit def"}, {"label" : "letterDeriveGen", "tail" : "(): DeriveGen[Refined[Char, Letter]]", "member" : "zio.test.refined.CharInstances.letterDeriveGen", "link" : "zio\/test\/refined\/char$.html#letterDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Letter]]", "kind" : "implicit def"}, {"label" : "digitArbitrary", "tail" : "(): DeriveGen[Refined[Char, Digit]]", "member" : "zio.test.refined.CharInstances.digitArbitrary", "link" : "zio\/test\/refined\/char$.html#digitArbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Digit]]", "kind" : "implicit def"}, {"label" : "whitespaceGen", "tail" : ": Gen[Has[Random], Refined[Char, Whitespace]]", "member" : "zio.test.refined.CharInstances.whitespaceGen", "link" : "zio\/test\/refined\/char$.html#whitespaceGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Whitespace]]", "kind" : "val"}, {"label" : "upperCaseGen", "tail" : ": Gen[Has[Random], Refined[Char, UpperCase]]", "member" : "zio.test.refined.CharInstances.upperCaseGen", "link" : "zio\/test\/refined\/char$.html#upperCaseGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.UpperCase]]", "kind" : "val"}, {"label" : "lowerCaseGen", "tail" : ": Gen[Has[Random], Refined[Char, LowerCase]]", "member" : "zio.test.refined.CharInstances.lowerCaseGen", "link" : "zio\/test\/refined\/char$.html#lowerCaseGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.LowerCase]]", "kind" : "val"}, {"label" : "letterGen", "tail" : ": Gen[Has[Random], Refined[Char, Letter]]", "member" : "zio.test.refined.CharInstances.letterGen", "link" : "zio\/test\/refined\/char$.html#letterGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Letter]]", "kind" : "val"}, {"label" : "digitGen", "tail" : ": Gen[Has[Random], Refined[Char, Digit]]", "member" : "zio.test.refined.CharInstances.digitGen", "link" : "zio\/test\/refined\/char$.html#digitGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Digit]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/char$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/char$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/char$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/char$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/char$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/char$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/char$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/char$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/char$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/char$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/char$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/char$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/char$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/char$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/char$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/char$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/char$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/char$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/char$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.refined.CharInstances", "trait" : "zio\/test\/refined\/CharInstances.html", "kind" : "trait", "members_trait" : [{"label" : "whitespaceDeriveGen", "tail" : "(): DeriveGen[Refined[Char, Whitespace]]", "member" : "zio.test.refined.CharInstances.whitespaceDeriveGen", "link" : "zio\/test\/refined\/CharInstances.html#whitespaceDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Whitespace]]", "kind" : "implicit def"}, {"label" : "upperCaseDeriveGen", "tail" : "(): DeriveGen[Refined[Char, UpperCase]]", "member" : "zio.test.refined.CharInstances.upperCaseDeriveGen", "link" : "zio\/test\/refined\/CharInstances.html#upperCaseDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.UpperCase]]", "kind" : "implicit def"}, {"label" : "lowerCaseDeriveGen", "tail" : "(): DeriveGen[Refined[Char, LowerCase]]", "member" : "zio.test.refined.CharInstances.lowerCaseDeriveGen", "link" : "zio\/test\/refined\/CharInstances.html#lowerCaseDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.LowerCase]]", "kind" : "implicit def"}, {"label" : "letterDeriveGen", "tail" : "(): DeriveGen[Refined[Char, Letter]]", "member" : "zio.test.refined.CharInstances.letterDeriveGen", "link" : "zio\/test\/refined\/CharInstances.html#letterDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Letter]]", "kind" : "implicit def"}, {"label" : "digitArbitrary", "tail" : "(): DeriveGen[Refined[Char, Digit]]", "member" : "zio.test.refined.CharInstances.digitArbitrary", "link" : "zio\/test\/refined\/CharInstances.html#digitArbitrary:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Digit]]", "kind" : "implicit def"}, {"label" : "whitespaceGen", "tail" : ": Gen[Has[Random], Refined[Char, Whitespace]]", "member" : "zio.test.refined.CharInstances.whitespaceGen", "link" : "zio\/test\/refined\/CharInstances.html#whitespaceGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Whitespace]]", "kind" : "val"}, {"label" : "upperCaseGen", "tail" : ": Gen[Has[Random], Refined[Char, UpperCase]]", "member" : "zio.test.refined.CharInstances.upperCaseGen", "link" : "zio\/test\/refined\/CharInstances.html#upperCaseGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.UpperCase]]", "kind" : "val"}, {"label" : "lowerCaseGen", "tail" : ": Gen[Has[Random], Refined[Char, LowerCase]]", "member" : "zio.test.refined.CharInstances.lowerCaseGen", "link" : "zio\/test\/refined\/CharInstances.html#lowerCaseGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.LowerCase]]", "kind" : "val"}, {"label" : "letterGen", "tail" : ": Gen[Has[Random], Refined[Char, Letter]]", "member" : "zio.test.refined.CharInstances.letterGen", "link" : "zio\/test\/refined\/CharInstances.html#letterGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Letter]]", "kind" : "val"}, {"label" : "digitGen", "tail" : ": Gen[Has[Random], Refined[Char, Digit]]", "member" : "zio.test.refined.CharInstances.digitGen", "link" : "zio\/test\/refined\/CharInstances.html#digitGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Char,eu.timepit.refined.char.Digit]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/CharInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/CharInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/CharInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/CharInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/CharInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/CharInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/CharInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/CharInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/CharInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/CharInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/CharInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/CharInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/CharInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/CharInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/CharInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/CharInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/CharInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/CharInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/CharInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.refined.collection", "shortDescription" : "", "object" : "zio\/test\/refined\/collection$.html", "members_object" : [{"label" : "vectorSizeRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T], deriveGenSize: DeriveGen[Refined[Int, P]]): DeriveGen[Refined[Vector[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.vectorSizeRefinedDeriveGen", "link" : "zio\/test\/refined\/collection$.html#vectorSizeRefinedDeriveGen[T,P](implicitderiveGenT:zio.test.magnolia.DeriveGen[T],implicitderiveGenSize:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,P]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Vector[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "implicit def"}, {"label" : "listSizeRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T], deriveGenSize: DeriveGen[Refined[Int, P]]): DeriveGen[Refined[List[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.listSizeRefinedDeriveGen", "link" : "zio\/test\/refined\/collection$.html#listSizeRefinedDeriveGen[T,P](implicitderiveGenT:zio.test.magnolia.DeriveGen[T],implicitderiveGenSize:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,P]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[List[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "implicit def"}, {"label" : "sizedChunkRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T], deriveGenSize: DeriveGen[Refined[Int, P]]): DeriveGen[Refined[Chunk[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.sizedChunkRefinedDeriveGen", "link" : "zio\/test\/refined\/collection$.html#sizedChunkRefinedDeriveGen[T,P](implicitderiveGenT:zio.test.magnolia.DeriveGen[T],implicitderiveGenSize:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,P]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[zio.Chunk[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "implicit def"}, {"label" : "nonEmptyVectorRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T]): DeriveGen[Refined[Vector[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyVectorRefinedDeriveGen", "link" : "zio\/test\/refined\/collection$.html#nonEmptyVectorRefinedDeriveGen[T](implicitderiveGenT:zio.test.magnolia.DeriveGen[T]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Vector[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "implicit def"}, {"label" : "nonEmptyListRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T]): DeriveGen[Refined[List[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyListRefinedDeriveGen", "link" : "zio\/test\/refined\/collection$.html#nonEmptyListRefinedDeriveGen[T](implicitderiveGenT:zio.test.magnolia.DeriveGen[T]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[List[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "implicit def"}, {"label" : "nonEmptyChunkRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T]): DeriveGen[Refined[NonEmptyChunk[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyChunkRefinedDeriveGen", "link" : "zio\/test\/refined\/collection$.html#nonEmptyChunkRefinedDeriveGen[C,T](implicitderiveGenT:zio.test.magnolia.DeriveGen[T]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[zio.NonEmptyChunk[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "implicit def"}, {"label" : "vectorSizeRefinedGen", "tail" : "(genT: Gen[R, T], sizeGen: Gen[R, Refined[Int, P]]): Gen[R, Refined[Vector[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.vectorSizeRefinedGen", "link" : "zio\/test\/refined\/collection$.html#vectorSizeRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T,P](implicitgenT:zio.test.Gen[R,T],implicitsizeGen:zio.test.Gen[R,eu.timepit.refined.api.Refined[Int,P]]):zio.test.Gen[R,eu.timepit.refined.api.Refined[Vector[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "def"}, {"label" : "listSizeRefinedGen", "tail" : "(genT: Gen[R, T], sizeGen: Gen[R, Refined[Int, P]]): Gen[R, Refined[List[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.listSizeRefinedGen", "link" : "zio\/test\/refined\/collection$.html#listSizeRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T,P](implicitgenT:zio.test.Gen[R,T],implicitsizeGen:zio.test.Gen[R,eu.timepit.refined.api.Refined[Int,P]]):zio.test.Gen[R,eu.timepit.refined.api.Refined[List[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "def"}, {"label" : "sizedChunkRefinedGen", "tail" : "(genT: Gen[R, T], sizeGen: Gen[R, Refined[Int, P]]): Gen[R, Refined[Chunk[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.sizedChunkRefinedGen", "link" : "zio\/test\/refined\/collection$.html#sizedChunkRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T,P](implicitgenT:zio.test.Gen[R,T],implicitsizeGen:zio.test.Gen[R,eu.timepit.refined.api.Refined[Int,P]]):zio.test.Gen[R,eu.timepit.refined.api.Refined[zio.Chunk[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "def"}, {"label" : "nonEmptyVectorRefinedGen", "tail" : "(genT: Gen[R, T]): Gen[R, Refined[Vector[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyVectorRefinedGen", "link" : "zio\/test\/refined\/collection$.html#nonEmptyVectorRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T](implicitgenT:zio.test.Gen[R,T]):zio.test.Gen[R,eu.timepit.refined.api.Refined[Vector[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "def"}, {"label" : "nonEmptyListRefinedGen", "tail" : "(genT: Gen[R, T]): Gen[R, Refined[List[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyListRefinedGen", "link" : "zio\/test\/refined\/collection$.html#nonEmptyListRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T](implicitgenT:zio.test.Gen[R,T]):zio.test.Gen[R,eu.timepit.refined.api.Refined[List[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "def"}, {"label" : "nonEmptyChunkRefinedGen", "tail" : "(genT: Gen[R, T]): Gen[R, Refined[NonEmptyChunk[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyChunkRefinedGen", "link" : "zio\/test\/refined\/collection$.html#nonEmptyChunkRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T](implicitgenT:zio.test.Gen[R,T]):zio.test.Gen[R,eu.timepit.refined.api.Refined[zio.NonEmptyChunk[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/collection$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/collection$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/collection$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/collection$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/collection$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/collection$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/collection$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/collection$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/collection$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/collection$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/collection$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/collection$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/collection$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/collection$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/collection$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/collection$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/collection$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/collection$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/collection$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.refined.CollectionInstances", "trait" : "zio\/test\/refined\/CollectionInstances.html", "kind" : "trait", "members_trait" : [{"label" : "vectorSizeRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T], deriveGenSize: DeriveGen[Refined[Int, P]]): DeriveGen[Refined[Vector[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.vectorSizeRefinedDeriveGen", "link" : "zio\/test\/refined\/CollectionInstances.html#vectorSizeRefinedDeriveGen[T,P](implicitderiveGenT:zio.test.magnolia.DeriveGen[T],implicitderiveGenSize:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,P]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Vector[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "implicit def"}, {"label" : "listSizeRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T], deriveGenSize: DeriveGen[Refined[Int, P]]): DeriveGen[Refined[List[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.listSizeRefinedDeriveGen", "link" : "zio\/test\/refined\/CollectionInstances.html#listSizeRefinedDeriveGen[T,P](implicitderiveGenT:zio.test.magnolia.DeriveGen[T],implicitderiveGenSize:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,P]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[List[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "implicit def"}, {"label" : "sizedChunkRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T], deriveGenSize: DeriveGen[Refined[Int, P]]): DeriveGen[Refined[Chunk[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.sizedChunkRefinedDeriveGen", "link" : "zio\/test\/refined\/CollectionInstances.html#sizedChunkRefinedDeriveGen[T,P](implicitderiveGenT:zio.test.magnolia.DeriveGen[T],implicitderiveGenSize:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,P]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[zio.Chunk[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "implicit def"}, {"label" : "nonEmptyVectorRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T]): DeriveGen[Refined[Vector[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyVectorRefinedDeriveGen", "link" : "zio\/test\/refined\/CollectionInstances.html#nonEmptyVectorRefinedDeriveGen[T](implicitderiveGenT:zio.test.magnolia.DeriveGen[T]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Vector[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "implicit def"}, {"label" : "nonEmptyListRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T]): DeriveGen[Refined[List[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyListRefinedDeriveGen", "link" : "zio\/test\/refined\/CollectionInstances.html#nonEmptyListRefinedDeriveGen[T](implicitderiveGenT:zio.test.magnolia.DeriveGen[T]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[List[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "implicit def"}, {"label" : "nonEmptyChunkRefinedDeriveGen", "tail" : "(deriveGenT: DeriveGen[T]): DeriveGen[Refined[NonEmptyChunk[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyChunkRefinedDeriveGen", "link" : "zio\/test\/refined\/CollectionInstances.html#nonEmptyChunkRefinedDeriveGen[C,T](implicitderiveGenT:zio.test.magnolia.DeriveGen[T]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[zio.NonEmptyChunk[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "implicit def"}, {"label" : "vectorSizeRefinedGen", "tail" : "(genT: Gen[R, T], sizeGen: Gen[R, Refined[Int, P]]): Gen[R, Refined[Vector[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.vectorSizeRefinedGen", "link" : "zio\/test\/refined\/CollectionInstances.html#vectorSizeRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T,P](implicitgenT:zio.test.Gen[R,T],implicitsizeGen:zio.test.Gen[R,eu.timepit.refined.api.Refined[Int,P]]):zio.test.Gen[R,eu.timepit.refined.api.Refined[Vector[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "def"}, {"label" : "listSizeRefinedGen", "tail" : "(genT: Gen[R, T], sizeGen: Gen[R, Refined[Int, P]]): Gen[R, Refined[List[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.listSizeRefinedGen", "link" : "zio\/test\/refined\/CollectionInstances.html#listSizeRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T,P](implicitgenT:zio.test.Gen[R,T],implicitsizeGen:zio.test.Gen[R,eu.timepit.refined.api.Refined[Int,P]]):zio.test.Gen[R,eu.timepit.refined.api.Refined[List[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "def"}, {"label" : "sizedChunkRefinedGen", "tail" : "(genT: Gen[R, T], sizeGen: Gen[R, Refined[Int, P]]): Gen[R, Refined[Chunk[T], Size[P]]]", "member" : "zio.test.refined.CollectionInstances.sizedChunkRefinedGen", "link" : "zio\/test\/refined\/CollectionInstances.html#sizedChunkRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T,P](implicitgenT:zio.test.Gen[R,T],implicitsizeGen:zio.test.Gen[R,eu.timepit.refined.api.Refined[Int,P]]):zio.test.Gen[R,eu.timepit.refined.api.Refined[zio.Chunk[T],eu.timepit.refined.collection.Size[P]]]", "kind" : "def"}, {"label" : "nonEmptyVectorRefinedGen", "tail" : "(genT: Gen[R, T]): Gen[R, Refined[Vector[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyVectorRefinedGen", "link" : "zio\/test\/refined\/CollectionInstances.html#nonEmptyVectorRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T](implicitgenT:zio.test.Gen[R,T]):zio.test.Gen[R,eu.timepit.refined.api.Refined[Vector[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "def"}, {"label" : "nonEmptyListRefinedGen", "tail" : "(genT: Gen[R, T]): Gen[R, Refined[List[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyListRefinedGen", "link" : "zio\/test\/refined\/CollectionInstances.html#nonEmptyListRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T](implicitgenT:zio.test.Gen[R,T]):zio.test.Gen[R,eu.timepit.refined.api.Refined[List[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "def"}, {"label" : "nonEmptyChunkRefinedGen", "tail" : "(genT: Gen[R, T]): Gen[R, Refined[NonEmptyChunk[T], NonEmpty]]", "member" : "zio.test.refined.CollectionInstances.nonEmptyChunkRefinedGen", "link" : "zio\/test\/refined\/CollectionInstances.html#nonEmptyChunkRefinedGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],T](implicitgenT:zio.test.Gen[R,T]):zio.test.Gen[R,eu.timepit.refined.api.Refined[zio.NonEmptyChunk[T],eu.timepit.refined.collection.NonEmpty]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/CollectionInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/CollectionInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/CollectionInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/CollectionInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/CollectionInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/CollectionInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/CollectionInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/CollectionInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/CollectionInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/CollectionInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/CollectionInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/CollectionInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/CollectionInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/CollectionInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/CollectionInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/CollectionInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/CollectionInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/CollectionInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/CollectionInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.refined.generic", "shortDescription" : "", "object" : "zio\/test\/refined\/generic$.html", "members_object" : [{"label" : "equalArbitrary", "tail" : "(wu: Aux[U]): DeriveGen[Refined[T, Equal[U]]]", "member" : "zio.test.refined.GenericInstances.equalArbitrary", "link" : "zio\/test\/refined\/generic$.html#equalArbitrary[T,U<:T](implicitwu:shapeless.Witness.Aux[U]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[T,eu.timepit.refined.generic.Equal[U]]]", "kind" : "implicit def"}, {"label" : "equalArbitraryGen", "tail" : "(wu: Aux[U]): Gen[Has[Random] with Has[Sized], Refined[T, Equal[U]]]", "member" : "zio.test.refined.GenericInstances.equalArbitraryGen", "link" : "zio\/test\/refined\/generic$.html#equalArbitraryGen[T,U<:T](implicitwu:shapeless.Witness.Aux[U]):zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.api.Refined[T,eu.timepit.refined.generic.Equal[U]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/generic$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/generic$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/generic$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/generic$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/generic$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/generic$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/generic$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/generic$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/generic$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/generic$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/generic$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/generic$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/generic$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/generic$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/generic$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/generic$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/generic$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/generic$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/generic$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.refined.GenericInstances", "trait" : "zio\/test\/refined\/GenericInstances.html", "kind" : "trait", "members_trait" : [{"label" : "equalArbitrary", "tail" : "(wu: Aux[U]): DeriveGen[Refined[T, Equal[U]]]", "member" : "zio.test.refined.GenericInstances.equalArbitrary", "link" : "zio\/test\/refined\/GenericInstances.html#equalArbitrary[T,U<:T](implicitwu:shapeless.Witness.Aux[U]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[T,eu.timepit.refined.generic.Equal[U]]]", "kind" : "implicit def"}, {"label" : "equalArbitraryGen", "tail" : "(wu: Aux[U]): Gen[Has[Random] with Has[Sized], Refined[T, Equal[U]]]", "member" : "zio.test.refined.GenericInstances.equalArbitraryGen", "link" : "zio\/test\/refined\/GenericInstances.html#equalArbitraryGen[T,U<:T](implicitwu:shapeless.Witness.Aux[U]):zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],eu.timepit.refined.api.Refined[T,eu.timepit.refined.generic.Equal[U]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/GenericInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/GenericInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/GenericInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/GenericInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/GenericInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/GenericInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/GenericInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/GenericInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/GenericInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/GenericInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/GenericInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/GenericInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/GenericInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/GenericInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/GenericInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/GenericInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/GenericInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/GenericInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/GenericInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.refined.numeric", "shortDescription" : "", "object" : "zio\/test\/refined\/numeric$.html", "members_object" : [{"label" : "doubleLessThan", "tail" : "(wn: WitnessAs[N, Double]): DeriveGen[Refined[Double, Less[N]]]", "member" : "zio.test.refined.NumericInstances.doubleLessThan", "link" : "zio\/test\/refined\/numeric$.html#doubleLessThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Double]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Double,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "byteLessThan", "tail" : "(wn: WitnessAs[N, Byte]): DeriveGen[Refined[Byte, Less[N]]]", "member" : "zio.test.refined.NumericInstances.byteLessThan", "link" : "zio\/test\/refined\/numeric$.html#byteLessThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Byte]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Byte,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "shortLessThan", "tail" : "(wn: WitnessAs[N, Short]): DeriveGen[Refined[Short, Less[N]]]", "member" : "zio.test.refined.NumericInstances.shortLessThan", "link" : "zio\/test\/refined\/numeric$.html#shortLessThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Short]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Short,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "longLessThan", "tail" : "(wn: WitnessAs[N, Long]): DeriveGen[Refined[Long, Less[N]]]", "member" : "zio.test.refined.NumericInstances.longLessThan", "link" : "zio\/test\/refined\/numeric$.html#longLessThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Long]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Long,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "intLessThan", "tail" : "(wn: WitnessAs[N, Int]): DeriveGen[Refined[Int, Less[N]]]", "member" : "zio.test.refined.NumericInstances.intLessThan", "link" : "zio\/test\/refined\/numeric$.html#intLessThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Int]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "doubleGreaterThan", "tail" : "(wn: WitnessAs[N, Double]): DeriveGen[Refined[Double, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.doubleGreaterThan", "link" : "zio\/test\/refined\/numeric$.html#doubleGreaterThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Double]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Double,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "byteGreaterThan", "tail" : "(wn: WitnessAs[N, Byte]): DeriveGen[Refined[Byte, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.byteGreaterThan", "link" : "zio\/test\/refined\/numeric$.html#byteGreaterThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Byte]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Byte,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "shortGreaterThan", "tail" : "(wn: WitnessAs[N, Short]): DeriveGen[Refined[Short, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.shortGreaterThan", "link" : "zio\/test\/refined\/numeric$.html#shortGreaterThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Short]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Short,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "longGreaterThan", "tail" : "(wn: WitnessAs[N, Long]): DeriveGen[Refined[Long, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.longGreaterThan", "link" : "zio\/test\/refined\/numeric$.html#longGreaterThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Long]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Long,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "intGreaterThan", "tail" : "(wn: WitnessAs[N, Int]): DeriveGen[Refined[Int, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.intGreaterThan", "link" : "zio\/test\/refined\/numeric$.html#intGreaterThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Int]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "doubleLessThanGen", "tail" : "(wn: WitnessAs[N, Double]): Gen[Has[Random], Refined[Double, Less[N]]]", "member" : "zio.test.refined.NumericInstances.doubleLessThanGen", "link" : "zio\/test\/refined\/numeric$.html#doubleLessThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Double]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Double,eu.timepit.refined.numeric.Less[N]]]", "kind" : "def"}, {"label" : "byteLessThanGen", "tail" : "(wn: WitnessAs[N, Byte]): Gen[Has[Random], Refined[Byte, Less[N]]]", "member" : "zio.test.refined.NumericInstances.byteLessThanGen", "link" : "zio\/test\/refined\/numeric$.html#byteLessThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Byte]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Byte,eu.timepit.refined.numeric.Less[N]]]", "kind" : "def"}, {"label" : "shortLessThanGen", "tail" : "(wn: WitnessAs[N, Short]): Gen[Has[Random], Refined[Short, Less[N]]]", "member" : "zio.test.refined.NumericInstances.shortLessThanGen", "link" : "zio\/test\/refined\/numeric$.html#shortLessThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Short]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Short,eu.timepit.refined.numeric.Less[N]]]", "kind" : "def"}, {"label" : "longLessThanGen", "tail" : "(wn: WitnessAs[N, Long]): Gen[Has[Random], Refined[Long, Less[N]]]", "member" : "zio.test.refined.NumericInstances.longLessThanGen", "link" : "zio\/test\/refined\/numeric$.html#longLessThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Long]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Long,eu.timepit.refined.numeric.Less[N]]]", "kind" : "def"}, {"label" : "intLessThanGen", "tail" : "(wn: WitnessAs[N, Int]): Gen[Has[Random], Refined[Int, Less[N]]]", "member" : "zio.test.refined.NumericInstances.intLessThanGen", "link" : "zio\/test\/refined\/numeric$.html#intLessThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Int]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Less[N]]]", "kind" : "def"}, {"label" : "doubleGreaterThanGen", "tail" : "(wn: WitnessAs[N, Double]): Gen[Has[Random], Refined[Double, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.doubleGreaterThanGen", "link" : "zio\/test\/refined\/numeric$.html#doubleGreaterThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Double]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Double,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "def"}, {"label" : "byteGreaterThanGen", "tail" : "(wn: WitnessAs[N, Byte]): Gen[Has[Random], Refined[Byte, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.byteGreaterThanGen", "link" : "zio\/test\/refined\/numeric$.html#byteGreaterThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Byte]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Byte,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "def"}, {"label" : "shortGreaterThanGen", "tail" : "(wn: WitnessAs[N, Short]): Gen[Has[Random], Refined[Short, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.shortGreaterThanGen", "link" : "zio\/test\/refined\/numeric$.html#shortGreaterThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Short]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Short,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "def"}, {"label" : "longGreaterThanGen", "tail" : "(wn: WitnessAs[N, Long]): Gen[Has[Random], Refined[Long, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.longGreaterThanGen", "link" : "zio\/test\/refined\/numeric$.html#longGreaterThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Long]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Long,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "def"}, {"label" : "intGreaterThanGen", "tail" : "(wn: WitnessAs[N, Int]): Gen[Has[Random], Refined[Int, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.intGreaterThanGen", "link" : "zio\/test\/refined\/numeric$.html#intGreaterThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Int]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/numeric$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/numeric$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/numeric$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/numeric$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/numeric$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/numeric$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/numeric$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/numeric$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/numeric$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/numeric$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/numeric$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/numeric$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/numeric$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/numeric$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/numeric$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/numeric$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/numeric$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/numeric$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/numeric$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.refined.NumericInstances", "trait" : "zio\/test\/refined\/NumericInstances.html", "kind" : "trait", "members_trait" : [{"label" : "doubleLessThan", "tail" : "(wn: WitnessAs[N, Double]): DeriveGen[Refined[Double, Less[N]]]", "member" : "zio.test.refined.NumericInstances.doubleLessThan", "link" : "zio\/test\/refined\/NumericInstances.html#doubleLessThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Double]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Double,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "byteLessThan", "tail" : "(wn: WitnessAs[N, Byte]): DeriveGen[Refined[Byte, Less[N]]]", "member" : "zio.test.refined.NumericInstances.byteLessThan", "link" : "zio\/test\/refined\/NumericInstances.html#byteLessThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Byte]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Byte,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "shortLessThan", "tail" : "(wn: WitnessAs[N, Short]): DeriveGen[Refined[Short, Less[N]]]", "member" : "zio.test.refined.NumericInstances.shortLessThan", "link" : "zio\/test\/refined\/NumericInstances.html#shortLessThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Short]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Short,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "longLessThan", "tail" : "(wn: WitnessAs[N, Long]): DeriveGen[Refined[Long, Less[N]]]", "member" : "zio.test.refined.NumericInstances.longLessThan", "link" : "zio\/test\/refined\/NumericInstances.html#longLessThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Long]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Long,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "intLessThan", "tail" : "(wn: WitnessAs[N, Int]): DeriveGen[Refined[Int, Less[N]]]", "member" : "zio.test.refined.NumericInstances.intLessThan", "link" : "zio\/test\/refined\/NumericInstances.html#intLessThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Int]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Less[N]]]", "kind" : "implicit def"}, {"label" : "doubleGreaterThan", "tail" : "(wn: WitnessAs[N, Double]): DeriveGen[Refined[Double, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.doubleGreaterThan", "link" : "zio\/test\/refined\/NumericInstances.html#doubleGreaterThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Double]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Double,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "byteGreaterThan", "tail" : "(wn: WitnessAs[N, Byte]): DeriveGen[Refined[Byte, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.byteGreaterThan", "link" : "zio\/test\/refined\/NumericInstances.html#byteGreaterThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Byte]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Byte,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "shortGreaterThan", "tail" : "(wn: WitnessAs[N, Short]): DeriveGen[Refined[Short, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.shortGreaterThan", "link" : "zio\/test\/refined\/NumericInstances.html#shortGreaterThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Short]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Short,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "longGreaterThan", "tail" : "(wn: WitnessAs[N, Long]): DeriveGen[Refined[Long, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.longGreaterThan", "link" : "zio\/test\/refined\/NumericInstances.html#longGreaterThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Long]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Long,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "intGreaterThan", "tail" : "(wn: WitnessAs[N, Int]): DeriveGen[Refined[Int, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.intGreaterThan", "link" : "zio\/test\/refined\/NumericInstances.html#intGreaterThan[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Int]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "implicit def"}, {"label" : "doubleLessThanGen", "tail" : "(wn: WitnessAs[N, Double]): Gen[Has[Random], Refined[Double, Less[N]]]", "member" : "zio.test.refined.NumericInstances.doubleLessThanGen", "link" : "zio\/test\/refined\/NumericInstances.html#doubleLessThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Double]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Double,eu.timepit.refined.numeric.Less[N]]]", "kind" : "def"}, {"label" : "byteLessThanGen", "tail" : "(wn: WitnessAs[N, Byte]): Gen[Has[Random], Refined[Byte, Less[N]]]", "member" : "zio.test.refined.NumericInstances.byteLessThanGen", "link" : "zio\/test\/refined\/NumericInstances.html#byteLessThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Byte]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Byte,eu.timepit.refined.numeric.Less[N]]]", "kind" : "def"}, {"label" : "shortLessThanGen", "tail" : "(wn: WitnessAs[N, Short]): Gen[Has[Random], Refined[Short, Less[N]]]", "member" : "zio.test.refined.NumericInstances.shortLessThanGen", "link" : "zio\/test\/refined\/NumericInstances.html#shortLessThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Short]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Short,eu.timepit.refined.numeric.Less[N]]]", "kind" : "def"}, {"label" : "longLessThanGen", "tail" : "(wn: WitnessAs[N, Long]): Gen[Has[Random], Refined[Long, Less[N]]]", "member" : "zio.test.refined.NumericInstances.longLessThanGen", "link" : "zio\/test\/refined\/NumericInstances.html#longLessThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Long]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Long,eu.timepit.refined.numeric.Less[N]]]", "kind" : "def"}, {"label" : "intLessThanGen", "tail" : "(wn: WitnessAs[N, Int]): Gen[Has[Random], Refined[Int, Less[N]]]", "member" : "zio.test.refined.NumericInstances.intLessThanGen", "link" : "zio\/test\/refined\/NumericInstances.html#intLessThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Int]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Less[N]]]", "kind" : "def"}, {"label" : "doubleGreaterThanGen", "tail" : "(wn: WitnessAs[N, Double]): Gen[Has[Random], Refined[Double, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.doubleGreaterThanGen", "link" : "zio\/test\/refined\/NumericInstances.html#doubleGreaterThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Double]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Double,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "def"}, {"label" : "byteGreaterThanGen", "tail" : "(wn: WitnessAs[N, Byte]): Gen[Has[Random], Refined[Byte, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.byteGreaterThanGen", "link" : "zio\/test\/refined\/NumericInstances.html#byteGreaterThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Byte]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Byte,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "def"}, {"label" : "shortGreaterThanGen", "tail" : "(wn: WitnessAs[N, Short]): Gen[Has[Random], Refined[Short, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.shortGreaterThanGen", "link" : "zio\/test\/refined\/NumericInstances.html#shortGreaterThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Short]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Short,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "def"}, {"label" : "longGreaterThanGen", "tail" : "(wn: WitnessAs[N, Long]): Gen[Has[Random], Refined[Long, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.longGreaterThanGen", "link" : "zio\/test\/refined\/NumericInstances.html#longGreaterThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Long]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Long,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "def"}, {"label" : "intGreaterThanGen", "tail" : "(wn: WitnessAs[N, Int]): Gen[Has[Random], Refined[Int, Greater[N]]]", "member" : "zio.test.refined.NumericInstances.intGreaterThanGen", "link" : "zio\/test\/refined\/NumericInstances.html#intGreaterThanGen[N](implicitwn:eu.timepit.refined.internal.WitnessAs[N,Int]):zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Greater[N]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/NumericInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/NumericInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/NumericInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/NumericInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/NumericInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/NumericInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/NumericInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/NumericInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/NumericInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/NumericInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/NumericInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/NumericInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/NumericInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/NumericInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/NumericInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/NumericInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/NumericInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/NumericInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/NumericInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.refined.string", "shortDescription" : "", "object" : "zio\/test\/refined\/string$.html", "members_object" : [{"label" : "startsWithStringNDeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char], deriveGenSize: DeriveGen[Refined[Int, P]]): DeriveGen[Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithStringNDeriveGen", "link" : "zio\/test\/refined\/string$.html#startsWithStringNDeriveGen[S<:String,P](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char],implicitderiveGenSize:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,P]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "implicit def"}, {"label" : "endsWithStringNDeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char], deriveGenSize: DeriveGen[Refined[Int, P]]): DeriveGen[Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithStringNDeriveGen", "link" : "zio\/test\/refined\/string$.html#endsWithStringNDeriveGen[S<:String,P](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char],implicitderiveGenSize:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,P]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "implicit def"}, {"label" : "startsWithString1DeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char]): DeriveGen[Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithString1DeriveGen", "link" : "zio\/test\/refined\/string$.html#startsWithString1DeriveGen[S<:String](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "implicit def"}, {"label" : "endsWithString1DeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char]): DeriveGen[Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithString1DeriveGen", "link" : "zio\/test\/refined\/string$.html#endsWithString1DeriveGen[S<:String](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "implicit def"}, {"label" : "startsWithStringDeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char]): DeriveGen[Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithStringDeriveGen", "link" : "zio\/test\/refined\/string$.html#startsWithStringDeriveGen[S<:String](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "implicit def"}, {"label" : "endsWithStringDeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char]): DeriveGen[Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithStringDeriveGen", "link" : "zio\/test\/refined\/string$.html#endsWithStringDeriveGen[S<:String](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "implicit def"}, {"label" : "uuidStringDeriveGen", "tail" : ": DeriveGen[Refined[String, Uuid]]", "member" : "zio.test.refined.StringInstances.uuidStringDeriveGen", "link" : "zio\/test\/refined\/string$.html#uuidStringDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.Uuid]]", "kind" : "implicit val"}, {"label" : "uuidStringGen", "tail" : ": Gen[Has[Random], Refined[String, Uuid]]", "member" : "zio.test.refined.StringInstances.uuidStringGen", "link" : "zio\/test\/refined\/string$.html#uuidStringGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.Uuid]]", "kind" : "val"}, {"label" : "startsWithStringNGen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char], sizeGen: Gen[R, Refined[Int, P]]): Gen[R, Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithStringNGen", "link" : "zio\/test\/refined\/string$.html#startsWithStringNGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String,P](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char],implicitsizeGen:zio.test.Gen[R,eu.timepit.refined.api.Refined[Int,P]]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "def"}, {"label" : "startsWithString1Gen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char]): Gen[R, Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithString1Gen", "link" : "zio\/test\/refined\/string$.html#startsWithString1Gen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "def"}, {"label" : "startsWithStringGen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char]): Gen[R, Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithStringGen", "link" : "zio\/test\/refined\/string$.html#startsWithStringGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "def"}, {"label" : "endsWithStringNGen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char], sizeGen: Gen[R, Refined[Int, P]]): Gen[R, Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithStringNGen", "link" : "zio\/test\/refined\/string$.html#endsWithStringNGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String,P](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char],implicitsizeGen:zio.test.Gen[R,eu.timepit.refined.api.Refined[Int,P]]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "def"}, {"label" : "endsWithString1Gen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char]): Gen[R, Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithString1Gen", "link" : "zio\/test\/refined\/string$.html#endsWithString1Gen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "def"}, {"label" : "endsWithStringGen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char]): Gen[R, Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithStringGen", "link" : "zio\/test\/refined\/string$.html#endsWithStringGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/string$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/string$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/string$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/string$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/string$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/string$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/string$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/string$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/string$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/string$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/string$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/string$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/string$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/string$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/string$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/string$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/string$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/string$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/string$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.refined.StringInstances", "trait" : "zio\/test\/refined\/StringInstances.html", "kind" : "trait", "members_trait" : [{"label" : "startsWithStringNDeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char], deriveGenSize: DeriveGen[Refined[Int, P]]): DeriveGen[Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithStringNDeriveGen", "link" : "zio\/test\/refined\/StringInstances.html#startsWithStringNDeriveGen[S<:String,P](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char],implicitderiveGenSize:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,P]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "implicit def"}, {"label" : "endsWithStringNDeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char], deriveGenSize: DeriveGen[Refined[Int, P]]): DeriveGen[Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithStringNDeriveGen", "link" : "zio\/test\/refined\/StringInstances.html#endsWithStringNDeriveGen[S<:String,P](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char],implicitderiveGenSize:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[Int,P]]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "implicit def"}, {"label" : "startsWithString1DeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char]): DeriveGen[Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithString1DeriveGen", "link" : "zio\/test\/refined\/StringInstances.html#startsWithString1DeriveGen[S<:String](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "implicit def"}, {"label" : "endsWithString1DeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char]): DeriveGen[Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithString1DeriveGen", "link" : "zio\/test\/refined\/StringInstances.html#endsWithString1DeriveGen[S<:String](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "implicit def"}, {"label" : "startsWithStringDeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char]): DeriveGen[Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithStringDeriveGen", "link" : "zio\/test\/refined\/StringInstances.html#startsWithStringDeriveGen[S<:String](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "implicit def"}, {"label" : "endsWithStringDeriveGen", "tail" : "(ws: Aux[S], deriveGenT: DeriveGen[Char]): DeriveGen[Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithStringDeriveGen", "link" : "zio\/test\/refined\/StringInstances.html#endsWithStringDeriveGen[S<:String](implicitws:shapeless.Witness.Aux[S],implicitderiveGenT:zio.test.magnolia.DeriveGen[Char]):zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "implicit def"}, {"label" : "uuidStringDeriveGen", "tail" : ": DeriveGen[Refined[String, Uuid]]", "member" : "zio.test.refined.StringInstances.uuidStringDeriveGen", "link" : "zio\/test\/refined\/StringInstances.html#uuidStringDeriveGen:zio.test.magnolia.DeriveGen[eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.Uuid]]", "kind" : "implicit val"}, {"label" : "uuidStringGen", "tail" : ": Gen[Has[Random], Refined[String, Uuid]]", "member" : "zio.test.refined.StringInstances.uuidStringGen", "link" : "zio\/test\/refined\/StringInstances.html#uuidStringGen:zio.test.Gen[zio.Has[zio.Random],eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.Uuid]]", "kind" : "val"}, {"label" : "startsWithStringNGen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char], sizeGen: Gen[R, Refined[Int, P]]): Gen[R, Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithStringNGen", "link" : "zio\/test\/refined\/StringInstances.html#startsWithStringNGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String,P](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char],implicitsizeGen:zio.test.Gen[R,eu.timepit.refined.api.Refined[Int,P]]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "def"}, {"label" : "startsWithString1Gen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char]): Gen[R, Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithString1Gen", "link" : "zio\/test\/refined\/StringInstances.html#startsWithString1Gen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "def"}, {"label" : "startsWithStringGen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char]): Gen[R, Refined[String, StartsWith[S]]]", "member" : "zio.test.refined.StringInstances.startsWithStringGen", "link" : "zio\/test\/refined\/StringInstances.html#startsWithStringGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.StartsWith[S]]]", "kind" : "def"}, {"label" : "endsWithStringNGen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char], sizeGen: Gen[R, Refined[Int, P]]): Gen[R, Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithStringNGen", "link" : "zio\/test\/refined\/StringInstances.html#endsWithStringNGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String,P](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char],implicitsizeGen:zio.test.Gen[R,eu.timepit.refined.api.Refined[Int,P]]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "def"}, {"label" : "endsWithString1Gen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char]): Gen[R, Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithString1Gen", "link" : "zio\/test\/refined\/StringInstances.html#endsWithString1Gen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "def"}, {"label" : "endsWithStringGen", "tail" : "(ws: Aux[S], charGen: Gen[R, Char]): Gen[R, Refined[String, EndsWith[S]]]", "member" : "zio.test.refined.StringInstances.endsWithStringGen", "link" : "zio\/test\/refined\/StringInstances.html#endsWithStringGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S<:String](implicitws:shapeless.Witness.Aux[S],implicitcharGen:zio.test.Gen[R,Char]):zio.test.Gen[R,eu.timepit.refined.api.Refined[String,eu.timepit.refined.string.EndsWith[S]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/refined\/StringInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/refined\/StringInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/refined\/StringInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/refined\/StringInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/refined\/StringInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/refined\/StringInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/refined\/StringInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/StringInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/StringInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/refined\/StringInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/refined\/StringInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/refined\/StringInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/refined\/StringInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/refined\/StringInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/refined\/StringInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/refined\/StringInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/refined\/StringInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/refined\/StringInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/refined\/StringInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "zio.test.internal" : [{"name" : "zio.test.internal.LowPriOptionalImplicit", "trait" : "zio\/test\/internal\/LowPriOptionalImplicit.html", "kind" : "trait", "members_trait" : [{"label" : "none", "tail" : "(): OptionalImplicit[A]", "member" : "zio.test.internal.LowPriOptionalImplicit.none", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#none[A]:zio.test.internal.OptionalImplicit[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/internal\/LowPriOptionalImplicit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.internal.OptionalImplicit", "object" : "zio\/test\/internal\/OptionalImplicit$.html", "members_object" : [{"label" : "some", "tail" : "(instance: A): OptionalImplicit[A]", "member" : "zio.test.internal.OptionalImplicit.some", "link" : "zio\/test\/internal\/OptionalImplicit$.html#some[A](implicitinstance:A):zio.test.internal.OptionalImplicit[A]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(arg0: OptionalImplicit[A]): Option[A]", "member" : "zio.test.internal.OptionalImplicit.apply", "link" : "zio\/test\/internal\/OptionalImplicit$.html#apply[A](implicitevidence$1:zio.test.internal.OptionalImplicit[A]):Option[A]", "kind" : "def"}, {"label" : "none", "tail" : "(): OptionalImplicit[A]", "member" : "zio.test.internal.LowPriOptionalImplicit.none", "link" : "zio\/test\/internal\/OptionalImplicit$.html#none[A]:zio.test.internal.OptionalImplicit[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/internal\/OptionalImplicit$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/internal\/OptionalImplicit$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/internal\/OptionalImplicit$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/internal\/OptionalImplicit$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/internal\/OptionalImplicit$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/internal\/OptionalImplicit$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/internal\/OptionalImplicit$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/OptionalImplicit$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/OptionalImplicit$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/OptionalImplicit$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/internal\/OptionalImplicit$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/internal\/OptionalImplicit$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/internal\/OptionalImplicit$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/internal\/OptionalImplicit$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/internal\/OptionalImplicit$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/internal\/OptionalImplicit$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/internal\/OptionalImplicit$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/internal\/OptionalImplicit$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/internal\/OptionalImplicit$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/internal\/OptionalImplicit.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/internal\/OptionalImplicit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/internal\/OptionalImplicit.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/internal\/OptionalImplicit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/internal\/OptionalImplicit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/internal\/OptionalImplicit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/internal\/OptionalImplicit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/internal\/OptionalImplicit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/OptionalImplicit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/OptionalImplicit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/OptionalImplicit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/internal\/OptionalImplicit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/internal\/OptionalImplicit.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/internal\/OptionalImplicit.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/internal\/OptionalImplicit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/internal\/OptionalImplicit.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/internal\/OptionalImplicit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/internal\/OptionalImplicit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/internal\/OptionalImplicit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/internal\/OptionalImplicit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "value", "tail" : "(): Option[A]", "member" : "zio.test.internal.OptionalImplicit.value", "link" : "zio\/test\/internal\/OptionalImplicit.html#value:Option[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.test.internal.SmartAssertions", "shortDescription" : "", "object" : "zio\/test\/internal\/SmartAssertions$.html", "members_object" : [{"label" : "is", "tail" : "(CB: ClassTag[B]): Arrow[A, Boolean]", "member" : "zio.test.internal.SmartAssertions.is", "link" : "zio\/test\/internal\/SmartAssertions$.html#is[A,B](implicitCB:scala.reflect.ClassTag[B]):zio.test.Arrow[A,Boolean]", "kind" : "def"}, {"label" : "as", "tail" : "(CB: ClassTag[B]): Arrow[A, B]", "member" : "zio.test.internal.SmartAssertions.as", "link" : "zio\/test\/internal\/SmartAssertions$.html#as[A,B](implicitCB:scala.reflect.ClassTag[B]):zio.test.Arrow[A,B]", "kind" : "def"}, {"label" : "throws", "tail" : ": Arrow[Any, Throwable]", "member" : "zio.test.internal.SmartAssertions.throws", "link" : "zio\/test\/internal\/SmartAssertions$.html#throws:zio.test.Arrow[Any,Throwable]", "kind" : "val"}, {"label" : "equalTo", "tail" : "(that: A)(diff: OptionalImplicit[Diff[A]]): Arrow[A, Boolean]", "member" : "zio.test.internal.SmartAssertions.equalTo", "link" : "zio\/test\/internal\/SmartAssertions$.html#equalTo[A](that:A)(implicitdiff:zio.test.internal.OptionalImplicit[zio.test.diff.Diff[A]]):zio.test.Arrow[A,Boolean]", "kind" : "def"}, {"label" : "lessThanOrEqualTo", "tail" : "(that: A)(ordering: Ordering[A]): Arrow[A, Boolean]", "member" : "zio.test.internal.SmartAssertions.lessThanOrEqualTo", "link" : "zio\/test\/internal\/SmartAssertions$.html#lessThanOrEqualTo[A](that:A)(implicitordering:Ordering[A]):zio.test.Arrow[A,Boolean]", "kind" : "def"}, {"label" : "lessThan", "tail" : "(that: A)(ordering: Ordering[A]): Arrow[A, Boolean]", "member" : "zio.test.internal.SmartAssertions.lessThan", "link" : "zio\/test\/internal\/SmartAssertions$.html#lessThan[A](that:A)(implicitordering:Ordering[A]):zio.test.Arrow[A,Boolean]", "kind" : "def"}, {"label" : "greaterThanOrEqualTo", "tail" : "(that: A)(ordering: Ordering[A]): Arrow[A, Boolean]", "member" : "zio.test.internal.SmartAssertions.greaterThanOrEqualTo", "link" : "zio\/test\/internal\/SmartAssertions$.html#greaterThanOrEqualTo[A](that:A)(implicitordering:Ordering[A]):zio.test.Arrow[A,Boolean]", "kind" : "def"}, {"label" : "greaterThan", "tail" : "(that: A)(ordering: Ordering[A]): Arrow[A, Boolean]", "member" : "zio.test.internal.SmartAssertions.greaterThan", "link" : "zio\/test\/internal\/SmartAssertions$.html#greaterThan[A](that:A)(implicitordering:Ordering[A]):zio.test.Arrow[A,Boolean]", "kind" : "def"}, {"label" : "isOdd", "tail" : "(integral: Integral[A]): Arrow[A, Boolean]", "member" : "zio.test.internal.SmartAssertions.isOdd", "link" : "zio\/test\/internal\/SmartAssertions$.html#isOdd[A](implicitintegral:Integral[A]):zio.test.Arrow[A,Boolean]", "kind" : "def"}, {"label" : "isEven", "tail" : "(integral: Integral[A]): Arrow[A, Boolean]", "member" : "zio.test.internal.SmartAssertions.isEven", "link" : "zio\/test\/internal\/SmartAssertions$.html#isEven[A](implicitintegral:Integral[A]):zio.test.Arrow[A,Boolean]", "kind" : "def"}, {"label" : "head", "tail" : "(): Arrow[Iterable[A], A]", "member" : "zio.test.internal.SmartAssertions.head", "link" : "zio\/test\/internal\/SmartAssertions$.html#head[A]:zio.test.Arrow[Iterable[A],A]", "kind" : "def"}, {"label" : "hasKey", "tail" : "(key: K): Arrow[Map[K, V], V]", "member" : "zio.test.internal.SmartAssertions.hasKey", "link" : "zio\/test\/internal\/SmartAssertions$.html#hasKey[K,V](key:K):zio.test.Arrow[Map[K,V],V]", "kind" : "def"}, {"label" : "hasAt", "tail" : "(index: Int): Arrow[Seq[A], A]", "member" : "zio.test.internal.SmartAssertions.hasAt", "link" : "zio\/test\/internal\/SmartAssertions$.html#hasAt[A](index:Int):zio.test.Arrow[Seq[A],A]", "kind" : "def"}, {"label" : "containsString", "tail" : "(value: String): Arrow[String, Boolean]", "member" : "zio.test.internal.SmartAssertions.containsString", "link" : "zio\/test\/internal\/SmartAssertions$.html#containsString(value:String):zio.test.Arrow[String,Boolean]", "kind" : "def"}, {"label" : "containsOption", "tail" : "(value: A): Arrow[Option[A], Boolean]", "member" : "zio.test.internal.SmartAssertions.containsOption", "link" : "zio\/test\/internal\/SmartAssertions$.html#containsOption[A](value:A):zio.test.Arrow[Option[A],Boolean]", "kind" : "def"}, {"label" : "containsSeq", "tail" : "(value: A): Arrow[Seq[A], Boolean]", "member" : "zio.test.internal.SmartAssertions.containsSeq", "link" : "zio\/test\/internal\/SmartAssertions$.html#containsSeq[A](value:A):zio.test.Arrow[Seq[A],Boolean]", "kind" : "def"}, {"label" : "existsIterable", "tail" : "(predicate: Arrow[A, Boolean]): Arrow[Iterable[A], Boolean]", "member" : "zio.test.internal.SmartAssertions.existsIterable", "link" : "zio\/test\/internal\/SmartAssertions$.html#existsIterable[A](predicate:zio.test.Arrow[A,Boolean]):zio.test.Arrow[Iterable[A],Boolean]", "kind" : "def"}, {"label" : "forallIterable", "tail" : "(predicate: Arrow[A, Boolean]): Arrow[Iterable[A], Boolean]", "member" : "zio.test.internal.SmartAssertions.forallIterable", "link" : "zio\/test\/internal\/SmartAssertions$.html#forallIterable[A](predicate:zio.test.Arrow[A,Boolean]):zio.test.Arrow[Iterable[A],Boolean]", "kind" : "def"}, {"label" : "isDefinedOption", "tail" : "(): Arrow[Option[A], Boolean]", "member" : "zio.test.internal.SmartAssertions.isDefinedOption", "link" : "zio\/test\/internal\/SmartAssertions$.html#isDefinedOption[A]:zio.test.Arrow[Option[A],Boolean]", "kind" : "def"}, {"label" : "isEmptyOption", "tail" : "(): Arrow[Option[A], Boolean]", "member" : "zio.test.internal.SmartAssertions.isEmptyOption", "link" : "zio\/test\/internal\/SmartAssertions$.html#isEmptyOption[A]:zio.test.Arrow[Option[A],Boolean]", "kind" : "def"}, {"label" : "isNonEmptyIterable", "tail" : "(): Arrow[Iterable[A], Boolean]", "member" : "zio.test.internal.SmartAssertions.isNonEmptyIterable", "link" : "zio\/test\/internal\/SmartAssertions$.html#isNonEmptyIterable[A]:zio.test.Arrow[Iterable[A],Boolean]", "kind" : "def"}, {"label" : "isEmptyIterable", "tail" : "(): Arrow[Iterable[A], Boolean]", "member" : "zio.test.internal.SmartAssertions.isEmptyIterable", "link" : "zio\/test\/internal\/SmartAssertions$.html#isEmptyIterable[A]:zio.test.Arrow[Iterable[A],Boolean]", "kind" : "def"}, {"label" : "asLeft", "tail" : "(): Arrow[Either[A, _], A]", "member" : "zio.test.internal.SmartAssertions.asLeft", "link" : "zio\/test\/internal\/SmartAssertions$.html#asLeft[A]:zio.test.Arrow[Either[A,_],A]", "kind" : "def"}, {"label" : "asRight", "tail" : "(): Arrow[Either[_, A], A]", "member" : "zio.test.internal.SmartAssertions.asRight", "link" : "zio\/test\/internal\/SmartAssertions$.html#asRight[A]:zio.test.Arrow[Either[_,A],A]", "kind" : "def"}, {"label" : "isSome", "tail" : "(): Arrow[Option[A], A]", "member" : "zio.test.internal.SmartAssertions.isSome", "link" : "zio\/test\/internal\/SmartAssertions$.html#isSome[A]:zio.test.Arrow[Option[A],A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/internal\/SmartAssertions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/internal\/SmartAssertions$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/internal\/SmartAssertions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/internal\/SmartAssertions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/internal\/SmartAssertions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/internal\/SmartAssertions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/internal\/SmartAssertions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/SmartAssertions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/SmartAssertions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/SmartAssertions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/internal\/SmartAssertions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/internal\/SmartAssertions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/internal\/SmartAssertions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/internal\/SmartAssertions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/internal\/SmartAssertions$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/internal\/SmartAssertions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/internal\/SmartAssertions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/internal\/SmartAssertions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/internal\/SmartAssertions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "zio.test.laws" : [{"name" : "zio.test.laws.GenF", "object" : "zio\/test\/laws\/GenF$.html", "members_object" : [{"label" : "vector", "tail" : ": GenF[Has[Random] with Has[Sized], Vector]", "member" : "zio.test.laws.GenF.vector", "link" : "zio\/test\/laws\/GenF$.html#vector:zio.test.laws.GenF[zio.Has[zio.Random]withzio.Has[zio.test.Sized],Vector]", "kind" : "val"}, {"label" : "set", "tail" : ": GenF[Has[Random] with Has[Sized], Set]", "member" : "zio.test.laws.GenF.set", "link" : "zio\/test\/laws\/GenF$.html#set:zio.test.laws.GenF[zio.Has[zio.Random]withzio.Has[zio.test.Sized],Set]", "kind" : "val"}, {"label" : "option", "tail" : ": GenF[Has[Random], Option]", "member" : "zio.test.laws.GenF.option", "link" : "zio\/test\/laws\/GenF$.html#option:zio.test.laws.GenF[zio.Has[zio.Random],Option]", "kind" : "val"}, {"label" : "map", "tail" : "(a: Gen[R, A]): GenF[R, [+x]Map[A, x]]", "member" : "zio.test.laws.GenF.map", "link" : "zio\/test\/laws\/GenF$.html#map[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],A](a:zio.test.Gen[R,A]):zio.test.laws.GenF[R,[+x]scala.collection.immutable.Map[A,x]]", "kind" : "def"}, {"label" : "list", "tail" : ": GenF[Has[Random] with Has[Sized], List]", "member" : "zio.test.laws.GenF.list", "link" : "zio\/test\/laws\/GenF$.html#list:zio.test.laws.GenF[zio.Has[zio.Random]withzio.Has[zio.test.Sized],List]", "kind" : "val"}, {"label" : "either", "tail" : "(a: Gen[R, A]): GenF[R, [+x]Either[A, x]]", "member" : "zio.test.laws.GenF.either", "link" : "zio\/test\/laws\/GenF$.html#either[R<:zio.Has[zio.Random],A](a:zio.test.Gen[R,A]):zio.test.laws.GenF[R,[+x]scala.util.Either[A,x]]", "kind" : "def"}, {"label" : "chunk", "tail" : ": GenF[Has[Random] with Has[Sized], Chunk]", "member" : "zio.test.laws.GenF.chunk", "link" : "zio\/test\/laws\/GenF$.html#chunk:zio.test.laws.GenF[zio.Has[zio.Random]withzio.Has[zio.test.Sized],zio.Chunk]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/GenF$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/GenF$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/GenF$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/GenF$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/GenF$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/GenF$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/GenF$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/GenF$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/GenF$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/GenF$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/GenF$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/GenF$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/GenF$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/GenF$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/GenF$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/GenF$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/GenF$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/GenF$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/GenF$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/laws\/GenF.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/GenF.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/GenF.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/GenF.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/GenF.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/GenF.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/GenF.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/GenF.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/GenF.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/GenF.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/GenF.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/GenF.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/GenF.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/GenF.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/GenF.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/GenF.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/GenF.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/GenF.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/GenF.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/GenF.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(gen: Gen[R1, A]): Gen[R1, F[A]]", "member" : "zio.test.laws.GenF.apply", "link" : "zio\/test\/laws\/GenF.html#apply[R1<:R,A](gen:zio.test.Gen[R1,A]):zio.test.Gen[R1,F[A]]", "kind" : "abstract def"}], "shortDescription" : "A GenF knows how to construct a generator of F[A] values given agenerator of A values for any A."}, {"name" : "zio.test.laws.GenF2", "object" : "zio\/test\/laws\/GenF2$.html", "members_object" : [{"label" : "function1", "tail" : ": GenF2[Has[Random], Function1]", "member" : "zio.test.laws.GenF2.function1", "link" : "zio\/test\/laws\/GenF2$.html#function1:zio.test.laws.GenF2[zio.Has[zio.Random],Function1]", "kind" : "val"}, {"label" : "functionWith4", "tail" : "(gen: Gen[R, E])(hash: (A, B, C, D) => Int): Gen[R, (A, B, C, D) => E]", "member" : "zio.test.FunctionVariants.functionWith4", "link" : "zio\/test\/laws\/GenF2$.html#functionWith4[R,A,B,C,D,E](gen:zio.test.Gen[R,E])(hash:(A,B,C,D)=>Int):zio.test.Gen[R,(A,B,C,D)=>E]", "kind" : "final def"}, {"label" : "functionWith3", "tail" : "(gen: Gen[R, D])(hash: (A, B, C) => Int): Gen[R, (A, B, C) => D]", "member" : "zio.test.FunctionVariants.functionWith3", "link" : "zio\/test\/laws\/GenF2$.html#functionWith3[R,A,B,C,D](gen:zio.test.Gen[R,D])(hash:(A,B,C)=>Int):zio.test.Gen[R,(A,B,C)=>D]", "kind" : "final def"}, {"label" : "functionWith2", "tail" : "(gen: Gen[R, C])(hash: (A, B) => Int): Gen[R, (A, B) => C]", "member" : "zio.test.FunctionVariants.functionWith2", "link" : "zio\/test\/laws\/GenF2$.html#functionWith2[R,A,B,C](gen:zio.test.Gen[R,C])(hash:(A,B)=>Int):zio.test.Gen[R,(A,B)=>C]", "kind" : "final def"}, {"label" : "functionWith", "tail" : "(gen: Gen[R, B])(hash: (A) => Int): Gen[R, (A) => B]", "member" : "zio.test.FunctionVariants.functionWith", "link" : "zio\/test\/laws\/GenF2$.html#functionWith[R,A,B](gen:zio.test.Gen[R,B])(hash:A=>Int):zio.test.Gen[R,A=>B]", "kind" : "final def"}, {"label" : "function4", "tail" : "(gen: Gen[R, E]): Gen[R, (A, B, C, D) => E]", "member" : "zio.test.FunctionVariants.function4", "link" : "zio\/test\/laws\/GenF2$.html#function4[R,A,B,C,D,E](gen:zio.test.Gen[R,E]):zio.test.Gen[R,(A,B,C,D)=>E]", "kind" : "final def"}, {"label" : "function3", "tail" : "(gen: Gen[R, D]): Gen[R, (A, B, C) => D]", "member" : "zio.test.FunctionVariants.function3", "link" : "zio\/test\/laws\/GenF2$.html#function3[R,A,B,C,D](gen:zio.test.Gen[R,D]):zio.test.Gen[R,(A,B,C)=>D]", "kind" : "final def"}, {"label" : "function2", "tail" : "(gen: Gen[R, C]): Gen[R, (A, B) => C]", "member" : "zio.test.FunctionVariants.function2", "link" : "zio\/test\/laws\/GenF2$.html#function2[R,A,B,C](gen:zio.test.Gen[R,C]):zio.test.Gen[R,(A,B)=>C]", "kind" : "final def"}, {"label" : "function", "tail" : "(gen: Gen[R, B]): Gen[R, (A) => B]", "member" : "zio.test.FunctionVariants.function", "link" : "zio\/test\/laws\/GenF2$.html#function[R,A,B](gen:zio.test.Gen[R,B]):zio.test.Gen[R,A=>B]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/GenF2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/GenF2$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/GenF2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/GenF2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/GenF2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/GenF2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/GenF2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/GenF2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/GenF2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/GenF2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/GenF2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/GenF2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/GenF2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/GenF2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/GenF2$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/GenF2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/GenF2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/GenF2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/GenF2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/laws\/GenF2.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/GenF2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/GenF2.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/GenF2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/GenF2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/GenF2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/GenF2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/GenF2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/GenF2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/GenF2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/GenF2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/GenF2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/GenF2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/GenF2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/GenF2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/GenF2.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/GenF2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/GenF2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/GenF2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/GenF2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(gen: Gen[R1, B]): Gen[R1, F[A, B]]", "member" : "zio.test.laws.GenF2.apply", "link" : "zio\/test\/laws\/GenF2.html#apply[R1<:R,A,B](gen:zio.test.Gen[R1,B]):zio.test.Gen[R1,F[A,B]]", "kind" : "abstract def"}], "shortDescription" : "A GenF knows how to construct a generator of F[A,B] values given agenerator of A and generator of B values."}, {"name" : "zio.test.laws.LawfulF", "shortDescription" : "", "object" : "zio\/test\/laws\/package$$LawfulF$.html", "members_object" : [{"label" : "Invariant", "tail" : "", "member" : "zio.test.laws.LawfulF.Invariant", "link" : "zio\/test\/laws\/package$$LawfulF$.html#Invariant[-CapsF[_[_]],-Caps[_]]=zio.test.laws.ZLawfulF.Invariant[CapsF,Caps,Any]", "kind" : "type"}, {"label" : "Contravariant", "tail" : "", "member" : "zio.test.laws.LawfulF.Contravariant", "link" : "zio\/test\/laws\/package$$LawfulF$.html#Contravariant[-CapsF[_[-_]],-Caps[_]]=zio.test.laws.ZLawfulF.Contravariant[CapsF,Caps,Any]", "kind" : "type"}, {"label" : "Covariant", "tail" : "", "member" : "zio.test.laws.LawfulF.Covariant", "link" : "zio\/test\/laws\/package$$LawfulF$.html#Covariant[-CapsF[_[+_]],-Caps[_]]=zio.test.laws.ZLawfulF.Covariant[CapsF,Caps,Any]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/package$$LawfulF$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/package$$LawfulF$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/package$$LawfulF$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/package$$LawfulF$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/package$$LawfulF$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/package$$LawfulF$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/package$$LawfulF$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$LawfulF$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$LawfulF$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$LawfulF$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/package$$LawfulF$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/package$$LawfulF$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/package$$LawfulF$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/package$$LawfulF$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/package$$LawfulF$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/package$$LawfulF$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/package$$LawfulF$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/package$$LawfulF$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/package$$LawfulF$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.laws.LawfulF2", "shortDescription" : "", "object" : "zio\/test\/laws\/package$$LawfulF2$.html", "members_object" : [{"label" : "Divariant", "tail" : "", "member" : "zio.test.laws.LawfulF2.Divariant", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#Divariant[-CapsBoth[_[-_,+_]],-CapsLeft[_],-CapsRight[_]]=zio.test.laws.ZLawfulF2.Divariant[CapsBoth,CapsLeft,CapsRight,Any]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/package$$LawfulF2$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/package$$LawfulF2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.laws.Laws", "shortDescription" : "", "object" : "zio\/test\/laws\/package$$Laws$.html", "members_object" : [{"label" : "Law3M", "tail" : "", "member" : "zio.test.laws.Laws.Law3M", "link" : "zio\/test\/laws\/package$$Laws$.html#Law3M[-Caps[_]]=zio.test.laws.ZLaws.Law3M[Caps,Any]", "kind" : "type"}, {"label" : "Law3", "tail" : "", "member" : "zio.test.laws.Laws.Law3", "link" : "zio\/test\/laws\/package$$Laws$.html#Law3[-Caps[_]]=zio.test.laws.ZLaws.Law3[Caps]", "kind" : "type"}, {"label" : "Law2M", "tail" : "", "member" : "zio.test.laws.Laws.Law2M", "link" : "zio\/test\/laws\/package$$Laws$.html#Law2M[-Caps[_]]=zio.test.laws.ZLaws.Law2M[Caps,Any]", "kind" : "type"}, {"label" : "Law2", "tail" : "", "member" : "zio.test.laws.Laws.Law2", "link" : "zio\/test\/laws\/package$$Laws$.html#Law2[-Caps[_]]=zio.test.laws.ZLaws.Law2[Caps]", "kind" : "type"}, {"label" : "Law1M", "tail" : "", "member" : "zio.test.laws.Laws.Law1M", "link" : "zio\/test\/laws\/package$$Laws$.html#Law1M[-Caps[_]]=zio.test.laws.ZLaws.Law1M[Caps,Any]", "kind" : "type"}, {"label" : "Law1", "tail" : "", "member" : "zio.test.laws.Laws.Law1", "link" : "zio\/test\/laws\/package$$Laws$.html#Law1[-Caps[_]]=zio.test.laws.ZLaws.Law1[Caps]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/package$$Laws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/package$$Laws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/package$$Laws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/package$$Laws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/package$$Laws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/package$$Laws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/package$$Laws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$Laws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$Laws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$Laws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/package$$Laws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/package$$Laws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/package$$Laws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/package$$Laws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/package$$Laws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/package$$Laws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/package$$Laws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/package$$Laws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/package$$Laws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.laws.Laws2", "shortDescription" : "", "object" : "zio\/test\/laws\/package$$Laws2$.html", "members_object" : [{"label" : "Law1Right", "tail" : "", "member" : "zio.test.laws.Laws2.Law1Right", "link" : "zio\/test\/laws\/package$$Laws2$.html#Law1Right[-CapsBoth[_,_],-CapsLeft[_],-CapsRight[_]]=zio.test.laws.ZLaws2.Law1Right[CapsBoth,CapsLeft,CapsRight]", "kind" : "type"}, {"label" : "Law1Left", "tail" : "", "member" : "zio.test.laws.Laws2.Law1Left", "link" : "zio\/test\/laws\/package$$Laws2$.html#Law1Left[-CapsBoth[_,_],-CapsLeft[_],-CapsRight[_]]=zio.test.laws.ZLaws2.Law1Left[CapsBoth,CapsLeft,CapsRight]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/package$$Laws2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/package$$Laws2$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/package$$Laws2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/package$$Laws2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/package$$Laws2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/package$$Laws2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/package$$Laws2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$Laws2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$Laws2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$Laws2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/package$$Laws2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/package$$Laws2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/package$$Laws2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/package$$Laws2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/package$$Laws2$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/package$$Laws2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/package$$Laws2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/package$$Laws2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/package$$Laws2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.laws.LawsF", "shortDescription" : "", "object" : "zio\/test\/laws\/package$$LawsF$.html", "members_object" : [{"label" : "Invariant", "tail" : "", "member" : "zio.test.laws.LawsF.Invariant", "link" : "zio\/test\/laws\/package$$LawsF$.html#Invariant", "kind" : "object"}, {"label" : "Contravariant", "tail" : "", "member" : "zio.test.laws.LawsF.Contravariant", "link" : "zio\/test\/laws\/package$$LawsF$.html#Contravariant", "kind" : "object"}, {"label" : "Covariant", "tail" : "", "member" : "zio.test.laws.LawsF.Covariant", "link" : "zio\/test\/laws\/package$$LawsF$.html#Covariant", "kind" : "object"}, {"label" : "Invariant", "tail" : "", "member" : "zio.test.laws.LawsF.Invariant", "link" : "zio\/test\/laws\/package$$LawsF$.html#Invariant[-CapsF[_[_]],-Caps[_]]=zio.test.laws.ZLawsF.Invariant[CapsF,Caps,Any]", "kind" : "type"}, {"label" : "Contravariant", "tail" : "", "member" : "zio.test.laws.LawsF.Contravariant", "link" : "zio\/test\/laws\/package$$LawsF$.html#Contravariant[-CapsF[_[-_]],-Caps[_]]=zio.test.laws.ZLawsF.Contravariant[CapsF,Caps,Any]", "kind" : "type"}, {"label" : "Covariant", "tail" : "", "member" : "zio.test.laws.LawsF.Covariant", "link" : "zio\/test\/laws\/package$$LawsF$.html#Covariant[-CapsF[_[+_]],-Caps[_]]=zio.test.laws.ZLawsF.Covariant[CapsF,Caps,Any]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/package$$LawsF$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/package$$LawsF$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/package$$LawsF$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/package$$LawsF$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/package$$LawsF$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/package$$LawsF$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/package$$LawsF$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$LawsF$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$LawsF$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$LawsF$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/package$$LawsF$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/package$$LawsF$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/package$$LawsF$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/package$$LawsF$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/package$$LawsF$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/package$$LawsF$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/package$$LawsF$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/package$$LawsF$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/package$$LawsF$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.laws.LawsF2", "shortDescription" : "", "object" : "zio\/test\/laws\/package$$LawsF2$.html", "members_object" : [{"label" : "Divariant", "tail" : "", "member" : "zio.test.laws.LawsF2.Divariant", "link" : "zio\/test\/laws\/package$$LawsF2$.html#Divariant", "kind" : "object"}, {"label" : "Divariant", "tail" : "", "member" : "zio.test.laws.LawsF2.Divariant", "link" : "zio\/test\/laws\/package$$LawsF2$.html#Divariant[-CapsBoth[_[-_,+_]],-CapsLeft[_],-CapsRight[_]]=zio.test.laws.ZLawsF2.Divariant[CapsBoth,CapsLeft,CapsRight,Any]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/package$$LawsF2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/package$$LawsF2$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/package$$LawsF2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/package$$LawsF2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/package$$LawsF2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/package$$LawsF2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/package$$LawsF2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$LawsF2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$LawsF2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/package$$LawsF2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/package$$LawsF2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/package$$LawsF2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/package$$LawsF2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/package$$LawsF2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/package$$LawsF2$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/package$$LawsF2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/package$$LawsF2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/package$$LawsF2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/package$$LawsF2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.laws.ZLawful", "trait" : "zio\/test\/laws\/ZLawful.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(that: ZLawful[Caps1, R1]): ZLawful[Caps1, R1]", "member" : "zio.test.laws.ZLawful.+", "link" : "zio\/test\/laws\/ZLawful.html#+[Caps1[x]<:Caps[x],R1<:R](that:zio.test.laws.ZLawful[Caps1,R1]):zio.test.laws.ZLawful[Caps1,R1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/ZLawful.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/ZLawful.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/ZLawful.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/ZLawful.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/ZLawful.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/ZLawful.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/ZLawful.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawful.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawful.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawful.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/ZLawful.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/ZLawful.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/ZLawful.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/ZLawful.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/ZLawful.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/ZLawful.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/ZLawful.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/ZLawful.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/ZLawful.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): ZLaws[Caps, R]", "member" : "zio.test.laws.ZLawful.laws", "link" : "zio\/test\/laws\/ZLawful.html#laws:zio.test.laws.ZLaws[Caps,R]", "kind" : "abstract def"}], "shortDescription" : "ZLawful[Caps, R] describes a capability that is expected to satisfy a setof laws."}, {"name" : "zio.test.laws.ZLawful2", "trait" : "zio\/test\/laws\/ZLawful2.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(that: ZLawful2[CapsBoth1, CapsLeft1, CapsRight1, R1]): ZLawful2[CapsBoth1, CapsLeft1, CapsRight1, R1]", "member" : "zio.test.laws.ZLawful2.+", "link" : "zio\/test\/laws\/ZLawful2.html#+[CapsBoth1[x,y]<:CapsBoth[x,y],CapsLeft1[x]<:CapsLeft[x],CapsRight1[x]<:CapsRight[x],R1<:R](that:zio.test.laws.ZLawful2[CapsBoth1,CapsLeft1,CapsRight1,R1]):zio.test.laws.ZLawful2[CapsBoth1,CapsLeft1,CapsRight1,R1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/ZLawful2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/ZLawful2.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/ZLawful2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/ZLawful2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/ZLawful2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/ZLawful2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/ZLawful2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawful2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawful2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawful2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/ZLawful2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/ZLawful2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/ZLawful2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/ZLawful2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/ZLawful2.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/ZLawful2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/ZLawful2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/ZLawful2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/ZLawful2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): ZLaws2[CapsBoth, CapsLeft, CapsRight, R]", "member" : "zio.test.laws.ZLawful2.laws", "link" : "zio\/test\/laws\/ZLawful2.html#laws:zio.test.laws.ZLaws2[CapsBoth,CapsLeft,CapsRight,R]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.test.laws.ZLawfulF", "shortDescription" : "ZLawfulF[CapsF, Caps, R] describes a set of laws that a parameterized typeF[A] with capabilities CapsF is expected to satisfy with respect to alltypes A that have capabilities Caps.", "object" : "zio\/test\/laws\/ZLawfulF$.html", "members_object" : [{"label" : "Invariant", "tail" : "", "member" : "zio.test.laws.ZLawfulF.Invariant", "link" : "zio\/test\/laws\/ZLawfulF$.html#Invariant[-CapsF[_[_]],-Caps[_],-R]extendsAnyRef", "kind" : "trait"}, {"label" : "Contravariant", "tail" : "", "member" : "zio.test.laws.ZLawfulF.Contravariant", "link" : "zio\/test\/laws\/ZLawfulF$.html#Contravariant[-CapsF[_[-_]],-Caps[_],-R]extendsAnyRef", "kind" : "trait"}, {"label" : "Covariant", "tail" : "", "member" : "zio.test.laws.ZLawfulF.Covariant", "link" : "zio\/test\/laws\/ZLawfulF$.html#Covariant[-CapsF[_[+_]],-Caps[_],-R]extendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/ZLawfulF$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/ZLawfulF$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/ZLawfulF$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/ZLawfulF$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/ZLawfulF$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/ZLawfulF$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/ZLawfulF$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawfulF$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawfulF$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawfulF$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/ZLawfulF$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/ZLawfulF$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/ZLawfulF$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/ZLawfulF$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/ZLawfulF$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/ZLawfulF$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/ZLawfulF$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/ZLawfulF$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/ZLawfulF$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.laws.ZLawfulF2", "shortDescription" : "", "object" : "zio\/test\/laws\/ZLawfulF2$.html", "members_object" : [{"label" : "Divariant", "tail" : "", "member" : "zio.test.laws.ZLawfulF2.Divariant", "link" : "zio\/test\/laws\/ZLawfulF2$.html#Divariant[-CapsBoth[_[-_,+_]],-CapsLeft[_],-CapsRight[_],-R]extendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/ZLawfulF2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/ZLawfulF2$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/ZLawfulF2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/ZLawfulF2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/ZLawfulF2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/ZLawfulF2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/ZLawfulF2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawfulF2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawfulF2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawfulF2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/ZLawfulF2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/ZLawfulF2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/ZLawfulF2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/ZLawfulF2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/ZLawfulF2$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/ZLawfulF2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/ZLawfulF2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/ZLawfulF2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/ZLawfulF2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.laws.ZLaws", "shortDescription" : "ZLaws[Caps, R] represents a set of laws that values with capabilitiesCaps are expected to satisfy.", "object" : "zio\/test\/laws\/ZLaws$.html", "members_class" : [{"label" : "+", "tail" : "(that: ZLaws[Caps1, R1]): ZLaws[Caps1, R1]", "member" : "zio.test.laws.ZLaws.+", "link" : "zio\/test\/laws\/ZLaws.html#+[Caps1[x]<:Caps[x],R1<:R](that:zio.test.laws.ZLaws[Caps1,R1]):zio.test.laws.ZLaws[Caps1,R1]", "kind" : "def"}, {"member" : "zio.test.laws.ZLaws#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/ZLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/ZLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/ZLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/ZLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/ZLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/ZLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/ZLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/ZLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/ZLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/ZLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/ZLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/ZLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/ZLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/ZLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/ZLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/ZLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(gen: Gen[R1, A])(arg0: Caps[A]): ZIO[R1, Nothing, TestResult]", "member" : "zio.test.laws.ZLaws.run", "link" : "zio\/test\/laws\/ZLaws.html#run[R1<:Rwithzio.Has[zio.test.TestConfig],A](gen:zio.test.Gen[R1,A])(implicitevidence$1:Caps[A]):zio.ZIO[R1,Nothing,zio.test.TestResult]", "kind" : "abstract def"}], "members_object" : [{"label" : "Law3M", "tail" : "", "member" : "zio.test.laws.ZLaws.Law3M", "link" : "zio\/test\/laws\/ZLaws$.html#Law3M[-Caps[_],-R]extendsZLaws[Caps,R]", "kind" : "abstract class"}, {"label" : "Law3", "tail" : "", "member" : "zio.test.laws.ZLaws.Law3", "link" : "zio\/test\/laws\/ZLaws$.html#Law3[-Caps[_]]extendsZLaws[Caps,Any]", "kind" : "abstract class"}, {"label" : "Law2M", "tail" : "", "member" : "zio.test.laws.ZLaws.Law2M", "link" : "zio\/test\/laws\/ZLaws$.html#Law2M[-Caps[_],-R]extendsZLaws[Caps,R]", "kind" : "abstract class"}, {"label" : "Law2", "tail" : "", "member" : "zio.test.laws.ZLaws.Law2", "link" : "zio\/test\/laws\/ZLaws$.html#Law2[-Caps[_]]extendsZLaws[Caps,Any]", "kind" : "abstract class"}, {"label" : "Law1M", "tail" : "", "member" : "zio.test.laws.ZLaws.Law1M", "link" : "zio\/test\/laws\/ZLaws$.html#Law1M[-Caps[_],-R]extendsZLaws[Caps,R]", "kind" : "abstract class"}, {"label" : "Law1", "tail" : "", "member" : "zio.test.laws.ZLaws.Law1", "link" : "zio\/test\/laws\/ZLaws$.html#Law1[-Caps[_]]extendsZLaws[Caps,Any]", "kind" : "abstract class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/ZLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/ZLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/ZLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/ZLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/ZLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/ZLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/ZLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/ZLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/ZLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/ZLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/ZLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/ZLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/ZLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/ZLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/ZLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/ZLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/laws\/ZLaws.html", "kind" : "class"}, {"name" : "zio.test.laws.ZLaws2", "shortDescription" : "", "object" : "zio\/test\/laws\/ZLaws2$.html", "members_class" : [{"label" : "+", "tail" : "(that: ZLaws2[CapsBoth1, CapsLeft1, CapsRight1, R1]): ZLaws2[CapsBoth1, CapsLeft1, CapsRight1, R1]", "member" : "zio.test.laws.ZLaws2.+", "link" : "zio\/test\/laws\/ZLaws2.html#+[CapsBoth1[x,y]<:CapsBoth[x,y],CapsLeft1[x]<:CapsLeft[x],CapsRight1[x]<:CapsRight[x],R1<:R](that:zio.test.laws.ZLaws2[CapsBoth1,CapsLeft1,CapsRight1,R1]):zio.test.laws.ZLaws2[CapsBoth1,CapsLeft1,CapsRight1,R1]", "kind" : "def"}, {"member" : "zio.test.laws.ZLaws2#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/ZLaws2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/ZLaws2.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/ZLaws2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/ZLaws2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/ZLaws2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/ZLaws2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/ZLaws2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLaws2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLaws2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLaws2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/ZLaws2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/ZLaws2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/ZLaws2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/ZLaws2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/ZLaws2.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/ZLaws2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/ZLaws2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/ZLaws2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/ZLaws2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(left: Gen[R1, A], right: Gen[R1, B])(arg0: CapsLeft[A], arg1: CapsRight[B], CapsBoth: CapsBoth[A, B]): ZIO[R1, Nothing, TestResult]", "member" : "zio.test.laws.ZLaws2.run", "link" : "zio\/test\/laws\/ZLaws2.html#run[R1<:Rwithzio.Has[zio.test.TestConfig],A,B](left:zio.test.Gen[R1,A],right:zio.test.Gen[R1,B])(implicitevidence$1:CapsLeft[A],implicitevidence$2:CapsRight[B],implicitCapsBoth:CapsBoth[A,B]):zio.ZIO[R1,Nothing,zio.test.TestResult]", "kind" : "abstract def"}], "members_object" : [{"label" : "Law1Right", "tail" : "", "member" : "zio.test.laws.ZLaws2.Law1Right", "link" : "zio\/test\/laws\/ZLaws2$.html#Law1Right[-CapsBoth[_,_],-CapsLeft[_],-CapsRight[_]]extendsZLaws2[CapsBoth,CapsLeft,CapsRight,Any]", "kind" : "abstract class"}, {"label" : "Law1Left", "tail" : "", "member" : "zio.test.laws.ZLaws2.Law1Left", "link" : "zio\/test\/laws\/ZLaws2$.html#Law1Left[-CapsBoth[_,_],-CapsLeft[_],-CapsRight[_]]extendsZLaws2[CapsBoth,CapsLeft,CapsRight,Any]", "kind" : "abstract class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/ZLaws2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/ZLaws2$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/ZLaws2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/ZLaws2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/ZLaws2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/ZLaws2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/ZLaws2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLaws2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLaws2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLaws2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/ZLaws2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/ZLaws2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/ZLaws2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/ZLaws2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/ZLaws2$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/ZLaws2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/ZLaws2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/ZLaws2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/ZLaws2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/laws\/ZLaws2.html", "kind" : "class"}, {"name" : "zio.test.laws.ZLawsF", "shortDescription" : "ZLaws[CapsF, Caps, R] describes a set of laws that a parameterized typeF[A] with capabilities CapsF is expected to satisfy with respect to alltypes A that have capabilities Caps.", "object" : "zio\/test\/laws\/ZLawsF$.html", "members_object" : [{"label" : "Invariant", "tail" : "", "member" : "zio.test.laws.ZLawsF.Invariant", "link" : "zio\/test\/laws\/ZLawsF$.html#Invariant", "kind" : "object"}, {"label" : "Invariant", "tail" : "", "member" : "zio.test.laws.ZLawsF.Invariant", "link" : "zio\/test\/laws\/ZLawsF$.html#Invariant[-CapsF[_[_]],-Caps[_],-R]extendsAnyRef", "kind" : "abstract class"}, {"label" : "Contravariant", "tail" : "", "member" : "zio.test.laws.ZLawsF.Contravariant", "link" : "zio\/test\/laws\/ZLawsF$.html#Contravariant", "kind" : "object"}, {"label" : "Contravariant", "tail" : "", "member" : "zio.test.laws.ZLawsF.Contravariant", "link" : "zio\/test\/laws\/ZLawsF$.html#Contravariant[-CapsF[_[-_]],-Caps[_],-R]extendsAnyRef", "kind" : "abstract class"}, {"label" : "Covariant", "tail" : "", "member" : "zio.test.laws.ZLawsF.Covariant", "link" : "zio\/test\/laws\/ZLawsF$.html#Covariant", "kind" : "object"}, {"label" : "Covariant", "tail" : "", "member" : "zio.test.laws.ZLawsF.Covariant", "link" : "zio\/test\/laws\/ZLawsF$.html#Covariant[-CapsF[_[+_]],-Caps[_],-R]extendsAnyRef", "kind" : "abstract class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/ZLawsF$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/ZLawsF$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/ZLawsF$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/ZLawsF$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/ZLawsF$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/ZLawsF$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/ZLawsF$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawsF$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawsF$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawsF$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/ZLawsF$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/ZLawsF$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/ZLawsF$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/ZLawsF$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/ZLawsF$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/ZLawsF$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/ZLawsF$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/ZLawsF$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/ZLawsF$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.laws.ZLawsF2", "shortDescription" : "", "object" : "zio\/test\/laws\/ZLawsF2$.html", "members_object" : [{"label" : "Divariant", "tail" : "", "member" : "zio.test.laws.ZLawsF2.Divariant", "link" : "zio\/test\/laws\/ZLawsF2$.html#Divariant", "kind" : "object"}, {"label" : "Divariant", "tail" : "", "member" : "zio.test.laws.ZLawsF2.Divariant", "link" : "zio\/test\/laws\/ZLawsF2$.html#Divariant[-CapsF[_[-_,+_]],-CapsLeft[_],-CapsRight[_],-R]extendsAnyRef", "kind" : "abstract class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/laws\/ZLawsF2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/laws\/ZLawsF2$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/laws\/ZLawsF2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/laws\/ZLawsF2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/laws\/ZLawsF2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/laws\/ZLawsF2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/laws\/ZLawsF2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawsF2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawsF2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/laws\/ZLawsF2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/laws\/ZLawsF2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/laws\/ZLawsF2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/laws\/ZLawsF2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/laws\/ZLawsF2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/laws\/ZLawsF2$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/laws\/ZLawsF2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/laws\/ZLawsF2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/laws\/ZLawsF2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/laws\/ZLawsF2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "zio.test.poly" : [{"name" : "zio.test.poly.GenFractionalPoly", "object" : "zio\/test\/poly\/GenFractionalPoly$.html", "members_object" : [{"label" : "genFractionalPoly", "tail" : ": Gen[Has[Random], GenFractionalPoly]", "member" : "zio.test.poly.GenFractionalPoly.genFractionalPoly", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#genFractionalPoly:zio.test.Gen[zio.Has[zio.Random],zio.test.poly.GenFractionalPoly]", "kind" : "val"}, {"label" : "float", "tail" : ": GenFractionalPoly", "member" : "zio.test.poly.GenFractionalPoly.float", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#float:zio.test.poly.GenFractionalPoly", "kind" : "val"}, {"label" : "double", "tail" : ": GenFractionalPoly", "member" : "zio.test.poly.GenFractionalPoly.double", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#double:zio.test.poly.GenFractionalPoly", "kind" : "val"}, {"label" : "apply", "tail" : "(gen: Gen[Has[Random] with Has[Sized], A], num: Fractional[A]): GenFractionalPoly", "member" : "zio.test.poly.GenFractionalPoly.apply", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#apply[A](gen:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],A],num:Fractional[A]):zio.test.poly.GenFractionalPoly", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/poly\/GenFractionalPoly$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/poly\/GenFractionalPoly$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/poly\/GenFractionalPoly.html", "kind" : "trait", "members_trait" : [{"label" : "ordT", "tail" : ": Ordering[T]", "member" : "zio.test.poly.GenNumericPoly.ordT", "link" : "zio\/test\/poly\/GenFractionalPoly.html#ordT:Ordering[GenNumericPoly.this.T]", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/poly\/GenFractionalPoly.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/poly\/GenFractionalPoly.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/poly\/GenFractionalPoly.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/poly\/GenFractionalPoly.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/poly\/GenFractionalPoly.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/poly\/GenFractionalPoly.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/poly\/GenFractionalPoly.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenFractionalPoly.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenFractionalPoly.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenFractionalPoly.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/poly\/GenFractionalPoly.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/poly\/GenFractionalPoly.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/poly\/GenFractionalPoly.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/poly\/GenFractionalPoly.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/poly\/GenFractionalPoly.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/poly\/GenFractionalPoly.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/poly\/GenFractionalPoly.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/poly\/GenFractionalPoly.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/poly\/GenFractionalPoly.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "numT", "tail" : ": Fractional[T]", "member" : "zio.test.poly.GenFractionalPoly.numT", "link" : "zio\/test\/poly\/GenFractionalPoly.html#numT:Fractional[GenFractionalPoly.this.T]", "kind" : "abstract val"}, {"label" : "genT", "tail" : ": Gen[Has[Random] with Has[Sized], T]", "member" : "zio.test.poly.GenPoly.genT", "link" : "zio\/test\/poly\/GenFractionalPoly.html#genT:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],GenPoly.this.T]", "kind" : "abstract val"}, {"member" : "zio.test.poly.GenPoly.T", "error" : "unsupported entity"}], "shortDescription" : "GenFractionalPoly provides evidence that instances of Gen[T] andFractional[T] exist for some concrete but unknown type T."}, {"name" : "zio.test.poly.GenIntegralPoly", "object" : "zio\/test\/poly\/GenIntegralPoly$.html", "members_object" : [{"label" : "short", "tail" : ": GenIntegralPoly", "member" : "zio.test.poly.GenIntegralPoly.short", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#short:zio.test.poly.GenIntegralPoly", "kind" : "val"}, {"label" : "long", "tail" : ": GenIntegralPoly", "member" : "zio.test.poly.GenIntegralPoly.long", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#long:zio.test.poly.GenIntegralPoly", "kind" : "val"}, {"label" : "int", "tail" : ": GenIntegralPoly", "member" : "zio.test.poly.GenIntegralPoly.int", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#int:zio.test.poly.GenIntegralPoly", "kind" : "val"}, {"label" : "genIntegralPoly", "tail" : ": Gen[Has[Random], GenIntegralPoly]", "member" : "zio.test.poly.GenIntegralPoly.genIntegralPoly", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#genIntegralPoly:zio.test.Gen[zio.Has[zio.Random],zio.test.poly.GenIntegralPoly]", "kind" : "lazy val"}, {"label" : "char", "tail" : ": GenIntegralPoly", "member" : "zio.test.poly.GenIntegralPoly.char", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#char:zio.test.poly.GenIntegralPoly", "kind" : "val"}, {"label" : "byte", "tail" : ": GenIntegralPoly", "member" : "zio.test.poly.GenIntegralPoly.byte", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#byte:zio.test.poly.GenIntegralPoly", "kind" : "val"}, {"label" : "apply", "tail" : "(gen: Gen[Has[Random] with Has[Sized], A], num: Integral[A]): GenIntegralPoly", "member" : "zio.test.poly.GenIntegralPoly.apply", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#apply[A](gen:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],A],num:Integral[A]):zio.test.poly.GenIntegralPoly", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/poly\/GenIntegralPoly$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/poly\/GenIntegralPoly$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/poly\/GenIntegralPoly.html", "kind" : "trait", "members_trait" : [{"label" : "ordT", "tail" : ": Ordering[T]", "member" : "zio.test.poly.GenNumericPoly.ordT", "link" : "zio\/test\/poly\/GenIntegralPoly.html#ordT:Ordering[GenNumericPoly.this.T]", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/poly\/GenIntegralPoly.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/poly\/GenIntegralPoly.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/poly\/GenIntegralPoly.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/poly\/GenIntegralPoly.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/poly\/GenIntegralPoly.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/poly\/GenIntegralPoly.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/poly\/GenIntegralPoly.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenIntegralPoly.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenIntegralPoly.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenIntegralPoly.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/poly\/GenIntegralPoly.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/poly\/GenIntegralPoly.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/poly\/GenIntegralPoly.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/poly\/GenIntegralPoly.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/poly\/GenIntegralPoly.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/poly\/GenIntegralPoly.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/poly\/GenIntegralPoly.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/poly\/GenIntegralPoly.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/poly\/GenIntegralPoly.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "numT", "tail" : ": Integral[T]", "member" : "zio.test.poly.GenIntegralPoly.numT", "link" : "zio\/test\/poly\/GenIntegralPoly.html#numT:Integral[GenIntegralPoly.this.T]", "kind" : "abstract val"}, {"label" : "genT", "tail" : ": Gen[Has[Random] with Has[Sized], T]", "member" : "zio.test.poly.GenPoly.genT", "link" : "zio\/test\/poly\/GenIntegralPoly.html#genT:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],GenPoly.this.T]", "kind" : "abstract val"}, {"member" : "zio.test.poly.GenPoly.T", "error" : "unsupported entity"}], "shortDescription" : "GenIntegralPoly provides evidence that instances of Gen[T] andIntegral[T] exist for some concrete but unknown type T."}, {"name" : "zio.test.poly.GenNumericPoly", "object" : "zio\/test\/poly\/GenNumericPoly$.html", "members_object" : [{"label" : "short", "tail" : ": GenNumericPoly", "member" : "zio.test.poly.GenNumericPoly.short", "link" : "zio\/test\/poly\/GenNumericPoly$.html#short:zio.test.poly.GenNumericPoly", "kind" : "val"}, {"label" : "long", "tail" : ": GenNumericPoly", "member" : "zio.test.poly.GenNumericPoly.long", "link" : "zio\/test\/poly\/GenNumericPoly$.html#long:zio.test.poly.GenNumericPoly", "kind" : "val"}, {"label" : "int", "tail" : ": GenNumericPoly", "member" : "zio.test.poly.GenNumericPoly.int", "link" : "zio\/test\/poly\/GenNumericPoly$.html#int:zio.test.poly.GenNumericPoly", "kind" : "val"}, {"label" : "genNumericPoly", "tail" : ": Gen[Has[Random], GenNumericPoly]", "member" : "zio.test.poly.GenNumericPoly.genNumericPoly", "link" : "zio\/test\/poly\/GenNumericPoly$.html#genNumericPoly:zio.test.Gen[zio.Has[zio.Random],zio.test.poly.GenNumericPoly]", "kind" : "lazy val"}, {"label" : "float", "tail" : ": GenNumericPoly", "member" : "zio.test.poly.GenNumericPoly.float", "link" : "zio\/test\/poly\/GenNumericPoly$.html#float:zio.test.poly.GenNumericPoly", "kind" : "val"}, {"label" : "double", "tail" : ": GenNumericPoly", "member" : "zio.test.poly.GenNumericPoly.double", "link" : "zio\/test\/poly\/GenNumericPoly$.html#double:zio.test.poly.GenNumericPoly", "kind" : "val"}, {"label" : "char", "tail" : ": GenNumericPoly", "member" : "zio.test.poly.GenNumericPoly.char", "link" : "zio\/test\/poly\/GenNumericPoly$.html#char:zio.test.poly.GenNumericPoly", "kind" : "val"}, {"label" : "byte", "tail" : ": GenNumericPoly", "member" : "zio.test.poly.GenNumericPoly.byte", "link" : "zio\/test\/poly\/GenNumericPoly$.html#byte:zio.test.poly.GenNumericPoly", "kind" : "val"}, {"label" : "apply", "tail" : "(gen: Gen[Has[Random] with Has[Sized], A], num: Numeric[A]): GenNumericPoly", "member" : "zio.test.poly.GenNumericPoly.apply", "link" : "zio\/test\/poly\/GenNumericPoly$.html#apply[A](gen:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],A],num:Numeric[A]):zio.test.poly.GenNumericPoly", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/poly\/GenNumericPoly$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/poly\/GenNumericPoly$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/poly\/GenNumericPoly$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/poly\/GenNumericPoly$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/poly\/GenNumericPoly$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/poly\/GenNumericPoly$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/poly\/GenNumericPoly$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenNumericPoly$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenNumericPoly$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenNumericPoly$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/poly\/GenNumericPoly$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/poly\/GenNumericPoly$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/poly\/GenNumericPoly$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/poly\/GenNumericPoly$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/poly\/GenNumericPoly$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/poly\/GenNumericPoly$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/poly\/GenNumericPoly$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/poly\/GenNumericPoly$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/poly\/GenNumericPoly$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/poly\/GenNumericPoly.html", "kind" : "trait", "members_trait" : [{"label" : "ordT", "tail" : ": Ordering[T]", "member" : "zio.test.poly.GenNumericPoly.ordT", "link" : "zio\/test\/poly\/GenNumericPoly.html#ordT:Ordering[GenNumericPoly.this.T]", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/poly\/GenNumericPoly.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/poly\/GenNumericPoly.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/poly\/GenNumericPoly.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/poly\/GenNumericPoly.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/poly\/GenNumericPoly.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/poly\/GenNumericPoly.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/poly\/GenNumericPoly.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenNumericPoly.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenNumericPoly.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenNumericPoly.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/poly\/GenNumericPoly.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/poly\/GenNumericPoly.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/poly\/GenNumericPoly.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/poly\/GenNumericPoly.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/poly\/GenNumericPoly.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/poly\/GenNumericPoly.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/poly\/GenNumericPoly.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/poly\/GenNumericPoly.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/poly\/GenNumericPoly.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "numT", "tail" : ": Numeric[T]", "member" : "zio.test.poly.GenNumericPoly.numT", "link" : "zio\/test\/poly\/GenNumericPoly.html#numT:Numeric[GenNumericPoly.this.T]", "kind" : "abstract val"}, {"label" : "genT", "tail" : ": Gen[Has[Random] with Has[Sized], T]", "member" : "zio.test.poly.GenPoly.genT", "link" : "zio\/test\/poly\/GenNumericPoly.html#genT:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],GenPoly.this.T]", "kind" : "abstract val"}, {"member" : "zio.test.poly.GenPoly.T", "error" : "unsupported entity"}], "shortDescription" : "GenNumericPoly provides evidence that instances of Gen[T] andNumeric[T] exist for some concrete but unknown type T."}, {"name" : "zio.test.poly.GenOrderingPoly", "object" : "zio\/test\/poly\/GenOrderingPoly$.html", "members_object" : [{"label" : "vector", "tail" : "(poly: GenOrderingPoly): GenOrderingPoly", "member" : "zio.test.poly.GenOrderingPoly.vector", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#vector(poly:zio.test.poly.GenOrderingPoly):zio.test.poly.GenOrderingPoly", "kind" : "def"}, {"label" : "unit", "tail" : ": GenOrderingPoly", "member" : "zio.test.poly.GenOrderingPoly.unit", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#unit:zio.test.poly.GenOrderingPoly", "kind" : "val"}, {"label" : "string", "tail" : ": GenOrderingPoly", "member" : "zio.test.poly.GenOrderingPoly.string", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#string:zio.test.poly.GenOrderingPoly", "kind" : "val"}, {"label" : "short", "tail" : ": GenOrderingPoly", "member" : "zio.test.poly.GenOrderingPoly.short", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#short:zio.test.poly.GenOrderingPoly", "kind" : "val"}, {"label" : "option", "tail" : "(poly: GenOrderingPoly): GenOrderingPoly", "member" : "zio.test.poly.GenOrderingPoly.option", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#option(poly:zio.test.poly.GenOrderingPoly):zio.test.poly.GenOrderingPoly", "kind" : "def"}, {"label" : "long", "tail" : ": GenOrderingPoly", "member" : "zio.test.poly.GenOrderingPoly.long", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#long:zio.test.poly.GenOrderingPoly", "kind" : "val"}, {"label" : "list", "tail" : "(poly: GenOrderingPoly): GenOrderingPoly", "member" : "zio.test.poly.GenOrderingPoly.list", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#list(poly:zio.test.poly.GenOrderingPoly):zio.test.poly.GenOrderingPoly", "kind" : "def"}, {"label" : "int", "tail" : ": GenOrderingPoly", "member" : "zio.test.poly.GenOrderingPoly.int", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#int:zio.test.poly.GenOrderingPoly", "kind" : "val"}, {"label" : "genOrderingPoly", "tail" : ": Gen[Has[Random], GenOrderingPoly]", "member" : "zio.test.poly.GenOrderingPoly.genOrderingPoly", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#genOrderingPoly:zio.test.Gen[zio.Has[zio.Random],zio.test.poly.GenOrderingPoly]", "kind" : "lazy val"}, {"label" : "float", "tail" : ": GenOrderingPoly", "member" : "zio.test.poly.GenOrderingPoly.float", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#float:zio.test.poly.GenOrderingPoly", "kind" : "val"}, {"label" : "double", "tail" : ": GenOrderingPoly", "member" : "zio.test.poly.GenOrderingPoly.double", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#double:zio.test.poly.GenOrderingPoly", "kind" : "val"}, {"label" : "char", "tail" : ": GenOrderingPoly", "member" : "zio.test.poly.GenOrderingPoly.char", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#char:zio.test.poly.GenOrderingPoly", "kind" : "val"}, {"label" : "byte", "tail" : ": GenOrderingPoly", "member" : "zio.test.poly.GenOrderingPoly.byte", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#byte:zio.test.poly.GenOrderingPoly", "kind" : "val"}, {"label" : "boolean", "tail" : ": GenOrderingPoly", "member" : "zio.test.poly.GenOrderingPoly.boolean", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#boolean:zio.test.poly.GenOrderingPoly", "kind" : "val"}, {"label" : "apply", "tail" : "(gen: Gen[Has[Random] with Has[Sized], A], ord: Ordering[A]): GenOrderingPoly", "member" : "zio.test.poly.GenOrderingPoly.apply", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#apply[A](gen:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],A],ord:Ordering[A]):zio.test.poly.GenOrderingPoly", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/poly\/GenOrderingPoly$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/poly\/GenOrderingPoly$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/poly\/GenOrderingPoly.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/poly\/GenOrderingPoly.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/poly\/GenOrderingPoly.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/poly\/GenOrderingPoly.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/poly\/GenOrderingPoly.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/poly\/GenOrderingPoly.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/poly\/GenOrderingPoly.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/poly\/GenOrderingPoly.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenOrderingPoly.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenOrderingPoly.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenOrderingPoly.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/poly\/GenOrderingPoly.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/poly\/GenOrderingPoly.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/poly\/GenOrderingPoly.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/poly\/GenOrderingPoly.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/poly\/GenOrderingPoly.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/poly\/GenOrderingPoly.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/poly\/GenOrderingPoly.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/poly\/GenOrderingPoly.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/poly\/GenOrderingPoly.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "ordT", "tail" : ": Ordering[T]", "member" : "zio.test.poly.GenOrderingPoly.ordT", "link" : "zio\/test\/poly\/GenOrderingPoly.html#ordT:Ordering[GenOrderingPoly.this.T]", "kind" : "abstract val"}, {"label" : "genT", "tail" : ": Gen[Has[Random] with Has[Sized], T]", "member" : "zio.test.poly.GenPoly.genT", "link" : "zio\/test\/poly\/GenOrderingPoly.html#genT:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],GenPoly.this.T]", "kind" : "abstract val"}, {"member" : "zio.test.poly.GenPoly.T", "error" : "unsupported entity"}], "shortDescription" : "GenOrderingPoly provides evidence that instances of Gen[T] andOrdering[T] exist for some concrete but unknown type T."}, {"name" : "zio.test.poly.GenPoly", "object" : "zio\/test\/poly\/GenPoly$.html", "members_object" : [{"label" : "vector", "tail" : "(poly: GenPoly): GenPoly", "member" : "zio.test.poly.GenPoly.vector", "link" : "zio\/test\/poly\/GenPoly$.html#vector(poly:zio.test.poly.GenPoly):zio.test.poly.GenPoly", "kind" : "def"}, {"label" : "unit", "tail" : ": GenPoly", "member" : "zio.test.poly.GenPoly.unit", "link" : "zio\/test\/poly\/GenPoly$.html#unit:zio.test.poly.GenPoly", "kind" : "val"}, {"label" : "string", "tail" : ": GenPoly", "member" : "zio.test.poly.GenPoly.string", "link" : "zio\/test\/poly\/GenPoly$.html#string:zio.test.poly.GenPoly", "kind" : "val"}, {"label" : "short", "tail" : ": GenPoly", "member" : "zio.test.poly.GenPoly.short", "link" : "zio\/test\/poly\/GenPoly$.html#short:zio.test.poly.GenPoly", "kind" : "val"}, {"label" : "option", "tail" : "(poly: GenPoly): GenPoly", "member" : "zio.test.poly.GenPoly.option", "link" : "zio\/test\/poly\/GenPoly$.html#option(poly:zio.test.poly.GenPoly):zio.test.poly.GenPoly", "kind" : "def"}, {"label" : "long", "tail" : ": GenPoly", "member" : "zio.test.poly.GenPoly.long", "link" : "zio\/test\/poly\/GenPoly$.html#long:zio.test.poly.GenPoly", "kind" : "val"}, {"label" : "list", "tail" : "(poly: GenPoly): GenPoly", "member" : "zio.test.poly.GenPoly.list", "link" : "zio\/test\/poly\/GenPoly$.html#list(poly:zio.test.poly.GenPoly):zio.test.poly.GenPoly", "kind" : "def"}, {"label" : "int", "tail" : ": GenPoly", "member" : "zio.test.poly.GenPoly.int", "link" : "zio\/test\/poly\/GenPoly$.html#int:zio.test.poly.GenPoly", "kind" : "val"}, {"label" : "genPoly", "tail" : ": Gen[Has[Random], GenPoly]", "member" : "zio.test.poly.GenPoly.genPoly", "link" : "zio\/test\/poly\/GenPoly$.html#genPoly:zio.test.Gen[zio.Has[zio.Random],zio.test.poly.GenPoly]", "kind" : "lazy val"}, {"label" : "float", "tail" : ": GenPoly", "member" : "zio.test.poly.GenPoly.float", "link" : "zio\/test\/poly\/GenPoly$.html#float:zio.test.poly.GenPoly", "kind" : "val"}, {"label" : "double", "tail" : ": GenPoly", "member" : "zio.test.poly.GenPoly.double", "link" : "zio\/test\/poly\/GenPoly$.html#double:zio.test.poly.GenPoly", "kind" : "val"}, {"label" : "char", "tail" : ": GenPoly", "member" : "zio.test.poly.GenPoly.char", "link" : "zio\/test\/poly\/GenPoly$.html#char:zio.test.poly.GenPoly", "kind" : "val"}, {"label" : "byte", "tail" : ": GenPoly", "member" : "zio.test.poly.GenPoly.byte", "link" : "zio\/test\/poly\/GenPoly$.html#byte:zio.test.poly.GenPoly", "kind" : "val"}, {"label" : "boolean", "tail" : ": GenPoly", "member" : "zio.test.poly.GenPoly.boolean", "link" : "zio\/test\/poly\/GenPoly$.html#boolean:zio.test.poly.GenPoly", "kind" : "val"}, {"label" : "apply", "tail" : "(gen: Gen[Has[Random] with Has[Sized], A]): GenPoly", "member" : "zio.test.poly.GenPoly.apply", "link" : "zio\/test\/poly\/GenPoly$.html#apply[A](gen:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],A]):zio.test.poly.GenPoly", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/poly\/GenPoly$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/poly\/GenPoly$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/poly\/GenPoly$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/poly\/GenPoly$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/poly\/GenPoly$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/poly\/GenPoly$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/poly\/GenPoly$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenPoly$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenPoly$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenPoly$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/poly\/GenPoly$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/poly\/GenPoly$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/poly\/GenPoly$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/poly\/GenPoly$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/poly\/GenPoly$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/poly\/GenPoly$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/poly\/GenPoly$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/poly\/GenPoly$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/poly\/GenPoly$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/poly\/GenPoly.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/poly\/GenPoly.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/poly\/GenPoly.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/poly\/GenPoly.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/poly\/GenPoly.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/poly\/GenPoly.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/poly\/GenPoly.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/poly\/GenPoly.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenPoly.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenPoly.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/poly\/GenPoly.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/poly\/GenPoly.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/poly\/GenPoly.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/poly\/GenPoly.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/poly\/GenPoly.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/poly\/GenPoly.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/poly\/GenPoly.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/poly\/GenPoly.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/poly\/GenPoly.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/poly\/GenPoly.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "genT", "tail" : ": Gen[Has[Random] with Has[Sized], T]", "member" : "zio.test.poly.GenPoly.genT", "link" : "zio\/test\/poly\/GenPoly.html#genT:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],GenPoly.this.T]", "kind" : "abstract val"}, {"member" : "zio.test.poly.GenPoly.T", "error" : "unsupported entity"}], "shortDescription" : "GenPoly provides evidence that an instance of Gen[T] exists for someconcrete but unknown type T."}], "zio.test.internal.myers" : [{"name" : "zio.test.internal.myers.Action", "object" : "zio\/test\/internal\/myers\/Action$.html", "members_object" : [{"label" : "Keep", "tail" : "", "member" : "zio.test.internal.myers.Action.Keep", "link" : "zio\/test\/internal\/myers\/Action$.html#Keep[A]extendsAction[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Insert", "tail" : "", "member" : "zio.test.internal.myers.Action.Insert", "link" : "zio\/test\/internal\/myers\/Action$.html#Insert[A]extendsAction[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Delete", "tail" : "", "member" : "zio.test.internal.myers.Action.Delete", "link" : "zio\/test\/internal\/myers\/Action$.html#Delete[A]extendsAction[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/internal\/myers\/Action$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/internal\/myers\/Action$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/internal\/myers\/Action$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/internal\/myers\/Action$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/internal\/myers\/Action$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/internal\/myers\/Action$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/internal\/myers\/Action$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/myers\/Action$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/myers\/Action$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/myers\/Action$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/internal\/myers\/Action$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/internal\/myers\/Action$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/internal\/myers\/Action$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/internal\/myers\/Action$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/internal\/myers\/Action$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/internal\/myers\/Action$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/internal\/myers\/Action$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/internal\/myers\/Action$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/internal\/myers\/Action$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/internal\/myers\/Action.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/internal\/myers\/Action.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/internal\/myers\/Action.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/internal\/myers\/Action.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/internal\/myers\/Action.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/internal\/myers\/Action.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/internal\/myers\/Action.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/internal\/myers\/Action.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/myers\/Action.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/myers\/Action.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/myers\/Action.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/internal\/myers\/Action.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/internal\/myers\/Action.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/internal\/myers\/Action.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/internal\/myers\/Action.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/internal\/myers\/Action.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/internal\/myers\/Action.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/internal\/myers\/Action.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/internal\/myers\/Action.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/internal\/myers\/Action.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.internal.myers.DiffResult", "shortDescription" : "", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "zio.test.internal.myers.DiffResult.toString", "link" : "zio\/test\/internal\/myers\/DiffResult.html#toString():String", "kind" : "def"}, {"label" : "isIdentical", "tail" : "(): Boolean", "member" : "zio.test.internal.myers.DiffResult.isIdentical", "link" : "zio\/test\/internal\/myers\/DiffResult.html#isIdentical:Boolean", "kind" : "def"}, {"label" : "invert", "tail" : "(): DiffResult[A]", "member" : "zio.test.internal.myers.DiffResult.invert", "link" : "zio\/test\/internal\/myers\/DiffResult.html#invert:zio.test.internal.myers.DiffResult[A]", "kind" : "def"}, {"label" : "applyChanges", "tail" : "(original: String): String", "member" : "zio.test.internal.myers.DiffResult.applyChanges", "link" : "zio\/test\/internal\/myers\/DiffResult.html#applyChanges(original:String):String", "kind" : "def"}, {"member" : "zio.test.internal.myers.DiffResult#<init>", "error" : "unsupported entity"}, {"label" : "actions", "tail" : ": Chunk[Action[A]]", "member" : "zio.test.internal.myers.DiffResult.actions", "link" : "zio\/test\/internal\/myers\/DiffResult.html#actions:zio.Chunk[zio.test.internal.myers.Action[A]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/internal\/myers\/DiffResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/internal\/myers\/DiffResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/internal\/myers\/DiffResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/internal\/myers\/DiffResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/internal\/myers\/DiffResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/internal\/myers\/DiffResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/internal\/myers\/DiffResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/internal\/myers\/DiffResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/myers\/DiffResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/myers\/DiffResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/myers\/DiffResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/internal\/myers\/DiffResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/internal\/myers\/DiffResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/internal\/myers\/DiffResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/internal\/myers\/DiffResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/internal\/myers\/DiffResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/internal\/myers\/DiffResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/test\/internal\/myers\/DiffResult.html", "kind" : "case class"}, {"name" : "zio.test.internal.myers.MyersDiff", "shortDescription" : "", "object" : "zio\/test\/internal\/myers\/MyersDiff$.html", "members_object" : [{"label" : "getLongestCommonSubsequence", "tail" : "(original: Chunk[A], modified: Chunk[A]): Chunk[A]", "member" : "zio.test.internal.myers.MyersDiff.getLongestCommonSubsequence", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#getLongestCommonSubsequence[A](original:zio.Chunk[A],modified:zio.Chunk[A]):zio.Chunk[A]", "kind" : "def"}, {"label" : "diff", "tail" : "(original: Chunk[A], modified: Chunk[A]): DiffResult[A]", "member" : "zio.test.internal.myers.MyersDiff.diff", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#diff[A](original:zio.Chunk[A],modified:zio.Chunk[A]):zio.test.internal.myers.DiffResult[A]", "kind" : "def"}, {"label" : "diff", "tail" : "(original: String, modified: String): DiffResult[String]", "member" : "zio.test.internal.myers.MyersDiff.diff", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#diff(original:String,modified:String):zio.test.internal.myers.DiffResult[String]", "kind" : "def"}, {"label" : "diffSingleLine", "tail" : "(original: String, modified: String): DiffResult[String]", "member" : "zio.test.internal.myers.MyersDiff.diffSingleLine", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#diffSingleLine(original:String,modified:String):zio.test.internal.myers.DiffResult[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/internal\/myers\/MyersDiff$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "zio.stm" : [{"name" : "zio.stm.STM", "shortDescription" : "", "object" : "zio\/stm\/STM$.html", "members_object" : [{"label" : "whenSTM", "tail" : "(b: STM[E, Boolean]): WhenSTM[Any, E]", "member" : "zio.stm.STM.whenSTM", "link" : "zio\/stm\/STM$.html#whenSTM[E](b:zio.stm.STM[E,Boolean]):zio.stm.ZSTM.WhenSTM[Any,E]", "kind" : "def"}, {"label" : "whenM", "tail" : "(b: STM[E, Boolean]): WhenSTM[Any, E]", "member" : "zio.stm.STM.whenM", "link" : "zio\/stm\/STM$.html#whenM[E](b:zio.stm.STM[E,Boolean]):zio.stm.ZSTM.WhenSTM[Any,E]", "kind" : "def"}, {"label" : "whenCaseSTM", "tail" : "(a: STM[E, A])(pf: PartialFunction[A, STM[E, B]]): STM[E, Option[B]]", "member" : "zio.stm.STM.whenCaseSTM", "link" : "zio\/stm\/STM$.html#whenCaseSTM[E,A,B](a:zio.stm.STM[E,A])(pf:PartialFunction[A,zio.stm.STM[E,B]]):zio.stm.STM[E,Option[B]]", "kind" : "def"}, {"label" : "whenCaseM", "tail" : "(a: STM[E, A])(pf: PartialFunction[A, STM[E, B]]): STM[E, Option[B]]", "member" : "zio.stm.STM.whenCaseM", "link" : "zio\/stm\/STM$.html#whenCaseM[E,A,B](a:zio.stm.STM[E,A])(pf:PartialFunction[A,zio.stm.STM[E,B]]):zio.stm.STM[E,Option[B]]", "kind" : "def"}, {"label" : "whenCase", "tail" : "(a: => A)(pf: PartialFunction[A, STM[E, B]]): STM[E, Option[B]]", "member" : "zio.stm.STM.whenCase", "link" : "zio\/stm\/STM$.html#whenCase[E,A,B](a:=>A)(pf:PartialFunction[A,zio.stm.STM[E,B]]):zio.stm.STM[E,Option[B]]", "kind" : "def"}, {"label" : "when", "tail" : "(b: => Boolean)(stm: => STM[E, A]): STM[E, Option[A]]", "member" : "zio.stm.STM.when", "link" : "zio\/stm\/STM$.html#when[E,A](b:=>Boolean)(stm:=>zio.stm.STM[E,A]):zio.stm.STM[E,Option[A]]", "kind" : "def"}, {"label" : "validateFirst", "tail" : "(in: Collection[A])(f: (A) => STM[E, B])(bf: zio.BuildFrom[Collection[A], E, Collection[E]], ev: CanFail[E]): STM[Collection[E], B]", "member" : "zio.stm.STM.validateFirst", "link" : "zio\/stm\/STM$.html#validateFirst[E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.stm.STM[E,B])(implicitbf:zio.BuildFrom[Collection[A],E,Collection[E]],implicitev:zio.CanFail[E]):zio.stm.STM[Collection[E],B]", "kind" : "def"}, {"label" : "validate", "tail" : "(in: NonEmptyChunk[A])(f: (A) => STM[E, B])(ev: CanFail[E]): STM[::[E], NonEmptyChunk[B]]", "member" : "zio.stm.STM.validate", "link" : "zio\/stm\/STM$.html#validate[E,A,B](in:zio.NonEmptyChunk[A])(f:A=>zio.stm.STM[E,B])(implicitev:zio.CanFail[E]):zio.stm.STM[::[E],zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "validate", "tail" : "(in: Collection[A])(f: (A) => STM[E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]], ev: CanFail[E]): STM[::[E], Collection[B]]", "member" : "zio.stm.STM.validate", "link" : "zio\/stm\/STM$.html#validate[E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.stm.STM[E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]],implicitev:zio.CanFail[E]):zio.stm.STM[::[E],Collection[B]]", "kind" : "def"}, {"label" : "unlessSTM", "tail" : "(b: STM[E, Boolean]): UnlessSTM[Any, E]", "member" : "zio.stm.STM.unlessSTM", "link" : "zio\/stm\/STM$.html#unlessSTM[E](b:zio.stm.STM[E,Boolean]):zio.stm.ZSTM.UnlessSTM[Any,E]", "kind" : "def"}, {"label" : "unlessM", "tail" : "(b: STM[E, Boolean]): UnlessSTM[Any, E]", "member" : "zio.stm.STM.unlessM", "link" : "zio\/stm\/STM$.html#unlessM[E](b:zio.stm.STM[E,Boolean]):zio.stm.ZSTM.UnlessSTM[Any,E]", "kind" : "def"}, {"label" : "unless", "tail" : "(b: => Boolean)(stm: => STM[E, A]): STM[E, Option[A]]", "member" : "zio.stm.STM.unless", "link" : "zio\/stm\/STM$.html#unless[E,A](b:=>Boolean)(stm:=>zio.stm.STM[E,A]):zio.stm.STM[E,Option[A]]", "kind" : "def"}, {"label" : "unit", "tail" : ": USTM[Unit]", "member" : "zio.stm.STM.unit", "link" : "zio\/stm\/STM$.html#unit:zio.stm.USTM[Unit]", "kind" : "val"}, {"label" : "suspend", "tail" : "(stm: => STM[E, A]): STM[E, A]", "member" : "zio.stm.STM.suspend", "link" : "zio\/stm\/STM$.html#suspend[E,A](stm:=>zio.stm.STM[E,A]):zio.stm.STM[E,A]", "kind" : "def"}, {"label" : "succeed", "tail" : "(a: => A): USTM[A]", "member" : "zio.stm.STM.succeed", "link" : "zio\/stm\/STM$.html#succeed[A](a:=>A):zio.stm.USTM[A]", "kind" : "def"}, {"label" : "some", "tail" : "(a: => A): USTM[Option[A]]", "member" : "zio.stm.STM.some", "link" : "zio\/stm\/STM$.html#some[A](a:=>A):zio.stm.USTM[Option[A]]", "kind" : "def"}, {"label" : "right", "tail" : "(a: => A): USTM[Either[Nothing, A]]", "member" : "zio.stm.STM.right", "link" : "zio\/stm\/STM$.html#right[A](a:=>A):zio.stm.USTM[Either[Nothing,A]]", "kind" : "def"}, {"label" : "retry", "tail" : ": USTM[Nothing]", "member" : "zio.stm.STM.retry", "link" : "zio\/stm\/STM$.html#retry:zio.stm.USTM[Nothing]", "kind" : "val"}, {"label" : "require", "tail" : "(error: => E): (STM[E, Option[A]]) => STM[E, A]", "member" : "zio.stm.STM.require", "link" : "zio\/stm\/STM$.html#require[E,A](error:=>E):zio.stm.STM[E,Option[A]]=>zio.stm.STM[E,A]", "kind" : "def"}, {"label" : "replicateSTMDiscard", "tail" : "(n: Int)(transaction: STM[E, A]): STM[E, Unit]", "member" : "zio.stm.STM.replicateSTMDiscard", "link" : "zio\/stm\/STM$.html#replicateSTMDiscard[E,A](n:Int)(transaction:zio.stm.STM[E,A]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "replicateSTM", "tail" : "(n: Int)(transaction: STM[E, A]): STM[E, Iterable[A]]", "member" : "zio.stm.STM.replicateSTM", "link" : "zio\/stm\/STM$.html#replicateSTM[E,A](n:Int)(transaction:zio.stm.STM[E,A]):zio.stm.STM[E,Iterable[A]]", "kind" : "def"}, {"label" : "replicateM_", "tail" : "(n: Int)(transaction: STM[E, A]): STM[E, Unit]", "member" : "zio.stm.STM.replicateM_", "link" : "zio\/stm\/STM$.html#replicateM_[E,A](n:Int)(transaction:zio.stm.STM[E,A]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "replicateM", "tail" : "(n: Int)(transaction: STM[E, A]): STM[E, Iterable[A]]", "member" : "zio.stm.STM.replicateM", "link" : "zio\/stm\/STM$.html#replicateM[E,A](n:Int)(transaction:zio.stm.STM[E,A]):zio.stm.STM[E,Iterable[A]]", "kind" : "def"}, {"label" : "replicate", "tail" : "(n: Int)(tx: STM[E, A]): Iterable[STM[E, A]]", "member" : "zio.stm.STM.replicate", "link" : "zio\/stm\/STM$.html#replicate[E,A](n:Int)(tx:zio.stm.STM[E,A]):Iterable[zio.stm.STM[E,A]]", "kind" : "def"}, {"label" : "reduceAll", "tail" : "(a: STM[E, A], as: Iterable[STM[E, A]])(f: (A, A) => A): STM[E, A]", "member" : "zio.stm.STM.reduceAll", "link" : "zio\/stm\/STM$.html#reduceAll[E,A](a:zio.stm.STM[E,A],as:Iterable[zio.stm.STM[E,A]])(f:(A,A)=>A):zio.stm.STM[E,A]", "kind" : "def"}, {"label" : "partition", "tail" : "(in: Iterable[A])(f: (A) => STM[E, B])(ev: CanFail[E]): STM[Nothing, (Iterable[E], Iterable[B])]", "member" : "zio.stm.STM.partition", "link" : "zio\/stm\/STM$.html#partition[E,A,B](in:Iterable[A])(f:A=>zio.stm.STM[E,B])(implicitev:zio.CanFail[E]):zio.stm.STM[Nothing,(Iterable[E],Iterable[B])]", "kind" : "def"}, {"label" : "partial", "tail" : "(a: => A): STM[Throwable, A]", "member" : "zio.stm.STM.partial", "link" : "zio\/stm\/STM$.html#partial[A](a:=>A):zio.stm.STM[Throwable,A]", "kind" : "def"}, {"label" : "none", "tail" : ": USTM[Option[Nothing]]", "member" : "zio.stm.STM.none", "link" : "zio\/stm\/STM$.html#none:zio.stm.USTM[Option[Nothing]]", "kind" : "val"}, {"label" : "mergeAll", "tail" : "(in: Iterable[STM[E, A]])(zero: B)(f: (B, A) => B): STM[E, B]", "member" : "zio.stm.STM.mergeAll", "link" : "zio\/stm\/STM$.html#mergeAll[E,A,B](in:Iterable[zio.stm.STM[E,A]])(zero:B)(f:(B,A)=>B):zio.stm.STM[E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(tx1: STM[E, A], tx2: STM[E, B], tx3: STM[E, C], tx4: STM[E, D])(f: (A, B, C, D) => F): STM[E, F]", "member" : "zio.stm.STM.mapN", "link" : "zio\/stm\/STM$.html#mapN[E,A,B,C,D,F](tx1:zio.stm.STM[E,A],tx2:zio.stm.STM[E,B],tx3:zio.stm.STM[E,C],tx4:zio.stm.STM[E,D])(f:(A,B,C,D)=>F):zio.stm.STM[E,F]", "kind" : "def"}, {"label" : "mapN", "tail" : "(tx1: STM[E, A], tx2: STM[E, B], tx3: STM[E, C])(f: (A, B, C) => D): STM[E, D]", "member" : "zio.stm.STM.mapN", "link" : "zio\/stm\/STM$.html#mapN[E,A,B,C,D](tx1:zio.stm.STM[E,A],tx2:zio.stm.STM[E,B],tx3:zio.stm.STM[E,C])(f:(A,B,C)=>D):zio.stm.STM[E,D]", "kind" : "def"}, {"label" : "mapN", "tail" : "(tx1: STM[E, A], tx2: STM[E, B])(f: (A, B) => C): STM[E, C]", "member" : "zio.stm.STM.mapN", "link" : "zio\/stm\/STM$.html#mapN[E,A,B,C](tx1:zio.stm.STM[E,A],tx2:zio.stm.STM[E,B])(f:(A,B)=>C):zio.stm.STM[E,C]", "kind" : "def"}, {"label" : "loopDiscard", "tail" : "(initial: S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => STM[E, Any]): STM[E, Unit]", "member" : "zio.stm.STM.loopDiscard", "link" : "zio\/stm\/STM$.html#loopDiscard[E,S](initial:S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.stm.STM[E,Any]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "loop_", "tail" : "(initial: S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => STM[E, Any]): STM[E, Unit]", "member" : "zio.stm.STM.loop_", "link" : "zio\/stm\/STM$.html#loop_[E,S](initial:S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.stm.STM[E,Any]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "loop", "tail" : "(initial: S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => STM[E, A]): STM[E, List[A]]", "member" : "zio.stm.STM.loop", "link" : "zio\/stm\/STM$.html#loop[E,A,S](initial:S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.stm.STM[E,A]):zio.stm.STM[E,List[A]]", "kind" : "def"}, {"label" : "left", "tail" : "(a: => A): USTM[Either[A, Nothing]]", "member" : "zio.stm.STM.left", "link" : "zio\/stm\/STM$.html#left[A](a:=>A):zio.stm.USTM[Either[A,Nothing]]", "kind" : "def"}, {"label" : "iterate", "tail" : "(initial: S)(cont: (S) => Boolean)(body: (S) => STM[E, S]): STM[E, S]", "member" : "zio.stm.STM.iterate", "link" : "zio\/stm\/STM$.html#iterate[E,S](initial:S)(cont:S=>Boolean)(body:S=>zio.stm.STM[E,S]):zio.stm.STM[E,S]", "kind" : "def"}, {"label" : "ifSTM", "tail" : "(b: STM[E, Boolean]): IfSTM[Any, E]", "member" : "zio.stm.STM.ifSTM", "link" : "zio\/stm\/STM$.html#ifSTM[E](b:zio.stm.STM[E,Boolean]):zio.stm.ZSTM.IfSTM[Any,E]", "kind" : "def"}, {"label" : "ifM", "tail" : "(b: STM[E, Boolean]): IfSTM[Any, E]", "member" : "zio.stm.STM.ifM", "link" : "zio\/stm\/STM$.html#ifM[E](b:zio.stm.STM[E,Boolean]):zio.stm.ZSTM.IfSTM[Any,E]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(a: => Try[A]): TaskSTM[A]", "member" : "zio.stm.STM.fromTry", "link" : "zio\/stm\/STM$.html#fromTry[A](a:=>scala.util.Try[A]):zio.stm.TaskSTM[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(v: => Option[A]): STM[Option[Nothing], A]", "member" : "zio.stm.STM.fromOption", "link" : "zio\/stm\/STM$.html#fromOption[A](v:=>Option[A]):zio.stm.STM[Option[Nothing],A]", "kind" : "def"}, {"label" : "fromFunctionM", "tail" : "(f: (Any) => STM[E, A]): STM[E, A]", "member" : "zio.stm.STM.fromFunctionM", "link" : "zio\/stm\/STM$.html#fromFunctionM[E,A](f:Any=>zio.stm.STM[E,A]):zio.stm.STM[E,A]", "kind" : "def"}, {"label" : "fromFunction", "tail" : "(f: (Any) => A): USTM[A]", "member" : "zio.stm.STM.fromFunction", "link" : "zio\/stm\/STM$.html#fromFunction[A](f:Any=>A):zio.stm.USTM[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(e: => Either[E, A]): STM[E, A]", "member" : "zio.stm.STM.fromEither", "link" : "zio\/stm\/STM$.html#fromEither[E,A](e:=>Either[E,A]):zio.stm.STM[E,A]", "kind" : "def"}, {"label" : "foreachDiscard", "tail" : "(in: Iterable[A])(f: (A) => STM[E, Any]): STM[E, Unit]", "member" : "zio.stm.STM.foreachDiscard", "link" : "zio\/stm\/STM$.html#foreachDiscard[E,A](in:Iterable[A])(f:A=>zio.stm.STM[E,Any]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "foreach_", "tail" : "(in: Iterable[A])(f: (A) => STM[E, Any]): STM[E, Unit]", "member" : "zio.stm.STM.foreach_", "link" : "zio\/stm\/STM$.html#foreach_[E,A](in:Iterable[A])(f:A=>zio.stm.STM[E,Any]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Set[A])(f: (A) => STM[E, B]): STM[E, Set[B]]", "member" : "zio.stm.STM.foreach", "link" : "zio\/stm\/STM$.html#foreach[E,A,B](in:Set[A])(f:A=>zio.stm.STM[E,B]):zio.stm.STM[E,Set[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Collection[A])(f: (A) => STM[E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): STM[E, Collection[B]]", "member" : "zio.stm.STM.foreach", "link" : "zio\/stm\/STM$.html#foreach[E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.stm.STM[E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.stm.STM[E,Collection[B]]", "kind" : "def"}, {"label" : "forall", "tail" : "(as: Iterable[A])(f: (A) => ZSTM[R, E, Boolean]): ZSTM[R, E, Boolean]", "member" : "zio.stm.STM.forall", "link" : "zio\/stm\/STM$.html#forall[R,E,A](as:Iterable[A])(f:A=>zio.stm.ZSTM[R,E,Boolean]):zio.stm.ZSTM[R,E,Boolean]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(in: Iterable[A])(zero: S)(f: (A, S) => STM[E, S]): STM[E, S]", "member" : "zio.stm.STM.foldRight", "link" : "zio\/stm\/STM$.html#foldRight[E,S,A](in:Iterable[A])(zero:S)(f:(A,S)=>zio.stm.STM[E,S]):zio.stm.STM[E,S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(in: Iterable[A])(zero: S)(f: (S, A) => STM[E, S]): STM[E, S]", "member" : "zio.stm.STM.foldLeft", "link" : "zio\/stm\/STM$.html#foldLeft[E,S,A](in:Iterable[A])(zero:S)(f:(S,A)=>zio.stm.STM[E,S]):zio.stm.STM[E,S]", "kind" : "def"}, {"label" : "flatten", "tail" : "(task: STM[E, STM[E, A]]): STM[E, A]", "member" : "zio.stm.STM.flatten", "link" : "zio\/stm\/STM$.html#flatten[E,A](task:zio.stm.STM[E,zio.stm.STM[E,A]]):zio.stm.STM[E,A]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Set[A])(f: (A) => STM[E, Boolean]): STM[E, Set[A]]", "member" : "zio.stm.STM.filterNot", "link" : "zio\/stm\/STM$.html#filterNot[E,A](as:Set[A])(f:A=>zio.stm.STM[E,Boolean]):zio.stm.STM[E,Set[A]]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Collection[A])(f: (A) => STM[E, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): STM[E, Collection[A]]", "member" : "zio.stm.STM.filterNot", "link" : "zio\/stm\/STM$.html#filterNot[E,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.stm.STM[E,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.stm.STM[E,Collection[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Set[A])(f: (A) => STM[E, Boolean]): STM[E, Set[A]]", "member" : "zio.stm.STM.filter", "link" : "zio\/stm\/STM$.html#filter[E,A](as:Set[A])(f:A=>zio.stm.STM[E,Boolean]):zio.stm.STM[E,Set[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Collection[A])(f: (A) => STM[E, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): STM[E, Collection[A]]", "member" : "zio.stm.STM.filter", "link" : "zio\/stm\/STM$.html#filter[E,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.stm.STM[E,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.stm.STM[E,Collection[A]]", "kind" : "def"}, {"label" : "fiberId", "tail" : ": USTM[FiberId]", "member" : "zio.stm.STM.fiberId", "link" : "zio\/stm\/STM$.html#fiberId:zio.stm.USTM[zio.FiberId]", "kind" : "val"}, {"label" : "fail", "tail" : "(e: => E): STM[E, Nothing]", "member" : "zio.stm.STM.fail", "link" : "zio\/stm\/STM$.html#fail[E](e:=>E):zio.stm.STM[E,Nothing]", "kind" : "def"}, {"label" : "exists", "tail" : "(as: Iterable[A])(f: (A) => STM[E, Boolean]): STM[E, Boolean]", "member" : "zio.stm.STM.exists", "link" : "zio\/stm\/STM$.html#exists[E,A](as:Iterable[A])(f:A=>zio.stm.STM[E,Boolean]):zio.stm.STM[E,Boolean]", "kind" : "def"}, {"label" : "done", "tail" : "(exit: => TExit[E, A]): STM[E, A]", "member" : "zio.stm.STM.done", "link" : "zio\/stm\/STM$.html#done[E,A](exit:=>zio.stm.ZSTM.internal.TExit[E,A]):zio.stm.STM[E,A]", "kind" : "def"}, {"label" : "dieMessage", "tail" : "(m: => String): USTM[Nothing]", "member" : "zio.stm.STM.dieMessage", "link" : "zio\/stm\/STM$.html#dieMessage(m:=>String):zio.stm.USTM[Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(t: => Throwable): USTM[Nothing]", "member" : "zio.stm.STM.die", "link" : "zio\/stm\/STM$.html#die(t:=>Throwable):zio.stm.USTM[Nothing]", "kind" : "def"}, {"label" : "cond", "tail" : "(predicate: Boolean, result: => A, error: => E): STM[E, A]", "member" : "zio.stm.STM.cond", "link" : "zio\/stm\/STM$.html#cond[E,A](predicate:Boolean,result:=>A,error:=>E):zio.stm.STM[E,A]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(as: Iterable[A])(f: (A) => STM[E, Option[B]]): STM[E, Option[B]]", "member" : "zio.stm.STM.collectFirst", "link" : "zio\/stm\/STM$.html#collectFirst[E,A,B](as:Iterable[A])(f:A=>zio.stm.STM[E,Option[B]]):zio.stm.STM[E,Option[B]]", "kind" : "def"}, {"label" : "collectAllDiscard", "tail" : "(in: Iterable[STM[E, A]]): STM[E, Unit]", "member" : "zio.stm.STM.collectAllDiscard", "link" : "zio\/stm\/STM$.html#collectAllDiscard[E,A](in:Iterable[zio.stm.STM[E,A]]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "collectAll_", "tail" : "(in: Iterable[STM[E, A]]): STM[E, Unit]", "member" : "zio.stm.STM.collectAll_", "link" : "zio\/stm\/STM$.html#collectAll_[E,A](in:Iterable[zio.stm.STM[E,A]]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Set[STM[E, A]]): STM[E, Set[A]]", "member" : "zio.stm.STM.collectAll", "link" : "zio\/stm\/STM$.html#collectAll[E,A](in:Set[zio.stm.STM[E,A]]):zio.stm.STM[E,Set[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Collection[STM[E, A]])(bf: zio.BuildFrom[Collection[STM[E, A]], A, Collection[A]]): STM[E, Collection[A]]", "member" : "zio.stm.STM.collectAll", "link" : "zio\/stm\/STM$.html#collectAll[E,A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.stm.STM[E,A]])(implicitbf:zio.BuildFrom[Collection[zio.stm.STM[E,A]],A,Collection[A]]):zio.stm.STM[E,Collection[A]]", "kind" : "def"}, {"label" : "check", "tail" : "(p: => Boolean): USTM[Unit]", "member" : "zio.stm.STM.check", "link" : "zio\/stm\/STM$.html#check(p:=>Boolean):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "attempt", "tail" : "(a: => A): STM[Throwable, A]", "member" : "zio.stm.STM.attempt", "link" : "zio\/stm\/STM$.html#attempt[A](a:=>A):zio.stm.STM[Throwable,A]", "kind" : "def"}, {"label" : "atomically", "tail" : "(stm: STM[E, A]): IO[E, A]", "member" : "zio.stm.STM.atomically", "link" : "zio\/stm\/STM$.html#atomically[E,A](stm:zio.stm.STM[E,A]):zio.IO[E,A]", "kind" : "def"}, {"label" : "absolve", "tail" : "(e: STM[E, Either[E, A]]): STM[E, A]", "member" : "zio.stm.STM.absolve", "link" : "zio\/stm\/STM$.html#absolve[E,A](e:zio.stm.STM[E,Either[E,A]]):zio.stm.STM[E,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/STM$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/STM$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/STM$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/STM$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/STM$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/STM$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/STM$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/STM$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/STM$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/STM$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/STM$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/STM$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/STM$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/STM$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/STM$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/STM$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/STM$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/STM$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/STM$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.stm.TArray", "shortDescription" : "Wraps array of TRef and adds methods for convenience.", "object" : "zio\/stm\/TArray$.html", "members_class" : [{"label" : "updateSTM", "tail" : "(index: Int, fn: (A) => STM[E, A]): STM[E, Unit]", "member" : "zio.stm.TArray.updateSTM", "link" : "zio\/stm\/TArray.html#updateSTM[E](index:Int,fn:A=>zio.stm.STM[E,A]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "updateM", "tail" : "(index: Int, fn: (A) => STM[E, A]): STM[E, Unit]", "member" : "zio.stm.TArray.updateM", "link" : "zio\/stm\/TArray.html#updateM[E](index:Int,fn:A=>zio.stm.STM[E,A]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "update", "tail" : "(index: Int, fn: (A) => A): USTM[Unit]", "member" : "zio.stm.TArray.update", "link" : "zio\/stm\/TArray.html#update(index:Int,fn:A=>A):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "transformSTM", "tail" : "(f: (A) => STM[E, A]): STM[E, Unit]", "member" : "zio.stm.TArray.transformSTM", "link" : "zio\/stm\/TArray.html#transformSTM[E](f:A=>zio.stm.STM[E,A]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "transformM", "tail" : "(f: (A) => STM[E, A]): STM[E, Unit]", "member" : "zio.stm.TArray.transformM", "link" : "zio\/stm\/TArray.html#transformM[E](f:A=>zio.stm.STM[E,A]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (A) => A): USTM[Unit]", "member" : "zio.stm.TArray.transform", "link" : "zio\/stm\/TArray.html#transform(f:A=>A):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "toChunk", "tail" : "(): USTM[Chunk[A]]", "member" : "zio.stm.TArray.toChunk", "link" : "zio\/stm\/TArray.html#toChunk:zio.stm.USTM[zio.Chunk[A]]", "kind" : "def"}, {"label" : "toList", "tail" : "(): USTM[List[A]]", "member" : "zio.stm.TArray.toList", "link" : "zio\/stm\/TArray.html#toList:zio.stm.USTM[List[A]]", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "zio.stm.TArray.size", "link" : "zio\/stm\/TArray.html#size:Int", "kind" : "def"}, {"label" : "reduceOptionSTM", "tail" : "(op: (A, A) => STM[E, A]): STM[E, Option[A]]", "member" : "zio.stm.TArray.reduceOptionSTM", "link" : "zio\/stm\/TArray.html#reduceOptionSTM[E](op:(A,A)=>zio.stm.STM[E,A]):zio.stm.STM[E,Option[A]]", "kind" : "def"}, {"label" : "reduceOptionM", "tail" : "(op: (A, A) => STM[E, A]): STM[E, Option[A]]", "member" : "zio.stm.TArray.reduceOptionM", "link" : "zio\/stm\/TArray.html#reduceOptionM[E](op:(A,A)=>zio.stm.STM[E,A]):zio.stm.STM[E,Option[A]]", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A, A) => A): USTM[Option[A]]", "member" : "zio.stm.TArray.reduceOption", "link" : "zio\/stm\/TArray.html#reduceOption(op:(A,A)=>A):zio.stm.USTM[Option[A]]", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: Ordering[A]): USTM[Option[A]]", "member" : "zio.stm.TArray.minOption", "link" : "zio\/stm\/TArray.html#minOption(implicitord:Ordering[A]):zio.stm.USTM[Option[A]]", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: Ordering[A]): USTM[Option[A]]", "member" : "zio.stm.TArray.maxOption", "link" : "zio\/stm\/TArray.html#maxOption(implicitord:Ordering[A]):zio.stm.USTM[Option[A]]", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): USTM[Option[A]]", "member" : "zio.stm.TArray.lastOption", "link" : "zio\/stm\/TArray.html#lastOption:zio.stm.USTM[Option[A]]", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(a: A, end: Int): USTM[Int]", "member" : "zio.stm.TArray.lastIndexOf", "link" : "zio\/stm\/TArray.html#lastIndexOf(a:A,end:Int):zio.stm.USTM[Int]", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(a: A): USTM[Int]", "member" : "zio.stm.TArray.lastIndexOf", "link" : "zio\/stm\/TArray.html#lastIndexOf(a:A):zio.stm.USTM[Int]", "kind" : "def"}, {"label" : "indexWhereSTM", "tail" : "(p: (A) => STM[E, Boolean], from: Int): STM[E, Int]", "member" : "zio.stm.TArray.indexWhereSTM", "link" : "zio\/stm\/TArray.html#indexWhereSTM[E](p:A=>zio.stm.STM[E,Boolean],from:Int):zio.stm.STM[E,Int]", "kind" : "def"}, {"label" : "indexWhereM", "tail" : "(p: (A) => STM[E, Boolean], from: Int): STM[E, Int]", "member" : "zio.stm.TArray.indexWhereM", "link" : "zio\/stm\/TArray.html#indexWhereM[E](p:A=>zio.stm.STM[E,Boolean],from:Int):zio.stm.STM[E,Int]", "kind" : "def"}, {"label" : "indexWhereSTM", "tail" : "(p: (A) => STM[E, Boolean]): STM[E, Int]", "member" : "zio.stm.TArray.indexWhereSTM", "link" : "zio\/stm\/TArray.html#indexWhereSTM[E](p:A=>zio.stm.STM[E,Boolean]):zio.stm.STM[E,Int]", "kind" : "def"}, {"label" : "indexWhereM", "tail" : "(p: (A) => STM[E, Boolean]): STM[E, Int]", "member" : "zio.stm.TArray.indexWhereM", "link" : "zio\/stm\/TArray.html#indexWhereM[E](p:A=>zio.stm.STM[E,Boolean]):zio.stm.STM[E,Int]", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (A) => Boolean, from: Int): USTM[Int]", "member" : "zio.stm.TArray.indexWhere", "link" : "zio\/stm\/TArray.html#indexWhere(p:A=>Boolean,from:Int):zio.stm.USTM[Int]", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (A) => Boolean): USTM[Int]", "member" : "zio.stm.TArray.indexWhere", "link" : "zio\/stm\/TArray.html#indexWhere(p:A=>Boolean):zio.stm.USTM[Int]", "kind" : "def"}, {"label" : "indexOf", "tail" : "(a: A, from: Int): USTM[Int]", "member" : "zio.stm.TArray.indexOf", "link" : "zio\/stm\/TArray.html#indexOf(a:A,from:Int):zio.stm.USTM[Int]", "kind" : "def"}, {"label" : "indexOf", "tail" : "(a: A): USTM[Int]", "member" : "zio.stm.TArray.indexOf", "link" : "zio\/stm\/TArray.html#indexOf(a:A):zio.stm.USTM[Int]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => STM[E, Unit]): STM[E, Unit]", "member" : "zio.stm.TArray.foreach", "link" : "zio\/stm\/TArray.html#foreach[E](f:A=>zio.stm.STM[E,Unit]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "forallSTM", "tail" : "(p: (A) => STM[E, Boolean]): STM[E, Boolean]", "member" : "zio.stm.TArray.forallSTM", "link" : "zio\/stm\/TArray.html#forallSTM[E](p:A=>zio.stm.STM[E,Boolean]):zio.stm.STM[E,Boolean]", "kind" : "def"}, {"label" : "forallM", "tail" : "(p: (A) => STM[E, Boolean]): STM[E, Boolean]", "member" : "zio.stm.TArray.forallM", "link" : "zio\/stm\/TArray.html#forallM[E](p:A=>zio.stm.STM[E,Boolean]):zio.stm.STM[E,Boolean]", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): USTM[Boolean]", "member" : "zio.stm.TArray.forall", "link" : "zio\/stm\/TArray.html#forall(p:A=>Boolean):zio.stm.USTM[Boolean]", "kind" : "def"}, {"label" : "foldSTM", "tail" : "(zero: Z)(op: (Z, A) => STM[E, Z]): STM[E, Z]", "member" : "zio.stm.TArray.foldSTM", "link" : "zio\/stm\/TArray.html#foldSTM[E,Z](zero:Z)(op:(Z,A)=>zio.stm.STM[E,Z]):zio.stm.STM[E,Z]", "kind" : "def"}, {"label" : "foldM", "tail" : "(zero: Z)(op: (Z, A) => STM[E, Z]): STM[E, Z]", "member" : "zio.stm.TArray.foldM", "link" : "zio\/stm\/TArray.html#foldM[E,Z](zero:Z)(op:(Z,A)=>zio.stm.STM[E,Z]):zio.stm.STM[E,Z]", "kind" : "def"}, {"label" : "fold", "tail" : "(zero: Z)(op: (Z, A) => Z): USTM[Z]", "member" : "zio.stm.TArray.fold", "link" : "zio\/stm\/TArray.html#fold[Z](zero:Z)(op:(Z,A)=>Z):zio.stm.USTM[Z]", "kind" : "def"}, {"label" : "firstOption", "tail" : "(): USTM[Option[A]]", "member" : "zio.stm.TArray.firstOption", "link" : "zio\/stm\/TArray.html#firstOption:zio.stm.USTM[Option[A]]", "kind" : "def"}, {"label" : "findSTM", "tail" : "(p: (A) => STM[E, Boolean]): STM[E, Option[A]]", "member" : "zio.stm.TArray.findSTM", "link" : "zio\/stm\/TArray.html#findSTM[E](p:A=>zio.stm.STM[E,Boolean]):zio.stm.STM[E,Option[A]]", "kind" : "def"}, {"label" : "findM", "tail" : "(p: (A) => STM[E, Boolean]): STM[E, Option[A]]", "member" : "zio.stm.TArray.findM", "link" : "zio\/stm\/TArray.html#findM[E](p:A=>zio.stm.STM[E,Boolean]):zio.stm.STM[E,Option[A]]", "kind" : "def"}, {"label" : "findLastSTM", "tail" : "(p: (A) => STM[E, Boolean]): STM[E, Option[A]]", "member" : "zio.stm.TArray.findLastSTM", "link" : "zio\/stm\/TArray.html#findLastSTM[E](p:A=>zio.stm.STM[E,Boolean]):zio.stm.STM[E,Option[A]]", "kind" : "def"}, {"label" : "findLastM", "tail" : "(p: (A) => STM[E, Boolean]): STM[E, Option[A]]", "member" : "zio.stm.TArray.findLastM", "link" : "zio\/stm\/TArray.html#findLastM[E](p:A=>zio.stm.STM[E,Boolean]):zio.stm.STM[E,Option[A]]", "kind" : "def"}, {"label" : "findLast", "tail" : "(p: (A) => Boolean): USTM[Option[A]]", "member" : "zio.stm.TArray.findLast", "link" : "zio\/stm\/TArray.html#findLast(p:A=>Boolean):zio.stm.USTM[Option[A]]", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): USTM[Option[A]]", "member" : "zio.stm.TArray.find", "link" : "zio\/stm\/TArray.html#find(p:A=>Boolean):zio.stm.USTM[Option[A]]", "kind" : "def"}, {"label" : "existsSTM", "tail" : "(p: (A) => STM[E, Boolean]): STM[E, Boolean]", "member" : "zio.stm.TArray.existsSTM", "link" : "zio\/stm\/TArray.html#existsSTM[E](p:A=>zio.stm.STM[E,Boolean]):zio.stm.STM[E,Boolean]", "kind" : "def"}, {"label" : "existsM", "tail" : "(p: (A) => STM[E, Boolean]): STM[E, Boolean]", "member" : "zio.stm.TArray.existsM", "link" : "zio\/stm\/TArray.html#existsM[E](p:A=>zio.stm.STM[E,Boolean]):zio.stm.STM[E,Boolean]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): USTM[Boolean]", "member" : "zio.stm.TArray.exists", "link" : "zio\/stm\/TArray.html#exists(p:A=>Boolean):zio.stm.USTM[Boolean]", "kind" : "def"}, {"label" : "countSTM", "tail" : "(p: (A) => STM[E, Boolean]): STM[E, Int]", "member" : "zio.stm.TArray.countSTM", "link" : "zio\/stm\/TArray.html#countSTM[E](p:A=>zio.stm.STM[E,Boolean]):zio.stm.STM[E,Int]", "kind" : "def"}, {"label" : "countM", "tail" : "(p: (A) => STM[E, Boolean]): STM[E, Int]", "member" : "zio.stm.TArray.countM", "link" : "zio\/stm\/TArray.html#countM[E](p:A=>zio.stm.STM[E,Boolean]):zio.stm.STM[E,Int]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (A) => Boolean): USTM[Int]", "member" : "zio.stm.TArray.count", "link" : "zio\/stm\/TArray.html#count(p:A=>Boolean):zio.stm.USTM[Int]", "kind" : "def"}, {"label" : "contains", "tail" : "(a: A): USTM[Boolean]", "member" : "zio.stm.TArray.contains", "link" : "zio\/stm\/TArray.html#contains(a:A):zio.stm.USTM[Boolean]", "kind" : "def"}, {"label" : "collectFirstSTM", "tail" : "(pf: PartialFunction[A, STM[E, B]]): STM[E, Option[B]]", "member" : "zio.stm.TArray.collectFirstSTM", "link" : "zio\/stm\/TArray.html#collectFirstSTM[E,B](pf:PartialFunction[A,zio.stm.STM[E,B]]):zio.stm.STM[E,Option[B]]", "kind" : "def"}, {"label" : "collectFirstM", "tail" : "(pf: PartialFunction[A, STM[E, B]]): STM[E, Option[B]]", "member" : "zio.stm.TArray.collectFirstM", "link" : "zio\/stm\/TArray.html#collectFirstM[E,B](pf:PartialFunction[A,zio.stm.STM[E,B]]):zio.stm.STM[E,Option[B]]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[A, B]): USTM[Option[B]]", "member" : "zio.stm.TArray.collectFirst", "link" : "zio\/stm\/TArray.html#collectFirst[B](pf:PartialFunction[A,B]):zio.stm.USTM[Option[B]]", "kind" : "def"}, {"label" : "apply", "tail" : "(index: Int): USTM[A]", "member" : "zio.stm.TArray.apply", "link" : "zio\/stm\/TArray.html#apply(index:Int):zio.stm.USTM[A]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "zio\/stm\/TArray.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "zio\/stm\/TArray.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TArray.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TArray.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "zio\/stm\/TArray.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "zio\/stm\/TArray.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "zio\/stm\/TArray.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fromIterable", "tail" : "(data: Iterable[A]): USTM[TArray[A]]", "member" : "zio.stm.TArray.fromIterable", "link" : "zio\/stm\/TArray$.html#fromIterable[A](data:Iterable[A]):zio.stm.USTM[zio.stm.TArray[A]]", "kind" : "def"}, {"label" : "empty", "tail" : "(): USTM[TArray[A]]", "member" : "zio.stm.TArray.empty", "link" : "zio\/stm\/TArray$.html#empty[A]:zio.stm.USTM[zio.stm.TArray[A]]", "kind" : "def"}, {"label" : "make", "tail" : "(data: A*): USTM[TArray[A]]", "member" : "zio.stm.TArray.make", "link" : "zio\/stm\/TArray$.html#make[A](data:A*):zio.stm.USTM[zio.stm.TArray[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/TArray$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/TArray$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/TArray$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/TArray$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/TArray$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/TArray$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/TArray$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TArray$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TArray$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TArray$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/TArray$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/TArray$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/TArray$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/TArray$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/TArray$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/TArray$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/TArray$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TArray$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TArray$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stm\/TArray.html", "kind" : "class"}, {"name" : "zio.stm.TMap", "shortDescription" : "Transactional map implemented on top of TRef and TArray.", "object" : "zio\/stm\/TMap$.html", "members_class" : [{"label" : "values", "tail" : "(): USTM[List[V]]", "member" : "zio.stm.TMap.values", "link" : "zio\/stm\/TMap.html#values:zio.stm.USTM[List[V]]", "kind" : "def"}, {"label" : "transformValuesSTM", "tail" : "(f: (V) => STM[E, V]): STM[E, Unit]", "member" : "zio.stm.TMap.transformValuesSTM", "link" : "zio\/stm\/TMap.html#transformValuesSTM[E](f:V=>zio.stm.STM[E,V]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "transformValuesM", "tail" : "(f: (V) => STM[E, V]): STM[E, Unit]", "member" : "zio.stm.TMap.transformValuesM", "link" : "zio\/stm\/TMap.html#transformValuesM[E](f:V=>zio.stm.STM[E,V]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "transformValues", "tail" : "(f: (V) => V): USTM[Unit]", "member" : "zio.stm.TMap.transformValues", "link" : "zio\/stm\/TMap.html#transformValues(f:V=>V):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "transformSTM", "tail" : "(f: (K, V) => STM[E, (K, V)]): STM[E, Unit]", "member" : "zio.stm.TMap.transformSTM", "link" : "zio\/stm\/TMap.html#transformSTM[E](f:(K,V)=>zio.stm.STM[E,(K,V)]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "transformM", "tail" : "(f: (K, V) => STM[E, (K, V)]): STM[E, Unit]", "member" : "zio.stm.TMap.transformM", "link" : "zio\/stm\/TMap.html#transformM[E](f:(K,V)=>zio.stm.STM[E,(K,V)]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (K, V) => (K, V)): USTM[Unit]", "member" : "zio.stm.TMap.transform", "link" : "zio\/stm\/TMap.html#transform(f:(K,V)=>(K,V)):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "toMap", "tail" : "(): USTM[Map[K, V]]", "member" : "zio.stm.TMap.toMap", "link" : "zio\/stm\/TMap.html#toMap:zio.stm.USTM[Map[K,V]]", "kind" : "def"}, {"label" : "toChunk", "tail" : "(): USTM[Chunk[(K, V)]]", "member" : "zio.stm.TMap.toChunk", "link" : "zio\/stm\/TMap.html#toChunk:zio.stm.USTM[zio.Chunk[(K,V)]]", "kind" : "def"}, {"label" : "toList", "tail" : "(): USTM[List[(K, V)]]", "member" : "zio.stm.TMap.toList", "link" : "zio\/stm\/TMap.html#toList:zio.stm.USTM[List[(K,V)]]", "kind" : "def"}, {"label" : "size", "tail" : ": USTM[Int]", "member" : "zio.stm.TMap.size", "link" : "zio\/stm\/TMap.html#size:zio.stm.USTM[Int]", "kind" : "val"}, {"label" : "retainIf", "tail" : "(p: (K, V) => Boolean): USTM[Unit]", "member" : "zio.stm.TMap.retainIf", "link" : "zio\/stm\/TMap.html#retainIf(p:(K,V)=>Boolean):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "removeIf", "tail" : "(p: (K, V) => Boolean): USTM[Unit]", "member" : "zio.stm.TMap.removeIf", "link" : "zio\/stm\/TMap.html#removeIf(p:(K,V)=>Boolean):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "putIfAbsent", "tail" : "(k: K, v: V): USTM[Unit]", "member" : "zio.stm.TMap.putIfAbsent", "link" : "zio\/stm\/TMap.html#putIfAbsent(k:K,v:V):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "put", "tail" : "(k: K, v: V): USTM[Unit]", "member" : "zio.stm.TMap.put", "link" : "zio\/stm\/TMap.html#put(k:K,v:V):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "merge", "tail" : "(k: K, v: V)(f: (V, V) => V): USTM[V]", "member" : "zio.stm.TMap.merge", "link" : "zio\/stm\/TMap.html#merge(k:K,v:V)(f:(V,V)=>V):zio.stm.USTM[V]", "kind" : "def"}, {"label" : "keys", "tail" : "(): USTM[List[K]]", "member" : "zio.stm.TMap.keys", "link" : "zio\/stm\/TMap.html#keys:zio.stm.USTM[List[K]]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(k: K, default: => V): USTM[V]", "member" : "zio.stm.TMap.getOrElse", "link" : "zio\/stm\/TMap.html#getOrElse(k:K,default:=>V):zio.stm.USTM[V]", "kind" : "def"}, {"label" : "get", "tail" : "(k: K): USTM[Option[V]]", "member" : "zio.stm.TMap.get", "link" : "zio\/stm\/TMap.html#get(k:K):zio.stm.USTM[Option[V]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (K, V) => STM[E, Unit]): STM[E, Unit]", "member" : "zio.stm.TMap.foreach", "link" : "zio\/stm\/TMap.html#foreach[E](f:(K,V)=>zio.stm.STM[E,Unit]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "foldSTM", "tail" : "(zero: A)(op: (A, (K, V)) => STM[E, A]): STM[E, A]", "member" : "zio.stm.TMap.foldSTM", "link" : "zio\/stm\/TMap.html#foldSTM[A,E](zero:A)(op:(A,(K,V))=>zio.stm.STM[E,A]):zio.stm.STM[E,A]", "kind" : "def"}, {"label" : "foldM", "tail" : "(zero: A)(op: (A, (K, V)) => STM[E, A]): STM[E, A]", "member" : "zio.stm.TMap.foldM", "link" : "zio\/stm\/TMap.html#foldM[A,E](zero:A)(op:(A,(K,V))=>zio.stm.STM[E,A]):zio.stm.STM[E,A]", "kind" : "def"}, {"label" : "fold", "tail" : "(zero: A)(op: (A, (K, V)) => A): USTM[A]", "member" : "zio.stm.TMap.fold", "link" : "zio\/stm\/TMap.html#fold[A](zero:A)(op:(A,(K,V))=>A):zio.stm.USTM[A]", "kind" : "def"}, {"label" : "delete", "tail" : "(k: K): USTM[Unit]", "member" : "zio.stm.TMap.delete", "link" : "zio\/stm\/TMap.html#delete(k:K):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): USTM[Boolean]", "member" : "zio.stm.TMap.isEmpty", "link" : "zio\/stm\/TMap.html#isEmpty:zio.stm.USTM[Boolean]", "kind" : "def"}, {"label" : "contains", "tail" : "(k: K): USTM[Boolean]", "member" : "zio.stm.TMap.contains", "link" : "zio\/stm\/TMap.html#contains(k:K):zio.stm.USTM[Boolean]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/TMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/TMap.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/TMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/TMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/TMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/TMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/TMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/TMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/TMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/TMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/TMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/TMap.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/TMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/TMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "make", "tail" : "(data: (K, V)*): USTM[TMap[K, V]]", "member" : "zio.stm.TMap.make", "link" : "zio\/stm\/TMap$.html#make[K,V](data:(K,V)*):zio.stm.USTM[zio.stm.TMap[K,V]]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(data: Iterable[(K, V)]): USTM[TMap[K, V]]", "member" : "zio.stm.TMap.fromIterable", "link" : "zio\/stm\/TMap$.html#fromIterable[K,V](data:Iterable[(K,V)]):zio.stm.USTM[zio.stm.TMap[K,V]]", "kind" : "def"}, {"label" : "empty", "tail" : "(): USTM[TMap[K, V]]", "member" : "zio.stm.TMap.empty", "link" : "zio\/stm\/TMap$.html#empty[K,V]:zio.stm.USTM[zio.stm.TMap[K,V]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/TMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/TMap$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/TMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/TMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/TMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/TMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/TMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/TMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/TMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/TMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/TMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/TMap$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/TMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/TMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stm\/TMap.html", "kind" : "class"}, {"name" : "zio.stm.TPriorityQueue", "shortDescription" : "A TPriorityQueue contains values of type A that an Ordering is definedon.", "object" : "zio\/stm\/TPriorityQueue$.html", "members_class" : [{"label" : "toVector", "tail" : "(): USTM[Vector[A]]", "member" : "zio.stm.TPriorityQueue.toVector", "link" : "zio\/stm\/TPriorityQueue.html#toVector:zio.stm.USTM[Vector[A]]", "kind" : "def"}, {"label" : "toList", "tail" : "(): USTM[List[A]]", "member" : "zio.stm.TPriorityQueue.toList", "link" : "zio\/stm\/TPriorityQueue.html#toList:zio.stm.USTM[List[A]]", "kind" : "def"}, {"label" : "toChunk", "tail" : "(): USTM[Chunk[A]]", "member" : "zio.stm.TPriorityQueue.toChunk", "link" : "zio\/stm\/TPriorityQueue.html#toChunk:zio.stm.USTM[zio.Chunk[A]]", "kind" : "def"}, {"label" : "takeOption", "tail" : "(): USTM[Option[A]]", "member" : "zio.stm.TPriorityQueue.takeOption", "link" : "zio\/stm\/TPriorityQueue.html#takeOption:zio.stm.USTM[Option[A]]", "kind" : "def"}, {"label" : "takeUpTo", "tail" : "(n: Int): USTM[Chunk[A]]", "member" : "zio.stm.TPriorityQueue.takeUpTo", "link" : "zio\/stm\/TPriorityQueue.html#takeUpTo(n:Int):zio.stm.USTM[zio.Chunk[A]]", "kind" : "def"}, {"label" : "takeAll", "tail" : "(): USTM[Chunk[A]]", "member" : "zio.stm.TPriorityQueue.takeAll", "link" : "zio\/stm\/TPriorityQueue.html#takeAll:zio.stm.USTM[zio.Chunk[A]]", "kind" : "def"}, {"label" : "take", "tail" : "(): USTM[A]", "member" : "zio.stm.TPriorityQueue.take", "link" : "zio\/stm\/TPriorityQueue.html#take:zio.stm.USTM[A]", "kind" : "def"}, {"label" : "size", "tail" : "(): USTM[Int]", "member" : "zio.stm.TPriorityQueue.size", "link" : "zio\/stm\/TPriorityQueue.html#size:zio.stm.USTM[Int]", "kind" : "def"}, {"label" : "retainIf", "tail" : "(f: (A) => Boolean): USTM[Unit]", "member" : "zio.stm.TPriorityQueue.retainIf", "link" : "zio\/stm\/TPriorityQueue.html#retainIf(f:A=>Boolean):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "removeIf", "tail" : "(f: (A) => Boolean): USTM[Unit]", "member" : "zio.stm.TPriorityQueue.removeIf", "link" : "zio\/stm\/TPriorityQueue.html#removeIf(f:A=>Boolean):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "peekOption", "tail" : "(): USTM[Option[A]]", "member" : "zio.stm.TPriorityQueue.peekOption", "link" : "zio\/stm\/TPriorityQueue.html#peekOption:zio.stm.USTM[Option[A]]", "kind" : "def"}, {"label" : "peek", "tail" : "(): USTM[A]", "member" : "zio.stm.TPriorityQueue.peek", "link" : "zio\/stm\/TPriorityQueue.html#peek:zio.stm.USTM[A]", "kind" : "def"}, {"label" : "offerAll", "tail" : "(values: Iterable[A]): USTM[Unit]", "member" : "zio.stm.TPriorityQueue.offerAll", "link" : "zio\/stm\/TPriorityQueue.html#offerAll(values:Iterable[A]):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "offer", "tail" : "(a: A): USTM[Unit]", "member" : "zio.stm.TPriorityQueue.offer", "link" : "zio\/stm\/TPriorityQueue.html#offer(a:A):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): USTM[Boolean]", "member" : "zio.stm.TPriorityQueue.nonEmpty", "link" : "zio\/stm\/TPriorityQueue.html#nonEmpty:zio.stm.USTM[Boolean]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): USTM[Boolean]", "member" : "zio.stm.TPriorityQueue.isEmpty", "link" : "zio\/stm\/TPriorityQueue.html#isEmpty:zio.stm.USTM[Boolean]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "zio\/stm\/TPriorityQueue.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "zio\/stm\/TPriorityQueue.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TPriorityQueue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TPriorityQueue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "zio\/stm\/TPriorityQueue.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "zio\/stm\/TPriorityQueue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "zio\/stm\/TPriorityQueue.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "make", "tail" : "(data: A*)(ord: Ordering[A]): USTM[TPriorityQueue[A]]", "member" : "zio.stm.TPriorityQueue.make", "link" : "zio\/stm\/TPriorityQueue$.html#make[A](data:A*)(implicitord:Ordering[A]):zio.stm.USTM[zio.stm.TPriorityQueue[A]]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(data: Iterable[A])(ord: Ordering[A]): USTM[TPriorityQueue[A]]", "member" : "zio.stm.TPriorityQueue.fromIterable", "link" : "zio\/stm\/TPriorityQueue$.html#fromIterable[A](data:Iterable[A])(implicitord:Ordering[A]):zio.stm.USTM[zio.stm.TPriorityQueue[A]]", "kind" : "def"}, {"label" : "empty", "tail" : "(ord: Ordering[A]): USTM[TPriorityQueue[A]]", "member" : "zio.stm.TPriorityQueue.empty", "link" : "zio\/stm\/TPriorityQueue$.html#empty[A](implicitord:Ordering[A]):zio.stm.USTM[zio.stm.TPriorityQueue[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/TPriorityQueue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/TPriorityQueue$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/TPriorityQueue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/TPriorityQueue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/TPriorityQueue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/TPriorityQueue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/TPriorityQueue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TPriorityQueue$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TPriorityQueue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TPriorityQueue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/TPriorityQueue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/TPriorityQueue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/TPriorityQueue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/TPriorityQueue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/TPriorityQueue$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/TPriorityQueue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/TPriorityQueue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TPriorityQueue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TPriorityQueue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stm\/TPriorityQueue.html", "kind" : "class"}, {"name" : "zio.stm.TPromise", "shortDescription" : "", "object" : "zio\/stm\/TPromise$.html", "members_class" : [{"label" : "succeed", "tail" : "(a: A): USTM[Boolean]", "member" : "zio.stm.TPromise.succeed", "link" : "zio\/stm\/TPromise.html#succeed(a:A):zio.stm.USTM[Boolean]", "kind" : "def"}, {"label" : "poll", "tail" : "(): USTM[Option[Either[E, A]]]", "member" : "zio.stm.TPromise.poll", "link" : "zio\/stm\/TPromise.html#poll:zio.stm.USTM[Option[Either[E,A]]]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: E): USTM[Boolean]", "member" : "zio.stm.TPromise.fail", "link" : "zio\/stm\/TPromise.html#fail(e:E):zio.stm.USTM[Boolean]", "kind" : "def"}, {"label" : "done", "tail" : "(v: Either[E, A]): USTM[Boolean]", "member" : "zio.stm.TPromise.done", "link" : "zio\/stm\/TPromise.html#done(v:Either[E,A]):zio.stm.USTM[Boolean]", "kind" : "def"}, {"label" : "await", "tail" : "(): STM[E, A]", "member" : "zio.stm.TPromise.await", "link" : "zio\/stm\/TPromise.html#await:zio.stm.STM[E,A]", "kind" : "def"}, {"label" : "ref", "tail" : ": TRef[Option[Either[E, A]]]", "member" : "zio.stm.TPromise.ref", "link" : "zio\/stm\/TPromise.html#ref:zio.stm.TRef[Option[Either[E,A]]]", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "zio\/stm\/TPromise.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "zio\/stm\/TPromise.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TPromise.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TPromise.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "zio\/stm\/TPromise.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "zio\/stm\/TPromise.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "zio\/stm\/TPromise.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "make", "tail" : "(): USTM[TPromise[E, A]]", "member" : "zio.stm.TPromise.make", "link" : "zio\/stm\/TPromise$.html#make[E,A]:zio.stm.USTM[zio.stm.TPromise[E,A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/TPromise$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/TPromise$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/TPromise$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/TPromise$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/TPromise$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/TPromise$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/TPromise$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TPromise$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TPromise$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TPromise$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/TPromise$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/TPromise$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/TPromise$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/TPromise$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/TPromise$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/TPromise$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/TPromise$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TPromise$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TPromise$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stm\/TPromise.html", "kind" : "class"}, {"name" : "zio.stm.TRandom", "object" : "zio\/stm\/TRandom$.html", "members_object" : [{"label" : "shuffle", "tail" : "(list: => List[A]): URSTM[Has[TRandom], List[A]]", "member" : "zio.stm.TRandom.shuffle", "link" : "zio\/stm\/TRandom$.html#shuffle[A](list:=>List[A]):zio.stm.URSTM[zio.Has[zio.stm.TRandom],List[A]]", "kind" : "def"}, {"label" : "setSeed", "tail" : "(seed: Long): URSTM[Has[TRandom], Unit]", "member" : "zio.stm.TRandom.setSeed", "link" : "zio\/stm\/TRandom$.html#setSeed(seed:Long):zio.stm.URSTM[zio.Has[zio.stm.TRandom],Unit]", "kind" : "def"}, {"label" : "nextString", "tail" : "(length: => Int): URSTM[Has[TRandom], String]", "member" : "zio.stm.TRandom.nextString", "link" : "zio\/stm\/TRandom$.html#nextString(length:=>Int):zio.stm.URSTM[zio.Has[zio.stm.TRandom],String]", "kind" : "def"}, {"label" : "nextPrintableChar", "tail" : ": URSTM[Has[TRandom], Char]", "member" : "zio.stm.TRandom.nextPrintableChar", "link" : "zio\/stm\/TRandom$.html#nextPrintableChar:zio.stm.URSTM[zio.Has[zio.stm.TRandom],Char]", "kind" : "val"}, {"label" : "nextLongBounded", "tail" : "(n: => Long): URSTM[Has[TRandom], Long]", "member" : "zio.stm.TRandom.nextLongBounded", "link" : "zio\/stm\/TRandom$.html#nextLongBounded(n:=>Long):zio.stm.URSTM[zio.Has[zio.stm.TRandom],Long]", "kind" : "def"}, {"label" : "nextLongBetween", "tail" : "(minInclusive: Long, maxExclusive: Long): URSTM[Has[TRandom], Long]", "member" : "zio.stm.TRandom.nextLongBetween", "link" : "zio\/stm\/TRandom$.html#nextLongBetween(minInclusive:Long,maxExclusive:Long):zio.stm.URSTM[zio.Has[zio.stm.TRandom],Long]", "kind" : "def"}, {"label" : "nextLong", "tail" : ": URSTM[Has[TRandom], Long]", "member" : "zio.stm.TRandom.nextLong", "link" : "zio\/stm\/TRandom$.html#nextLong:zio.stm.URSTM[zio.Has[zio.stm.TRandom],Long]", "kind" : "val"}, {"label" : "nextIntBounded", "tail" : "(n: => Int): URSTM[Has[TRandom], Int]", "member" : "zio.stm.TRandom.nextIntBounded", "link" : "zio\/stm\/TRandom$.html#nextIntBounded(n:=>Int):zio.stm.URSTM[zio.Has[zio.stm.TRandom],Int]", "kind" : "def"}, {"label" : "nextIntBetween", "tail" : "(minInclusive: Int, maxExclusive: Int): URSTM[Has[TRandom], Int]", "member" : "zio.stm.TRandom.nextIntBetween", "link" : "zio\/stm\/TRandom$.html#nextIntBetween(minInclusive:Int,maxExclusive:Int):zio.stm.URSTM[zio.Has[zio.stm.TRandom],Int]", "kind" : "def"}, {"label" : "nextInt", "tail" : ": URSTM[Has[TRandom], Int]", "member" : "zio.stm.TRandom.nextInt", "link" : "zio\/stm\/TRandom$.html#nextInt:zio.stm.URSTM[zio.Has[zio.stm.TRandom],Int]", "kind" : "val"}, {"label" : "nextGaussian", "tail" : ": URSTM[Has[TRandom], Double]", "member" : "zio.stm.TRandom.nextGaussian", "link" : "zio\/stm\/TRandom$.html#nextGaussian:zio.stm.URSTM[zio.Has[zio.stm.TRandom],Double]", "kind" : "val"}, {"label" : "nextFloatBetween", "tail" : "(minInclusive: Float, maxExclusive: Float): URSTM[Has[TRandom], Float]", "member" : "zio.stm.TRandom.nextFloatBetween", "link" : "zio\/stm\/TRandom$.html#nextFloatBetween(minInclusive:Float,maxExclusive:Float):zio.stm.URSTM[zio.Has[zio.stm.TRandom],Float]", "kind" : "def"}, {"label" : "nextFloat", "tail" : ": URSTM[Has[TRandom], Float]", "member" : "zio.stm.TRandom.nextFloat", "link" : "zio\/stm\/TRandom$.html#nextFloat:zio.stm.URSTM[zio.Has[zio.stm.TRandom],Float]", "kind" : "val"}, {"label" : "nextDoubleBetween", "tail" : "(minInclusive: Double, maxExclusive: Double): URSTM[Has[TRandom], Double]", "member" : "zio.stm.TRandom.nextDoubleBetween", "link" : "zio\/stm\/TRandom$.html#nextDoubleBetween(minInclusive:Double,maxExclusive:Double):zio.stm.URSTM[zio.Has[zio.stm.TRandom],Double]", "kind" : "def"}, {"label" : "nextDouble", "tail" : ": URSTM[Has[TRandom], Double]", "member" : "zio.stm.TRandom.nextDouble", "link" : "zio\/stm\/TRandom$.html#nextDouble:zio.stm.URSTM[zio.Has[zio.stm.TRandom],Double]", "kind" : "val"}, {"label" : "nextBytes", "tail" : "(length: => Int): URSTM[Has[TRandom], Chunk[Byte]]", "member" : "zio.stm.TRandom.nextBytes", "link" : "zio\/stm\/TRandom$.html#nextBytes(length:=>Int):zio.stm.URSTM[zio.Has[zio.stm.TRandom],zio.Chunk[Byte]]", "kind" : "def"}, {"label" : "nextBoolean", "tail" : ": URSTM[Has[TRandom], Boolean]", "member" : "zio.stm.TRandom.nextBoolean", "link" : "zio\/stm\/TRandom$.html#nextBoolean:zio.stm.URSTM[zio.Has[zio.stm.TRandom],Boolean]", "kind" : "val"}, {"label" : "live", "tail" : ": ZLayer[Has[Random], Nothing, Has[TRandom]]", "member" : "zio.stm.TRandom.live", "link" : "zio\/stm\/TRandom$.html#live:zio.ZLayer[zio.Has[zio.Random],Nothing,zio.Has[zio.stm.TRandom]]", "kind" : "val"}, {"label" : "any", "tail" : ": ZLayer[Has[TRandom], Nothing, Has[TRandom]]", "member" : "zio.stm.TRandom.any", "link" : "zio\/stm\/TRandom$.html#any:zio.ZLayer[zio.Has[zio.stm.TRandom],Nothing,zio.Has[zio.stm.TRandom]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/TRandom$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/TRandom$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/TRandom$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/TRandom$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/TRandom$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/TRandom$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/TRandom$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TRandom$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TRandom$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TRandom$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/TRandom$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/TRandom$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/TRandom$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/TRandom$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/TRandom$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/TRandom$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/TRandom$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TRandom$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TRandom$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/stm\/TRandom.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/TRandom.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/TRandom.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/TRandom.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/TRandom.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/TRandom.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/TRandom.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/TRandom.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TRandom.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TRandom.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TRandom.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/TRandom.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/TRandom.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/TRandom.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/TRandom.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/TRandom.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/TRandom.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/TRandom.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TRandom.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TRandom.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "shuffle", "tail" : "(collection: Collection[A])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): STM[Nothing, Collection[A]]", "member" : "zio.stm.TRandom.shuffle", "link" : "zio\/stm\/TRandom.html#shuffle[A,Collection[+Element]<:Iterable[Element]](collection:Collection[A])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.stm.STM[Nothing,Collection[A]]", "kind" : "abstract def"}, {"label" : "setSeed", "tail" : "(seed: Long): STM[Nothing, Unit]", "member" : "zio.stm.TRandom.setSeed", "link" : "zio\/stm\/TRandom.html#setSeed(seed:Long):zio.stm.STM[Nothing,Unit]", "kind" : "abstract def"}, {"label" : "nextString", "tail" : "(length: Int): STM[Nothing, String]", "member" : "zio.stm.TRandom.nextString", "link" : "zio\/stm\/TRandom.html#nextString(length:Int):zio.stm.STM[Nothing,String]", "kind" : "abstract def"}, {"label" : "nextPrintableChar", "tail" : "(): STM[Nothing, Char]", "member" : "zio.stm.TRandom.nextPrintableChar", "link" : "zio\/stm\/TRandom.html#nextPrintableChar:zio.stm.STM[Nothing,Char]", "kind" : "abstract def"}, {"label" : "nextLongBounded", "tail" : "(n: Long): STM[Nothing, Long]", "member" : "zio.stm.TRandom.nextLongBounded", "link" : "zio\/stm\/TRandom.html#nextLongBounded(n:Long):zio.stm.STM[Nothing,Long]", "kind" : "abstract def"}, {"label" : "nextLongBetween", "tail" : "(minInclusive: Long, maxExclusive: Long): STM[Nothing, Long]", "member" : "zio.stm.TRandom.nextLongBetween", "link" : "zio\/stm\/TRandom.html#nextLongBetween(minInclusive:Long,maxExclusive:Long):zio.stm.STM[Nothing,Long]", "kind" : "abstract def"}, {"label" : "nextLong", "tail" : "(): STM[Nothing, Long]", "member" : "zio.stm.TRandom.nextLong", "link" : "zio\/stm\/TRandom.html#nextLong:zio.stm.STM[Nothing,Long]", "kind" : "abstract def"}, {"label" : "nextIntBounded", "tail" : "(n: Int): STM[Nothing, Int]", "member" : "zio.stm.TRandom.nextIntBounded", "link" : "zio\/stm\/TRandom.html#nextIntBounded(n:Int):zio.stm.STM[Nothing,Int]", "kind" : "abstract def"}, {"label" : "nextIntBetween", "tail" : "(minInclusive: Int, maxExclusive: Int): STM[Nothing, Int]", "member" : "zio.stm.TRandom.nextIntBetween", "link" : "zio\/stm\/TRandom.html#nextIntBetween(minInclusive:Int,maxExclusive:Int):zio.stm.STM[Nothing,Int]", "kind" : "abstract def"}, {"label" : "nextInt", "tail" : "(): STM[Nothing, Int]", "member" : "zio.stm.TRandom.nextInt", "link" : "zio\/stm\/TRandom.html#nextInt:zio.stm.STM[Nothing,Int]", "kind" : "abstract def"}, {"label" : "nextGaussian", "tail" : "(): STM[Nothing, Double]", "member" : "zio.stm.TRandom.nextGaussian", "link" : "zio\/stm\/TRandom.html#nextGaussian:zio.stm.STM[Nothing,Double]", "kind" : "abstract def"}, {"label" : "nextFloatBetween", "tail" : "(minInclusive: Float, maxExclusive: Float): STM[Nothing, Float]", "member" : "zio.stm.TRandom.nextFloatBetween", "link" : "zio\/stm\/TRandom.html#nextFloatBetween(minInclusive:Float,maxExclusive:Float):zio.stm.STM[Nothing,Float]", "kind" : "abstract def"}, {"label" : "nextFloat", "tail" : "(): STM[Nothing, Float]", "member" : "zio.stm.TRandom.nextFloat", "link" : "zio\/stm\/TRandom.html#nextFloat:zio.stm.STM[Nothing,Float]", "kind" : "abstract def"}, {"label" : "nextDoubleBetween", "tail" : "(minInclusive: Double, maxExclusive: Double): STM[Nothing, Double]", "member" : "zio.stm.TRandom.nextDoubleBetween", "link" : "zio\/stm\/TRandom.html#nextDoubleBetween(minInclusive:Double,maxExclusive:Double):zio.stm.STM[Nothing,Double]", "kind" : "abstract def"}, {"label" : "nextDouble", "tail" : "(): STM[Nothing, Double]", "member" : "zio.stm.TRandom.nextDouble", "link" : "zio\/stm\/TRandom.html#nextDouble:zio.stm.STM[Nothing,Double]", "kind" : "abstract def"}, {"label" : "nextBytes", "tail" : "(length: Int): STM[Nothing, Chunk[Byte]]", "member" : "zio.stm.TRandom.nextBytes", "link" : "zio\/stm\/TRandom.html#nextBytes(length:Int):zio.stm.STM[Nothing,zio.Chunk[Byte]]", "kind" : "abstract def"}, {"label" : "nextBoolean", "tail" : "(): STM[Nothing, Boolean]", "member" : "zio.stm.TRandom.nextBoolean", "link" : "zio\/stm\/TRandom.html#nextBoolean:zio.stm.STM[Nothing,Boolean]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.stm.TReentrantLock", "shortDescription" : "A TReentrantLock is a reentrant read\/write lock.", "object" : "zio\/stm\/TReentrantLock$.html", "members_class" : [{"label" : "writeLocks", "tail" : "(): USTM[Int]", "member" : "zio.stm.TReentrantLock.writeLocks", "link" : "zio\/stm\/TReentrantLock.html#writeLocks:zio.stm.USTM[Int]", "kind" : "def"}, {"label" : "writeLocked", "tail" : "(): USTM[Boolean]", "member" : "zio.stm.TReentrantLock.writeLocked", "link" : "zio\/stm\/TReentrantLock.html#writeLocked:zio.stm.USTM[Boolean]", "kind" : "def"}, {"label" : "writeLock", "tail" : ": UManaged[Int]", "member" : "zio.stm.TReentrantLock.writeLock", "link" : "zio\/stm\/TReentrantLock.html#writeLock:zio.UManaged[Int]", "kind" : "lazy val"}, {"label" : "releaseWrite", "tail" : ": USTM[Int]", "member" : "zio.stm.TReentrantLock.releaseWrite", "link" : "zio\/stm\/TReentrantLock.html#releaseWrite:zio.stm.USTM[Int]", "kind" : "lazy val"}, {"label" : "releaseRead", "tail" : ": USTM[Int]", "member" : "zio.stm.TReentrantLock.releaseRead", "link" : "zio\/stm\/TReentrantLock.html#releaseRead:zio.stm.USTM[Int]", "kind" : "lazy val"}, {"label" : "readLocked", "tail" : "(): USTM[Boolean]", "member" : "zio.stm.TReentrantLock.readLocked", "link" : "zio\/stm\/TReentrantLock.html#readLocked:zio.stm.USTM[Boolean]", "kind" : "def"}, {"label" : "fiberWriteLocks", "tail" : "(): USTM[Int]", "member" : "zio.stm.TReentrantLock.fiberWriteLocks", "link" : "zio\/stm\/TReentrantLock.html#fiberWriteLocks:zio.stm.USTM[Int]", "kind" : "def"}, {"label" : "fiberReadLocks", "tail" : "(): USTM[Int]", "member" : "zio.stm.TReentrantLock.fiberReadLocks", "link" : "zio\/stm\/TReentrantLock.html#fiberReadLocks:zio.stm.USTM[Int]", "kind" : "def"}, {"label" : "readLocks", "tail" : "(): USTM[Int]", "member" : "zio.stm.TReentrantLock.readLocks", "link" : "zio\/stm\/TReentrantLock.html#readLocks:zio.stm.USTM[Int]", "kind" : "def"}, {"label" : "readLock", "tail" : ": UManaged[Int]", "member" : "zio.stm.TReentrantLock.readLock", "link" : "zio\/stm\/TReentrantLock.html#readLock:zio.UManaged[Int]", "kind" : "lazy val"}, {"label" : "locked", "tail" : "(): USTM[Boolean]", "member" : "zio.stm.TReentrantLock.locked", "link" : "zio\/stm\/TReentrantLock.html#locked:zio.stm.USTM[Boolean]", "kind" : "def"}, {"label" : "lock", "tail" : ": UManaged[Int]", "member" : "zio.stm.TReentrantLock.lock", "link" : "zio\/stm\/TReentrantLock.html#lock:zio.UManaged[Int]", "kind" : "lazy val"}, {"label" : "acquireWrite", "tail" : ": USTM[Int]", "member" : "zio.stm.TReentrantLock.acquireWrite", "link" : "zio\/stm\/TReentrantLock.html#acquireWrite:zio.stm.USTM[Int]", "kind" : "lazy val"}, {"label" : "acquireRead", "tail" : ": USTM[Int]", "member" : "zio.stm.TReentrantLock.acquireRead", "link" : "zio\/stm\/TReentrantLock.html#acquireRead:zio.stm.USTM[Int]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/TReentrantLock.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/TReentrantLock.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/TReentrantLock.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/TReentrantLock.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/TReentrantLock.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/TReentrantLock.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/TReentrantLock.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TReentrantLock.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TReentrantLock.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TReentrantLock.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/TReentrantLock.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/TReentrantLock.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/TReentrantLock.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/TReentrantLock.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/TReentrantLock.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/TReentrantLock.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/TReentrantLock.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TReentrantLock.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TReentrantLock.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "make", "tail" : "(): USTM[TReentrantLock]", "member" : "zio.stm.TReentrantLock.make", "link" : "zio\/stm\/TReentrantLock$.html#make:zio.stm.USTM[zio.stm.TReentrantLock]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/TReentrantLock$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/TReentrantLock$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/TReentrantLock$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/TReentrantLock$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/TReentrantLock$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/TReentrantLock$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/TReentrantLock$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TReentrantLock$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TReentrantLock$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TReentrantLock$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/TReentrantLock$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/TReentrantLock$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/TReentrantLock$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/TReentrantLock$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/TReentrantLock$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/TReentrantLock$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/TReentrantLock$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TReentrantLock$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TReentrantLock$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stm\/TReentrantLock.html", "kind" : "class"}, {"name" : "zio.stm.TRef", "shortDescription" : "", "object" : "zio\/stm\/TRef$.html", "members_object" : [{"label" : "makeCommit", "tail" : "(a: => A): UIO[TRef[A]]", "member" : "zio.stm.TRef.makeCommit", "link" : "zio\/stm\/TRef$.html#makeCommit[A](a:=>A):zio.UIO[zio.stm.TRef[A]]", "kind" : "def"}, {"label" : "make", "tail" : "(a: => A): USTM[TRef[A]]", "member" : "zio.stm.TRef.make", "link" : "zio\/stm\/TRef$.html#make[A](a:=>A):zio.stm.USTM[zio.stm.TRef[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/TRef$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/TRef$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/TRef$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/TRef$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/TRef$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/TRef$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/TRef$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TRef$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TRef$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TRef$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/TRef$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/TRef$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/TRef$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/TRef$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/TRef$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/TRef$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/TRef$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TRef$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TRef$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.stm.TSemaphore", "shortDescription" : "A TSemaphore is a semaphore that can be composed transactionally.", "object" : "zio\/stm\/TSemaphore$.html", "members_class" : [{"label" : "withPermitsManaged", "tail" : "(n: Long): ZManaged[Any, Nothing, Unit]", "member" : "zio.stm.TSemaphore.withPermitsManaged", "link" : "zio\/stm\/TSemaphore.html#withPermitsManaged(n:Long):zio.ZManaged[Any,Nothing,Unit]", "kind" : "def"}, {"label" : "withPermits", "tail" : "(n: Long)(zio: ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.stm.TSemaphore.withPermits", "link" : "zio\/stm\/TSemaphore.html#withPermits[R,E,A](n:Long)(zio:zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "withPermitManaged", "tail" : ": ZManaged[Any, Nothing, Unit]", "member" : "zio.stm.TSemaphore.withPermitManaged", "link" : "zio\/stm\/TSemaphore.html#withPermitManaged:zio.ZManaged[Any,Nothing,Unit]", "kind" : "val"}, {"label" : "withPermit", "tail" : "(zio: ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.stm.TSemaphore.withPermit", "link" : "zio\/stm\/TSemaphore.html#withPermit[R,E,A](zio:zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "releaseN", "tail" : "(n: Long): USTM[Unit]", "member" : "zio.stm.TSemaphore.releaseN", "link" : "zio\/stm\/TSemaphore.html#releaseN(n:Long):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "release", "tail" : "(): USTM[Unit]", "member" : "zio.stm.TSemaphore.release", "link" : "zio\/stm\/TSemaphore.html#release:zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "available", "tail" : "(): USTM[Long]", "member" : "zio.stm.TSemaphore.available", "link" : "zio\/stm\/TSemaphore.html#available:zio.stm.USTM[Long]", "kind" : "def"}, {"label" : "acquireN", "tail" : "(n: Long): USTM[Unit]", "member" : "zio.stm.TSemaphore.acquireN", "link" : "zio\/stm\/TSemaphore.html#acquireN(n:Long):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "acquire", "tail" : "(): USTM[Unit]", "member" : "zio.stm.TSemaphore.acquire", "link" : "zio\/stm\/TSemaphore.html#acquire:zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "permits", "tail" : ": TRef[Long]", "member" : "zio.stm.TSemaphore.permits", "link" : "zio\/stm\/TSemaphore.html#permits:zio.stm.TRef[Long]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/TSemaphore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/TSemaphore.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/TSemaphore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/TSemaphore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/TSemaphore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/TSemaphore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/TSemaphore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TSemaphore.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TSemaphore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TSemaphore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/TSemaphore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/TSemaphore.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/TSemaphore.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/TSemaphore.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/TSemaphore.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/TSemaphore.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/TSemaphore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TSemaphore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TSemaphore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "makeCommit", "tail" : "(permits: Long): UIO[TSemaphore]", "member" : "zio.stm.TSemaphore.makeCommit", "link" : "zio\/stm\/TSemaphore$.html#makeCommit(permits:Long):zio.UIO[zio.stm.TSemaphore]", "kind" : "def"}, {"label" : "make", "tail" : "(permits: Long): USTM[TSemaphore]", "member" : "zio.stm.TSemaphore.make", "link" : "zio\/stm\/TSemaphore$.html#make(permits:Long):zio.stm.USTM[zio.stm.TSemaphore]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/TSemaphore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/TSemaphore$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/TSemaphore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/TSemaphore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/TSemaphore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/TSemaphore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/TSemaphore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TSemaphore$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TSemaphore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TSemaphore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/TSemaphore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/TSemaphore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/TSemaphore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/TSemaphore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/TSemaphore$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/TSemaphore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/TSemaphore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TSemaphore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TSemaphore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stm\/TSemaphore.html", "kind" : "class"}, {"name" : "zio.stm.TSet", "shortDescription" : "Transactional set implemented on top of TMap.", "object" : "zio\/stm\/TSet$.html", "members_class" : [{"label" : "union", "tail" : "(other: TSet[A]): USTM[Unit]", "member" : "zio.stm.TSet.union", "link" : "zio\/stm\/TSet.html#union(other:zio.stm.TSet[A]):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "transformSTM", "tail" : "(f: (A) => STM[E, A]): STM[E, Unit]", "member" : "zio.stm.TSet.transformSTM", "link" : "zio\/stm\/TSet.html#transformSTM[E](f:A=>zio.stm.STM[E,A]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "transformM", "tail" : "(f: (A) => STM[E, A]): STM[E, Unit]", "member" : "zio.stm.TSet.transformM", "link" : "zio\/stm\/TSet.html#transformM[E](f:A=>zio.stm.STM[E,A]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (A) => A): USTM[Unit]", "member" : "zio.stm.TSet.transform", "link" : "zio\/stm\/TSet.html#transform(f:A=>A):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): USTM[Set[A]]", "member" : "zio.stm.TSet.toSet", "link" : "zio\/stm\/TSet.html#toSet:zio.stm.USTM[Set[A]]", "kind" : "def"}, {"label" : "toList", "tail" : "(): USTM[List[A]]", "member" : "zio.stm.TSet.toList", "link" : "zio\/stm\/TSet.html#toList:zio.stm.USTM[List[A]]", "kind" : "def"}, {"label" : "size", "tail" : "(): USTM[Int]", "member" : "zio.stm.TSet.size", "link" : "zio\/stm\/TSet.html#size:zio.stm.USTM[Int]", "kind" : "def"}, {"label" : "retainIf", "tail" : "(p: (A) => Boolean): USTM[Unit]", "member" : "zio.stm.TSet.retainIf", "link" : "zio\/stm\/TSet.html#retainIf(p:A=>Boolean):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "removeIf", "tail" : "(p: (A) => Boolean): USTM[Unit]", "member" : "zio.stm.TSet.removeIf", "link" : "zio\/stm\/TSet.html#removeIf(p:A=>Boolean):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "put", "tail" : "(a: A): USTM[Unit]", "member" : "zio.stm.TSet.put", "link" : "zio\/stm\/TSet.html#put(a:A):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "intersect", "tail" : "(other: TSet[A]): USTM[Unit]", "member" : "zio.stm.TSet.intersect", "link" : "zio\/stm\/TSet.html#intersect(other:zio.stm.TSet[A]):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => STM[E, Unit]): STM[E, Unit]", "member" : "zio.stm.TSet.foreach", "link" : "zio\/stm\/TSet.html#foreach[E](f:A=>zio.stm.STM[E,Unit]):zio.stm.STM[E,Unit]", "kind" : "def"}, {"label" : "foldSTM", "tail" : "(zero: B)(op: (B, A) => STM[E, B]): STM[E, B]", "member" : "zio.stm.TSet.foldSTM", "link" : "zio\/stm\/TSet.html#foldSTM[B,E](zero:B)(op:(B,A)=>zio.stm.STM[E,B]):zio.stm.STM[E,B]", "kind" : "def"}, {"label" : "foldM", "tail" : "(zero: B)(op: (B, A) => STM[E, B]): STM[E, B]", "member" : "zio.stm.TSet.foldM", "link" : "zio\/stm\/TSet.html#foldM[B,E](zero:B)(op:(B,A)=>zio.stm.STM[E,B]):zio.stm.STM[E,B]", "kind" : "def"}, {"label" : "fold", "tail" : "(zero: B)(op: (B, A) => B): USTM[B]", "member" : "zio.stm.TSet.fold", "link" : "zio\/stm\/TSet.html#fold[B](zero:B)(op:(B,A)=>B):zio.stm.USTM[B]", "kind" : "def"}, {"label" : "diff", "tail" : "(other: TSet[A]): USTM[Unit]", "member" : "zio.stm.TSet.diff", "link" : "zio\/stm\/TSet.html#diff(other:zio.stm.TSet[A]):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "delete", "tail" : "(a: A): USTM[Unit]", "member" : "zio.stm.TSet.delete", "link" : "zio\/stm\/TSet.html#delete(a:A):zio.stm.USTM[Unit]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): USTM[Boolean]", "member" : "zio.stm.TSet.isEmpty", "link" : "zio\/stm\/TSet.html#isEmpty:zio.stm.USTM[Boolean]", "kind" : "def"}, {"label" : "contains", "tail" : "(a: A): USTM[Boolean]", "member" : "zio.stm.TSet.contains", "link" : "zio\/stm\/TSet.html#contains(a:A):zio.stm.USTM[Boolean]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "zio\/stm\/TSet.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "zio\/stm\/TSet.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "zio\/stm\/TSet.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "zio\/stm\/TSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "zio\/stm\/TSet.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "make", "tail" : "(data: A*): USTM[TSet[A]]", "member" : "zio.stm.TSet.make", "link" : "zio\/stm\/TSet$.html#make[A](data:A*):zio.stm.USTM[zio.stm.TSet[A]]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(data: Iterable[A]): USTM[TSet[A]]", "member" : "zio.stm.TSet.fromIterable", "link" : "zio\/stm\/TSet$.html#fromIterable[A](data:Iterable[A]):zio.stm.USTM[zio.stm.TSet[A]]", "kind" : "def"}, {"label" : "empty", "tail" : "(): USTM[TSet[A]]", "member" : "zio.stm.TSet.empty", "link" : "zio\/stm\/TSet$.html#empty[A]:zio.stm.USTM[zio.stm.TSet[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/TSet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/TSet$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/TSet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/TSet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/TSet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/TSet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/TSet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TSet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TSet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/TSet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/TSet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/TSet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/TSet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/TSet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/TSet$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/TSet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/TSet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/TSet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/TSet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stm\/TSet.html", "kind" : "class"}, {"name" : "zio.stm.ZSTM", "object" : "zio\/stm\/ZSTM$.html", "members_object" : [{"label" : "WhenSTM", "tail" : "", "member" : "zio.stm.ZSTM.WhenSTM", "link" : "zio\/stm\/ZSTM$.html#WhenSTM[R,E]extendsAnyRef", "kind" : "final class"}, {"label" : "UpdateServiceAt", "tail" : "", "member" : "zio.stm.ZSTM.UpdateServiceAt", "link" : "zio\/stm\/ZSTM$.html#UpdateServiceAt[-R,+E,+A,Service]extendsAnyVal", "kind" : "final class"}, {"label" : "UpdateService", "tail" : "", "member" : "zio.stm.ZSTM.UpdateService", "link" : "zio\/stm\/ZSTM$.html#UpdateService[-R,+E,+A,M]extendsAnyRef", "kind" : "final class"}, {"label" : "UnlessSTM", "tail" : "", "member" : "zio.stm.ZSTM.UnlessSTM", "link" : "zio\/stm\/ZSTM$.html#UnlessSTM[R,E]extendsAnyRef", "kind" : "final class"}, {"label" : "IfSTM", "tail" : "", "member" : "zio.stm.ZSTM.IfSTM", "link" : "zio\/stm\/ZSTM$.html#IfSTM[R,E]extendsAnyRef", "kind" : "final class"}, {"label" : "ServiceWithPartiallyApplied", "tail" : "", "member" : "zio.stm.ZSTM.ServiceWithPartiallyApplied", "link" : "zio\/stm\/ZSTM$.html#ServiceWithPartiallyApplied[Service]extendsAnyVal", "kind" : "final class"}, {"label" : "ServiceAtPartiallyApplied", "tail" : "", "member" : "zio.stm.ZSTM.ServiceAtPartiallyApplied", "link" : "zio\/stm\/ZSTM$.html#ServiceAtPartiallyApplied[Service]extendsAnyVal", "kind" : "final class"}, {"label" : "AccessSTMPartiallyApplied", "tail" : "", "member" : "zio.stm.ZSTM.AccessSTMPartiallyApplied", "link" : "zio\/stm\/ZSTM$.html#AccessSTMPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "AccessPartiallyApplied", "tail" : "", "member" : "zio.stm.ZSTM.AccessPartiallyApplied", "link" : "zio\/stm\/ZSTM$.html#AccessPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "whenSTM", "tail" : "(b: ZSTM[R, E, Boolean]): WhenSTM[R, E]", "member" : "zio.stm.ZSTM.whenSTM", "link" : "zio\/stm\/ZSTM$.html#whenSTM[R,E](b:zio.stm.ZSTM[R,E,Boolean]):zio.stm.ZSTM.WhenSTM[R,E]", "kind" : "def"}, {"label" : "whenM", "tail" : "(b: ZSTM[R, E, Boolean]): WhenSTM[R, E]", "member" : "zio.stm.ZSTM.whenM", "link" : "zio\/stm\/ZSTM$.html#whenM[R,E](b:zio.stm.ZSTM[R,E,Boolean]):zio.stm.ZSTM.WhenSTM[R,E]", "kind" : "def"}, {"label" : "whenCaseSTM", "tail" : "(a: ZSTM[R, E, A])(pf: PartialFunction[A, ZSTM[R, E, B]]): ZSTM[R, E, Option[B]]", "member" : "zio.stm.ZSTM.whenCaseSTM", "link" : "zio\/stm\/ZSTM$.html#whenCaseSTM[R,E,A,B](a:zio.stm.ZSTM[R,E,A])(pf:PartialFunction[A,zio.stm.ZSTM[R,E,B]]):zio.stm.ZSTM[R,E,Option[B]]", "kind" : "def"}, {"label" : "whenCaseM", "tail" : "(a: ZSTM[R, E, A])(pf: PartialFunction[A, ZSTM[R, E, B]]): ZSTM[R, E, Option[B]]", "member" : "zio.stm.ZSTM.whenCaseM", "link" : "zio\/stm\/ZSTM$.html#whenCaseM[R,E,A,B](a:zio.stm.ZSTM[R,E,A])(pf:PartialFunction[A,zio.stm.ZSTM[R,E,B]]):zio.stm.ZSTM[R,E,Option[B]]", "kind" : "def"}, {"label" : "whenCase", "tail" : "(a: => A)(pf: PartialFunction[A, ZSTM[R, E, B]]): ZSTM[R, E, Option[B]]", "member" : "zio.stm.ZSTM.whenCase", "link" : "zio\/stm\/ZSTM$.html#whenCase[R,E,A,B](a:=>A)(pf:PartialFunction[A,zio.stm.ZSTM[R,E,B]]):zio.stm.ZSTM[R,E,Option[B]]", "kind" : "def"}, {"label" : "when", "tail" : "(b: => Boolean)(stm: => ZSTM[R, E, A]): ZSTM[R, E, Option[A]]", "member" : "zio.stm.ZSTM.when", "link" : "zio\/stm\/ZSTM$.html#when[R,E,A](b:=>Boolean)(stm:=>zio.stm.ZSTM[R,E,A]):zio.stm.ZSTM[R,E,Option[A]]", "kind" : "def"}, {"label" : "validateFirst", "tail" : "(in: Collection[A])(f: (A) => ZSTM[R, E, B])(bf: zio.BuildFrom[Collection[A], E, Collection[E]], ev: CanFail[E]): ZSTM[R, Collection[E], B]", "member" : "zio.stm.ZSTM.validateFirst", "link" : "zio\/stm\/ZSTM$.html#validateFirst[R,E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.stm.ZSTM[R,E,B])(implicitbf:zio.BuildFrom[Collection[A],E,Collection[E]],implicitev:zio.CanFail[E]):zio.stm.ZSTM[R,Collection[E],B]", "kind" : "def"}, {"label" : "validate", "tail" : "(in: NonEmptyChunk[A])(f: (A) => ZSTM[R, E, B])(ev: CanFail[E]): ZSTM[R, ::[E], NonEmptyChunk[B]]", "member" : "zio.stm.ZSTM.validate", "link" : "zio\/stm\/ZSTM$.html#validate[R,E,A,B](in:zio.NonEmptyChunk[A])(f:A=>zio.stm.ZSTM[R,E,B])(implicitev:zio.CanFail[E]):zio.stm.ZSTM[R,::[E],zio.NonEmptyChunk[B]]", "kind" : "def"}, {"label" : "validate", "tail" : "(in: Collection[A])(f: (A) => ZSTM[R, E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]], ev: CanFail[E]): ZSTM[R, ::[E], Collection[B]]", "member" : "zio.stm.ZSTM.validate", "link" : "zio\/stm\/ZSTM$.html#validate[R,E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.stm.ZSTM[R,E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]],implicitev:zio.CanFail[E]):zio.stm.ZSTM[R,::[E],Collection[B]]", "kind" : "def"}, {"label" : "unlessSTM", "tail" : "(b: ZSTM[R, E, Boolean]): UnlessSTM[R, E]", "member" : "zio.stm.ZSTM.unlessSTM", "link" : "zio\/stm\/ZSTM$.html#unlessSTM[R,E](b:zio.stm.ZSTM[R,E,Boolean]):zio.stm.ZSTM.UnlessSTM[R,E]", "kind" : "def"}, {"label" : "unlessM", "tail" : "(b: ZSTM[R, E, Boolean]): UnlessSTM[R, E]", "member" : "zio.stm.ZSTM.unlessM", "link" : "zio\/stm\/ZSTM$.html#unlessM[R,E](b:zio.stm.ZSTM[R,E,Boolean]):zio.stm.ZSTM.UnlessSTM[R,E]", "kind" : "def"}, {"label" : "unless", "tail" : "(b: => Boolean)(stm: => ZSTM[R, E, A]): ZSTM[R, E, Option[A]]", "member" : "zio.stm.ZSTM.unless", "link" : "zio\/stm\/ZSTM$.html#unless[R,E,A](b:=>Boolean)(stm:=>zio.stm.ZSTM[R,E,A]):zio.stm.ZSTM[R,E,Option[A]]", "kind" : "def"}, {"label" : "unit", "tail" : ": USTM[Unit]", "member" : "zio.stm.ZSTM.unit", "link" : "zio\/stm\/ZSTM$.html#unit:zio.stm.USTM[Unit]", "kind" : "val"}, {"label" : "suspend", "tail" : "(stm: => ZSTM[R, E, A]): ZSTM[R, E, A]", "member" : "zio.stm.ZSTM.suspend", "link" : "zio\/stm\/ZSTM$.html#suspend[R,E,A](stm:=>zio.stm.ZSTM[R,E,A]):zio.stm.ZSTM[R,E,A]", "kind" : "def"}, {"label" : "succeed", "tail" : "(a: => A): USTM[A]", "member" : "zio.stm.ZSTM.succeed", "link" : "zio\/stm\/ZSTM$.html#succeed[A](a:=>A):zio.stm.USTM[A]", "kind" : "def"}, {"label" : "some", "tail" : "(a: => A): USTM[Option[A]]", "member" : "zio.stm.ZSTM.some", "link" : "zio\/stm\/ZSTM$.html#some[A](a:=>A):zio.stm.USTM[Option[A]]", "kind" : "def"}, {"label" : "serviceWith", "tail" : "(): ServiceWithPartiallyApplied[Service]", "member" : "zio.stm.ZSTM.serviceWith", "link" : "zio\/stm\/ZSTM$.html#serviceWith[Service]:zio.stm.ZSTM.ServiceWithPartiallyApplied[Service]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C], arg3: zio.Tag[D]): ZSTM[Has[A] with Has[B] with Has[C] with Has[D], Nothing, (A, B, C, D)]", "member" : "zio.stm.ZSTM.services", "link" : "zio\/stm\/ZSTM$.html#services[A,B,C,D](implicitevidence$7:zio.Tag[A],implicitevidence$8:zio.Tag[B],implicitevidence$9:zio.Tag[C],implicitevidence$10:zio.Tag[D]):zio.stm.ZSTM[zio.Has[A]withzio.Has[B]withzio.Has[C]withzio.Has[D],Nothing,(A,B,C,D)]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B], arg2: zio.Tag[C]): ZSTM[Has[A] with Has[B] with Has[C], Nothing, (A, B, C)]", "member" : "zio.stm.ZSTM.services", "link" : "zio\/stm\/ZSTM$.html#services[A,B,C](implicitevidence$4:zio.Tag[A],implicitevidence$5:zio.Tag[B],implicitevidence$6:zio.Tag[C]):zio.stm.ZSTM[zio.Has[A]withzio.Has[B]withzio.Has[C],Nothing,(A,B,C)]", "kind" : "def"}, {"label" : "services", "tail" : "(arg0: zio.Tag[A], arg1: zio.Tag[B]): ZSTM[Has[A] with Has[B], Nothing, (A, B)]", "member" : "zio.stm.ZSTM.services", "link" : "zio\/stm\/ZSTM$.html#services[A,B](implicitevidence$2:zio.Tag[A],implicitevidence$3:zio.Tag[B]):zio.stm.ZSTM[zio.Has[A]withzio.Has[B],Nothing,(A,B)]", "kind" : "def"}, {"label" : "serviceAt", "tail" : "(): ServiceAtPartiallyApplied[Service]", "member" : "zio.stm.ZSTM.serviceAt", "link" : "zio\/stm\/ZSTM$.html#serviceAt[Service]:zio.stm.ZSTM.ServiceAtPartiallyApplied[Service]", "kind" : "def"}, {"label" : "service", "tail" : "(arg0: zio.Tag[A]): ZSTM[Has[A], Nothing, A]", "member" : "zio.stm.ZSTM.service", "link" : "zio\/stm\/ZSTM$.html#service[A](implicitevidence$1:zio.Tag[A]):zio.stm.ZSTM[zio.Has[A],Nothing,A]", "kind" : "def"}, {"label" : "right", "tail" : "(a: => A): USTM[Either[Nothing, A]]", "member" : "zio.stm.ZSTM.right", "link" : "zio\/stm\/ZSTM$.html#right[A](a:=>A):zio.stm.USTM[Either[Nothing,A]]", "kind" : "def"}, {"label" : "retry", "tail" : ": USTM[Nothing]", "member" : "zio.stm.ZSTM.retry", "link" : "zio\/stm\/ZSTM$.html#retry:zio.stm.USTM[Nothing]", "kind" : "val"}, {"label" : "require", "tail" : "(error: => E): (ZSTM[R, E, Option[A]]) => ZSTM[R, E, A]", "member" : "zio.stm.ZSTM.require", "link" : "zio\/stm\/ZSTM$.html#require[R,E,A](error:=>E):zio.stm.ZSTM[R,E,Option[A]]=>zio.stm.ZSTM[R,E,A]", "kind" : "def"}, {"label" : "replicateSTMDiscard", "tail" : "(n: Int)(transaction: ZSTM[R, E, A]): ZSTM[R, E, Unit]", "member" : "zio.stm.ZSTM.replicateSTMDiscard", "link" : "zio\/stm\/ZSTM$.html#replicateSTMDiscard[R,E,A](n:Int)(transaction:zio.stm.ZSTM[R,E,A]):zio.stm.ZSTM[R,E,Unit]", "kind" : "def"}, {"label" : "replicateSTM", "tail" : "(n: Int)(transaction: ZSTM[R, E, A]): ZSTM[R, E, Iterable[A]]", "member" : "zio.stm.ZSTM.replicateSTM", "link" : "zio\/stm\/ZSTM$.html#replicateSTM[R,E,A](n:Int)(transaction:zio.stm.ZSTM[R,E,A]):zio.stm.ZSTM[R,E,Iterable[A]]", "kind" : "def"}, {"label" : "replicateM_", "tail" : "(n: Int)(transaction: ZSTM[R, E, A]): ZSTM[R, E, Unit]", "member" : "zio.stm.ZSTM.replicateM_", "link" : "zio\/stm\/ZSTM$.html#replicateM_[R,E,A](n:Int)(transaction:zio.stm.ZSTM[R,E,A]):zio.stm.ZSTM[R,E,Unit]", "kind" : "def"}, {"label" : "replicateM", "tail" : "(n: Int)(transaction: ZSTM[R, E, A]): ZSTM[R, E, Iterable[A]]", "member" : "zio.stm.ZSTM.replicateM", "link" : "zio\/stm\/ZSTM$.html#replicateM[R,E,A](n:Int)(transaction:zio.stm.ZSTM[R,E,A]):zio.stm.ZSTM[R,E,Iterable[A]]", "kind" : "def"}, {"label" : "replicate", "tail" : "(n: Int)(tx: ZSTM[R, E, A]): Iterable[ZSTM[R, E, A]]", "member" : "zio.stm.ZSTM.replicate", "link" : "zio\/stm\/ZSTM$.html#replicate[R,E,A](n:Int)(tx:zio.stm.ZSTM[R,E,A]):Iterable[zio.stm.ZSTM[R,E,A]]", "kind" : "def"}, {"label" : "reduceAll", "tail" : "(a: ZSTM[R, E, A], as: Iterable[ZSTM[R1, E, A]])(f: (A, A) => A): ZSTM[R1, E, A]", "member" : "zio.stm.ZSTM.reduceAll", "link" : "zio\/stm\/ZSTM$.html#reduceAll[R,R1<:R,E,A](a:zio.stm.ZSTM[R,E,A],as:Iterable[zio.stm.ZSTM[R1,E,A]])(f:(A,A)=>A):zio.stm.ZSTM[R1,E,A]", "kind" : "def"}, {"label" : "partition", "tail" : "(in: Iterable[A])(f: (A) => ZSTM[R, E, B])(ev: CanFail[E]): ZSTM[R, Nothing, (Iterable[E], Iterable[B])]", "member" : "zio.stm.ZSTM.partition", "link" : "zio\/stm\/ZSTM$.html#partition[R,E,A,B](in:Iterable[A])(f:A=>zio.stm.ZSTM[R,E,B])(implicitev:zio.CanFail[E]):zio.stm.ZSTM[R,Nothing,(Iterable[E],Iterable[B])]", "kind" : "def"}, {"label" : "partial", "tail" : "(a: => A): STM[Throwable, A]", "member" : "zio.stm.ZSTM.partial", "link" : "zio\/stm\/ZSTM$.html#partial[A](a:=>A):zio.stm.STM[Throwable,A]", "kind" : "def"}, {"label" : "none", "tail" : ": USTM[Option[Nothing]]", "member" : "zio.stm.ZSTM.none", "link" : "zio\/stm\/ZSTM$.html#none:zio.stm.USTM[Option[Nothing]]", "kind" : "val"}, {"label" : "mergeAll", "tail" : "(in: Iterable[ZSTM[R, E, A]])(zero: B)(f: (B, A) => B): ZSTM[R, E, B]", "member" : "zio.stm.ZSTM.mergeAll", "link" : "zio\/stm\/ZSTM$.html#mergeAll[R,E,A,B](in:Iterable[zio.stm.ZSTM[R,E,A]])(zero:B)(f:(B,A)=>B):zio.stm.ZSTM[R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(tx1: ZSTM[R, E, A], tx2: ZSTM[R, E, B], tx3: ZSTM[R, E, C], tx4: ZSTM[R, E, D])(f: (A, B, C, D) => F): ZSTM[R, E, F]", "member" : "zio.stm.ZSTM.mapN", "link" : "zio\/stm\/ZSTM$.html#mapN[R,E,A,B,C,D,F](tx1:zio.stm.ZSTM[R,E,A],tx2:zio.stm.ZSTM[R,E,B],tx3:zio.stm.ZSTM[R,E,C],tx4:zio.stm.ZSTM[R,E,D])(f:(A,B,C,D)=>F):zio.stm.ZSTM[R,E,F]", "kind" : "def"}, {"label" : "mapN", "tail" : "(tx1: ZSTM[R, E, A], tx2: ZSTM[R, E, B], tx3: ZSTM[R, E, C])(f: (A, B, C) => D): ZSTM[R, E, D]", "member" : "zio.stm.ZSTM.mapN", "link" : "zio\/stm\/ZSTM$.html#mapN[R,E,A,B,C,D](tx1:zio.stm.ZSTM[R,E,A],tx2:zio.stm.ZSTM[R,E,B],tx3:zio.stm.ZSTM[R,E,C])(f:(A,B,C)=>D):zio.stm.ZSTM[R,E,D]", "kind" : "def"}, {"label" : "mapN", "tail" : "(tx1: ZSTM[R, E, A], tx2: ZSTM[R, E, B])(f: (A, B) => C): ZSTM[R, E, C]", "member" : "zio.stm.ZSTM.mapN", "link" : "zio\/stm\/ZSTM$.html#mapN[R,E,A,B,C](tx1:zio.stm.ZSTM[R,E,A],tx2:zio.stm.ZSTM[R,E,B])(f:(A,B)=>C):zio.stm.ZSTM[R,E,C]", "kind" : "def"}, {"label" : "loopDiscard", "tail" : "(initial: S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => ZSTM[R, E, Any]): ZSTM[R, E, Unit]", "member" : "zio.stm.ZSTM.loopDiscard", "link" : "zio\/stm\/ZSTM$.html#loopDiscard[R,E,S](initial:S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.stm.ZSTM[R,E,Any]):zio.stm.ZSTM[R,E,Unit]", "kind" : "def"}, {"label" : "loop_", "tail" : "(initial: S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => ZSTM[R, E, Any]): ZSTM[R, E, Unit]", "member" : "zio.stm.ZSTM.loop_", "link" : "zio\/stm\/ZSTM$.html#loop_[R,E,S](initial:S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.stm.ZSTM[R,E,Any]):zio.stm.ZSTM[R,E,Unit]", "kind" : "def"}, {"label" : "loop", "tail" : "(initial: S)(cont: (S) => Boolean, inc: (S) => S)(body: (S) => ZSTM[R, E, A]): ZSTM[R, E, List[A]]", "member" : "zio.stm.ZSTM.loop", "link" : "zio\/stm\/ZSTM$.html#loop[R,E,A,S](initial:S)(cont:S=>Boolean,inc:S=>S)(body:S=>zio.stm.ZSTM[R,E,A]):zio.stm.ZSTM[R,E,List[A]]", "kind" : "def"}, {"label" : "left", "tail" : "(a: => A): USTM[Either[A, Nothing]]", "member" : "zio.stm.ZSTM.left", "link" : "zio\/stm\/ZSTM$.html#left[A](a:=>A):zio.stm.USTM[Either[A,Nothing]]", "kind" : "def"}, {"label" : "iterate", "tail" : "(initial: S)(cont: (S) => Boolean)(body: (S) => ZSTM[R, E, S]): ZSTM[R, E, S]", "member" : "zio.stm.ZSTM.iterate", "link" : "zio\/stm\/ZSTM$.html#iterate[R,E,S](initial:S)(cont:S=>Boolean)(body:S=>zio.stm.ZSTM[R,E,S]):zio.stm.ZSTM[R,E,S]", "kind" : "def"}, {"label" : "interruptAs", "tail" : "(fiberId: => FiberId): USTM[Nothing]", "member" : "zio.stm.ZSTM.interruptAs", "link" : "zio\/stm\/ZSTM$.html#interruptAs(fiberId:=>zio.FiberId):zio.stm.USTM[Nothing]", "kind" : "def"}, {"label" : "interrupt", "tail" : ": USTM[Nothing]", "member" : "zio.stm.ZSTM.interrupt", "link" : "zio\/stm\/ZSTM$.html#interrupt:zio.stm.USTM[Nothing]", "kind" : "lazy val"}, {"label" : "ifSTM", "tail" : "(b: ZSTM[R, E, Boolean]): IfSTM[R, E]", "member" : "zio.stm.ZSTM.ifSTM", "link" : "zio\/stm\/ZSTM$.html#ifSTM[R,E](b:zio.stm.ZSTM[R,E,Boolean]):zio.stm.ZSTM.IfSTM[R,E]", "kind" : "def"}, {"label" : "ifM", "tail" : "(b: ZSTM[R, E, Boolean]): IfSTM[R, E]", "member" : "zio.stm.ZSTM.ifM", "link" : "zio\/stm\/ZSTM$.html#ifM[R,E](b:zio.stm.ZSTM[R,E,Boolean]):zio.stm.ZSTM.IfSTM[R,E]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(a: => Try[A]): TaskSTM[A]", "member" : "zio.stm.ZSTM.fromTry", "link" : "zio\/stm\/ZSTM$.html#fromTry[A](a:=>scala.util.Try[A]):zio.stm.TaskSTM[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(v: => Option[A]): STM[Option[Nothing], A]", "member" : "zio.stm.ZSTM.fromOption", "link" : "zio\/stm\/ZSTM$.html#fromOption[A](v:=>Option[A]):zio.stm.STM[Option[Nothing],A]", "kind" : "def"}, {"label" : "fromFunctionM", "tail" : "(f: (R) => STM[E, A]): ZSTM[R, E, A]", "member" : "zio.stm.ZSTM.fromFunctionM", "link" : "zio\/stm\/ZSTM$.html#fromFunctionM[R,E,A](f:R=>zio.stm.STM[E,A]):zio.stm.ZSTM[R,E,A]", "kind" : "def"}, {"label" : "fromFunction", "tail" : "(f: (R) => A): URSTM[R, A]", "member" : "zio.stm.ZSTM.fromFunction", "link" : "zio\/stm\/ZSTM$.html#fromFunction[R,A](f:R=>A):zio.stm.URSTM[R,A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(e: => Either[E, A]): STM[E, A]", "member" : "zio.stm.ZSTM.fromEither", "link" : "zio\/stm\/ZSTM$.html#fromEither[E,A](e:=>Either[E,A]):zio.stm.STM[E,A]", "kind" : "def"}, {"label" : "foreachDiscard", "tail" : "(in: Iterable[A])(f: (A) => ZSTM[R, E, Any]): ZSTM[R, E, Unit]", "member" : "zio.stm.ZSTM.foreachDiscard", "link" : "zio\/stm\/ZSTM$.html#foreachDiscard[R,E,A](in:Iterable[A])(f:A=>zio.stm.ZSTM[R,E,Any]):zio.stm.ZSTM[R,E,Unit]", "kind" : "def"}, {"label" : "foreach_", "tail" : "(in: Iterable[A])(f: (A) => ZSTM[R, E, Any]): ZSTM[R, E, Unit]", "member" : "zio.stm.ZSTM.foreach_", "link" : "zio\/stm\/ZSTM$.html#foreach_[R,E,A](in:Iterable[A])(f:A=>zio.stm.ZSTM[R,E,Any]):zio.stm.ZSTM[R,E,Unit]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Set[A])(f: (A) => ZSTM[R, E, B]): ZSTM[R, E, Set[B]]", "member" : "zio.stm.ZSTM.foreach", "link" : "zio\/stm\/ZSTM$.html#foreach[R,E,A,B](in:Set[A])(f:A=>zio.stm.ZSTM[R,E,B]):zio.stm.ZSTM[R,E,Set[B]]", "kind" : "def"}, {"label" : "foreach", "tail" : "(in: Collection[A])(f: (A) => ZSTM[R, E, B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): ZSTM[R, E, Collection[B]]", "member" : "zio.stm.ZSTM.foreach", "link" : "zio\/stm\/ZSTM$.html#foreach[R,E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.stm.ZSTM[R,E,B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.stm.ZSTM[R,E,Collection[B]]", "kind" : "def"}, {"label" : "forall", "tail" : "(as: Iterable[A])(f: (A) => ZSTM[R, E, Boolean]): ZSTM[R, E, Boolean]", "member" : "zio.stm.ZSTM.forall", "link" : "zio\/stm\/ZSTM$.html#forall[R,E,A](as:Iterable[A])(f:A=>zio.stm.ZSTM[R,E,Boolean]):zio.stm.ZSTM[R,E,Boolean]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(in: Iterable[A])(zero: S)(f: (A, S) => ZSTM[R, E, S]): ZSTM[R, E, S]", "member" : "zio.stm.ZSTM.foldRight", "link" : "zio\/stm\/ZSTM$.html#foldRight[R,E,S,A](in:Iterable[A])(zero:S)(f:(A,S)=>zio.stm.ZSTM[R,E,S]):zio.stm.ZSTM[R,E,S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(in: Iterable[A])(zero: S)(f: (S, A) => ZSTM[R, E, S]): ZSTM[R, E, S]", "member" : "zio.stm.ZSTM.foldLeft", "link" : "zio\/stm\/ZSTM$.html#foldLeft[R,E,S,A](in:Iterable[A])(zero:S)(f:(S,A)=>zio.stm.ZSTM[R,E,S]):zio.stm.ZSTM[R,E,S]", "kind" : "def"}, {"label" : "flatten", "tail" : "(tx: ZSTM[R, E, ZSTM[R, E, A]]): ZSTM[R, E, A]", "member" : "zio.stm.ZSTM.flatten", "link" : "zio\/stm\/ZSTM$.html#flatten[R,E,A](tx:zio.stm.ZSTM[R,E,zio.stm.ZSTM[R,E,A]]):zio.stm.ZSTM[R,E,A]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Set[A])(f: (A) => ZSTM[R, E, Boolean]): ZSTM[R, E, Set[A]]", "member" : "zio.stm.ZSTM.filterNot", "link" : "zio\/stm\/ZSTM$.html#filterNot[R,E,A](as:Set[A])(f:A=>zio.stm.ZSTM[R,E,Boolean]):zio.stm.ZSTM[R,E,Set[A]]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(as: Collection[A])(f: (A) => ZSTM[R, E, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): ZSTM[R, E, Collection[A]]", "member" : "zio.stm.ZSTM.filterNot", "link" : "zio\/stm\/ZSTM$.html#filterNot[R,E,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.stm.ZSTM[R,E,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.stm.ZSTM[R,E,Collection[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Set[A])(f: (A) => ZSTM[R, E, Boolean]): ZSTM[R, E, Set[A]]", "member" : "zio.stm.ZSTM.filter", "link" : "zio\/stm\/ZSTM$.html#filter[R,E,A](as:Set[A])(f:A=>zio.stm.ZSTM[R,E,Boolean]):zio.stm.ZSTM[R,E,Set[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(as: Collection[A])(f: (A) => ZSTM[R, E, Boolean])(bf: zio.BuildFrom[Collection[A], A, Collection[A]]): ZSTM[R, E, Collection[A]]", "member" : "zio.stm.ZSTM.filter", "link" : "zio\/stm\/ZSTM$.html#filter[R,E,A,Collection[+Element]<:Iterable[Element]](as:Collection[A])(f:A=>zio.stm.ZSTM[R,E,Boolean])(implicitbf:zio.BuildFrom[Collection[A],A,Collection[A]]):zio.stm.ZSTM[R,E,Collection[A]]", "kind" : "def"}, {"label" : "fiberId", "tail" : ": USTM[FiberId]", "member" : "zio.stm.ZSTM.fiberId", "link" : "zio\/stm\/ZSTM$.html#fiberId:zio.stm.USTM[zio.FiberId]", "kind" : "val"}, {"label" : "fail", "tail" : "(e: => E): STM[E, Nothing]", "member" : "zio.stm.ZSTM.fail", "link" : "zio\/stm\/ZSTM$.html#fail[E](e:=>E):zio.stm.STM[E,Nothing]", "kind" : "def"}, {"label" : "exists", "tail" : "(as: Iterable[A])(f: (A) => ZSTM[R, E, Boolean]): ZSTM[R, E, Boolean]", "member" : "zio.stm.ZSTM.exists", "link" : "zio\/stm\/ZSTM$.html#exists[R,E,A](as:Iterable[A])(f:A=>zio.stm.ZSTM[R,E,Boolean]):zio.stm.ZSTM[R,E,Boolean]", "kind" : "def"}, {"label" : "environment", "tail" : "(): URSTM[R, R]", "member" : "zio.stm.ZSTM.environment", "link" : "zio\/stm\/ZSTM$.html#environment[R]:zio.stm.URSTM[R,R]", "kind" : "def"}, {"label" : "done", "tail" : "(exit: => TExit[E, A]): ZSTM[R, E, A]", "member" : "zio.stm.ZSTM.done", "link" : "zio\/stm\/ZSTM$.html#done[R,E,A](exit:=>zio.stm.ZSTM.internal.TExit[E,A]):zio.stm.ZSTM[R,E,A]", "kind" : "def"}, {"label" : "dieMessage", "tail" : "(m: => String): USTM[Nothing]", "member" : "zio.stm.ZSTM.dieMessage", "link" : "zio\/stm\/ZSTM$.html#dieMessage(m:=>String):zio.stm.USTM[Nothing]", "kind" : "def"}, {"label" : "die", "tail" : "(t: => Throwable): USTM[Nothing]", "member" : "zio.stm.ZSTM.die", "link" : "zio\/stm\/ZSTM$.html#die(t:=>Throwable):zio.stm.USTM[Nothing]", "kind" : "def"}, {"label" : "cond", "tail" : "(predicate: Boolean, result: => A, error: => E): STM[E, A]", "member" : "zio.stm.ZSTM.cond", "link" : "zio\/stm\/ZSTM$.html#cond[E,A](predicate:Boolean,result:=>A,error:=>E):zio.stm.STM[E,A]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(as: Iterable[A])(f: (A) => ZSTM[R, E, Option[B]]): ZSTM[R, E, Option[B]]", "member" : "zio.stm.ZSTM.collectFirst", "link" : "zio\/stm\/ZSTM$.html#collectFirst[R,E,A,B](as:Iterable[A])(f:A=>zio.stm.ZSTM[R,E,Option[B]]):zio.stm.ZSTM[R,E,Option[B]]", "kind" : "def"}, {"label" : "collectAllDiscard", "tail" : "(in: Iterable[ZSTM[R, E, A]]): ZSTM[R, E, Unit]", "member" : "zio.stm.ZSTM.collectAllDiscard", "link" : "zio\/stm\/ZSTM$.html#collectAllDiscard[R,E,A](in:Iterable[zio.stm.ZSTM[R,E,A]]):zio.stm.ZSTM[R,E,Unit]", "kind" : "def"}, {"label" : "collectAll_", "tail" : "(in: Iterable[ZSTM[R, E, A]]): ZSTM[R, E, Unit]", "member" : "zio.stm.ZSTM.collectAll_", "link" : "zio\/stm\/ZSTM$.html#collectAll_[R,E,A](in:Iterable[zio.stm.ZSTM[R,E,A]]):zio.stm.ZSTM[R,E,Unit]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Set[ZSTM[R, E, A]]): ZSTM[R, E, Set[A]]", "member" : "zio.stm.ZSTM.collectAll", "link" : "zio\/stm\/ZSTM$.html#collectAll[R,E,A](in:Set[zio.stm.ZSTM[R,E,A]]):zio.stm.ZSTM[R,E,Set[A]]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(in: Collection[ZSTM[R, E, A]])(bf: zio.BuildFrom[Collection[ZSTM[R, E, A]], A, Collection[A]]): ZSTM[R, E, Collection[A]]", "member" : "zio.stm.ZSTM.collectAll", "link" : "zio\/stm\/ZSTM$.html#collectAll[R,E,A,Collection[+Element]<:Iterable[Element]](in:Collection[zio.stm.ZSTM[R,E,A]])(implicitbf:zio.BuildFrom[Collection[zio.stm.ZSTM[R,E,A]],A,Collection[A]]):zio.stm.ZSTM[R,E,Collection[A]]", "kind" : "def"}, {"label" : "collect", "tail" : "(in: Collection[A])(f: (A) => ZSTM[R, Option[E], B])(bf: zio.BuildFrom[Collection[A], B, Collection[B]]): ZSTM[R, E, Collection[B]]", "member" : "zio.stm.ZSTM.collect", "link" : "zio\/stm\/ZSTM$.html#collect[R,E,A,B,Collection[+Element]<:Iterable[Element]](in:Collection[A])(f:A=>zio.stm.ZSTM[R,Option[E],B])(implicitbf:zio.BuildFrom[Collection[A],B,Collection[B]]):zio.stm.ZSTM[R,E,Collection[B]]", "kind" : "def"}, {"label" : "check", "tail" : "(p: => Boolean): URSTM[R, Unit]", "member" : "zio.stm.ZSTM.check", "link" : "zio\/stm\/ZSTM$.html#check[R](p:=>Boolean):zio.stm.URSTM[R,Unit]", "kind" : "def"}, {"label" : "attempt", "tail" : "(a: => A): STM[Throwable, A]", "member" : "zio.stm.ZSTM.attempt", "link" : "zio\/stm\/ZSTM$.html#attempt[A](a:=>A):zio.stm.STM[Throwable,A]", "kind" : "def"}, {"label" : "atomically", "tail" : "(stm: ZSTM[R, E, A]): ZIO[R, E, A]", "member" : "zio.stm.ZSTM.atomically", "link" : "zio\/stm\/ZSTM$.html#atomically[R,E,A](stm:zio.stm.ZSTM[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "accessSTM", "tail" : "(): AccessSTMPartiallyApplied[R]", "member" : "zio.stm.ZSTM.accessSTM", "link" : "zio\/stm\/ZSTM$.html#accessSTM[R]:zio.stm.ZSTM.AccessSTMPartiallyApplied[R]", "kind" : "def"}, {"label" : "accessM", "tail" : "(): AccessSTMPartiallyApplied[R]", "member" : "zio.stm.ZSTM.accessM", "link" : "zio\/stm\/ZSTM$.html#accessM[R]:zio.stm.ZSTM.AccessSTMPartiallyApplied[R]", "kind" : "def"}, {"label" : "access", "tail" : "(): AccessPartiallyApplied[R]", "member" : "zio.stm.ZSTM.access", "link" : "zio\/stm\/ZSTM$.html#access[R]:zio.stm.ZSTM.AccessPartiallyApplied[R]", "kind" : "def"}, {"label" : "absolve", "tail" : "(z: ZSTM[R, E, Either[E, A]]): ZSTM[R, E, A]", "member" : "zio.stm.ZSTM.absolve", "link" : "zio\/stm\/ZSTM$.html#absolve[R,E,A](z:zio.stm.ZSTM[R,E,Either[E,A]]):zio.stm.ZSTM[R,E,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/ZSTM$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/ZSTM$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/ZSTM$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/ZSTM$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/ZSTM$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/ZSTM$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/ZSTM$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZSTM$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZSTM$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZSTM$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/ZSTM$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/ZSTM$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/ZSTM$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/ZSTM$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/ZSTM$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/ZSTM$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/ZSTM$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/ZSTM$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/ZSTM$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/stm\/ZSTM.html", "kind" : "trait", "members_trait" : [{"label" : "zipWith", "tail" : "(that: => ZSTM[R1, E1, B])(f: (A, B) => C): ZSTM[R1, E1, C]", "member" : "zio.stm.ZSTM.zipWith", "link" : "zio\/stm\/ZSTM.html#zipWith[R1<:R,E1>:E,B,C](that:=>zio.stm.ZSTM[R1,E1,B])(f:(A,B)=>C):zio.stm.ZSTM[R1,E1,C]", "kind" : "def"}, {"label" : "zipRight", "tail" : "(that: => ZSTM[R1, E1, B]): ZSTM[R1, E1, B]", "member" : "zio.stm.ZSTM.zipRight", "link" : "zio\/stm\/ZSTM.html#zipRight[R1<:R,E1>:E,B](that:=>zio.stm.ZSTM[R1,E1,B]):zio.stm.ZSTM[R1,E1,B]", "kind" : "def"}, {"label" : "zipLeft", "tail" : "(that: => ZSTM[R1, E1, B]): ZSTM[R1, E1, A]", "member" : "zio.stm.ZSTM.zipLeft", "link" : "zio\/stm\/ZSTM.html#zipLeft[R1<:R,E1>:E,B](that:=>zio.stm.ZSTM[R1,E1,B]):zio.stm.ZSTM[R1,E1,A]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: => ZSTM[R1, E1, B])(zippable: Zippable[A, B]): ZSTM[R1, E1, Out]", "member" : "zio.stm.ZSTM.zip", "link" : "zio\/stm\/ZSTM.html#zip[R1<:R,E1>:E,B](that:=>zio.stm.ZSTM[R1,E1,B])(implicitzippable:zio.Zippable[A,B]):zio.stm.ZSTM[R1,E1,zippable.Out]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(f: (A) => Boolean): ZSTM[R, E, A]", "member" : "zio.stm.ZSTM.withFilter", "link" : "zio\/stm\/ZSTM.html#withFilter(f:A=>Boolean):zio.stm.ZSTM[R,E,A]", "kind" : "def"}, {"label" : "whenSTM", "tail" : "(b: ZSTM[R1, E1, Boolean]): ZSTM[R1, E1, Option[A]]", "member" : "zio.stm.ZSTM.whenSTM", "link" : "zio\/stm\/ZSTM.html#whenSTM[R1<:R,E1>:E](b:zio.stm.ZSTM[R1,E1,Boolean]):zio.stm.ZSTM[R1,E1,Option[A]]", "kind" : "def"}, {"label" : "whenM", "tail" : "(b: ZSTM[R1, E1, Boolean]): ZSTM[R1, E1, Option[A]]", "member" : "zio.stm.ZSTM.whenM", "link" : "zio\/stm\/ZSTM.html#whenM[R1<:R,E1>:E](b:zio.stm.ZSTM[R1,E1,Boolean]):zio.stm.ZSTM[R1,E1,Option[A]]", "kind" : "def"}, {"label" : "when", "tail" : "(b: => Boolean): ZSTM[R, E, Option[A]]", "member" : "zio.stm.ZSTM.when", "link" : "zio\/stm\/ZSTM.html#when(b:=>Boolean):zio.stm.ZSTM[R,E,Option[A]]", "kind" : "def"}, {"label" : "updateServiceAt", "tail" : "(): UpdateServiceAt[R, E, A, Service]", "member" : "zio.stm.ZSTM.updateServiceAt", "link" : "zio\/stm\/ZSTM.html#updateServiceAt[Service]:zio.stm.ZSTM.UpdateServiceAt[R,E,A,Service]", "kind" : "final def"}, {"label" : "updateService", "tail" : "(): UpdateService[R, E, A, M]", "member" : "zio.stm.ZSTM.updateService", "link" : "zio\/stm\/ZSTM.html#updateService[M]:zio.stm.ZSTM.UpdateService[R,E,A,M]", "kind" : "def"}, {"label" : "unsome", "tail" : "(ev: <:<[E, Option[E1]]): ZSTM[R, E1, Option[A]]", "member" : "zio.stm.ZSTM.unsome", "link" : "zio\/stm\/ZSTM.html#unsome[E1](implicitev:E<:<Option[E1]):zio.stm.ZSTM[R,E1,Option[A]]", "kind" : "def"}, {"label" : "unright", "tail" : "(ev: IsSubtypeOfError[E, Either[B, E1]]): ZSTM[R, E1, Either[B, A]]", "member" : "zio.stm.ZSTM.unright", "link" : "zio\/stm\/ZSTM.html#unright[E1,B](implicitev:zio.IsSubtypeOfError[E,Either[B,E1]]):zio.stm.ZSTM[R,E1,Either[B,A]]", "kind" : "final def"}, {"label" : "unoption", "tail" : "(ev: <:<[E, Option[E1]]): ZSTM[R, E1, Option[A]]", "member" : "zio.stm.ZSTM.unoption", "link" : "zio\/stm\/ZSTM.html#unoption[E1](implicitev:E<:<Option[E1]):zio.stm.ZSTM[R,E1,Option[A]]", "kind" : "def"}, {"label" : "unleft", "tail" : "(ev: IsSubtypeOfError[E, Either[E1, B]]): ZSTM[R, E1, Either[A, B]]", "member" : "zio.stm.ZSTM.unleft", "link" : "zio\/stm\/ZSTM.html#unleft[E1,B](implicitev:zio.IsSubtypeOfError[E,Either[E1,B]]):zio.stm.ZSTM[R,E1,Either[A,B]]", "kind" : "final def"}, {"label" : "unlessSTM", "tail" : "(b: ZSTM[R1, E1, Boolean]): ZSTM[R1, E1, Option[A]]", "member" : "zio.stm.ZSTM.unlessSTM", "link" : "zio\/stm\/ZSTM.html#unlessSTM[R1<:R,E1>:E](b:zio.stm.ZSTM[R1,E1,Boolean]):zio.stm.ZSTM[R1,E1,Option[A]]", "kind" : "def"}, {"label" : "unlessM", "tail" : "(b: ZSTM[R1, E1, Boolean]): ZSTM[R1, E1, Option[A]]", "member" : "zio.stm.ZSTM.unlessM", "link" : "zio\/stm\/ZSTM.html#unlessM[R1<:R,E1>:E](b:zio.stm.ZSTM[R1,E1,Boolean]):zio.stm.ZSTM[R1,E1,Option[A]]", "kind" : "def"}, {"label" : "unless", "tail" : "(b: => Boolean): ZSTM[R, E, Option[A]]", "member" : "zio.stm.ZSTM.unless", "link" : "zio\/stm\/ZSTM.html#unless(b:=>Boolean):zio.stm.ZSTM[R,E,Option[A]]", "kind" : "def"}, {"label" : "unit", "tail" : "(): ZSTM[R, E, Unit]", "member" : "zio.stm.ZSTM.unit", "link" : "zio\/stm\/ZSTM.html#unit:zio.stm.ZSTM[R,E,Unit]", "kind" : "def"}, {"label" : "tapError", "tail" : "(f: (E) => ZSTM[R1, E1, Any])(ev: CanFail[E]): ZSTM[R1, E1, A]", "member" : "zio.stm.ZSTM.tapError", "link" : "zio\/stm\/ZSTM.html#tapError[R1<:R,E1>:E](f:E=>zio.stm.ZSTM[R1,E1,Any])(implicitev:zio.CanFail[E]):zio.stm.ZSTM[R1,E1,A]", "kind" : "def"}, {"label" : "tapBoth", "tail" : "(f: (E) => ZSTM[R1, E1, Any], g: (A) => ZSTM[R1, E1, Any])(ev: CanFail[E]): ZSTM[R1, E1, A]", "member" : "zio.stm.ZSTM.tapBoth", "link" : "zio\/stm\/ZSTM.html#tapBoth[R1<:R,E1>:E](f:E=>zio.stm.ZSTM[R1,E1,Any],g:A=>zio.stm.ZSTM[R1,E1,Any])(implicitev:zio.CanFail[E]):zio.stm.ZSTM[R1,E1,A]", "kind" : "def"}, {"label" : "tap", "tail" : "(f: (A) => ZSTM[R1, E1, Any]): ZSTM[R1, E1, A]", "member" : "zio.stm.ZSTM.tap", "link" : "zio\/stm\/ZSTM.html#tap[R1<:R,E1>:E](f:A=>zio.stm.ZSTM[R1,E1,Any]):zio.stm.ZSTM[R1,E1,A]", "kind" : "def"}, {"label" : "summarized", "tail" : "(summary: ZSTM[R1, E1, B])(f: (B, B) => C): ZSTM[R1, E1, (C, A)]", "member" : "zio.stm.ZSTM.summarized", "link" : "zio\/stm\/ZSTM.html#summarized[R1<:R,E1>:E,B,C](summary:zio.stm.ZSTM[R1,E1,B])(f:(B,B)=>C):zio.stm.ZSTM[R1,E1,(C,A)]", "kind" : "def"}, {"label" : "someOrFailException", "tail" : "(ev: <:<[A, Option[B]], ev2: <:<[NoSuchElementException, E1]): ZSTM[R, E1, B]", "member" : "zio.stm.ZSTM.someOrFailException", "link" : "zio\/stm\/ZSTM.html#someOrFailException[B,E1>:E](implicitev:A<:<Option[B],implicitev2:NoSuchElementException<:<E1):zio.stm.ZSTM[R,E1,B]", "kind" : "def"}, {"label" : "someOrFail", "tail" : "(e: => E1)(ev: <:<[A, Option[B]]): ZSTM[R, E1, B]", "member" : "zio.stm.ZSTM.someOrFail", "link" : "zio\/stm\/ZSTM.html#someOrFail[B,E1>:E](e:=>E1)(implicitev:A<:<Option[B]):zio.stm.ZSTM[R,E1,B]", "kind" : "def"}, {"label" : "someOrElseSTM", "tail" : "(default: ZSTM[R1, E1, B])(ev: <:<[A, Option[B]]): ZSTM[R1, E1, B]", "member" : "zio.stm.ZSTM.someOrElseSTM", "link" : "zio\/stm\/ZSTM.html#someOrElseSTM[B,R1<:R,E1>:E](default:zio.stm.ZSTM[R1,E1,B])(implicitev:A<:<Option[B]):zio.stm.ZSTM[R1,E1,B]", "kind" : "def"}, {"label" : "someOrElseM", "tail" : "(default: ZSTM[R1, E1, B])(ev: <:<[A, Option[B]]): ZSTM[R1, E1, B]", "member" : "zio.stm.ZSTM.someOrElseM", "link" : "zio\/stm\/ZSTM.html#someOrElseM[B,R1<:R,E1>:E](default:zio.stm.ZSTM[R1,E1,B])(implicitev:A<:<Option[B]):zio.stm.ZSTM[R1,E1,B]", "kind" : "def"}, {"label" : "someOrElse", "tail" : "(default: => B)(ev: <:<[A, Option[B]]): ZSTM[R, E, B]", "member" : "zio.stm.ZSTM.someOrElse", "link" : "zio\/stm\/ZSTM.html#someOrElse[B](default:=>B)(implicitev:A<:<Option[B]):zio.stm.ZSTM[R,E,B]", "kind" : "def"}, {"label" : "some", "tail" : "(ev: <:<[A, Option[B]]): ZSTM[R, Option[E], B]", "member" : "zio.stm.ZSTM.some", "link" : "zio\/stm\/ZSTM.html#some[B](implicitev:A<:<Option[B]):zio.stm.ZSTM[R,Option[E],B]", "kind" : "def"}, {"label" : "right", "tail" : "(ev: IsSubtypeOfOutput[A, Either[B, C]]): ZSTM[R, Either[B, E], C]", "member" : "zio.stm.ZSTM.right", "link" : "zio\/stm\/ZSTM.html#right[B,C](implicitev:zio.IsSubtypeOfOutput[A,Either[B,C]]):zio.stm.ZSTM[R,Either[B,E],C]", "kind" : "final def"}, {"label" : "retryWhile", "tail" : "(f: (A) => Boolean): ZSTM[R, E, A]", "member" : "zio.stm.ZSTM.retryWhile", "link" : "zio\/stm\/ZSTM.html#retryWhile(f:A=>Boolean):zio.stm.ZSTM[R,E,A]", "kind" : "def"}, {"label" : "retryUntil", "tail" : "(f: (A) => Boolean): ZSTM[R, E, A]", "member" : "zio.stm.ZSTM.retryUntil", "link" : "zio\/stm\/ZSTM.html#retryUntil(f:A=>Boolean):zio.stm.ZSTM[R,E,A]", "kind" : "def"}, {"label" : "rejectSTM", "tail" : "(pf: PartialFunction[A, ZSTM[R1, E1, E1]]): ZSTM[R1, E1, A]", "member" : "zio.stm.ZSTM.rejectSTM", "link" : "zio\/stm\/ZSTM.html#rejectSTM[R1<:R,E1>:E](pf:PartialFunction[A,zio.stm.ZSTM[R1,E1,E1]]):zio.stm.ZSTM[R1,E1,A]", "kind" : "def"}, {"label" : "rejectM", "tail" : "(pf: PartialFunction[A, ZSTM[R1, E1, E1]]): ZSTM[R1, E1, A]", "member" : "zio.stm.ZSTM.rejectM", "link" : "zio\/stm\/ZSTM.html#rejectM[R1<:R,E1>:E](pf:PartialFunction[A,zio.stm.ZSTM[R1,E1,E1]]):zio.stm.ZSTM[R1,E1,A]", "kind" : "def"}, {"label" : "reject", "tail" : "(pf: PartialFunction[A, E1]): ZSTM[R, E1, A]", "member" : "zio.stm.ZSTM.reject", "link" : "zio\/stm\/ZSTM.html#reject[E1>:E](pf:PartialFunction[A,E1]):zio.stm.ZSTM[R,E1,A]", "kind" : "def"}, {"label" : "refineOrDieWith", "tail" : "(pf: PartialFunction[E, E1])(f: (E) => Throwable)(ev: CanFail[E]): ZSTM[R, E1, A]", "member" : "zio.stm.ZSTM.refineOrDieWith", "link" : "zio\/stm\/ZSTM.html#refineOrDieWith[E1](pf:PartialFunction[E,E1])(f:E=>Throwable)(implicitev:zio.CanFail[E]):zio.stm.ZSTM[R,E1,A]", "kind" : "def"}, {"label" : "refineOrDie", "tail" : "(pf: PartialFunction[E, E1])(ev1: IsSubtypeOfError[E, Throwable], ev2: CanFail[E]): ZSTM[R, E1, A]", "member" : "zio.stm.ZSTM.refineOrDie", "link" : "zio\/stm\/ZSTM.html#refineOrDie[E1](pf:PartialFunction[E,E1])(implicitev1:zio.IsSubtypeOfError[E,Throwable],implicitev2:zio.CanFail[E]):zio.stm.ZSTM[R,E1,A]", "kind" : "def"}, {"label" : "provideSome", "tail" : "(f: (R0) => R): ZSTM[R0, E, A]", "member" : "zio.stm.ZSTM.provideSome", "link" : "zio\/stm\/ZSTM.html#provideSome[R0](f:R0=>R):zio.stm.ZSTM[R0,E,A]", "kind" : "def"}, {"label" : "provide", "tail" : "(r: R): STM[E, A]", "member" : "zio.stm.ZSTM.provide", "link" : "zio\/stm\/ZSTM.html#provide(r:R):zio.stm.STM[E,A]", "kind" : "def"}, {"label" : "orTry", "tail" : "(that: => ZSTM[R1, E1, A1]): ZSTM[R1, E1, A1]", "member" : "zio.stm.ZSTM.orTry", "link" : "zio\/stm\/ZSTM.html#orTry[R1<:R,E1>:E,A1>:A](that:=>zio.stm.ZSTM[R1,E1,A1]):zio.stm.ZSTM[R1,E1,A1]", "kind" : "def"}, {"label" : "orElseSucceed", "tail" : "(a1: => A1): URSTM[R, A1]", "member" : "zio.stm.ZSTM.orElseSucceed", "link" : "zio\/stm\/ZSTM.html#orElseSucceed[A1>:A](a1:=>A1):zio.stm.URSTM[R,A1]", "kind" : "def"}, {"label" : "orElseOptional", "tail" : "(that: => ZSTM[R1, Option[E1], A1])(ev: <:<[E, Option[E1]]): ZSTM[R1, Option[E1], A1]", "member" : "zio.stm.ZSTM.orElseOptional", "link" : "zio\/stm\/ZSTM.html#orElseOptional[R1<:R,E1,A1>:A](that:=>zio.stm.ZSTM[R1,Option[E1],A1])(implicitev:E<:<Option[E1]):zio.stm.ZSTM[R1,Option[E1],A1]", "kind" : "def"}, {"label" : "orElseFail", "tail" : "(e1: => E1): ZSTM[R, E1, A]", "member" : "zio.stm.ZSTM.orElseFail", "link" : "zio\/stm\/ZSTM.html#orElseFail[E1](e1:=>E1):zio.stm.ZSTM[R,E1,A]", "kind" : "def"}, {"label" : "orElseEither", "tail" : "(that: => ZSTM[R1, E1, B]): ZSTM[R1, E1, Either[A, B]]", "member" : "zio.stm.ZSTM.orElseEither", "link" : "zio\/stm\/ZSTM.html#orElseEither[R1<:R,E1,B](that:=>zio.stm.ZSTM[R1,E1,B]):zio.stm.ZSTM[R1,E1,Either[A,B]]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: => ZSTM[R1, E1, A1]): ZSTM[R1, E1, A1]", "member" : "zio.stm.ZSTM.orElse", "link" : "zio\/stm\/ZSTM.html#orElse[R1<:R,E1,A1>:A](that:=>zio.stm.ZSTM[R1,E1,A1]):zio.stm.ZSTM[R1,E1,A1]", "kind" : "def"}, {"label" : "orDieWith", "tail" : "(f: (E) => Throwable)(ev: CanFail[E]): URSTM[R, A]", "member" : "zio.stm.ZSTM.orDieWith", "link" : "zio\/stm\/ZSTM.html#orDieWith(f:E=>Throwable)(implicitev:zio.CanFail[E]):zio.stm.URSTM[R,A]", "kind" : "def"}, {"label" : "orDie", "tail" : "(ev1: IsSubtypeOfError[E, Throwable], ev2: CanFail[E]): URSTM[R, A]", "member" : "zio.stm.ZSTM.orDie", "link" : "zio\/stm\/ZSTM.html#orDie(implicitev1:zio.IsSubtypeOfError[E,Throwable],implicitev2:zio.CanFail[E]):zio.stm.URSTM[R,A]", "kind" : "def"}, {"label" : "optional", "tail" : "(ev: <:<[E, Option[E1]]): ZSTM[R, E1, Option[A]]", "member" : "zio.stm.ZSTM.optional", "link" : "zio\/stm\/ZSTM.html#optional[E1](implicitev:E<:<Option[E1]):zio.stm.ZSTM[R,E1,Option[A]]", "kind" : "def"}, {"label" : "option", "tail" : "(ev: CanFail[E]): URSTM[R, Option[A]]", "member" : "zio.stm.ZSTM.option", "link" : "zio\/stm\/ZSTM.html#option(implicitev:zio.CanFail[E]):zio.stm.URSTM[R,Option[A]]", "kind" : "def"}, {"label" : "none", "tail" : "(ev: <:<[A, Option[B]]): ZSTM[R, Option[E], Unit]", "member" : "zio.stm.ZSTM.none", "link" : "zio\/stm\/ZSTM.html#none[B](implicitev:A<:<Option[B]):zio.stm.ZSTM[R,Option[E],Unit]", "kind" : "def"}, {"label" : "merge", "tail" : "(ev1: <:<[E, A1], ev2: CanFail[E]): URSTM[R, A1]", "member" : "zio.stm.ZSTM.merge", "link" : "zio\/stm\/ZSTM.html#merge[A1>:A](implicitev1:E<:<A1,implicitev2:zio.CanFail[E]):zio.stm.URSTM[R,A1]", "kind" : "def"}, {"label" : "mapPartial", "tail" : "(f: (A) => B)(ev: IsSubtypeOfError[E, Throwable]): ZSTM[R, Throwable, B]", "member" : "zio.stm.ZSTM.mapPartial", "link" : "zio\/stm\/ZSTM.html#mapPartial[B](f:A=>B)(implicitev:zio.IsSubtypeOfError[E,Throwable]):zio.stm.ZSTM[R,Throwable,B]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (E) => E1)(ev: CanFail[E]): ZSTM[R, E1, A]", "member" : "zio.stm.ZSTM.mapError", "link" : "zio\/stm\/ZSTM.html#mapError[E1](f:E=>E1)(implicitev:zio.CanFail[E]):zio.stm.ZSTM[R,E1,A]", "kind" : "def"}, {"label" : "mapBoth", "tail" : "(f: (E) => E2, g: (A) => B)(ev: CanFail[E]): ZSTM[R, E2, B]", "member" : "zio.stm.ZSTM.mapBoth", "link" : "zio\/stm\/ZSTM.html#mapBoth[E2,B](f:E=>E2,g:A=>B)(implicitev:zio.CanFail[E]):zio.stm.ZSTM[R,E2,B]", "kind" : "def"}, {"label" : "mapAttempt", "tail" : "(f: (A) => B)(ev: IsSubtypeOfError[E, Throwable]): ZSTM[R, Throwable, B]", "member" : "zio.stm.ZSTM.mapAttempt", "link" : "zio\/stm\/ZSTM.html#mapAttempt[B](f:A=>B)(implicitev:zio.IsSubtypeOfError[E,Throwable]):zio.stm.ZSTM[R,Throwable,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): ZSTM[R, E, B]", "member" : "zio.stm.ZSTM.map", "link" : "zio\/stm\/ZSTM.html#map[B](f:A=>B):zio.stm.ZSTM[R,E,B]", "kind" : "def"}, {"label" : "left", "tail" : "(ev: IsSubtypeOfOutput[A, Either[B, C]]): ZSTM[R, Either[E, C], B]", "member" : "zio.stm.ZSTM.left", "link" : "zio\/stm\/ZSTM.html#left[B,C](implicitev:zio.IsSubtypeOfOutput[A,Either[B,C]]):zio.stm.ZSTM[R,Either[E,C],B]", "kind" : "def"}, {"label" : "isSuccess", "tail" : "(): ZSTM[R, Nothing, Boolean]", "member" : "zio.stm.ZSTM.isSuccess", "link" : "zio\/stm\/ZSTM.html#isSuccess:zio.stm.ZSTM[R,Nothing,Boolean]", "kind" : "def"}, {"label" : "isFailure", "tail" : "(): ZSTM[R, Nothing, Boolean]", "member" : "zio.stm.ZSTM.isFailure", "link" : "zio\/stm\/ZSTM.html#isFailure:zio.stm.ZSTM[R,Nothing,Boolean]", "kind" : "def"}, {"label" : "ignore", "tail" : "(): URSTM[R, Unit]", "member" : "zio.stm.ZSTM.ignore", "link" : "zio\/stm\/ZSTM.html#ignore:zio.stm.URSTM[R,Unit]", "kind" : "def"}, {"label" : "head", "tail" : "(ev: <:<[A, List[B]]): ZSTM[R, Option[E], B]", "member" : "zio.stm.ZSTM.head", "link" : "zio\/stm\/ZSTM.html#head[B](implicitev:A<:<List[B]):zio.stm.ZSTM[R,Option[E],B]", "kind" : "def"}, {"label" : "get", "tail" : "(ev1: <:<[E, Nothing], ev2: <:<[A, Option[B]]): ZSTM[R, Option[Nothing], B]", "member" : "zio.stm.ZSTM.get", "link" : "zio\/stm\/ZSTM.html#get[B](implicitev1:E<:<Nothing,implicitev2:A<:<Option[B]):zio.stm.ZSTM[R,Option[Nothing],B]", "kind" : "def"}, {"label" : "foldSTM", "tail" : "(f: (E) => ZSTM[R1, E1, B], g: (A) => ZSTM[R1, E1, B])(ev: CanFail[E]): ZSTM[R1, E1, B]", "member" : "zio.stm.ZSTM.foldSTM", "link" : "zio\/stm\/ZSTM.html#foldSTM[R1<:R,E1,B](f:E=>zio.stm.ZSTM[R1,E1,B],g:A=>zio.stm.ZSTM[R1,E1,B])(implicitev:zio.CanFail[E]):zio.stm.ZSTM[R1,E1,B]", "kind" : "def"}, {"label" : "foldM", "tail" : "(f: (E) => ZSTM[R1, E1, B], g: (A) => ZSTM[R1, E1, B])(ev: CanFail[E]): ZSTM[R1, E1, B]", "member" : "zio.stm.ZSTM.foldM", "link" : "zio\/stm\/ZSTM.html#foldM[R1<:R,E1,B](f:E=>zio.stm.ZSTM[R1,E1,B],g:A=>zio.stm.ZSTM[R1,E1,B])(implicitev:zio.CanFail[E]):zio.stm.ZSTM[R1,E1,B]", "kind" : "def"}, {"label" : "fold", "tail" : "(f: (E) => B, g: (A) => B)(ev: CanFail[E]): URSTM[R, B]", "member" : "zio.stm.ZSTM.fold", "link" : "zio\/stm\/ZSTM.html#fold[B](f:E=>B,g:A=>B)(implicitev:zio.CanFail[E]):zio.stm.URSTM[R,B]", "kind" : "def"}, {"label" : "flipWith", "tail" : "(f: (ZSTM[R, A, E]) => ZSTM[R1, A1, E1]): ZSTM[R1, E1, A1]", "member" : "zio.stm.ZSTM.flipWith", "link" : "zio\/stm\/ZSTM.html#flipWith[R1,A1,E1](f:zio.stm.ZSTM[R,A,E]=>zio.stm.ZSTM[R1,A1,E1]):zio.stm.ZSTM[R1,E1,A1]", "kind" : "def"}, {"label" : "flip", "tail" : "(ev: CanFail[E]): ZSTM[R, A, E]", "member" : "zio.stm.ZSTM.flip", "link" : "zio\/stm\/ZSTM.html#flip(implicitev:zio.CanFail[E]):zio.stm.ZSTM[R,A,E]", "kind" : "def"}, {"label" : "flattenErrorOption", "tail" : "(default: => E2)(ev: <:<[E, Option[E1]]): ZSTM[R, E1, A]", "member" : "zio.stm.ZSTM.flattenErrorOption", "link" : "zio\/stm\/ZSTM.html#flattenErrorOption[E1,E2<:E1](default:=>E2)(implicitev:E<:<Option[E1]):zio.stm.ZSTM[R,E1,A]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, ZSTM[R1, E1, B]]): ZSTM[R1, E1, B]", "member" : "zio.stm.ZSTM.flatten", "link" : "zio\/stm\/ZSTM.html#flatten[R1<:R,E1>:E,B](implicitev:A<:<zio.stm.ZSTM[R1,E1,B]):zio.stm.ZSTM[R1,E1,B]", "kind" : "def"}, {"label" : "flatMapError", "tail" : "(f: (E) => ZSTM[R1, Nothing, E2])(ev: CanFail[E]): ZSTM[R1, E2, A]", "member" : "zio.stm.ZSTM.flatMapError", "link" : "zio\/stm\/ZSTM.html#flatMapError[R1<:R,E2](f:E=>zio.stm.ZSTM[R1,Nothing,E2])(implicitev:zio.CanFail[E]):zio.stm.ZSTM[R1,E2,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => ZSTM[R1, E1, B]): ZSTM[R1, E1, B]", "member" : "zio.stm.ZSTM.flatMap", "link" : "zio\/stm\/ZSTM.html#flatMap[R1<:R,E1>:E,B](f:A=>zio.stm.ZSTM[R1,E1,B]):zio.stm.ZSTM[R1,E1,B]", "kind" : "def"}, {"label" : "filterOrFail", "tail" : "(p: (A) => Boolean)(e: => E1): ZSTM[R, E1, A]", "member" : "zio.stm.ZSTM.filterOrFail", "link" : "zio\/stm\/ZSTM.html#filterOrFail[E1>:E](p:A=>Boolean)(e:=>E1):zio.stm.ZSTM[R,E1,A]", "kind" : "def"}, {"label" : "filterOrElseWith", "tail" : "(p: (A) => Boolean)(f: (A) => ZSTM[R1, E1, A1]): ZSTM[R1, E1, A1]", "member" : "zio.stm.ZSTM.filterOrElseWith", "link" : "zio\/stm\/ZSTM.html#filterOrElseWith[R1<:R,E1>:E,A1>:A](p:A=>Boolean)(f:A=>zio.stm.ZSTM[R1,E1,A1]):zio.stm.ZSTM[R1,E1,A1]", "kind" : "def"}, {"label" : "filterOrElse_", "tail" : "(p: (A) => Boolean)(zstm: => ZSTM[R1, E1, A1]): ZSTM[R1, E1, A1]", "member" : "zio.stm.ZSTM.filterOrElse_", "link" : "zio\/stm\/ZSTM.html#filterOrElse_[R1<:R,E1>:E,A1>:A](p:A=>Boolean)(zstm:=>zio.stm.ZSTM[R1,E1,A1]):zio.stm.ZSTM[R1,E1,A1]", "kind" : "def"}, {"label" : "filterOrElse", "tail" : "(p: (A) => Boolean)(zstm: => ZSTM[R1, E1, A1]): ZSTM[R1, E1, A1]", "member" : "zio.stm.ZSTM.filterOrElse", "link" : "zio\/stm\/ZSTM.html#filterOrElse[R1<:R,E1>:E,A1>:A](p:A=>Boolean)(zstm:=>zio.stm.ZSTM[R1,E1,A1]):zio.stm.ZSTM[R1,E1,A1]", "kind" : "def"}, {"label" : "filterOrDieMessage", "tail" : "(p: (A) => Boolean)(msg: => String): ZSTM[R, E, A]", "member" : "zio.stm.ZSTM.filterOrDieMessage", "link" : "zio\/stm\/ZSTM.html#filterOrDieMessage(p:A=>Boolean)(msg:=>String):zio.stm.ZSTM[R,E,A]", "kind" : "def"}, {"label" : "filterOrDie", "tail" : "(p: (A) => Boolean)(t: => Throwable): ZSTM[R, E, A]", "member" : "zio.stm.ZSTM.filterOrDie", "link" : "zio\/stm\/ZSTM.html#filterOrDie(p:A=>Boolean)(t:=>Throwable):zio.stm.ZSTM[R,E,A]", "kind" : "def"}, {"label" : "eventually", "tail" : "(ev: CanFail[E]): URSTM[R, A]", "member" : "zio.stm.ZSTM.eventually", "link" : "zio\/stm\/ZSTM.html#eventually(implicitev:zio.CanFail[E]):zio.stm.URSTM[R,A]", "kind" : "def"}, {"label" : "ensuring", "tail" : "(finalizer: ZSTM[R1, Nothing, Any]): ZSTM[R1, E, A]", "member" : "zio.stm.ZSTM.ensuring", "link" : "zio\/stm\/ZSTM.html#ensuring[R1<:R](finalizer:zio.stm.ZSTM[R1,Nothing,Any]):zio.stm.ZSTM[R1,E,A]", "kind" : "def"}, {"label" : "either", "tail" : "(ev: CanFail[E]): URSTM[R, Either[E, A]]", "member" : "zio.stm.ZSTM.either", "link" : "zio\/stm\/ZSTM.html#either(implicitev:zio.CanFail[E]):zio.stm.URSTM[R,Either[E,A]]", "kind" : "def"}, {"label" : "repeatWhile", "tail" : "(f: (A) => Boolean): ZSTM[R, E, A]", "member" : "zio.stm.ZSTM.repeatWhile", "link" : "zio\/stm\/ZSTM.html#repeatWhile(f:A=>Boolean):zio.stm.ZSTM[R,E,A]", "kind" : "def"}, {"label" : "repeatUntil", "tail" : "(f: (A) => Boolean): ZSTM[R, E, A]", "member" : "zio.stm.ZSTM.repeatUntil", "link" : "zio\/stm\/ZSTM.html#repeatUntil(f:A=>Boolean):zio.stm.ZSTM[R,E,A]", "kind" : "def"}, {"label" : "commitEither", "tail" : "(): ZIO[R, E, A]", "member" : "zio.stm.ZSTM.commitEither", "link" : "zio\/stm\/ZSTM.html#commitEither:zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "commit", "tail" : "(): ZIO[R, E, A]", "member" : "zio.stm.ZSTM.commit", "link" : "zio\/stm\/ZSTM.html#commit:zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "collectSTM", "tail" : "(pf: PartialFunction[A, ZSTM[R1, E1, B]]): ZSTM[R1, E1, B]", "member" : "zio.stm.ZSTM.collectSTM", "link" : "zio\/stm\/ZSTM.html#collectSTM[R1<:R,E1>:E,B](pf:PartialFunction[A,zio.stm.ZSTM[R1,E1,B]]):zio.stm.ZSTM[R1,E1,B]", "kind" : "def"}, {"label" : "collectM", "tail" : "(pf: PartialFunction[A, ZSTM[R1, E1, B]]): ZSTM[R1, E1, B]", "member" : "zio.stm.ZSTM.collectM", "link" : "zio\/stm\/ZSTM.html#collectM[R1<:R,E1>:E,B](pf:PartialFunction[A,zio.stm.ZSTM[R1,E1,B]]):zio.stm.ZSTM[R1,E1,B]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): ZSTM[R, E, B]", "member" : "zio.stm.ZSTM.collect", "link" : "zio\/stm\/ZSTM.html#collect[B](pf:PartialFunction[A,B]):zio.stm.ZSTM[R,E,B]", "kind" : "def"}, {"label" : "catchSome", "tail" : "(pf: PartialFunction[E, ZSTM[R1, E1, A1]])(ev: CanFail[E]): ZSTM[R1, E1, A1]", "member" : "zio.stm.ZSTM.catchSome", "link" : "zio\/stm\/ZSTM.html#catchSome[R1<:R,E1>:E,A1>:A](pf:PartialFunction[E,zio.stm.ZSTM[R1,E1,A1]])(implicitev:zio.CanFail[E]):zio.stm.ZSTM[R1,E1,A1]", "kind" : "def"}, {"label" : "catchAll", "tail" : "(h: (E) => ZSTM[R1, E2, A1])(ev: CanFail[E]): ZSTM[R1, E2, A1]", "member" : "zio.stm.ZSTM.catchAll", "link" : "zio\/stm\/ZSTM.html#catchAll[R1<:R,E2,A1>:A](h:E=>zio.stm.ZSTM[R1,E2,A1])(implicitev:zio.CanFail[E]):zio.stm.ZSTM[R1,E2,A1]", "kind" : "def"}, {"label" : "bimap", "tail" : "(f: (E) => E2, g: (A) => B)(ev: CanFail[E]): ZSTM[R, E2, B]", "member" : "zio.stm.ZSTM.bimap", "link" : "zio\/stm\/ZSTM.html#bimap[E2,B](f:E=>E2,g:A=>B)(implicitev:zio.CanFail[E]):zio.stm.ZSTM[R,E2,B]", "kind" : "def"}, {"label" : "asSomeError", "tail" : "(): ZSTM[R, Option[E], A]", "member" : "zio.stm.ZSTM.asSomeError", "link" : "zio\/stm\/ZSTM.html#asSomeError:zio.stm.ZSTM[R,Option[E],A]", "kind" : "def"}, {"label" : "asSome", "tail" : "(): ZSTM[R, E, Option[A]]", "member" : "zio.stm.ZSTM.asSome", "link" : "zio\/stm\/ZSTM.html#asSome:zio.stm.ZSTM[R,E,Option[A]]", "kind" : "def"}, {"label" : "as", "tail" : "(b: => B): ZSTM[R, E, B]", "member" : "zio.stm.ZSTM.as", "link" : "zio\/stm\/ZSTM.html#as[B](b:=>B):zio.stm.ZSTM[R,E,B]", "kind" : "def"}, {"label" : "absolve", "tail" : "(ev: <:<[A, Either[E1, B]]): ZSTM[R, E1, B]", "member" : "zio.stm.ZSTM.absolve", "link" : "zio\/stm\/ZSTM.html#absolve[E1>:E,B](implicitev:A<:<Either[E1,B]):zio.stm.ZSTM[R,E1,B]", "kind" : "def"}, {"label" : ">>=", "tail" : "(f: (A) => ZSTM[R1, E1, B]): ZSTM[R1, E1, B]", "member" : "zio.stm.ZSTM.>>=", "link" : "zio\/stm\/ZSTM.html#>>=[R1<:R,E1>:E,B](f:A=>zio.stm.ZSTM[R1,E1,B]):zio.stm.ZSTM[R1,E1,B]", "kind" : "def"}, {"label" : "<|>", "tail" : "(that: => ZSTM[R1, E1, A1]): ZSTM[R1, E1, A1]", "member" : "zio.stm.ZSTM.<|>", "link" : "zio\/stm\/ZSTM.html#<|>[R1<:R,E1>:E,A1>:A](that:=>zio.stm.ZSTM[R1,E1,A1]):zio.stm.ZSTM[R1,E1,A1]", "kind" : "def"}, {"label" : "<>", "tail" : "(that: => ZSTM[R1, E1, A1]): ZSTM[R1, E1, A1]", "member" : "zio.stm.ZSTM.<>", "link" : "zio\/stm\/ZSTM.html#<>[R1<:R,E1,A1>:A](that:=>zio.stm.ZSTM[R1,E1,A1]):zio.stm.ZSTM[R1,E1,A1]", "kind" : "def"}, {"label" : "<+>", "tail" : "(that: => ZSTM[R1, E1, B]): ZSTM[R1, E1, Either[A, B]]", "member" : "zio.stm.ZSTM.<+>", "link" : "zio\/stm\/ZSTM.html#<+>[R1<:R,E1,B](that:=>zio.stm.ZSTM[R1,E1,B]):zio.stm.ZSTM[R1,E1,Either[A,B]]", "kind" : "def"}, {"label" : "<*>", "tail" : "(that: => ZSTM[R1, E1, B])(zippable: Zippable[A, B]): ZSTM[R1, E1, Out]", "member" : "zio.stm.ZSTM.<*>", "link" : "zio\/stm\/ZSTM.html#<*>[R1<:R,E1>:E,B](that:=>zio.stm.ZSTM[R1,E1,B])(implicitzippable:zio.Zippable[A,B]):zio.stm.ZSTM[R1,E1,zippable.Out]", "kind" : "def"}, {"label" : "<*", "tail" : "(that: => ZSTM[R1, E1, B]): ZSTM[R1, E1, A]", "member" : "zio.stm.ZSTM.<*", "link" : "zio\/stm\/ZSTM.html#<*[R1<:R,E1>:E,B](that:=>zio.stm.ZSTM[R1,E1,B]):zio.stm.ZSTM[R1,E1,A]", "kind" : "def"}, {"label" : "*>", "tail" : "(that: => ZSTM[R1, E1, B]): ZSTM[R1, E1, B]", "member" : "zio.stm.ZSTM.*>", "link" : "zio\/stm\/ZSTM.html#*>[R1<:R,E1>:E,B](that:=>zio.stm.ZSTM[R1,E1,B]):zio.stm.ZSTM[R1,E1,B]", "kind" : "def"}, {"label" : "&&&", "tail" : "(that: ZSTM[R1, E1, B])(zippable: Zippable[A, B]): ZSTM[R1, E1, Out]", "member" : "zio.stm.ZSTM.&&&", "link" : "zio\/stm\/ZSTM.html#&&&[R1<:R,E1>:E,B](that:zio.stm.ZSTM[R1,E1,B])(implicitzippable:zio.Zippable[A,B]):zio.stm.ZSTM[R1,E1,zippable.Out]", "kind" : "def"}, {"label" : "!", "tail" : "(ev: <:<[E, Throwable], ev2: CanFail[E]): ZSTM[R, Nothing, A]", "member" : "zio.stm.ZSTM.!", "link" : "zio\/stm\/ZSTM.html#!(implicitev:E<:<Throwable,implicitev2:zio.CanFail[E]):zio.stm.ZSTM[R,Nothing,A]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/ZSTM.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/ZSTM.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/ZSTM.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/ZSTM.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/ZSTM.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/ZSTM.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/ZSTM.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZSTM.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZSTM.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZSTM.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/ZSTM.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/ZSTM.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/ZSTM.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/ZSTM.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/ZSTM.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/ZSTM.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/ZSTM.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/ZSTM.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/ZSTM.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tag", "tail" : "(): Int", "member" : "zio.stm.ZSTM.tag", "link" : "zio\/stm\/ZSTM.html#tag:Int", "kind" : "abstract def"}], "shortDescription" : "STM[E, A] represents an effect that can be performed transactionally,resulting in a failure E or a value A."}, {"name" : "zio.stm.ZTHub", "shortDescription" : "A ZTHub[RA, RB, EA, EB, A, B] is a transactional message hub.", "object" : "zio\/stm\/ZTHub$.html", "members_class" : [{"label" : "toTQueue", "tail" : "(): ZTEnqueue[RA, EA, A]", "member" : "zio.stm.ZTHub.toTQueue", "link" : "zio\/stm\/ZTHub.html#toTQueue:zio.stm.ZTEnqueue[RA,EA,A]", "kind" : "final def"}, {"label" : "subscribeManaged", "tail" : "(): ZManaged[Any, Nothing, ZTDequeue[RB, EB, B]]", "member" : "zio.stm.ZTHub.subscribeManaged", "link" : "zio\/stm\/ZTHub.html#subscribeManaged:zio.ZManaged[Any,Nothing,zio.stm.ZTDequeue[RB,EB,B]]", "kind" : "final def"}, {"label" : "mapSTM", "tail" : "(f: (B) => ZSTM[RC, EC, C]): ZTHub[RA, RC, EA, EC, A, C]", "member" : "zio.stm.ZTHub.mapSTM", "link" : "zio\/stm\/ZTHub.html#mapSTM[RC<:RB,EC>:EB,C](f:B=>zio.stm.ZSTM[RC,EC,C]):zio.stm.ZTHub[RA,RC,EA,EC,A,C]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (B) => C): ZTHub[RA, RB, EA, EB, A, C]", "member" : "zio.stm.ZTHub.map", "link" : "zio\/stm\/ZTHub.html#map[C](f:B=>C):zio.stm.ZTHub[RA,RB,EA,EB,A,C]", "kind" : "final def"}, {"label" : "filterOutputSTM", "tail" : "(f: (B) => ZSTM[RB1, EB1, Boolean]): ZTHub[RA, RB1, EA, EB1, A, B]", "member" : "zio.stm.ZTHub.filterOutputSTM", "link" : "zio\/stm\/ZTHub.html#filterOutputSTM[RB1<:RB,EB1>:EB](f:B=>zio.stm.ZSTM[RB1,EB1,Boolean]):zio.stm.ZTHub[RA,RB1,EA,EB1,A,B]", "kind" : "final def"}, {"label" : "filterOutput", "tail" : "(f: (B) => Boolean): ZTHub[RA, RB, EA, EB, A, B]", "member" : "zio.stm.ZTHub.filterOutput", "link" : "zio\/stm\/ZTHub.html#filterOutput(f:B=>Boolean):zio.stm.ZTHub[RA,RB,EA,EB,A,B]", "kind" : "final def"}, {"label" : "filterInputSTM", "tail" : "(f: (A1) => ZSTM[RA1, EA1, Boolean]): ZTHub[RA1, RB, EA1, EB, A1, B]", "member" : "zio.stm.ZTHub.filterInputSTM", "link" : "zio\/stm\/ZTHub.html#filterInputSTM[RA1<:RA,EA1>:EA,A1<:A](f:A1=>zio.stm.ZSTM[RA1,EA1,Boolean]):zio.stm.ZTHub[RA1,RB,EA1,EB,A1,B]", "kind" : "final def"}, {"label" : "filterInput", "tail" : "(f: (A1) => Boolean): ZTHub[RA, RB, EA, EB, A1, B]", "member" : "zio.stm.ZTHub.filterInput", "link" : "zio\/stm\/ZTHub.html#filterInput[A1<:A](f:A1=>Boolean):zio.stm.ZTHub[RA,RB,EA,EB,A1,B]", "kind" : "final def"}, {"label" : "dimapSTM", "tail" : "(f: (C) => ZSTM[RC, EC, A], g: (B) => ZSTM[RD, ED, D]): ZTHub[RC, RD, EC, ED, C, D]", "member" : "zio.stm.ZTHub.dimapSTM", "link" : "zio\/stm\/ZTHub.html#dimapSTM[RC<:RA,RD<:RB,EC>:EA,ED>:EB,C,D](f:C=>zio.stm.ZSTM[RC,EC,A],g:B=>zio.stm.ZSTM[RD,ED,D]):zio.stm.ZTHub[RC,RD,EC,ED,C,D]", "kind" : "final def"}, {"label" : "dimap", "tail" : "(f: (C) => A, g: (B) => D): ZTHub[RA, RB, EA, EB, C, D]", "member" : "zio.stm.ZTHub.dimap", "link" : "zio\/stm\/ZTHub.html#dimap[C,D](f:C=>A,g:B=>D):zio.stm.ZTHub[RA,RB,EA,EB,C,D]", "kind" : "final def"}, {"label" : "contramapSTM", "tail" : "(f: (C) => ZSTM[RC, EC, A]): ZTHub[RC, RB, EC, EB, C, B]", "member" : "zio.stm.ZTHub.contramapSTM", "link" : "zio\/stm\/ZTHub.html#contramapSTM[RC<:RA,EC>:EA,C](f:C=>zio.stm.ZSTM[RC,EC,A]):zio.stm.ZTHub[RC,RB,EC,EB,C,B]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (C) => A): ZTHub[RA, RB, EA, EB, C, B]", "member" : "zio.stm.ZTHub.contramap", "link" : "zio\/stm\/ZTHub.html#contramap[C](f:C=>A):zio.stm.ZTHub[RA,RB,EA,EB,C,B]", "kind" : "final def"}, {"label" : "awaitShutdown", "tail" : "(): USTM[Unit]", "member" : "zio.stm.ZTHub.awaitShutdown", "link" : "zio\/stm\/ZTHub.html#awaitShutdown:zio.stm.USTM[Unit]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/ZTHub.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/ZTHub.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/ZTHub.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/ZTHub.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/ZTHub.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/ZTHub.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/ZTHub.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTHub.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTHub.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTHub.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/ZTHub.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/ZTHub.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/ZTHub.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/ZTHub.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/ZTHub.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/ZTHub.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/ZTHub.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/ZTHub.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/ZTHub.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(): USTM[ZTDequeue[RB, EB, B]]", "member" : "zio.stm.ZTHub.subscribe", "link" : "zio\/stm\/ZTHub.html#subscribe:zio.stm.USTM[zio.stm.ZTDequeue[RB,EB,B]]", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): USTM[Int]", "member" : "zio.stm.ZTHub.size", "link" : "zio\/stm\/ZTHub.html#size:zio.stm.USTM[Int]", "kind" : "abstract def"}, {"label" : "shutdown", "tail" : "(): USTM[Unit]", "member" : "zio.stm.ZTHub.shutdown", "link" : "zio\/stm\/ZTHub.html#shutdown:zio.stm.USTM[Unit]", "kind" : "abstract def"}, {"label" : "publishAll", "tail" : "(as: Iterable[A]): ZSTM[RA, EA, Boolean]", "member" : "zio.stm.ZTHub.publishAll", "link" : "zio\/stm\/ZTHub.html#publishAll(as:Iterable[A]):zio.stm.ZSTM[RA,EA,Boolean]", "kind" : "abstract def"}, {"label" : "publish", "tail" : "(a: A): ZSTM[RA, EA, Boolean]", "member" : "zio.stm.ZTHub.publish", "link" : "zio\/stm\/ZTHub.html#publish(a:A):zio.stm.ZSTM[RA,EA,Boolean]", "kind" : "abstract def"}, {"label" : "isShutdown", "tail" : "(): USTM[Boolean]", "member" : "zio.stm.ZTHub.isShutdown", "link" : "zio\/stm\/ZTHub.html#isShutdown:zio.stm.USTM[Boolean]", "kind" : "abstract def"}, {"label" : "capacity", "tail" : "(): Int", "member" : "zio.stm.ZTHub.capacity", "link" : "zio\/stm\/ZTHub.html#capacity:Int", "kind" : "abstract def"}], "members_object" : [{"label" : "unbounded", "tail" : "(): USTM[THub[A]]", "member" : "zio.stm.ZTHub.unbounded", "link" : "zio\/stm\/ZTHub$.html#unbounded[A]:zio.stm.USTM[zio.stm.THub[A]]", "kind" : "def"}, {"label" : "sliding", "tail" : "(requestedCapacity: Int): USTM[THub[A]]", "member" : "zio.stm.ZTHub.sliding", "link" : "zio\/stm\/ZTHub$.html#sliding[A](requestedCapacity:Int):zio.stm.USTM[zio.stm.THub[A]]", "kind" : "def"}, {"label" : "dropping", "tail" : "(requestedCapacity: Int): USTM[THub[A]]", "member" : "zio.stm.ZTHub.dropping", "link" : "zio\/stm\/ZTHub$.html#dropping[A](requestedCapacity:Int):zio.stm.USTM[zio.stm.THub[A]]", "kind" : "def"}, {"label" : "bounded", "tail" : "(requestedCapacity: Int): USTM[THub[A]]", "member" : "zio.stm.ZTHub.bounded", "link" : "zio\/stm\/ZTHub$.html#bounded[A](requestedCapacity:Int):zio.stm.USTM[zio.stm.THub[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/ZTHub$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/ZTHub$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/ZTHub$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/ZTHub$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/ZTHub$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/ZTHub$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/ZTHub$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTHub$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTHub$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTHub$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/ZTHub$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/ZTHub$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/ZTHub$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/ZTHub$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/ZTHub$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/ZTHub$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/ZTHub$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/ZTHub$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/ZTHub$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stm\/ZTHub.html", "kind" : "class"}, {"name" : "zio.stm.ZTQueue", "object" : "zio\/stm\/ZTQueue$.html", "members_object" : [{"label" : "unbounded", "tail" : "(): USTM[TQueue[A]]", "member" : "zio.stm.ZTQueue.unbounded", "link" : "zio\/stm\/ZTQueue$.html#unbounded[A]:zio.stm.USTM[zio.stm.TQueue[A]]", "kind" : "def"}, {"label" : "sliding", "tail" : "(requestedCapacity: Int): USTM[TQueue[A]]", "member" : "zio.stm.ZTQueue.sliding", "link" : "zio\/stm\/ZTQueue$.html#sliding[A](requestedCapacity:Int):zio.stm.USTM[zio.stm.TQueue[A]]", "kind" : "def"}, {"label" : "dropping", "tail" : "(requestedCapacity: Int): USTM[TQueue[A]]", "member" : "zio.stm.ZTQueue.dropping", "link" : "zio\/stm\/ZTQueue$.html#dropping[A](requestedCapacity:Int):zio.stm.USTM[zio.stm.TQueue[A]]", "kind" : "def"}, {"label" : "bounded", "tail" : "(requestedCapacity: Int): USTM[TQueue[A]]", "member" : "zio.stm.ZTQueue.bounded", "link" : "zio\/stm\/ZTQueue$.html#bounded[A](requestedCapacity:Int):zio.stm.USTM[zio.stm.TQueue[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/ZTQueue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/ZTQueue$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/ZTQueue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/ZTQueue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/ZTQueue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/ZTQueue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/ZTQueue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTQueue$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTQueue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTQueue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/ZTQueue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/ZTQueue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/ZTQueue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/ZTQueue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/ZTQueue$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/ZTQueue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/ZTQueue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/ZTQueue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/ZTQueue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/stm\/ZTQueue.html", "kind" : "trait", "members_trait" : [{"label" : "takeN", "tail" : "(n: Int): ZSTM[RB, EB, Chunk[B]]", "member" : "zio.stm.ZTQueue.takeN", "link" : "zio\/stm\/ZTQueue.html#takeN(n:Int):zio.stm.ZSTM[RB,EB,zio.Chunk[B]]", "kind" : "final def"}, {"label" : "takeBetween", "tail" : "(min: Int, max: Int): ZSTM[RB, EB, Chunk[B]]", "member" : "zio.stm.ZTQueue.takeBetween", "link" : "zio\/stm\/ZTQueue.html#takeBetween(min:Int,max:Int):zio.stm.ZSTM[RB,EB,zio.Chunk[B]]", "kind" : "final def"}, {"label" : "seek", "tail" : "(f: (B) => Boolean): ZSTM[RB, EB, B]", "member" : "zio.stm.ZTQueue.seek", "link" : "zio\/stm\/ZTQueue.html#seek(f:B=>Boolean):zio.stm.ZSTM[RB,EB,B]", "kind" : "final def"}, {"label" : "poll", "tail" : "(): ZSTM[RB, EB, Option[B]]", "member" : "zio.stm.ZTQueue.poll", "link" : "zio\/stm\/ZTQueue.html#poll:zio.stm.ZSTM[RB,EB,Option[B]]", "kind" : "final def"}, {"label" : "mapSTM", "tail" : "(f: (B) => ZSTM[RC, EC, C]): ZTQueue[RA, RC, EA, EC, A, C]", "member" : "zio.stm.ZTQueue.mapSTM", "link" : "zio\/stm\/ZTQueue.html#mapSTM[RC<:RB,EC>:EB,C](f:B=>zio.stm.ZSTM[RC,EC,C]):zio.stm.ZTQueue[RA,RC,EA,EC,A,C]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (B) => C): ZTQueue[RA, RB, EA, EB, A, C]", "member" : "zio.stm.ZTQueue.map", "link" : "zio\/stm\/ZTQueue.html#map[C](f:B=>C):zio.stm.ZTQueue[RA,RB,EA,EB,A,C]", "kind" : "final def"}, {"label" : "isFull", "tail" : "(): USTM[Boolean]", "member" : "zio.stm.ZTQueue.isFull", "link" : "zio\/stm\/ZTQueue.html#isFull:zio.stm.USTM[Boolean]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): USTM[Boolean]", "member" : "zio.stm.ZTQueue.isEmpty", "link" : "zio\/stm\/ZTQueue.html#isEmpty:zio.stm.USTM[Boolean]", "kind" : "final def"}, {"label" : "filterOutputSTM", "tail" : "(f: (B) => ZSTM[RB1, EB1, Boolean]): ZTQueue[RA, RB1, EA, EB1, A, B]", "member" : "zio.stm.ZTQueue.filterOutputSTM", "link" : "zio\/stm\/ZTQueue.html#filterOutputSTM[RB1<:RB,EB1>:EB](f:B=>zio.stm.ZSTM[RB1,EB1,Boolean]):zio.stm.ZTQueue[RA,RB1,EA,EB1,A,B]", "kind" : "final def"}, {"label" : "filterOutput", "tail" : "(f: (B) => Boolean): ZTQueue[RA, RB, EA, EB, A, B]", "member" : "zio.stm.ZTQueue.filterOutput", "link" : "zio\/stm\/ZTQueue.html#filterOutput(f:B=>Boolean):zio.stm.ZTQueue[RA,RB,EA,EB,A,B]", "kind" : "final def"}, {"label" : "filterInputSTM", "tail" : "(f: (A1) => ZSTM[RA1, EA1, Boolean]): ZTQueue[RA1, RB, EA1, EB, A1, B]", "member" : "zio.stm.ZTQueue.filterInputSTM", "link" : "zio\/stm\/ZTQueue.html#filterInputSTM[RA1<:RA,EA1>:EA,A1<:A](f:A1=>zio.stm.ZSTM[RA1,EA1,Boolean]):zio.stm.ZTQueue[RA1,RB,EA1,EB,A1,B]", "kind" : "final def"}, {"label" : "filterInput", "tail" : "(f: (A1) => Boolean): ZTQueue[RA, RB, EA, EB, A1, B]", "member" : "zio.stm.ZTQueue.filterInput", "link" : "zio\/stm\/ZTQueue.html#filterInput[A1<:A](f:A1=>Boolean):zio.stm.ZTQueue[RA,RB,EA,EB,A1,B]", "kind" : "final def"}, {"label" : "dimapSTM", "tail" : "(f: (C) => ZSTM[RC, EC, A], g: (B) => ZSTM[RD, ED, D]): ZTQueue[RC, RD, EC, ED, C, D]", "member" : "zio.stm.ZTQueue.dimapSTM", "link" : "zio\/stm\/ZTQueue.html#dimapSTM[RC<:RA,RD<:RB,EC>:EA,ED>:EB,C,D](f:C=>zio.stm.ZSTM[RC,EC,A],g:B=>zio.stm.ZSTM[RD,ED,D]):zio.stm.ZTQueue[RC,RD,EC,ED,C,D]", "kind" : "final def"}, {"label" : "dimap", "tail" : "(f: (C) => A, g: (B) => D): ZTQueue[RA, RB, EA, EB, C, D]", "member" : "zio.stm.ZTQueue.dimap", "link" : "zio\/stm\/ZTQueue.html#dimap[C,D](f:C=>A,g:B=>D):zio.stm.ZTQueue[RA,RB,EA,EB,C,D]", "kind" : "final def"}, {"label" : "contramapSTM", "tail" : "(f: (C) => ZSTM[RC, EC, A]): ZTQueue[RC, RB, EC, EB, C, B]", "member" : "zio.stm.ZTQueue.contramapSTM", "link" : "zio\/stm\/ZTQueue.html#contramapSTM[RC<:RA,EC>:EA,C](f:C=>zio.stm.ZSTM[RC,EC,A]):zio.stm.ZTQueue[RC,RB,EC,EB,C,B]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (C) => A): ZTQueue[RA, RB, EA, EB, C, B]", "member" : "zio.stm.ZTQueue.contramap", "link" : "zio\/stm\/ZTQueue.html#contramap[C](f:C=>A):zio.stm.ZTQueue[RA,RB,EA,EB,C,B]", "kind" : "final def"}, {"label" : "awaitShutdown", "tail" : "(): USTM[Unit]", "member" : "zio.stm.ZTQueue.awaitShutdown", "link" : "zio\/stm\/ZTQueue.html#awaitShutdown:zio.stm.USTM[Unit]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/ZTQueue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/ZTQueue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/ZTQueue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/ZTQueue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/ZTQueue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/ZTQueue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/ZTQueue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTQueue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTQueue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTQueue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/ZTQueue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/ZTQueue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/ZTQueue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/ZTQueue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/ZTQueue.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/ZTQueue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/ZTQueue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/ZTQueue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/ZTQueue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "takeUpTo", "tail" : "(max: Int): ZSTM[RB, EB, Chunk[B]]", "member" : "zio.stm.ZTQueue.takeUpTo", "link" : "zio\/stm\/ZTQueue.html#takeUpTo(max:Int):zio.stm.ZSTM[RB,EB,zio.Chunk[B]]", "kind" : "abstract def"}, {"label" : "takeAll", "tail" : "(): ZSTM[RB, EB, Chunk[B]]", "member" : "zio.stm.ZTQueue.takeAll", "link" : "zio\/stm\/ZTQueue.html#takeAll:zio.stm.ZSTM[RB,EB,zio.Chunk[B]]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(): ZSTM[RB, EB, B]", "member" : "zio.stm.ZTQueue.take", "link" : "zio\/stm\/ZTQueue.html#take:zio.stm.ZSTM[RB,EB,B]", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): USTM[Int]", "member" : "zio.stm.ZTQueue.size", "link" : "zio\/stm\/ZTQueue.html#size:zio.stm.USTM[Int]", "kind" : "abstract def"}, {"label" : "shutdown", "tail" : "(): USTM[Unit]", "member" : "zio.stm.ZTQueue.shutdown", "link" : "zio\/stm\/ZTQueue.html#shutdown:zio.stm.USTM[Unit]", "kind" : "abstract def"}, {"label" : "peekOption", "tail" : "(): ZSTM[RB, EB, Option[B]]", "member" : "zio.stm.ZTQueue.peekOption", "link" : "zio\/stm\/ZTQueue.html#peekOption:zio.stm.ZSTM[RB,EB,Option[B]]", "kind" : "abstract def"}, {"label" : "peek", "tail" : "(): ZSTM[RB, EB, B]", "member" : "zio.stm.ZTQueue.peek", "link" : "zio\/stm\/ZTQueue.html#peek:zio.stm.ZSTM[RB,EB,B]", "kind" : "abstract def"}, {"label" : "offerAll", "tail" : "(as: Iterable[A]): ZSTM[RA, EA, Boolean]", "member" : "zio.stm.ZTQueue.offerAll", "link" : "zio\/stm\/ZTQueue.html#offerAll(as:Iterable[A]):zio.stm.ZSTM[RA,EA,Boolean]", "kind" : "abstract def"}, {"label" : "offer", "tail" : "(a: A): ZSTM[RA, EA, Boolean]", "member" : "zio.stm.ZTQueue.offer", "link" : "zio\/stm\/ZTQueue.html#offer(a:A):zio.stm.ZSTM[RA,EA,Boolean]", "kind" : "abstract def"}, {"label" : "isShutdown", "tail" : "(): USTM[Boolean]", "member" : "zio.stm.ZTQueue.isShutdown", "link" : "zio\/stm\/ZTQueue.html#isShutdown:zio.stm.USTM[Boolean]", "kind" : "abstract def"}, {"label" : "capacity", "tail" : "(): Int", "member" : "zio.stm.ZTQueue.capacity", "link" : "zio\/stm\/ZTQueue.html#capacity:Int", "kind" : "abstract def"}], "shortDescription" : "A ZTQueue[RA, RB, EA, EB, A, B] is a transactional queue."}, {"name" : "zio.stm.ZTRef", "shortDescription" : "A ZTRef[EA, EB, A, B] is a polymorphic, purely functional description of amutable reference that can be modified as part of a transactional effect.", "object" : "zio\/stm\/ZTRef$.html", "members_class" : [{"label" : "writeOnly", "tail" : "(): ZTRef[EA, Unit, A, Nothing]", "member" : "zio.stm.ZTRef.writeOnly", "link" : "zio\/stm\/ZTRef.html#writeOnly:zio.stm.ZTRef[EA,Unit,A,Nothing]", "kind" : "final def"}, {"label" : "readOnly", "tail" : "(): ZTRef[EA, EB, Nothing, B]", "member" : "zio.stm.ZTRef.readOnly", "link" : "zio\/stm\/ZTRef.html#readOnly:zio.stm.ZTRef[EA,EB,Nothing,B]", "kind" : "final def"}, {"label" : "mapEither", "tail" : "(f: (B) => Either[EC, C]): ZTRef[EA, EC, A, C]", "member" : "zio.stm.ZTRef.mapEither", "link" : "zio\/stm\/ZTRef.html#mapEither[EC>:EB,C](f:B=>Either[EC,C]):zio.stm.ZTRef[EA,EC,A,C]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (B) => C): ZTRef[EA, EB, A, C]", "member" : "zio.stm.ZTRef.map", "link" : "zio\/stm\/ZTRef.html#map[C](f:B=>C):zio.stm.ZTRef[EA,EB,A,C]", "kind" : "final def"}, {"label" : "foldSTM", "tail" : "(ea: (EA) => EC, eb: (EB) => ED, ca: (C) => STM[EC, A], bd: (B) => STM[ED, D]): ZTRef[EC, ED, C, D]", "member" : "zio.stm.ZTRef.foldSTM", "link" : "zio\/stm\/ZTRef.html#foldSTM[EC,ED,C,D](ea:EA=>EC,eb:EB=>ED,ca:C=>zio.stm.STM[EC,A],bd:B=>zio.stm.STM[ED,D]):zio.stm.ZTRef[EC,ED,C,D]", "kind" : "def"}, {"label" : "foldAllSTM", "tail" : "(ea: (EA) => EC, eb: (EB) => ED, ec: (EB) => EC, ca: (C) => (B) => STM[EC, A], bd: (B) => STM[ED, D]): ZTRef[EC, ED, C, D]", "member" : "zio.stm.ZTRef.foldAllSTM", "link" : "zio\/stm\/ZTRef.html#foldAllSTM[EC,ED,C,D](ea:EA=>EC,eb:EB=>ED,ec:EB=>EC,ca:C=>(B=>zio.stm.STM[EC,A]),bd:B=>zio.stm.STM[ED,D]):zio.stm.ZTRef[EC,ED,C,D]", "kind" : "def"}, {"label" : "filterOutput", "tail" : "(f: (B) => Boolean): ZTRef[EA, Option[EB], A, B]", "member" : "zio.stm.ZTRef.filterOutput", "link" : "zio\/stm\/ZTRef.html#filterOutput(f:B=>Boolean):zio.stm.ZTRef[EA,Option[EB],A,B]", "kind" : "final def"}, {"label" : "filterInput", "tail" : "(f: (A1) => Boolean): ZTRef[Option[EA], EB, A1, B]", "member" : "zio.stm.ZTRef.filterInput", "link" : "zio\/stm\/ZTRef.html#filterInput[A1<:A](f:A1=>Boolean):zio.stm.ZTRef[Option[EA],EB,A1,B]", "kind" : "final def"}, {"label" : "dimapError", "tail" : "(f: (EA) => EC, g: (EB) => ED): ZTRef[EC, ED, A, B]", "member" : "zio.stm.ZTRef.dimapError", "link" : "zio\/stm\/ZTRef.html#dimapError[EC,ED](f:EA=>EC,g:EB=>ED):zio.stm.ZTRef[EC,ED,A,B]", "kind" : "final def"}, {"label" : "dimapEither", "tail" : "(f: (C) => Either[EC, A], g: (B) => Either[ED, D]): ZTRef[EC, ED, C, D]", "member" : "zio.stm.ZTRef.dimapEither", "link" : "zio\/stm\/ZTRef.html#dimapEither[EC>:EA,ED>:EB,C,D](f:C=>Either[EC,A],g:B=>Either[ED,D]):zio.stm.ZTRef[EC,ED,C,D]", "kind" : "final def"}, {"label" : "dimap", "tail" : "(f: (C) => A, g: (B) => D): ZTRef[EA, EB, C, D]", "member" : "zio.stm.ZTRef.dimap", "link" : "zio\/stm\/ZTRef.html#dimap[C,D](f:C=>A,g:B=>D):zio.stm.ZTRef[EA,EB,C,D]", "kind" : "final def"}, {"label" : "contramapEither", "tail" : "(f: (C) => Either[EC, A]): ZTRef[EC, EB, C, B]", "member" : "zio.stm.ZTRef.contramapEither", "link" : "zio\/stm\/ZTRef.html#contramapEither[EC>:EA,C](f:C=>Either[EC,A]):zio.stm.ZTRef[EC,EB,C,B]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (C) => A): ZTRef[EA, EB, C, B]", "member" : "zio.stm.ZTRef.contramap", "link" : "zio\/stm\/ZTRef.html#contramap[C](f:C=>A):zio.stm.ZTRef[EA,EB,C,B]", "kind" : "final def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[B, C]): ZTRef[EA, Option[EB], A, C]", "member" : "zio.stm.ZTRef.collect", "link" : "zio\/stm\/ZTRef.html#collect[C](pf:PartialFunction[B,C]):zio.stm.ZTRef[EA,Option[EB],A,C]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/ZTRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/ZTRef.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/ZTRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/ZTRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/ZTRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/ZTRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/ZTRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTRef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/ZTRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/ZTRef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/ZTRef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/ZTRef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/ZTRef.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/ZTRef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/ZTRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/ZTRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/ZTRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "foldAll", "tail" : "(ea: (EA) => EC, eb: (EB) => ED, ec: (EB) => EC, ca: (C) => (B) => Either[EC, A], bd: (B) => Either[ED, D]): ZTRef[EC, ED, C, D]", "member" : "zio.stm.ZTRef.foldAll", "link" : "zio\/stm\/ZTRef.html#foldAll[EC,ED,C,D](ea:EA=>EC,eb:EB=>ED,ec:EB=>EC,ca:C=>(B=>Either[EC,A]),bd:B=>Either[ED,D]):zio.stm.ZTRef[EC,ED,C,D]", "kind" : "abstract def"}, {"label" : "fold", "tail" : "(ea: (EA) => EC, eb: (EB) => ED, ca: (C) => Either[EC, A], bd: (B) => Either[ED, D]): ZTRef[EC, ED, C, D]", "member" : "zio.stm.ZTRef.fold", "link" : "zio\/stm\/ZTRef.html#fold[EC,ED,C,D](ea:EA=>EC,eb:EB=>ED,ca:C=>Either[EC,A],bd:B=>Either[ED,D]):zio.stm.ZTRef[EC,ED,C,D]", "kind" : "abstract def"}, {"label" : "set", "tail" : "(a: A): STM[EA, Unit]", "member" : "zio.stm.ZTRef.set", "link" : "zio\/stm\/ZTRef.html#set(a:A):zio.stm.STM[EA,Unit]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): STM[EB, B]", "member" : "zio.stm.ZTRef.get", "link" : "zio\/stm\/ZTRef.html#get:zio.stm.STM[EB,B]", "kind" : "abstract def"}, {"label" : "atomic", "tail" : "(): Atomic[_]", "member" : "zio.stm.ZTRef.atomic", "link" : "zio\/stm\/ZTRef.html#atomic:zio.stm.ZTRef.Atomic[_]", "kind" : "abstract def"}], "members_object" : [{"label" : "makeCommit", "tail" : "(a: => A): UIO[TRef[A]]", "member" : "zio.stm.ZTRef.makeCommit", "link" : "zio\/stm\/ZTRef$.html#makeCommit[A](a:=>A):zio.UIO[zio.stm.TRef[A]]", "kind" : "def"}, {"label" : "make", "tail" : "(a: => A): USTM[TRef[A]]", "member" : "zio.stm.ZTRef.make", "link" : "zio\/stm\/ZTRef$.html#make[A](a:=>A):zio.stm.USTM[zio.stm.TRef[A]]", "kind" : "def"}, {"label" : "UnifiedSyntax", "tail" : "", "member" : "zio.stm.ZTRef.UnifiedSyntax", "link" : "zio\/stm\/ZTRef$.html#UnifiedSyntax[E,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stm\/ZTRef$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stm\/ZTRef$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stm\/ZTRef$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stm\/ZTRef$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stm\/ZTRef$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stm\/ZTRef$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stm\/ZTRef$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTRef$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTRef$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stm\/ZTRef$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stm\/ZTRef$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stm\/ZTRef$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stm\/ZTRef$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stm\/ZTRef$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stm\/ZTRef$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stm\/ZTRef$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stm\/ZTRef$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stm\/ZTRef$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stm\/ZTRef$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stm\/ZTRef.html", "kind" : "class"}], "zio.test.mock.internal" : [{"name" : "zio.test.mock.internal.InvalidCall", "shortDescription" : "An InvalidCall represents failed expectation.", "object" : "zio\/test\/mock\/internal\/InvalidCall$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/internal\/InvalidCall.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/internal\/InvalidCall.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "InvalidPolyType", "tail" : "", "member" : "zio.test.mock.internal.InvalidCall.InvalidPolyType", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#InvalidPolyType[R0<:zio.Has[_],R1<:zio.Has[_],In0,In1,E0,E1,A0,A1]extendsInvalidCallwithProductwithSerializable", "kind" : "final case class"}, {"label" : "InvalidCapability", "tail" : "", "member" : "zio.test.mock.internal.InvalidCall.InvalidCapability", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#InvalidCapability[R0<:zio.Has[_],R1<:zio.Has[_],In0,In1,E0,E1,A0,A1]extendsInvalidCallwithProductwithSerializable", "kind" : "final case class"}, {"label" : "InvalidArguments", "tail" : "", "member" : "zio.test.mock.internal.InvalidCall.InvalidArguments", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#InvalidArguments[R<:zio.Has[_],I,E,A]extendsInvalidCallwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/internal\/InvalidCall$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/mock\/internal\/InvalidCall.html", "kind" : "class"}, {"name" : "zio.test.mock.internal.MockException", "shortDescription" : "A MockException is used internally by the mock framework to signalfailed expectations to the test framework.", "object" : "zio\/test\/mock\/internal\/MockException$.html", "members_class" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "zio\/test\/mock\/internal\/MockException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "zio\/test\/mock\/internal\/MockException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "zio\/test\/mock\/internal\/MockException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "zio\/test\/mock\/internal\/MockException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "zio\/test\/mock\/internal\/MockException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "zio\/test\/mock\/internal\/MockException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "zio\/test\/mock\/internal\/MockException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "zio\/test\/mock\/internal\/MockException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "zio\/test\/mock\/internal\/MockException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "zio\/test\/mock\/internal\/MockException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "zio\/test\/mock\/internal\/MockException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "zio\/test\/mock\/internal\/MockException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "zio\/test\/mock\/internal\/MockException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/internal\/MockException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/internal\/MockException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/internal\/MockException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/internal\/MockException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/internal\/MockException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/internal\/MockException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/internal\/MockException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/internal\/MockException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/internal\/MockException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/internal\/MockException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/internal\/MockException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/internal\/MockException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/internal\/MockException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/internal\/MockException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/internal\/MockException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/internal\/MockException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/internal\/MockException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/internal\/MockException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "InvalidCallException", "tail" : "", "member" : "zio.test.mock.internal.MockException.InvalidCallException", "link" : "zio\/test\/mock\/internal\/MockException$.html#InvalidCallExceptionextendsMockExceptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "InvalidRangeException", "tail" : "", "member" : "zio.test.mock.internal.MockException.InvalidRangeException", "link" : "zio\/test\/mock\/internal\/MockException$.html#InvalidRangeExceptionextendsMockExceptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "UnexpectedCallException", "tail" : "", "member" : "zio.test.mock.internal.MockException.UnexpectedCallException", "link" : "zio\/test\/mock\/internal\/MockException$.html#UnexpectedCallException[R<:zio.Has[_],I,E,A]extendsMockExceptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "UnsatisfiedExpectationsException", "tail" : "", "member" : "zio.test.mock.internal.MockException.UnsatisfiedExpectationsException", "link" : "zio\/test\/mock\/internal\/MockException$.html#UnsatisfiedExpectationsException[R<:zio.Has[_]]extendsMockExceptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/internal\/MockException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/internal\/MockException$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/internal\/MockException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/internal\/MockException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/internal\/MockException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/internal\/MockException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/internal\/MockException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/internal\/MockException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/internal\/MockException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/internal\/MockException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/internal\/MockException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/internal\/MockException$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/internal\/MockException$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/internal\/MockException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/internal\/MockException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/internal\/MockException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/internal\/MockException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/internal\/MockException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/internal\/MockException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/mock\/internal\/MockException.html", "kind" : "class"}, {"name" : "zio.test.mock.internal.ProxyFactory", "shortDescription" : "", "object" : "zio\/test\/mock\/internal\/ProxyFactory$.html", "members_object" : [{"label" : "mockProxy", "tail" : "(state: MockState[R])(arg0: zio.Tag[R]): ULayer[Has[Proxy]]", "member" : "zio.test.mock.internal.ProxyFactory.mockProxy", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#mockProxy[R<:zio.Has[_]](state:zio.test.mock.internal.MockState[R])(implicitevidence$1:zio.Tag[R]):zio.ULayer[zio.Has[zio.test.mock.Proxy]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/internal\/ProxyFactory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "zio.stream.compression" : [{"name" : "zio.stream.compression.CompressionException", "shortDescription" : "Signals that exception occurred in compression\/decompression", "object" : "zio\/stream\/compression\/CompressionException$.html", "members_class" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "zio\/stream\/compression\/CompressionException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "zio\/stream\/compression\/CompressionException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "zio\/stream\/compression\/CompressionException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "zio\/stream\/compression\/CompressionException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "zio\/stream\/compression\/CompressionException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "zio\/stream\/compression\/CompressionException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "zio\/stream\/compression\/CompressionException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "zio\/stream\/compression\/CompressionException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "zio\/stream\/compression\/CompressionException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "zio\/stream\/compression\/CompressionException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "zio\/stream\/compression\/CompressionException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "zio\/stream\/compression\/CompressionException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "zio\/stream\/compression\/CompressionException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/compression\/CompressionException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/compression\/CompressionException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/compression\/CompressionException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/compression\/CompressionException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/compression\/CompressionException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/compression\/CompressionException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/compression\/CompressionException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/compression\/CompressionException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/compression\/CompressionException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/compression\/CompressionException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/compression\/CompressionException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/compression\/CompressionException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/compression\/CompressionException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/compression\/CompressionException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/compression\/CompressionException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(cause: Exception): CompressionException", "member" : "zio.stream.compression.CompressionException.apply", "link" : "zio\/stream\/compression\/CompressionException$.html#apply(cause:Exception):zio.stream.compression.CompressionException", "kind" : "def"}, {"label" : "apply", "tail" : "(message: String, cause: Option[Exception]): CompressionException", "member" : "zio.stream.compression.CompressionException.apply", "link" : "zio\/stream\/compression\/CompressionException$.html#apply(message:String,cause:Option[Exception]):zio.stream.compression.CompressionException", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/compression\/CompressionException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/compression\/CompressionException$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/compression\/CompressionException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/compression\/CompressionException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/compression\/CompressionException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/compression\/CompressionException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/compression\/CompressionException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/compression\/CompressionException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/compression\/CompressionException$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/compression\/CompressionException$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/compression\/CompressionException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/compression\/CompressionException$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/compression\/CompressionException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/compression\/CompressionException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/compression\/CompressionException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/compression\/CompressionException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stream\/compression\/CompressionException.html", "kind" : "class"}, {"name" : "zio.stream.compression.CompressionLevel", "shortDescription" : "", "object" : "zio\/stream\/compression\/CompressionLevel$.html", "members_class" : [{"label" : "jValue", "tail" : ": Int", "member" : "zio.stream.compression.CompressionLevel.jValue", "link" : "zio\/stream\/compression\/CompressionLevel.html#jValue:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/compression\/CompressionLevel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/compression\/CompressionLevel.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/compression\/CompressionLevel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/compression\/CompressionLevel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/compression\/CompressionLevel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/compression\/CompressionLevel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/compression\/CompressionLevel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionLevel.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionLevel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionLevel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/compression\/CompressionLevel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/compression\/CompressionLevel.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/compression\/CompressionLevel.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/compression\/CompressionLevel.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/compression\/CompressionLevel.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/compression\/CompressionLevel.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/compression\/CompressionLevel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/compression\/CompressionLevel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/compression\/CompressionLevel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "BestCompression", "tail" : "", "member" : "zio.stream.compression.CompressionLevel.BestCompression", "link" : "zio\/stream\/compression\/CompressionLevel$.html#BestCompression", "kind" : "case object"}, {"label" : "CompressionLevel8", "tail" : "", "member" : "zio.stream.compression.CompressionLevel.CompressionLevel8", "link" : "zio\/stream\/compression\/CompressionLevel$.html#CompressionLevel8", "kind" : "case object"}, {"label" : "CompressionLevel7", "tail" : "", "member" : "zio.stream.compression.CompressionLevel.CompressionLevel7", "link" : "zio\/stream\/compression\/CompressionLevel$.html#CompressionLevel7", "kind" : "case object"}, {"label" : "CompressionLevel6", "tail" : "", "member" : "zio.stream.compression.CompressionLevel.CompressionLevel6", "link" : "zio\/stream\/compression\/CompressionLevel$.html#CompressionLevel6", "kind" : "case object"}, {"label" : "CompressionLevel5", "tail" : "", "member" : "zio.stream.compression.CompressionLevel.CompressionLevel5", "link" : "zio\/stream\/compression\/CompressionLevel$.html#CompressionLevel5", "kind" : "case object"}, {"label" : "CompressionLevel4", "tail" : "", "member" : "zio.stream.compression.CompressionLevel.CompressionLevel4", "link" : "zio\/stream\/compression\/CompressionLevel$.html#CompressionLevel4", "kind" : "case object"}, {"label" : "CompressionLevel3", "tail" : "", "member" : "zio.stream.compression.CompressionLevel.CompressionLevel3", "link" : "zio\/stream\/compression\/CompressionLevel$.html#CompressionLevel3", "kind" : "case object"}, {"label" : "CompressionLevel2", "tail" : "", "member" : "zio.stream.compression.CompressionLevel.CompressionLevel2", "link" : "zio\/stream\/compression\/CompressionLevel$.html#CompressionLevel2", "kind" : "case object"}, {"label" : "BestSpeed", "tail" : "", "member" : "zio.stream.compression.CompressionLevel.BestSpeed", "link" : "zio\/stream\/compression\/CompressionLevel$.html#BestSpeed", "kind" : "case object"}, {"label" : "NoCompression", "tail" : "", "member" : "zio.stream.compression.CompressionLevel.NoCompression", "link" : "zio\/stream\/compression\/CompressionLevel$.html#NoCompression", "kind" : "case object"}, {"label" : "DefaultCompression", "tail" : "", "member" : "zio.stream.compression.CompressionLevel.DefaultCompression", "link" : "zio\/stream\/compression\/CompressionLevel$.html#DefaultCompression", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/compression\/CompressionLevel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/compression\/CompressionLevel$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/compression\/CompressionLevel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/compression\/CompressionLevel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/compression\/CompressionLevel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/compression\/CompressionLevel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/compression\/CompressionLevel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionLevel$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionLevel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionLevel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/compression\/CompressionLevel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/compression\/CompressionLevel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/compression\/CompressionLevel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/compression\/CompressionLevel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/compression\/CompressionLevel$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/compression\/CompressionLevel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/compression\/CompressionLevel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/compression\/CompressionLevel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/compression\/CompressionLevel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stream\/compression\/CompressionLevel.html", "kind" : "class"}, {"name" : "zio.stream.compression.CompressionParameters", "shortDescription" : "", "members_case class" : [{"member" : "zio.stream.compression.CompressionParameters#<init>", "error" : "unsupported entity"}, {"label" : "flushMode", "tail" : ": FlushMode", "member" : "zio.stream.compression.CompressionParameters.flushMode", "link" : "zio\/stream\/compression\/CompressionParameters.html#flushMode:zio.stream.compression.FlushMode", "kind" : "val"}, {"label" : "strategy", "tail" : ": CompressionStrategy", "member" : "zio.stream.compression.CompressionParameters.strategy", "link" : "zio\/stream\/compression\/CompressionParameters.html#strategy:zio.stream.compression.CompressionStrategy", "kind" : "val"}, {"label" : "level", "tail" : ": CompressionLevel", "member" : "zio.stream.compression.CompressionParameters.level", "link" : "zio\/stream\/compression\/CompressionParameters.html#level:zio.stream.compression.CompressionLevel", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/stream\/compression\/CompressionParameters.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/compression\/CompressionParameters.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/compression\/CompressionParameters.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/compression\/CompressionParameters.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/compression\/CompressionParameters.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/compression\/CompressionParameters.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/compression\/CompressionParameters.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/compression\/CompressionParameters.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionParameters.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionParameters.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionParameters.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/compression\/CompressionParameters.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/compression\/CompressionParameters.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/compression\/CompressionParameters.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/compression\/CompressionParameters.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/compression\/CompressionParameters.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/compression\/CompressionParameters.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/stream\/compression\/CompressionParameters.html", "kind" : "case class"}, {"name" : "zio.stream.compression.CompressionStrategy", "shortDescription" : "", "object" : "zio\/stream\/compression\/CompressionStrategy$.html", "members_class" : [{"label" : "jValue", "tail" : ": Int", "member" : "zio.stream.compression.CompressionStrategy.jValue", "link" : "zio\/stream\/compression\/CompressionStrategy.html#jValue:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/compression\/CompressionStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/compression\/CompressionStrategy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/compression\/CompressionStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/compression\/CompressionStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/compression\/CompressionStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/compression\/CompressionStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/compression\/CompressionStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/compression\/CompressionStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/compression\/CompressionStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/compression\/CompressionStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/compression\/CompressionStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/compression\/CompressionStrategy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/compression\/CompressionStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/compression\/CompressionStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/compression\/CompressionStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/compression\/CompressionStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "HuffmanOnly", "tail" : "", "member" : "zio.stream.compression.CompressionStrategy.HuffmanOnly", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#HuffmanOnly", "kind" : "case object"}, {"label" : "Filtered", "tail" : "", "member" : "zio.stream.compression.CompressionStrategy.Filtered", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#Filtered", "kind" : "case object"}, {"label" : "DefaultStrategy", "tail" : "", "member" : "zio.stream.compression.CompressionStrategy.DefaultStrategy", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#DefaultStrategy", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/compression\/CompressionStrategy$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/compression\/CompressionStrategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stream\/compression\/CompressionStrategy.html", "kind" : "class"}, {"name" : "zio.stream.compression.Deflate", "shortDescription" : "", "object" : "zio\/stream\/compression\/Deflate$.html", "members_object" : [{"label" : "makeDeflater", "tail" : "(bufferSize: Int, noWrap: Boolean, level: CompressionLevel, strategy: CompressionStrategy, flushMode: FlushMode): ZManaged[Any, Nothing, (Option[Chunk[Byte]]) => ZIO[Any, Nothing, Chunk[Byte]]]", "member" : "zio.stream.compression.Deflate.makeDeflater", "link" : "zio\/stream\/compression\/Deflate$.html#makeDeflater(bufferSize:Int,noWrap:Boolean,level:zio.stream.compression.CompressionLevel,strategy:zio.stream.compression.CompressionStrategy,flushMode:zio.stream.compression.FlushMode):zio.ZManaged[Any,Nothing,Option[zio.Chunk[Byte]]=>zio.ZIO[Any,Nothing,zio.Chunk[Byte]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/compression\/Deflate$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/compression\/Deflate$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/compression\/Deflate$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/compression\/Deflate$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/compression\/Deflate$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/compression\/Deflate$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/compression\/Deflate$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/Deflate$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/Deflate$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/Deflate$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/compression\/Deflate$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/compression\/Deflate$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/compression\/Deflate$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/compression\/Deflate$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/compression\/Deflate$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/compression\/Deflate$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/compression\/Deflate$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/compression\/Deflate$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/compression\/Deflate$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.stream.compression.FlushMode", "shortDescription" : "", "object" : "zio\/stream\/compression\/FlushMode$.html", "members_class" : [{"label" : "jValue", "tail" : ": Int", "member" : "zio.stream.compression.FlushMode.jValue", "link" : "zio\/stream\/compression\/FlushMode.html#jValue:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/compression\/FlushMode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/compression\/FlushMode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/compression\/FlushMode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/compression\/FlushMode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/compression\/FlushMode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/compression\/FlushMode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/compression\/FlushMode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/FlushMode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/FlushMode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/FlushMode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/compression\/FlushMode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/compression\/FlushMode.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/compression\/FlushMode.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/compression\/FlushMode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/compression\/FlushMode.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/compression\/FlushMode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/compression\/FlushMode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/compression\/FlushMode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/compression\/FlushMode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "FullFlush", "tail" : "", "member" : "zio.stream.compression.FlushMode.FullFlush", "link" : "zio\/stream\/compression\/FlushMode$.html#FullFlush", "kind" : "case object"}, {"label" : "SyncFlush", "tail" : "", "member" : "zio.stream.compression.FlushMode.SyncFlush", "link" : "zio\/stream\/compression\/FlushMode$.html#SyncFlush", "kind" : "case object"}, {"label" : "NoFlush", "tail" : "", "member" : "zio.stream.compression.FlushMode.NoFlush", "link" : "zio\/stream\/compression\/FlushMode$.html#NoFlush", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/stream\/compression\/FlushMode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/stream\/compression\/FlushMode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/stream\/compression\/FlushMode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/stream\/compression\/FlushMode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/stream\/compression\/FlushMode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/stream\/compression\/FlushMode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/stream\/compression\/FlushMode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/FlushMode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/FlushMode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/stream\/compression\/FlushMode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/stream\/compression\/FlushMode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/stream\/compression\/FlushMode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/stream\/compression\/FlushMode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/stream\/compression\/FlushMode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/stream\/compression\/FlushMode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/stream\/compression\/FlushMode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/stream\/compression\/FlushMode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/stream\/compression\/FlushMode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/stream\/compression\/FlushMode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/stream\/compression\/FlushMode.html", "kind" : "class"}], "zio.internal.tracing" : [{"name" : "zio.internal.tracing.TracingConfig", "shortDescription" : "Toggles:", "object" : "zio\/internal\/tracing\/TracingConfig$.html", "members_object" : [{"label" : "disabled", "tail" : "(): TracingConfig", "member" : "zio.internal.tracing.TracingConfig.disabled", "link" : "zio\/internal\/tracing\/TracingConfig$.html#disabled:zio.internal.tracing.TracingConfig", "kind" : "def"}, {"label" : "stackOnly", "tail" : "(): TracingConfig", "member" : "zio.internal.tracing.TracingConfig.stackOnly", "link" : "zio\/internal\/tracing\/TracingConfig$.html#stackOnly:zio.internal.tracing.TracingConfig", "kind" : "def"}, {"label" : "enabled", "tail" : "(): TracingConfig", "member" : "zio.internal.tracing.TracingConfig.enabled", "link" : "zio\/internal\/tracing\/TracingConfig$.html#enabled:zio.internal.tracing.TracingConfig", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/tracing\/TracingConfig$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/tracing\/TracingConfig$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/tracing\/TracingConfig$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/tracing\/TracingConfig$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/tracing\/TracingConfig$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/tracing\/TracingConfig$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/tracing\/TracingConfig$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/tracing\/TracingConfig$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/tracing\/TracingConfig$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/tracing\/TracingConfig$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/tracing\/TracingConfig$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/tracing\/TracingConfig$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/tracing\/TracingConfig$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/tracing\/TracingConfig$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/tracing\/TracingConfig$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/tracing\/TracingConfig$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/tracing\/TracingConfig$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/tracing\/TracingConfig$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/tracing\/TracingConfig$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "zio.internal.tracing.TracingConfig#<init>", "error" : "unsupported entity"}, {"label" : "ancestorStackTraceLength", "tail" : ": Int", "member" : "zio.internal.tracing.TracingConfig.ancestorStackTraceLength", "link" : "zio\/internal\/tracing\/TracingConfig.html#ancestorStackTraceLength:Int", "kind" : "val"}, {"label" : "ancestorExecutionTraceLength", "tail" : ": Int", "member" : "zio.internal.tracing.TracingConfig.ancestorExecutionTraceLength", "link" : "zio\/internal\/tracing\/TracingConfig.html#ancestorExecutionTraceLength:Int", "kind" : "val"}, {"label" : "ancestryLength", "tail" : ": Int", "member" : "zio.internal.tracing.TracingConfig.ancestryLength", "link" : "zio\/internal\/tracing\/TracingConfig.html#ancestryLength:Int", "kind" : "val"}, {"label" : "stackTraceLength", "tail" : ": Int", "member" : "zio.internal.tracing.TracingConfig.stackTraceLength", "link" : "zio\/internal\/tracing\/TracingConfig.html#stackTraceLength:Int", "kind" : "val"}, {"label" : "executionTraceLength", "tail" : ": Int", "member" : "zio.internal.tracing.TracingConfig.executionTraceLength", "link" : "zio\/internal\/tracing\/TracingConfig.html#executionTraceLength:Int", "kind" : "val"}, {"label" : "traceStack", "tail" : ": Boolean", "member" : "zio.internal.tracing.TracingConfig.traceStack", "link" : "zio\/internal\/tracing\/TracingConfig.html#traceStack:Boolean", "kind" : "val"}, {"label" : "traceEffectOpsInExecution", "tail" : ": Boolean", "member" : "zio.internal.tracing.TracingConfig.traceEffectOpsInExecution", "link" : "zio\/internal\/tracing\/TracingConfig.html#traceEffectOpsInExecution:Boolean", "kind" : "val"}, {"label" : "traceExecution", "tail" : ": Boolean", "member" : "zio.internal.tracing.TracingConfig.traceExecution", "link" : "zio\/internal\/tracing\/TracingConfig.html#traceExecution:Boolean", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/internal\/tracing\/TracingConfig.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/tracing\/TracingConfig.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/tracing\/TracingConfig.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/tracing\/TracingConfig.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/tracing\/TracingConfig.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/tracing\/TracingConfig.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/tracing\/TracingConfig.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/tracing\/TracingConfig.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/tracing\/TracingConfig.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/tracing\/TracingConfig.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/tracing\/TracingConfig.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/tracing\/TracingConfig.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/tracing\/TracingConfig.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/tracing\/TracingConfig.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/tracing\/TracingConfig.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/tracing\/TracingConfig.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/tracing\/TracingConfig.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/internal\/tracing\/TracingConfig.html", "kind" : "case class"}], "zio.internal" : [{"name" : "zio.internal.ansi", "shortDescription" : "", "object" : "zio\/internal\/ansi$.html", "members_object" : [{"label" : "AnsiStringOps", "tail" : "", "member" : "zio.internal.ansi.AnsiStringOps", "link" : "zio\/internal\/ansi$.html#AnsiStringOpsextendsAnyVal", "kind" : "implicit final class"}, {"label" : "Style", "tail" : "", "member" : "zio.internal.ansi.Style", "link" : "zio\/internal\/ansi$.html#Style", "kind" : "object"}, {"label" : "Style", "tail" : "", "member" : "zio.internal.ansi.Style", "link" : "zio\/internal\/ansi$.html#Styleextendsansi.AnsiCode", "kind" : "sealed abstract class"}, {"label" : "Color", "tail" : "", "member" : "zio.internal.ansi.Color", "link" : "zio\/internal\/ansi$.html#Color", "kind" : "object"}, {"label" : "Color", "tail" : "", "member" : "zio.internal.ansi.Color", "link" : "zio\/internal\/ansi$.html#Colorextendsansi.AnsiCode", "kind" : "sealed abstract class"}, {"label" : "Reset", "tail" : ": String", "member" : "zio.internal.ansi.Reset", "link" : "zio\/internal\/ansi$.html#Reset:String", "kind" : "val"}, {"label" : "AnsiCode", "tail" : "", "member" : "zio.internal.ansi.AnsiCode", "link" : "zio\/internal\/ansi$.html#AnsiCodeextendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/ansi$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/ansi$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/ansi$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/ansi$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/ansi$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/ansi$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/ansi$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/ansi$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/ansi$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/ansi$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/ansi$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/ansi$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/ansi$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/ansi$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/ansi$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/ansi$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/ansi$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/ansi$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/ansi$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.internal.Blocking", "shortDescription" : "", "object" : "zio\/internal\/Blocking$.html", "members_object" : [{"label" : "blockingExecutor", "tail" : ": zio.Executor", "member" : "zio.internal.Blocking.blockingExecutor", "link" : "zio\/internal\/Blocking$.html#blockingExecutor:zio.Executor", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/Blocking$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/Blocking$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/Blocking$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/Blocking$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/Blocking$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/Blocking$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/Blocking$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Blocking$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Blocking$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Blocking$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/Blocking$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/Blocking$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/Blocking$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/Blocking$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/Blocking$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/Blocking$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/Blocking$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/Blocking$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/Blocking$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.internal.ExecutionMetrics", "shortDescription" : "", "members_class" : [{"member" : "zio.internal.ExecutionMetrics#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/ExecutionMetrics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/ExecutionMetrics.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/ExecutionMetrics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/ExecutionMetrics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/ExecutionMetrics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/ExecutionMetrics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/ExecutionMetrics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/ExecutionMetrics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/ExecutionMetrics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/ExecutionMetrics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/ExecutionMetrics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/ExecutionMetrics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/ExecutionMetrics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/ExecutionMetrics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/ExecutionMetrics.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/ExecutionMetrics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/ExecutionMetrics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/ExecutionMetrics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/ExecutionMetrics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "workersCount", "tail" : "(): Int", "member" : "zio.internal.ExecutionMetrics.workersCount", "link" : "zio\/internal\/ExecutionMetrics.html#workersCount:Int", "kind" : "abstract def"}, {"label" : "dequeuedCount", "tail" : "(): Long", "member" : "zio.internal.ExecutionMetrics.dequeuedCount", "link" : "zio\/internal\/ExecutionMetrics.html#dequeuedCount:Long", "kind" : "abstract def"}, {"label" : "enqueuedCount", "tail" : "(): Long", "member" : "zio.internal.ExecutionMetrics.enqueuedCount", "link" : "zio\/internal\/ExecutionMetrics.html#enqueuedCount:Long", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Int", "member" : "zio.internal.ExecutionMetrics.size", "link" : "zio\/internal\/ExecutionMetrics.html#size:Int", "kind" : "abstract def"}, {"label" : "capacity", "tail" : "(): Int", "member" : "zio.internal.ExecutionMetrics.capacity", "link" : "zio\/internal\/ExecutionMetrics.html#capacity:Int", "kind" : "abstract def"}, {"label" : "concurrency", "tail" : "(): Int", "member" : "zio.internal.ExecutionMetrics.concurrency", "link" : "zio\/internal\/ExecutionMetrics.html#concurrency:Int", "kind" : "abstract def"}], "class" : "zio\/internal\/ExecutionMetrics.html", "kind" : "class"}, {"name" : "zio.internal.FiberRunnable", "trait" : "zio\/internal\/FiberRunnable.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/FiberRunnable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/FiberRunnable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/FiberRunnable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/FiberRunnable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/FiberRunnable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/FiberRunnable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/FiberRunnable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/FiberRunnable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/FiberRunnable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/FiberRunnable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/FiberRunnable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/FiberRunnable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/FiberRunnable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/FiberRunnable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/FiberRunnable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/FiberRunnable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/FiberRunnable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/FiberRunnable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/FiberRunnable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "runUntil", "tail" : "(maxOpCount: Int): Unit", "member" : "zio.internal.FiberRunnable.runUntil", "link" : "zio\/internal\/FiberRunnable.html#runUntil(maxOpCount:Int):Unit", "kind" : "abstract def"}, {"label" : "run", "tail" : "(): Unit", "member" : "java.lang.Runnable.run", "link" : "zio\/internal\/FiberRunnable.html#run():Unit", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.internal.FiberState", "shortDescription" : "", "object" : "zio\/internal\/FiberState$.html", "members_object" : [{"label" : "Executing", "tail" : "", "member" : "zio.internal.FiberState.Executing", "link" : "zio\/internal\/FiberState$.html#Executing[E,A]extendsAnyRef", "kind" : "class"}, {"label" : "apply", "tail" : "(startIStatus: InterruptStatus, startEnv: AnyRef, startExec: zio.Executor, supervisor0: Supervisor[Any], initialTracingStatus: TracingStatus): FiberState[E, A]", "member" : "zio.internal.FiberState.apply", "link" : "zio\/internal\/FiberState$.html#apply[E,A](startIStatus:zio.InterruptStatus,startEnv:AnyRef,startExec:zio.Executor,supervisor0:zio.Supervisor[Any],initialTracingStatus:zio.TracingStatus):zio.internal.FiberState[E,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/FiberState$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/FiberState$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/FiberState$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/FiberState$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/FiberState$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/FiberState$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/FiberState$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/FiberState$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/FiberState$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/FiberState$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/FiberState$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/FiberState$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/FiberState$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/FiberState$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/FiberState$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/FiberState$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/FiberState$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/FiberState$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/FiberState$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.internal.FiniteHistogram", "shortDescription" : "", "object" : "zio\/internal\/FiniteHistogram$.html", "members_class" : [{"label" : "snapshot", "tail" : "(): Map[A, Long]", "member" : "zio.internal.FiniteHistogram.snapshot", "link" : "zio\/internal\/FiniteHistogram.html#snapshot():Map[A,Long]", "kind" : "def"}, {"label" : "add", "tail" : "(sample: A): Unit", "member" : "zio.internal.FiniteHistogram.add", "link" : "zio\/internal\/FiniteHistogram.html#add(sample:A):Unit", "kind" : "def"}, {"member" : "zio.internal.FiniteHistogram#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/FiniteHistogram.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/FiniteHistogram.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/FiniteHistogram.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/FiniteHistogram.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/FiniteHistogram.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/FiniteHistogram.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/FiniteHistogram.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/FiniteHistogram.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/FiniteHistogram.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/FiniteHistogram.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/FiniteHistogram.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/FiniteHistogram.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/FiniteHistogram.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/FiniteHistogram.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/FiniteHistogram.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/FiniteHistogram.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/FiniteHistogram.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/FiniteHistogram.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/FiniteHistogram.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "make", "tail" : "(): FiniteHistogram[A]", "member" : "zio.internal.FiniteHistogram.make", "link" : "zio\/internal\/FiniteHistogram$.html#make[A]():zio.internal.FiniteHistogram[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/FiniteHistogram$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/FiniteHistogram$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/FiniteHistogram$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/FiniteHistogram$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/FiniteHistogram$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/FiniteHistogram$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/FiniteHistogram$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/FiniteHistogram$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/FiniteHistogram$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/FiniteHistogram$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/FiniteHistogram$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/FiniteHistogram$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/FiniteHistogram$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/FiniteHistogram$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/FiniteHistogram$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/FiniteHistogram$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/FiniteHistogram$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/FiniteHistogram$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/FiniteHistogram$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/internal\/FiniteHistogram.html", "kind" : "class"}, {"name" : "zio.internal.Hub", "shortDescription" : "A Hub[A] is a concurrent data structure that allows multiple publishersto publish A values and multiple subscribers to poll A values with theguarantee that all subscribers will receive all values published to the hubwhile they are subscribed.", "object" : "zio\/internal\/Hub$.html", "members_class" : [{"member" : "zio.internal.Hub#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/Hub.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/Hub.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/Hub.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/Hub.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/Hub.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/Hub.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/Hub.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Hub.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Hub.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Hub.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/Hub.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/Hub.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/Hub.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/Hub.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/Hub.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/Hub.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/Hub.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/Hub.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/Hub.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subscribe", "tail" : "(): Subscription[A]", "member" : "zio.internal.Hub.subscribe", "link" : "zio\/internal\/Hub.html#subscribe():zio.internal.Hub.Subscription[A]", "kind" : "abstract def"}, {"label" : "slide", "tail" : "(): Unit", "member" : "zio.internal.Hub.slide", "link" : "zio\/internal\/Hub.html#slide():Unit", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Int", "member" : "zio.internal.Hub.size", "link" : "zio\/internal\/Hub.html#size():Int", "kind" : "abstract def"}, {"label" : "publishAll", "tail" : "(as: Iterable[A]): Chunk[A]", "member" : "zio.internal.Hub.publishAll", "link" : "zio\/internal\/Hub.html#publishAll(as:Iterable[A]):zio.Chunk[A]", "kind" : "abstract def"}, {"label" : "publish", "tail" : "(a: A): Boolean", "member" : "zio.internal.Hub.publish", "link" : "zio\/internal\/Hub.html#publish(a:A):Boolean", "kind" : "abstract def"}, {"label" : "isFull", "tail" : "(): Boolean", "member" : "zio.internal.Hub.isFull", "link" : "zio\/internal\/Hub.html#isFull():Boolean", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "zio.internal.Hub.isEmpty", "link" : "zio\/internal\/Hub.html#isEmpty():Boolean", "kind" : "abstract def"}, {"label" : "capacity", "tail" : "(): Int", "member" : "zio.internal.Hub.capacity", "link" : "zio\/internal\/Hub.html#capacity:Int", "kind" : "abstract def"}], "members_object" : [{"label" : "Subscription", "tail" : "", "member" : "zio.internal.Hub.Subscription", "link" : "zio\/internal\/Hub$.html#Subscription[A]extendsSerializable", "kind" : "abstract class"}, {"label" : "unbounded", "tail" : "(): Hub[A]", "member" : "zio.internal.Hub.unbounded", "link" : "zio\/internal\/Hub$.html#unbounded[A]:zio.internal.Hub[A]", "kind" : "def"}, {"label" : "bounded", "tail" : "(requestedCapacity: Int): Hub[A]", "member" : "zio.internal.Hub.bounded", "link" : "zio\/internal\/Hub$.html#bounded[A](requestedCapacity:Int):zio.internal.Hub[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/Hub$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/Hub$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/Hub$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/Hub$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/Hub$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/Hub$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/Hub$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Hub$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Hub$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Hub$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/Hub$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/Hub$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/Hub$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/Hub$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/Hub$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/Hub$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/Hub$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/Hub$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/Hub$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/internal\/Hub.html", "kind" : "class"}, {"name" : "zio.internal.LongHistogram", "shortDescription" : "", "object" : "zio\/internal\/LongHistogram$.html", "members_class" : [{"label" : "snapshot", "tail" : "(): Seq[Long]", "member" : "zio.internal.LongHistogram.snapshot", "link" : "zio\/internal\/LongHistogram.html#snapshot():Seq[Long]", "kind" : "def"}, {"label" : "add", "tail" : "(sample: Long): Unit", "member" : "zio.internal.LongHistogram.add", "link" : "zio\/internal\/LongHistogram.html#add(sample:Long):Unit", "kind" : "def"}, {"label" : "width", "tail" : ": Long", "member" : "zio.internal.LongHistogram.width", "link" : "zio\/internal\/LongHistogram.html#width:Long", "kind" : "val"}, {"label" : "counts", "tail" : ": Array[LongAdder]", "member" : "zio.internal.LongHistogram.counts", "link" : "zio\/internal\/LongHistogram.html#counts:Array[java.util.concurrent.atomic.LongAdder]", "kind" : "val"}, {"label" : "size", "tail" : ": Int", "member" : "zio.internal.LongHistogram.size", "link" : "zio\/internal\/LongHistogram.html#size:Int", "kind" : "val"}, {"label" : "maximum", "tail" : ": Long", "member" : "zio.internal.LongHistogram.maximum", "link" : "zio\/internal\/LongHistogram.html#maximum:Long", "kind" : "val"}, {"label" : "granularity", "tail" : ": Int", "member" : "zio.internal.LongHistogram.granularity", "link" : "zio\/internal\/LongHistogram.html#granularity:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/LongHistogram.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/LongHistogram.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/LongHistogram.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/LongHistogram.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/LongHistogram.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/LongHistogram.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/LongHistogram.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/LongHistogram.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/LongHistogram.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/LongHistogram.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/LongHistogram.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/LongHistogram.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/LongHistogram.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/LongHistogram.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/LongHistogram.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/LongHistogram.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/LongHistogram.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/LongHistogram.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/LongHistogram.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "make", "tail" : "(granularity: Int, maximum: Long): LongHistogram", "member" : "zio.internal.LongHistogram.make", "link" : "zio\/internal\/LongHistogram$.html#make(granularity:Int,maximum:Long):zio.internal.LongHistogram", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/LongHistogram$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/LongHistogram$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/LongHistogram$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/LongHistogram$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/LongHistogram$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/LongHistogram$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/LongHistogram$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/LongHistogram$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/LongHistogram$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/LongHistogram$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/LongHistogram$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/LongHistogram$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/LongHistogram$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/LongHistogram$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/LongHistogram$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/LongHistogram$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/LongHistogram$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/LongHistogram$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/LongHistogram$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/internal\/LongHistogram.html", "kind" : "class"}, {"name" : "zio.internal.MutableConcurrentQueue", "shortDescription" : "A MutableConcurrentQueue interface to use under the hood in ZIO.", "object" : "zio\/internal\/MutableConcurrentQueue$.html", "members_class" : [{"label" : "pollUpTo", "tail" : "(n: Int): Chunk[A]", "member" : "zio.internal.MutableConcurrentQueue.pollUpTo", "link" : "zio\/internal\/MutableConcurrentQueue.html#pollUpTo(n:Int):zio.Chunk[A]", "kind" : "def"}, {"label" : "offerAll", "tail" : "(as: Iterable[A]): Chunk[A]", "member" : "zio.internal.MutableConcurrentQueue.offerAll", "link" : "zio\/internal\/MutableConcurrentQueue.html#offerAll(as:Iterable[A]):zio.Chunk[A]", "kind" : "def"}, {"member" : "zio.internal.MutableConcurrentQueue#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/MutableConcurrentQueue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/MutableConcurrentQueue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/MutableConcurrentQueue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/MutableConcurrentQueue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/MutableConcurrentQueue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/MutableConcurrentQueue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/MutableConcurrentQueue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/MutableConcurrentQueue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/MutableConcurrentQueue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/MutableConcurrentQueue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/MutableConcurrentQueue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/MutableConcurrentQueue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/MutableConcurrentQueue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/MutableConcurrentQueue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/MutableConcurrentQueue.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/MutableConcurrentQueue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/MutableConcurrentQueue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/MutableConcurrentQueue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/MutableConcurrentQueue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isFull", "tail" : "(): Boolean", "member" : "zio.internal.MutableConcurrentQueue.isFull", "link" : "zio\/internal\/MutableConcurrentQueue.html#isFull():Boolean", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "zio.internal.MutableConcurrentQueue.isEmpty", "link" : "zio\/internal\/MutableConcurrentQueue.html#isEmpty():Boolean", "kind" : "abstract def"}, {"label" : "dequeuedCount", "tail" : "(): Long", "member" : "zio.internal.MutableConcurrentQueue.dequeuedCount", "link" : "zio\/internal\/MutableConcurrentQueue.html#dequeuedCount():Long", "kind" : "abstract def"}, {"label" : "enqueuedCount", "tail" : "(): Long", "member" : "zio.internal.MutableConcurrentQueue.enqueuedCount", "link" : "zio\/internal\/MutableConcurrentQueue.html#enqueuedCount():Long", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Int", "member" : "zio.internal.MutableConcurrentQueue.size", "link" : "zio\/internal\/MutableConcurrentQueue.html#size():Int", "kind" : "abstract def"}, {"label" : "poll", "tail" : "(default: A): A", "member" : "zio.internal.MutableConcurrentQueue.poll", "link" : "zio\/internal\/MutableConcurrentQueue.html#poll(default:A):A", "kind" : "abstract def"}, {"label" : "offer", "tail" : "(a: A): Boolean", "member" : "zio.internal.MutableConcurrentQueue.offer", "link" : "zio\/internal\/MutableConcurrentQueue.html#offer(a:A):Boolean", "kind" : "abstract def"}, {"label" : "capacity", "tail" : ": Int", "member" : "zio.internal.MutableConcurrentQueue.capacity", "link" : "zio\/internal\/MutableConcurrentQueue.html#capacity:Int", "kind" : "abstract val"}], "members_object" : [{"label" : "unbounded", "tail" : "(): MutableConcurrentQueue[A]", "member" : "zio.internal.MutableConcurrentQueue.unbounded", "link" : "zio\/internal\/MutableConcurrentQueue$.html#unbounded[A]:zio.internal.MutableConcurrentQueue[A]", "kind" : "def"}, {"label" : "bounded", "tail" : "(capacity: Int): MutableConcurrentQueue[A]", "member" : "zio.internal.MutableConcurrentQueue.bounded", "link" : "zio\/internal\/MutableConcurrentQueue$.html#bounded[A](capacity:Int):zio.internal.MutableConcurrentQueue[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/MutableConcurrentQueue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/MutableConcurrentQueue$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/MutableConcurrentQueue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/MutableConcurrentQueue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/MutableConcurrentQueue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/MutableConcurrentQueue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/MutableConcurrentQueue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/MutableConcurrentQueue$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/MutableConcurrentQueue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/MutableConcurrentQueue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/MutableConcurrentQueue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/MutableConcurrentQueue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/MutableConcurrentQueue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/MutableConcurrentQueue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/MutableConcurrentQueue$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/MutableConcurrentQueue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/MutableConcurrentQueue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/MutableConcurrentQueue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/MutableConcurrentQueue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/internal\/MutableConcurrentQueue.html", "kind" : "class"}, {"name" : "zio.internal.MutableQueueFieldsPadding", "shortDescription" : "", "members_class" : [{"member" : "zio.internal.MutableQueueFieldsPadding#<init>", "error" : "unsupported entity"}, {"label" : "pollUpTo", "tail" : "(n: Int): Chunk[A]", "member" : "zio.internal.MutableConcurrentQueue.pollUpTo", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#pollUpTo(n:Int):zio.Chunk[A]", "kind" : "def"}, {"label" : "offerAll", "tail" : "(as: Iterable[A]): Chunk[A]", "member" : "zio.internal.MutableConcurrentQueue.offerAll", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#offerAll(as:Iterable[A]):zio.Chunk[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/MutableQueueFieldsPadding.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isFull", "tail" : "(): Boolean", "member" : "zio.internal.MutableConcurrentQueue.isFull", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#isFull():Boolean", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "zio.internal.MutableConcurrentQueue.isEmpty", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#isEmpty():Boolean", "kind" : "abstract def"}, {"label" : "dequeuedCount", "tail" : "(): Long", "member" : "zio.internal.MutableConcurrentQueue.dequeuedCount", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#dequeuedCount():Long", "kind" : "abstract def"}, {"label" : "enqueuedCount", "tail" : "(): Long", "member" : "zio.internal.MutableConcurrentQueue.enqueuedCount", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#enqueuedCount():Long", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Int", "member" : "zio.internal.MutableConcurrentQueue.size", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#size():Int", "kind" : "abstract def"}, {"label" : "poll", "tail" : "(default: A): A", "member" : "zio.internal.MutableConcurrentQueue.poll", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#poll(default:A):A", "kind" : "abstract def"}, {"label" : "offer", "tail" : "(a: A): Boolean", "member" : "zio.internal.MutableConcurrentQueue.offer", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#offer(a:A):Boolean", "kind" : "abstract def"}, {"label" : "capacity", "tail" : ": Int", "member" : "zio.internal.MutableConcurrentQueue.capacity", "link" : "zio\/internal\/MutableQueueFieldsPadding.html#capacity:Int", "kind" : "abstract val"}], "class" : "zio\/internal\/MutableQueueFieldsPadding.html", "kind" : "class"}, {"name" : "zio.internal.OneElementConcurrentQueue", "shortDescription" : "This is a specialized implementation of MutableConcurrentQueue ofcapacity 1.", "members_class" : [{"label" : "size", "tail" : "(): Int", "member" : "zio.internal.OneElementConcurrentQueue.size", "link" : "zio\/internal\/OneElementConcurrentQueue.html#size():Int", "kind" : "def"}, {"label" : "poll", "tail" : "(default: A): A", "member" : "zio.internal.OneElementConcurrentQueue.poll", "link" : "zio\/internal\/OneElementConcurrentQueue.html#poll(default:A):A", "kind" : "def"}, {"label" : "offer", "tail" : "(a: A): Boolean", "member" : "zio.internal.OneElementConcurrentQueue.offer", "link" : "zio\/internal\/OneElementConcurrentQueue.html#offer(a:A):Boolean", "kind" : "def"}, {"label" : "isFull", "tail" : "(): Boolean", "member" : "zio.internal.OneElementConcurrentQueue.isFull", "link" : "zio\/internal\/OneElementConcurrentQueue.html#isFull():Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "zio.internal.OneElementConcurrentQueue.isEmpty", "link" : "zio\/internal\/OneElementConcurrentQueue.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "enqueuedCount", "tail" : "(): Long", "member" : "zio.internal.OneElementConcurrentQueue.enqueuedCount", "link" : "zio\/internal\/OneElementConcurrentQueue.html#enqueuedCount():Long", "kind" : "def"}, {"label" : "dequeuedCount", "tail" : "(): Long", "member" : "zio.internal.OneElementConcurrentQueue.dequeuedCount", "link" : "zio\/internal\/OneElementConcurrentQueue.html#dequeuedCount():Long", "kind" : "def"}, {"label" : "capacity", "tail" : ": Int(1)", "member" : "zio.internal.OneElementConcurrentQueue.capacity", "link" : "zio\/internal\/OneElementConcurrentQueue.html#capacity:Int(1)", "kind" : "final val"}, {"member" : "zio.internal.OneElementConcurrentQueue#<init>", "error" : "unsupported entity"}, {"label" : "pollUpTo", "tail" : "(n: Int): Chunk[A]", "member" : "zio.internal.MutableConcurrentQueue.pollUpTo", "link" : "zio\/internal\/OneElementConcurrentQueue.html#pollUpTo(n:Int):zio.Chunk[A]", "kind" : "def"}, {"label" : "offerAll", "tail" : "(as: Iterable[A]): Chunk[A]", "member" : "zio.internal.MutableConcurrentQueue.offerAll", "link" : "zio\/internal\/OneElementConcurrentQueue.html#offerAll(as:Iterable[A]):zio.Chunk[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/OneElementConcurrentQueue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/OneElementConcurrentQueue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/OneElementConcurrentQueue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/OneElementConcurrentQueue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/OneElementConcurrentQueue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/OneElementConcurrentQueue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/OneElementConcurrentQueue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/OneElementConcurrentQueue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/OneElementConcurrentQueue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/OneElementConcurrentQueue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/OneElementConcurrentQueue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/OneElementConcurrentQueue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/OneElementConcurrentQueue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/OneElementConcurrentQueue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/OneElementConcurrentQueue.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/OneElementConcurrentQueue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/OneElementConcurrentQueue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/OneElementConcurrentQueue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/OneElementConcurrentQueue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/internal\/OneElementConcurrentQueue.html", "kind" : "class"}, {"name" : "zio.internal.OneShot", "shortDescription" : "", "object" : "zio\/internal\/OneShot$.html", "members_object" : [{"label" : "make", "tail" : "(): OneShot[A]", "member" : "zio.internal.OneShot.make", "link" : "zio\/internal\/OneShot$.html#make[A]:zio.internal.OneShot[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/OneShot$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/OneShot$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/OneShot$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/OneShot$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/OneShot$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/OneShot$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/OneShot$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/OneShot$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/OneShot$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/OneShot$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/OneShot$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/OneShot$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/OneShot$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/OneShot$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/OneShot$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/OneShot$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/OneShot$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/OneShot$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/OneShot$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.internal.Platform", "shortDescription" : "", "object" : "zio\/internal\/Platform$.html", "members_object" : [{"label" : "makeDefault", "tail" : "(yieldOpCount: Int): Platform", "member" : "zio.internal.Platform.makeDefault", "link" : "zio\/internal\/Platform$.html#makeDefault(yieldOpCount:Int):zio.internal.Platform", "kind" : "final def"}, {"label" : "fromExecutionContext", "tail" : "(ec: ExecutionContext, yieldOpCount: Int): Platform", "member" : "zio.internal.Platform.fromExecutionContext", "link" : "zio\/internal\/Platform$.html#fromExecutionContext(ec:scala.concurrent.ExecutionContext,yieldOpCount:Int):zio.internal.Platform", "kind" : "final def"}, {"label" : "fromExecutor", "tail" : "(executor0: Executor): Platform", "member" : "zio.internal.Platform.fromExecutor", "link" : "zio\/internal\/Platform$.html#fromExecutor(executor0:zio.internal.Executor):zio.internal.Platform", "kind" : "final def"}, {"label" : "global", "tail" : ": RuntimeConfig", "member" : "zio.internal.Platform.global", "link" : "zio\/internal\/Platform$.html#global:zio.RuntimeConfig", "kind" : "lazy val"}, {"label" : "defaultYieldOpCount", "tail" : ": Int(2048)", "member" : "zio.internal.Platform.defaultYieldOpCount", "link" : "zio\/internal\/Platform$.html#defaultYieldOpCount:Int(2048)", "kind" : "final val"}, {"label" : "default", "tail" : ": RuntimeConfig", "member" : "zio.internal.Platform.default", "link" : "zio\/internal\/Platform$.html#default:zio.RuntimeConfig", "kind" : "lazy val"}, {"label" : "benchmark", "tail" : ": RuntimeConfig", "member" : "zio.internal.Platform.benchmark", "link" : "zio\/internal\/Platform$.html#benchmark:zio.RuntimeConfig", "kind" : "lazy val"}, {"label" : "newWeakReference", "tail" : "(value: A): () => A", "member" : "zio.internal.PlatformSpecific.newWeakReference", "link" : "zio\/internal\/Platform$.html#newWeakReference[A](value:A):()=>A", "kind" : "final def"}, {"label" : "newConcurrentSet", "tail" : "(): Set[A]", "member" : "zio.internal.PlatformSpecific.newConcurrentSet", "link" : "zio\/internal\/Platform$.html#newConcurrentSet[A]():java.util.Set[A]", "kind" : "final def"}, {"label" : "newWeakSet", "tail" : "(): Set[A]", "member" : "zio.internal.PlatformSpecific.newWeakSet", "link" : "zio\/internal\/Platform$.html#newWeakSet[A]():java.util.Set[A]", "kind" : "final def"}, {"label" : "newConcurrentWeakSet", "tail" : "(): Set[A]", "member" : "zio.internal.PlatformSpecific.newConcurrentWeakSet", "link" : "zio\/internal\/Platform$.html#newConcurrentWeakSet[A]():java.util.Set[A]", "kind" : "final def"}, {"label" : "newWeakHashMap", "tail" : "(): Map[A, B]", "member" : "zio.internal.PlatformSpecific.newWeakHashMap", "link" : "zio\/internal\/Platform$.html#newWeakHashMap[A,B]():java.util.Map[A,B]", "kind" : "final def"}, {"label" : "isNative", "tail" : ": Boolean", "member" : "zio.internal.PlatformSpecific.isNative", "link" : "zio\/internal\/Platform$.html#isNative:Boolean", "kind" : "val"}, {"label" : "isJVM", "tail" : ": Boolean", "member" : "zio.internal.PlatformSpecific.isJVM", "link" : "zio\/internal\/Platform$.html#isJVM:Boolean", "kind" : "val"}, {"label" : "isJS", "tail" : ": Boolean", "member" : "zio.internal.PlatformSpecific.isJS", "link" : "zio\/internal\/Platform$.html#isJS:Boolean", "kind" : "val"}, {"label" : "getCurrentThreadGroup", "tail" : "(): String", "member" : "zio.internal.PlatformSpecific.getCurrentThreadGroup", "link" : "zio\/internal\/Platform$.html#getCurrentThreadGroup:String", "kind" : "final def"}, {"label" : "exit", "tail" : "(code: Int): Unit", "member" : "zio.internal.PlatformSpecific.exit", "link" : "zio\/internal\/Platform$.html#exit(code:Int):Unit", "kind" : "def"}, {"label" : "addShutdownHook", "tail" : "(action: () => Unit): Unit", "member" : "zio.internal.PlatformSpecific.addShutdownHook", "link" : "zio\/internal\/Platform$.html#addShutdownHook(action:()=>Unit):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/Platform$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/Platform$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/Platform$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/Platform$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/Platform$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/Platform$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/Platform$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Platform$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Platform$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Platform$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/Platform$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/Platform$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/Platform$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/Platform$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/Platform$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/Platform$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/Platform$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/Platform$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/Platform$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.internal.RingBuffer", "shortDescription" : "A lock-free array-based bounded queue.", "object" : "zio\/internal\/RingBuffer$.html", "members_class" : [{"label" : "isFull", "tail" : "(): Boolean", "member" : "zio.internal.RingBuffer.isFull", "link" : "zio\/internal\/RingBuffer.html#isFull():Boolean", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "zio.internal.RingBuffer.isEmpty", "link" : "zio\/internal\/RingBuffer.html#isEmpty():Boolean", "kind" : "final def"}, {"label" : "pollUpTo", "tail" : "(n: Int): Chunk[A]", "member" : "zio.internal.RingBuffer.pollUpTo", "link" : "zio\/internal\/RingBuffer.html#pollUpTo(n:Int):zio.Chunk[A]", "kind" : "final def"}, {"label" : "poll", "tail" : "(default: A): A", "member" : "zio.internal.RingBuffer.poll", "link" : "zio\/internal\/RingBuffer.html#poll(default:A):A", "kind" : "final def"}, {"label" : "offerAll", "tail" : "(as: Iterable[A]): Chunk[A]", "member" : "zio.internal.RingBuffer.offerAll", "link" : "zio\/internal\/RingBuffer.html#offerAll(as:Iterable[A]):zio.Chunk[A]", "kind" : "final def"}, {"label" : "offer", "tail" : "(a: A): Boolean", "member" : "zio.internal.RingBuffer.offer", "link" : "zio\/internal\/RingBuffer.html#offer(a:A):Boolean", "kind" : "final def"}, {"label" : "dequeuedCount", "tail" : "(): Long", "member" : "zio.internal.RingBuffer.dequeuedCount", "link" : "zio\/internal\/RingBuffer.html#dequeuedCount():Long", "kind" : "final def"}, {"label" : "enqueuedCount", "tail" : "(): Long", "member" : "zio.internal.RingBuffer.enqueuedCount", "link" : "zio\/internal\/RingBuffer.html#enqueuedCount():Long", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "zio.internal.RingBuffer.size", "link" : "zio\/internal\/RingBuffer.html#size():Int", "kind" : "final def"}, {"member" : "zio.internal.RingBuffer#<init>", "error" : "unsupported entity"}, {"label" : "capacity", "tail" : ": Int", "member" : "zio.internal.RingBuffer.capacity", "link" : "zio\/internal\/RingBuffer.html#capacity:Int", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/RingBuffer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/RingBuffer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/RingBuffer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/RingBuffer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/RingBuffer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/RingBuffer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/RingBuffer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBuffer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBuffer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBuffer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/RingBuffer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/RingBuffer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/RingBuffer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/RingBuffer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/RingBuffer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/RingBuffer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/RingBuffer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/RingBuffer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/RingBuffer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "posToIdx", "tail" : "(pos: Long, capacity: Int): Int", "member" : "zio.internal.RingBuffer.posToIdx", "link" : "zio\/internal\/RingBuffer.html#posToIdx(pos:Long,capacity:Int):Int", "kind" : "abstract def"}], "members_object" : [{"label" : "nextPow2", "tail" : "(n: Int): Int", "member" : "zio.internal.RingBuffer.nextPow2", "link" : "zio\/internal\/RingBuffer$.html#nextPow2(n:Int):Int", "kind" : "final def"}, {"label" : "apply", "tail" : "(requestedCapacity: Int): RingBuffer[A]", "member" : "zio.internal.RingBuffer.apply", "link" : "zio\/internal\/RingBuffer$.html#apply[A](requestedCapacity:Int):zio.internal.RingBuffer[A]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/RingBuffer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/RingBuffer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/RingBuffer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/RingBuffer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/RingBuffer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/RingBuffer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/RingBuffer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBuffer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBuffer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBuffer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/RingBuffer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/RingBuffer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/RingBuffer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/RingBuffer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/RingBuffer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/RingBuffer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/RingBuffer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/RingBuffer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/RingBuffer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/internal\/RingBuffer.html", "kind" : "class"}, {"name" : "zio.internal.RingBufferArb", "shortDescription" : "", "object" : "zio\/internal\/RingBufferArb$.html", "members_class" : [{"label" : "posToIdx", "tail" : "(pos: Long, capacity: Int): Int", "member" : "zio.internal.RingBufferArb.posToIdx", "link" : "zio\/internal\/RingBufferArb.html#posToIdx(pos:Long,capacity:Int):Int", "kind" : "def"}, {"label" : "isFull", "tail" : "(): Boolean", "member" : "zio.internal.RingBuffer.isFull", "link" : "zio\/internal\/RingBufferArb.html#isFull():Boolean", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "zio.internal.RingBuffer.isEmpty", "link" : "zio\/internal\/RingBufferArb.html#isEmpty():Boolean", "kind" : "final def"}, {"label" : "pollUpTo", "tail" : "(n: Int): Chunk[A]", "member" : "zio.internal.RingBuffer.pollUpTo", "link" : "zio\/internal\/RingBufferArb.html#pollUpTo(n:Int):zio.Chunk[A]", "kind" : "final def"}, {"label" : "poll", "tail" : "(default: A): A", "member" : "zio.internal.RingBuffer.poll", "link" : "zio\/internal\/RingBufferArb.html#poll(default:A):A", "kind" : "final def"}, {"label" : "offerAll", "tail" : "(as: Iterable[A]): Chunk[A]", "member" : "zio.internal.RingBuffer.offerAll", "link" : "zio\/internal\/RingBufferArb.html#offerAll(as:Iterable[A]):zio.Chunk[A]", "kind" : "final def"}, {"label" : "offer", "tail" : "(a: A): Boolean", "member" : "zio.internal.RingBuffer.offer", "link" : "zio\/internal\/RingBufferArb.html#offer(a:A):Boolean", "kind" : "final def"}, {"label" : "dequeuedCount", "tail" : "(): Long", "member" : "zio.internal.RingBuffer.dequeuedCount", "link" : "zio\/internal\/RingBufferArb.html#dequeuedCount():Long", "kind" : "final def"}, {"label" : "enqueuedCount", "tail" : "(): Long", "member" : "zio.internal.RingBuffer.enqueuedCount", "link" : "zio\/internal\/RingBufferArb.html#enqueuedCount():Long", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "zio.internal.RingBuffer.size", "link" : "zio\/internal\/RingBufferArb.html#size():Int", "kind" : "final def"}, {"label" : "capacity", "tail" : ": Int", "member" : "zio.internal.RingBuffer.capacity", "link" : "zio\/internal\/RingBufferArb.html#capacity:Int", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/RingBufferArb.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/RingBufferArb.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/RingBufferArb.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/RingBufferArb.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/RingBufferArb.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/RingBufferArb.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/RingBufferArb.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBufferArb.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBufferArb.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBufferArb.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/RingBufferArb.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/RingBufferArb.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/RingBufferArb.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/RingBufferArb.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/RingBufferArb.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/RingBufferArb.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/RingBufferArb.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/RingBufferArb.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/RingBufferArb.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(capacity: Int): RingBufferArb[A]", "member" : "zio.internal.RingBufferArb.apply", "link" : "zio\/internal\/RingBufferArb$.html#apply[A](capacity:Int):zio.internal.RingBufferArb[A]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/RingBufferArb$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/RingBufferArb$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/RingBufferArb$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/RingBufferArb$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/RingBufferArb$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/RingBufferArb$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/RingBufferArb$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBufferArb$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBufferArb$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBufferArb$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/RingBufferArb$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/RingBufferArb$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/RingBufferArb$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/RingBufferArb$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/RingBufferArb$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/RingBufferArb$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/RingBufferArb$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/RingBufferArb$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/RingBufferArb$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/internal\/RingBufferArb.html", "kind" : "class"}, {"name" : "zio.internal.RingBufferPow2", "shortDescription" : "", "object" : "zio\/internal\/RingBufferPow2$.html", "members_class" : [{"label" : "posToIdx", "tail" : "(pos: Long, capacity: Int): Int", "member" : "zio.internal.RingBufferPow2.posToIdx", "link" : "zio\/internal\/RingBufferPow2.html#posToIdx(pos:Long,capacity:Int):Int", "kind" : "def"}, {"member" : "zio.internal.RingBufferPow2#<init>", "error" : "unsupported entity"}, {"label" : "requestedCapacity", "tail" : ": Int", "member" : "zio.internal.RingBufferPow2.requestedCapacity", "link" : "zio\/internal\/RingBufferPow2.html#requestedCapacity:Int", "kind" : "val"}, {"label" : "isFull", "tail" : "(): Boolean", "member" : "zio.internal.RingBuffer.isFull", "link" : "zio\/internal\/RingBufferPow2.html#isFull():Boolean", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "zio.internal.RingBuffer.isEmpty", "link" : "zio\/internal\/RingBufferPow2.html#isEmpty():Boolean", "kind" : "final def"}, {"label" : "pollUpTo", "tail" : "(n: Int): Chunk[A]", "member" : "zio.internal.RingBuffer.pollUpTo", "link" : "zio\/internal\/RingBufferPow2.html#pollUpTo(n:Int):zio.Chunk[A]", "kind" : "final def"}, {"label" : "poll", "tail" : "(default: A): A", "member" : "zio.internal.RingBuffer.poll", "link" : "zio\/internal\/RingBufferPow2.html#poll(default:A):A", "kind" : "final def"}, {"label" : "offerAll", "tail" : "(as: Iterable[A]): Chunk[A]", "member" : "zio.internal.RingBuffer.offerAll", "link" : "zio\/internal\/RingBufferPow2.html#offerAll(as:Iterable[A]):zio.Chunk[A]", "kind" : "final def"}, {"label" : "offer", "tail" : "(a: A): Boolean", "member" : "zio.internal.RingBuffer.offer", "link" : "zio\/internal\/RingBufferPow2.html#offer(a:A):Boolean", "kind" : "final def"}, {"label" : "dequeuedCount", "tail" : "(): Long", "member" : "zio.internal.RingBuffer.dequeuedCount", "link" : "zio\/internal\/RingBufferPow2.html#dequeuedCount():Long", "kind" : "final def"}, {"label" : "enqueuedCount", "tail" : "(): Long", "member" : "zio.internal.RingBuffer.enqueuedCount", "link" : "zio\/internal\/RingBufferPow2.html#enqueuedCount():Long", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "zio.internal.RingBuffer.size", "link" : "zio\/internal\/RingBufferPow2.html#size():Int", "kind" : "final def"}, {"label" : "capacity", "tail" : ": Int", "member" : "zio.internal.RingBuffer.capacity", "link" : "zio\/internal\/RingBufferPow2.html#capacity:Int", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/RingBufferPow2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/RingBufferPow2.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/RingBufferPow2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/RingBufferPow2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/RingBufferPow2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/RingBufferPow2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/RingBufferPow2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBufferPow2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBufferPow2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBufferPow2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/RingBufferPow2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/RingBufferPow2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/RingBufferPow2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/RingBufferPow2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/RingBufferPow2.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/RingBufferPow2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/RingBufferPow2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/RingBufferPow2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/RingBufferPow2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(requestedCapacity: Int): RingBufferPow2[A]", "member" : "zio.internal.RingBufferPow2.apply", "link" : "zio\/internal\/RingBufferPow2$.html#apply[A](requestedCapacity:Int):zio.internal.RingBufferPow2[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/RingBufferPow2$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/RingBufferPow2$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/RingBufferPow2$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/RingBufferPow2$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/RingBufferPow2$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/RingBufferPow2$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/RingBufferPow2$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBufferPow2$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBufferPow2$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/RingBufferPow2$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/RingBufferPow2$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/RingBufferPow2$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/RingBufferPow2$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/RingBufferPow2$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/RingBufferPow2$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/RingBufferPow2$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/RingBufferPow2$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/RingBufferPow2$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/RingBufferPow2$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/internal\/RingBufferPow2.html", "kind" : "class"}, {"name" : "zio.internal.SingleThreadedRingBuffer", "shortDescription" : "", "object" : "zio\/internal\/SingleThreadedRingBuffer$.html", "members_object" : [{"label" : "apply", "tail" : "(capacity: Int): SingleThreadedRingBuffer[A]", "member" : "zio.internal.SingleThreadedRingBuffer.apply", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#apply[A](capacity:Int):zio.internal.SingleThreadedRingBuffer[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/SingleThreadedRingBuffer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.internal.Tracing", "shortDescription" : "", "object" : "zio\/internal\/Tracing$.html", "members_object" : [{"label" : "disabled", "tail" : "(): Tracing", "member" : "zio.internal.Tracing.disabled", "link" : "zio\/internal\/Tracing$.html#disabled:zio.internal.Tracing", "kind" : "def"}, {"label" : "enabledWith", "tail" : "(tracingConfig: TracingConfig): Tracing", "member" : "zio.internal.Tracing.enabledWith", "link" : "zio\/internal\/Tracing$.html#enabledWith(tracingConfig:zio.internal.tracing.TracingConfig):zio.internal.Tracing", "kind" : "def"}, {"label" : "enabled", "tail" : "(): Tracing", "member" : "zio.internal.Tracing.enabled", "link" : "zio\/internal\/Tracing$.html#enabled:zio.internal.Tracing", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/Tracing$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/Tracing$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/Tracing$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/Tracing$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/Tracing$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/Tracing$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/Tracing$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Tracing$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Tracing$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Tracing$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/Tracing$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/Tracing$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/Tracing$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/Tracing$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/Tracing$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/Tracing$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/Tracing$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/Tracing$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/Tracing$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "zio.internal.Tracing#<init>", "error" : "unsupported entity"}, {"label" : "tracingConfig", "tail" : ": TracingConfig", "member" : "zio.internal.Tracing.tracingConfig", "link" : "zio\/internal\/Tracing.html#tracingConfig:zio.internal.tracing.TracingConfig", "kind" : "val"}, {"label" : "tracer", "tail" : ": Tracer", "member" : "zio.internal.Tracing.tracer", "link" : "zio\/internal\/Tracing.html#tracer:zio.internal.stacktracer.Tracer", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/internal\/Tracing.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/Tracing.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/Tracing.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/Tracing.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/Tracing.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/Tracing.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/Tracing.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/Tracing.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Tracing.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Tracing.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/Tracing.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/Tracing.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/Tracing.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/Tracing.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/Tracing.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/Tracing.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/Tracing.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/internal\/Tracing.html", "kind" : "case class"}, {"name" : "zio.internal.UniqueKey", "shortDescription" : "This can be used whenever an arbitrary number of unique keys needs to be generated asthis will just use memory location for equality.", "object" : "zio\/internal\/UniqueKey$.html", "members_class" : [{"member" : "zio.internal.UniqueKey#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/UniqueKey.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/UniqueKey.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/UniqueKey.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/UniqueKey.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/UniqueKey.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/UniqueKey.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/UniqueKey.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/UniqueKey.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/UniqueKey.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/UniqueKey.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/UniqueKey.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/UniqueKey.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/UniqueKey.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/UniqueKey.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/UniqueKey.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/UniqueKey.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/UniqueKey.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/UniqueKey.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/UniqueKey.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(): UniqueKey", "member" : "zio.internal.UniqueKey.apply", "link" : "zio\/internal\/UniqueKey$.html#apply():zio.internal.UniqueKey", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/UniqueKey$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/UniqueKey$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/UniqueKey$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/UniqueKey$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/UniqueKey$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/UniqueKey$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/UniqueKey$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/UniqueKey$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/UniqueKey$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/UniqueKey$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/UniqueKey$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/UniqueKey$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/UniqueKey$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/UniqueKey$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/UniqueKey$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/UniqueKey$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/UniqueKey$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/UniqueKey$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/UniqueKey$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/internal\/UniqueKey.html", "kind" : "class"}, {"name" : "zio.internal.ZScheduler", "shortDescription" : "", "object" : "zio\/internal\/ZScheduler$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/internal\/ZScheduler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/internal\/ZScheduler$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/internal\/ZScheduler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/internal\/ZScheduler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/internal\/ZScheduler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/internal\/ZScheduler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/internal\/ZScheduler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/ZScheduler$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/ZScheduler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/internal\/ZScheduler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/internal\/ZScheduler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/internal\/ZScheduler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/internal\/ZScheduler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/internal\/ZScheduler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/internal\/ZScheduler$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/internal\/ZScheduler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/internal\/ZScheduler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/internal\/ZScheduler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/internal\/ZScheduler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "zio.test.mock" : [{"name" : "zio.test.mock.Capability", "shortDescription" : "A Capability[R, I, E, A] represents a capability of environment R that takes an input Iand returns an effect that may fail with an error E or produce a single A.", "object" : "zio\/test\/mock\/Capability$.html", "members_class" : [{"label" : "isEqual", "tail" : "(that: Capability[R0, I0, E0, A0]): Boolean", "member" : "zio.test.mock.Capability.isEqual", "link" : "zio\/test\/mock\/Capability.html#isEqual[R0<:zio.Has[_],I0,E0,A0](that:zio.test.mock.Capability[R0,I0,E0,A0]):Boolean", "kind" : "def"}, {"label" : "apply", "tail" : "(returns: Result[I, E, A])(ev: <:<[I, Unit]): Expectation[R]", "member" : "zio.test.mock.Capability.apply", "link" : "zio\/test\/mock\/Capability.html#apply(returns:zio.test.mock.Result[I,E,A])(implicitev:I<:<Unit):zio.test.mock.Expectation[R]", "kind" : "def"}, {"label" : "apply", "tail" : "(assertion: Assertion[I], result: Result[I, E, A])(ev: =!=[I, Unit]): Expectation[R]", "member" : "zio.test.mock.Capability.apply", "link" : "zio\/test\/mock\/Capability.html#apply(assertion:zio.test.Assertion[I],result:zio.test.mock.Result[I,E,A])(implicitev:I=!=Unit):zio.test.mock.Expectation[R]", "kind" : "def"}, {"label" : "apply", "tail" : "(assertion: Assertion[I])(ev1: =!=[I, Unit], ev2: <:<[A, Unit]): Expectation[R]", "member" : "zio.test.mock.Capability.apply", "link" : "zio\/test\/mock\/Capability.html#apply(assertion:zio.test.Assertion[I])(implicitev1:I=!=Unit,implicitev2:A<:<Unit):zio.test.mock.Expectation[R]", "kind" : "def"}, {"label" : "apply", "tail" : "()(ev1: =:=[I, Unit], ev2: <:<[A, Unit]): Expectation[R]", "member" : "zio.test.mock.Capability.apply", "link" : "zio\/test\/mock\/Capability.html#apply()(implicitev1:I=:=Unit,implicitev2:A<:<Unit):zio.test.mock.Expectation[R]", "kind" : "def"}, {"label" : "outputTag", "tail" : ": zio.LightTypeTag", "member" : "zio.test.mock.Capability.outputTag", "link" : "zio\/test\/mock\/Capability.html#outputTag:zio.LightTypeTag", "kind" : "val"}, {"label" : "errorTag", "tail" : ": zio.LightTypeTag", "member" : "zio.test.mock.Capability.errorTag", "link" : "zio\/test\/mock\/Capability.html#errorTag:zio.LightTypeTag", "kind" : "val"}, {"label" : "inputTag", "tail" : ": zio.LightTypeTag", "member" : "zio.test.mock.Capability.inputTag", "link" : "zio\/test\/mock\/Capability.html#inputTag:zio.LightTypeTag", "kind" : "val"}, {"member" : "zio.test.mock.Capability#<init>", "error" : "unsupported entity"}, {"label" : "mock", "tail" : ": Mock[R]", "member" : "zio.test.mock.Capability.mock", "link" : "zio\/test\/mock\/Capability.html#mock:zio.test.mock.Mock[R]", "kind" : "val"}, {"label" : "toString", "tail" : ": String", "member" : "zio.test.mock.Capability.Base.toString", "link" : "zio\/test\/mock\/Capability.html#toString:String", "kind" : "val"}, {"label" : "id", "tail" : ": UUID", "member" : "zio.test.mock.Capability.Base.id", "link" : "zio\/test\/mock\/Capability.html#id:java.util.UUID", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/Capability.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/Capability.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/Capability.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/Capability.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/Capability.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/Capability.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/Capability.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Capability.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Capability.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Capability.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/Capability.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/Capability.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/Capability.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/Capability.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/Capability.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/Capability.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/Capability.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/Capability.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Poly", "tail" : "", "member" : "zio.test.mock.Capability.Poly", "link" : "zio\/test\/mock\/Capability$.html#Poly", "kind" : "object"}, {"label" : "Poly", "tail" : "", "member" : "zio.test.mock.Capability.Poly", "link" : "zio\/test\/mock\/Capability$.html#Poly[R<:zio.Has[_],I,E,A]extendsCapability.Base[R]", "kind" : "abstract class"}, {"label" : "Unknown", "tail" : "", "member" : "zio.test.mock.Capability.Unknown", "link" : "zio\/test\/mock\/Capability$.html#UnknownextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "Base", "tail" : "", "member" : "zio.test.mock.Capability.Base", "link" : "zio\/test\/mock\/Capability$.html#Base[R<:zio.Has[_]]extendsAnyRef", "kind" : "abstract class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/Capability$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/Capability$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/Capability$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/Capability$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/Capability$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/Capability$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/Capability$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Capability$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Capability$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Capability$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/Capability$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/Capability$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/Capability$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/Capability$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/Capability$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/Capability$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/Capability$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/Capability$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/Capability$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/mock\/Capability.html", "kind" : "class"}, {"name" : "zio.test.mock.Expectation", "shortDescription" : "An Expectation[R] is an immutable tree structure that representsexpectations on environment R.", "object" : "zio\/test\/mock\/Expectation$.html", "members_class" : [{"label" : "toLayer", "tail" : "(): ULayer[R]", "member" : "zio.test.mock.Expectation.toLayer", "link" : "zio\/test\/mock\/Expectation.html#toLayer:zio.ULayer[R]", "kind" : "def"}, {"label" : "repeats", "tail" : "(range: Range): Expectation[R]", "member" : "zio.test.mock.Expectation.repeats", "link" : "zio\/test\/mock\/Expectation.html#repeats(range:Range):zio.test.mock.Expectation[R]", "kind" : "def"}, {"label" : "or", "tail" : "(that: Expectation[R0])(arg0: zio.Tag[R0]): Expectation[R with R0]", "member" : "zio.test.mock.Expectation.or", "link" : "zio\/test\/mock\/Expectation.html#or[R0<:zio.Has[_]](that:zio.test.mock.Expectation[R0])(implicitevidence$7:zio.Tag[R0]):zio.test.mock.Expectation[RwithR0]", "kind" : "def"}, {"label" : "optional", "tail" : "(): Expectation[R]", "member" : "zio.test.mock.Expectation.optional", "link" : "zio\/test\/mock\/Expectation.html#optional:zio.test.mock.Expectation[R]", "kind" : "def"}, {"label" : "atMost", "tail" : "(max: Int): Expectation[R]", "member" : "zio.test.mock.Expectation.atMost", "link" : "zio\/test\/mock\/Expectation.html#atMost(max:Int):zio.test.mock.Expectation[R]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(min: Int): Expectation[R]", "member" : "zio.test.mock.Expectation.atLeast", "link" : "zio\/test\/mock\/Expectation.html#atLeast(min:Int):zio.test.mock.Expectation[R]", "kind" : "def"}, {"label" : "andThen", "tail" : "(that: Expectation[R0])(arg0: zio.Tag[R0]): Expectation[R with R0]", "member" : "zio.test.mock.Expectation.andThen", "link" : "zio\/test\/mock\/Expectation.html#andThen[R0<:zio.Has[_]](that:zio.test.mock.Expectation[R0])(implicitevidence$6:zio.Tag[R0]):zio.test.mock.Expectation[RwithR0]", "kind" : "def"}, {"label" : "and", "tail" : "(that: Expectation[R0])(arg0: zio.Tag[R0]): Expectation[R with R0]", "member" : "zio.test.mock.Expectation.and", "link" : "zio\/test\/mock\/Expectation.html#and[R0<:zio.Has[_]](that:zio.test.mock.Expectation[R0])(implicitevidence$5:zio.Tag[R0]):zio.test.mock.Expectation[RwithR0]", "kind" : "def"}, {"label" : "++", "tail" : "(that: Expectation[R0])(arg0: zio.Tag[R0]): Expectation[R with R0]", "member" : "zio.test.mock.Expectation.++", "link" : "zio\/test\/mock\/Expectation.html#++[R0<:zio.Has[_]](that:zio.test.mock.Expectation[R0])(implicitevidence$4:zio.Tag[R0]):zio.test.mock.Expectation[RwithR0]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Expectation[R0])(arg0: zio.Tag[R0]): Expectation[R with R0]", "member" : "zio.test.mock.Expectation.||", "link" : "zio\/test\/mock\/Expectation.html#||[R0<:zio.Has[_]](that:zio.test.mock.Expectation[R0])(implicitevidence$3:zio.Tag[R0]):zio.test.mock.Expectation[RwithR0]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Expectation[R0])(arg0: zio.Tag[R0]): Expectation[R with R0]", "member" : "zio.test.mock.Expectation.&&", "link" : "zio\/test\/mock\/Expectation.html#&&[R0<:zio.Has[_]](that:zio.test.mock.Expectation[R0])(implicitevidence$2:zio.Tag[R0]):zio.test.mock.Expectation[RwithR0]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/Expectation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/Expectation.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/Expectation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/Expectation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/Expectation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/Expectation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/Expectation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Expectation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Expectation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Expectation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/Expectation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/Expectation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/Expectation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/Expectation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/Expectation.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/Expectation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/Expectation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/Expectation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/Expectation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "toLayer", "tail" : "(trunk: Expectation[R])(arg0: zio.Tag[R]): ULayer[R]", "member" : "zio.test.mock.Expectation.toLayer", "link" : "zio\/test\/mock\/Expectation$.html#toLayer[R<:zio.Has[_]](trunk:zio.test.mock.Expectation[R])(implicitevidence$19:zio.Tag[R]):zio.ULayer[R]", "kind" : "implicit def"}, {"label" : "valueM", "tail" : "(f: (I) => IO[Nothing, A]): Succeed[I, A]", "member" : "zio.test.mock.Expectation.valueM", "link" : "zio\/test\/mock\/Expectation$.html#valueM[I,A](f:I=>zio.IO[Nothing,A]):zio.test.mock.Result.Succeed[I,A]", "kind" : "def"}, {"label" : "valueF", "tail" : "(f: (I) => A): Succeed[I, A]", "member" : "zio.test.mock.Expectation.valueF", "link" : "zio\/test\/mock\/Expectation$.html#valueF[I,A](f:I=>A):zio.test.mock.Result.Succeed[I,A]", "kind" : "def"}, {"label" : "value", "tail" : "(value: A): Succeed[Any, A]", "member" : "zio.test.mock.Expectation.value", "link" : "zio\/test\/mock\/Expectation$.html#value[A](value:A):zio.test.mock.Result.Succeed[Any,A]", "kind" : "def"}, {"label" : "unit", "tail" : "(): Succeed[Any, Unit]", "member" : "zio.test.mock.Expectation.unit", "link" : "zio\/test\/mock\/Expectation$.html#unit:zio.test.mock.Result.Succeed[Any,Unit]", "kind" : "def"}, {"label" : "never", "tail" : "(): Succeed[Any, Nothing]", "member" : "zio.test.mock.Expectation.never", "link" : "zio\/test\/mock\/Expectation$.html#never:zio.test.mock.Result.Succeed[Any,Nothing]", "kind" : "def"}, {"label" : "failureM", "tail" : "(f: (I) => IO[E, Nothing]): Fail[I, E]", "member" : "zio.test.mock.Expectation.failureM", "link" : "zio\/test\/mock\/Expectation$.html#failureM[I,E](f:I=>zio.IO[E,Nothing]):zio.test.mock.Result.Fail[I,E]", "kind" : "def"}, {"label" : "failureF", "tail" : "(f: (I) => E): Fail[I, E]", "member" : "zio.test.mock.Expectation.failureF", "link" : "zio\/test\/mock\/Expectation$.html#failureF[I,E](f:I=>E):zio.test.mock.Result.Fail[I,E]", "kind" : "def"}, {"label" : "failure", "tail" : "(failure: E): Fail[Any, E]", "member" : "zio.test.mock.Expectation.failure", "link" : "zio\/test\/mock\/Expectation$.html#failure[E](failure:E):zio.test.mock.Result.Fail[Any,E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/Expectation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/Expectation$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/Expectation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/Expectation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/Expectation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/Expectation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/Expectation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Expectation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Expectation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Expectation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/Expectation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/Expectation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/Expectation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/Expectation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/Expectation$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/Expectation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/Expectation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/Expectation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/Expectation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/mock\/Expectation.html", "kind" : "class"}, {"name" : "zio.test.mock.Mock", "shortDescription" : "A Mock[R] represents a mockable environment R.", "object" : "zio\/test\/mock\/Mock$.html", "members_class" : [{"label" : "Poly", "tail" : "", "member" : "zio.test.mock.Mock.Poly", "link" : "zio\/test\/mock\/Mock.html#Poly", "kind" : "object"}, {"label" : "Stream", "tail" : "", "member" : "zio.test.mock.Mock.Stream", "link" : "zio\/test\/mock\/Mock.html#Stream[I,E,A]extendsCapability[R,I,Nothing,zio.stream.ZStream[Any,E,A]]", "kind" : "abstract class"}, {"label" : "Sink", "tail" : "", "member" : "zio.test.mock.Mock.Sink", "link" : "zio\/test\/mock\/Mock.html#Sink[I,E,A,L,B]extendsCapability[R,I,E,zio.stream.ZSink[Any,E,A,L,B]]", "kind" : "abstract class"}, {"label" : "Method", "tail" : "", "member" : "zio.test.mock.Mock.Method", "link" : "zio\/test\/mock\/Mock.html#Method[I,E<:Throwable,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "Effect", "tail" : "", "member" : "zio.test.mock.Mock.Effect", "link" : "zio\/test\/mock\/Mock.html#Effect[I,E,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "withRuntime", "tail" : "(): URIO[R, Runtime[R]]", "member" : "zio.test.mock.Mock.withRuntime", "link" : "zio\/test\/mock\/Mock.html#withRuntime[R]:zio.URIO[R,zio.Runtime[R]]", "kind" : "def"}, {"label" : "empty", "tail" : "(): ULayer[R]", "member" : "zio.test.mock.Mock.empty", "link" : "zio\/test\/mock\/Mock.html#empty:zio.ULayer[R]", "kind" : "def"}, {"member" : "zio.test.mock.Mock#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/Mock.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/Mock.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/Mock.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/Mock.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/Mock.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/Mock.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/Mock.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Mock.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Mock.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Mock.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/Mock.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/Mock.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/Mock.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/Mock.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/Mock.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/Mock.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/Mock.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/Mock.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/Mock.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compose", "tail" : ": URLayer[Has[Proxy], R]", "member" : "zio.test.mock.Mock.compose", "link" : "zio\/test\/mock\/Mock.html#compose:zio.URLayer[zio.Has[zio.test.mock.Proxy],R]", "kind" : "abstract val"}], "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/Mock$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/Mock$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/Mock$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/Mock$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/Mock$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/Mock$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/Mock$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Mock$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Mock$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Mock$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/Mock$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/Mock$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/Mock$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/Mock$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/Mock$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/Mock$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/Mock$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/Mock$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/Mock$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/mock\/Mock.html", "kind" : "class"}, {"name" : "zio.test.mock.mockable", "shortDescription" : "", "members_class" : [{"label" : "macroTransform", "tail" : "(annottees: Any*): Any", "member" : "zio.test.mock.mockable.macroTransform", "link" : "zio\/test\/mock\/mockable.html#macroTransform(annottees:Any*):Any", "kind" : "macro def"}, {"member" : "zio.test.mock.mockable#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/mockable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/mockable.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/mockable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/mockable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/mockable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/mockable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/mockable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/mockable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/mockable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/mockable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/mockable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/mockable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/mockable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/mockable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/mockable.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/mockable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/mockable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/mockable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/mockable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/mock\/mockable.html", "kind" : "class"}, {"name" : "zio.test.mock.MockClock", "shortDescription" : "", "object" : "zio\/test\/mock\/MockClock$.html", "members_object" : [{"label" : "Poly", "tail" : "", "member" : "zio.test.mock.Mock.Poly", "link" : "zio\/test\/mock\/Mock.html#Poly", "kind" : "object"}, {"label" : "Stream", "tail" : "", "member" : "zio.test.mock.Mock.Stream", "link" : "zio\/test\/mock\/Mock.html#Stream[I,E,A]extendsCapability[R,I,Nothing,zio.stream.ZStream[Any,E,A]]", "kind" : "abstract class"}, {"label" : "Sink", "tail" : "", "member" : "zio.test.mock.Mock.Sink", "link" : "zio\/test\/mock\/Mock.html#Sink[I,E,A,L,B]extendsCapability[R,I,E,zio.stream.ZSink[Any,E,A,L,B]]", "kind" : "abstract class"}, {"label" : "Method", "tail" : "", "member" : "zio.test.mock.Mock.Method", "link" : "zio\/test\/mock\/Mock.html#Method[I,E<:Throwable,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "Effect", "tail" : "", "member" : "zio.test.mock.Mock.Effect", "link" : "zio\/test\/mock\/Mock.html#Effect[I,E,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "compose", "tail" : ": URLayer[Has[Proxy], Has[Clock]]", "member" : "zio.test.mock.MockClock.compose", "link" : "zio\/test\/mock\/MockClock$.html#compose:zio.URLayer[zio.Has[zio.test.mock.Proxy],zio.Has[zio.Clock]]", "kind" : "val"}, {"label" : "LocalDateTime", "tail" : "", "member" : "zio.test.mock.MockClock.LocalDateTime", "link" : "zio\/test\/mock\/MockClock$.html#LocalDateTime", "kind" : "object"}, {"label" : "Instant", "tail" : "", "member" : "zio.test.mock.MockClock.Instant", "link" : "zio\/test\/mock\/MockClock$.html#Instant", "kind" : "object"}, {"label" : "Sleep", "tail" : "", "member" : "zio.test.mock.MockClock.Sleep", "link" : "zio\/test\/mock\/MockClock$.html#Sleep", "kind" : "object"}, {"label" : "NanoTime", "tail" : "", "member" : "zio.test.mock.MockClock.NanoTime", "link" : "zio\/test\/mock\/MockClock$.html#NanoTime", "kind" : "object"}, {"label" : "CurrentDateTime", "tail" : "", "member" : "zio.test.mock.MockClock.CurrentDateTime", "link" : "zio\/test\/mock\/MockClock$.html#CurrentDateTime", "kind" : "object"}, {"label" : "CurrentTime", "tail" : "", "member" : "zio.test.mock.MockClock.CurrentTime", "link" : "zio\/test\/mock\/MockClock$.html#CurrentTime", "kind" : "object"}, {"label" : "withRuntime", "tail" : "(): URIO[R, Runtime[R]]", "member" : "zio.test.mock.Mock.withRuntime", "link" : "zio\/test\/mock\/MockClock$.html#withRuntime[R]:zio.URIO[R,zio.Runtime[R]]", "kind" : "def"}, {"label" : "empty", "tail" : "(): ULayer[Has[Clock]]", "member" : "zio.test.mock.Mock.empty", "link" : "zio\/test\/mock\/MockClock$.html#empty:zio.ULayer[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/MockClock$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/MockClock$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/MockClock$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/MockClock$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/MockClock$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/MockClock$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/MockClock$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/MockClock$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/MockClock$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/MockClock$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/MockClock$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/MockClock$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/MockClock$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/MockClock$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/MockClock$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/MockClock$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/MockClock$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/MockClock$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/MockClock$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.mock.MockConsole", "shortDescription" : "", "object" : "zio\/test\/mock\/MockConsole$.html", "members_object" : [{"label" : "Poly", "tail" : "", "member" : "zio.test.mock.Mock.Poly", "link" : "zio\/test\/mock\/Mock.html#Poly", "kind" : "object"}, {"label" : "Stream", "tail" : "", "member" : "zio.test.mock.Mock.Stream", "link" : "zio\/test\/mock\/Mock.html#Stream[I,E,A]extendsCapability[R,I,Nothing,zio.stream.ZStream[Any,E,A]]", "kind" : "abstract class"}, {"label" : "Sink", "tail" : "", "member" : "zio.test.mock.Mock.Sink", "link" : "zio\/test\/mock\/Mock.html#Sink[I,E,A,L,B]extendsCapability[R,I,E,zio.stream.ZSink[Any,E,A,L,B]]", "kind" : "abstract class"}, {"label" : "Method", "tail" : "", "member" : "zio.test.mock.Mock.Method", "link" : "zio\/test\/mock\/Mock.html#Method[I,E<:Throwable,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "Effect", "tail" : "", "member" : "zio.test.mock.Mock.Effect", "link" : "zio\/test\/mock\/Mock.html#Effect[I,E,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "compose", "tail" : ": URLayer[Has[Proxy], Has[Console]]", "member" : "zio.test.mock.MockConsole.compose", "link" : "zio\/test\/mock\/MockConsole$.html#compose:zio.URLayer[zio.Has[zio.test.mock.Proxy],zio.Has[zio.Console]]", "kind" : "val"}, {"label" : "ReadLine", "tail" : "", "member" : "zio.test.mock.MockConsole.ReadLine", "link" : "zio\/test\/mock\/MockConsole$.html#ReadLine", "kind" : "object"}, {"label" : "PrintLineError", "tail" : "", "member" : "zio.test.mock.MockConsole.PrintLineError", "link" : "zio\/test\/mock\/MockConsole$.html#PrintLineError", "kind" : "object"}, {"label" : "PrintLine", "tail" : "", "member" : "zio.test.mock.MockConsole.PrintLine", "link" : "zio\/test\/mock\/MockConsole$.html#PrintLine", "kind" : "object"}, {"label" : "PrintError", "tail" : "", "member" : "zio.test.mock.MockConsole.PrintError", "link" : "zio\/test\/mock\/MockConsole$.html#PrintError", "kind" : "object"}, {"label" : "Print", "tail" : "", "member" : "zio.test.mock.MockConsole.Print", "link" : "zio\/test\/mock\/MockConsole$.html#Print", "kind" : "object"}, {"label" : "withRuntime", "tail" : "(): URIO[R, Runtime[R]]", "member" : "zio.test.mock.Mock.withRuntime", "link" : "zio\/test\/mock\/MockConsole$.html#withRuntime[R]:zio.URIO[R,zio.Runtime[R]]", "kind" : "def"}, {"label" : "empty", "tail" : "(): ULayer[Has[Console]]", "member" : "zio.test.mock.Mock.empty", "link" : "zio\/test\/mock\/MockConsole$.html#empty:zio.ULayer[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/MockConsole$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/MockConsole$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/MockConsole$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/MockConsole$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/MockConsole$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/MockConsole$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/MockConsole$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/MockConsole$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/MockConsole$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/MockConsole$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/MockConsole$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/MockConsole$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/MockConsole$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/MockConsole$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/MockConsole$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/MockConsole$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/MockConsole$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/MockConsole$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/MockConsole$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.mock.MockRandom", "shortDescription" : "", "object" : "zio\/test\/mock\/MockRandom$.html", "members_object" : [{"label" : "Poly", "tail" : "", "member" : "zio.test.mock.Mock.Poly", "link" : "zio\/test\/mock\/Mock.html#Poly", "kind" : "object"}, {"label" : "Stream", "tail" : "", "member" : "zio.test.mock.Mock.Stream", "link" : "zio\/test\/mock\/Mock.html#Stream[I,E,A]extendsCapability[R,I,Nothing,zio.stream.ZStream[Any,E,A]]", "kind" : "abstract class"}, {"label" : "Sink", "tail" : "", "member" : "zio.test.mock.Mock.Sink", "link" : "zio\/test\/mock\/Mock.html#Sink[I,E,A,L,B]extendsCapability[R,I,E,zio.stream.ZSink[Any,E,A,L,B]]", "kind" : "abstract class"}, {"label" : "Method", "tail" : "", "member" : "zio.test.mock.Mock.Method", "link" : "zio\/test\/mock\/Mock.html#Method[I,E<:Throwable,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "Effect", "tail" : "", "member" : "zio.test.mock.Mock.Effect", "link" : "zio\/test\/mock\/Mock.html#Effect[I,E,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "compose", "tail" : ": URLayer[Has[Proxy], Has[Random]]", "member" : "zio.test.mock.MockRandom.compose", "link" : "zio\/test\/mock\/MockRandom$.html#compose:zio.URLayer[zio.Has[zio.test.mock.Proxy],zio.Has[zio.Random]]", "kind" : "val"}, {"label" : "Shuffle", "tail" : "", "member" : "zio.test.mock.MockRandom.Shuffle", "link" : "zio\/test\/mock\/MockRandom$.html#Shuffle", "kind" : "object"}, {"label" : "SetSeed", "tail" : "", "member" : "zio.test.mock.MockRandom.SetSeed", "link" : "zio\/test\/mock\/MockRandom$.html#SetSeed", "kind" : "object"}, {"label" : "NextString", "tail" : "", "member" : "zio.test.mock.MockRandom.NextString", "link" : "zio\/test\/mock\/MockRandom$.html#NextString", "kind" : "object"}, {"label" : "NextPrintableChar", "tail" : "", "member" : "zio.test.mock.MockRandom.NextPrintableChar", "link" : "zio\/test\/mock\/MockRandom$.html#NextPrintableChar", "kind" : "object"}, {"label" : "NextLongBounded", "tail" : "", "member" : "zio.test.mock.MockRandom.NextLongBounded", "link" : "zio\/test\/mock\/MockRandom$.html#NextLongBounded", "kind" : "object"}, {"label" : "NextLongBetween", "tail" : "", "member" : "zio.test.mock.MockRandom.NextLongBetween", "link" : "zio\/test\/mock\/MockRandom$.html#NextLongBetween", "kind" : "object"}, {"label" : "NextLong", "tail" : "", "member" : "zio.test.mock.MockRandom.NextLong", "link" : "zio\/test\/mock\/MockRandom$.html#NextLong", "kind" : "object"}, {"label" : "NextIntBounded", "tail" : "", "member" : "zio.test.mock.MockRandom.NextIntBounded", "link" : "zio\/test\/mock\/MockRandom$.html#NextIntBounded", "kind" : "object"}, {"label" : "NextIntBetween", "tail" : "", "member" : "zio.test.mock.MockRandom.NextIntBetween", "link" : "zio\/test\/mock\/MockRandom$.html#NextIntBetween", "kind" : "object"}, {"label" : "NextInt", "tail" : "", "member" : "zio.test.mock.MockRandom.NextInt", "link" : "zio\/test\/mock\/MockRandom$.html#NextInt", "kind" : "object"}, {"label" : "NextGaussian", "tail" : "", "member" : "zio.test.mock.MockRandom.NextGaussian", "link" : "zio\/test\/mock\/MockRandom$.html#NextGaussian", "kind" : "object"}, {"label" : "NextFloatBetween", "tail" : "", "member" : "zio.test.mock.MockRandom.NextFloatBetween", "link" : "zio\/test\/mock\/MockRandom$.html#NextFloatBetween", "kind" : "object"}, {"label" : "NextFloat", "tail" : "", "member" : "zio.test.mock.MockRandom.NextFloat", "link" : "zio\/test\/mock\/MockRandom$.html#NextFloat", "kind" : "object"}, {"label" : "NextDoubleBetween", "tail" : "", "member" : "zio.test.mock.MockRandom.NextDoubleBetween", "link" : "zio\/test\/mock\/MockRandom$.html#NextDoubleBetween", "kind" : "object"}, {"label" : "NextDouble", "tail" : "", "member" : "zio.test.mock.MockRandom.NextDouble", "link" : "zio\/test\/mock\/MockRandom$.html#NextDouble", "kind" : "object"}, {"label" : "NextBytes", "tail" : "", "member" : "zio.test.mock.MockRandom.NextBytes", "link" : "zio\/test\/mock\/MockRandom$.html#NextBytes", "kind" : "object"}, {"label" : "NextBoolean", "tail" : "", "member" : "zio.test.mock.MockRandom.NextBoolean", "link" : "zio\/test\/mock\/MockRandom$.html#NextBoolean", "kind" : "object"}, {"label" : "withRuntime", "tail" : "(): URIO[R, Runtime[R]]", "member" : "zio.test.mock.Mock.withRuntime", "link" : "zio\/test\/mock\/MockRandom$.html#withRuntime[R]:zio.URIO[R,zio.Runtime[R]]", "kind" : "def"}, {"label" : "empty", "tail" : "(): ULayer[Has[Random]]", "member" : "zio.test.mock.Mock.empty", "link" : "zio\/test\/mock\/MockRandom$.html#empty:zio.ULayer[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/MockRandom$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/MockRandom$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/MockRandom$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/MockRandom$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/MockRandom$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/MockRandom$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/MockRandom$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/MockRandom$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/MockRandom$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/MockRandom$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/MockRandom$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/MockRandom$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/MockRandom$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/MockRandom$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/MockRandom$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/MockRandom$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/MockRandom$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/MockRandom$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/MockRandom$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.mock.MockSystem", "shortDescription" : "", "object" : "zio\/test\/mock\/MockSystem$.html", "members_object" : [{"label" : "Poly", "tail" : "", "member" : "zio.test.mock.Mock.Poly", "link" : "zio\/test\/mock\/Mock.html#Poly", "kind" : "object"}, {"label" : "Stream", "tail" : "", "member" : "zio.test.mock.Mock.Stream", "link" : "zio\/test\/mock\/Mock.html#Stream[I,E,A]extendsCapability[R,I,Nothing,zio.stream.ZStream[Any,E,A]]", "kind" : "abstract class"}, {"label" : "Sink", "tail" : "", "member" : "zio.test.mock.Mock.Sink", "link" : "zio\/test\/mock\/Mock.html#Sink[I,E,A,L,B]extendsCapability[R,I,E,zio.stream.ZSink[Any,E,A,L,B]]", "kind" : "abstract class"}, {"label" : "Method", "tail" : "", "member" : "zio.test.mock.Mock.Method", "link" : "zio\/test\/mock\/Mock.html#Method[I,E<:Throwable,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "Effect", "tail" : "", "member" : "zio.test.mock.Mock.Effect", "link" : "zio\/test\/mock\/Mock.html#Effect[I,E,A]extendsCapability[R,I,E,A]", "kind" : "abstract class"}, {"label" : "compose", "tail" : ": URLayer[Has[Proxy], Has[System]]", "member" : "zio.test.mock.MockSystem.compose", "link" : "zio\/test\/mock\/MockSystem$.html#compose:zio.URLayer[zio.Has[zio.test.mock.Proxy],zio.Has[zio.System]]", "kind" : "val"}, {"label" : "LineSeparator", "tail" : "", "member" : "zio.test.mock.MockSystem.LineSeparator", "link" : "zio\/test\/mock\/MockSystem$.html#LineSeparator", "kind" : "object"}, {"label" : "PropertyOrOption", "tail" : "", "member" : "zio.test.mock.MockSystem.PropertyOrOption", "link" : "zio\/test\/mock\/MockSystem$.html#PropertyOrOption", "kind" : "object"}, {"label" : "PropertyOrElse", "tail" : "", "member" : "zio.test.mock.MockSystem.PropertyOrElse", "link" : "zio\/test\/mock\/MockSystem$.html#PropertyOrElse", "kind" : "object"}, {"label" : "Property", "tail" : "", "member" : "zio.test.mock.MockSystem.Property", "link" : "zio\/test\/mock\/MockSystem$.html#Property", "kind" : "object"}, {"label" : "Properties", "tail" : "", "member" : "zio.test.mock.MockSystem.Properties", "link" : "zio\/test\/mock\/MockSystem$.html#Properties", "kind" : "object"}, {"label" : "Envs", "tail" : "", "member" : "zio.test.mock.MockSystem.Envs", "link" : "zio\/test\/mock\/MockSystem$.html#Envs", "kind" : "object"}, {"label" : "EnvOrOption", "tail" : "", "member" : "zio.test.mock.MockSystem.EnvOrOption", "link" : "zio\/test\/mock\/MockSystem$.html#EnvOrOption", "kind" : "object"}, {"label" : "EnvOrElse", "tail" : "", "member" : "zio.test.mock.MockSystem.EnvOrElse", "link" : "zio\/test\/mock\/MockSystem$.html#EnvOrElse", "kind" : "object"}, {"label" : "Env", "tail" : "", "member" : "zio.test.mock.MockSystem.Env", "link" : "zio\/test\/mock\/MockSystem$.html#Env", "kind" : "object"}, {"label" : "withRuntime", "tail" : "(): URIO[R, Runtime[R]]", "member" : "zio.test.mock.Mock.withRuntime", "link" : "zio\/test\/mock\/MockSystem$.html#withRuntime[R]:zio.URIO[R,zio.Runtime[R]]", "kind" : "def"}, {"label" : "empty", "tail" : "(): ULayer[Has[System]]", "member" : "zio.test.mock.Mock.empty", "link" : "zio\/test\/mock\/MockSystem$.html#empty:zio.ULayer[R]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/MockSystem$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/MockSystem$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/MockSystem$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/MockSystem$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/MockSystem$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/MockSystem$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/MockSystem$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/MockSystem$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/MockSystem$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/MockSystem$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/MockSystem$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/MockSystem$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/MockSystem$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/MockSystem$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/MockSystem$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/MockSystem$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/MockSystem$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/MockSystem$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/MockSystem$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.mock.Proxy", "shortDescription" : "A Proxy provides the machinery to map mocked invocations to predefined resultsand check some constraints on the way.", "members_class" : [{"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T, u: U, v: V): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q,r:R,s:S,t:T,u:U,v:V):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T, u: U): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q,r:R,s:S,t:T,u:U):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S, t: T): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q,r:R,s:S,t:T):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R, s: S): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q,r:R,s:S):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q, r: R): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q,r:R):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P, q: Q): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P,q:Q):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O, p: P): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O,p:P):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N, o: O): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N,o:O):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M, N), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M, n: N): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M,N](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M,N),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M,n:N):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L, M), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L, m: M): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L,M](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L,M),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L,m:M):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K, L), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K, l: L): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K,L](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K,L),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K,l:L):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J, K), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J, k: K): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G,H,I,J,K](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J,K),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J,k:K):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I, J), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G,H,I,J](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I,J),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I,j:J):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H, I), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G,H,I](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G,H,I),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H,i:I):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G, H), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G,H](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G,H),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G,h:H):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F, G), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F, g: G): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F,G](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F,G),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F,g:G):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E, F), Error, Value], a: A, b: B, c: C, d: D, e: E, f: F): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E,F](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E,F),Error,Value],a:A,b:B,c:C,d:D,e:E,f:F):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D, E), Error, Value], a: A, b: B, c: C, d: D, e: E): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D,E](capability:zio.test.mock.Capability[RIn,(A,B,C,D,E),Error,Value],a:A,b:B,c:C,d:D,e:E):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C, D), Error, Value], a: A, b: B, c: C, d: D): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C,D](capability:zio.test.mock.Capability[RIn,(A,B,C,D),Error,Value],a:A,b:B,c:C,d:D):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B, C), Error, Value], a: A, b: B, c: C): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B,C](capability:zio.test.mock.Capability[RIn,(A,B,C),Error,Value],a:A,b:B,c:C):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, (A, B), Error, Value], a: A, b: B): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A,B](capability:zio.test.mock.Capability[RIn,(A,B),Error,Value],a:A,b:B):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, A, Error, Value], a: A): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value,A](capability:zio.test.mock.Capability[RIn,A,Error,Value],a:A):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"label" : "apply", "tail" : "(capability: Capability[RIn, Unit, Error, Value]): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.apply", "link" : "zio\/test\/mock\/Proxy.html#apply[RIn<:zio.Has[_],ROut,Error,Value](capability:zio.test.mock.Capability[RIn,Unit,Error,Value]):zio.ZIO[ROut,Error,Value]", "kind" : "final def"}, {"member" : "zio.test.mock.Proxy#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/Proxy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/Proxy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/Proxy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/Proxy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/Proxy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/Proxy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/Proxy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Proxy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Proxy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Proxy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/Proxy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/Proxy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/Proxy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/Proxy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/Proxy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/Proxy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/Proxy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/Proxy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/Proxy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "invoke", "tail" : "(capability: Capability[RIn, Input, Error, Value], input: Input): ZIO[ROut, Error, Value]", "member" : "zio.test.mock.Proxy.invoke", "link" : "zio\/test\/mock\/Proxy.html#invoke[RIn<:zio.Has[_],ROut,Input,Error,Value](capability:zio.test.mock.Capability[RIn,Input,Error,Value],input:Input):zio.ZIO[ROut,Error,Value]", "kind" : "abstract def"}], "class" : "zio\/test\/mock\/Proxy.html", "kind" : "class"}, {"name" : "zio.test.mock.Result", "shortDescription" : "A Result[-I, +E, +A] represents the value or failure that will be returnedby mock expectation when invoked.", "object" : "zio\/test\/mock\/Result$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/Result.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/Result.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/Result.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/Result.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/Result.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/Result.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/Result.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Result.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Result.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Result.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/Result.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/Result.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/Result.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/Result.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/Result.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/Result.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/Result.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/Result.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/Result.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "io", "tail" : ": (I) => IO[E, A]", "member" : "zio.test.mock.Result.io", "link" : "zio\/test\/mock\/Result.html#io:I=>zio.IO[E,A]", "kind" : "abstract val"}], "members_object" : [{"label" : "Fail", "tail" : "", "member" : "zio.test.mock.Result.Fail", "link" : "zio\/test\/mock\/Result$.html#Fail[-I,+E]extendsResult[I,E,Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Succeed", "tail" : "", "member" : "zio.test.mock.Result.Succeed", "link" : "zio\/test\/mock\/Result$.html#Succeed[-I,+A]extendsResult[I,Nothing,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/mock\/Result$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/mock\/Result$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/mock\/Result$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/mock\/Result$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/mock\/Result$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/mock\/Result$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/mock\/Result$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Result$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Result$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/mock\/Result$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/mock\/Result$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/mock\/Result$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/mock\/Result$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/mock\/Result$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/mock\/Result$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/mock\/Result$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/mock\/Result$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/mock\/Result$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/mock\/Result$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/mock\/Result.html", "kind" : "class"}], "zio.test" : [{"name" : "zio.test.AbstractRunnableSpec", "shortDescription" : "", "members_class" : [{"label" : "runtimeConfig", "tail" : "(): RuntimeConfig", "member" : "zio.test.AbstractRunnableSpec.runtimeConfig", "link" : "zio\/test\/AbstractRunnableSpec.html#runtimeConfig:zio.RuntimeConfig", "kind" : "final def"}, {"label" : "run", "tail" : "(): ZIO[zio.ZEnv with Has[ZIOAppArgs], Any, Any]", "member" : "zio.test.AbstractRunnableSpec.run", "link" : "zio\/test\/AbstractRunnableSpec.html#run:zio.ZIO[zio.ZEnvwithzio.Has[zio.ZIOAppArgs],Any,Any]", "kind" : "final def"}, {"label" : "platform", "tail" : "(): RuntimeConfig", "member" : "zio.test.AbstractRunnableSpec.platform", "link" : "zio\/test\/AbstractRunnableSpec.html#platform:zio.RuntimeConfig", "kind" : "final def"}, {"member" : "zio.test.AbstractRunnableSpec#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/AbstractRunnableSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/AbstractRunnableSpec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/AbstractRunnableSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/AbstractRunnableSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/AbstractRunnableSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/AbstractRunnableSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/AbstractRunnableSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AbstractRunnableSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AbstractRunnableSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AbstractRunnableSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/AbstractRunnableSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/AbstractRunnableSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/AbstractRunnableSpec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/AbstractRunnableSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/AbstractRunnableSpec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/AbstractRunnableSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/AbstractRunnableSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/AbstractRunnableSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/AbstractRunnableSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "spec", "tail" : "(): ZSpec[Environment, Failure]", "member" : "zio.test.AbstractRunnableSpec.spec", "link" : "zio\/test\/AbstractRunnableSpec.html#spec:zio.test.ZSpec[AbstractRunnableSpec.this.Environment,AbstractRunnableSpec.this.Failure]", "kind" : "abstract def"}, {"label" : "runner", "tail" : "(): TestRunner[Environment, Failure]", "member" : "zio.test.AbstractRunnableSpec.runner", "link" : "zio\/test\/AbstractRunnableSpec.html#runner:zio.test.TestRunner[AbstractRunnableSpec.this.Environment,AbstractRunnableSpec.this.Failure]", "kind" : "abstract def"}, {"label" : "aspects", "tail" : "(): List[TestAspect[Nothing, Environment, Nothing, Any]]", "member" : "zio.test.AbstractRunnableSpec.aspects", "link" : "zio\/test\/AbstractRunnableSpec.html#aspects:List[zio.test.TestAspect[Nothing,AbstractRunnableSpec.this.Environment,Nothing,Any]]", "kind" : "abstract def"}, {"member" : "zio.test.AbstractRunnableSpec.Failure", "error" : "unsupported entity"}, {"member" : "zio.test.AbstractRunnableSpec.Environment", "error" : "unsupported entity"}], "class" : "zio\/test\/AbstractRunnableSpec.html", "kind" : "class"}, {"name" : "zio.test.Annotations", "object" : "zio\/test\/Annotations$.html", "members_object" : [{"label" : "withAnnotation", "tail" : "(zio: ZIO[R, E, A]): ZIO[R, Annotated[E], Annotated[A]]", "member" : "zio.test.Annotations.withAnnotation", "link" : "zio\/test\/Annotations$.html#withAnnotation[R<:zio.Has[zio.test.Annotations],E,A](zio:zio.ZIO[R,E,A]):zio.ZIO[R,zio.test.Annotated[E],zio.test.Annotated[A]]", "kind" : "def"}, {"label" : "live", "tail" : ": ULayer[Has[Annotations]]", "member" : "zio.test.Annotations.live", "link" : "zio\/test\/Annotations$.html#live:zio.ULayer[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "supervisedFibers", "tail" : "(): ZIO[Has[Annotations], Nothing, SortedSet[Fiber.Runtime[Any, Any]]]", "member" : "zio.test.Annotations.supervisedFibers", "link" : "zio\/test\/Annotations$.html#supervisedFibers:zio.ZIO[zio.Has[zio.test.Annotations],Nothing,scala.collection.immutable.SortedSet[zio.Fiber.Runtime[Any,Any]]]", "kind" : "def"}, {"label" : "get", "tail" : "(key: TestAnnotation[V]): URIO[Has[Annotations], V]", "member" : "zio.test.Annotations.get", "link" : "zio\/test\/Annotations$.html#get[V](key:zio.test.TestAnnotation[V]):zio.URIO[zio.Has[zio.test.Annotations],V]", "kind" : "def"}, {"label" : "annotate", "tail" : "(key: TestAnnotation[V], value: V): URIO[Has[Annotations], Unit]", "member" : "zio.test.Annotations.annotate", "link" : "zio\/test\/Annotations$.html#annotate[V](key:zio.test.TestAnnotation[V],value:V):zio.URIO[zio.Has[zio.test.Annotations],Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Annotations$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Annotations$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Annotations$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Annotations$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Annotations$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Annotations$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Annotations$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Annotations$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Annotations$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Annotations$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Annotations$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Annotations$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Annotations$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Annotations$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Annotations$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Annotations$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Annotations$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Annotations$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Annotations$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/Annotations.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Annotations.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Annotations.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Annotations.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Annotations.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Annotations.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Annotations.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Annotations.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Annotations.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Annotations.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Annotations.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Annotations.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Annotations.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Annotations.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Annotations.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Annotations.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Annotations.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Annotations.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Annotations.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Annotations.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "supervisedFibers", "tail" : "(): UIO[SortedSet[Fiber.Runtime[Any, Any]]]", "member" : "zio.test.Annotations.supervisedFibers", "link" : "zio\/test\/Annotations.html#supervisedFibers:zio.UIO[scala.collection.immutable.SortedSet[zio.Fiber.Runtime[Any,Any]]]", "kind" : "abstract def"}, {"label" : "withAnnotation", "tail" : "(zio: ZIO[R, E, A]): ZIO[R, Annotated[E], Annotated[A]]", "member" : "zio.test.Annotations.withAnnotation", "link" : "zio\/test\/Annotations.html#withAnnotation[R,E,A](zio:zio.ZIO[R,E,A]):zio.ZIO[R,zio.test.Annotated[E],zio.test.Annotated[A]]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(key: TestAnnotation[V]): UIO[V]", "member" : "zio.test.Annotations.get", "link" : "zio\/test\/Annotations.html#get[V](key:zio.test.TestAnnotation[V]):zio.UIO[V]", "kind" : "abstract def"}, {"label" : "annotate", "tail" : "(key: TestAnnotation[V], value: V): UIO[Unit]", "member" : "zio.test.Annotations.annotate", "link" : "zio\/test\/Annotations.html#annotate[V](key:zio.test.TestAnnotation[V],value:V):zio.UIO[Unit]", "kind" : "abstract def"}], "shortDescription" : "The Annotations trait provides access to an annotation map that testscan add arbitrary annotations to."}, {"name" : "zio.test.Arrow", "object" : "zio\/test\/Arrow$.html", "members_object" : [{"label" : "Suspend", "tail" : "", "member" : "zio.test.Arrow.Suspend", "link" : "zio\/test\/Arrow$.html#Suspend[A,B]extendsArrow[A,B]withProductwithSerializable", "kind" : "case class"}, {"label" : "Not", "tail" : "", "member" : "zio.test.Arrow.Not", "link" : "zio\/test\/Arrow$.html#NotextendsArrow[Any,Boolean]withProductwithSerializable", "kind" : "case class"}, {"label" : "Or", "tail" : "", "member" : "zio.test.Arrow.Or", "link" : "zio\/test\/Arrow$.html#OrextendsArrow[Any,Boolean]withProductwithSerializable", "kind" : "case class"}, {"label" : "And", "tail" : "", "member" : "zio.test.Arrow.And", "link" : "zio\/test\/Arrow$.html#AndextendsArrow[Any,Boolean]withProductwithSerializable", "kind" : "case class"}, {"label" : "AndThen", "tail" : "", "member" : "zio.test.Arrow.AndThen", "link" : "zio\/test\/Arrow$.html#AndThen[A,B,C]extendsArrow[A,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "ArrowF", "tail" : "", "member" : "zio.test.Arrow.ArrowF", "link" : "zio\/test\/Arrow$.html#ArrowF[-A,+B]extendsArrow[A,B]withProductwithSerializable", "kind" : "case class"}, {"label" : "Meta", "tail" : "", "member" : "zio.test.Arrow.Meta", "link" : "zio\/test\/Arrow$.html#Meta[-A,+B]extendsArrow[A,B]withProductwithSerializable", "kind" : "case class"}, {"label" : "Span", "tail" : "", "member" : "zio.test.Arrow.Span", "link" : "zio\/test\/Arrow$.html#SpanextendsProductwithSerializable", "kind" : "case class"}, {"label" : "run", "tail" : "(assert: Arrow[A, B], in: Either[Throwable, A]): Trace[B]", "member" : "zio.test.Arrow.run", "link" : "zio\/test\/Arrow$.html#run[A,B](assert:zio.test.Arrow[A,B],in:Either[Throwable,A]):zio.test.Trace[B]", "kind" : "def"}, {"label" : "makeEither", "tail" : "(onFail: (Throwable) => Trace[B], onSucceed: (A) => Trace[B]): Arrow[A, B]", "member" : "zio.test.Arrow.makeEither", "link" : "zio\/test\/Arrow$.html#makeEither[A,B](onFail:Throwable=>zio.test.Trace[B],onSucceed:A=>zio.test.Trace[B]):zio.test.Arrow[A,B]", "kind" : "def"}, {"label" : "make", "tail" : "(f: (A) => Trace[B]): Arrow[A, B]", "member" : "zio.test.Arrow.make", "link" : "zio\/test\/Arrow$.html#make[A,B](f:A=>zio.test.Trace[B]):zio.test.Arrow[A,B]", "kind" : "def"}, {"label" : "suspend", "tail" : "(f: (A) => Arrow[Any, B]): Arrow[A, B]", "member" : "zio.test.Arrow.suspend", "link" : "zio\/test\/Arrow$.html#suspend[A,B](f:A=>zio.test.Arrow[Any,B]):zio.test.Arrow[A,B]", "kind" : "def"}, {"label" : "fromFunction", "tail" : "(f: (A) => B): Arrow[A, B]", "member" : "zio.test.Arrow.fromFunction", "link" : "zio\/test\/Arrow$.html#fromFunction[A,B](f:A=>B):zio.test.Arrow[A,B]", "kind" : "def"}, {"label" : "succeed", "tail" : "(value: => A): Arrow[Any, A]", "member" : "zio.test.Arrow.succeed", "link" : "zio\/test\/Arrow$.html#succeed[A](value:=>A):zio.test.Arrow[Any,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Arrow$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Arrow$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Arrow$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Arrow$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Arrow$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Arrow$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Arrow$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Arrow$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Arrow$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Arrow$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Arrow$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Arrow$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Arrow$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Arrow$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Arrow$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Arrow$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Arrow$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Arrow$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Arrow$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/Arrow.html", "kind" : "trait", "members_trait" : [{"label" : "unary_!", "tail" : "(ev: <:<[Any, A], ev2: <:<[B, Boolean]): Arrow[Any, Boolean]", "member" : "zio.test.Arrow.unary_!", "link" : "zio\/test\/Arrow.html#unary_!(implicitev:Any<:<A,implicitev2:B<:<Boolean):zio.test.Arrow[Any,Boolean]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Arrow[Any, Boolean])(ev: <:<[Any, A], ev2: <:<[B, Boolean]): Arrow[Any, Boolean]", "member" : "zio.test.Arrow.||", "link" : "zio\/test\/Arrow.html#||(that:zio.test.Arrow[Any,Boolean])(implicitev:Any<:<A,implicitev2:B<:<Boolean):zio.test.Arrow[Any,Boolean]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Arrow[Any, Boolean])(ev: <:<[Any, A], ev2: <:<[B, Boolean]): Arrow[Any, Boolean]", "member" : "zio.test.Arrow.&&", "link" : "zio\/test\/Arrow.html#&&(that:zio.test.Arrow[Any,Boolean])(implicitev:Any<:<A,implicitev2:B<:<Boolean):zio.test.Arrow[Any,Boolean]", "kind" : "def"}, {"label" : ">>>", "tail" : "(that: Arrow[B, C]): Arrow[A, C]", "member" : "zio.test.Arrow.>>>", "link" : "zio\/test\/Arrow.html#>>>[C](that:zio.test.Arrow[B,C]):zio.test.Arrow[A,C]", "kind" : "def"}, {"label" : "withParentSpan", "tail" : "(span: (Int, Int)): Arrow[A, B]", "member" : "zio.test.Arrow.withParentSpan", "link" : "zio\/test\/Arrow.html#withParentSpan(span:(Int,Int)):zio.test.Arrow[A,B]", "kind" : "def"}, {"label" : "withLocation", "tail" : "(location: SourceLocation): Arrow[A, B]", "member" : "zio.test.Arrow.withLocation", "link" : "zio\/test\/Arrow.html#withLocation(implicitlocation:zio.test.SourceLocation):zio.test.Arrow[A,B]", "kind" : "def"}, {"label" : "withCode", "tail" : "(code: String): Arrow[A, B]", "member" : "zio.test.Arrow.withCode", "link" : "zio\/test\/Arrow.html#withCode(code:String):zio.test.Arrow[A,B]", "kind" : "def"}, {"label" : "span", "tail" : "(span: (Int, Int)): Arrow[A, B]", "member" : "zio.test.Arrow.span", "link" : "zio\/test\/Arrow.html#span(span:(Int,Int)):zio.test.Arrow[A,B]", "kind" : "def"}, {"label" : "meta", "tail" : "(span: Option[Span], parentSpan: Option[Span], code: Option[String], location: Option[String]): Arrow[A, B]", "member" : "zio.test.Arrow.meta", "link" : "zio\/test\/Arrow.html#meta(span:Option[zio.test.Arrow.Span],parentSpan:Option[zio.test.Arrow.Span],code:Option[String],location:Option[String]):zio.test.Arrow[A,B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Arrow.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Arrow.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Arrow.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Arrow.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Arrow.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Arrow.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Arrow.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Arrow.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Arrow.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Arrow.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Arrow.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Arrow.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Arrow.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Arrow.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Arrow.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Arrow.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Arrow.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Arrow.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Arrow.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.Assert", "shortDescription" : "", "object" : "zio\/test\/Assert$.html", "members_object" : [{"label" : "traceM2TestResult", "tail" : "(zio: ZIO[R, E, Assert]): ZIO[R, E, TestResult]", "member" : "zio.test.Assert.traceM2TestResult", "link" : "zio\/test\/Assert$.html#traceM2TestResult[R,E](zio:zio.ZIO[R,E,zio.test.Assert]):zio.ZIO[R,E,zio.test.TestResult]", "kind" : "implicit def"}, {"label" : "trace2TestResult", "tail" : "(assert: Assert): TestResult", "member" : "zio.test.Assert.trace2TestResult", "link" : "zio\/test\/Assert$.html#trace2TestResult(assert:zio.test.Assert):zio.test.TestResult", "kind" : "implicit def"}, {"label" : "any", "tail" : "(asserts: Assert*): Assert", "member" : "zio.test.Assert.any", "link" : "zio\/test\/Assert$.html#any(asserts:zio.test.Assert*):zio.test.Assert", "kind" : "def"}, {"label" : "all", "tail" : "(asserts: Assert*): Assert", "member" : "zio.test.Assert.all", "link" : "zio\/test\/Assert$.html#all(asserts:zio.test.Assert*):zio.test.Assert", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Assert$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Assert$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Assert$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Assert$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Assert$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Assert$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Assert$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Assert$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Assert$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Assert$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Assert$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Assert$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Assert$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Assert$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Assert$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Assert$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Assert$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Assert$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Assert$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "unary_!", "tail" : "(): Assert", "member" : "zio.test.Assert.unary_!", "link" : "zio\/test\/Assert.html#unary_!:zio.test.Assert", "kind" : "def"}, {"label" : "||", "tail" : "(that: Assert): Assert", "member" : "zio.test.Assert.||", "link" : "zio\/test\/Assert.html#||(that:zio.test.Assert):zio.test.Assert", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Assert): Assert", "member" : "zio.test.Assert.&&", "link" : "zio\/test\/Assert.html#&&(that:zio.test.Assert):zio.test.Assert", "kind" : "def"}, {"member" : "zio.test.Assert#<init>", "error" : "unsupported entity"}, {"label" : "arrow", "tail" : ": Arrow[Any, Boolean]", "member" : "zio.test.Assert.arrow", "link" : "zio\/test\/Assert.html#arrow:zio.test.Arrow[Any,Boolean]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/Assert.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Assert.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Assert.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Assert.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Assert.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Assert.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Assert.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Assert.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Assert.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Assert.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Assert.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Assert.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Assert.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Assert.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Assert.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Assert.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Assert.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/test\/Assert.html", "kind" : "case class"}, {"name" : "zio.test.Assertion", "shortDescription" : "An Assertion[A] is capable of producing assertion results on an A.", "object" : "zio\/test\/Assertion$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "zio.test.Assertion.toString", "link" : "zio\/test\/Assertion.html#toString():String", "kind" : "def"}, {"label" : "test", "tail" : "(a: A): Boolean", "member" : "zio.test.Assertion.test", "link" : "zio\/test\/Assertion.html#test(a:A):Boolean", "kind" : "def"}, {"label" : "negate", "tail" : "(): Assertion[A]", "member" : "zio.test.Assertion.negate", "link" : "zio\/test\/Assertion.html#negate:zio.test.Assertion[A]", "kind" : "def"}, {"label" : "label", "tail" : "(string: String): Assertion[A]", "member" : "zio.test.Assertion.label", "link" : "zio\/test\/Assertion.html#label(string:String):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "zio.test.Assertion.hashCode", "link" : "zio\/test\/Assertion.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "zio.test.Assertion.equals", "link" : "zio\/test\/Assertion.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: AssertionM[_]): Boolean", "member" : "zio.test.Assertion.canEqual", "link" : "zio\/test\/Assertion.html#canEqual(that:zio.test.AssertionM[_]):Boolean", "kind" : "def"}, {"label" : "apply", "tail" : "(a: => A): AssertResult", "member" : "zio.test.Assertion.apply", "link" : "zio\/test\/Assertion.html#apply(a:=>A):zio.test.AssertResult", "kind" : "def"}, {"label" : "||", "tail" : "(that: => Assertion[A1]): Assertion[A1]", "member" : "zio.test.Assertion.||", "link" : "zio\/test\/Assertion.html#||[A1<:A](that:=>zio.test.Assertion[A1]):zio.test.Assertion[A1]", "kind" : "def"}, {"label" : "??", "tail" : "(string: String): Assertion[A]", "member" : "zio.test.Assertion.??", "link" : "zio\/test\/Assertion.html#??(string:String):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: => Assertion[A1]): Assertion[A1]", "member" : "zio.test.Assertion.&&", "link" : "zio\/test\/Assertion.html#&&[A1<:A](that:=>zio.test.Assertion[A1]):zio.test.Assertion[A1]", "kind" : "def"}, {"label" : "runM", "tail" : "(): (=> A) => AssertResultM", "member" : "zio.test.Assertion.runM", "link" : "zio\/test\/Assertion.html#runM:(=>A)=>zio.test.AssertResultM", "kind" : "def"}, {"label" : "run", "tail" : ": (=> A) => AssertResult", "member" : "zio.test.Assertion.run", "link" : "zio\/test\/Assertion.html#run:(=>A)=>zio.test.AssertResult", "kind" : "val"}, {"label" : "render", "tail" : ": Render", "member" : "zio.test.Assertion.render", "link" : "zio\/test\/Assertion.html#render:zio.test.Assertion.Render", "kind" : "val"}, {"label" : "andThen", "tail" : "(g: (AssertResult) => A): (=> A) => A", "member" : "scala.Function1.andThen", "link" : "zio\/test\/Assertion.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => => A): (A) => AssertResult", "member" : "scala.Function1.compose", "link" : "zio\/test\/Assertion.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "||", "tail" : "(that: => AssertionM[A1]): AssertionM[A1]", "member" : "zio.test.AssertionM.||", "link" : "zio\/test\/Assertion.html#||[A1<:A](that:=>zio.test.AssertionM[A1]):zio.test.AssertionM[A1]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: => AssertionM[A1]): AssertionM[A1]", "member" : "zio.test.AssertionM.&&", "link" : "zio\/test\/Assertion.html#&&[A1<:A](that:=>zio.test.AssertionM[A1]):zio.test.AssertionM[A1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Assertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Assertion.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Assertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Assertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Assertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Assertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Assertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Assertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Assertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Assertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Assertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Assertion.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Assertion.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Assertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Assertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Assertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "throwsA", "tail" : "(arg0: ClassTag[E]): Assertion[Any]", "member" : "zio.test.Assertion.throwsA", "link" : "zio\/test\/Assertion$.html#throwsA[E](implicitevidence$2:scala.reflect.ClassTag[E]):zio.test.Assertion[Any]", "kind" : "def"}, {"label" : "throws", "tail" : "(assertion: Assertion[Throwable]): Assertion[A]", "member" : "zio.test.Assertion.throws", "link" : "zio\/test\/Assertion$.html#throws[A](assertion:zio.test.Assertion[Throwable]):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "succeeds", "tail" : "(assertion: Assertion[A]): Assertion[Exit[Any, A]]", "member" : "zio.test.Assertion.succeeds", "link" : "zio\/test\/Assertion$.html#succeeds[A](assertion:zio.test.Assertion[A]):zio.test.Assertion[zio.Exit[Any,A]]", "kind" : "def"}, {"label" : "startsWithString", "tail" : "(prefix: String): Assertion[String]", "member" : "zio.test.Assertion.startsWithString", "link" : "zio\/test\/Assertion$.html#startsWithString(prefix:String):zio.test.Assertion[String]", "kind" : "def"}, {"label" : "startsWith", "tail" : "(prefix: Seq[A]): Assertion[Seq[A]]", "member" : "zio.test.Assertion.startsWith", "link" : "zio\/test\/Assertion$.html#startsWith[A](prefix:Seq[A]):zio.test.Assertion[Seq[A]]", "kind" : "def"}, {"label" : "nothing", "tail" : ": Assertion[Any]", "member" : "zio.test.Assertion.nothing", "link" : "zio\/test\/Assertion$.html#nothing:zio.test.Assertion[Any]", "kind" : "val"}, {"label" : "not", "tail" : "(assertion: Assertion[A]): Assertion[A]", "member" : "zio.test.Assertion.not", "link" : "zio\/test\/Assertion$.html#not[A](assertion:zio.test.Assertion[A]):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "nonPositive", "tail" : "(num: Numeric[A]): Assertion[A]", "member" : "zio.test.Assertion.nonPositive", "link" : "zio\/test\/Assertion$.html#nonPositive[A](implicitnum:Numeric[A]):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "nonNegative", "tail" : "(num: Numeric[A]): Assertion[A]", "member" : "zio.test.Assertion.nonNegative", "link" : "zio\/test\/Assertion$.html#nonNegative[A](implicitnum:Numeric[A]):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "matchesRegex", "tail" : "(regex: String): Assertion[String]", "member" : "zio.test.Assertion.matchesRegex", "link" : "zio\/test\/Assertion$.html#matchesRegex(regex:String):zio.test.Assertion[String]", "kind" : "def"}, {"label" : "isZero", "tail" : "(num: Numeric[A]): Assertion[A]", "member" : "zio.test.Assertion.isZero", "link" : "zio\/test\/Assertion$.html#isZero[A](implicitnum:Numeric[A]):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "isWithin", "tail" : "(min: A, max: A)(ord: Ordering[A]): Assertion[A]", "member" : "zio.test.Assertion.isWithin", "link" : "zio\/test\/Assertion$.html#isWithin[A](min:A,max:A)(implicitord:Ordering[A]):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "isUnit", "tail" : ": Assertion[Unit]", "member" : "zio.test.Assertion.isUnit", "link" : "zio\/test\/Assertion$.html#isUnit:zio.test.Assertion[Unit]", "kind" : "val"}, {"label" : "isTrue", "tail" : "(): Assertion[Boolean]", "member" : "zio.test.Assertion.isTrue", "link" : "zio\/test\/Assertion$.html#isTrue:zio.test.Assertion[Boolean]", "kind" : "def"}, {"label" : "isSuccess", "tail" : ": Assertion[Try[Any]]", "member" : "zio.test.Assertion.isSuccess", "link" : "zio\/test\/Assertion$.html#isSuccess:zio.test.Assertion[scala.util.Try[Any]]", "kind" : "val"}, {"label" : "isSuccess", "tail" : "(assertion: Assertion[A]): Assertion[Try[A]]", "member" : "zio.test.Assertion.isSuccess", "link" : "zio\/test\/Assertion$.html#isSuccess[A](assertion:zio.test.Assertion[A]):zio.test.Assertion[scala.util.Try[A]]", "kind" : "def"}, {"label" : "isSubtype", "tail" : "(assertion: Assertion[A])(C: ClassTag[A]): Assertion[Any]", "member" : "zio.test.Assertion.isSubtype", "link" : "zio\/test\/Assertion$.html#isSubtype[A](assertion:zio.test.Assertion[A])(implicitC:scala.reflect.ClassTag[A]):zio.test.Assertion[Any]", "kind" : "def"}, {"label" : "isSortedReverse", "tail" : "(ord: Ordering[A]): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.isSortedReverse", "link" : "zio\/test\/Assertion$.html#isSortedReverse[A](implicitord:Ordering[A]):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "isSorted", "tail" : "(ord: Ordering[A]): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.isSorted", "link" : "zio\/test\/Assertion$.html#isSorted[A](implicitord:Ordering[A]):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "isSome", "tail" : ": Assertion[Option[Any]]", "member" : "zio.test.Assertion.isSome", "link" : "zio\/test\/Assertion$.html#isSome:zio.test.Assertion[Option[Any]]", "kind" : "val"}, {"label" : "isSome", "tail" : "(assertion: Assertion[A]): Assertion[Option[A]]", "member" : "zio.test.Assertion.isSome", "link" : "zio\/test\/Assertion$.html#isSome[A](assertion:zio.test.Assertion[A]):zio.test.Assertion[Option[A]]", "kind" : "def"}, {"label" : "isRight", "tail" : ": Assertion[Either[Any, Any]]", "member" : "zio.test.Assertion.isRight", "link" : "zio\/test\/Assertion$.html#isRight:zio.test.Assertion[Either[Any,Any]]", "kind" : "val"}, {"label" : "isRight", "tail" : "(assertion: Assertion[A]): Assertion[Either[Any, A]]", "member" : "zio.test.Assertion.isRight", "link" : "zio\/test\/Assertion$.html#isRight[A](assertion:zio.test.Assertion[A]):zio.test.Assertion[Either[Any,A]]", "kind" : "def"}, {"label" : "isInfiniteFloat", "tail" : "(): Assertion[Float]", "member" : "zio.test.Assertion.isInfiniteFloat", "link" : "zio\/test\/Assertion$.html#isInfiniteFloat:zio.test.Assertion[Float]", "kind" : "def"}, {"label" : "isInfiniteDouble", "tail" : "(): Assertion[Double]", "member" : "zio.test.Assertion.isInfiniteDouble", "link" : "zio\/test\/Assertion$.html#isInfiniteDouble:zio.test.Assertion[Double]", "kind" : "def"}, {"label" : "isFiniteFloat", "tail" : "(): Assertion[Float]", "member" : "zio.test.Assertion.isFiniteFloat", "link" : "zio\/test\/Assertion$.html#isFiniteFloat:zio.test.Assertion[Float]", "kind" : "def"}, {"label" : "isFiniteDouble", "tail" : "(): Assertion[Double]", "member" : "zio.test.Assertion.isFiniteDouble", "link" : "zio\/test\/Assertion$.html#isFiniteDouble:zio.test.Assertion[Double]", "kind" : "def"}, {"label" : "isNegInfinityFloat", "tail" : "(): Assertion[Float]", "member" : "zio.test.Assertion.isNegInfinityFloat", "link" : "zio\/test\/Assertion$.html#isNegInfinityFloat:zio.test.Assertion[Float]", "kind" : "def"}, {"label" : "isNegInfinityDouble", "tail" : "(): Assertion[Double]", "member" : "zio.test.Assertion.isNegInfinityDouble", "link" : "zio\/test\/Assertion$.html#isNegInfinityDouble:zio.test.Assertion[Double]", "kind" : "def"}, {"label" : "isPosInfinityFloat", "tail" : "(): Assertion[Float]", "member" : "zio.test.Assertion.isPosInfinityFloat", "link" : "zio\/test\/Assertion$.html#isPosInfinityFloat:zio.test.Assertion[Float]", "kind" : "def"}, {"label" : "isPosInfinityDouble", "tail" : "(): Assertion[Double]", "member" : "zio.test.Assertion.isPosInfinityDouble", "link" : "zio\/test\/Assertion$.html#isPosInfinityDouble:zio.test.Assertion[Double]", "kind" : "def"}, {"label" : "isNaNFloat", "tail" : "(): Assertion[Float]", "member" : "zio.test.Assertion.isNaNFloat", "link" : "zio\/test\/Assertion$.html#isNaNFloat:zio.test.Assertion[Float]", "kind" : "def"}, {"label" : "isNaNDouble", "tail" : "(): Assertion[Double]", "member" : "zio.test.Assertion.isNaNDouble", "link" : "zio\/test\/Assertion$.html#isNaNDouble:zio.test.Assertion[Double]", "kind" : "def"}, {"label" : "isPositive", "tail" : "(num: Numeric[A]): Assertion[A]", "member" : "zio.test.Assertion.isPositive", "link" : "zio\/test\/Assertion$.html#isPositive[A](implicitnum:Numeric[A]):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "isOneOf", "tail" : "(values: Iterable[A]): Assertion[A]", "member" : "zio.test.Assertion.isOneOf", "link" : "zio\/test\/Assertion$.html#isOneOf[A](values:Iterable[A]):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "isNull", "tail" : ": Assertion[Any]", "member" : "zio.test.Assertion.isNull", "link" : "zio\/test\/Assertion$.html#isNull:zio.test.Assertion[Any]", "kind" : "val"}, {"label" : "isNonEmptyString", "tail" : ": Assertion[String]", "member" : "zio.test.Assertion.isNonEmptyString", "link" : "zio\/test\/Assertion$.html#isNonEmptyString:zio.test.Assertion[String]", "kind" : "val"}, {"label" : "isNonEmpty", "tail" : ": Assertion[Iterable[Any]]", "member" : "zio.test.Assertion.isNonEmpty", "link" : "zio\/test\/Assertion$.html#isNonEmpty:zio.test.Assertion[Iterable[Any]]", "kind" : "val"}, {"label" : "isNone", "tail" : ": Assertion[Option[Any]]", "member" : "zio.test.Assertion.isNone", "link" : "zio\/test\/Assertion$.html#isNone:zio.test.Assertion[Option[Any]]", "kind" : "val"}, {"label" : "isNegative", "tail" : "(num: Numeric[A]): Assertion[A]", "member" : "zio.test.Assertion.isNegative", "link" : "zio\/test\/Assertion$.html#isNegative[A](implicitnum:Numeric[A]):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "isLessThanEqualTo", "tail" : "(reference: A)(ord: Ordering[A]): Assertion[A]", "member" : "zio.test.Assertion.isLessThanEqualTo", "link" : "zio\/test\/Assertion$.html#isLessThanEqualTo[A](reference:A)(implicitord:Ordering[A]):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "isLessThan", "tail" : "(reference: A)(ord: Ordering[A]): Assertion[A]", "member" : "zio.test.Assertion.isLessThan", "link" : "zio\/test\/Assertion$.html#isLessThan[A](reference:A)(implicitord:Ordering[A]):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "isLeft", "tail" : ": Assertion[Either[Any, Any]]", "member" : "zio.test.Assertion.isLeft", "link" : "zio\/test\/Assertion$.html#isLeft:zio.test.Assertion[Either[Any,Any]]", "kind" : "val"}, {"label" : "isLeft", "tail" : "(assertion: Assertion[A]): Assertion[Either[A, Any]]", "member" : "zio.test.Assertion.isLeft", "link" : "zio\/test\/Assertion$.html#isLeft[A](assertion:zio.test.Assertion[A]):zio.test.Assertion[Either[A,Any]]", "kind" : "def"}, {"label" : "isJustInterrupted", "tail" : "(): Assertion[Exit[Any, Any]]", "member" : "zio.test.Assertion.isJustInterrupted", "link" : "zio\/test\/Assertion$.html#isJustInterrupted:zio.test.Assertion[zio.Exit[Any,Any]]", "kind" : "def"}, {"label" : "isInterrupted", "tail" : "(): Assertion[Exit[Any, Any]]", "member" : "zio.test.Assertion.isInterrupted", "link" : "zio\/test\/Assertion$.html#isInterrupted:zio.test.Assertion[zio.Exit[Any,Any]]", "kind" : "def"}, {"label" : "isGreaterThanEqualTo", "tail" : "(reference: A)(ord: Ordering[A]): Assertion[A]", "member" : "zio.test.Assertion.isGreaterThanEqualTo", "link" : "zio\/test\/Assertion$.html#isGreaterThanEqualTo[A](reference:A)(implicitord:Ordering[A]):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "isGreaterThan", "tail" : "(reference: A)(ord: Ordering[A]): Assertion[A]", "member" : "zio.test.Assertion.isGreaterThan", "link" : "zio\/test\/Assertion$.html#isGreaterThan[A](reference:A)(implicitord:Ordering[A]):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "isFailure", "tail" : ": Assertion[Try[Any]]", "member" : "zio.test.Assertion.isFailure", "link" : "zio\/test\/Assertion$.html#isFailure:zio.test.Assertion[scala.util.Try[Any]]", "kind" : "val"}, {"label" : "isFailure", "tail" : "(assertion: Assertion[Throwable]): Assertion[Try[Any]]", "member" : "zio.test.Assertion.isFailure", "link" : "zio\/test\/Assertion$.html#isFailure(assertion:zio.test.Assertion[Throwable]):zio.test.Assertion[scala.util.Try[Any]]", "kind" : "def"}, {"label" : "isFalse", "tail" : "(): Assertion[Boolean]", "member" : "zio.test.Assertion.isFalse", "link" : "zio\/test\/Assertion$.html#isFalse:zio.test.Assertion[Boolean]", "kind" : "def"}, {"label" : "isEmptyString", "tail" : ": Assertion[String]", "member" : "zio.test.Assertion.isEmptyString", "link" : "zio\/test\/Assertion$.html#isEmptyString:zio.test.Assertion[String]", "kind" : "val"}, {"label" : "isEmpty", "tail" : ": Assertion[Iterable[Any]]", "member" : "zio.test.Assertion.isEmpty", "link" : "zio\/test\/Assertion$.html#isEmpty:zio.test.Assertion[Iterable[Any]]", "kind" : "val"}, {"label" : "isDistinct", "tail" : ": Assertion[Iterable[Any]]", "member" : "zio.test.Assertion.isDistinct", "link" : "zio\/test\/Assertion$.html#isDistinct:zio.test.Assertion[Iterable[Any]]", "kind" : "val"}, {"label" : "isCase", "tail" : "(termName: String, term: (Sum) => Option[Proj], assertion: Assertion[Proj]): Assertion[Sum]", "member" : "zio.test.Assertion.isCase", "link" : "zio\/test\/Assertion$.html#isCase[Sum,Proj](termName:String,term:Sum=>Option[Proj],assertion:zio.test.Assertion[Proj]):zio.test.Assertion[Sum]", "kind" : "def"}, {"label" : "hasValues", "tail" : "(assertion: Assertion[Iterable[V]]): Assertion[Map[K, V]]", "member" : "zio.test.Assertion.hasValues", "link" : "zio\/test\/Assertion$.html#hasValues[K,V](assertion:zio.test.Assertion[Iterable[V]]):zio.test.Assertion[Map[K,V]]", "kind" : "def"}, {"label" : "hasSubset", "tail" : "(other: Iterable[A]): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.hasSubset", "link" : "zio\/test\/Assertion$.html#hasSubset[A](other:Iterable[A]):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "hasSizeString", "tail" : "(assertion: Assertion[Int]): Assertion[String]", "member" : "zio.test.Assertion.hasSizeString", "link" : "zio\/test\/Assertion$.html#hasSizeString(assertion:zio.test.Assertion[Int]):zio.test.Assertion[String]", "kind" : "def"}, {"label" : "hasSize", "tail" : "(assertion: Assertion[Int]): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.hasSize", "link" : "zio\/test\/Assertion$.html#hasSize[A](assertion:zio.test.Assertion[Int]):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "hasSameElements", "tail" : "(other: Iterable[A]): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.hasSameElements", "link" : "zio\/test\/Assertion$.html#hasSameElements[A](other:Iterable[A]):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "hasOneOf", "tail" : "(other: Iterable[A]): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.hasOneOf", "link" : "zio\/test\/Assertion$.html#hasOneOf[A](other:Iterable[A]):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "hasNoneOf", "tail" : "(other: Iterable[A]): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.hasNoneOf", "link" : "zio\/test\/Assertion$.html#hasNoneOf[A](other:Iterable[A]):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "hasLast", "tail" : "(assertion: Assertion[A]): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.hasLast", "link" : "zio\/test\/Assertion$.html#hasLast[A](assertion:zio.test.Assertion[A]):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "hasKeys", "tail" : "(assertion: Assertion[Iterable[K]]): Assertion[Map[K, V]]", "member" : "zio.test.Assertion.hasKeys", "link" : "zio\/test\/Assertion$.html#hasKeys[K,V](assertion:zio.test.Assertion[Iterable[K]]):zio.test.Assertion[Map[K,V]]", "kind" : "def"}, {"label" : "hasKey", "tail" : "(key: K): Assertion[Map[K, V]]", "member" : "zio.test.Assertion.hasKey", "link" : "zio\/test\/Assertion$.html#hasKey[K,V](key:K):zio.test.Assertion[Map[K,V]]", "kind" : "def"}, {"label" : "hasKey", "tail" : "(key: K, assertion: Assertion[V]): Assertion[Map[K, V]]", "member" : "zio.test.Assertion.hasKey", "link" : "zio\/test\/Assertion$.html#hasKey[K,V](key:K,assertion:zio.test.Assertion[V]):zio.test.Assertion[Map[K,V]]", "kind" : "def"}, {"label" : "hasIntersection", "tail" : "(other: Iterable[A])(assertion: Assertion[Iterable[A]]): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.hasIntersection", "link" : "zio\/test\/Assertion$.html#hasIntersection[A](other:Iterable[A])(assertion:zio.test.Assertion[Iterable[A]]):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "hasFirst", "tail" : "(assertion: Assertion[A]): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.hasFirst", "link" : "zio\/test\/Assertion$.html#hasFirst[A](assertion:zio.test.Assertion[A]):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "hasField", "tail" : "(name: String, proj: (A) => B, assertion: Assertion[B]): Assertion[A]", "member" : "zio.test.Assertion.hasField", "link" : "zio\/test\/Assertion$.html#hasField[A,B](name:String,proj:A=>B,assertion:zio.test.Assertion[B]):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "hasAtMostOneOf", "tail" : "(other: Iterable[A]): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.hasAtMostOneOf", "link" : "zio\/test\/Assertion$.html#hasAtMostOneOf[A](other:Iterable[A]):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "hasAtLeastOneOf", "tail" : "(other: Iterable[A]): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.hasAtLeastOneOf", "link" : "zio\/test\/Assertion$.html#hasAtLeastOneOf[A](other:Iterable[A]):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "hasAt", "tail" : "(pos: Int)(assertion: Assertion[A]): Assertion[Seq[A]]", "member" : "zio.test.Assertion.hasAt", "link" : "zio\/test\/Assertion$.html#hasAt[A](pos:Int)(assertion:zio.test.Assertion[A]):zio.test.Assertion[Seq[A]]", "kind" : "def"}, {"label" : "hasSameElementsDistinct", "tail" : "(other: Iterable[A]): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.hasSameElementsDistinct", "link" : "zio\/test\/Assertion$.html#hasSameElementsDistinct[A](other:Iterable[A]):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "forall", "tail" : "(assertion: Assertion[A]): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.forall", "link" : "zio\/test\/Assertion$.html#forall[A](assertion:zio.test.Assertion[A]):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "failsCause", "tail" : "(assertion: Assertion[Cause[E]]): Assertion[Exit[E, Any]]", "member" : "zio.test.Assertion.failsCause", "link" : "zio\/test\/Assertion$.html#failsCause[E](assertion:zio.test.Assertion[zio.Cause[E]]):zio.test.Assertion[zio.Exit[E,Any]]", "kind" : "def"}, {"label" : "fails", "tail" : "(assertion: Assertion[E]): Assertion[Exit[E, Any]]", "member" : "zio.test.Assertion.fails", "link" : "zio\/test\/Assertion$.html#fails[E](assertion:zio.test.Assertion[E]):zio.test.Assertion[zio.Exit[E,Any]]", "kind" : "def"}, {"label" : "exists", "tail" : "(assertion: Assertion[A]): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.exists", "link" : "zio\/test\/Assertion$.html#exists[A](assertion:zio.test.Assertion[A]):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "equalsIgnoreCase", "tail" : "(other: String): Assertion[String]", "member" : "zio.test.Assertion.equalsIgnoreCase", "link" : "zio\/test\/Assertion$.html#equalsIgnoreCase(other:String):zio.test.Assertion[String]", "kind" : "def"}, {"label" : "endsWithString", "tail" : "(suffix: String): Assertion[String]", "member" : "zio.test.Assertion.endsWithString", "link" : "zio\/test\/Assertion$.html#endsWithString(suffix:String):zio.test.Assertion[String]", "kind" : "def"}, {"label" : "endsWith", "tail" : "(suffix: Seq[A]): Assertion[Seq[A]]", "member" : "zio.test.Assertion.endsWith", "link" : "zio\/test\/Assertion$.html#endsWith[A](suffix:Seq[A]):zio.test.Assertion[Seq[A]]", "kind" : "def"}, {"label" : "hasThrowableCause", "tail" : "(cause: Assertion[Throwable]): Assertion[Throwable]", "member" : "zio.test.Assertion.hasThrowableCause", "link" : "zio\/test\/Assertion$.html#hasThrowableCause(cause:zio.test.Assertion[Throwable]):zio.test.Assertion[Throwable]", "kind" : "def"}, {"label" : "hasSuppressed", "tail" : "(cause: Assertion[Iterable[Throwable]]): Assertion[Throwable]", "member" : "zio.test.Assertion.hasSuppressed", "link" : "zio\/test\/Assertion$.html#hasSuppressed(cause:zio.test.Assertion[Iterable[Throwable]]):zio.test.Assertion[Throwable]", "kind" : "def"}, {"label" : "hasMessage", "tail" : "(message: Assertion[String]): Assertion[Throwable]", "member" : "zio.test.Assertion.hasMessage", "link" : "zio\/test\/Assertion$.html#hasMessage(message:zio.test.Assertion[String]):zio.test.Assertion[Throwable]", "kind" : "def"}, {"label" : "dies", "tail" : "(assertion: Assertion[Throwable]): Assertion[Exit[Any, Any]]", "member" : "zio.test.Assertion.dies", "link" : "zio\/test\/Assertion$.html#dies(assertion:zio.test.Assertion[Throwable]):zio.test.Assertion[zio.Exit[Any,Any]]", "kind" : "def"}, {"label" : "containsString", "tail" : "(element: String): Assertion[String]", "member" : "zio.test.Assertion.containsString", "link" : "zio\/test\/Assertion$.html#containsString(element:String):zio.test.Assertion[String]", "kind" : "def"}, {"label" : "containsCause", "tail" : "(cause: Cause[E]): Assertion[Cause[E]]", "member" : "zio.test.Assertion.containsCause", "link" : "zio\/test\/Assertion$.html#containsCause[E](cause:zio.Cause[E]):zio.test.Assertion[zio.Cause[E]]", "kind" : "def"}, {"label" : "contains", "tail" : "(element: A): Assertion[Iterable[A]]", "member" : "zio.test.Assertion.contains", "link" : "zio\/test\/Assertion$.html#contains[A](element:A):zio.test.Assertion[Iterable[A]]", "kind" : "def"}, {"label" : "approximatelyEquals", "tail" : "(reference: A, tolerance: A)(arg0: Numeric[A]): Assertion[A]", "member" : "zio.test.Assertion.approximatelyEquals", "link" : "zio\/test\/Assertion$.html#approximatelyEquals[A](reference:A,tolerance:A)(implicitevidence$1:Numeric[A]):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "assertionRec", "tail" : "(name: String)(params: RenderParam*)(assertion: Assertion[B])(get: (=> A) => Option[B], orElse: (AssertionData) => AssertResult): Assertion[A]", "member" : "zio.test.Assertion.assertionRec", "link" : "zio\/test\/Assertion$.html#assertionRec[A,B](name:String)(params:zio.test.AssertionM.RenderParam*)(assertion:zio.test.Assertion[B])(get:(=>A)=>Option[B],orElse:zio.test.AssertionData=>zio.test.AssertResult):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "assertionDirect", "tail" : "(name: String)(params: RenderParam*)(run: (=> A) => AssertResult): Assertion[A]", "member" : "zio.test.Assertion.assertionDirect", "link" : "zio\/test\/Assertion$.html#assertionDirect[A](name:String)(params:zio.test.AssertionM.RenderParam*)(run:(=>A)=>zio.test.AssertResult):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "assertion", "tail" : "(name: String)(params: RenderParam*)(run: (=> A) => Boolean): Assertion[A]", "member" : "zio.test.Assertion.assertion", "link" : "zio\/test\/Assertion$.html#assertion[A](name:String)(params:zio.test.AssertionM.RenderParam*)(run:(=>A)=>Boolean):zio.test.Assertion[A]", "kind" : "def"}, {"label" : "anything", "tail" : ": Assertion[Any]", "member" : "zio.test.Assertion.anything", "link" : "zio\/test\/Assertion$.html#anything:zio.test.Assertion[Any]", "kind" : "val"}, {"label" : "Render", "tail" : ": AssertionM.Render.type", "member" : "zio.test.Assertion.Render", "link" : "zio\/test\/Assertion$.html#Render:zio.test.AssertionM.Render.type", "kind" : "val"}, {"label" : "Render", "tail" : "", "member" : "zio.test.Assertion.Render", "link" : "zio\/test\/Assertion$.html#Render=zio.test.AssertionM.Render", "kind" : "type"}, {"label" : "equalTo", "tail" : "(expected: A)(eql: Eql[A, B]): Assertion[B]", "member" : "zio.test.AssertionVariants.equalTo", "link" : "zio\/test\/Assertion$.html#equalTo[A,B](expected:A)(impliciteql:zio.test.Eql[A,B]):zio.test.Assertion[B]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Assertion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Assertion$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Assertion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Assertion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Assertion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Assertion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Assertion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Assertion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Assertion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Assertion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Assertion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Assertion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Assertion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Assertion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Assertion$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Assertion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Assertion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Assertion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Assertion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/Assertion.html", "kind" : "class"}, {"name" : "zio.test.AssertionData", "shortDescription" : "", "object" : "zio\/test\/AssertionData$.html", "members_class" : [{"label" : "asSuccess", "tail" : ": AssertResult", "member" : "zio.test.AssertionData.asSuccess", "link" : "zio\/test\/AssertionData.html#asSuccess:zio.test.AssertResult", "kind" : "lazy val"}, {"label" : "asFailure", "tail" : ": AssertResult", "member" : "zio.test.AssertionData.asFailure", "link" : "zio\/test\/AssertionData.html#asFailure:zio.test.AssertResult", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/AssertionData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/AssertionData.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/AssertionData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/AssertionData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/AssertionData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/AssertionData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/AssertionData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/AssertionData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/AssertionData.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/AssertionData.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/AssertionData.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/AssertionData.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/AssertionData.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/AssertionData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/AssertionData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/AssertionData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "assertion", "tail" : ": Assertion[Value]", "member" : "zio.test.AssertionData.assertion", "link" : "zio\/test\/AssertionData.html#assertion:zio.test.Assertion[AssertionData.this.Value]", "kind" : "abstract val"}, {"label" : "value", "tail" : "(): Value", "member" : "zio.test.AssertionData.value", "link" : "zio\/test\/AssertionData.html#value:AssertionData.this.Value", "kind" : "abstract def"}, {"member" : "zio.test.AssertionData.Value", "error" : "unsupported entity"}], "members_object" : [{"label" : "apply", "tail" : "(assertion0: Assertion[A], value0: => A): AssertionData", "member" : "zio.test.AssertionData.apply", "link" : "zio\/test\/AssertionData$.html#apply[A](assertion0:zio.test.Assertion[A],value0:=>A):zio.test.AssertionData", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/AssertionData$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/AssertionData$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/AssertionData$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/AssertionData$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/AssertionData$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/AssertionData$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/AssertionData$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionData$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionData$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionData$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/AssertionData$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/AssertionData$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/AssertionData$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/AssertionData$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/AssertionData$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/AssertionData$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/AssertionData$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/AssertionData$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/AssertionData$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/AssertionData.html", "kind" : "class"}, {"name" : "zio.test.AssertionM", "shortDescription" : "An AssertionM[A] is capable of producing assertion results on an A.", "object" : "zio\/test\/AssertionM$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "zio.test.AssertionM.toString", "link" : "zio\/test\/AssertionM.html#toString():String", "kind" : "def"}, {"label" : "negate", "tail" : "(): AssertionM[A]", "member" : "zio.test.AssertionM.negate", "link" : "zio\/test\/AssertionM.html#negate:zio.test.AssertionM[A]", "kind" : "def"}, {"label" : "label", "tail" : "(string: String): AssertionM[A]", "member" : "zio.test.AssertionM.label", "link" : "zio\/test\/AssertionM.html#label(string:String):zio.test.AssertionM[A]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "zio.test.AssertionM.hashCode", "link" : "zio\/test\/AssertionM.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "zio.test.AssertionM.equals", "link" : "zio\/test\/AssertionM.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: AssertionM[_]): Boolean", "member" : "zio.test.AssertionM.canEqual", "link" : "zio\/test\/AssertionM.html#canEqual(that:zio.test.AssertionM[_]):Boolean", "kind" : "def"}, {"label" : "||", "tail" : "(that: => AssertionM[A1]): AssertionM[A1]", "member" : "zio.test.AssertionM.||", "link" : "zio\/test\/AssertionM.html#||[A1<:A](that:=>zio.test.AssertionM[A1]):zio.test.AssertionM[A1]", "kind" : "def"}, {"label" : "??", "tail" : "(string: String): AssertionM[A]", "member" : "zio.test.AssertionM.??", "link" : "zio\/test\/AssertionM.html#??(string:String):zio.test.AssertionM[A]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: => AssertionM[A1]): AssertionM[A1]", "member" : "zio.test.AssertionM.&&", "link" : "zio\/test\/AssertionM.html#&&[A1<:A](that:=>zio.test.AssertionM[A1]):zio.test.AssertionM[A1]", "kind" : "def"}, {"member" : "zio.test.AssertionM#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/AssertionM.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/AssertionM.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/AssertionM.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/AssertionM.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/AssertionM.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/AssertionM.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/AssertionM.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionM.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionM.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionM.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/AssertionM.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/AssertionM.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/AssertionM.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/AssertionM.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/AssertionM.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/AssertionM.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "runM", "tail" : "(): (=> A) => AssertResultM", "member" : "zio.test.AssertionM.runM", "link" : "zio\/test\/AssertionM.html#runM:(=>A)=>zio.test.AssertResultM", "kind" : "abstract def"}, {"label" : "render", "tail" : "(): Render", "member" : "zio.test.AssertionM.render", "link" : "zio\/test\/AssertionM.html#render:zio.test.AssertionM.Render", "kind" : "abstract def"}], "members_object" : [{"label" : "not", "tail" : "(assertion: AssertionM[A]): AssertionM[A]", "member" : "zio.test.AssertionM.not", "link" : "zio\/test\/AssertionM$.html#not[A](assertion:zio.test.AssertionM[A]):zio.test.AssertionM[A]", "kind" : "def"}, {"label" : "assertionRecM", "tail" : "(name: String)(params: RenderParam*)(assertion: AssertionM[B])(get: (=> A) => ZIO[Any, Nothing, Option[B]], orElse: (AssertionMData) => AssertResultM): AssertionM[A]", "member" : "zio.test.AssertionM.assertionRecM", "link" : "zio\/test\/AssertionM$.html#assertionRecM[R,E,A,B](name:String)(params:zio.test.AssertionM.RenderParam*)(assertion:zio.test.AssertionM[B])(get:(=>A)=>zio.ZIO[Any,Nothing,Option[B]],orElse:zio.test.AssertionMData=>zio.test.AssertResultM):zio.test.AssertionM[A]", "kind" : "def"}, {"label" : "assertionDirect", "tail" : "(name: String)(params: RenderParam*)(run: (=> A) => AssertResultM): AssertionM[A]", "member" : "zio.test.AssertionM.assertionDirect", "link" : "zio\/test\/AssertionM$.html#assertionDirect[A](name:String)(params:zio.test.AssertionM.RenderParam*)(run:(=>A)=>zio.test.AssertResultM):zio.test.AssertionM[A]", "kind" : "def"}, {"label" : "assertionM", "tail" : "(name: String)(params: RenderParam*)(run: (=> A) => UIO[Boolean]): AssertionM[A]", "member" : "zio.test.AssertionM.assertionM", "link" : "zio\/test\/AssertionM$.html#assertionM[R,E,A](name:String)(params:zio.test.AssertionM.RenderParam*)(run:(=>A)=>zio.UIO[Boolean]):zio.test.AssertionM[A]", "kind" : "def"}, {"label" : "RenderParam", "tail" : "", "member" : "zio.test.AssertionM.RenderParam", "link" : "zio\/test\/AssertionM$.html#RenderParam", "kind" : "object"}, {"label" : "RenderParam", "tail" : "", "member" : "zio.test.AssertionM.RenderParam", "link" : "zio\/test\/AssertionM$.html#RenderParamextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "Render", "tail" : "", "member" : "zio.test.AssertionM.Render", "link" : "zio\/test\/AssertionM$.html#Render", "kind" : "object"}, {"label" : "Render", "tail" : "", "member" : "zio.test.AssertionM.Render", "link" : "zio\/test\/AssertionM$.html#RenderextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "apply", "tail" : "(_render: Render, _runM: (=> A) => AssertResultM): AssertionM[A]", "member" : "zio.test.AssertionM.apply", "link" : "zio\/test\/AssertionM$.html#apply[A](_render:zio.test.AssertionM.Render,_runM:(=>A)=>zio.test.AssertResultM):zio.test.AssertionM[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/AssertionM$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/AssertionM$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/AssertionM$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/AssertionM$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/AssertionM$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/AssertionM$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/AssertionM$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionM$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionM$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionM$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/AssertionM$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/AssertionM$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/AssertionM$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/AssertionM$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/AssertionM$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/AssertionM$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/AssertionM$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/AssertionM$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/AssertionM$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/AssertionM.html", "kind" : "class"}, {"name" : "zio.test.AssertionMData", "shortDescription" : "", "object" : "zio\/test\/AssertionMData$.html", "members_class" : [{"label" : "asSuccessM", "tail" : "(): AssertResultM", "member" : "zio.test.AssertionMData.asSuccessM", "link" : "zio\/test\/AssertionMData.html#asSuccessM:zio.test.AssertResultM", "kind" : "def"}, {"label" : "asFailureM", "tail" : "(): AssertResultM", "member" : "zio.test.AssertionMData.asFailureM", "link" : "zio\/test\/AssertionMData.html#asFailureM:zio.test.AssertResultM", "kind" : "def"}, {"label" : "asSuccess", "tail" : ": AssertResult", "member" : "zio.test.AssertionMData.asSuccess", "link" : "zio\/test\/AssertionMData.html#asSuccess:zio.test.AssertResult", "kind" : "lazy val"}, {"label" : "asFailure", "tail" : ": AssertResult", "member" : "zio.test.AssertionMData.asFailure", "link" : "zio\/test\/AssertionMData.html#asFailure:zio.test.AssertResult", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/AssertionMData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/AssertionMData.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/AssertionMData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/AssertionMData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/AssertionMData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/AssertionMData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/AssertionMData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionMData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionMData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionMData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/AssertionMData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/AssertionMData.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/AssertionMData.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/AssertionMData.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/AssertionMData.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/AssertionMData.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/AssertionMData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/AssertionMData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/AssertionMData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "assertion", "tail" : ": AssertionM[Value]", "member" : "zio.test.AssertionMData.assertion", "link" : "zio\/test\/AssertionMData.html#assertion:zio.test.AssertionM[AssertionMData.this.Value]", "kind" : "abstract val"}, {"label" : "value", "tail" : "(): Value", "member" : "zio.test.AssertionMData.value", "link" : "zio\/test\/AssertionMData.html#value:AssertionMData.this.Value", "kind" : "abstract def"}, {"member" : "zio.test.AssertionMData.Value", "error" : "unsupported entity"}], "members_object" : [{"label" : "apply", "tail" : "(assertion0: AssertionM[A], value0: => A): AssertionMData", "member" : "zio.test.AssertionMData.apply", "link" : "zio\/test\/AssertionMData$.html#apply[A](assertion0:zio.test.AssertionM[A],value0:=>A):zio.test.AssertionMData", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/AssertionMData$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/AssertionMData$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/AssertionMData$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/AssertionMData$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/AssertionMData$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/AssertionMData$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/AssertionMData$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionMData$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionMData$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionMData$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/AssertionMData$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/AssertionMData$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/AssertionMData$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/AssertionMData$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/AssertionMData$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/AssertionMData$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/AssertionMData$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/AssertionMData$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/AssertionMData$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/AssertionMData.html", "kind" : "class"}, {"name" : "zio.test.AssertionResult", "object" : "zio\/test\/AssertionResult$.html", "members_object" : [{"label" : "TraceResult", "tail" : "", "member" : "zio.test.AssertionResult.TraceResult", "link" : "zio\/test\/AssertionResult$.html#TraceResultextendsAssertionResultwithProductwithSerializable", "kind" : "case class"}, {"label" : "FailureDetailsResult", "tail" : "", "member" : "zio.test.AssertionResult.FailureDetailsResult", "link" : "zio\/test\/AssertionResult$.html#FailureDetailsResultextendsAssertionResultwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/AssertionResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/AssertionResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/AssertionResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/AssertionResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/AssertionResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/AssertionResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/AssertionResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/AssertionResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/AssertionResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/AssertionResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/AssertionResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/AssertionResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/AssertionResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/AssertionResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/AssertionResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/AssertionResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/AssertionResult.html", "kind" : "trait", "members_trait" : [{"label" : "setGenFailureDetails", "tail" : "(details: GenFailureDetails): AssertionResult", "member" : "zio.test.AssertionResult.setGenFailureDetails", "link" : "zio\/test\/AssertionResult.html#setGenFailureDetails(details:zio.test.GenFailureDetails):zio.test.AssertionResult", "kind" : "def"}, {"label" : "label", "tail" : "(label: String): AssertionResult", "member" : "zio.test.AssertionResult.label", "link" : "zio\/test\/AssertionResult.html#label(label:String):zio.test.AssertionResult", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/AssertionResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/AssertionResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/AssertionResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/AssertionResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/AssertionResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/AssertionResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/AssertionResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/AssertionResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/AssertionResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/AssertionResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/AssertionResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/AssertionResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/AssertionResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/AssertionResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/AssertionResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/AssertionResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "genFailureDetails", "tail" : "(): Option[GenFailureDetails]", "member" : "zio.test.AssertionResult.genFailureDetails", "link" : "zio\/test\/AssertionResult.html#genFailureDetails:Option[zio.test.GenFailureDetails]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.test.AssertionValue", "shortDescription" : "An AssertionValue keeps track of a assertion and a value, existentiallyhiding the type.", "object" : "zio\/test\/AssertionValue$.html", "members_class" : [{"label" : "withContext", "tail" : "(expr: Option[String], sourceLocation: Option[String]): AssertionValue", "member" : "zio.test.AssertionValue.withContext", "link" : "zio\/test\/AssertionValue.html#withContext(expr:Option[String],sourceLocation:Option[String]):zio.test.AssertionValue", "kind" : "def"}, {"label" : "negate", "tail" : "(): AssertionValue", "member" : "zio.test.AssertionValue.negate", "link" : "zio\/test\/AssertionValue.html#negate:zio.test.AssertionValue", "kind" : "def"}, {"label" : "sameAssertion", "tail" : "(that: AssertionValue): Boolean", "member" : "zio.test.AssertionValue.sameAssertion", "link" : "zio\/test\/AssertionValue.html#sameAssertion(that:zio.test.AssertionValue):Boolean", "kind" : "def"}, {"label" : "label", "tail" : "(string: String): AssertionValue", "member" : "zio.test.AssertionValue.label", "link" : "zio\/test\/AssertionValue.html#label(string:String):zio.test.AssertionValue", "kind" : "def"}, {"label" : "printAssertion", "tail" : "(): String", "member" : "zio.test.AssertionValue.printAssertion", "link" : "zio\/test\/AssertionValue.html#printAssertion:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/AssertionValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/AssertionValue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/AssertionValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/AssertionValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/AssertionValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/AssertionValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/AssertionValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/AssertionValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/AssertionValue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/AssertionValue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/AssertionValue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/AssertionValue.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/AssertionValue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/AssertionValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/AssertionValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/AssertionValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "result", "tail" : "(): AssertResult", "member" : "zio.test.AssertionValue.result", "link" : "zio\/test\/AssertionValue.html#result:zio.test.AssertResult", "kind" : "abstract def"}, {"label" : "assertion", "tail" : "(): AssertionM[Value]", "member" : "zio.test.AssertionValue.assertion", "link" : "zio\/test\/AssertionValue.html#assertion:zio.test.AssertionM[AssertionValue.this.Value]", "kind" : "abstract def"}, {"label" : "sourceLocation", "tail" : "(): Option[String]", "member" : "zio.test.AssertionValue.sourceLocation", "link" : "zio\/test\/AssertionValue.html#sourceLocation:Option[String]", "kind" : "abstract def"}, {"label" : "expression", "tail" : "(): Option[String]", "member" : "zio.test.AssertionValue.expression", "link" : "zio\/test\/AssertionValue.html#expression:Option[String]", "kind" : "abstract def"}, {"label" : "value", "tail" : "(): Value", "member" : "zio.test.AssertionValue.value", "link" : "zio\/test\/AssertionValue.html#value:AssertionValue.this.Value", "kind" : "abstract def"}, {"member" : "zio.test.AssertionValue.Value", "error" : "unsupported entity"}], "members_object" : [{"label" : "apply", "tail" : "(assertion: AssertionM[A], value: => A, result: => AssertResult, expression: Option[String], sourceLocation: Option[String]): AssertionValue", "member" : "zio.test.AssertionValue.apply", "link" : "zio\/test\/AssertionValue$.html#apply[A](assertion:zio.test.AssertionM[A],value:=>A,result:=>zio.test.AssertResult,expression:Option[String],sourceLocation:Option[String]):zio.test.AssertionValue", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/AssertionValue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/AssertionValue$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/AssertionValue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/AssertionValue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/AssertionValue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/AssertionValue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/AssertionValue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionValue$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionValue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionValue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/AssertionValue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/AssertionValue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/AssertionValue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/AssertionValue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/AssertionValue$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/AssertionValue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/AssertionValue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/AssertionValue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/AssertionValue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/AssertionValue.html", "kind" : "class"}, {"name" : "zio.test.AssertionVariants", "trait" : "zio\/test\/AssertionVariants.html", "kind" : "trait", "members_trait" : [{"label" : "equalTo", "tail" : "(expected: A)(eql: Eql[A, B]): Assertion[B]", "member" : "zio.test.AssertionVariants.equalTo", "link" : "zio\/test\/AssertionVariants.html#equalTo[A,B](expected:A)(impliciteql:zio.test.Eql[A,B]):zio.test.Assertion[B]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/AssertionVariants.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/AssertionVariants.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/AssertionVariants.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/AssertionVariants.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/AssertionVariants.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/AssertionVariants.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/AssertionVariants.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionVariants.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionVariants.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/AssertionVariants.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/AssertionVariants.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/AssertionVariants.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/AssertionVariants.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/AssertionVariants.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/AssertionVariants.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/AssertionVariants.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/AssertionVariants.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/AssertionVariants.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/AssertionVariants.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.BoolAlgebra", "shortDescription" : "A BoolAlgebra[A] is a description of logical operations on values of typeA.", "object" : "zio\/test\/BoolAlgebra$.html", "members_class" : [{"label" : "negate", "tail" : "(): BoolAlgebra[A]", "member" : "zio.test.BoolAlgebra.negate", "link" : "zio\/test\/BoolAlgebra.html#negate:zio.test.BoolAlgebra[A]", "kind" : "final def"}, {"label" : "mapZIO", "tail" : "(f: (A) => ZIO[R, E, B]): ZIO[R, E, BoolAlgebra[B]]", "member" : "zio.test.BoolAlgebra.mapZIO", "link" : "zio\/test\/BoolAlgebra.html#mapZIO[R,E,B](f:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,zio.test.BoolAlgebra[B]]", "kind" : "final def"}, {"label" : "mapM", "tail" : "(f: (A) => ZIO[R, E, B]): ZIO[R, E, BoolAlgebra[B]]", "member" : "zio.test.BoolAlgebra.mapM", "link" : "zio\/test\/BoolAlgebra.html#mapM[R,E,B](f:A=>zio.ZIO[R,E,B]):zio.ZIO[R,E,zio.test.BoolAlgebra[B]]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): BoolAlgebra[B]", "member" : "zio.test.BoolAlgebra.map", "link" : "zio\/test\/BoolAlgebra.html#map[B](f:A=>B):zio.test.BoolAlgebra[B]", "kind" : "final def"}, {"label" : "isSuccess", "tail" : "(): Boolean", "member" : "zio.test.BoolAlgebra.isSuccess", "link" : "zio\/test\/BoolAlgebra.html#isSuccess:Boolean", "kind" : "final def"}, {"label" : "isFailure", "tail" : "(): Boolean", "member" : "zio.test.BoolAlgebra.isFailure", "link" : "zio\/test\/BoolAlgebra.html#isFailure:Boolean", "kind" : "final def"}, {"label" : "iff", "tail" : "(that: BoolAlgebra[A1]): BoolAlgebra[A1]", "member" : "zio.test.BoolAlgebra.iff", "link" : "zio\/test\/BoolAlgebra.html#iff[A1>:A](that:zio.test.BoolAlgebra[A1]):zio.test.BoolAlgebra[A1]", "kind" : "final def"}, {"label" : "implies", "tail" : "(that: BoolAlgebra[A1]): BoolAlgebra[A1]", "member" : "zio.test.BoolAlgebra.implies", "link" : "zio\/test\/BoolAlgebra.html#implies[A1>:A](that:zio.test.BoolAlgebra[A1]):zio.test.BoolAlgebra[A1]", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "zio.test.BoolAlgebra.hashCode", "link" : "zio\/test\/BoolAlgebra.html#hashCode():Int", "kind" : "final def"}, {"label" : "fold", "tail" : "(caseValue: (A) => B)(caseAnd: (B, B) => B, caseOr: (B, B) => B, caseNot: (B) => B): B", "member" : "zio.test.BoolAlgebra.fold", "link" : "zio\/test\/BoolAlgebra.html#fold[B](caseValue:A=>B)(caseAnd:(B,B)=>B,caseOr:(B,B)=>B,caseNot:B=>B):B", "kind" : "final def"}, {"label" : "flatMapZIO", "tail" : "(f: (A) => ZIO[R, E, BoolAlgebra[B]]): ZIO[R, E, BoolAlgebra[B]]", "member" : "zio.test.BoolAlgebra.flatMapZIO", "link" : "zio\/test\/BoolAlgebra.html#flatMapZIO[R,E,B](f:A=>zio.ZIO[R,E,zio.test.BoolAlgebra[B]]):zio.ZIO[R,E,zio.test.BoolAlgebra[B]]", "kind" : "final def"}, {"label" : "flatMapM", "tail" : "(f: (A) => ZIO[R, E, BoolAlgebra[B]]): ZIO[R, E, BoolAlgebra[B]]", "member" : "zio.test.BoolAlgebra.flatMapM", "link" : "zio\/test\/BoolAlgebra.html#flatMapM[R,E,B](f:A=>zio.ZIO[R,E,zio.test.BoolAlgebra[B]]):zio.ZIO[R,E,zio.test.BoolAlgebra[B]]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => BoolAlgebra[B]): BoolAlgebra[B]", "member" : "zio.test.BoolAlgebra.flatMap", "link" : "zio\/test\/BoolAlgebra.html#flatMap[B](f:A=>zio.test.BoolAlgebra[B]):zio.test.BoolAlgebra[B]", "kind" : "final def"}, {"label" : "failures", "tail" : "(): Option[BoolAlgebra[A]]", "member" : "zio.test.BoolAlgebra.failures", "link" : "zio\/test\/BoolAlgebra.html#failures:Option[zio.test.BoolAlgebra[A]]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: BoolAlgebra[A1]): BoolAlgebra[A1]", "member" : "zio.test.BoolAlgebra.either", "link" : "zio\/test\/BoolAlgebra.html#either[A1>:A](that:zio.test.BoolAlgebra[A1]):zio.test.BoolAlgebra[A1]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: BoolAlgebra[A1]): BoolAlgebra[A1]", "member" : "zio.test.BoolAlgebra.both", "link" : "zio\/test\/BoolAlgebra.html#both[A1>:A](that:zio.test.BoolAlgebra[A1]):zio.test.BoolAlgebra[A1]", "kind" : "final def"}, {"label" : "as", "tail" : "(b: B): BoolAlgebra[B]", "member" : "zio.test.BoolAlgebra.as", "link" : "zio\/test\/BoolAlgebra.html#as[B](b:B):zio.test.BoolAlgebra[B]", "kind" : "final def"}, {"label" : "unary_!", "tail" : "(): BoolAlgebra[A]", "member" : "zio.test.BoolAlgebra.unary_!", "link" : "zio\/test\/BoolAlgebra.html#unary_!:zio.test.BoolAlgebra[A]", "kind" : "final def"}, {"label" : "<==>", "tail" : "(that: BoolAlgebra[A1]): BoolAlgebra[A1]", "member" : "zio.test.BoolAlgebra.<==>", "link" : "zio\/test\/BoolAlgebra.html#<==>[A1>:A](that:zio.test.BoolAlgebra[A1]):zio.test.BoolAlgebra[A1]", "kind" : "final def"}, {"label" : "==>", "tail" : "(that: BoolAlgebra[A1]): BoolAlgebra[A1]", "member" : "zio.test.BoolAlgebra.==>", "link" : "zio\/test\/BoolAlgebra.html#==>[A1>:A](that:zio.test.BoolAlgebra[A1]):zio.test.BoolAlgebra[A1]", "kind" : "final def"}, {"label" : "||", "tail" : "(that: BoolAlgebra[A1]): BoolAlgebra[A1]", "member" : "zio.test.BoolAlgebra.||", "link" : "zio\/test\/BoolAlgebra.html#||[A1>:A](that:zio.test.BoolAlgebra[A1]):zio.test.BoolAlgebra[A1]", "kind" : "final def"}, {"label" : "&&", "tail" : "(that: BoolAlgebra[A1]): BoolAlgebra[A1]", "member" : "zio.test.BoolAlgebra.&&", "link" : "zio\/test\/BoolAlgebra.html#&&[A1>:A](that:zio.test.BoolAlgebra[A1]):zio.test.BoolAlgebra[A1]", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/BoolAlgebra.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "zio\/test\/BoolAlgebra.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "zio\/test\/BoolAlgebra.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "zio\/test\/BoolAlgebra.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/BoolAlgebra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/BoolAlgebra.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/BoolAlgebra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/BoolAlgebra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/BoolAlgebra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/BoolAlgebra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/BoolAlgebra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/BoolAlgebra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/BoolAlgebra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/BoolAlgebra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/BoolAlgebra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/BoolAlgebra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/BoolAlgebra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/BoolAlgebra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/BoolAlgebra.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/BoolAlgebra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/BoolAlgebra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/BoolAlgebra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "zio\/test\/BoolAlgebra.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "zio\/test\/BoolAlgebra.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "zio\/test\/BoolAlgebra.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "unit", "tail" : ": BoolAlgebra[Unit]", "member" : "zio.test.BoolAlgebra.unit", "link" : "zio\/test\/BoolAlgebra$.html#unit:zio.test.BoolAlgebra[Unit]", "kind" : "final val"}, {"label" : "success", "tail" : "(a: A): BoolAlgebra[A]", "member" : "zio.test.BoolAlgebra.success", "link" : "zio\/test\/BoolAlgebra$.html#success[A](a:A):zio.test.BoolAlgebra[A]", "kind" : "def"}, {"label" : "or", "tail" : "(left: BoolAlgebra[A], right: BoolAlgebra[A]): BoolAlgebra[A]", "member" : "zio.test.BoolAlgebra.or", "link" : "zio\/test\/BoolAlgebra$.html#or[A](left:zio.test.BoolAlgebra[A],right:zio.test.BoolAlgebra[A]):zio.test.BoolAlgebra[A]", "kind" : "def"}, {"label" : "not", "tail" : "(result: BoolAlgebra[A]): BoolAlgebra[A]", "member" : "zio.test.BoolAlgebra.not", "link" : "zio\/test\/BoolAlgebra$.html#not[A](result:zio.test.BoolAlgebra[A]):zio.test.BoolAlgebra[A]", "kind" : "def"}, {"label" : "foreach", "tail" : "(as: Iterable[A])(f: (A) => BoolAlgebra[B]): Option[BoolAlgebra[B]]", "member" : "zio.test.BoolAlgebra.foreach", "link" : "zio\/test\/BoolAlgebra$.html#foreach[A,B](as:Iterable[A])(f:A=>zio.test.BoolAlgebra[B]):Option[zio.test.BoolAlgebra[B]]", "kind" : "def"}, {"label" : "failure", "tail" : "(a: A): BoolAlgebra[A]", "member" : "zio.test.BoolAlgebra.failure", "link" : "zio\/test\/BoolAlgebra$.html#failure[A](a:A):zio.test.BoolAlgebra[A]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(as: Iterable[BoolAlgebra[A]]): Option[BoolAlgebra[A]]", "member" : "zio.test.BoolAlgebra.collectAll", "link" : "zio\/test\/BoolAlgebra$.html#collectAll[A](as:Iterable[zio.test.BoolAlgebra[A]]):Option[zio.test.BoolAlgebra[A]]", "kind" : "def"}, {"label" : "any", "tail" : "(a: BoolAlgebra[A], as: BoolAlgebra[A]*): BoolAlgebra[A]", "member" : "zio.test.BoolAlgebra.any", "link" : "zio\/test\/BoolAlgebra$.html#any[A](a:zio.test.BoolAlgebra[A],as:zio.test.BoolAlgebra[A]*):zio.test.BoolAlgebra[A]", "kind" : "def"}, {"label" : "any", "tail" : "(as: Iterable[BoolAlgebra[A]]): Option[BoolAlgebra[A]]", "member" : "zio.test.BoolAlgebra.any", "link" : "zio\/test\/BoolAlgebra$.html#any[A](as:Iterable[zio.test.BoolAlgebra[A]]):Option[zio.test.BoolAlgebra[A]]", "kind" : "def"}, {"label" : "and", "tail" : "(left: BoolAlgebra[A], right: BoolAlgebra[A]): BoolAlgebra[A]", "member" : "zio.test.BoolAlgebra.and", "link" : "zio\/test\/BoolAlgebra$.html#and[A](left:zio.test.BoolAlgebra[A],right:zio.test.BoolAlgebra[A]):zio.test.BoolAlgebra[A]", "kind" : "def"}, {"label" : "all", "tail" : "(a: BoolAlgebra[A], as: BoolAlgebra[A]*): BoolAlgebra[A]", "member" : "zio.test.BoolAlgebra.all", "link" : "zio\/test\/BoolAlgebra$.html#all[A](a:zio.test.BoolAlgebra[A],as:zio.test.BoolAlgebra[A]*):zio.test.BoolAlgebra[A]", "kind" : "def"}, {"label" : "all", "tail" : "(as: Iterable[BoolAlgebra[A]]): Option[BoolAlgebra[A]]", "member" : "zio.test.BoolAlgebra.all", "link" : "zio\/test\/BoolAlgebra$.html#all[A](as:Iterable[zio.test.BoolAlgebra[A]]):Option[zio.test.BoolAlgebra[A]]", "kind" : "def"}, {"label" : "Not", "tail" : "", "member" : "zio.test.BoolAlgebra.Not", "link" : "zio\/test\/BoolAlgebra$.html#Not[+A]extendsBoolAlgebra[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Or", "tail" : "", "member" : "zio.test.BoolAlgebra.Or", "link" : "zio\/test\/BoolAlgebra$.html#Or[+A]extendsBoolAlgebra[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "And", "tail" : "", "member" : "zio.test.BoolAlgebra.And", "link" : "zio\/test\/BoolAlgebra$.html#And[+A]extendsBoolAlgebra[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Value", "tail" : "", "member" : "zio.test.BoolAlgebra.Value", "link" : "zio\/test\/BoolAlgebra$.html#Value[+A]extendsBoolAlgebra[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/BoolAlgebra$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/BoolAlgebra$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/BoolAlgebra$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/BoolAlgebra$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/BoolAlgebra$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/BoolAlgebra$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/BoolAlgebra$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/BoolAlgebra$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/BoolAlgebra$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/BoolAlgebra$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/BoolAlgebra$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/BoolAlgebra$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/BoolAlgebra$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/BoolAlgebra$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/BoolAlgebra$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/BoolAlgebra$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/BoolAlgebra$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/BoolAlgebra$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/BoolAlgebra$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/BoolAlgebra.html", "kind" : "class"}, {"name" : "zio.test.BoolAlgebraM", "shortDescription" : "", "object" : "zio\/test\/BoolAlgebraM$.html", "members_object" : [{"label" : "success", "tail" : "(a: A): BoolAlgebraM[Any, Nothing, A]", "member" : "zio.test.BoolAlgebraM.success", "link" : "zio\/test\/BoolAlgebraM$.html#success[A](a:A):zio.test.BoolAlgebraM[Any,Nothing,A]", "kind" : "def"}, {"label" : "fromZIO", "tail" : "(effect: ZIO[R, E, A]): BoolAlgebraM[R, E, A]", "member" : "zio.test.BoolAlgebraM.fromZIO", "link" : "zio\/test\/BoolAlgebraM$.html#fromZIO[R,E,A](effect:zio.ZIO[R,E,A]):zio.test.BoolAlgebraM[R,E,A]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(effect: ZIO[R, E, A]): BoolAlgebraM[R, E, A]", "member" : "zio.test.BoolAlgebraM.fromEffect", "link" : "zio\/test\/BoolAlgebraM$.html#fromEffect[R,E,A](effect:zio.ZIO[R,E,A]):zio.test.BoolAlgebraM[R,E,A]", "kind" : "def"}, {"label" : "failure", "tail" : "(a: A): BoolAlgebraM[Any, Nothing, A]", "member" : "zio.test.BoolAlgebraM.failure", "link" : "zio\/test\/BoolAlgebraM$.html#failure[A](a:A):zio.test.BoolAlgebraM[Any,Nothing,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/BoolAlgebraM$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/BoolAlgebraM$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/BoolAlgebraM$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/BoolAlgebraM$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/BoolAlgebraM$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/BoolAlgebraM$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/BoolAlgebraM$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/BoolAlgebraM$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/BoolAlgebraM$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/BoolAlgebraM$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/BoolAlgebraM$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/BoolAlgebraM$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/BoolAlgebraM$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/BoolAlgebraM$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/BoolAlgebraM$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/BoolAlgebraM$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/BoolAlgebraM$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/BoolAlgebraM$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/BoolAlgebraM$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "map", "tail" : "(f: (A) => B): BoolAlgebraM[R, E, B]", "member" : "zio.test.BoolAlgebraM.map", "link" : "zio\/test\/BoolAlgebraM.html#map[B](f:A=>B):zio.test.BoolAlgebraM[R,E,B]", "kind" : "def"}, {"label" : "isSuccess", "tail" : "(): ZIO[R, E, Boolean]", "member" : "zio.test.BoolAlgebraM.isSuccess", "link" : "zio\/test\/BoolAlgebraM.html#isSuccess:zio.ZIO[R,E,Boolean]", "kind" : "def"}, {"label" : "implies", "tail" : "(that: BoolAlgebraM[R1, E1, A1]): BoolAlgebraM[R1, E1, A1]", "member" : "zio.test.BoolAlgebraM.implies", "link" : "zio\/test\/BoolAlgebraM.html#implies[R1<:R,E1>:E,A1>:A](that:zio.test.BoolAlgebraM[R1,E1,A1]):zio.test.BoolAlgebraM[R1,E1,A1]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => BoolAlgebraM[R1, E1, B]): BoolAlgebraM[R1, E1, B]", "member" : "zio.test.BoolAlgebraM.flatMap", "link" : "zio\/test\/BoolAlgebraM.html#flatMap[R1<:R,E1>:E,B](f:A=>zio.test.BoolAlgebraM[R1,E1,B]):zio.test.BoolAlgebraM[R1,E1,B]", "kind" : "def"}, {"label" : "as", "tail" : "(b: B): BoolAlgebraM[R, E, B]", "member" : "zio.test.BoolAlgebraM.as", "link" : "zio\/test\/BoolAlgebraM.html#as[B](b:B):zio.test.BoolAlgebraM[R,E,B]", "kind" : "def"}, {"label" : "unary_!", "tail" : "(): BoolAlgebraM[R, E, A]", "member" : "zio.test.BoolAlgebraM.unary_!", "link" : "zio\/test\/BoolAlgebraM.html#unary_!:zio.test.BoolAlgebraM[R,E,A]", "kind" : "def"}, {"label" : "<==>", "tail" : "(that: BoolAlgebraM[R1, E1, A1]): BoolAlgebraM[R1, E1, A1]", "member" : "zio.test.BoolAlgebraM.<==>", "link" : "zio\/test\/BoolAlgebraM.html#<==>[R1<:R,E1>:E,A1>:A](that:zio.test.BoolAlgebraM[R1,E1,A1]):zio.test.BoolAlgebraM[R1,E1,A1]", "kind" : "def"}, {"label" : "==>", "tail" : "(that: BoolAlgebraM[R1, E1, A1]): BoolAlgebraM[R1, E1, A1]", "member" : "zio.test.BoolAlgebraM.==>", "link" : "zio\/test\/BoolAlgebraM.html#==>[R1<:R,E1>:E,A1>:A](that:zio.test.BoolAlgebraM[R1,E1,A1]):zio.test.BoolAlgebraM[R1,E1,A1]", "kind" : "def"}, {"label" : "||", "tail" : "(that: BoolAlgebraM[R1, E1, A1]): BoolAlgebraM[R1, E1, A1]", "member" : "zio.test.BoolAlgebraM.||", "link" : "zio\/test\/BoolAlgebraM.html#||[R1<:R,E1>:E,A1>:A](that:zio.test.BoolAlgebraM[R1,E1,A1]):zio.test.BoolAlgebraM[R1,E1,A1]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: BoolAlgebraM[R1, E1, A1]): BoolAlgebraM[R1, E1, A1]", "member" : "zio.test.BoolAlgebraM.&&", "link" : "zio\/test\/BoolAlgebraM.html#&&[R1<:R,E1>:E,A1>:A](that:zio.test.BoolAlgebraM[R1,E1,A1]):zio.test.BoolAlgebraM[R1,E1,A1]", "kind" : "def"}, {"member" : "zio.test.BoolAlgebraM#<init>", "error" : "unsupported entity"}, {"label" : "run", "tail" : ": ZIO[R, E, BoolAlgebra[A]]", "member" : "zio.test.BoolAlgebraM.run", "link" : "zio\/test\/BoolAlgebraM.html#run:zio.ZIO[R,E,zio.test.BoolAlgebra[A]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/BoolAlgebraM.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/BoolAlgebraM.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/BoolAlgebraM.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/BoolAlgebraM.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/BoolAlgebraM.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/BoolAlgebraM.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/BoolAlgebraM.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/BoolAlgebraM.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/BoolAlgebraM.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/BoolAlgebraM.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/BoolAlgebraM.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/BoolAlgebraM.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/BoolAlgebraM.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/BoolAlgebraM.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/BoolAlgebraM.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/BoolAlgebraM.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/BoolAlgebraM.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/test\/BoolAlgebraM.html", "kind" : "case class"}, {"name" : "zio.test.CheckVariants", "shortDescription" : "", "object" : "zio\/test\/package$$CheckVariants$.html", "members_object" : [{"label" : "CheckNM", "tail" : "", "member" : "zio.test.CheckVariants.CheckNM", "link" : "zio\/test\/package$$CheckVariants$.html#CheckNMextendsAnyVal", "kind" : "final class"}, {"label" : "CheckN", "tail" : "", "member" : "zio.test.CheckVariants.CheckN", "link" : "zio\/test\/package$$CheckVariants$.html#CheckNextendsAnyVal", "kind" : "final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/package$$CheckVariants$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/package$$CheckVariants$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/package$$CheckVariants$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/package$$CheckVariants$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/package$$CheckVariants$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/package$$CheckVariants$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/package$$CheckVariants$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/package$$CheckVariants$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/package$$CheckVariants$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/package$$CheckVariants$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/package$$CheckVariants$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/package$$CheckVariants$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/package$$CheckVariants$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/package$$CheckVariants$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/package$$CheckVariants$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/package$$CheckVariants$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/package$$CheckVariants$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/package$$CheckVariants$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/package$$CheckVariants$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.CompileVariants", "object" : "zio\/test\/CompileVariants$.html", "members_object" : [{"label" : "assertMProxy", "tail" : "(effect: ZIO[R, E, A], sourceLocation: String)(assertion: AssertionM[A]): ZIO[R, E, TestResult]", "member" : "zio.test.CompileVariants.assertMProxy", "link" : "zio\/test\/CompileVariants$.html#assertMProxy[R,E,A](effect:zio.ZIO[R,E,A],sourceLocation:String)(assertion:zio.test.AssertionM[A]):zio.ZIO[R,E,zio.test.TestResult]", "kind" : "def"}, {"label" : "assertProxy", "tail" : "(value: => A, expression: String, sourceLocation: String)(assertion: Assertion[A]): TestResult", "member" : "zio.test.CompileVariants.assertProxy", "link" : "zio\/test\/CompileVariants$.html#assertProxy[A](value:=>A,expression:String,sourceLocation:String)(assertion:zio.test.Assertion[A]):zio.test.TestResult", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/CompileVariants$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/CompileVariants$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/CompileVariants$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/CompileVariants$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/CompileVariants$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/CompileVariants$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/CompileVariants$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/CompileVariants$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/CompileVariants$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/CompileVariants$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/CompileVariants$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/CompileVariants$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/CompileVariants$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/CompileVariants$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/CompileVariants$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/CompileVariants$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/CompileVariants$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/CompileVariants$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/CompileVariants$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/CompileVariants.html", "kind" : "trait", "members_trait" : [{"label" : "assertM", "tail" : "(effect: ZIO[R, E, A])(assertion: AssertionM[A]): ZIO[R, E, TestResult]", "member" : "zio.test.CompileVariants.assertM", "link" : "zio\/test\/CompileVariants.html#assertM[R,E,A](effect:zio.ZIO[R,E,A])(assertion:zio.test.AssertionM[A]):zio.ZIO[R,E,zio.test.TestResult]", "kind" : "macro def"}, {"label" : "assert", "tail" : "(expr: => A)(assertion: Assertion[A]): TestResult", "member" : "zio.test.CompileVariants.assert", "link" : "zio\/test\/CompileVariants.html#assert[A](expr:=>A)(assertion:zio.test.Assertion[A]):zio.test.TestResult", "kind" : "macro def"}, {"label" : "assertTrue", "tail" : "(expr: Boolean): Assert", "member" : "zio.test.CompileVariants.assertTrue", "link" : "zio\/test\/CompileVariants.html#assertTrue(expr:Boolean):zio.test.Assert", "kind" : "macro def"}, {"label" : "assertTrue", "tail" : "(expr: Boolean, exprs: Boolean*): Assert", "member" : "zio.test.CompileVariants.assertTrue", "link" : "zio\/test\/CompileVariants.html#assertTrue(expr:Boolean,exprs:Boolean*):zio.test.Assert", "kind" : "macro def"}, {"label" : "typeCheck", "tail" : "(code: String): UIO[Either[String, Unit]]", "member" : "zio.test.CompileVariants.typeCheck", "link" : "zio\/test\/CompileVariants.html#typeCheck(code:String):zio.UIO[Either[String,Unit]]", "kind" : "final macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/CompileVariants.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/CompileVariants.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/CompileVariants.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/CompileVariants.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/CompileVariants.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/CompileVariants.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/CompileVariants.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/CompileVariants.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/CompileVariants.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/CompileVariants.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/CompileVariants.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/CompileVariants.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/CompileVariants.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/CompileVariants.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/CompileVariants.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/CompileVariants.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/CompileVariants.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/CompileVariants.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/CompileVariants.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.DefaultMutableRunnableSpec", "shortDescription" : "Syntax for writing test like", "members_class" : [{"label" : "TestBuilder", "tail" : "", "member" : "zio.test.MutableRunnableSpec.TestBuilder", "link" : "zio\/test\/MutableRunnableSpec.html#TestBuilderextendsMutableRunnableSpec.this.SpecBuilderwithProductwithSerializable", "kind" : "sealed case class"}, {"label" : "SuiteBuilder", "tail" : "", "member" : "zio.test.MutableRunnableSpec.SuiteBuilder", "link" : "zio\/test\/MutableRunnableSpec.html#SuiteBuilderextendsMutableRunnableSpec.this.SpecBuilderwithProductwithSerializable", "kind" : "sealed case class"}, {"label" : "SpecBuilder", "tail" : "", "member" : "zio.test.MutableRunnableSpec.SpecBuilder", "link" : "zio\/test\/MutableRunnableSpec.html#SpecBuilderextendsAnyRef", "kind" : "sealed trait"}, {"member" : "zio.test.DefaultMutableRunnableSpec#<init>", "error" : "unsupported entity"}, {"label" : "runner", "tail" : "(): TestRunner[environment.TestEnvironment, Any]", "member" : "zio.test.MutableRunnableSpec.runner", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#runner:zio.test.TestRunner[zio.test.environment.TestEnvironment,Any]", "kind" : "def"}, {"label" : "aspects", "tail" : "(): List[TestAspect[Nothing, environment.TestEnvironment, Nothing, Any]]", "member" : "zio.test.MutableRunnableSpec.aspects", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#aspects:List[zio.test.TestAspect[Nothing,zio.test.environment.TestEnvironment,Nothing,Any]]", "kind" : "def"}, {"label" : "spec", "tail" : "(): ZSpec[Environment, Failure]", "member" : "zio.test.MutableRunnableSpec.spec", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#spec:zio.test.ZSpec[MutableRunnableSpec.this.Environment,MutableRunnableSpec.this.Failure]", "kind" : "final def"}, {"label" : "test", "tail" : "(label: String)(assertion: => In)(testConstructor: TestConstructor[Has[Any] with environment.TestEnvironment, In], sourceLocation: SourceLocation): TestBuilder", "member" : "zio.test.MutableRunnableSpec.test", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#test[In](label:String)(assertion:=>In)(implicittestConstructor:zio.test.TestConstructor[Rwithzio.test.environment.TestEnvironment,In],implicitsourceLocation:zio.test.SourceLocation):MutableRunnableSpec.this.TestBuilder", "kind" : "final def"}, {"label" : "suite", "tail" : "(label: String)(specs: => SpecBuilder): SuiteBuilder", "member" : "zio.test.MutableRunnableSpec.suite", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#suite(label:String)(specs:=>MutableRunnableSpec.this.SpecBuilder):MutableRunnableSpec.this.SuiteBuilder", "kind" : "final def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "zio.test.RunnableSpec.main", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#main(args:Array[String]):Unit", "kind" : "final def"}, {"label" : "Failure", "tail" : "", "member" : "zio.test.RunnableSpec.Failure", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#Failure=E", "kind" : "type"}, {"label" : "Environment", "tail" : "", "member" : "zio.test.RunnableSpec.Environment", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#Environment=R", "kind" : "type"}, {"label" : "runtimeConfig", "tail" : "(): RuntimeConfig", "member" : "zio.test.AbstractRunnableSpec.runtimeConfig", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#runtimeConfig:zio.RuntimeConfig", "kind" : "final def"}, {"label" : "run", "tail" : "(): ZIO[zio.ZEnv with Has[ZIOAppArgs], Any, Any]", "member" : "zio.test.AbstractRunnableSpec.run", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#run:zio.ZIO[zio.ZEnvwithzio.Has[zio.ZIOAppArgs],Any,Any]", "kind" : "final def"}, {"label" : "platform", "tail" : "(): RuntimeConfig", "member" : "zio.test.AbstractRunnableSpec.platform", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#platform:zio.RuntimeConfig", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/DefaultMutableRunnableSpec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/DefaultMutableRunnableSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/DefaultMutableRunnableSpec.html", "kind" : "class"}, {"name" : "zio.test.DefaultRunnableSpec", "shortDescription" : "A default runnable spec that provides testable versions of all of themodules in ZIO (Clock, Has[Random], etc).", "members_class" : [{"label" : "test", "tail" : "(label: String)(assertion: => In)(testConstructor: TestConstructor[Nothing, In], sourceLocation: SourceLocation): Out", "member" : "zio.test.DefaultRunnableSpec.test", "link" : "zio\/test\/DefaultRunnableSpec.html#test[In](label:String)(assertion:=>In)(implicittestConstructor:zio.test.TestConstructor[Nothing,In],implicitsourceLocation:zio.test.SourceLocation):testConstructor.Out", "kind" : "def"}, {"label" : "suiteM", "tail" : "(label: String)(specs: ZIO[R, E, Iterable[Spec[R, E, T]]]): Spec[R, E, T]", "member" : "zio.test.DefaultRunnableSpec.suiteM", "link" : "zio\/test\/DefaultRunnableSpec.html#suiteM[R,E,T](label:String)(specs:zio.ZIO[R,E,Iterable[zio.test.Spec[R,E,T]]]):zio.test.Spec[R,E,T]", "kind" : "def"}, {"label" : "suite", "tail" : "(label: String)(specs: Spec[R, E, T]*): Spec[R, E, T]", "member" : "zio.test.DefaultRunnableSpec.suite", "link" : "zio\/test\/DefaultRunnableSpec.html#suite[R,E,T](label:String)(specs:zio.test.Spec[R,E,T]*):zio.test.Spec[R,E,T]", "kind" : "def"}, {"label" : "runner", "tail" : "(): TestRunner[environment.TestEnvironment, Any]", "member" : "zio.test.DefaultRunnableSpec.runner", "link" : "zio\/test\/DefaultRunnableSpec.html#runner:zio.test.TestRunner[zio.test.environment.TestEnvironment,Any]", "kind" : "def"}, {"label" : "aspects", "tail" : "(): List[TestAspect[Nothing, environment.TestEnvironment, Nothing, Any]]", "member" : "zio.test.DefaultRunnableSpec.aspects", "link" : "zio\/test\/DefaultRunnableSpec.html#aspects:List[zio.test.TestAspect[Nothing,zio.test.environment.TestEnvironment,Nothing,Any]]", "kind" : "def"}, {"member" : "zio.test.DefaultRunnableSpec#<init>", "error" : "unsupported entity"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "zio.test.RunnableSpec.main", "link" : "zio\/test\/DefaultRunnableSpec.html#main(args:Array[String]):Unit", "kind" : "final def"}, {"label" : "Failure", "tail" : "", "member" : "zio.test.RunnableSpec.Failure", "link" : "zio\/test\/DefaultRunnableSpec.html#Failure=E", "kind" : "type"}, {"label" : "Environment", "tail" : "", "member" : "zio.test.RunnableSpec.Environment", "link" : "zio\/test\/DefaultRunnableSpec.html#Environment=R", "kind" : "type"}, {"label" : "runtimeConfig", "tail" : "(): RuntimeConfig", "member" : "zio.test.AbstractRunnableSpec.runtimeConfig", "link" : "zio\/test\/DefaultRunnableSpec.html#runtimeConfig:zio.RuntimeConfig", "kind" : "final def"}, {"label" : "run", "tail" : "(): ZIO[zio.ZEnv with Has[ZIOAppArgs], Any, Any]", "member" : "zio.test.AbstractRunnableSpec.run", "link" : "zio\/test\/DefaultRunnableSpec.html#run:zio.ZIO[zio.ZEnvwithzio.Has[zio.ZIOAppArgs],Any,Any]", "kind" : "final def"}, {"label" : "platform", "tail" : "(): RuntimeConfig", "member" : "zio.test.AbstractRunnableSpec.platform", "link" : "zio\/test\/DefaultRunnableSpec.html#platform:zio.RuntimeConfig", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/DefaultRunnableSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/DefaultRunnableSpec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/DefaultRunnableSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/DefaultRunnableSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/DefaultRunnableSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/DefaultRunnableSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/DefaultRunnableSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/DefaultRunnableSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/DefaultRunnableSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/DefaultRunnableSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/DefaultRunnableSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/DefaultRunnableSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/DefaultRunnableSpec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/DefaultRunnableSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/DefaultRunnableSpec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/DefaultRunnableSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/DefaultRunnableSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/DefaultRunnableSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/DefaultRunnableSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "spec", "tail" : "(): ZSpec[Environment, Failure]", "member" : "zio.test.AbstractRunnableSpec.spec", "link" : "zio\/test\/DefaultRunnableSpec.html#spec:zio.test.ZSpec[AbstractRunnableSpec.this.Environment,AbstractRunnableSpec.this.Failure]", "kind" : "abstract def"}], "class" : "zio\/test\/DefaultRunnableSpec.html", "kind" : "class"}, {"name" : "zio.test.DefaultTestReporter", "shortDescription" : "", "object" : "zio\/test\/DefaultTestReporter$.html", "members_object" : [{"label" : "rendered", "tail" : "(caseType: ResultType, label: String, result: Status, offset: Int, lines: Line*): ExecutionResult", "member" : "zio.test.DefaultTestReporter.rendered", "link" : "zio\/test\/DefaultTestReporter$.html#rendered(caseType:zio.test.render.ExecutionResult.ResultType,label:String,result:zio.test.render.ExecutionResult.Status,offset:Int,lines:zio.test.render.LogLine.Line*):zio.test.render.ExecutionResult", "kind" : "def"}, {"label" : "renderFailureDetails", "tail" : "(failureDetails: FailureDetails, offset: Int): Message", "member" : "zio.test.DefaultTestReporter.renderFailureDetails", "link" : "zio\/test\/DefaultTestReporter$.html#renderFailureDetails(failureDetails:zio.test.FailureDetails,offset:Int):zio.test.render.LogLine.Message", "kind" : "def"}, {"label" : "renderFailureLabel", "tail" : "(label: String, offset: Int): Line", "member" : "zio.test.DefaultTestReporter.renderFailureLabel", "link" : "zio\/test\/DefaultTestReporter$.html#renderFailureLabel(label:String,offset:Int):zio.test.render.LogLine.Line", "kind" : "def"}, {"label" : "renderTestFailure", "tail" : "(label: String, testResult: TestResult): Message", "member" : "zio.test.DefaultTestReporter.renderTestFailure", "link" : "zio\/test\/DefaultTestReporter$.html#renderTestFailure(label:String,testResult:zio.test.TestResult):zio.test.render.LogLine.Message", "kind" : "def"}, {"label" : "renderCause", "tail" : "(cause: Cause[Any], offset: Int): Message", "member" : "zio.test.DefaultTestReporter.renderCause", "link" : "zio\/test\/DefaultTestReporter$.html#renderCause(cause:zio.Cause[Any],offset:Int):zio.test.render.LogLine.Message", "kind" : "def"}, {"label" : "renderFailureCase", "tail" : "(failureCase: FailureCase, offset: Int, isNested: Boolean): Chunk[Line]", "member" : "zio.test.DefaultTestReporter.renderFailureCase", "link" : "zio\/test\/DefaultTestReporter$.html#renderFailureCase(failureCase:zio.test.FailureCase,offset:Int,isNested:Boolean):zio.Chunk[zio.test.render.LogLine.Line]", "kind" : "def"}, {"label" : "renderAssertionResult", "tail" : "(assertionResult: AssertionResult, offset: Int): Message", "member" : "zio.test.DefaultTestReporter.renderAssertionResult", "link" : "zio\/test\/DefaultTestReporter$.html#renderAssertionResult(assertionResult:zio.test.AssertionResult,offset:Int):zio.test.render.LogLine.Message", "kind" : "def"}, {"label" : "renderAssertFailure", "tail" : "(result: TestResult, label: String, depth: Int): ExecutionResult", "member" : "zio.test.DefaultTestReporter.renderAssertFailure", "link" : "zio\/test\/DefaultTestReporter$.html#renderAssertFailure(result:zio.test.TestResult,label:String,depth:Int):zio.test.render.ExecutionResult", "kind" : "def"}, {"label" : "apply", "tail" : "(testRenderer: TestRenderer, testAnnotationRenderer: TestAnnotationRenderer): TestReporter[E]", "member" : "zio.test.DefaultTestReporter.apply", "link" : "zio\/test\/DefaultTestReporter$.html#apply[E](testRenderer:zio.test.render.TestRenderer,testAnnotationRenderer:zio.test.TestAnnotationRenderer):zio.test.TestReporter[E]", "kind" : "def"}, {"label" : "render", "tail" : "(executedSpec: ExecutedSpec[E], includeCause: Boolean): Seq[ExecutionResult]", "member" : "zio.test.DefaultTestReporter.render", "link" : "zio\/test\/DefaultTestReporter$.html#render[E](executedSpec:zio.test.ExecutedSpec[E],includeCause:Boolean):Seq[zio.test.render.ExecutionResult]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/DefaultTestReporter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/DefaultTestReporter$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/DefaultTestReporter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/DefaultTestReporter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/DefaultTestReporter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/DefaultTestReporter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/DefaultTestReporter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/DefaultTestReporter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/DefaultTestReporter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/DefaultTestReporter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/DefaultTestReporter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/DefaultTestReporter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/DefaultTestReporter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/DefaultTestReporter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/DefaultTestReporter$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/DefaultTestReporter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/DefaultTestReporter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/DefaultTestReporter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/DefaultTestReporter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.Eql", "shortDescription" : "A value of type Eql[A, B] provides implicit evidence that two values withtypes A and B could potentially be equal, that is, thatA is a subtype of B or B is a subtype of A.", "object" : "zio\/test\/Eql$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Eql.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Eql.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Eql.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Eql.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Eql.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Eql.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Eql.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Eql.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Eql.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Eql.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Eql.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Eql.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Eql.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Eql.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Eql.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Eql.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Eql.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Eql.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Eql.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "eqlSubtype1", "tail" : "(): Eql[A, B]", "member" : "zio.test.Eql.eqlSubtype1", "link" : "zio\/test\/Eql$.html#eqlSubtype1[A<:B,B]:zio.test.Eql[A,B]", "kind" : "implicit final def"}, {"label" : "eqlSubtype2", "tail" : "(): Eql[A, B]", "member" : "zio.test.EqlLowPriority.eqlSubtype2", "link" : "zio\/test\/Eql$.html#eqlSubtype2[A,B<:A]:zio.test.Eql[A,B]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Eql$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Eql$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Eql$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Eql$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Eql$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Eql$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Eql$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Eql$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Eql$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Eql$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Eql$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Eql$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Eql$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Eql$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Eql$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Eql$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Eql$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Eql$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Eql$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/Eql.html", "kind" : "class"}, {"name" : "zio.test.ErrorMessage", "object" : "zio\/test\/ErrorMessage$.html", "members_object" : [{"label" : "valid", "tail" : ": ErrorMessage", "member" : "zio.test.ErrorMessage.valid", "link" : "zio\/test\/ErrorMessage$.html#valid:zio.test.ErrorMessage", "kind" : "val"}, {"label" : "was", "tail" : ": ErrorMessage", "member" : "zio.test.ErrorMessage.was", "link" : "zio\/test\/ErrorMessage$.html#was:zio.test.ErrorMessage", "kind" : "val"}, {"label" : "did", "tail" : ": ErrorMessage", "member" : "zio.test.ErrorMessage.did", "link" : "zio\/test\/ErrorMessage$.html#did:zio.test.ErrorMessage", "kind" : "val"}, {"label" : "does", "tail" : ": ErrorMessage", "member" : "zio.test.ErrorMessage.does", "link" : "zio\/test\/ErrorMessage$.html#does:zio.test.ErrorMessage", "kind" : "val"}, {"label" : "is", "tail" : ": ErrorMessage", "member" : "zio.test.ErrorMessage.is", "link" : "zio\/test\/ErrorMessage$.html#is:zio.test.ErrorMessage", "kind" : "val"}, {"label" : "equals", "tail" : ": ErrorMessage", "member" : "zio.test.ErrorMessage.equals", "link" : "zio\/test\/ErrorMessage$.html#equals:zio.test.ErrorMessage", "kind" : "val"}, {"label" : "pretty", "tail" : "(value: Any): ErrorMessage", "member" : "zio.test.ErrorMessage.pretty", "link" : "zio\/test\/ErrorMessage$.html#pretty(value:Any):zio.test.ErrorMessage", "kind" : "def"}, {"label" : "value", "tail" : "(value: Any): ErrorMessage", "member" : "zio.test.ErrorMessage.value", "link" : "zio\/test\/ErrorMessage$.html#value(value:Any):zio.test.ErrorMessage", "kind" : "def"}, {"label" : "text", "tail" : "(string: String): ErrorMessage", "member" : "zio.test.ErrorMessage.text", "link" : "zio\/test\/ErrorMessage$.html#text(string:String):zio.test.ErrorMessage", "kind" : "def"}, {"label" : "custom", "tail" : "(string: String): ErrorMessage", "member" : "zio.test.ErrorMessage.custom", "link" : "zio\/test\/ErrorMessage$.html#custom(string:String):zio.test.ErrorMessage", "kind" : "def"}, {"label" : "choice", "tail" : "(success: String, failure: String): ErrorMessage", "member" : "zio.test.ErrorMessage.choice", "link" : "zio\/test\/ErrorMessage$.html#choice(success:String,failure:String):zio.test.ErrorMessage", "kind" : "def"}, {"label" : "throwable", "tail" : "(throwable: Throwable): ErrorMessage", "member" : "zio.test.ErrorMessage.throwable", "link" : "zio\/test\/ErrorMessage$.html#throwable(throwable:Throwable):zio.test.ErrorMessage", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/ErrorMessage$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/ErrorMessage$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/ErrorMessage$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/ErrorMessage$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/ErrorMessage$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/ErrorMessage$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/ErrorMessage$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ErrorMessage$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ErrorMessage$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ErrorMessage$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/ErrorMessage$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/ErrorMessage$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/ErrorMessage$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/ErrorMessage$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/ErrorMessage$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/ErrorMessage$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/ErrorMessage$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/ErrorMessage$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/ErrorMessage$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/ErrorMessage.html", "kind" : "trait", "members_trait" : [{"label" : "+\/", "tail" : "(that: ErrorMessage): ErrorMessage", "member" : "zio.test.ErrorMessage.+\/", "link" : "zio\/test\/ErrorMessage.html#+\/(that:zio.test.ErrorMessage):zio.test.ErrorMessage", "kind" : "def"}, {"label" : "+", "tail" : "(that: ErrorMessage): ErrorMessage", "member" : "zio.test.ErrorMessage.+", "link" : "zio\/test\/ErrorMessage.html#+(that:zio.test.ErrorMessage):zio.test.ErrorMessage", "kind" : "def"}, {"label" : "+", "tail" : "(that: String): ErrorMessage", "member" : "zio.test.ErrorMessage.+", "link" : "zio\/test\/ErrorMessage.html#+(that:String):zio.test.ErrorMessage", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/ErrorMessage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/ErrorMessage.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/ErrorMessage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/ErrorMessage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/ErrorMessage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/ErrorMessage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/ErrorMessage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ErrorMessage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ErrorMessage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ErrorMessage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/ErrorMessage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/ErrorMessage.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/ErrorMessage.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/ErrorMessage.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/ErrorMessage.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/ErrorMessage.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/ErrorMessage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/ErrorMessage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/ErrorMessage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.ExecutedSpec", "shortDescription" : "An ExecutedSpec is a spec that has been run to produce test results.", "object" : "zio\/test\/ExecutedSpec$.html", "members_object" : [{"label" : "test", "tail" : "(test: Either[TestFailure[E], TestSuccess], annotations: TestAnnotationMap): ExecutedSpec[E]", "member" : "zio.test.ExecutedSpec.test", "link" : "zio\/test\/ExecutedSpec$.html#test[E](test:Either[zio.test.TestFailure[E],zio.test.TestSuccess],annotations:zio.test.TestAnnotationMap):zio.test.ExecutedSpec[E]", "kind" : "def"}, {"label" : "multiple", "tail" : "(specs: Chunk[ExecutedSpec[E]]): ExecutedSpec[E]", "member" : "zio.test.ExecutedSpec.multiple", "link" : "zio\/test\/ExecutedSpec$.html#multiple[E](specs:zio.Chunk[zio.test.ExecutedSpec[E]]):zio.test.ExecutedSpec[E]", "kind" : "def"}, {"label" : "labeled", "tail" : "(label: String, spec: ExecutedSpec[E]): ExecutedSpec[E]", "member" : "zio.test.ExecutedSpec.labeled", "link" : "zio\/test\/ExecutedSpec$.html#labeled[E](label:String,spec:zio.test.ExecutedSpec[E]):zio.test.ExecutedSpec[E]", "kind" : "def"}, {"label" : "TestCase", "tail" : "", "member" : "zio.test.ExecutedSpec.TestCase", "link" : "zio\/test\/ExecutedSpec$.html#TestCase[+E]extendsExecutedSpec.SpecCase[E,Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "MultipleCase", "tail" : "", "member" : "zio.test.ExecutedSpec.MultipleCase", "link" : "zio\/test\/ExecutedSpec$.html#MultipleCase[+A]extendsExecutedSpec.SpecCase[Nothing,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "LabeledCase", "tail" : "", "member" : "zio.test.ExecutedSpec.LabeledCase", "link" : "zio\/test\/ExecutedSpec$.html#LabeledCase[+A]extendsExecutedSpec.SpecCase[Nothing,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "SpecCase", "tail" : "", "member" : "zio.test.ExecutedSpec.SpecCase", "link" : "zio\/test\/ExecutedSpec$.html#SpecCase[+E,+A]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/ExecutedSpec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/ExecutedSpec$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/ExecutedSpec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/ExecutedSpec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/ExecutedSpec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/ExecutedSpec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/ExecutedSpec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ExecutedSpec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ExecutedSpec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ExecutedSpec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/ExecutedSpec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/ExecutedSpec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/ExecutedSpec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/ExecutedSpec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/ExecutedSpec$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/ExecutedSpec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/ExecutedSpec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/ExecutedSpec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/ExecutedSpec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "transformAccum", "tail" : "(z0: Z)(f: (Z, SpecCase[E, ExecutedSpec[E1]]) => (Z, SpecCase[E1, ExecutedSpec[E1]])): (Z, ExecutedSpec[E1])", "member" : "zio.test.ExecutedSpec.transformAccum", "link" : "zio\/test\/ExecutedSpec.html#transformAccum[E1,Z](z0:Z)(f:(Z,zio.test.ExecutedSpec.SpecCase[E,zio.test.ExecutedSpec[E1]])=>(Z,zio.test.ExecutedSpec.SpecCase[E1,zio.test.ExecutedSpec[E1]])):(Z,zio.test.ExecutedSpec[E1])", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (SpecCase[E, ExecutedSpec[E1]]) => SpecCase[E1, ExecutedSpec[E1]]): ExecutedSpec[E1]", "member" : "zio.test.ExecutedSpec.transform", "link" : "zio\/test\/ExecutedSpec.html#transform[E1](f:zio.test.ExecutedSpec.SpecCase[E,zio.test.ExecutedSpec[E1]]=>zio.test.ExecutedSpec.SpecCase[E1,zio.test.ExecutedSpec[E1]]):zio.test.ExecutedSpec[E1]", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "zio.test.ExecutedSpec.size", "link" : "zio\/test\/ExecutedSpec.html#size:Int", "kind" : "def"}, {"label" : "forall", "tail" : "(f: (SpecCase[E, Boolean]) => Boolean): Boolean", "member" : "zio.test.ExecutedSpec.forall", "link" : "zio\/test\/ExecutedSpec.html#forall(f:zio.test.ExecutedSpec.SpecCase[E,Boolean]=>Boolean):Boolean", "kind" : "def"}, {"label" : "fold", "tail" : "(f: (SpecCase[E, Z]) => Z): Z", "member" : "zio.test.ExecutedSpec.fold", "link" : "zio\/test\/ExecutedSpec.html#fold[Z](f:zio.test.ExecutedSpec.SpecCase[E,Z]=>Z):Z", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (SpecCase[E, Boolean]) => Boolean): Boolean", "member" : "zio.test.ExecutedSpec.exists", "link" : "zio\/test\/ExecutedSpec.html#exists(f:zio.test.ExecutedSpec.SpecCase[E,Boolean]=>Boolean):Boolean", "kind" : "def"}, {"member" : "zio.test.ExecutedSpec#<init>", "error" : "unsupported entity"}, {"label" : "caseValue", "tail" : ": SpecCase[E, ExecutedSpec[E]]", "member" : "zio.test.ExecutedSpec.caseValue", "link" : "zio\/test\/ExecutedSpec.html#caseValue:zio.test.ExecutedSpec.SpecCase[E,zio.test.ExecutedSpec[E]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/ExecutedSpec.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/ExecutedSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/ExecutedSpec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/ExecutedSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/ExecutedSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/ExecutedSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/ExecutedSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/ExecutedSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ExecutedSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ExecutedSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ExecutedSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/ExecutedSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/ExecutedSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/ExecutedSpec.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/ExecutedSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/ExecutedSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/ExecutedSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/test\/ExecutedSpec.html", "kind" : "case class"}, {"name" : "zio.test.FailureCase", "shortDescription" : "", "object" : "zio\/test\/FailureCase$.html", "members_object" : [{"label" : "renderFailureCase", "tail" : "(failureCase: FailureCase, isNested: Boolean): Chunk[String]", "member" : "zio.test.FailureCase.renderFailureCase", "link" : "zio\/test\/FailureCase$.html#renderFailureCase(failureCase:zio.test.FailureCase,isNested:Boolean):zio.Chunk[String]", "kind" : "def"}, {"label" : "fromTrace", "tail" : "(trace: Trace[Boolean]): Chunk[FailureCase]", "member" : "zio.test.FailureCase.fromTrace", "link" : "zio\/test\/FailureCase$.html#fromTrace(trace:zio.test.Trace[Boolean]):zio.Chunk[zio.test.FailureCase]", "kind" : "def"}, {"label" : "getPath", "tail" : "(trace: Trace[_]): Chunk[(String, Any)]", "member" : "zio.test.FailureCase.getPath", "link" : "zio\/test\/FailureCase$.html#getPath(trace:zio.test.Trace[_]):zio.Chunk[(String,Any)]", "kind" : "def"}, {"label" : "rightmostNode", "tail" : "(trace: Trace[Boolean]): Node[Boolean]", "member" : "zio.test.FailureCase.rightmostNode", "link" : "zio\/test\/FailureCase$.html#rightmostNode(trace:zio.test.Trace[Boolean]):zio.test.Trace.Node[Boolean]", "kind" : "def"}, {"label" : "highlight", "tail" : "(string: String, span: Span, parentSpan: Option[Span], color: (String) => String): String", "member" : "zio.test.FailureCase.highlight", "link" : "zio\/test\/FailureCase$.html#highlight(string:String,span:zio.test.Arrow.Span,parentSpan:Option[zio.test.Arrow.Span],color:String=>String):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/FailureCase$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/FailureCase$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/FailureCase$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/FailureCase$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/FailureCase$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/FailureCase$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/FailureCase$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/FailureCase$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/FailureCase$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/FailureCase$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/FailureCase$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/FailureCase$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/FailureCase$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/FailureCase$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/FailureCase$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/FailureCase$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/FailureCase$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/FailureCase$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/FailureCase$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "zio.test.FailureCase#<init>", "error" : "unsupported entity"}, {"label" : "result", "tail" : ": Any", "member" : "zio.test.FailureCase.result", "link" : "zio\/test\/FailureCase.html#result:Any", "kind" : "val"}, {"label" : "nestedFailures", "tail" : ": Chunk[FailureCase]", "member" : "zio.test.FailureCase.nestedFailures", "link" : "zio\/test\/FailureCase.html#nestedFailures:zio.Chunk[zio.test.FailureCase]", "kind" : "val"}, {"label" : "span", "tail" : ": Span", "member" : "zio.test.FailureCase.span", "link" : "zio\/test\/FailureCase.html#span:zio.test.Arrow.Span", "kind" : "val"}, {"label" : "path", "tail" : ": Chunk[(String, Any)]", "member" : "zio.test.FailureCase.path", "link" : "zio\/test\/FailureCase.html#path:zio.Chunk[(String,Any)]", "kind" : "val"}, {"label" : "location", "tail" : ": String", "member" : "zio.test.FailureCase.location", "link" : "zio\/test\/FailureCase.html#location:String", "kind" : "val"}, {"label" : "codeString", "tail" : ": String", "member" : "zio.test.FailureCase.codeString", "link" : "zio\/test\/FailureCase.html#codeString:String", "kind" : "val"}, {"label" : "errorMessage", "tail" : ": Message", "member" : "zio.test.FailureCase.errorMessage", "link" : "zio\/test\/FailureCase.html#errorMessage:zio.test.render.LogLine.Message", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/FailureCase.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/FailureCase.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/FailureCase.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/FailureCase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/FailureCase.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/FailureCase.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/FailureCase.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/FailureCase.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/FailureCase.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/FailureCase.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/FailureCase.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/FailureCase.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/FailureCase.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/FailureCase.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/FailureCase.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/FailureCase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/FailureCase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/test\/FailureCase.html", "kind" : "case class"}, {"name" : "zio.test.FailureDetails", "shortDescription" : "FailureDetails keeps track of details relevant to failures.", "members_case class" : [{"label" : "label", "tail" : "(string: String): FailureDetails", "member" : "zio.test.FailureDetails.label", "link" : "zio\/test\/FailureDetails.html#label(string:String):zio.test.FailureDetails", "kind" : "def"}, {"member" : "zio.test.FailureDetails#<init>", "error" : "unsupported entity"}, {"label" : "assertion", "tail" : ": ::[AssertionValue]", "member" : "zio.test.FailureDetails.assertion", "link" : "zio\/test\/FailureDetails.html#assertion:::[zio.test.AssertionValue]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/FailureDetails.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/FailureDetails.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/FailureDetails.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/FailureDetails.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/FailureDetails.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/FailureDetails.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/FailureDetails.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/FailureDetails.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/FailureDetails.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/FailureDetails.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/FailureDetails.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/FailureDetails.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/FailureDetails.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/FailureDetails.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/FailureDetails.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/FailureDetails.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/FailureDetails.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/test\/FailureDetails.html", "kind" : "case class"}, {"name" : "zio.test.FunctionVariants", "trait" : "zio\/test\/FunctionVariants.html", "kind" : "trait", "members_trait" : [{"label" : "functionWith4", "tail" : "(gen: Gen[R, E])(hash: (A, B, C, D) => Int): Gen[R, (A, B, C, D) => E]", "member" : "zio.test.FunctionVariants.functionWith4", "link" : "zio\/test\/FunctionVariants.html#functionWith4[R,A,B,C,D,E](gen:zio.test.Gen[R,E])(hash:(A,B,C,D)=>Int):zio.test.Gen[R,(A,B,C,D)=>E]", "kind" : "final def"}, {"label" : "functionWith3", "tail" : "(gen: Gen[R, D])(hash: (A, B, C) => Int): Gen[R, (A, B, C) => D]", "member" : "zio.test.FunctionVariants.functionWith3", "link" : "zio\/test\/FunctionVariants.html#functionWith3[R,A,B,C,D](gen:zio.test.Gen[R,D])(hash:(A,B,C)=>Int):zio.test.Gen[R,(A,B,C)=>D]", "kind" : "final def"}, {"label" : "functionWith2", "tail" : "(gen: Gen[R, C])(hash: (A, B) => Int): Gen[R, (A, B) => C]", "member" : "zio.test.FunctionVariants.functionWith2", "link" : "zio\/test\/FunctionVariants.html#functionWith2[R,A,B,C](gen:zio.test.Gen[R,C])(hash:(A,B)=>Int):zio.test.Gen[R,(A,B)=>C]", "kind" : "final def"}, {"label" : "functionWith", "tail" : "(gen: Gen[R, B])(hash: (A) => Int): Gen[R, (A) => B]", "member" : "zio.test.FunctionVariants.functionWith", "link" : "zio\/test\/FunctionVariants.html#functionWith[R,A,B](gen:zio.test.Gen[R,B])(hash:A=>Int):zio.test.Gen[R,A=>B]", "kind" : "final def"}, {"label" : "function4", "tail" : "(gen: Gen[R, E]): Gen[R, (A, B, C, D) => E]", "member" : "zio.test.FunctionVariants.function4", "link" : "zio\/test\/FunctionVariants.html#function4[R,A,B,C,D,E](gen:zio.test.Gen[R,E]):zio.test.Gen[R,(A,B,C,D)=>E]", "kind" : "final def"}, {"label" : "function3", "tail" : "(gen: Gen[R, D]): Gen[R, (A, B, C) => D]", "member" : "zio.test.FunctionVariants.function3", "link" : "zio\/test\/FunctionVariants.html#function3[R,A,B,C,D](gen:zio.test.Gen[R,D]):zio.test.Gen[R,(A,B,C)=>D]", "kind" : "final def"}, {"label" : "function2", "tail" : "(gen: Gen[R, C]): Gen[R, (A, B) => C]", "member" : "zio.test.FunctionVariants.function2", "link" : "zio\/test\/FunctionVariants.html#function2[R,A,B,C](gen:zio.test.Gen[R,C]):zio.test.Gen[R,(A,B)=>C]", "kind" : "final def"}, {"label" : "function", "tail" : "(gen: Gen[R, B]): Gen[R, (A) => B]", "member" : "zio.test.FunctionVariants.function", "link" : "zio\/test\/FunctionVariants.html#function[R,A,B](gen:zio.test.Gen[R,B]):zio.test.Gen[R,A=>B]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/FunctionVariants.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/FunctionVariants.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/FunctionVariants.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/FunctionVariants.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/FunctionVariants.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/FunctionVariants.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/FunctionVariants.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/FunctionVariants.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/FunctionVariants.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/FunctionVariants.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/FunctionVariants.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/FunctionVariants.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/FunctionVariants.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/FunctionVariants.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/FunctionVariants.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/FunctionVariants.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/FunctionVariants.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/FunctionVariants.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/FunctionVariants.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.Gen", "shortDescription" : "A Gen[R, A] represents a generator of values of type A, which requiresan environment R.", "object" : "zio\/test\/Gen$.html", "members_object" : [{"label" : "zipN", "tail" : "(gen1: Gen[R, A], gen2: Gen[R, B], gen3: Gen[R, C], gen4: Gen[R, D], gen5: Gen[R, F], gen6: Gen[R, G], gen7: Gen[R, H], gen8: Gen[R, I], gen9: Gen[R, J], gen10: Gen[R, K])(fn: (A, B, C, D, F, G, H, I, J, K) => L): Gen[R, L]", "member" : "zio.test.Gen.zipN", "link" : "zio\/test\/Gen$.html#zipN[R,A,B,C,D,F,G,H,I,J,K,L](gen1:zio.test.Gen[R,A],gen2:zio.test.Gen[R,B],gen3:zio.test.Gen[R,C],gen4:zio.test.Gen[R,D],gen5:zio.test.Gen[R,F],gen6:zio.test.Gen[R,G],gen7:zio.test.Gen[R,H],gen8:zio.test.Gen[R,I],gen9:zio.test.Gen[R,J],gen10:zio.test.Gen[R,K])(fn:(A,B,C,D,F,G,H,I,J,K)=>L):zio.test.Gen[R,L]", "kind" : "def"}, {"label" : "zipN", "tail" : "(gen1: Gen[R, A], gen2: Gen[R, B], gen3: Gen[R, C], gen4: Gen[R, D], gen5: Gen[R, F], gen6: Gen[R, G], gen7: Gen[R, H], gen8: Gen[R, I], gen9: Gen[R, J])(fn: (A, B, C, D, F, G, H, I, J) => K): Gen[R, K]", "member" : "zio.test.Gen.zipN", "link" : "zio\/test\/Gen$.html#zipN[R,A,B,C,D,F,G,H,I,J,K](gen1:zio.test.Gen[R,A],gen2:zio.test.Gen[R,B],gen3:zio.test.Gen[R,C],gen4:zio.test.Gen[R,D],gen5:zio.test.Gen[R,F],gen6:zio.test.Gen[R,G],gen7:zio.test.Gen[R,H],gen8:zio.test.Gen[R,I],gen9:zio.test.Gen[R,J])(fn:(A,B,C,D,F,G,H,I,J)=>K):zio.test.Gen[R,K]", "kind" : "def"}, {"label" : "zipN", "tail" : "(gen1: Gen[R, A], gen2: Gen[R, B], gen3: Gen[R, C], gen4: Gen[R, D], gen5: Gen[R, F], gen6: Gen[R, G], gen7: Gen[R, H], gen8: Gen[R, I])(fn: (A, B, C, D, F, G, H, I) => J): Gen[R, J]", "member" : "zio.test.Gen.zipN", "link" : "zio\/test\/Gen$.html#zipN[R,A,B,C,D,F,G,H,I,J](gen1:zio.test.Gen[R,A],gen2:zio.test.Gen[R,B],gen3:zio.test.Gen[R,C],gen4:zio.test.Gen[R,D],gen5:zio.test.Gen[R,F],gen6:zio.test.Gen[R,G],gen7:zio.test.Gen[R,H],gen8:zio.test.Gen[R,I])(fn:(A,B,C,D,F,G,H,I)=>J):zio.test.Gen[R,J]", "kind" : "def"}, {"label" : "zipN", "tail" : "(gen1: Gen[R, A], gen2: Gen[R, B], gen3: Gen[R, C], gen4: Gen[R, D], gen5: Gen[R, F], gen6: Gen[R, G], gen7: Gen[R, H])(fn: (A, B, C, D, F, G, H) => I): Gen[R, I]", "member" : "zio.test.Gen.zipN", "link" : "zio\/test\/Gen$.html#zipN[R,A,B,C,D,F,G,H,I](gen1:zio.test.Gen[R,A],gen2:zio.test.Gen[R,B],gen3:zio.test.Gen[R,C],gen4:zio.test.Gen[R,D],gen5:zio.test.Gen[R,F],gen6:zio.test.Gen[R,G],gen7:zio.test.Gen[R,H])(fn:(A,B,C,D,F,G,H)=>I):zio.test.Gen[R,I]", "kind" : "def"}, {"label" : "zipN", "tail" : "(gen1: Gen[R, A], gen2: Gen[R, B], gen3: Gen[R, C], gen4: Gen[R, D], gen5: Gen[R, F], gen6: Gen[R, G])(fn: (A, B, C, D, F, G) => H): Gen[R, H]", "member" : "zio.test.Gen.zipN", "link" : "zio\/test\/Gen$.html#zipN[R,A,B,C,D,F,G,H](gen1:zio.test.Gen[R,A],gen2:zio.test.Gen[R,B],gen3:zio.test.Gen[R,C],gen4:zio.test.Gen[R,D],gen5:zio.test.Gen[R,F],gen6:zio.test.Gen[R,G])(fn:(A,B,C,D,F,G)=>H):zio.test.Gen[R,H]", "kind" : "def"}, {"label" : "zipN", "tail" : "(gen1: Gen[R, A], gen2: Gen[R, B], gen3: Gen[R, C], gen4: Gen[R, D], gen5: Gen[R, F])(fn: (A, B, C, D, F) => G): Gen[R, G]", "member" : "zio.test.Gen.zipN", "link" : "zio\/test\/Gen$.html#zipN[R,A,B,C,D,F,G](gen1:zio.test.Gen[R,A],gen2:zio.test.Gen[R,B],gen3:zio.test.Gen[R,C],gen4:zio.test.Gen[R,D],gen5:zio.test.Gen[R,F])(fn:(A,B,C,D,F)=>G):zio.test.Gen[R,G]", "kind" : "def"}, {"label" : "zipN", "tail" : "(gen1: Gen[R, A], gen2: Gen[R, B], gen3: Gen[R, C], gen4: Gen[R, D])(f: (A, B, C, D) => F): Gen[R, F]", "member" : "zio.test.Gen.zipN", "link" : "zio\/test\/Gen$.html#zipN[R,A,B,C,D,F](gen1:zio.test.Gen[R,A],gen2:zio.test.Gen[R,B],gen3:zio.test.Gen[R,C],gen4:zio.test.Gen[R,D])(f:(A,B,C,D)=>F):zio.test.Gen[R,F]", "kind" : "def"}, {"label" : "zipN", "tail" : "(gen1: Gen[R, A], gen2: Gen[R, B], gen3: Gen[R, C])(f: (A, B, C) => D): Gen[R, D]", "member" : "zio.test.Gen.zipN", "link" : "zio\/test\/Gen$.html#zipN[R,A,B,C,D](gen1:zio.test.Gen[R,A],gen2:zio.test.Gen[R,B],gen3:zio.test.Gen[R,C])(f:(A,B,C)=>D):zio.test.Gen[R,D]", "kind" : "def"}, {"label" : "zipN", "tail" : "(gen1: Gen[R, A], gen2: Gen[R, B])(f: (A, B) => C): Gen[R, C]", "member" : "zio.test.Gen.zipN", "link" : "zio\/test\/Gen$.html#zipN[R,A,B,C](gen1:zio.test.Gen[R,A],gen2:zio.test.Gen[R,B])(f:(A,B)=>C):zio.test.Gen[R,C]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(gens: Iterable[Gen[R, A]]): Gen[R, List[A]]", "member" : "zio.test.Gen.zipAll", "link" : "zio\/test\/Gen$.html#zipAll[R,A](gens:Iterable[zio.test.Gen[R,A]]):zio.test.Gen[R,List[A]]", "kind" : "def"}, {"label" : "whitespaceChars", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.whitespaceChars", "link" : "zio\/test\/Gen$.html#whitespaceChars:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "weighted", "tail" : "(gs: (Gen[R, A], Double)*): Gen[R, A]", "member" : "zio.test.Gen.weighted", "link" : "zio\/test\/Gen$.html#weighted[R<:zio.Has[zio.Random],A](gs:(zio.test.Gen[R,A],Double)*):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "vectorOfN", "tail" : "(n: Int)(g: Gen[R, A]): Gen[R, Vector[A]]", "member" : "zio.test.Gen.vectorOfN", "link" : "zio\/test\/Gen$.html#vectorOfN[R<:zio.Has[zio.Random],A](n:Int)(g:zio.test.Gen[R,A]):zio.test.Gen[R,Vector[A]]", "kind" : "def"}, {"label" : "vectorOfBounded", "tail" : "(min: Int, max: Int)(g: Gen[R, A]): Gen[R, Vector[A]]", "member" : "zio.test.Gen.vectorOfBounded", "link" : "zio\/test\/Gen$.html#vectorOfBounded[R<:zio.Has[zio.Random],A](min:Int,max:Int)(g:zio.test.Gen[R,A]):zio.test.Gen[R,Vector[A]]", "kind" : "def"}, {"label" : "vectorOf1", "tail" : "(g: Gen[R, A]): Gen[R, Vector[A]]", "member" : "zio.test.Gen.vectorOf1", "link" : "zio\/test\/Gen$.html#vectorOf1[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],A](g:zio.test.Gen[R,A]):zio.test.Gen[R,Vector[A]]", "kind" : "def"}, {"label" : "vectorOf", "tail" : "(g: Gen[R, A]): Gen[R, Vector[A]]", "member" : "zio.test.Gen.vectorOf", "link" : "zio\/test\/Gen$.html#vectorOf[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],A](g:zio.test.Gen[R,A]):zio.test.Gen[R,Vector[A]]", "kind" : "def"}, {"label" : "uuid", "tail" : ": Gen[Has[Random], UUID]", "member" : "zio.test.Gen.uuid", "link" : "zio\/test\/Gen$.html#uuid:zio.test.Gen[zio.Has[zio.Random],java.util.UUID]", "kind" : "val"}, {"label" : "unit", "tail" : ": Gen[Any, Unit]", "member" : "zio.test.Gen.unit", "link" : "zio\/test\/Gen$.html#unit:zio.test.Gen[Any,Unit]", "kind" : "val"}, {"label" : "uniform", "tail" : "(): Gen[Has[Random], Double]", "member" : "zio.test.Gen.uniform", "link" : "zio\/test\/Gen$.html#uniform:zio.test.Gen[zio.Has[zio.Random],Double]", "kind" : "def"}, {"label" : "unicodeChar", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.unicodeChar", "link" : "zio\/test\/Gen$.html#unicodeChar:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "unfoldGenN", "tail" : "(n: Int)(s: S)(f: (S) => Gen[R, (S, A)]): Gen[R, List[A]]", "member" : "zio.test.Gen.unfoldGenN", "link" : "zio\/test\/Gen$.html#unfoldGenN[R,S,A](n:Int)(s:S)(f:S=>zio.test.Gen[R,(S,A)]):zio.test.Gen[R,List[A]]", "kind" : "def"}, {"label" : "unfoldGen", "tail" : "(s: S)(f: (S) => Gen[R, (S, A)]): Gen[R, List[A]]", "member" : "zio.test.Gen.unfoldGen", "link" : "zio\/test\/Gen$.html#unfoldGen[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],S,A](s:S)(f:S=>zio.test.Gen[R,(S,A)]):zio.test.Gen[R,List[A]]", "kind" : "def"}, {"label" : "throwable", "tail" : ": Gen[Has[Random], Throwable]", "member" : "zio.test.Gen.throwable", "link" : "zio\/test\/Gen$.html#throwable:zio.test.Gen[zio.Has[zio.Random],Throwable]", "kind" : "val"}, {"label" : "suspend", "tail" : "(gen: => Gen[R, A]): Gen[R, A]", "member" : "zio.test.Gen.suspend", "link" : "zio\/test\/Gen$.html#suspend[R,A](gen:=>zio.test.Gen[R,A]):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "stringN", "tail" : "(n: Int)(char: Gen[R, Char]): Gen[R, String]", "member" : "zio.test.Gen.stringN", "link" : "zio\/test\/Gen$.html#stringN[R<:zio.Has[zio.Random]](n:Int)(char:zio.test.Gen[R,Char]):zio.test.Gen[R,String]", "kind" : "def"}, {"label" : "stringBounded", "tail" : "(min: Int, max: Int)(g: Gen[R, Char]): Gen[R, String]", "member" : "zio.test.Gen.stringBounded", "link" : "zio\/test\/Gen$.html#stringBounded[R<:zio.Has[zio.Random]](min:Int,max:Int)(g:zio.test.Gen[R,Char]):zio.test.Gen[R,String]", "kind" : "def"}, {"label" : "string1", "tail" : "(char: Gen[R, Char]): Gen[R, String]", "member" : "zio.test.Gen.string1", "link" : "zio\/test\/Gen$.html#string1[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized]](char:zio.test.Gen[R,Char]):zio.test.Gen[R,String]", "kind" : "def"}, {"label" : "string", "tail" : "(char: Gen[R, Char]): Gen[R, String]", "member" : "zio.test.Gen.string", "link" : "zio\/test\/Gen$.html#string[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized]](char:zio.test.Gen[R,Char]):zio.test.Gen[R,String]", "kind" : "def"}, {"label" : "string", "tail" : "(): Gen[Has[Random] with Has[Sized], String]", "member" : "zio.test.Gen.string", "link" : "zio\/test\/Gen$.html#string:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],String]", "kind" : "def"}, {"label" : "some", "tail" : "(gen: Gen[R, A]): Gen[R, Option[A]]", "member" : "zio.test.Gen.some", "link" : "zio\/test\/Gen$.html#some[R,A](gen:zio.test.Gen[R,A]):zio.test.Gen[R,Option[A]]", "kind" : "def"}, {"label" : "small", "tail" : "(f: (Int) => Gen[R, A], min: Int): Gen[R, A]", "member" : "zio.test.Gen.small", "link" : "zio\/test\/Gen$.html#small[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],A](f:Int=>zio.test.Gen[R,A],min:Int):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "sized", "tail" : "(f: (Int) => Gen[R, A]): Gen[R, A]", "member" : "zio.test.Gen.sized", "link" : "zio\/test\/Gen$.html#sized[R<:zio.Has[zio.test.Sized],A](f:Int=>zio.test.Gen[R,A]):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "size", "tail" : "(): Gen[Has[Sized], Int]", "member" : "zio.test.Gen.size", "link" : "zio\/test\/Gen$.html#size:zio.test.Gen[zio.Has[zio.test.Sized],Int]", "kind" : "def"}, {"label" : "short", "tail" : "(min: Short, max: Short): Gen[Has[Random], Short]", "member" : "zio.test.Gen.short", "link" : "zio\/test\/Gen$.html#short(min:Short,max:Short):zio.test.Gen[zio.Has[zio.Random],Short]", "kind" : "def"}, {"label" : "short", "tail" : ": Gen[Has[Random], Short]", "member" : "zio.test.Gen.short", "link" : "zio\/test\/Gen$.html#short:zio.test.Gen[zio.Has[zio.Random],Short]", "kind" : "val"}, {"label" : "setOfN", "tail" : "(n: Int)(gen: Gen[R, A]): Gen[R, Set[A]]", "member" : "zio.test.Gen.setOfN", "link" : "zio\/test\/Gen$.html#setOfN[R<:zio.Has[zio.Random],A](n:Int)(gen:zio.test.Gen[R,A]):zio.test.Gen[R,Set[A]]", "kind" : "def"}, {"label" : "setOfBounded", "tail" : "(min: Int, max: Int)(g: Gen[R, A]): Gen[R, Set[A]]", "member" : "zio.test.Gen.setOfBounded", "link" : "zio\/test\/Gen$.html#setOfBounded[R<:zio.Has[zio.Random],A](min:Int,max:Int)(g:zio.test.Gen[R,A]):zio.test.Gen[R,Set[A]]", "kind" : "def"}, {"label" : "setOf1", "tail" : "(gen: Gen[R, A]): Gen[R, Set[A]]", "member" : "zio.test.Gen.setOf1", "link" : "zio\/test\/Gen$.html#setOf1[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],A](gen:zio.test.Gen[R,A]):zio.test.Gen[R,Set[A]]", "kind" : "def"}, {"label" : "setOf", "tail" : "(gen: Gen[R, A]): Gen[R, Set[A]]", "member" : "zio.test.Gen.setOf", "link" : "zio\/test\/Gen$.html#setOf[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],A](gen:zio.test.Gen[R,A]):zio.test.Gen[R,Set[A]]", "kind" : "def"}, {"label" : "printableChar", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.printableChar", "link" : "zio\/test\/Gen$.html#printableChar:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "partialFunctionWith", "tail" : "(gen: Gen[R, B])(hash: (A) => Int): Gen[R, PartialFunction[A, B]]", "member" : "zio.test.Gen.partialFunctionWith", "link" : "zio\/test\/Gen$.html#partialFunctionWith[R<:zio.Has[zio.Random],A,B](gen:zio.test.Gen[R,B])(hash:A=>Int):zio.test.Gen[R,PartialFunction[A,B]]", "kind" : "def"}, {"label" : "partialFunction", "tail" : "(gen: Gen[R, B]): Gen[R, PartialFunction[A, B]]", "member" : "zio.test.Gen.partialFunction", "link" : "zio\/test\/Gen$.html#partialFunction[R<:zio.Has[zio.Random],A,B](gen:zio.test.Gen[R,B]):zio.test.Gen[R,PartialFunction[A,B]]", "kind" : "def"}, {"label" : "oneOf", "tail" : "(as: Gen[R, A]*): Gen[R, A]", "member" : "zio.test.Gen.oneOf", "link" : "zio\/test\/Gen$.html#oneOf[R<:zio.Has[zio.Random],A](as:zio.test.Gen[R,A]*):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "option", "tail" : "(gen: Gen[R, A]): Gen[R, Option[A]]", "member" : "zio.test.Gen.option", "link" : "zio\/test\/Gen$.html#option[R<:zio.Has[zio.Random],A](gen:zio.test.Gen[R,A]):zio.test.Gen[R,Option[A]]", "kind" : "def"}, {"label" : "numericChar", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.numericChar", "link" : "zio\/test\/Gen$.html#numericChar:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "none", "tail" : ": Gen[Any, Option[Nothing]]", "member" : "zio.test.Gen.none", "link" : "zio\/test\/Gen$.html#none:zio.test.Gen[Any,Option[Nothing]]", "kind" : "val"}, {"label" : "medium", "tail" : "(f: (Int) => Gen[R, A], min: Int): Gen[R, A]", "member" : "zio.test.Gen.medium", "link" : "zio\/test\/Gen$.html#medium[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],A](f:Int=>zio.test.Gen[R,A],min:Int):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "mapOfBounded", "tail" : "(min: Int, max: Int)(key: Gen[R, A], value: Gen[R, B]): Gen[R, Map[A, B]]", "member" : "zio.test.Gen.mapOfBounded", "link" : "zio\/test\/Gen$.html#mapOfBounded[R<:zio.Has[zio.Random],A,B](min:Int,max:Int)(key:zio.test.Gen[R,A],value:zio.test.Gen[R,B]):zio.test.Gen[R,Map[A,B]]", "kind" : "def"}, {"label" : "mapOfN", "tail" : "(n: Int)(key: Gen[R, A], value: Gen[R, B]): Gen[R, Map[A, B]]", "member" : "zio.test.Gen.mapOfN", "link" : "zio\/test\/Gen$.html#mapOfN[R<:zio.Has[zio.Random],A,B](n:Int)(key:zio.test.Gen[R,A],value:zio.test.Gen[R,B]):zio.test.Gen[R,Map[A,B]]", "kind" : "def"}, {"label" : "mapOf1", "tail" : "(key: Gen[R, A], value: Gen[R, B]): Gen[R, Map[A, B]]", "member" : "zio.test.Gen.mapOf1", "link" : "zio\/test\/Gen$.html#mapOf1[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],A,B](key:zio.test.Gen[R,A],value:zio.test.Gen[R,B]):zio.test.Gen[R,Map[A,B]]", "kind" : "def"}, {"label" : "mapOf", "tail" : "(key: Gen[R, A], value: Gen[R, B]): Gen[R, Map[A, B]]", "member" : "zio.test.Gen.mapOf", "link" : "zio\/test\/Gen$.html#mapOf[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],A,B](key:zio.test.Gen[R,A],value:zio.test.Gen[R,B]):zio.test.Gen[R,Map[A,B]]", "kind" : "def"}, {"label" : "long", "tail" : "(min: Long, max: Long): Gen[Has[Random], Long]", "member" : "zio.test.Gen.long", "link" : "zio\/test\/Gen$.html#long(min:Long,max:Long):zio.test.Gen[zio.Has[zio.Random],Long]", "kind" : "def"}, {"label" : "long", "tail" : ": Gen[Has[Random], Long]", "member" : "zio.test.Gen.long", "link" : "zio\/test\/Gen$.html#long:zio.test.Gen[zio.Has[zio.Random],Long]", "kind" : "val"}, {"label" : "listOfN", "tail" : "(n: Int)(g: Gen[R, A]): Gen[R, List[A]]", "member" : "zio.test.Gen.listOfN", "link" : "zio\/test\/Gen$.html#listOfN[R<:zio.Has[zio.Random],A](n:Int)(g:zio.test.Gen[R,A]):zio.test.Gen[R,List[A]]", "kind" : "def"}, {"label" : "listOfBounded", "tail" : "(min: Int, max: Int)(g: Gen[R, A]): Gen[R, List[A]]", "member" : "zio.test.Gen.listOfBounded", "link" : "zio\/test\/Gen$.html#listOfBounded[R<:zio.Has[zio.Random],A](min:Int,max:Int)(g:zio.test.Gen[R,A]):zio.test.Gen[R,List[A]]", "kind" : "def"}, {"label" : "listOf1", "tail" : "(g: Gen[R, A]): Gen[R, ::[A]]", "member" : "zio.test.Gen.listOf1", "link" : "zio\/test\/Gen$.html#listOf1[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],A](g:zio.test.Gen[R,A]):zio.test.Gen[R,::[A]]", "kind" : "def"}, {"label" : "listOf", "tail" : "(g: Gen[R, A]): Gen[R, List[A]]", "member" : "zio.test.Gen.listOf", "link" : "zio\/test\/Gen$.html#listOf[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],A](g:zio.test.Gen[R,A]):zio.test.Gen[R,List[A]]", "kind" : "def"}, {"label" : "large", "tail" : "(f: (Int) => Gen[R, A], min: Int): Gen[R, A]", "member" : "zio.test.Gen.large", "link" : "zio\/test\/Gen$.html#large[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],A](f:Int=>zio.test.Gen[R,A],min:Int):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "iso_8859_1", "tail" : ": Gen[Has[Random] with Has[Sized], String]", "member" : "zio.test.Gen.iso_8859_1", "link" : "zio\/test\/Gen$.html#iso_8859_1:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],String]", "kind" : "val"}, {"label" : "int", "tail" : "(min: Int, max: Int): Gen[Has[Random], Int]", "member" : "zio.test.Gen.int", "link" : "zio\/test\/Gen$.html#int(min:Int,max:Int):zio.test.Gen[zio.Has[zio.Random],Int]", "kind" : "def"}, {"label" : "int", "tail" : ": Gen[Has[Random], Int]", "member" : "zio.test.Gen.int", "link" : "zio\/test\/Gen$.html#int:zio.test.Gen[zio.Has[zio.Random],Int]", "kind" : "val"}, {"label" : "hexCharUpper", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.hexCharUpper", "link" : "zio\/test\/Gen$.html#hexCharUpper:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "hexCharLower", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.hexCharLower", "link" : "zio\/test\/Gen$.html#hexCharLower:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "hexChar", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.hexChar", "link" : "zio\/test\/Gen$.html#hexChar:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "float", "tail" : ": Gen[Has[Random], Float]", "member" : "zio.test.Gen.float", "link" : "zio\/test\/Gen$.html#float:zio.test.Gen[zio.Has[zio.Random],Float]", "kind" : "val"}, {"label" : "fromZIOSample", "tail" : "(effect: ZIO[R, Nothing, Sample[R, A]]): Gen[R, A]", "member" : "zio.test.Gen.fromZIOSample", "link" : "zio\/test\/Gen$.html#fromZIOSample[R,A](effect:zio.ZIO[R,Nothing,zio.test.Sample[R,A]]):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "fromZIO", "tail" : "(effect: URIO[R, A]): Gen[R, A]", "member" : "zio.test.Gen.fromZIO", "link" : "zio\/test\/Gen$.html#fromZIO[R,A](effect:zio.URIO[R,A]):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "fromRandomSample", "tail" : "(f: (Random) => UIO[Sample[R, A]]): Gen[R, A]", "member" : "zio.test.Gen.fromRandomSample", "link" : "zio\/test\/Gen$.html#fromRandomSample[R<:zio.Has[zio.Random],A](f:zio.Random=>zio.UIO[zio.test.Sample[R,A]]):zio.test.Gen[R,A]", "kind" : "final def"}, {"label" : "fromRandom", "tail" : "(f: (Random) => UIO[A]): Gen[Has[Random], A]", "member" : "zio.test.Gen.fromRandom", "link" : "zio\/test\/Gen$.html#fromRandom[A](f:zio.Random=>zio.UIO[A]):zio.test.Gen[zio.Has[zio.Random],A]", "kind" : "final def"}, {"label" : "fromIterable", "tail" : "(as: Iterable[A], shrinker: (A) => ZStream[R, Nothing, A]): Gen[R, A]", "member" : "zio.test.Gen.fromIterable", "link" : "zio\/test\/Gen$.html#fromIterable[R,A](as:Iterable[A],shrinker:A=>zio.stream.ZStream[R,Nothing,A]):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "fromEffectSample", "tail" : "(effect: ZIO[R, Nothing, Sample[R, A]]): Gen[R, A]", "member" : "zio.test.Gen.fromEffectSample", "link" : "zio\/test\/Gen$.html#fromEffectSample[R,A](effect:zio.ZIO[R,Nothing,zio.test.Sample[R,A]]):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(effect: URIO[R, A]): Gen[R, A]", "member" : "zio.test.Gen.fromEffect", "link" : "zio\/test\/Gen$.html#fromEffect[R,A](effect:zio.URIO[R,A]):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "exponential", "tail" : ": Gen[Has[Random], Double]", "member" : "zio.test.Gen.exponential", "link" : "zio\/test\/Gen$.html#exponential:zio.test.Gen[zio.Has[zio.Random],Double]", "kind" : "val"}, {"label" : "empty", "tail" : ": Gen[Any, Nothing]", "member" : "zio.test.Gen.empty", "link" : "zio\/test\/Gen$.html#empty:zio.test.Gen[Any,Nothing]", "kind" : "val"}, {"label" : "elements", "tail" : "(as: A*): Gen[Has[Random], A]", "member" : "zio.test.Gen.elements", "link" : "zio\/test\/Gen$.html#elements[A](as:A*):zio.test.Gen[zio.Has[zio.Random],A]", "kind" : "def"}, {"label" : "either", "tail" : "(left: Gen[R, A], right: Gen[R, B]): Gen[R, Either[A, B]]", "member" : "zio.test.Gen.either", "link" : "zio\/test\/Gen$.html#either[R<:zio.Has[zio.Random],A,B](left:zio.test.Gen[R,A],right:zio.test.Gen[R,B]):zio.test.Gen[R,Either[A,B]]", "kind" : "def"}, {"label" : "double", "tail" : "(min: Double, max: Double): Gen[Has[Random], Double]", "member" : "zio.test.Gen.double", "link" : "zio\/test\/Gen$.html#double(min:Double,max:Double):zio.test.Gen[zio.Has[zio.Random],Double]", "kind" : "def"}, {"label" : "double", "tail" : ": Gen[Has[Random], Double]", "member" : "zio.test.Gen.double", "link" : "zio\/test\/Gen$.html#double:zio.test.Gen[zio.Has[zio.Random],Double]", "kind" : "val"}, {"label" : "crossN", "tail" : "(gen1: Gen[R, A], gen2: Gen[R, B], gen3: Gen[R, C], gen4: Gen[R, D])(f: (A, B, C, D) => F): Gen[R, F]", "member" : "zio.test.Gen.crossN", "link" : "zio\/test\/Gen$.html#crossN[R,A,B,C,D,F](gen1:zio.test.Gen[R,A],gen2:zio.test.Gen[R,B],gen3:zio.test.Gen[R,C],gen4:zio.test.Gen[R,D])(f:(A,B,C,D)=>F):zio.test.Gen[R,F]", "kind" : "def"}, {"label" : "crossN", "tail" : "(gen1: Gen[R, A], gen2: Gen[R, B], gen3: Gen[R, C])(f: (A, B, C) => D): Gen[R, D]", "member" : "zio.test.Gen.crossN", "link" : "zio\/test\/Gen$.html#crossN[R,A,B,C,D](gen1:zio.test.Gen[R,A],gen2:zio.test.Gen[R,B],gen3:zio.test.Gen[R,C])(f:(A,B,C)=>D):zio.test.Gen[R,D]", "kind" : "def"}, {"label" : "crossN", "tail" : "(gen1: Gen[R, A], gen2: Gen[R, B])(f: (A, B) => C): Gen[R, C]", "member" : "zio.test.Gen.crossN", "link" : "zio\/test\/Gen$.html#crossN[R,A,B,C](gen1:zio.test.Gen[R,A],gen2:zio.test.Gen[R,B])(f:(A,B)=>C):zio.test.Gen[R,C]", "kind" : "def"}, {"label" : "crossAll", "tail" : "(gens: Iterable[Gen[R, A]]): Gen[R, List[A]]", "member" : "zio.test.Gen.crossAll", "link" : "zio\/test\/Gen$.html#crossAll[R,A](gens:Iterable[zio.test.Gen[R,A]]):zio.test.Gen[R,List[A]]", "kind" : "def"}, {"label" : "constSample", "tail" : "(sample: => Sample[R, A]): Gen[R, A]", "member" : "zio.test.Gen.constSample", "link" : "zio\/test\/Gen$.html#constSample[R,A](sample:=>zio.test.Sample[R,A]):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "const", "tail" : "(a: => A): Gen[Any, A]", "member" : "zio.test.Gen.const", "link" : "zio\/test\/Gen$.html#const[A](a:=>A):zio.test.Gen[Any,A]", "kind" : "def"}, {"label" : "concatAll", "tail" : "(gens: => Iterable[Gen[R, A]]): Gen[R, A]", "member" : "zio.test.Gen.concatAll", "link" : "zio\/test\/Gen$.html#concatAll[R,A](gens:=>Iterable[zio.test.Gen[R,A]]):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "chunkOfN", "tail" : "(n: Int)(g: Gen[R, A]): Gen[R, Chunk[A]]", "member" : "zio.test.Gen.chunkOfN", "link" : "zio\/test\/Gen$.html#chunkOfN[R<:zio.Has[zio.Random],A](n:Int)(g:zio.test.Gen[R,A]):zio.test.Gen[R,zio.Chunk[A]]", "kind" : "def"}, {"label" : "chunkOfBounded", "tail" : "(min: Int, max: Int)(g: Gen[R, A]): Gen[R, Chunk[A]]", "member" : "zio.test.Gen.chunkOfBounded", "link" : "zio\/test\/Gen$.html#chunkOfBounded[R<:zio.Has[zio.Random],A](min:Int,max:Int)(g:zio.test.Gen[R,A]):zio.test.Gen[R,zio.Chunk[A]]", "kind" : "def"}, {"label" : "chunkOf1", "tail" : "(g: Gen[R, A]): Gen[R, NonEmptyChunk[A]]", "member" : "zio.test.Gen.chunkOf1", "link" : "zio\/test\/Gen$.html#chunkOf1[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],A](g:zio.test.Gen[R,A]):zio.test.Gen[R,zio.NonEmptyChunk[A]]", "kind" : "def"}, {"label" : "chunkOf", "tail" : "(g: Gen[R, A]): Gen[R, Chunk[A]]", "member" : "zio.test.Gen.chunkOf", "link" : "zio\/test\/Gen$.html#chunkOf[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],A](g:zio.test.Gen[R,A]):zio.test.Gen[R,zio.Chunk[A]]", "kind" : "def"}, {"label" : "char", "tail" : "(min: Char, max: Char): Gen[Has[Random], Char]", "member" : "zio.test.Gen.char", "link" : "zio\/test\/Gen$.html#char(min:Char,max:Char):zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "def"}, {"label" : "char", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.char", "link" : "zio\/test\/Gen$.html#char:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "byte", "tail" : "(min: Byte, max: Byte): Gen[Has[Random], Byte]", "member" : "zio.test.Gen.byte", "link" : "zio\/test\/Gen$.html#byte(min:Byte,max:Byte):zio.test.Gen[zio.Has[zio.Random],Byte]", "kind" : "def"}, {"label" : "byte", "tail" : ": Gen[Has[Random], Byte]", "member" : "zio.test.Gen.byte", "link" : "zio\/test\/Gen$.html#byte:zio.test.Gen[zio.Has[zio.Random],Byte]", "kind" : "val"}, {"label" : "bounded", "tail" : "(min: Int, max: Int)(f: (Int) => Gen[R, A]): Gen[R, A]", "member" : "zio.test.Gen.bounded", "link" : "zio\/test\/Gen$.html#bounded[R<:zio.Has[zio.Random],A](min:Int,max:Int)(f:Int=>zio.test.Gen[R,A]):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "boolean", "tail" : ": Gen[Has[Random], Boolean]", "member" : "zio.test.Gen.boolean", "link" : "zio\/test\/Gen$.html#boolean:zio.test.Gen[zio.Has[zio.Random],Boolean]", "kind" : "val"}, {"label" : "bigInt", "tail" : "(min: BigInt, max: BigInt): Gen[Has[Random], BigInt]", "member" : "zio.test.Gen.bigInt", "link" : "zio\/test\/Gen$.html#bigInt(min:BigInt,max:BigInt):zio.test.Gen[zio.Has[zio.Random],BigInt]", "kind" : "def"}, {"label" : "bigDecimal", "tail" : "(min: BigDecimal, max: BigDecimal): Gen[Has[Random], BigDecimal]", "member" : "zio.test.Gen.bigDecimal", "link" : "zio\/test\/Gen$.html#bigDecimal(min:BigDecimal,max:BigDecimal):zio.test.Gen[zio.Has[zio.Random],BigDecimal]", "kind" : "def"}, {"label" : "asciiString", "tail" : ": Gen[Has[Random] with Has[Sized], String]", "member" : "zio.test.Gen.asciiString", "link" : "zio\/test\/Gen$.html#asciiString:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],String]", "kind" : "val"}, {"label" : "asciiChar", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.asciiChar", "link" : "zio\/test\/Gen$.html#asciiChar:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "anyUUID", "tail" : ": Gen[Has[Random], UUID]", "member" : "zio.test.Gen.anyUUID", "link" : "zio\/test\/Gen$.html#anyUUID:zio.test.Gen[zio.Has[zio.Random],java.util.UUID]", "kind" : "val"}, {"label" : "anyUpperHexChar", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.anyUpperHexChar", "link" : "zio\/test\/Gen$.html#anyUpperHexChar:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "anyUnicodeChar", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.anyUnicodeChar", "link" : "zio\/test\/Gen$.html#anyUnicodeChar:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "anyString", "tail" : "(): Gen[Has[Random] with Has[Sized], String]", "member" : "zio.test.Gen.anyString", "link" : "zio\/test\/Gen$.html#anyString:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],String]", "kind" : "def"}, {"label" : "anyShort", "tail" : ": Gen[Has[Random], Short]", "member" : "zio.test.Gen.anyShort", "link" : "zio\/test\/Gen$.html#anyShort:zio.test.Gen[zio.Has[zio.Random],Short]", "kind" : "val"}, {"label" : "anyLowerHexChar", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.anyLowerHexChar", "link" : "zio\/test\/Gen$.html#anyLowerHexChar:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "anyLong", "tail" : ": Gen[Has[Random], Long]", "member" : "zio.test.Gen.anyLong", "link" : "zio\/test\/Gen$.html#anyLong:zio.test.Gen[zio.Has[zio.Random],Long]", "kind" : "val"}, {"label" : "anyInt", "tail" : ": Gen[Has[Random], Int]", "member" : "zio.test.Gen.anyInt", "link" : "zio\/test\/Gen$.html#anyInt:zio.test.Gen[zio.Has[zio.Random],Int]", "kind" : "val"}, {"label" : "anyHexChar", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.anyHexChar", "link" : "zio\/test\/Gen$.html#anyHexChar:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "anyFloat", "tail" : ": Gen[Has[Random], Float]", "member" : "zio.test.Gen.anyFloat", "link" : "zio\/test\/Gen$.html#anyFloat:zio.test.Gen[zio.Has[zio.Random],Float]", "kind" : "val"}, {"label" : "anyDouble", "tail" : ": Gen[Has[Random], Double]", "member" : "zio.test.Gen.anyDouble", "link" : "zio\/test\/Gen$.html#anyDouble:zio.test.Gen[zio.Has[zio.Random],Double]", "kind" : "val"}, {"label" : "anyChar", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.anyChar", "link" : "zio\/test\/Gen$.html#anyChar:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "anyByte", "tail" : ": Gen[Has[Random], Byte]", "member" : "zio.test.Gen.anyByte", "link" : "zio\/test\/Gen$.html#anyByte:zio.test.Gen[zio.Has[zio.Random],Byte]", "kind" : "val"}, {"label" : "anyASCIIChar", "tail" : "(): Gen[Has[Random], Char]", "member" : "zio.test.Gen.anyASCIIChar", "link" : "zio\/test\/Gen$.html#anyASCIIChar:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "def"}, {"label" : "anyASCIIString", "tail" : "(): Gen[Has[Random] with Has[Sized], String]", "member" : "zio.test.Gen.anyASCIIString", "link" : "zio\/test\/Gen$.html#anyASCIIString:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],String]", "kind" : "def"}, {"label" : "alphaNumericStringBounded", "tail" : "(min: Int, max: Int): Gen[Has[Random] with Has[Sized], String]", "member" : "zio.test.Gen.alphaNumericStringBounded", "link" : "zio\/test\/Gen$.html#alphaNumericStringBounded(min:Int,max:Int):zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],String]", "kind" : "def"}, {"label" : "alphaNumericString", "tail" : ": Gen[Has[Random] with Has[Sized], String]", "member" : "zio.test.Gen.alphaNumericString", "link" : "zio\/test\/Gen$.html#alphaNumericString:zio.test.Gen[zio.Has[zio.Random]withzio.Has[zio.test.Sized],String]", "kind" : "val"}, {"label" : "alphaNumericChar", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.alphaNumericChar", "link" : "zio\/test\/Gen$.html#alphaNumericChar:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "alphaChar", "tail" : ": Gen[Has[Random], Char]", "member" : "zio.test.Gen.alphaChar", "link" : "zio\/test\/Gen$.html#alphaChar:zio.test.Gen[zio.Has[zio.Random],Char]", "kind" : "val"}, {"label" : "zoneOffset", "tail" : "(): Gen[Has[Random], ZoneOffset]", "member" : "zio.test.TimeVariants.zoneOffset", "link" : "zio\/test\/Gen$.html#zoneOffset:zio.test.Gen[zio.Has[zio.Random],java.time.ZoneOffset]", "kind" : "final def"}, {"label" : "zoneId", "tail" : "(): Gen[Has[Random], ZoneId]", "member" : "zio.test.TimeVariants.zoneId", "link" : "zio\/test\/Gen$.html#zoneId:zio.test.Gen[zio.Has[zio.Random],java.time.ZoneId]", "kind" : "final def"}, {"label" : "zonedDateTime", "tail" : "(): Gen[Has[Random], ZonedDateTime]", "member" : "zio.test.TimeVariants.zonedDateTime", "link" : "zio\/test\/Gen$.html#zonedDateTime:zio.test.Gen[zio.Has[zio.Random],java.time.ZonedDateTime]", "kind" : "final def"}, {"label" : "yearMonth", "tail" : "(): Gen[Has[Random], YearMonth]", "member" : "zio.test.TimeVariants.yearMonth", "link" : "zio\/test\/Gen$.html#yearMonth:zio.test.Gen[zio.Has[zio.Random],java.time.YearMonth]", "kind" : "final def"}, {"label" : "year", "tail" : "(): Gen[Has[Random], Year]", "member" : "zio.test.TimeVariants.year", "link" : "zio\/test\/Gen$.html#year:zio.test.Gen[zio.Has[zio.Random],java.time.Year]", "kind" : "final def"}, {"label" : "period", "tail" : "(): Gen[Has[Random], Period]", "member" : "zio.test.TimeVariants.period", "link" : "zio\/test\/Gen$.html#period:zio.test.Gen[zio.Has[zio.Random],java.time.Period]", "kind" : "final def"}, {"label" : "offsetTime", "tail" : "(): Gen[Has[Random], OffsetTime]", "member" : "zio.test.TimeVariants.offsetTime", "link" : "zio\/test\/Gen$.html#offsetTime:zio.test.Gen[zio.Has[zio.Random],java.time.OffsetTime]", "kind" : "final def"}, {"label" : "offsetDateTime", "tail" : "(min: OffsetDateTime, max: OffsetDateTime): Gen[Has[Random], OffsetDateTime]", "member" : "zio.test.TimeVariants.offsetDateTime", "link" : "zio\/test\/Gen$.html#offsetDateTime(min:java.time.OffsetDateTime,max:java.time.OffsetDateTime):zio.test.Gen[zio.Has[zio.Random],java.time.OffsetDateTime]", "kind" : "final def"}, {"label" : "offsetDateTime", "tail" : "(): Gen[Has[Random], OffsetDateTime]", "member" : "zio.test.TimeVariants.offsetDateTime", "link" : "zio\/test\/Gen$.html#offsetDateTime:zio.test.Gen[zio.Has[zio.Random],java.time.OffsetDateTime]", "kind" : "final def"}, {"label" : "monthDay", "tail" : "(): Gen[Has[Random], MonthDay]", "member" : "zio.test.TimeVariants.monthDay", "link" : "zio\/test\/Gen$.html#monthDay:zio.test.Gen[zio.Has[zio.Random],java.time.MonthDay]", "kind" : "final def"}, {"label" : "month", "tail" : "(): Gen[Has[Random], Month]", "member" : "zio.test.TimeVariants.month", "link" : "zio\/test\/Gen$.html#month:zio.test.Gen[zio.Has[zio.Random],java.time.Month]", "kind" : "final def"}, {"label" : "localTime", "tail" : "(): Gen[Has[Random], LocalTime]", "member" : "zio.test.TimeVariants.localTime", "link" : "zio\/test\/Gen$.html#localTime:zio.test.Gen[zio.Has[zio.Random],java.time.LocalTime]", "kind" : "final def"}, {"label" : "localDateTime", "tail" : "(min: LocalDateTime, max: LocalDateTime): Gen[Has[Random], LocalDateTime]", "member" : "zio.test.TimeVariants.localDateTime", "link" : "zio\/test\/Gen$.html#localDateTime(min:java.time.LocalDateTime,max:java.time.LocalDateTime):zio.test.Gen[zio.Has[zio.Random],java.time.LocalDateTime]", "kind" : "final def"}, {"label" : "localDateTime", "tail" : "(): Gen[Has[Random], LocalDateTime]", "member" : "zio.test.TimeVariants.localDateTime", "link" : "zio\/test\/Gen$.html#localDateTime:zio.test.Gen[zio.Has[zio.Random],java.time.LocalDateTime]", "kind" : "final def"}, {"label" : "localDate", "tail" : "(): Gen[Has[Random], LocalDate]", "member" : "zio.test.TimeVariants.localDate", "link" : "zio\/test\/Gen$.html#localDate:zio.test.Gen[zio.Has[zio.Random],java.time.LocalDate]", "kind" : "final def"}, {"label" : "instant", "tail" : "(min: Instant, max: Instant): Gen[Has[Random], Instant]", "member" : "zio.test.TimeVariants.instant", "link" : "zio\/test\/Gen$.html#instant(min:java.time.Instant,max:java.time.Instant):zio.test.Gen[zio.Has[zio.Random],java.time.Instant]", "kind" : "final def"}, {"label" : "instant", "tail" : "(): Gen[Has[Random], Instant]", "member" : "zio.test.TimeVariants.instant", "link" : "zio\/test\/Gen$.html#instant:zio.test.Gen[zio.Has[zio.Random],java.time.Instant]", "kind" : "final def"}, {"label" : "finiteDuration", "tail" : "(min: zio.Duration, max: zio.Duration): Gen[Has[Random], zio.Duration]", "member" : "zio.test.TimeVariants.finiteDuration", "link" : "zio\/test\/Gen$.html#finiteDuration(min:zio.Duration,max:zio.Duration):zio.test.Gen[zio.Has[zio.Random],zio.Duration]", "kind" : "final def"}, {"label" : "finiteDuration", "tail" : "(): Gen[Has[Random], zio.Duration]", "member" : "zio.test.TimeVariants.finiteDuration", "link" : "zio\/test\/Gen$.html#finiteDuration:zio.test.Gen[zio.Has[zio.Random],zio.Duration]", "kind" : "final def"}, {"label" : "dayOfWeek", "tail" : "(): Gen[Has[Random], DayOfWeek]", "member" : "zio.test.TimeVariants.dayOfWeek", "link" : "zio\/test\/Gen$.html#dayOfWeek:zio.test.Gen[zio.Has[zio.Random],java.time.DayOfWeek]", "kind" : "final def"}, {"label" : "anyZoneOffset", "tail" : "(): Gen[Has[Random], ZoneOffset]", "member" : "zio.test.TimeVariants.anyZoneOffset", "link" : "zio\/test\/Gen$.html#anyZoneOffset:zio.test.Gen[zio.Has[zio.Random],java.time.ZoneOffset]", "kind" : "final def"}, {"label" : "anyZoneId", "tail" : "(): Gen[Has[Random], ZoneId]", "member" : "zio.test.TimeVariants.anyZoneId", "link" : "zio\/test\/Gen$.html#anyZoneId:zio.test.Gen[zio.Has[zio.Random],java.time.ZoneId]", "kind" : "final def"}, {"label" : "anyZonedDateTime", "tail" : "(): Gen[Has[Random], ZonedDateTime]", "member" : "zio.test.TimeVariants.anyZonedDateTime", "link" : "zio\/test\/Gen$.html#anyZonedDateTime:zio.test.Gen[zio.Has[zio.Random],java.time.ZonedDateTime]", "kind" : "final def"}, {"label" : "anyYearMonth", "tail" : "(): Gen[Has[Random], YearMonth]", "member" : "zio.test.TimeVariants.anyYearMonth", "link" : "zio\/test\/Gen$.html#anyYearMonth:zio.test.Gen[zio.Has[zio.Random],java.time.YearMonth]", "kind" : "final def"}, {"label" : "anyYear", "tail" : "(): Gen[Has[Random], Year]", "member" : "zio.test.TimeVariants.anyYear", "link" : "zio\/test\/Gen$.html#anyYear:zio.test.Gen[zio.Has[zio.Random],java.time.Year]", "kind" : "final def"}, {"label" : "anyPeriod", "tail" : "(): Gen[Has[Random], Period]", "member" : "zio.test.TimeVariants.anyPeriod", "link" : "zio\/test\/Gen$.html#anyPeriod:zio.test.Gen[zio.Has[zio.Random],java.time.Period]", "kind" : "final def"}, {"label" : "anyOffsetTime", "tail" : "(): Gen[Has[Random], OffsetTime]", "member" : "zio.test.TimeVariants.anyOffsetTime", "link" : "zio\/test\/Gen$.html#anyOffsetTime:zio.test.Gen[zio.Has[zio.Random],java.time.OffsetTime]", "kind" : "final def"}, {"label" : "anyOffsetDateTime", "tail" : "(): Gen[Has[Random], OffsetDateTime]", "member" : "zio.test.TimeVariants.anyOffsetDateTime", "link" : "zio\/test\/Gen$.html#anyOffsetDateTime:zio.test.Gen[zio.Has[zio.Random],java.time.OffsetDateTime]", "kind" : "final def"}, {"label" : "anyMonthDay", "tail" : "(): Gen[Has[Random], MonthDay]", "member" : "zio.test.TimeVariants.anyMonthDay", "link" : "zio\/test\/Gen$.html#anyMonthDay:zio.test.Gen[zio.Has[zio.Random],java.time.MonthDay]", "kind" : "final def"}, {"label" : "anyMonth", "tail" : "(): Gen[Has[Random], Month]", "member" : "zio.test.TimeVariants.anyMonth", "link" : "zio\/test\/Gen$.html#anyMonth:zio.test.Gen[zio.Has[zio.Random],java.time.Month]", "kind" : "final def"}, {"label" : "anyLocalDateTime", "tail" : "(): Gen[Has[Random], LocalDateTime]", "member" : "zio.test.TimeVariants.anyLocalDateTime", "link" : "zio\/test\/Gen$.html#anyLocalDateTime:zio.test.Gen[zio.Has[zio.Random],java.time.LocalDateTime]", "kind" : "final def"}, {"label" : "anyLocalTime", "tail" : "(): Gen[Has[Random], LocalTime]", "member" : "zio.test.TimeVariants.anyLocalTime", "link" : "zio\/test\/Gen$.html#anyLocalTime:zio.test.Gen[zio.Has[zio.Random],java.time.LocalTime]", "kind" : "final def"}, {"label" : "anyLocalDate", "tail" : "(): Gen[Has[Random], LocalDate]", "member" : "zio.test.TimeVariants.anyLocalDate", "link" : "zio\/test\/Gen$.html#anyLocalDate:zio.test.Gen[zio.Has[zio.Random],java.time.LocalDate]", "kind" : "final def"}, {"label" : "anyInstant", "tail" : "(): Gen[Has[Random], Instant]", "member" : "zio.test.TimeVariants.anyInstant", "link" : "zio\/test\/Gen$.html#anyInstant:zio.test.Gen[zio.Has[zio.Random],java.time.Instant]", "kind" : "final def"}, {"label" : "anyFiniteDuration", "tail" : "(): Gen[Has[Random], zio.Duration]", "member" : "zio.test.TimeVariants.anyFiniteDuration", "link" : "zio\/test\/Gen$.html#anyFiniteDuration:zio.test.Gen[zio.Has[zio.Random],zio.Duration]", "kind" : "final def"}, {"label" : "anyDayOfWeek", "tail" : "(): Gen[Has[Random], DayOfWeek]", "member" : "zio.test.TimeVariants.anyDayOfWeek", "link" : "zio\/test\/Gen$.html#anyDayOfWeek:zio.test.Gen[zio.Has[zio.Random],java.time.DayOfWeek]", "kind" : "final def"}, {"label" : "functionWith4", "tail" : "(gen: Gen[R, E])(hash: (A, B, C, D) => Int): Gen[R, (A, B, C, D) => E]", "member" : "zio.test.FunctionVariants.functionWith4", "link" : "zio\/test\/Gen$.html#functionWith4[R,A,B,C,D,E](gen:zio.test.Gen[R,E])(hash:(A,B,C,D)=>Int):zio.test.Gen[R,(A,B,C,D)=>E]", "kind" : "final def"}, {"label" : "functionWith3", "tail" : "(gen: Gen[R, D])(hash: (A, B, C) => Int): Gen[R, (A, B, C) => D]", "member" : "zio.test.FunctionVariants.functionWith3", "link" : "zio\/test\/Gen$.html#functionWith3[R,A,B,C,D](gen:zio.test.Gen[R,D])(hash:(A,B,C)=>Int):zio.test.Gen[R,(A,B,C)=>D]", "kind" : "final def"}, {"label" : "functionWith2", "tail" : "(gen: Gen[R, C])(hash: (A, B) => Int): Gen[R, (A, B) => C]", "member" : "zio.test.FunctionVariants.functionWith2", "link" : "zio\/test\/Gen$.html#functionWith2[R,A,B,C](gen:zio.test.Gen[R,C])(hash:(A,B)=>Int):zio.test.Gen[R,(A,B)=>C]", "kind" : "final def"}, {"label" : "functionWith", "tail" : "(gen: Gen[R, B])(hash: (A) => Int): Gen[R, (A) => B]", "member" : "zio.test.FunctionVariants.functionWith", "link" : "zio\/test\/Gen$.html#functionWith[R,A,B](gen:zio.test.Gen[R,B])(hash:A=>Int):zio.test.Gen[R,A=>B]", "kind" : "final def"}, {"label" : "function4", "tail" : "(gen: Gen[R, E]): Gen[R, (A, B, C, D) => E]", "member" : "zio.test.FunctionVariants.function4", "link" : "zio\/test\/Gen$.html#function4[R,A,B,C,D,E](gen:zio.test.Gen[R,E]):zio.test.Gen[R,(A,B,C,D)=>E]", "kind" : "final def"}, {"label" : "function3", "tail" : "(gen: Gen[R, D]): Gen[R, (A, B, C) => D]", "member" : "zio.test.FunctionVariants.function3", "link" : "zio\/test\/Gen$.html#function3[R,A,B,C,D](gen:zio.test.Gen[R,D]):zio.test.Gen[R,(A,B,C)=>D]", "kind" : "final def"}, {"label" : "function2", "tail" : "(gen: Gen[R, C]): Gen[R, (A, B) => C]", "member" : "zio.test.FunctionVariants.function2", "link" : "zio\/test\/Gen$.html#function2[R,A,B,C](gen:zio.test.Gen[R,C]):zio.test.Gen[R,(A,B)=>C]", "kind" : "final def"}, {"label" : "function", "tail" : "(gen: Gen[R, B]): Gen[R, (A) => B]", "member" : "zio.test.FunctionVariants.function", "link" : "zio\/test\/Gen$.html#function[R,A,B](gen:zio.test.Gen[R,B]):zio.test.Gen[R,A=>B]", "kind" : "final def"}, {"label" : "successes", "tail" : "(gen: Gen[R, A]): Gen[R, UIO[A]]", "member" : "zio.test.GenZIO.successes", "link" : "zio\/test\/Gen$.html#successes[R,A](gen:zio.test.Gen[R,A]):zio.test.Gen[R,zio.UIO[A]]", "kind" : "final def"}, {"label" : "parallel", "tail" : "(zio: ZIO[R, E, A]): Gen[Any, ZIO[R, E, A]]", "member" : "zio.test.GenZIO.parallel", "link" : "zio\/test\/Gen$.html#parallel[R,E,A](zio:zio.ZIO[R,E,A]):zio.test.Gen[Any,zio.ZIO[R,E,A]]", "kind" : "final def"}, {"label" : "failures", "tail" : "(gen: Gen[R, E]): Gen[R, IO[E, Nothing]]", "member" : "zio.test.GenZIO.failures", "link" : "zio\/test\/Gen$.html#failures[R,E](gen:zio.test.Gen[R,E]):zio.test.Gen[R,zio.IO[E,Nothing]]", "kind" : "final def"}, {"label" : "died", "tail" : "(gen: Gen[R, Throwable]): Gen[R, UIO[Nothing]]", "member" : "zio.test.GenZIO.died", "link" : "zio\/test\/Gen$.html#died[R](gen:zio.test.Gen[R,Throwable]):zio.test.Gen[R,zio.UIO[Nothing]]", "kind" : "final def"}, {"label" : "concurrent", "tail" : "(zio: ZIO[R, E, A]): Gen[Any, ZIO[R, E, A]]", "member" : "zio.test.GenZIO.concurrent", "link" : "zio\/test\/Gen$.html#concurrent[R,E,A](zio:zio.ZIO[R,E,A]):zio.test.Gen[Any,zio.ZIO[R,E,A]]", "kind" : "final def"}, {"label" : "chainedN", "tail" : "(n: Int)(zio: Gen[R, ZIO[Env, E, A]]): Gen[R, ZIO[Env, E, A]]", "member" : "zio.test.GenZIO.chainedN", "link" : "zio\/test\/Gen$.html#chainedN[R<:zio.Has[zio.Random],Env,E,A](n:Int)(zio:zio.test.Gen[R,zio.ZIO[Env,E,A]]):zio.test.Gen[R,zio.ZIO[Env,E,A]]", "kind" : "final def"}, {"label" : "chained", "tail" : "(gen: Gen[R, ZIO[Env, E, A]]): Gen[R, ZIO[Env, E, A]]", "member" : "zio.test.GenZIO.chained", "link" : "zio\/test\/Gen$.html#chained[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],Env,E,A](gen:zio.test.Gen[R,zio.ZIO[Env,E,A]]):zio.test.Gen[R,zio.ZIO[Env,E,A]]", "kind" : "final def"}, {"label" : "causes", "tail" : "(e: Gen[R, E], t: Gen[R, Throwable]): Gen[R, Cause[E]]", "member" : "zio.test.GenZIO.causes", "link" : "zio\/test\/Gen$.html#causes[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],E](e:zio.test.Gen[R,E],t:zio.test.Gen[R,Throwable]):zio.test.Gen[R,zio.Cause[E]]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Gen$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Gen$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Gen$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Gen$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Gen$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Gen$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Gen$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Gen$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Gen$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Gen$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Gen$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Gen$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Gen$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Gen$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Gen$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Gen$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Gen$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Gen$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Gen$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "zipWith", "tail" : "(that: Gen[R1, B])(f: (A, B) => C): Gen[R1, C]", "member" : "zio.test.Gen.zipWith", "link" : "zio\/test\/Gen.html#zipWith[R1<:R,B,C](that:zio.test.Gen[R1,B])(f:(A,B)=>C):zio.test.Gen[R1,C]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Gen[R1, B])(zippable: Zippable[A, B]): Gen[R1, Out]", "member" : "zio.test.Gen.zip", "link" : "zio\/test\/Gen.html#zip[R1<:R,B](that:zio.test.Gen[R1,B])(implicitzippable:zio.Zippable[A,B]):zio.test.Gen[R1,zippable.Out]", "kind" : "def"}, {"label" : "runHead", "tail" : "(): ZIO[R, Nothing, Option[A]]", "member" : "zio.test.Gen.runHead", "link" : "zio\/test\/Gen.html#runHead:zio.ZIO[R,Nothing,Option[A]]", "kind" : "def"}, {"label" : "runCollectN", "tail" : "(n: Int): ZIO[R, Nothing, List[A]]", "member" : "zio.test.Gen.runCollectN", "link" : "zio\/test\/Gen.html#runCollectN(n:Int):zio.ZIO[R,Nothing,List[A]]", "kind" : "def"}, {"label" : "runCollect", "tail" : "(): ZIO[R, Nothing, List[A]]", "member" : "zio.test.Gen.runCollect", "link" : "zio\/test\/Gen.html#runCollect:zio.ZIO[R,Nothing,List[A]]", "kind" : "def"}, {"label" : "reshrink", "tail" : "(f: (A) => Sample[R1, B]): Gen[R1, B]", "member" : "zio.test.Gen.reshrink", "link" : "zio\/test\/Gen.html#reshrink[R1<:R,B](f:A=>zio.test.Sample[R1,B]):zio.test.Gen[R1,B]", "kind" : "def"}, {"label" : "noShrink", "tail" : "(): Gen[R, A]", "member" : "zio.test.Gen.noShrink", "link" : "zio\/test\/Gen.html#noShrink:zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "mapZIO", "tail" : "(f: (A) => ZIO[R1, Nothing, B]): Gen[R1, B]", "member" : "zio.test.Gen.mapZIO", "link" : "zio\/test\/Gen.html#mapZIO[R1<:R,B](f:A=>zio.ZIO[R1,Nothing,B]):zio.test.Gen[R1,B]", "kind" : "def"}, {"label" : "mapM", "tail" : "(f: (A) => ZIO[R1, Nothing, B]): Gen[R1, B]", "member" : "zio.test.Gen.mapM", "link" : "zio\/test\/Gen.html#mapM[R1<:R,B](f:A=>zio.ZIO[R1,Nothing,B]):zio.test.Gen[R1,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): Gen[R, B]", "member" : "zio.test.Gen.map", "link" : "zio\/test\/Gen.html#map[B](f:A=>B):zio.test.Gen[R,B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Gen[R1, B]]): Gen[R1, B]", "member" : "zio.test.Gen.flatten", "link" : "zio\/test\/Gen.html#flatten[R1<:R,B](implicitev:A<:<zio.test.Gen[R1,B]):zio.test.Gen[R1,B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => Gen[R1, B]): Gen[R1, B]", "member" : "zio.test.Gen.flatMap", "link" : "zio\/test\/Gen.html#flatMap[R1<:R,B](f:A=>zio.test.Gen[R1,B]):zio.test.Gen[R1,B]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(f: (A) => Boolean): Gen[R, A]", "member" : "zio.test.Gen.withFilter", "link" : "zio\/test\/Gen.html#withFilter(f:A=>Boolean):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(f: (A) => Boolean): Gen[R, A]", "member" : "zio.test.Gen.filterNot", "link" : "zio\/test\/Gen.html#filterNot(f:A=>Boolean):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (A) => Boolean): Gen[R, A]", "member" : "zio.test.Gen.filter", "link" : "zio\/test\/Gen.html#filter(f:A=>Boolean):zio.test.Gen[R,A]", "kind" : "def"}, {"label" : "crossWith", "tail" : "(that: Gen[R1, B])(f: (A, B) => C): Gen[R1, C]", "member" : "zio.test.Gen.crossWith", "link" : "zio\/test\/Gen.html#crossWith[R1<:R,B,C](that:zio.test.Gen[R1,B])(f:(A,B)=>C):zio.test.Gen[R1,C]", "kind" : "def"}, {"label" : "cross", "tail" : "(that: Gen[R1, B])(zippable: Zippable[A, B]): Gen[R1, Out]", "member" : "zio.test.Gen.cross", "link" : "zio\/test\/Gen.html#cross[R1<:R,B](that:zio.test.Gen[R1,B])(implicitzippable:zio.Zippable[A,B]):zio.test.Gen[R1,zippable.Out]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Gen[R, B]", "member" : "zio.test.Gen.collect", "link" : "zio\/test\/Gen.html#collect[B](pf:PartialFunction[A,B]):zio.test.Gen[R,B]", "kind" : "def"}, {"label" : "<*>", "tail" : "(that: Gen[R1, B])(zippable: Zippable[A, B]): Gen[R1, Out]", "member" : "zio.test.Gen.<*>", "link" : "zio\/test\/Gen.html#<*>[R1<:R,B](that:zio.test.Gen[R1,B])(implicitzippable:zio.Zippable[A,B]):zio.test.Gen[R1,zippable.Out]", "kind" : "def"}, {"label" : "<&>", "tail" : "(that: Gen[R1, B])(zippable: Zippable[A, B]): Gen[R1, Out]", "member" : "zio.test.Gen.<&>", "link" : "zio\/test\/Gen.html#<&>[R1<:R,B](that:zio.test.Gen[R1,B])(implicitzippable:zio.Zippable[A,B]):zio.test.Gen[R1,zippable.Out]", "kind" : "def"}, {"member" : "zio.test.Gen#<init>", "error" : "unsupported entity"}, {"label" : "sample", "tail" : ": ZStream[R, Nothing, Sample[R, A]]", "member" : "zio.test.Gen.sample", "link" : "zio\/test\/Gen.html#sample:zio.stream.ZStream[R,Nothing,zio.test.Sample[R,A]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/Gen.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Gen.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Gen.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Gen.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Gen.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Gen.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Gen.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Gen.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Gen.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Gen.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Gen.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Gen.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Gen.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Gen.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Gen.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Gen.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Gen.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/test\/Gen.html", "kind" : "case class"}, {"name" : "zio.test.GenFailureDetails", "shortDescription" : "GenFailureDetails keeps track of relevant information related to a failure in a generative test.", "object" : "zio\/test\/GenFailureDetails$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/GenFailureDetails.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/GenFailureDetails.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/GenFailureDetails.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/GenFailureDetails.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/GenFailureDetails.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/GenFailureDetails.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/GenFailureDetails.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/GenFailureDetails.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/GenFailureDetails.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/GenFailureDetails.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/GenFailureDetails.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/GenFailureDetails.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/GenFailureDetails.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/GenFailureDetails.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/GenFailureDetails.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/GenFailureDetails.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/GenFailureDetails.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/GenFailureDetails.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/GenFailureDetails.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "iterations", "tail" : ": Long", "member" : "zio.test.GenFailureDetails.iterations", "link" : "zio\/test\/GenFailureDetails.html#iterations:Long", "kind" : "abstract val"}, {"label" : "shrunkenInput", "tail" : ": Value", "member" : "zio.test.GenFailureDetails.shrunkenInput", "link" : "zio\/test\/GenFailureDetails.html#shrunkenInput:GenFailureDetails.this.Value", "kind" : "abstract val"}, {"label" : "initialInput", "tail" : ": Value", "member" : "zio.test.GenFailureDetails.initialInput", "link" : "zio\/test\/GenFailureDetails.html#initialInput:GenFailureDetails.this.Value", "kind" : "abstract val"}, {"member" : "zio.test.GenFailureDetails.Value", "error" : "unsupported entity"}], "members_object" : [{"label" : "apply", "tail" : "(initialInput0: A, shrunkenInput0: A, iterations0: Long): GenFailureDetails", "member" : "zio.test.GenFailureDetails.apply", "link" : "zio\/test\/GenFailureDetails$.html#apply[A](initialInput0:A,shrunkenInput0:A,iterations0:Long):zio.test.GenFailureDetails", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/GenFailureDetails$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/GenFailureDetails$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/GenFailureDetails$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/GenFailureDetails$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/GenFailureDetails$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/GenFailureDetails$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/GenFailureDetails$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/GenFailureDetails$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/GenFailureDetails$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/GenFailureDetails$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/GenFailureDetails$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/GenFailureDetails$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/GenFailureDetails$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/GenFailureDetails$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/GenFailureDetails$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/GenFailureDetails$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/GenFailureDetails$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/GenFailureDetails$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/GenFailureDetails$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/GenFailureDetails.html", "kind" : "class"}, {"name" : "zio.test.GenZIO", "trait" : "zio\/test\/GenZIO.html", "kind" : "trait", "members_trait" : [{"label" : "successes", "tail" : "(gen: Gen[R, A]): Gen[R, UIO[A]]", "member" : "zio.test.GenZIO.successes", "link" : "zio\/test\/GenZIO.html#successes[R,A](gen:zio.test.Gen[R,A]):zio.test.Gen[R,zio.UIO[A]]", "kind" : "final def"}, {"label" : "parallel", "tail" : "(zio: ZIO[R, E, A]): Gen[Any, ZIO[R, E, A]]", "member" : "zio.test.GenZIO.parallel", "link" : "zio\/test\/GenZIO.html#parallel[R,E,A](zio:zio.ZIO[R,E,A]):zio.test.Gen[Any,zio.ZIO[R,E,A]]", "kind" : "final def"}, {"label" : "failures", "tail" : "(gen: Gen[R, E]): Gen[R, IO[E, Nothing]]", "member" : "zio.test.GenZIO.failures", "link" : "zio\/test\/GenZIO.html#failures[R,E](gen:zio.test.Gen[R,E]):zio.test.Gen[R,zio.IO[E,Nothing]]", "kind" : "final def"}, {"label" : "died", "tail" : "(gen: Gen[R, Throwable]): Gen[R, UIO[Nothing]]", "member" : "zio.test.GenZIO.died", "link" : "zio\/test\/GenZIO.html#died[R](gen:zio.test.Gen[R,Throwable]):zio.test.Gen[R,zio.UIO[Nothing]]", "kind" : "final def"}, {"label" : "concurrent", "tail" : "(zio: ZIO[R, E, A]): Gen[Any, ZIO[R, E, A]]", "member" : "zio.test.GenZIO.concurrent", "link" : "zio\/test\/GenZIO.html#concurrent[R,E,A](zio:zio.ZIO[R,E,A]):zio.test.Gen[Any,zio.ZIO[R,E,A]]", "kind" : "final def"}, {"label" : "chainedN", "tail" : "(n: Int)(zio: Gen[R, ZIO[Env, E, A]]): Gen[R, ZIO[Env, E, A]]", "member" : "zio.test.GenZIO.chainedN", "link" : "zio\/test\/GenZIO.html#chainedN[R<:zio.Has[zio.Random],Env,E,A](n:Int)(zio:zio.test.Gen[R,zio.ZIO[Env,E,A]]):zio.test.Gen[R,zio.ZIO[Env,E,A]]", "kind" : "final def"}, {"label" : "chained", "tail" : "(gen: Gen[R, ZIO[Env, E, A]]): Gen[R, ZIO[Env, E, A]]", "member" : "zio.test.GenZIO.chained", "link" : "zio\/test\/GenZIO.html#chained[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],Env,E,A](gen:zio.test.Gen[R,zio.ZIO[Env,E,A]]):zio.test.Gen[R,zio.ZIO[Env,E,A]]", "kind" : "final def"}, {"label" : "causes", "tail" : "(e: Gen[R, E], t: Gen[R, Throwable]): Gen[R, Cause[E]]", "member" : "zio.test.GenZIO.causes", "link" : "zio\/test\/GenZIO.html#causes[R<:zio.Has[zio.Random]withzio.Has[zio.test.Sized],E](e:zio.test.Gen[R,E],t:zio.test.Gen[R,Throwable]):zio.test.Gen[R,zio.Cause[E]]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/GenZIO.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/GenZIO.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/GenZIO.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/GenZIO.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/GenZIO.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/GenZIO.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/GenZIO.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/GenZIO.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/GenZIO.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/GenZIO.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/GenZIO.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/GenZIO.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/GenZIO.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/GenZIO.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/GenZIO.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/GenZIO.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/GenZIO.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/GenZIO.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/GenZIO.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.MutableRunnableSpec", "shortDescription" : "Syntax for writing test like", "members_class" : [{"label" : "runner", "tail" : "(): TestRunner[environment.TestEnvironment, Any]", "member" : "zio.test.MutableRunnableSpec.runner", "link" : "zio\/test\/MutableRunnableSpec.html#runner:zio.test.TestRunner[zio.test.environment.TestEnvironment,Any]", "kind" : "def"}, {"label" : "aspects", "tail" : "(): List[TestAspect[Nothing, environment.TestEnvironment, Nothing, Any]]", "member" : "zio.test.MutableRunnableSpec.aspects", "link" : "zio\/test\/MutableRunnableSpec.html#aspects:List[zio.test.TestAspect[Nothing,zio.test.environment.TestEnvironment,Nothing,Any]]", "kind" : "def"}, {"label" : "spec", "tail" : "(): ZSpec[Environment, Failure]", "member" : "zio.test.MutableRunnableSpec.spec", "link" : "zio\/test\/MutableRunnableSpec.html#spec:zio.test.ZSpec[MutableRunnableSpec.this.Environment,MutableRunnableSpec.this.Failure]", "kind" : "final def"}, {"label" : "test", "tail" : "(label: String)(assertion: => In)(testConstructor: TestConstructor[R with environment.TestEnvironment, In], sourceLocation: SourceLocation): TestBuilder", "member" : "zio.test.MutableRunnableSpec.test", "link" : "zio\/test\/MutableRunnableSpec.html#test[In](label:String)(assertion:=>In)(implicittestConstructor:zio.test.TestConstructor[Rwithzio.test.environment.TestEnvironment,In],implicitsourceLocation:zio.test.SourceLocation):MutableRunnableSpec.this.TestBuilder", "kind" : "final def"}, {"label" : "suite", "tail" : "(label: String)(specs: => SpecBuilder): SuiteBuilder", "member" : "zio.test.MutableRunnableSpec.suite", "link" : "zio\/test\/MutableRunnableSpec.html#suite(label:String)(specs:=>MutableRunnableSpec.this.SpecBuilder):MutableRunnableSpec.this.SuiteBuilder", "kind" : "final def"}, {"label" : "TestBuilder", "tail" : "", "member" : "zio.test.MutableRunnableSpec.TestBuilder", "link" : "zio\/test\/MutableRunnableSpec.html#TestBuilderextendsMutableRunnableSpec.this.SpecBuilderwithProductwithSerializable", "kind" : "sealed case class"}, {"label" : "SuiteBuilder", "tail" : "", "member" : "zio.test.MutableRunnableSpec.SuiteBuilder", "link" : "zio\/test\/MutableRunnableSpec.html#SuiteBuilderextendsMutableRunnableSpec.this.SpecBuilderwithProductwithSerializable", "kind" : "sealed case class"}, {"label" : "SpecBuilder", "tail" : "", "member" : "zio.test.MutableRunnableSpec.SpecBuilder", "link" : "zio\/test\/MutableRunnableSpec.html#SpecBuilderextendsAnyRef", "kind" : "sealed trait"}, {"member" : "zio.test.MutableRunnableSpec#<init>", "error" : "unsupported entity"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "zio.test.RunnableSpec.main", "link" : "zio\/test\/MutableRunnableSpec.html#main(args:Array[String]):Unit", "kind" : "final def"}, {"label" : "Failure", "tail" : "", "member" : "zio.test.RunnableSpec.Failure", "link" : "zio\/test\/MutableRunnableSpec.html#Failure=E", "kind" : "type"}, {"label" : "Environment", "tail" : "", "member" : "zio.test.RunnableSpec.Environment", "link" : "zio\/test\/MutableRunnableSpec.html#Environment=R", "kind" : "type"}, {"label" : "runtimeConfig", "tail" : "(): RuntimeConfig", "member" : "zio.test.AbstractRunnableSpec.runtimeConfig", "link" : "zio\/test\/MutableRunnableSpec.html#runtimeConfig:zio.RuntimeConfig", "kind" : "final def"}, {"label" : "run", "tail" : "(): ZIO[zio.ZEnv with Has[ZIOAppArgs], Any, Any]", "member" : "zio.test.AbstractRunnableSpec.run", "link" : "zio\/test\/MutableRunnableSpec.html#run:zio.ZIO[zio.ZEnvwithzio.Has[zio.ZIOAppArgs],Any,Any]", "kind" : "final def"}, {"label" : "platform", "tail" : "(): RuntimeConfig", "member" : "zio.test.AbstractRunnableSpec.platform", "link" : "zio\/test\/MutableRunnableSpec.html#platform:zio.RuntimeConfig", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/MutableRunnableSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/MutableRunnableSpec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/MutableRunnableSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/MutableRunnableSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/MutableRunnableSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/MutableRunnableSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/MutableRunnableSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/MutableRunnableSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/MutableRunnableSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/MutableRunnableSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/MutableRunnableSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/MutableRunnableSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/MutableRunnableSpec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/MutableRunnableSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/MutableRunnableSpec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/MutableRunnableSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/MutableRunnableSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/MutableRunnableSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/MutableRunnableSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/MutableRunnableSpec.html", "kind" : "class"}, {"name" : "zio.test.PrettyPrintVersionSpecific", "trait" : "zio\/test\/PrettyPrintVersionSpecific.html", "kind" : "trait", "members_trait" : [{"label" : "labels", "tail" : "(product: Product): Iterator[String]", "member" : "zio.test.PrettyPrintVersionSpecific.labels", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#labels(product:Product):Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/PrettyPrintVersionSpecific.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/PrettyPrintVersionSpecific.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.Result", "object" : "zio\/test\/Result$.html", "members_object" : [{"label" : "Succeed", "tail" : "", "member" : "zio.test.Result.Succeed", "link" : "zio\/test\/Result$.html#Succeed[+A]extendsResult[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Die", "tail" : "", "member" : "zio.test.Result.Die", "link" : "zio\/test\/Result$.html#DieextendsResult[Nothing]withProductwithSerializable", "kind" : "case class"}, {"label" : "Fail", "tail" : "", "member" : "zio.test.Result.Fail", "link" : "zio\/test\/Result$.html#Fail", "kind" : "case object"}, {"label" : "die", "tail" : "(throwable: Throwable): Result[Nothing]", "member" : "zio.test.Result.die", "link" : "zio\/test\/Result$.html#die(throwable:Throwable):zio.test.Result[Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(): Result[Nothing]", "member" : "zio.test.Result.fail", "link" : "zio\/test\/Result$.html#fail:zio.test.Result[Nothing]", "kind" : "def"}, {"label" : "succeed", "tail" : "(value: A): Result[A]", "member" : "zio.test.Result.succeed", "link" : "zio\/test\/Result$.html#succeed[A](value:A):zio.test.Result[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Result$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Result$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Result$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Result$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Result$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Result$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Result$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Result$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Result$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Result$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Result$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Result$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Result$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Result$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Result$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Result$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Result$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Result$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Result$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/Result.html", "kind" : "trait", "members_trait" : [{"label" : "zipWith", "tail" : "(that: Result[B])(f: (A, B) => C): Result[C]", "member" : "zio.test.Result.zipWith", "link" : "zio\/test\/Result.html#zipWith[B,C](that:zio.test.Result[B])(f:(A,B)=>C):zio.test.Result[C]", "kind" : "def"}, {"label" : "isDie", "tail" : "(): Boolean", "member" : "zio.test.Result.isDie", "link" : "zio\/test\/Result.html#isDie:Boolean", "kind" : "def"}, {"label" : "isFailOrDie", "tail" : "(): Boolean", "member" : "zio.test.Result.isFailOrDie", "link" : "zio\/test\/Result.html#isFailOrDie:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Result.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Result.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Result.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Result.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Result.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Result.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Result.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Result.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Result.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Result.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Result.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Result.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Result.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Result.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Result.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Result.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Result.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Result.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Result.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.RunnableSpec", "shortDescription" : "A RunnableSpec has a main function and can be run by the JVM \/ Scala.js.", "members_class" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "zio.test.RunnableSpec.main", "link" : "zio\/test\/RunnableSpec.html#main(args:Array[String]):Unit", "kind" : "final def"}, {"label" : "Failure", "tail" : "", "member" : "zio.test.RunnableSpec.Failure", "link" : "zio\/test\/RunnableSpec.html#Failure=E", "kind" : "type"}, {"label" : "Environment", "tail" : "", "member" : "zio.test.RunnableSpec.Environment", "link" : "zio\/test\/RunnableSpec.html#Environment=R", "kind" : "type"}, {"member" : "zio.test.RunnableSpec#<init>", "error" : "unsupported entity"}, {"label" : "runtimeConfig", "tail" : "(): RuntimeConfig", "member" : "zio.test.AbstractRunnableSpec.runtimeConfig", "link" : "zio\/test\/RunnableSpec.html#runtimeConfig:zio.RuntimeConfig", "kind" : "final def"}, {"label" : "run", "tail" : "(): ZIO[zio.ZEnv with Has[ZIOAppArgs], Any, Any]", "member" : "zio.test.AbstractRunnableSpec.run", "link" : "zio\/test\/RunnableSpec.html#run:zio.ZIO[zio.ZEnvwithzio.Has[zio.ZIOAppArgs],Any,Any]", "kind" : "final def"}, {"label" : "platform", "tail" : "(): RuntimeConfig", "member" : "zio.test.AbstractRunnableSpec.platform", "link" : "zio\/test\/RunnableSpec.html#platform:zio.RuntimeConfig", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/RunnableSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/RunnableSpec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/RunnableSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/RunnableSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/RunnableSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/RunnableSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/RunnableSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/RunnableSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/RunnableSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/RunnableSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/RunnableSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/RunnableSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/RunnableSpec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/RunnableSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/RunnableSpec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/RunnableSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/RunnableSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/RunnableSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/RunnableSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "spec", "tail" : "(): ZSpec[Environment, Failure]", "member" : "zio.test.AbstractRunnableSpec.spec", "link" : "zio\/test\/RunnableSpec.html#spec:zio.test.ZSpec[AbstractRunnableSpec.this.Environment,AbstractRunnableSpec.this.Failure]", "kind" : "abstract def"}, {"label" : "runner", "tail" : "(): TestRunner[Environment, Failure]", "member" : "zio.test.AbstractRunnableSpec.runner", "link" : "zio\/test\/RunnableSpec.html#runner:zio.test.TestRunner[AbstractRunnableSpec.this.Environment,AbstractRunnableSpec.this.Failure]", "kind" : "abstract def"}, {"label" : "aspects", "tail" : "(): List[TestAspect[Nothing, Environment, Nothing, Any]]", "member" : "zio.test.AbstractRunnableSpec.aspects", "link" : "zio\/test\/RunnableSpec.html#aspects:List[zio.test.TestAspect[Nothing,AbstractRunnableSpec.this.Environment,Nothing,Any]]", "kind" : "abstract def"}], "class" : "zio\/test\/RunnableSpec.html", "kind" : "class"}, {"name" : "zio.test.Sample", "shortDescription" : "A sample is a single observation from a random variable, together with atree of \"shrinkings\" used for minimization of \"large\" failures.", "object" : "zio\/test\/Sample$.html", "members_object" : [{"label" : "unfold", "tail" : "(s: S)(f: (S) => (A, ZStream[R, Nothing, S])): Sample[R, A]", "member" : "zio.test.Sample.unfold", "link" : "zio\/test\/Sample$.html#unfold[R,A,S](s:S)(f:S=>(A,zio.stream.ZStream[R,Nothing,S])):zio.test.Sample[R,A]", "kind" : "def"}, {"label" : "shrinkIntegral", "tail" : "(smallest: A)(a: A)(I: Integral[A]): Sample[Any, A]", "member" : "zio.test.Sample.shrinkIntegral", "link" : "zio\/test\/Sample$.html#shrinkIntegral[A](smallest:A)(a:A)(implicitI:Integral[A]):zio.test.Sample[Any,A]", "kind" : "def"}, {"label" : "shrinkFractional", "tail" : "(smallest: A)(a: A)(F: Fractional[A]): Sample[Any, A]", "member" : "zio.test.Sample.shrinkFractional", "link" : "zio\/test\/Sample$.html#shrinkFractional[A](smallest:A)(a:A)(implicitF:Fractional[A]):zio.test.Sample[Any,A]", "kind" : "def"}, {"label" : "noShrink", "tail" : "(a: A): Sample[Any, A]", "member" : "zio.test.Sample.noShrink", "link" : "zio\/test\/Sample$.html#noShrink[A](a:A):zio.test.Sample[Any,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Sample$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Sample$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Sample$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Sample$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Sample$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Sample$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Sample$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Sample$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Sample$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Sample$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Sample$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Sample$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Sample$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Sample$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Sample$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Sample$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Sample$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Sample$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Sample$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "zipWith", "tail" : "(that: Sample[R1, B])(f: (A, B) => C): Sample[R1, C]", "member" : "zio.test.Sample.zipWith", "link" : "zio\/test\/Sample.html#zipWith[R1<:R,B,C](that:zio.test.Sample[R1,B])(f:(A,B)=>C):zio.test.Sample[R1,C]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Sample[R1, B])(zippable: Zippable[A, B]): Sample[R1, Out]", "member" : "zio.test.Sample.zip", "link" : "zio\/test\/Sample.html#zip[R1<:R,B](that:zio.test.Sample[R1,B])(implicitzippable:zio.Zippable[A,B]):zio.test.Sample[R1,zippable.Out]", "kind" : "def"}, {"label" : "shrinkSearch", "tail" : "(f: (A) => Boolean): ZStream[R, Nothing, A]", "member" : "zio.test.Sample.shrinkSearch", "link" : "zio\/test\/Sample.html#shrinkSearch(f:A=>Boolean):zio.stream.ZStream[R,Nothing,A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): Sample[R, B]", "member" : "zio.test.Sample.map", "link" : "zio\/test\/Sample.html#map[B](f:A=>B):zio.test.Sample[R,B]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => ZIO[R1, Nothing, B]): ZIO[R1, Nothing, Sample[R1, B]]", "member" : "zio.test.Sample.foreach", "link" : "zio\/test\/Sample.html#foreach[R1<:R,B](f:A=>zio.ZIO[R1,Nothing,B]):zio.ZIO[R1,Nothing,zio.test.Sample[R1,B]]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => Sample[R1, B]): Sample[R1, B]", "member" : "zio.test.Sample.flatMap", "link" : "zio\/test\/Sample.html#flatMap[R1<:R,B](f:A=>zio.test.Sample[R1,B]):zio.test.Sample[R1,B]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (A) => Boolean): ZStream[R, Nothing, Sample[R, A]]", "member" : "zio.test.Sample.filter", "link" : "zio\/test\/Sample.html#filter(f:A=>Boolean):zio.stream.ZStream[R,Nothing,zio.test.Sample[R,A]]", "kind" : "def"}, {"label" : "crossWith", "tail" : "(that: Sample[R1, B])(f: (A, B) => C): Sample[R1, C]", "member" : "zio.test.Sample.crossWith", "link" : "zio\/test\/Sample.html#crossWith[R1<:R,B,C](that:zio.test.Sample[R1,B])(f:(A,B)=>C):zio.test.Sample[R1,C]", "kind" : "def"}, {"label" : "cross", "tail" : "(that: Sample[R1, B])(zippable: Zippable[A, B]): Sample[R1, Out]", "member" : "zio.test.Sample.cross", "link" : "zio\/test\/Sample.html#cross[R1<:R,B](that:zio.test.Sample[R1,B])(implicitzippable:zio.Zippable[A,B]):zio.test.Sample[R1,zippable.Out]", "kind" : "def"}, {"label" : "<*>", "tail" : "(that: Sample[R1, B])(zippable: Zippable[A, B]): Sample[R1, Out]", "member" : "zio.test.Sample.<*>", "link" : "zio\/test\/Sample.html#<*>[R1<:R,B](that:zio.test.Sample[R1,B])(implicitzippable:zio.Zippable[A,B]):zio.test.Sample[R1,zippable.Out]", "kind" : "def"}, {"label" : "<&>", "tail" : "(that: Sample[R1, B])(zippable: Zippable[A, B]): Sample[R1, Out]", "member" : "zio.test.Sample.<&>", "link" : "zio\/test\/Sample.html#<&>[R1<:R,B](that:zio.test.Sample[R1,B])(implicitzippable:zio.Zippable[A,B]):zio.test.Sample[R1,zippable.Out]", "kind" : "def"}, {"member" : "zio.test.Sample#<init>", "error" : "unsupported entity"}, {"label" : "shrink", "tail" : ": ZStream[R, Nothing, Sample[R, A]]", "member" : "zio.test.Sample.shrink", "link" : "zio\/test\/Sample.html#shrink:zio.stream.ZStream[R,Nothing,zio.test.Sample[R,A]]", "kind" : "val"}, {"label" : "value", "tail" : ": A", "member" : "zio.test.Sample.value", "link" : "zio\/test\/Sample.html#value:A", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/Sample.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Sample.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Sample.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Sample.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Sample.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Sample.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Sample.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Sample.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Sample.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Sample.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Sample.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Sample.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Sample.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Sample.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Sample.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Sample.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Sample.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/test\/Sample.html", "kind" : "case class"}, {"name" : "zio.test.Sized", "object" : "zio\/test\/Sized$.html", "members_object" : [{"label" : "withSize", "tail" : "(size: Int)(zio: ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.test.Sized.withSize", "link" : "zio\/test\/Sized$.html#withSize[R<:zio.Has[zio.test.Sized],E,A](size:Int)(zio:zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "size", "tail" : "(): URIO[Has[Sized], Int]", "member" : "zio.test.Sized.size", "link" : "zio\/test\/Sized$.html#size:zio.URIO[zio.Has[zio.test.Sized],Int]", "kind" : "def"}, {"label" : "live", "tail" : "(size: Int): Layer[Nothing, Has[Sized]]", "member" : "zio.test.Sized.live", "link" : "zio\/test\/Sized$.html#live(size:Int):zio.Layer[Nothing,zio.Has[zio.test.Sized]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Sized$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Sized$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Sized$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Sized$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Sized$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Sized$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Sized$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Sized$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Sized$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Sized$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Sized$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Sized$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Sized$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Sized$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Sized$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Sized$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Sized$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Sized$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Sized$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/Sized.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Sized.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Sized.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Sized.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Sized.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Sized.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Sized.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Sized.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Sized.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Sized.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Sized.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Sized.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Sized.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Sized.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Sized.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Sized.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Sized.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Sized.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Sized.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Sized.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withSize", "tail" : "(size: Int)(zio: ZIO[R, E, A]): ZIO[R, E, A]", "member" : "zio.test.Sized.withSize", "link" : "zio\/test\/Sized.html#withSize[R,E,A](size:Int)(zio:zio.ZIO[R,E,A]):zio.ZIO[R,E,A]", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): UIO[Int]", "member" : "zio.test.Sized.size", "link" : "zio\/test\/Sized.html#size:zio.UIO[Int]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.test.SmartAssertMacros", "shortDescription" : "", "members_class" : [{"label" : "Matcher", "tail" : "", "member" : "zio.test.SmartAssertMacros.Matcher", "link" : "zio\/test\/SmartAssertMacros.html#Matcher", "kind" : "object"}, {"label" : "ASTConverter", "tail" : "", "member" : "zio.test.SmartAssertMacros.ASTConverter", "link" : "zio\/test\/SmartAssertMacros.html#ASTConverter", "kind" : "object"}, {"label" : "ASTConverter", "tail" : "", "member" : "zio.test.SmartAssertMacros.ASTConverter", "link" : "zio\/test\/SmartAssertMacros.html#ASTConverterextendsAnyRef", "kind" : "trait"}, {"label" : "IsConstructor", "tail" : "", "member" : "zio.test.SmartAssertMacros.IsConstructor", "link" : "zio\/test\/SmartAssertMacros.html#IsConstructor", "kind" : "object"}, {"label" : "MethodCall", "tail" : "", "member" : "zio.test.SmartAssertMacros.MethodCall", "link" : "zio\/test\/SmartAssertMacros.html#MethodCall", "kind" : "object"}, {"label" : "UnwrapImplicit", "tail" : "", "member" : "zio.test.SmartAssertMacros.UnwrapImplicit", "link" : "zio\/test\/SmartAssertMacros.html#UnwrapImplicit", "kind" : "object"}, {"label" : "assertOne_impl", "tail" : "(expr: scala.reflect.macros.Universe.Expr[Boolean]): scala.reflect.macros.blackbox.Context.Tree", "member" : "zio.test.SmartAssertMacros.assertOne_impl", "link" : "zio\/test\/SmartAssertMacros.html#assertOne_impl(expr:SmartAssertMacros.this.c.universe.Expr[Boolean]):SmartAssertMacros.this.c.Tree", "kind" : "def"}, {"label" : "parseExpr", "tail" : "(tree: scala.reflect.macros.blackbox.Context.Tree)(pos: PositionContext): AST", "member" : "zio.test.SmartAssertMacros.parseExpr", "link" : "zio\/test\/SmartAssertMacros.html#parseExpr(tree:SmartAssertMacros.this.c.Tree)(implicitpos:SmartAssertMacros.this.PositionContext):SmartAssertMacros.this.AST", "kind" : "def"}, {"label" : "PositionContext", "tail" : "", "member" : "zio.test.SmartAssertMacros.PositionContext", "link" : "zio\/test\/SmartAssertMacros.html#PositionContextextendsProductwithSerializable", "kind" : "case class"}, {"label" : "astToAssertion", "tail" : "(ast: AST)(positionContext: PositionContext): scala.reflect.macros.blackbox.Context.Tree", "member" : "zio.test.SmartAssertMacros.astToAssertion", "link" : "zio\/test\/SmartAssertMacros.html#astToAssertion(ast:SmartAssertMacros.this.AST)(implicitpositionContext:SmartAssertMacros.this.PositionContext):SmartAssertMacros.this.c.Tree", "kind" : "def"}, {"label" : "AssertAST", "tail" : "", "member" : "zio.test.SmartAssertMacros.AssertAST", "link" : "zio\/test\/SmartAssertMacros.html#AssertAST", "kind" : "object"}, {"label" : "AssertAST", "tail" : "", "member" : "zio.test.SmartAssertMacros.AssertAST", "link" : "zio\/test\/SmartAssertMacros.html#AssertASTextendsProductwithSerializable", "kind" : "case class"}, {"label" : "AST", "tail" : "", "member" : "zio.test.SmartAssertMacros.AST", "link" : "zio\/test\/SmartAssertMacros.html#AST", "kind" : "object"}, {"label" : "AST", "tail" : "", "member" : "zio.test.SmartAssertMacros.AST", "link" : "zio\/test\/SmartAssertMacros.html#ASTextendsAnyRef", "kind" : "sealed trait"}, {"label" : "assert_impl", "tail" : "(expr: scala.reflect.macros.blackbox.Context.Expr[Boolean], exprs: scala.reflect.macros.blackbox.Context.Expr[Boolean]*): scala.reflect.macros.blackbox.Context.Tree", "member" : "zio.test.SmartAssertMacros.assert_impl", "link" : "zio\/test\/SmartAssertMacros.html#assert_impl(expr:SmartAssertMacros.this.c.Expr[Boolean],exprs:SmartAssertMacros.this.c.Expr[Boolean]*):SmartAssertMacros.this.c.Tree", "kind" : "def"}, {"member" : "zio.test.SmartAssertMacros#<init>", "error" : "unsupported entity"}, {"label" : "c", "tail" : ": Context", "member" : "zio.test.SmartAssertMacros.c", "link" : "zio\/test\/SmartAssertMacros.html#c:scala.reflect.macros.blackbox.Context", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/SmartAssertMacros.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/SmartAssertMacros.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/SmartAssertMacros.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/SmartAssertMacros.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/SmartAssertMacros.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/SmartAssertMacros.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/SmartAssertMacros.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SmartAssertMacros.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SmartAssertMacros.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SmartAssertMacros.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/SmartAssertMacros.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/SmartAssertMacros.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/SmartAssertMacros.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/SmartAssertMacros.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/SmartAssertMacros.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/SmartAssertMacros.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/SmartAssertMacros.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/SmartAssertMacros.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/SmartAssertMacros.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/SmartAssertMacros.html", "kind" : "class"}, {"name" : "zio.test.SourceLocation", "shortDescription" : "", "object" : "zio\/test\/SourceLocation$.html", "members_object" : [{"label" : "generate", "tail" : "(): SourceLocation", "member" : "zio.test.SourceLocationVariants.generate", "link" : "zio\/test\/SourceLocation$.html#generate:zio.test.SourceLocation", "kind" : "implicit macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/SourceLocation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/SourceLocation$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/SourceLocation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/SourceLocation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/SourceLocation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/SourceLocation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/SourceLocation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SourceLocation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SourceLocation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SourceLocation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/SourceLocation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/SourceLocation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/SourceLocation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/SourceLocation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/SourceLocation$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/SourceLocation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/SourceLocation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/SourceLocation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/SourceLocation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "zio.test.SourceLocation#<init>", "error" : "unsupported entity"}, {"label" : "line", "tail" : ": Int", "member" : "zio.test.SourceLocation.line", "link" : "zio\/test\/SourceLocation.html#line:Int", "kind" : "val"}, {"label" : "path", "tail" : ": String", "member" : "zio.test.SourceLocation.path", "link" : "zio\/test\/SourceLocation.html#path:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/SourceLocation.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/SourceLocation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/SourceLocation.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/SourceLocation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/SourceLocation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/SourceLocation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/SourceLocation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/SourceLocation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SourceLocation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SourceLocation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SourceLocation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/SourceLocation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/SourceLocation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/SourceLocation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/SourceLocation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/SourceLocation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/SourceLocation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/test\/SourceLocation.html", "kind" : "case class"}, {"name" : "zio.test.SourceLocationVariants", "trait" : "zio\/test\/SourceLocationVariants.html", "kind" : "trait", "members_trait" : [{"label" : "generate", "tail" : "(): SourceLocation", "member" : "zio.test.SourceLocationVariants.generate", "link" : "zio\/test\/SourceLocationVariants.html#generate:zio.test.SourceLocation", "kind" : "implicit macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/SourceLocationVariants.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/SourceLocationVariants.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/SourceLocationVariants.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/SourceLocationVariants.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/SourceLocationVariants.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/SourceLocationVariants.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/SourceLocationVariants.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SourceLocationVariants.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SourceLocationVariants.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SourceLocationVariants.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/SourceLocationVariants.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/SourceLocationVariants.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/SourceLocationVariants.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/SourceLocationVariants.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/SourceLocationVariants.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/SourceLocationVariants.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/SourceLocationVariants.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/SourceLocationVariants.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/SourceLocationVariants.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.Spec", "shortDescription" : "A Spec[R, E, T] is the backbone of _ZIO Test_.", "object" : "zio\/test\/Spec$.html", "members_object" : [{"label" : "UpdateServiceAt", "tail" : "", "member" : "zio.test.Spec.UpdateServiceAt", "link" : "zio\/test\/Spec$.html#UpdateServiceAt[-R,+E,+T,Service]extendsAnyVal", "kind" : "final class"}, {"label" : "UpdateService", "tail" : "", "member" : "zio.test.Spec.UpdateService", "link" : "zio\/test\/Spec$.html#UpdateService[-R,+E,+T,M]extendsAnyVal", "kind" : "final class"}, {"label" : "ProvideSomeLayerShared", "tail" : "", "member" : "zio.test.Spec.ProvideSomeLayerShared", "link" : "zio\/test\/Spec$.html#ProvideSomeLayerShared[R0,-R,+E,+T]extendsAnyVal", "kind" : "final class"}, {"label" : "ProvideSomeLayer", "tail" : "", "member" : "zio.test.Spec.ProvideSomeLayer", "link" : "zio\/test\/Spec$.html#ProvideSomeLayer[R0,-R,+E,+T]extendsAnyVal", "kind" : "final class"}, {"label" : "empty", "tail" : ": Spec[Any, Nothing, Nothing]", "member" : "zio.test.Spec.empty", "link" : "zio\/test\/Spec$.html#empty:zio.test.Spec[Any,Nothing,Nothing]", "kind" : "val"}, {"label" : "test", "tail" : "(test: ZIO[R, E, T], annotations: TestAnnotationMap): Spec[R, E, T]", "member" : "zio.test.Spec.test", "link" : "zio\/test\/Spec$.html#test[R,E,T](test:zio.ZIO[R,E,T],annotations:zio.test.TestAnnotationMap):zio.test.Spec[R,E,T]", "kind" : "final def"}, {"label" : "multiple", "tail" : "(specs: Chunk[Spec[R, E, T]]): Spec[R, E, T]", "member" : "zio.test.Spec.multiple", "link" : "zio\/test\/Spec$.html#multiple[R,E,T](specs:zio.Chunk[zio.test.Spec[R,E,T]]):zio.test.Spec[R,E,T]", "kind" : "final def"}, {"label" : "managed", "tail" : "(managed: ZManaged[R, E, Spec[R, E, T]]): Spec[R, E, T]", "member" : "zio.test.Spec.managed", "link" : "zio\/test\/Spec$.html#managed[R,E,T](managed:zio.ZManaged[R,E,zio.test.Spec[R,E,T]]):zio.test.Spec[R,E,T]", "kind" : "final def"}, {"label" : "labeled", "tail" : "(label: String, spec: Spec[R, E, T]): Spec[R, E, T]", "member" : "zio.test.Spec.labeled", "link" : "zio\/test\/Spec$.html#labeled[R,E,T](label:String,spec:zio.test.Spec[R,E,T]):zio.test.Spec[R,E,T]", "kind" : "final def"}, {"label" : "exec", "tail" : "(exec: ExecutionStrategy, spec: Spec[R, E, T]): Spec[R, E, T]", "member" : "zio.test.Spec.exec", "link" : "zio\/test\/Spec$.html#exec[R,E,T](exec:zio.ExecutionStrategy,spec:zio.test.Spec[R,E,T]):zio.test.Spec[R,E,T]", "kind" : "final def"}, {"label" : "TestCase", "tail" : "", "member" : "zio.test.Spec.TestCase", "link" : "zio\/test\/Spec$.html#TestCase[-R,+E,+T]extendsSpec.SpecCase[R,E,T,Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "MultipleCase", "tail" : "", "member" : "zio.test.Spec.MultipleCase", "link" : "zio\/test\/Spec$.html#MultipleCase[+Spec]extendsSpec.SpecCase[Any,Nothing,Nothing,Spec]withProductwithSerializable", "kind" : "final case class"}, {"label" : "ManagedCase", "tail" : "", "member" : "zio.test.Spec.ManagedCase", "link" : "zio\/test\/Spec$.html#ManagedCase[-R,+E,+Spec]extendsSpec.SpecCase[R,E,Nothing,Spec]withProductwithSerializable", "kind" : "final case class"}, {"label" : "LabeledCase", "tail" : "", "member" : "zio.test.Spec.LabeledCase", "link" : "zio\/test\/Spec$.html#LabeledCase[+Spec]extendsSpec.SpecCase[Any,Nothing,Nothing,Spec]withProductwithSerializable", "kind" : "final case class"}, {"label" : "ExecCase", "tail" : "", "member" : "zio.test.Spec.ExecCase", "link" : "zio\/test\/Spec$.html#ExecCase[+Spec]extendsSpec.SpecCase[Any,Nothing,Nothing,Spec]withProductwithSerializable", "kind" : "final case class"}, {"label" : "SpecCase", "tail" : "", "member" : "zio.test.Spec.SpecCase", "link" : "zio\/test\/Spec$.html#SpecCase[-R,+E,+T,+A]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Spec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Spec$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Spec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Spec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Spec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Spec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Spec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Spec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Spec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Spec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Spec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Spec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Spec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Spec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Spec$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Spec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Spec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Spec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Spec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "whenZIO", "tail" : "(b: ZIO[R1, E1, Boolean])(ev: <:<[T, TestSuccess]): Spec[R1 with Has[Annotations], E1, TestSuccess]", "member" : "zio.test.Spec.whenZIO", "link" : "zio\/test\/Spec.html#whenZIO[R1<:R,E1>:E](b:zio.ZIO[R1,E1,Boolean])(implicitev:T<:<zio.test.TestSuccess):zio.test.Spec[R1withzio.Has[zio.test.Annotations],E1,zio.test.TestSuccess]", "kind" : "final def"}, {"label" : "whenM", "tail" : "(b: ZIO[R1, E1, Boolean])(ev: <:<[T, TestSuccess]): Spec[R1 with Has[Annotations], E1, TestSuccess]", "member" : "zio.test.Spec.whenM", "link" : "zio\/test\/Spec.html#whenM[R1<:R,E1>:E](b:zio.ZIO[R1,E1,Boolean])(implicitev:T<:<zio.test.TestSuccess):zio.test.Spec[R1withzio.Has[zio.test.Annotations],E1,zio.test.TestSuccess]", "kind" : "final def"}, {"label" : "when", "tail" : "(b: => Boolean)(ev: <:<[T, TestSuccess]): Spec[R with Has[Annotations], E, TestSuccess]", "member" : "zio.test.Spec.when", "link" : "zio\/test\/Spec.html#when(b:=>Boolean)(implicitev:T<:<zio.test.TestSuccess):zio.test.Spec[Rwithzio.Has[zio.test.Annotations],E,zio.test.TestSuccess]", "kind" : "final def"}, {"label" : "updateServiceAt", "tail" : "(): UpdateServiceAt[R, E, T, Service]", "member" : "zio.test.Spec.updateServiceAt", "link" : "zio\/test\/Spec.html#updateServiceAt[Service]:zio.test.Spec.UpdateServiceAt[R,E,T,Service]", "kind" : "final def"}, {"label" : "updateService", "tail" : "(): UpdateService[R, E, T, M]", "member" : "zio.test.Spec.updateService", "link" : "zio\/test\/Spec.html#updateService[M]:zio.test.Spec.UpdateService[R,E,T,M]", "kind" : "final def"}, {"label" : "transformAccum", "tail" : "(z0: Z)(f: (Z, SpecCase[R, E, T, Spec[R1, E1, T1]]) => (Z, SpecCase[R1, E1, T1, Spec[R1, E1, T1]])): ZManaged[R, E, (Z, Spec[R1, E1, T1])]", "member" : "zio.test.Spec.transformAccum", "link" : "zio\/test\/Spec.html#transformAccum[R1,E1,T1,Z](z0:Z)(f:(Z,zio.test.Spec.SpecCase[R,E,T,zio.test.Spec[R1,E1,T1]])=>(Z,zio.test.Spec.SpecCase[R1,E1,T1,zio.test.Spec[R1,E1,T1]])):zio.ZManaged[R,E,(Z,zio.test.Spec[R1,E1,T1])]", "kind" : "final def"}, {"label" : "transform", "tail" : "(f: (SpecCase[R, E, T, Spec[R1, E1, T1]]) => SpecCase[R1, E1, T1, Spec[R1, E1, T1]]): Spec[R1, E1, T1]", "member" : "zio.test.Spec.transform", "link" : "zio\/test\/Spec.html#transform[R1,E1,T1](f:zio.test.Spec.SpecCase[R,E,T,zio.test.Spec[R1,E1,T1]]=>zio.test.Spec.SpecCase[R1,E1,T1,zio.test.Spec[R1,E1,T1]]):zio.test.Spec[R1,E1,T1]", "kind" : "final def"}, {"label" : "size", "tail" : "(): ZManaged[R, E, Int]", "member" : "zio.test.Spec.size", "link" : "zio\/test\/Spec.html#size:zio.ZManaged[R,E,Int]", "kind" : "final def"}, {"label" : "provideSomeLayerShared", "tail" : "(): ProvideSomeLayerShared[R0, R, E, T]", "member" : "zio.test.Spec.provideSomeLayerShared", "link" : "zio\/test\/Spec.html#provideSomeLayerShared[R0]:zio.test.Spec.ProvideSomeLayerShared[R0,R,E,T]", "kind" : "final def"}, {"label" : "provideSomeLayer", "tail" : "(): ProvideSomeLayer[R0, R, E, T]", "member" : "zio.test.Spec.provideSomeLayer", "link" : "zio\/test\/Spec.html#provideSomeLayer[R0]:zio.test.Spec.ProvideSomeLayer[R0,R,E,T]", "kind" : "final def"}, {"label" : "provideSome", "tail" : "(f: (R0) => R)(ev: NeedsEnv[R]): Spec[R0, E, T]", "member" : "zio.test.Spec.provideSome", "link" : "zio\/test\/Spec.html#provideSome[R0](f:R0=>R)(implicitev:zio.NeedsEnv[R]):zio.test.Spec[R0,E,T]", "kind" : "final def"}, {"label" : "provideLayerShared", "tail" : "(layer: ZLayer[R0, E1, R1])(ev: <:<[R1, R]): Spec[R0, E1, T]", "member" : "zio.test.Spec.provideLayerShared", "link" : "zio\/test\/Spec.html#provideLayerShared[E1>:E,R0,R1](layer:zio.ZLayer[R0,E1,R1])(implicitev:R1<:<R):zio.test.Spec[R0,E1,T]", "kind" : "final def"}, {"label" : "provideLayer", "tail" : "(layer: ZLayer[R0, E1, R1])(ev: <:<[R1, R]): Spec[R0, E1, T]", "member" : "zio.test.Spec.provideLayer", "link" : "zio\/test\/Spec.html#provideLayer[E1>:E,R0,R1](layer:zio.ZLayer[R0,E1,R1])(implicitev:R1<:<R):zio.test.Spec[R0,E1,T]", "kind" : "final def"}, {"label" : "provideCustomLayerShared", "tail" : "(layer: ZLayer[environment.TestEnvironment, E1, R1])(ev1: <:<[environment.TestEnvironment with R1, R], ev2: Union[environment.TestEnvironment, R1], tagged: zio.Tag[R1]): Spec[environment.TestEnvironment, E1, T]", "member" : "zio.test.Spec.provideCustomLayerShared", "link" : "zio\/test\/Spec.html#provideCustomLayerShared[E1>:E,R1](layer:zio.ZLayer[zio.test.environment.TestEnvironment,E1,R1])(implicitev1:zio.test.environment.TestEnvironmentwithR1<:<R,implicitev2:zio.Has.Union[zio.test.environment.TestEnvironment,R1],implicittagged:zio.Tag[R1]):zio.test.Spec[zio.test.environment.TestEnvironment,E1,T]", "kind" : "def"}, {"label" : "provideCustomLayer", "tail" : "(layer: ZLayer[environment.TestEnvironment, E1, R1])(ev1: <:<[environment.TestEnvironment with R1, R], ev2: Union[environment.TestEnvironment, R1], tagged: zio.Tag[R1]): Spec[environment.TestEnvironment, E1, T]", "member" : "zio.test.Spec.provideCustomLayer", "link" : "zio\/test\/Spec.html#provideCustomLayer[E1>:E,R1](layer:zio.ZLayer[zio.test.environment.TestEnvironment,E1,R1])(implicitev1:zio.test.environment.TestEnvironmentwithR1<:<R,implicitev2:zio.Has.Union[zio.test.environment.TestEnvironment,R1],implicittagged:zio.Tag[R1]):zio.test.Spec[zio.test.environment.TestEnvironment,E1,T]", "kind" : "def"}, {"label" : "provide", "tail" : "(r: R)(ev: NeedsEnv[R]): Spec[Any, E, T]", "member" : "zio.test.Spec.provide", "link" : "zio\/test\/Spec.html#provide(r:R)(implicitev:zio.NeedsEnv[R]):zio.test.Spec[Any,E,T]", "kind" : "final def"}, {"label" : "mapTest", "tail" : "(f: (T) => T1): Spec[R, E, T1]", "member" : "zio.test.Spec.mapTest", "link" : "zio\/test\/Spec.html#mapTest[T1](f:T=>T1):zio.test.Spec[R,E,T1]", "kind" : "final def"}, {"label" : "mapLabel", "tail" : "(f: (String) => String): Spec[R, E, T]", "member" : "zio.test.Spec.mapLabel", "link" : "zio\/test\/Spec.html#mapLabel(f:String=>String):zio.test.Spec[R,E,T]", "kind" : "final def"}, {"label" : "mapError", "tail" : "(f: (E) => E1)(ev: CanFail[E]): Spec[R, E1, T]", "member" : "zio.test.Spec.mapError", "link" : "zio\/test\/Spec.html#mapError[E1](f:E=>E1)(implicitev:zio.CanFail[E]):zio.test.Spec[R,E1,T]", "kind" : "final def"}, {"label" : "mapBoth", "tail" : "(f: (E) => E1, g: (T) => T1)(ev: CanFail[E]): Spec[R, E1, T1]", "member" : "zio.test.Spec.mapBoth", "link" : "zio\/test\/Spec.html#mapBoth[E1,T1](f:E=>E1,g:T=>T1)(implicitev:zio.CanFail[E]):zio.test.Spec[R,E1,T1]", "kind" : "final def"}, {"label" : "foreachParN", "tail" : "(n: Int)(failure: (Cause[E]) => ZIO[R1, E1, A], success: (T) => ZIO[R1, E1, A]): ZManaged[R1, Nothing, Spec[R1, E1, A]]", "member" : "zio.test.Spec.foreachParN", "link" : "zio\/test\/Spec.html#foreachParN[R1<:R,E1,A](n:Int)(failure:zio.Cause[E]=>zio.ZIO[R1,E1,A],success:T=>zio.ZIO[R1,E1,A]):zio.ZManaged[R1,Nothing,zio.test.Spec[R1,E1,A]]", "kind" : "final def"}, {"label" : "foreachPar", "tail" : "(failure: (Cause[E]) => ZIO[R1, E1, A], success: (T) => ZIO[R1, E1, A]): ZManaged[R1, Nothing, Spec[R1, E1, A]]", "member" : "zio.test.Spec.foreachPar", "link" : "zio\/test\/Spec.html#foreachPar[R1<:R,E1,A](failure:zio.Cause[E]=>zio.ZIO[R1,E1,A],success:T=>zio.ZIO[R1,E1,A]):zio.ZManaged[R1,Nothing,zio.test.Spec[R1,E1,A]]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(failure: (Cause[E]) => ZIO[R1, E1, A], success: (T) => ZIO[R1, E1, A]): ZManaged[R1, Nothing, Spec[R1, E1, A]]", "member" : "zio.test.Spec.foreach", "link" : "zio\/test\/Spec.html#foreach[R1<:R,E1,A](failure:zio.Cause[E]=>zio.ZIO[R1,E1,A],success:T=>zio.ZIO[R1,E1,A]):zio.ZManaged[R1,Nothing,zio.test.Spec[R1,E1,A]]", "kind" : "final def"}, {"label" : "foreachExec", "tail" : "(defExec: ExecutionStrategy)(failure: (Cause[E]) => ZIO[R1, E1, A], success: (T) => ZIO[R1, E1, A]): ZManaged[R1, Nothing, Spec[R1, E1, A]]", "member" : "zio.test.Spec.foreachExec", "link" : "zio\/test\/Spec.html#foreachExec[R1<:R,E1,A](defExec:zio.ExecutionStrategy)(failure:zio.Cause[E]=>zio.ZIO[R1,E1,A],success:T=>zio.ZIO[R1,E1,A]):zio.ZManaged[R1,Nothing,zio.test.Spec[R1,E1,A]]", "kind" : "final def"}, {"label" : "forall", "tail" : "(f: (SpecCase[R, E, T, Any]) => ZIO[R1, E1, Boolean]): ZManaged[R1, E1, Boolean]", "member" : "zio.test.Spec.forall", "link" : "zio\/test\/Spec.html#forall[R1<:R,E1>:E](f:zio.test.Spec.SpecCase[R,E,T,Any]=>zio.ZIO[R1,E1,Boolean]):zio.ZManaged[R1,E1,Boolean]", "kind" : "final def"}, {"label" : "foldManaged", "tail" : "(defExec: ExecutionStrategy)(f: (SpecCase[R, E, T, Z]) => ZManaged[R1, E1, Z]): ZManaged[R1, E1, Z]", "member" : "zio.test.Spec.foldManaged", "link" : "zio\/test\/Spec.html#foldManaged[R1<:R,E1,Z](defExec:zio.ExecutionStrategy)(f:zio.test.Spec.SpecCase[R,E,T,Z]=>zio.ZManaged[R1,E1,Z]):zio.ZManaged[R1,E1,Z]", "kind" : "final def"}, {"label" : "foldM", "tail" : "(defExec: ExecutionStrategy)(f: (SpecCase[R, E, T, Z]) => ZManaged[R1, E1, Z]): ZManaged[R1, E1, Z]", "member" : "zio.test.Spec.foldM", "link" : "zio\/test\/Spec.html#foldM[R1<:R,E1,Z](defExec:zio.ExecutionStrategy)(f:zio.test.Spec.SpecCase[R,E,T,Z]=>zio.ZManaged[R1,E1,Z]):zio.ZManaged[R1,E1,Z]", "kind" : "final def"}, {"label" : "fold", "tail" : "(f: (SpecCase[R, E, T, Z]) => Z): Z", "member" : "zio.test.Spec.fold", "link" : "zio\/test\/Spec.html#fold[Z](f:zio.test.Spec.SpecCase[R,E,T,Z]=>Z):Z", "kind" : "final def"}, {"label" : "filterTags", "tail" : "(f: (String) => Boolean): Option[Spec[R, E, T]]", "member" : "zio.test.Spec.filterTags", "link" : "zio\/test\/Spec.html#filterTags(f:String=>Boolean):Option[zio.test.Spec[R,E,T]]", "kind" : "final def"}, {"label" : "filterLabels", "tail" : "(f: (String) => Boolean): Option[Spec[R, E, T]]", "member" : "zio.test.Spec.filterLabels", "link" : "zio\/test\/Spec.html#filterLabels(f:String=>Boolean):Option[zio.test.Spec[R,E,T]]", "kind" : "final def"}, {"label" : "filterAnnotations", "tail" : "(key: TestAnnotation[V])(f: (V) => Boolean): Option[Spec[R, E, T]]", "member" : "zio.test.Spec.filterAnnotations", "link" : "zio\/test\/Spec.html#filterAnnotations[V](key:zio.test.TestAnnotation[V])(f:V=>Boolean):Option[zio.test.Spec[R,E,T]]", "kind" : "final def"}, {"label" : "exists", "tail" : "(f: (SpecCase[R, E, T, Any]) => ZIO[R1, E1, Boolean]): ZManaged[R1, E1, Boolean]", "member" : "zio.test.Spec.exists", "link" : "zio\/test\/Spec.html#exists[R1<:R,E1>:E](f:zio.test.Spec.SpecCase[R,E,T,Any]=>zio.ZIO[R1,E1,Boolean]):zio.ZManaged[R1,E1,Boolean]", "kind" : "final def"}, {"label" : "execute", "tail" : "(defExec: ExecutionStrategy): ZManaged[R, Nothing, Spec[Any, E, T]]", "member" : "zio.test.Spec.execute", "link" : "zio\/test\/Spec.html#execute(defExec:zio.ExecutionStrategy):zio.ZManaged[R,Nothing,zio.test.Spec[Any,E,T]]", "kind" : "final def"}, {"label" : "countTests", "tail" : "(f: (T) => Boolean): ZManaged[R, E, Int]", "member" : "zio.test.Spec.countTests", "link" : "zio\/test\/Spec.html#countTests(f:T=>Boolean):zio.ZManaged[R,E,Int]", "kind" : "final def"}, {"label" : "bimap", "tail" : "(f: (E) => E1, g: (T) => T1)(ev: CanFail[E]): Spec[R, E1, T1]", "member" : "zio.test.Spec.bimap", "link" : "zio\/test\/Spec.html#bimap[E1,T1](f:E=>E1,g:T=>T1)(implicitev:zio.CanFail[E]):zio.test.Spec[R,E1,T1]", "kind" : "final def"}, {"label" : "annotated", "tail" : "(): Spec[R with Has[Annotations], Annotated[E], Annotated[T]]", "member" : "zio.test.Spec.annotated", "link" : "zio\/test\/Spec.html#annotated:zio.test.Spec[Rwithzio.Has[zio.test.Annotations],zio.test.Annotated[E],zio.test.Annotated[T]]", "kind" : "final def"}, {"label" : "annotate", "tail" : "(key: TestAnnotation[V], value: V): Spec[R, E, T]", "member" : "zio.test.Spec.annotate", "link" : "zio\/test\/Spec.html#annotate[V](key:zio.test.TestAnnotation[V],value:V):zio.test.Spec[R,E,T]", "kind" : "final def"}, {"label" : "@@", "tail" : "(aspect: TestAspect[R0, R1, E0, E1])(ev1: <:<[E, TestFailure[E2]], ev2: <:<[T, TestSuccess]): ZSpec[R1, E2]", "member" : "zio.test.Spec.@@", "link" : "zio\/test\/Spec.html#@@[R0<:R1,R1<:R,E0,E1,E2>:E0<:E1](aspect:zio.test.TestAspect[R0,R1,E0,E1])(implicitev1:E<:<zio.test.TestFailure[E2],implicitev2:T<:<zio.test.TestSuccess):zio.test.ZSpec[R1,E2]", "kind" : "final def"}, {"label" : "+", "tail" : "(that: Spec[R1, E1, T1]): Spec[R1, E1, T1]", "member" : "zio.test.Spec.+", "link" : "zio\/test\/Spec.html#+[R1<:R,E1>:E,T1>:T](that:zio.test.Spec[R1,E1,T1]):zio.test.Spec[R1,E1,T1]", "kind" : "def"}, {"member" : "zio.test.Spec#<init>", "error" : "unsupported entity"}, {"label" : "caseValue", "tail" : ": SpecCase[R, E, T, Spec[R, E, T]]", "member" : "zio.test.Spec.caseValue", "link" : "zio\/test\/Spec.html#caseValue:zio.test.Spec.SpecCase[R,E,T,zio.test.Spec[R,E,T]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/Spec.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "injectSomeShared", "tail" : "(): InjectSomeSharedPartiallyApplied[R0, R, E, T]", "member" : "zio.test.SpecVersionSpecific.injectSomeShared", "link" : "zio\/test\/Spec.html#injectSomeShared[R0<:zio.Has[_]]:zio.test.InjectSomeSharedPartiallyApplied[R0,R,E,T]", "kind" : "final def"}, {"label" : "injectCustomShared", "tail" : "(layers: ZLayer[_, E1, _]*): Spec[environment.TestEnvironment, E1, T]", "member" : "zio.test.SpecVersionSpecific.injectCustomShared", "link" : "zio\/test\/Spec.html#injectCustomShared[E1>:E](layers:zio.ZLayer[_,E1,_]*):zio.test.Spec[zio.test.environment.TestEnvironment,E1,T]", "kind" : "macro def"}, {"label" : "injectShared", "tail" : "(layers: ZLayer[_, E1, _]*): Spec[Any, E1, T]", "member" : "zio.test.SpecVersionSpecific.injectShared", "link" : "zio\/test\/Spec.html#injectShared[E1>:E](layers:zio.ZLayer[_,E1,_]*):zio.test.Spec[Any,E1,T]", "kind" : "macro def"}, {"label" : "injectSome", "tail" : "(): InjectSomePartiallyApplied[R0, R, E, T]", "member" : "zio.test.SpecVersionSpecific.injectSome", "link" : "zio\/test\/Spec.html#injectSome[R0<:zio.Has[_]]:zio.test.InjectSomePartiallyApplied[R0,R,E,T]", "kind" : "def"}, {"label" : "injectCustom", "tail" : "(layers: ZLayer[_, E1, _]*): Spec[environment.TestEnvironment, E1, T]", "member" : "zio.test.SpecVersionSpecific.injectCustom", "link" : "zio\/test\/Spec.html#injectCustom[E1>:E](layers:zio.ZLayer[_,E1,_]*):zio.test.Spec[zio.test.environment.TestEnvironment,E1,T]", "kind" : "macro def"}, {"label" : "inject", "tail" : "(layers: ZLayer[_, E1, _]*): Spec[Any, E1, T]", "member" : "zio.test.SpecVersionSpecific.inject", "link" : "zio\/test\/Spec.html#inject[E1>:E](layers:zio.ZLayer[_,E1,_]*):zio.test.Spec[Any,E1,T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Spec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Spec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Spec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Spec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Spec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Spec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Spec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Spec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Spec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Spec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Spec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Spec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Spec.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Spec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Spec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Spec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/test\/Spec.html", "kind" : "case class"}, {"name" : "zio.test.SpecLayerMacros", "shortDescription" : "", "members_class" : [{"label" : "TreeOps", "tail" : "", "member" : "zio.internal.macros.LayerMacroUtils.TreeOps", "link" : "zio\/test\/SpecLayerMacros.html#TreeOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "TypeOps", "tail" : "", "member" : "zio.internal.macros.LayerMacroUtils.TypeOps", "link" : "zio\/test\/SpecLayerMacros.html#TypeOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "injectSomeSharedImpl", "tail" : "(layers: scala.reflect.macros.blackbox.Context.Expr[ZLayer[_, E, _]]*)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[R0], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[R]): scala.reflect.macros.blackbox.Context.Expr[Spec[R0, E, A]]", "member" : "zio.test.SpecLayerMacros.injectSomeSharedImpl", "link" : "zio\/test\/SpecLayerMacros.html#injectSomeSharedImpl[R0,R,E,A](layers:SpecLayerMacros.this.c.Expr[zio.ZLayer[_,E,_]]*)(implicitevidence$3:SpecLayerMacros.this.c.WeakTypeTag[R0],implicitevidence$4:SpecLayerMacros.this.c.WeakTypeTag[R]):SpecLayerMacros.this.c.Expr[zio.test.Spec[R0,E,A]]", "kind" : "def"}, {"label" : "injectCustomSharedImpl", "tail" : "(layers: scala.reflect.macros.blackbox.Context.Expr[ZLayer[_, E, _]]*)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[R]): scala.reflect.macros.blackbox.Context.Expr[Spec[environment.TestEnvironment, E, A]]", "member" : "zio.test.SpecLayerMacros.injectCustomSharedImpl", "link" : "zio\/test\/SpecLayerMacros.html#injectCustomSharedImpl[R,E,A](layers:SpecLayerMacros.this.c.Expr[zio.ZLayer[_,E,_]]*)(implicitevidence$2:SpecLayerMacros.this.c.WeakTypeTag[R]):SpecLayerMacros.this.c.Expr[zio.test.Spec[zio.test.environment.TestEnvironment,E,A]]", "kind" : "def"}, {"label" : "injectSharedImpl", "tail" : "(layers: scala.reflect.macros.blackbox.Context.Expr[ZLayer[_, E, _]]*)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[R]): scala.reflect.macros.blackbox.Context.Expr[Spec[Any, E, A]]", "member" : "zio.test.SpecLayerMacros.injectSharedImpl", "link" : "zio\/test\/SpecLayerMacros.html#injectSharedImpl[R,E,A](layers:SpecLayerMacros.this.c.Expr[zio.ZLayer[_,E,_]]*)(implicitevidence$1:SpecLayerMacros.this.c.WeakTypeTag[R]):SpecLayerMacros.this.c.Expr[zio.test.Spec[Any,E,A]]", "kind" : "def"}, {"member" : "zio.test.SpecLayerMacros#<init>", "error" : "unsupported entity"}, {"label" : "c", "tail" : ": Context", "member" : "zio.test.SpecLayerMacros.c", "link" : "zio\/test\/SpecLayerMacros.html#c:scala.reflect.macros.blackbox.Context", "kind" : "val"}, {"label" : "assertProperVarArgs", "tail" : "(layers: Seq[scala.reflect.macros.blackbox.Context.Expr[_]]): Unit", "member" : "zio.internal.macros.LayerMacroUtils.assertProperVarArgs", "link" : "zio\/test\/SpecLayerMacros.html#assertProperVarArgs(layers:Seq[LayerMacroUtils.this.c.Expr[_]]):Unit", "kind" : "def"}, {"label" : "getRequirements", "tail" : "(tpe: scala.reflect.macros.Universe.Type): List[scala.reflect.macros.blackbox.Context.Type]", "member" : "zio.internal.macros.LayerMacroUtils.getRequirements", "link" : "zio\/test\/SpecLayerMacros.html#getRequirements(tpe:LayerMacroUtils.this.c.universe.Type):List[LayerMacroUtils.this.c.Type]", "kind" : "def"}, {"label" : "constructLayer", "tail" : "(layers0: Seq[scala.reflect.macros.blackbox.Context.Expr[ZLayer[_, E, _]]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[R0], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[R]): scala.reflect.macros.blackbox.Context.Expr[ZLayer[Any, E, R]]", "member" : "zio.internal.macros.LayerMacroUtils.constructLayer", "link" : "zio\/test\/SpecLayerMacros.html#constructLayer[R0,R,E](layers0:Seq[LayerMacroUtils.this.c.Expr[zio.ZLayer[_,E,_]]])(implicitevidence$4:LayerMacroUtils.this.c.WeakTypeTag[R0],implicitevidence$5:LayerMacroUtils.this.c.WeakTypeTag[R]):LayerMacroUtils.this.c.Expr[zio.ZLayer[Any,E,R]]", "kind" : "def"}, {"label" : "injectBaseImpl", "tail" : "(layers: Seq[scala.reflect.macros.blackbox.Context.Expr[ZLayer[_, E, _]]], method: String)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[R0], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[R]): scala.reflect.macros.blackbox.Context.Expr[F[R0, E, A]]", "member" : "zio.internal.macros.LayerMacroUtils.injectBaseImpl", "link" : "zio\/test\/SpecLayerMacros.html#injectBaseImpl[F[_,_,_],R0,R,E,A](layers:Seq[LayerMacroUtils.this.c.Expr[zio.ZLayer[_,E,_]]],method:String)(implicitevidence$2:LayerMacroUtils.this.c.WeakTypeTag[R0],implicitevidence$3:LayerMacroUtils.this.c.WeakTypeTag[R]):LayerMacroUtils.this.c.Expr[F[R0,E,A]]", "kind" : "def"}, {"label" : "isValidHasType", "tail" : "(tpe: scala.reflect.macros.Universe.Type): Boolean", "member" : "zio.internal.macros.LayerMacroUtils.isValidHasType", "link" : "zio\/test\/SpecLayerMacros.html#isValidHasType(tpe:LayerMacroUtils.this.c.universe.Type):Boolean", "kind" : "def"}, {"label" : "getRequirements", "tail" : "(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): List[scala.reflect.macros.blackbox.Context.Type]", "member" : "zio.internal.macros.LayerMacroUtils.getRequirements", "link" : "zio\/test\/SpecLayerMacros.html#getRequirements[T](implicitevidence$1:LayerMacroUtils.this.c.WeakTypeTag[T]):List[LayerMacroUtils.this.c.Type]", "kind" : "def"}, {"label" : "getNode", "tail" : "(layer: LayerExpr): Node[scala.reflect.macros.blackbox.Context.Type, LayerExpr]", "member" : "zio.internal.macros.LayerMacroUtils.getNode", "link" : "zio\/test\/SpecLayerMacros.html#getNode(layer:LayerMacroUtils.this.LayerExpr):zio.internal.macros.Node[LayerMacroUtils.this.c.Type,LayerMacroUtils.this.LayerExpr]", "kind" : "def"}, {"label" : "buildMemoizedLayer", "tail" : "(exprGraph: ZLayerExprBuilder[scala.reflect.macros.blackbox.Context.Type, LayerExpr], requirements: List[scala.reflect.macros.blackbox.Context.Type]): LayerExpr", "member" : "zio.internal.macros.LayerMacroUtils.buildMemoizedLayer", "link" : "zio\/test\/SpecLayerMacros.html#buildMemoizedLayer(exprGraph:zio.internal.macros.ZLayerExprBuilder[LayerMacroUtils.this.c.Type,LayerMacroUtils.this.LayerExpr],requirements:List[LayerMacroUtils.this.c.Type]):LayerMacroUtils.this.LayerExpr", "kind" : "def"}, {"label" : "generateExprGraph", "tail" : "(nodes: List[Node[scala.reflect.macros.blackbox.Context.Type, LayerExpr]]): ZLayerExprBuilder[scala.reflect.macros.blackbox.Context.Type, LayerExpr]", "member" : "zio.internal.macros.LayerMacroUtils.generateExprGraph", "link" : "zio\/test\/SpecLayerMacros.html#generateExprGraph(nodes:List[zio.internal.macros.Node[LayerMacroUtils.this.c.Type,LayerMacroUtils.this.LayerExpr]]):zio.internal.macros.ZLayerExprBuilder[LayerMacroUtils.this.c.Type,LayerMacroUtils.this.LayerExpr]", "kind" : "def"}, {"label" : "generateExprGraph", "tail" : "(layers: Seq[LayerExpr]): ZLayerExprBuilder[scala.reflect.macros.blackbox.Context.Type, LayerExpr]", "member" : "zio.internal.macros.LayerMacroUtils.generateExprGraph", "link" : "zio\/test\/SpecLayerMacros.html#generateExprGraph(layers:Seq[LayerMacroUtils.this.LayerExpr]):zio.internal.macros.ZLayerExprBuilder[LayerMacroUtils.this.c.Type,LayerMacroUtils.this.LayerExpr]", "kind" : "def"}, {"label" : "LayerExpr", "tail" : "", "member" : "zio.internal.macros.LayerMacroUtils.LayerExpr", "link" : "zio\/test\/SpecLayerMacros.html#LayerExpr=LayerMacroUtils.this.c.Expr[zio.ZLayer[_,_,_]]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/SpecLayerMacros.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/SpecLayerMacros.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/SpecLayerMacros.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/SpecLayerMacros.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/SpecLayerMacros.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/SpecLayerMacros.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/SpecLayerMacros.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SpecLayerMacros.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SpecLayerMacros.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SpecLayerMacros.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/SpecLayerMacros.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/SpecLayerMacros.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/SpecLayerMacros.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/SpecLayerMacros.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/SpecLayerMacros.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/SpecLayerMacros.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/SpecLayerMacros.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/SpecLayerMacros.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/SpecLayerMacros.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/SpecLayerMacros.html", "kind" : "class"}, {"name" : "zio.test.Summary", "shortDescription" : "", "members_case class" : [{"label" : "total", "tail" : "(): Int", "member" : "zio.test.Summary.total", "link" : "zio\/test\/Summary.html#total:Int", "kind" : "def"}, {"member" : "zio.test.Summary#<init>", "error" : "unsupported entity"}, {"label" : "summary", "tail" : ": String", "member" : "zio.test.Summary.summary", "link" : "zio\/test\/Summary.html#summary:String", "kind" : "val"}, {"label" : "ignore", "tail" : ": Int", "member" : "zio.test.Summary.ignore", "link" : "zio\/test\/Summary.html#ignore:Int", "kind" : "val"}, {"label" : "fail", "tail" : ": Int", "member" : "zio.test.Summary.fail", "link" : "zio\/test\/Summary.html#fail:Int", "kind" : "val"}, {"label" : "success", "tail" : ": Int", "member" : "zio.test.Summary.success", "link" : "zio\/test\/Summary.html#success:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/Summary.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Summary.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Summary.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Summary.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Summary.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Summary.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Summary.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Summary.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Summary.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Summary.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Summary.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Summary.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Summary.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Summary.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Summary.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Summary.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Summary.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/test\/Summary.html", "kind" : "case class"}, {"name" : "zio.test.SummaryBuilder", "shortDescription" : "", "object" : "zio\/test\/SummaryBuilder$.html", "members_object" : [{"label" : "buildSummary", "tail" : "(executedSpec: ExecutedSpec[E]): Summary", "member" : "zio.test.SummaryBuilder.buildSummary", "link" : "zio\/test\/SummaryBuilder$.html#buildSummary[E](executedSpec:zio.test.ExecutedSpec[E]):zio.test.Summary", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/SummaryBuilder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/SummaryBuilder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/SummaryBuilder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/SummaryBuilder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/SummaryBuilder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/SummaryBuilder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/SummaryBuilder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SummaryBuilder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SummaryBuilder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/SummaryBuilder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/SummaryBuilder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/SummaryBuilder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/SummaryBuilder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/SummaryBuilder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/SummaryBuilder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/SummaryBuilder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/SummaryBuilder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/SummaryBuilder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/SummaryBuilder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.TestAnnotation", "shortDescription" : "A type of annotation.", "object" : "zio\/test\/TestAnnotation$.html", "members_class" : [{"label" : "hashCode", "tail" : ": Int", "member" : "zio.test.TestAnnotation.hashCode", "link" : "zio\/test\/TestAnnotation.html#hashCode:Int", "kind" : "lazy val"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "zio.test.TestAnnotation.equals", "link" : "zio\/test\/TestAnnotation.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "combine", "tail" : ": (V, V) => V", "member" : "zio.test.TestAnnotation.combine", "link" : "zio\/test\/TestAnnotation.html#combine:(V,V)=>V", "kind" : "val"}, {"label" : "initial", "tail" : ": V", "member" : "zio.test.TestAnnotation.initial", "link" : "zio\/test\/TestAnnotation.html#initial:V", "kind" : "val"}, {"label" : "identifier", "tail" : ": String", "member" : "zio.test.TestAnnotation.identifier", "link" : "zio\/test\/TestAnnotation.html#identifier:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestAnnotation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestAnnotation.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestAnnotation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestAnnotation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestAnnotation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestAnnotation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestAnnotation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestAnnotation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestAnnotation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestAnnotation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestAnnotation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestAnnotation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestAnnotation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestAnnotation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "compose", "tail" : "(left: Either[Int, Chunk[A]], right: Either[Int, Chunk[A]]): Either[Int, Chunk[A]]", "member" : "zio.test.TestAnnotation.compose", "link" : "zio\/test\/TestAnnotation$.html#compose[A](left:Either[Int,zio.Chunk[A]],right:Either[Int,zio.Chunk[A]]):Either[Int,zio.Chunk[A]]", "kind" : "def"}, {"label" : "fibers", "tail" : ": TestAnnotation[Either[Int, Chunk[AtomicReference[SortedSet[Fiber.Runtime[Any, Any]]]]]]", "member" : "zio.test.TestAnnotation.fibers", "link" : "zio\/test\/TestAnnotation$.html#fibers:zio.test.TestAnnotation[Either[Int,zio.Chunk[java.util.concurrent.atomic.AtomicReference[scala.collection.immutable.SortedSet[zio.Fiber.Runtime[Any,Any]]]]]]", "kind" : "val"}, {"label" : "location", "tail" : ": TestAnnotation[List[SourceLocation]]", "member" : "zio.test.TestAnnotation.location", "link" : "zio\/test\/TestAnnotation$.html#location:zio.test.TestAnnotation[List[zio.test.SourceLocation]]", "kind" : "val"}, {"label" : "timing", "tail" : ": TestAnnotation[zio.Duration]", "member" : "zio.test.TestAnnotation.timing", "link" : "zio\/test\/TestAnnotation$.html#timing:zio.test.TestAnnotation[zio.Duration]", "kind" : "val"}, {"label" : "tagged", "tail" : ": TestAnnotation[Set[String]]", "member" : "zio.test.TestAnnotation.tagged", "link" : "zio\/test\/TestAnnotation$.html#tagged:zio.test.TestAnnotation[Set[String]]", "kind" : "val"}, {"label" : "retried", "tail" : ": TestAnnotation[Int]", "member" : "zio.test.TestAnnotation.retried", "link" : "zio\/test\/TestAnnotation$.html#retried:zio.test.TestAnnotation[Int]", "kind" : "val"}, {"label" : "repeated", "tail" : ": TestAnnotation[Int]", "member" : "zio.test.TestAnnotation.repeated", "link" : "zio\/test\/TestAnnotation$.html#repeated:zio.test.TestAnnotation[Int]", "kind" : "val"}, {"label" : "ignored", "tail" : ": TestAnnotation[Int]", "member" : "zio.test.TestAnnotation.ignored", "link" : "zio\/test\/TestAnnotation$.html#ignored:zio.test.TestAnnotation[Int]", "kind" : "val"}, {"label" : "apply", "tail" : "(identifier: String, initial: V, combine: (V, V) => V)(tag: zio.Tag[V]): TestAnnotation[V]", "member" : "zio.test.TestAnnotation.apply", "link" : "zio\/test\/TestAnnotation$.html#apply[V](identifier:String,initial:V,combine:(V,V)=>V)(implicittag:zio.Tag[V]):zio.test.TestAnnotation[V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestAnnotation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestAnnotation$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestAnnotation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestAnnotation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestAnnotation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestAnnotation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestAnnotation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestAnnotation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestAnnotation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestAnnotation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestAnnotation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestAnnotation$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestAnnotation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestAnnotation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestAnnotation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestAnnotation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/TestAnnotation.html", "kind" : "class"}, {"name" : "zio.test.TestAnnotationMap", "shortDescription" : "An annotation map keeps track of annotations of different types.", "object" : "zio\/test\/TestAnnotationMap$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "zio.test.TestAnnotationMap.toString", "link" : "zio\/test\/TestAnnotationMap.html#toString():String", "kind" : "def"}, {"label" : "get", "tail" : "(key: TestAnnotation[V]): V", "member" : "zio.test.TestAnnotationMap.get", "link" : "zio\/test\/TestAnnotationMap.html#get[V](key:zio.test.TestAnnotation[V]):V", "kind" : "def"}, {"label" : "annotate", "tail" : "(key: TestAnnotation[V], value: V): TestAnnotationMap", "member" : "zio.test.TestAnnotationMap.annotate", "link" : "zio\/test\/TestAnnotationMap.html#annotate[V](key:zio.test.TestAnnotation[V],value:V):zio.test.TestAnnotationMap", "kind" : "def"}, {"label" : "++", "tail" : "(that: TestAnnotationMap): TestAnnotationMap", "member" : "zio.test.TestAnnotationMap.++", "link" : "zio\/test\/TestAnnotationMap.html#++(that:zio.test.TestAnnotationMap):zio.test.TestAnnotationMap", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestAnnotationMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestAnnotationMap.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestAnnotationMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestAnnotationMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestAnnotationMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestAnnotationMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestAnnotationMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotationMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotationMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotationMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestAnnotationMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestAnnotationMap.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestAnnotationMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestAnnotationMap.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestAnnotationMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestAnnotationMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestAnnotationMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestAnnotationMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "empty", "tail" : ": TestAnnotationMap", "member" : "zio.test.TestAnnotationMap.empty", "link" : "zio\/test\/TestAnnotationMap$.html#empty:zio.test.TestAnnotationMap", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestAnnotationMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestAnnotationMap$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestAnnotationMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestAnnotationMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestAnnotationMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestAnnotationMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestAnnotationMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotationMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotationMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotationMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestAnnotationMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestAnnotationMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestAnnotationMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestAnnotationMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestAnnotationMap$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestAnnotationMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestAnnotationMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestAnnotationMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestAnnotationMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/TestAnnotationMap.html", "kind" : "class"}, {"name" : "zio.test.TestAnnotationRenderer", "shortDescription" : "A TestAnnotationRenderer knows how to render test annotations.", "object" : "zio\/test\/TestAnnotationRenderer$.html", "members_class" : [{"label" : "combine", "tail" : "(that: TestAnnotationRenderer): TestAnnotationRenderer", "member" : "zio.test.TestAnnotationRenderer.combine", "link" : "zio\/test\/TestAnnotationRenderer.html#combine(that:zio.test.TestAnnotationRenderer):zio.test.TestAnnotationRenderer", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: TestAnnotationRenderer): TestAnnotationRenderer", "member" : "zio.test.TestAnnotationRenderer.<>", "link" : "zio\/test\/TestAnnotationRenderer.html#<>(that:zio.test.TestAnnotationRenderer):zio.test.TestAnnotationRenderer", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestAnnotationRenderer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestAnnotationRenderer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestAnnotationRenderer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestAnnotationRenderer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestAnnotationRenderer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestAnnotationRenderer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestAnnotationRenderer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotationRenderer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotationRenderer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotationRenderer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestAnnotationRenderer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestAnnotationRenderer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestAnnotationRenderer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestAnnotationRenderer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestAnnotationRenderer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestAnnotationRenderer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestAnnotationRenderer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestAnnotationRenderer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestAnnotationRenderer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(ancestors: List[TestAnnotationMap], child: TestAnnotationMap): List[String]", "member" : "zio.test.TestAnnotationRenderer.run", "link" : "zio\/test\/TestAnnotationRenderer.html#run(ancestors:List[zio.test.TestAnnotationMap],child:zio.test.TestAnnotationMap):List[String]", "kind" : "abstract def"}], "members_object" : [{"label" : "timed", "tail" : ": TestAnnotationRenderer", "member" : "zio.test.TestAnnotationRenderer.timed", "link" : "zio\/test\/TestAnnotationRenderer$.html#timed:zio.test.TestAnnotationRenderer", "kind" : "val"}, {"label" : "silent", "tail" : ": TestAnnotationRenderer", "member" : "zio.test.TestAnnotationRenderer.silent", "link" : "zio\/test\/TestAnnotationRenderer$.html#silent:zio.test.TestAnnotationRenderer", "kind" : "val"}, {"label" : "tagged", "tail" : ": TestAnnotationRenderer", "member" : "zio.test.TestAnnotationRenderer.tagged", "link" : "zio\/test\/TestAnnotationRenderer$.html#tagged:zio.test.TestAnnotationRenderer", "kind" : "val"}, {"label" : "retried", "tail" : ": TestAnnotationRenderer", "member" : "zio.test.TestAnnotationRenderer.retried", "link" : "zio\/test\/TestAnnotationRenderer$.html#retried:zio.test.TestAnnotationRenderer", "kind" : "val"}, {"label" : "repeated", "tail" : ": TestAnnotationRenderer", "member" : "zio.test.TestAnnotationRenderer.repeated", "link" : "zio\/test\/TestAnnotationRenderer$.html#repeated:zio.test.TestAnnotationRenderer", "kind" : "val"}, {"label" : "ignored", "tail" : ": TestAnnotationRenderer", "member" : "zio.test.TestAnnotationRenderer.ignored", "link" : "zio\/test\/TestAnnotationRenderer$.html#ignored:zio.test.TestAnnotationRenderer", "kind" : "val"}, {"label" : "default", "tail" : ": TestAnnotationRenderer", "member" : "zio.test.TestAnnotationRenderer.default", "link" : "zio\/test\/TestAnnotationRenderer$.html#default:zio.test.TestAnnotationRenderer", "kind" : "lazy val"}, {"label" : "CompositeRenderer", "tail" : "", "member" : "zio.test.TestAnnotationRenderer.CompositeRenderer", "link" : "zio\/test\/TestAnnotationRenderer$.html#CompositeRendererextendsTestAnnotationRendererwithProductwithSerializable", "kind" : "final case class"}, {"label" : "LeafRenderer", "tail" : "", "member" : "zio.test.TestAnnotationRenderer.LeafRenderer", "link" : "zio\/test\/TestAnnotationRenderer$.html#LeafRenderer", "kind" : "object"}, {"label" : "LeafRenderer", "tail" : "", "member" : "zio.test.TestAnnotationRenderer.LeafRenderer", "link" : "zio\/test\/TestAnnotationRenderer$.html#LeafRendererextendsTestAnnotationRenderer", "kind" : "sealed abstract class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestAnnotationRenderer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestAnnotationRenderer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestAnnotationRenderer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestAnnotationRenderer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestAnnotationRenderer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestAnnotationRenderer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestAnnotationRenderer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotationRenderer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotationRenderer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAnnotationRenderer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestAnnotationRenderer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestAnnotationRenderer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestAnnotationRenderer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestAnnotationRenderer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestAnnotationRenderer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestAnnotationRenderer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestAnnotationRenderer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestAnnotationRenderer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestAnnotationRenderer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/TestAnnotationRenderer.html", "kind" : "class"}, {"name" : "zio.test.TestArgs", "shortDescription" : "", "object" : "zio\/test\/TestArgs$.html", "members_object" : [{"label" : "parse", "tail" : "(args: Array[String]): TestArgs", "member" : "zio.test.TestArgs.parse", "link" : "zio\/test\/TestArgs$.html#parse(args:Array[String]):zio.test.TestArgs", "kind" : "def"}, {"label" : "empty", "tail" : "(): TestArgs", "member" : "zio.test.TestArgs.empty", "link" : "zio\/test\/TestArgs$.html#empty:zio.test.TestArgs", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestArgs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestArgs$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestArgs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestArgs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestArgs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestArgs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestArgs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestArgs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestArgs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestArgs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestArgs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestArgs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestArgs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestArgs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestArgs$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestArgs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestArgs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestArgs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestArgs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "zio.test.TestArgs#<init>", "error" : "unsupported entity"}, {"label" : "printSummary", "tail" : ": Boolean", "member" : "zio.test.TestArgs.printSummary", "link" : "zio\/test\/TestArgs.html#printSummary:Boolean", "kind" : "val"}, {"label" : "testRenderer", "tail" : ": Option[String]", "member" : "zio.test.TestArgs.testRenderer", "link" : "zio\/test\/TestArgs.html#testRenderer:Option[String]", "kind" : "val"}, {"label" : "testTaskPolicy", "tail" : ": Option[String]", "member" : "zio.test.TestArgs.testTaskPolicy", "link" : "zio\/test\/TestArgs.html#testTaskPolicy:Option[String]", "kind" : "val"}, {"label" : "tagSearchTerms", "tail" : ": List[String]", "member" : "zio.test.TestArgs.tagSearchTerms", "link" : "zio\/test\/TestArgs.html#tagSearchTerms:List[String]", "kind" : "val"}, {"label" : "testSearchTerms", "tail" : ": List[String]", "member" : "zio.test.TestArgs.testSearchTerms", "link" : "zio\/test\/TestArgs.html#testSearchTerms:List[String]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/TestArgs.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestArgs.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestArgs.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestArgs.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestArgs.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestArgs.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestArgs.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestArgs.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestArgs.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestArgs.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestArgs.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestArgs.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestArgs.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestArgs.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestArgs.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestArgs.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestArgs.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/test\/TestArgs.html", "kind" : "case class"}, {"name" : "zio.test.TestAspect", "shortDescription" : "A TestAspect is an aspect that can be weaved into specs.", "object" : "zio\/test\/TestAspect$.html", "members_class" : [{"label" : "andThen", "tail" : "(that: TestAspect[LowerR1, UpperR1, LowerE1, UpperE1]): TestAspect[LowerR1, UpperR1, LowerE1, UpperE1]", "member" : "zio.test.TestAspect.andThen", "link" : "zio\/test\/TestAspect.html#andThen[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE](that:zio.test.TestAspect[LowerR1,UpperR1,LowerE1,UpperE1]):zio.test.TestAspect[LowerR1,UpperR1,LowerE1,UpperE1]", "kind" : "final def"}, {"label" : "@@", "tail" : "(that: TestAspect[LowerR1, UpperR1, LowerE1, UpperE1]): TestAspect[LowerR1, UpperR1, LowerE1, UpperE1]", "member" : "zio.test.TestAspect.@@", "link" : "zio\/test\/TestAspect.html#@@[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE](that:zio.test.TestAspect[LowerR1,UpperR1,LowerE1,UpperE1]):zio.test.TestAspect[LowerR1,UpperR1,LowerE1,UpperE1]", "kind" : "final def"}, {"label" : ">>>", "tail" : "(that: TestAspect[LowerR1, UpperR1, LowerE1, UpperE1]): TestAspect[LowerR1, UpperR1, LowerE1, UpperE1]", "member" : "zio.test.TestAspect.>>>", "link" : "zio\/test\/TestAspect.html#>>>[LowerR1>:LowerR,UpperR1<:UpperR,LowerE1>:LowerE,UpperE1<:UpperE](that:zio.test.TestAspect[LowerR1,UpperR1,LowerE1,UpperE1]):zio.test.TestAspect[LowerR1,UpperR1,LowerE1,UpperE1]", "kind" : "final def"}, {"label" : "all", "tail" : "(spec: ZSpec[R, E]): ZSpec[R, E]", "member" : "zio.test.TestAspect.all", "link" : "zio\/test\/TestAspect.html#all[R>:LowerR<:UpperR,E>:LowerE<:UpperE](spec:zio.test.ZSpec[R,E]):zio.test.ZSpec[R,E]", "kind" : "final def"}, {"label" : "apply", "tail" : "(spec: ZSpec[R, E]): ZSpec[R, E]", "member" : "zio.test.TestAspect.apply", "link" : "zio\/test\/TestAspect.html#apply[R>:LowerR<:UpperR,E>:LowerE<:UpperE](spec:zio.test.ZSpec[R,E]):zio.test.ZSpec[R,E]", "kind" : "final def"}, {"member" : "zio.test.TestAspect#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestAspect.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestAspect.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestAspect.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestAspect.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestAspect.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestAspect.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestAspect.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAspect.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAspect.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAspect.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestAspect.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestAspect.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestAspect.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestAspect.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestAspect.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestAspect.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestAspect.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestAspect.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestAspect.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "some", "tail" : "(spec: ZSpec[R, E]): ZSpec[R, E]", "member" : "zio.test.TestAspect.some", "link" : "zio\/test\/TestAspect.html#some[R>:LowerR<:UpperR,E>:LowerE<:UpperE](spec:zio.test.ZSpec[R,E]):zio.test.ZSpec[R,E]", "kind" : "abstract def"}], "members_object" : [{"label" : "PerTest", "tail" : "", "member" : "zio.test.TestAspect.PerTest", "link" : "zio\/test\/TestAspect$.html#PerTest", "kind" : "object"}, {"label" : "PerTest", "tail" : "", "member" : "zio.test.TestAspect.PerTest", "link" : "zio\/test\/TestAspect$.html#PerTest[+LowerR,-UpperR,+LowerE,-UpperE]extendsTestAspect[LowerR,UpperR,LowerE,UpperE]", "kind" : "abstract class"}, {"label" : "windows", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.windows", "link" : "zio\/test\/TestAspect$.html#windows:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "untraced", "tail" : ": TestAspectPoly", "member" : "zio.test.TestAspect.untraced", "link" : "zio\/test\/TestAspect$.html#untraced:zio.test.TestAspectPoly", "kind" : "val"}, {"label" : "unix", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.unix", "link" : "zio\/test\/TestAspect$.html#unix:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "verify", "tail" : "(condition: => ZIO[R0, E0, TestResult]): TestAspect[Nothing, R0, E0, Any]", "member" : "zio.test.TestAspect.verify", "link" : "zio\/test\/TestAspect$.html#verify[R0,E0](condition:=>zio.ZIO[R0,E0,zio.test.TestResult]):zio.test.TestAspect[Nothing,R0,E0,Any]", "kind" : "def"}, {"label" : "timeout", "tail" : "(duration: zio.Duration): TestAspectAtLeastR[Has[Live]]", "member" : "zio.test.TestAspect.timeout", "link" : "zio\/test\/TestAspect$.html#timeout(duration:zio.Duration):zio.test.TestAspectAtLeastR[zio.Has[zio.test.environment.Live]]", "kind" : "def"}, {"label" : "timed", "tail" : ": TestAspectAtLeastR[Has[Live] with Has[Annotations]]", "member" : "zio.test.TestAspect.timed", "link" : "zio\/test\/TestAspect$.html#timed:zio.test.TestAspectAtLeastR[zio.Has[zio.test.environment.Live]withzio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "tag", "tail" : "(tag: String, tags: String*): TestAspectPoly", "member" : "zio.test.TestAspect.tag", "link" : "zio\/test\/TestAspect$.html#tag(tag:String,tags:String*):zio.test.TestAspectPoly", "kind" : "def"}, {"label" : "success", "tail" : ": TestAspectPoly", "member" : "zio.test.TestAspect.success", "link" : "zio\/test\/TestAspect$.html#success:zio.test.TestAspectPoly", "kind" : "val"}, {"label" : "sized", "tail" : "(n: Int): TestAspectAtLeastR[Has[Sized]]", "member" : "zio.test.TestAspect.sized", "link" : "zio\/test\/TestAspect$.html#sized(n:Int):zio.test.TestAspectAtLeastR[zio.Has[zio.test.Sized]]", "kind" : "def"}, {"label" : "silent", "tail" : ": TestAspectAtLeastR[Has[TestConsole]]", "member" : "zio.test.TestAspect.silent", "link" : "zio\/test\/TestAspect$.html#silent:zio.test.TestAspectAtLeastR[zio.Has[zio.test.environment.TestConsole]]", "kind" : "val"}, {"label" : "shrinks", "tail" : "(n: Int): TestAspectAtLeastR[Has[TestConfig]]", "member" : "zio.test.TestAspect.shrinks", "link" : "zio\/test\/TestAspect$.html#shrinks(n:Int):zio.test.TestAspectAtLeastR[zio.Has[zio.test.TestConfig]]", "kind" : "def"}, {"label" : "setSeed", "tail" : "(seed: => Long): TestAspectAtLeastR[Has[TestRandom]]", "member" : "zio.test.TestAspect.setSeed", "link" : "zio\/test\/TestAspect$.html#setSeed(seed:=>Long):zio.test.TestAspectAtLeastR[zio.Has[zio.test.environment.TestRandom]]", "kind" : "def"}, {"label" : "scala213Only", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.scala213Only", "link" : "zio\/test\/TestAspect$.html#scala213Only:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "scala212Only", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.scala212Only", "link" : "zio\/test\/TestAspect$.html#scala212Only:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "scala211Only", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.scala211Only", "link" : "zio\/test\/TestAspect$.html#scala211Only:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "scala2Only", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.scala2Only", "link" : "zio\/test\/TestAspect$.html#scala2Only:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "scala213", "tail" : "(that: TestAspect[LowerR, UpperR, LowerE, UpperE]): TestAspect[LowerR, UpperR, LowerE, UpperE]", "member" : "zio.test.TestAspect.scala213", "link" : "zio\/test\/TestAspect$.html#scala213[LowerR,UpperR,LowerE,UpperE](that:zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]):zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]", "kind" : "def"}, {"label" : "scala212", "tail" : "(that: TestAspect[LowerR, UpperR, LowerE, UpperE]): TestAspect[LowerR, UpperR, LowerE, UpperE]", "member" : "zio.test.TestAspect.scala212", "link" : "zio\/test\/TestAspect$.html#scala212[LowerR,UpperR,LowerE,UpperE](that:zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]):zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]", "kind" : "def"}, {"label" : "scala211", "tail" : "(that: TestAspect[LowerR, UpperR, LowerE, UpperE]): TestAspect[LowerR, UpperR, LowerE, UpperE]", "member" : "zio.test.TestAspect.scala211", "link" : "zio\/test\/TestAspect$.html#scala211[LowerR,UpperR,LowerE,UpperE](that:zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]):zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]", "kind" : "def"}, {"label" : "scala2", "tail" : "(that: TestAspect[LowerR, UpperR, LowerE, UpperE]): TestAspect[LowerR, UpperR, LowerE, UpperE]", "member" : "zio.test.TestAspect.scala2", "link" : "zio\/test\/TestAspect$.html#scala2[LowerR,UpperR,LowerE,UpperE](that:zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]):zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]", "kind" : "def"}, {"label" : "sequential", "tail" : ": TestAspectPoly", "member" : "zio.test.TestAspect.sequential", "link" : "zio\/test\/TestAspect$.html#sequential:zio.test.TestAspectPoly", "kind" : "val"}, {"label" : "samples", "tail" : "(n: Int): TestAspectAtLeastR[Has[TestConfig]]", "member" : "zio.test.TestAspect.samples", "link" : "zio\/test\/TestAspect$.html#samples(n:Int):zio.test.TestAspectAtLeastR[zio.Has[zio.test.TestConfig]]", "kind" : "def"}, {"label" : "retry", "tail" : "(schedule: Schedule[R0, TestFailure[E0], Any]): TestAspect[Nothing, R0, Nothing, E0]", "member" : "zio.test.TestAspect.retry", "link" : "zio\/test\/TestAspect$.html#retry[R0<:zio.test.ZTestEnvwithzio.Has[zio.test.Annotations]withzio.Has[zio.test.environment.Live],E0](schedule:zio.Schedule[R0,zio.test.TestFailure[E0],Any]):zio.test.TestAspect[Nothing,R0,Nothing,E0]", "kind" : "def"}, {"label" : "retries", "tail" : "(n: Int): TestAspectAtLeastR[Has[TestConfig]]", "member" : "zio.test.TestAspect.retries", "link" : "zio\/test\/TestAspect$.html#retries(n:Int):zio.test.TestAspectAtLeastR[zio.Has[zio.test.TestConfig]]", "kind" : "def"}, {"label" : "restoreTestEnvironment", "tail" : "(): TestAspectAtLeastR[ZTestEnv]", "member" : "zio.test.TestAspect.restoreTestEnvironment", "link" : "zio\/test\/TestAspect$.html#restoreTestEnvironment:zio.test.TestAspectAtLeastR[zio.test.ZTestEnv]", "kind" : "def"}, {"label" : "restoreTestSystem", "tail" : "(): TestAspectAtLeastR[ZTestEnv]", "member" : "zio.test.TestAspect.restoreTestSystem", "link" : "zio\/test\/TestAspect$.html#restoreTestSystem:zio.test.TestAspectAtLeastR[zio.test.ZTestEnv]", "kind" : "def"}, {"label" : "restoreTestRandom", "tail" : "(): TestAspectAtLeastR[Has[TestRandom]]", "member" : "zio.test.TestAspect.restoreTestRandom", "link" : "zio\/test\/TestAspect$.html#restoreTestRandom:zio.test.TestAspectAtLeastR[zio.Has[zio.test.environment.TestRandom]]", "kind" : "def"}, {"label" : "restoreTestConsole", "tail" : "(): TestAspectAtLeastR[Has[TestConsole]]", "member" : "zio.test.TestAspect.restoreTestConsole", "link" : "zio\/test\/TestAspect$.html#restoreTestConsole:zio.test.TestAspectAtLeastR[zio.Has[zio.test.environment.TestConsole]]", "kind" : "def"}, {"label" : "restoreTestClock", "tail" : "(): TestAspectAtLeastR[Has[TestClock]]", "member" : "zio.test.TestAspect.restoreTestClock", "link" : "zio\/test\/TestAspect$.html#restoreTestClock:zio.test.TestAspectAtLeastR[zio.Has[zio.test.environment.TestClock]]", "kind" : "def"}, {"label" : "restore", "tail" : "(service: (R0) => Restorable): TestAspectAtLeastR[R0]", "member" : "zio.test.TestAspect.restore", "link" : "zio\/test\/TestAspect$.html#restore[R0](service:R0=>zio.test.environment.Restorable):zio.test.TestAspectAtLeastR[R0]", "kind" : "def"}, {"label" : "repeats", "tail" : "(n: Int): TestAspectAtLeastR[Has[TestConfig]]", "member" : "zio.test.TestAspect.repeats", "link" : "zio\/test\/TestAspect$.html#repeats(n:Int):zio.test.TestAspectAtLeastR[zio.Has[zio.test.TestConfig]]", "kind" : "def"}, {"label" : "repeat", "tail" : "(schedule: Schedule[R0, TestSuccess, Any]): TestAspectAtLeastR[R0]", "member" : "zio.test.TestAspect.repeat", "link" : "zio\/test\/TestAspect$.html#repeat[R0<:zio.test.ZTestEnvwithzio.Has[zio.test.Annotations]withzio.Has[zio.test.environment.Live]](schedule:zio.Schedule[R0,zio.test.TestSuccess,Any]):zio.test.TestAspectAtLeastR[R0]", "kind" : "def"}, {"label" : "parallelN", "tail" : "(n: Int): TestAspectPoly", "member" : "zio.test.TestAspect.parallelN", "link" : "zio\/test\/TestAspect$.html#parallelN(n:Int):zio.test.TestAspectPoly", "kind" : "def"}, {"label" : "parallel", "tail" : ": TestAspectPoly", "member" : "zio.test.TestAspect.parallel", "link" : "zio\/test\/TestAspect$.html#parallel:zio.test.TestAspectPoly", "kind" : "val"}, {"label" : "nondeterministic", "tail" : ": TestAspectAtLeastR[Has[Live] with Has[TestRandom]]", "member" : "zio.test.TestAspect.nondeterministic", "link" : "zio\/test\/TestAspect$.html#nondeterministic:zio.test.TestAspectAtLeastR[zio.Has[zio.test.environment.Live]withzio.Has[zio.test.environment.TestRandom]]", "kind" : "val"}, {"label" : "nonTermination", "tail" : "(duration: zio.Duration): TestAspectAtLeastR[Has[Live]]", "member" : "zio.test.TestAspect.nonTermination", "link" : "zio\/test\/TestAspect$.html#nonTermination(duration:zio.Duration):zio.test.TestAspectAtLeastR[zio.Has[zio.test.environment.Live]]", "kind" : "def"}, {"label" : "nonFlaky", "tail" : "(n: Int): TestAspectAtLeastR[ZTestEnv with Has[Annotations]]", "member" : "zio.test.TestAspect.nonFlaky", "link" : "zio\/test\/TestAspect$.html#nonFlaky(n:Int):zio.test.TestAspectAtLeastR[zio.test.ZTestEnvwithzio.Has[zio.test.Annotations]]", "kind" : "def"}, {"label" : "nonFlaky", "tail" : ": TestAspectAtLeastR[ZTestEnv with Has[Annotations] with Has[TestConfig]]", "member" : "zio.test.TestAspect.nonFlaky", "link" : "zio\/test\/TestAspect$.html#nonFlaky:zio.test.TestAspectAtLeastR[zio.test.ZTestEnvwithzio.Has[zio.test.Annotations]withzio.Has[zio.test.TestConfig]]", "kind" : "val"}, {"label" : "nativeOnly", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.nativeOnly", "link" : "zio\/test\/TestAspect$.html#nativeOnly:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "native", "tail" : "(that: TestAspect[LowerR, UpperR, LowerE, UpperE]): TestAspect[LowerR, UpperR, LowerE, UpperE]", "member" : "zio.test.TestAspect.native", "link" : "zio\/test\/TestAspect$.html#native[LowerR,UpperR,LowerE,UpperE](that:zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]):zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]", "kind" : "def"}, {"label" : "mac", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.mac", "link" : "zio\/test\/TestAspect$.html#mac:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "os", "tail" : "(f: (OS) => Boolean): TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.os", "link" : "zio\/test\/TestAspect$.html#os(f:zio.System.OS=>Boolean):zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "def"}, {"label" : "jvmOnly", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.jvmOnly", "link" : "zio\/test\/TestAspect$.html#jvmOnly:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "jvm", "tail" : "(that: TestAspect[LowerR, UpperR, LowerE, UpperE]): TestAspect[LowerR, UpperR, LowerE, UpperE]", "member" : "zio.test.TestAspect.jvm", "link" : "zio\/test\/TestAspect$.html#jvm[LowerR,UpperR,LowerE,UpperE](that:zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]):zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]", "kind" : "def"}, {"label" : "jsOnly", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.jsOnly", "link" : "zio\/test\/TestAspect$.html#jsOnly:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "js", "tail" : "(that: TestAspect[LowerR, UpperR, LowerE, UpperE]): TestAspect[LowerR, UpperR, LowerE, UpperE]", "member" : "zio.test.TestAspect.js", "link" : "zio\/test\/TestAspect$.html#js[LowerR,UpperR,LowerE,UpperE](that:zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]):zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]", "kind" : "def"}, {"label" : "ifPropSet", "tail" : "(prop: String): TestAspectAtLeastR[Has[Live] with Has[Annotations]]", "member" : "zio.test.TestAspect.ifPropSet", "link" : "zio\/test\/TestAspect$.html#ifPropSet(prop:String):zio.test.TestAspectAtLeastR[zio.Has[zio.test.environment.Live]withzio.Has[zio.test.Annotations]]", "kind" : "def"}, {"label" : "ifProp", "tail" : "(prop: String)(assertion: (String) => Boolean): TestAspectAtLeastR[Has[Live] with Has[Annotations]]", "member" : "zio.test.TestAspect.ifProp", "link" : "zio\/test\/TestAspect$.html#ifProp(prop:String)(assertion:String=>Boolean):zio.test.TestAspectAtLeastR[zio.Has[zio.test.environment.Live]withzio.Has[zio.test.Annotations]]", "kind" : "def"}, {"label" : "ifEnvSet", "tail" : "(env: String): TestAspectAtLeastR[Has[Live] with Has[Annotations]]", "member" : "zio.test.TestAspect.ifEnvSet", "link" : "zio\/test\/TestAspect$.html#ifEnvSet(env:String):zio.test.TestAspectAtLeastR[zio.Has[zio.test.environment.Live]withzio.Has[zio.test.Annotations]]", "kind" : "def"}, {"label" : "ifEnv", "tail" : "(env: String)(assertion: (String) => Boolean): TestAspectAtLeastR[Has[Live] with Has[Annotations]]", "member" : "zio.test.TestAspect.ifEnv", "link" : "zio\/test\/TestAspect$.html#ifEnv(env:String)(assertion:String=>Boolean):zio.test.TestAspectAtLeastR[zio.Has[zio.test.environment.Live]withzio.Has[zio.test.Annotations]]", "kind" : "def"}, {"label" : "forked", "tail" : ": TestAspectPoly", "member" : "zio.test.TestAspect.forked", "link" : "zio\/test\/TestAspect$.html#forked:zio.test.TestAspectPoly", "kind" : "val"}, {"label" : "flaky", "tail" : "(n: Int): TestAspectAtLeastR[ZTestEnv with Has[Annotations]]", "member" : "zio.test.TestAspect.flaky", "link" : "zio\/test\/TestAspect$.html#flaky(n:Int):zio.test.TestAspectAtLeastR[zio.test.ZTestEnvwithzio.Has[zio.test.Annotations]]", "kind" : "def"}, {"label" : "flaky", "tail" : ": TestAspectAtLeastR[Has[Annotations] with Has[TestConfig] with ZTestEnv]", "member" : "zio.test.TestAspect.flaky", "link" : "zio\/test\/TestAspect$.html#flaky:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]withzio.Has[zio.test.TestConfig]withzio.test.ZTestEnv]", "kind" : "val"}, {"label" : "fibers", "tail" : ": TestAspect[Nothing, Has[Annotations], Nothing, Any]", "member" : "zio.test.TestAspect.fibers", "link" : "zio\/test\/TestAspect$.html#fibers:zio.test.TestAspect[Nothing,zio.Has[zio.test.Annotations],Nothing,Any]", "kind" : "lazy val"}, {"label" : "failing", "tail" : "(assertion: (TestFailure[E0]) => Boolean): TestAspect[Nothing, Any, Nothing, E0]", "member" : "zio.test.TestAspect.failing", "link" : "zio\/test\/TestAspect$.html#failing[E0](assertion:zio.test.TestFailure[E0]=>Boolean):zio.test.TestAspect[Nothing,Any,Nothing,E0]", "kind" : "def"}, {"label" : "failing", "tail" : ": TestAspectPoly", "member" : "zio.test.TestAspect.failing", "link" : "zio\/test\/TestAspect$.html#failing:zio.test.TestAspectPoly", "kind" : "val"}, {"label" : "executionStrategy", "tail" : "(exec: ExecutionStrategy): TestAspectPoly", "member" : "zio.test.TestAspect.executionStrategy", "link" : "zio\/test\/TestAspect$.html#executionStrategy(exec:zio.ExecutionStrategy):zio.test.TestAspectPoly", "kind" : "def"}, {"label" : "exceptScala213", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.exceptScala213", "link" : "zio\/test\/TestAspect$.html#exceptScala213:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "exceptScala212", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.exceptScala212", "link" : "zio\/test\/TestAspect$.html#exceptScala212:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "exceptScala211", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.exceptScala211", "link" : "zio\/test\/TestAspect$.html#exceptScala211:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "exceptScala2", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.exceptScala2", "link" : "zio\/test\/TestAspect$.html#exceptScala2:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "exceptNative", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.exceptNative", "link" : "zio\/test\/TestAspect$.html#exceptNative:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "exceptJVM", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.exceptJVM", "link" : "zio\/test\/TestAspect$.html#exceptJVM:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "exceptJS", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.exceptJS", "link" : "zio\/test\/TestAspect$.html#exceptJS:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "exceptDotty", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.exceptDotty", "link" : "zio\/test\/TestAspect$.html#exceptDotty:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "eventually", "tail" : ": TestAspectAtLeastR[ZTestEnv]", "member" : "zio.test.TestAspect.eventually", "link" : "zio\/test\/TestAspect$.html#eventually:zio.test.TestAspectAtLeastR[zio.test.ZTestEnv]", "kind" : "val"}, {"label" : "dottyOnly", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.dottyOnly", "link" : "zio\/test\/TestAspect$.html#dottyOnly:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "dotty", "tail" : "(that: TestAspect[LowerR, UpperR, LowerE, UpperE]): TestAspect[LowerR, UpperR, LowerE, UpperE]", "member" : "zio.test.TestAspect.dotty", "link" : "zio\/test\/TestAspect$.html#dotty[LowerR,UpperR,LowerE,UpperE](that:zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]):zio.test.TestAspect[LowerR,UpperR,LowerE,UpperE]", "kind" : "def"}, {"label" : "debug", "tail" : ": TestAspectAtLeastR[Has[TestConsole]]", "member" : "zio.test.TestAspect.debug", "link" : "zio\/test\/TestAspect$.html#debug:zio.test.TestAspectAtLeastR[zio.Has[zio.test.environment.TestConsole]]", "kind" : "val"}, {"label" : "diagnose", "tail" : "(duration: zio.Duration): TestAspectAtLeastR[Has[Live] with Has[Annotations]]", "member" : "zio.test.TestAspect.diagnose", "link" : "zio\/test\/TestAspect$.html#diagnose(duration:zio.Duration):zio.test.TestAspectAtLeastR[zio.Has[zio.test.environment.Live]withzio.Has[zio.test.Annotations]]", "kind" : "def"}, {"label" : "beforeAll", "tail" : "(effect: ZIO[R0, E0, Any]): TestAspect[Nothing, R0, E0, Any]", "member" : "zio.test.TestAspect.beforeAll", "link" : "zio\/test\/TestAspect$.html#beforeAll[R0,E0](effect:zio.ZIO[R0,E0,Any]):zio.test.TestAspect[Nothing,R0,E0,Any]", "kind" : "def"}, {"label" : "before", "tail" : "(effect: ZIO[R0, E0, Any]): TestAspect[Nothing, R0, E0, Any]", "member" : "zio.test.TestAspect.before", "link" : "zio\/test\/TestAspect$.html#before[R0,E0](effect:zio.ZIO[R0,E0,Any]):zio.test.TestAspect[Nothing,R0,E0,Any]", "kind" : "def"}, {"label" : "aspect", "tail" : "(f: (ZIO[R0, TestFailure[E0], TestSuccess]) => ZIO[R0, TestFailure[E0], TestSuccess]): TestAspect[R0, R0, E0, E0]", "member" : "zio.test.TestAspect.aspect", "link" : "zio\/test\/TestAspect$.html#aspect[R0,E0](f:zio.ZIO[R0,zio.test.TestFailure[E0],zio.test.TestSuccess]=>zio.ZIO[R0,zio.test.TestFailure[E0],zio.test.TestSuccess]):zio.test.TestAspect[R0,R0,E0,E0]", "kind" : "def"}, {"label" : "aroundTest", "tail" : "(managed: ZManaged[R0, TestFailure[E0], (TestSuccess) => ZIO[R0, TestFailure[E0], TestSuccess]]): TestAspect[Nothing, R0, E0, Any]", "member" : "zio.test.TestAspect.aroundTest", "link" : "zio\/test\/TestAspect$.html#aroundTest[R0,E0](managed:zio.ZManaged[R0,zio.test.TestFailure[E0],zio.test.TestSuccess=>zio.ZIO[R0,zio.test.TestFailure[E0],zio.test.TestSuccess]]):zio.test.TestAspect[Nothing,R0,E0,Any]", "kind" : "def"}, {"label" : "aroundAll", "tail" : "(before: ZIO[R0, E0, Any], after: ZIO[R0, Nothing, Any]): TestAspect[Nothing, R0, E0, Any]", "member" : "zio.test.TestAspect.aroundAll", "link" : "zio\/test\/TestAspect$.html#aroundAll[R0,E0](before:zio.ZIO[R0,E0,Any],after:zio.ZIO[R0,Nothing,Any]):zio.test.TestAspect[Nothing,R0,E0,Any]", "kind" : "def"}, {"label" : "aroundAllWith", "tail" : "(before: ZIO[R0, E0, A0])(after: (A0) => ZIO[R0, Nothing, Any]): TestAspect[Nothing, R0, E0, Any]", "member" : "zio.test.TestAspect.aroundAllWith", "link" : "zio\/test\/TestAspect$.html#aroundAllWith[R0,E0,A0](before:zio.ZIO[R0,E0,A0])(after:A0=>zio.ZIO[R0,Nothing,Any]):zio.test.TestAspect[Nothing,R0,E0,Any]", "kind" : "def"}, {"label" : "around", "tail" : "(before: ZIO[R0, E0, Any], after: ZIO[R0, Nothing, Any]): TestAspect[Nothing, R0, E0, Any]", "member" : "zio.test.TestAspect.around", "link" : "zio\/test\/TestAspect$.html#around[R0,E0](before:zio.ZIO[R0,E0,Any],after:zio.ZIO[R0,Nothing,Any]):zio.test.TestAspect[Nothing,R0,E0,Any]", "kind" : "def"}, {"label" : "aroundWith", "tail" : "(before: ZIO[R0, E0, A0])(after: (A0) => ZIO[R0, Nothing, Any]): TestAspect[Nothing, R0, E0, Any]", "member" : "zio.test.TestAspect.aroundWith", "link" : "zio\/test\/TestAspect$.html#aroundWith[R0,E0,A0](before:zio.ZIO[R0,E0,A0])(after:A0=>zio.ZIO[R0,Nothing,Any]):zio.test.TestAspect[Nothing,R0,E0,Any]", "kind" : "def"}, {"label" : "annotate", "tail" : "(key: TestAnnotation[V], value: V): TestAspectPoly", "member" : "zio.test.TestAspect.annotate", "link" : "zio\/test\/TestAspect$.html#annotate[V](key:zio.test.TestAnnotation[V],value:V):zio.test.TestAspectPoly", "kind" : "def"}, {"label" : "afterAll", "tail" : "(effect: ZIO[R0, Nothing, Any]): TestAspect[Nothing, R0, Nothing, Any]", "member" : "zio.test.TestAspect.afterAll", "link" : "zio\/test\/TestAspect$.html#afterAll[R0](effect:zio.ZIO[R0,Nothing,Any]):zio.test.TestAspect[Nothing,R0,Nothing,Any]", "kind" : "def"}, {"label" : "after", "tail" : "(effect: ZIO[R0, E0, Any]): TestAspect[Nothing, R0, E0, Any]", "member" : "zio.test.TestAspect.after", "link" : "zio\/test\/TestAspect$.html#after[R0,E0](effect:zio.ZIO[R0,E0,Any]):zio.test.TestAspect[Nothing,R0,E0,Any]", "kind" : "def"}, {"label" : "ignore", "tail" : ": TestAspectAtLeastR[Has[Annotations]]", "member" : "zio.test.TestAspect.ignore", "link" : "zio\/test\/TestAspect$.html#ignore:zio.test.TestAspectAtLeastR[zio.Has[zio.test.Annotations]]", "kind" : "val"}, {"label" : "identity", "tail" : ": TestAspectPoly", "member" : "zio.test.TestAspect.identity", "link" : "zio\/test\/TestAspect$.html#identity:zio.test.TestAspectPoly", "kind" : "val"}, {"label" : "timeoutWarning", "tail" : "(duration: zio.Duration): TestAspect[Nothing, Has[Live], Nothing, Any]", "member" : "zio.test.TimeoutVariants.timeoutWarning", "link" : "zio\/test\/TestAspect$.html#timeoutWarning(duration:zio.Duration):zio.test.TestAspect[Nothing,zio.Has[zio.test.environment.Live],Nothing,Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestAspect$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestAspect$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestAspect$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestAspect$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestAspect$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestAspect$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestAspect$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAspect$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAspect$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestAspect$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestAspect$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestAspect$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestAspect$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestAspect$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestAspect$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestAspect$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestAspect$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestAspect$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestAspect$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/TestAspect.html", "kind" : "class"}, {"name" : "zio.test.TestConfig", "object" : "zio\/test\/TestConfig$.html", "members_object" : [{"label" : "shrinks", "tail" : ": URIO[Has[TestConfig], Int]", "member" : "zio.test.TestConfig.shrinks", "link" : "zio\/test\/TestConfig$.html#shrinks:zio.URIO[zio.Has[zio.test.TestConfig],Int]", "kind" : "val"}, {"label" : "samples", "tail" : ": URIO[Has[TestConfig], Int]", "member" : "zio.test.TestConfig.samples", "link" : "zio\/test\/TestConfig$.html#samples:zio.URIO[zio.Has[zio.test.TestConfig],Int]", "kind" : "val"}, {"label" : "retries", "tail" : ": URIO[Has[TestConfig], Int]", "member" : "zio.test.TestConfig.retries", "link" : "zio\/test\/TestConfig$.html#retries:zio.URIO[zio.Has[zio.test.TestConfig],Int]", "kind" : "val"}, {"label" : "repeats", "tail" : ": URIO[Has[TestConfig], Int]", "member" : "zio.test.TestConfig.repeats", "link" : "zio\/test\/TestConfig$.html#repeats:zio.URIO[zio.Has[zio.test.TestConfig],Int]", "kind" : "val"}, {"label" : "live", "tail" : "(repeats0: Int, retries0: Int, samples0: Int, shrinks0: Int): ZLayer[Any, Nothing, Has[TestConfig]]", "member" : "zio.test.TestConfig.live", "link" : "zio\/test\/TestConfig$.html#live(repeats0:Int,retries0:Int,samples0:Int,shrinks0:Int):zio.ZLayer[Any,Nothing,zio.Has[zio.test.TestConfig]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestConfig$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestConfig$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestConfig$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestConfig$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestConfig$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestConfig$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestConfig$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConfig$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConfig$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConfig$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestConfig$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestConfig$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestConfig$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestConfig$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestConfig$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestConfig$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestConfig$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestConfig$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestConfig$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/TestConfig.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestConfig.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestConfig.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestConfig.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestConfig.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestConfig.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestConfig.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestConfig.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConfig.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConfig.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConfig.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestConfig.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestConfig.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestConfig.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestConfig.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestConfig.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestConfig.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestConfig.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestConfig.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestConfig.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "shrinks", "tail" : "(): Int", "member" : "zio.test.TestConfig.shrinks", "link" : "zio\/test\/TestConfig.html#shrinks:Int", "kind" : "abstract def"}, {"label" : "samples", "tail" : "(): Int", "member" : "zio.test.TestConfig.samples", "link" : "zio\/test\/TestConfig.html#samples:Int", "kind" : "abstract def"}, {"label" : "retries", "tail" : "(): Int", "member" : "zio.test.TestConfig.retries", "link" : "zio\/test\/TestConfig.html#retries:Int", "kind" : "abstract def"}, {"label" : "repeats", "tail" : "(): Int", "member" : "zio.test.TestConfig.repeats", "link" : "zio\/test\/TestConfig.html#repeats:Int", "kind" : "abstract def"}], "shortDescription" : "The TestConfig service provides access to default configuration settingsused by ZIO Test, including the number of times to repeat tests to ensurethey are stable, the number of times to retry flaky tests, the sufficientnumber of samples to check from a random variable, and the maximum numberof shrinkings to minimize large failures."}, {"name" : "zio.test.TestConstructor", "object" : "zio\/test\/TestConstructor$.html", "members_object" : [{"label" : "TestResultConstructor", "tail" : "(): WithOut[Any, A, ZSpec[Any, Nothing]]", "member" : "zio.test.TestConstructor.TestResultConstructor", "link" : "zio\/test\/TestConstructor$.html#TestResultConstructor[A<:zio.test.TestResult]:zio.test.TestConstructor.WithOut[Any,A,zio.test.ZSpec[Any,Nothing]]", "kind" : "implicit def"}, {"label" : "WithOut", "tail" : "", "member" : "zio.test.TestConstructor.WithOut", "link" : "zio\/test\/TestConstructor$.html#WithOut[Environment,In,Out0]=zio.test.TestConstructor[Environment,In]{typeOut=Out0}", "kind" : "type"}, {"label" : "TestResultZIOConstructor", "tail" : "(): WithOut[R, ZIO[R, E, A], ZSpec[R, E]]", "member" : "zio.test.TestConstructorLowPriority1.TestResultZIOConstructor", "link" : "zio\/test\/TestConstructor$.html#TestResultZIOConstructor[R,E,A<:zio.test.TestResult]:zio.test.TestConstructor.WithOut[R,zio.ZIO[R,E,A],zio.test.ZSpec[R,E]]", "kind" : "implicit def"}, {"label" : "AssertConstructor", "tail" : "(): WithOut[Any, A, ZSpec[Any, Nothing]]", "member" : "zio.test.TestConstructorLowPriority2.AssertConstructor", "link" : "zio\/test\/TestConstructor$.html#AssertConstructor[A<:zio.test.Assert]:zio.test.TestConstructor.WithOut[Any,A,zio.test.ZSpec[Any,Nothing]]", "kind" : "implicit def"}, {"label" : "AssertZIOConstructor", "tail" : "(): WithOut[R, ZIO[R, E, A], ZSpec[R, E]]", "member" : "zio.test.TestConstructorLowPriority3.AssertZIOConstructor", "link" : "zio\/test\/TestConstructor$.html#AssertZIOConstructor[R,E,A<:zio.test.Assert]:zio.test.TestConstructor.WithOut[R,zio.ZIO[R,E,A],zio.test.ZSpec[R,E]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestConstructor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestConstructor$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestConstructor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestConstructor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestConstructor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestConstructor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestConstructor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConstructor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConstructor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConstructor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestConstructor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestConstructor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestConstructor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestConstructor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestConstructor$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestConstructor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestConstructor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestConstructor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestConstructor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/TestConstructor.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestConstructor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestConstructor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestConstructor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestConstructor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestConstructor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestConstructor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestConstructor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConstructor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConstructor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConstructor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestConstructor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestConstructor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestConstructor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestConstructor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestConstructor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestConstructor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestConstructor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestConstructor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestConstructor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(label: String)(assertion: => In)(location: SourceLocation): Out", "member" : "zio.test.TestConstructor.apply", "link" : "zio\/test\/TestConstructor.html#apply(label:String)(assertion:=>In)(implicitlocation:zio.test.SourceLocation):TestConstructor.this.Out", "kind" : "abstract def"}, {"member" : "zio.test.TestConstructor.Out", "error" : "unsupported entity"}], "shortDescription" : ""}, {"name" : "zio.test.TestConstructorLowPriority1", "trait" : "zio\/test\/TestConstructorLowPriority1.html", "kind" : "trait", "members_trait" : [{"label" : "TestResultZIOConstructor", "tail" : "(): WithOut[R, ZIO[R, E, A], ZSpec[R, E]]", "member" : "zio.test.TestConstructorLowPriority1.TestResultZIOConstructor", "link" : "zio\/test\/TestConstructorLowPriority1.html#TestResultZIOConstructor[R,E,A<:zio.test.TestResult]:zio.test.TestConstructor.WithOut[R,zio.ZIO[R,E,A],zio.test.ZSpec[R,E]]", "kind" : "implicit def"}, {"label" : "AssertConstructor", "tail" : "(): WithOut[Any, A, ZSpec[Any, Nothing]]", "member" : "zio.test.TestConstructorLowPriority2.AssertConstructor", "link" : "zio\/test\/TestConstructorLowPriority1.html#AssertConstructor[A<:zio.test.Assert]:zio.test.TestConstructor.WithOut[Any,A,zio.test.ZSpec[Any,Nothing]]", "kind" : "implicit def"}, {"label" : "AssertZIOConstructor", "tail" : "(): WithOut[R, ZIO[R, E, A], ZSpec[R, E]]", "member" : "zio.test.TestConstructorLowPriority3.AssertZIOConstructor", "link" : "zio\/test\/TestConstructorLowPriority1.html#AssertZIOConstructor[R,E,A<:zio.test.Assert]:zio.test.TestConstructor.WithOut[R,zio.ZIO[R,E,A],zio.test.ZSpec[R,E]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestConstructorLowPriority1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestConstructorLowPriority1.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestConstructorLowPriority1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestConstructorLowPriority1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestConstructorLowPriority1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestConstructorLowPriority1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestConstructorLowPriority1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConstructorLowPriority1.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConstructorLowPriority1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConstructorLowPriority1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestConstructorLowPriority1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestConstructorLowPriority1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestConstructorLowPriority1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestConstructorLowPriority1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestConstructorLowPriority1.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestConstructorLowPriority1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestConstructorLowPriority1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestConstructorLowPriority1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestConstructorLowPriority1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.TestConstructorLowPriority2", "trait" : "zio\/test\/TestConstructorLowPriority2.html", "kind" : "trait", "members_trait" : [{"label" : "AssertConstructor", "tail" : "(): WithOut[Any, A, ZSpec[Any, Nothing]]", "member" : "zio.test.TestConstructorLowPriority2.AssertConstructor", "link" : "zio\/test\/TestConstructorLowPriority2.html#AssertConstructor[A<:zio.test.Assert]:zio.test.TestConstructor.WithOut[Any,A,zio.test.ZSpec[Any,Nothing]]", "kind" : "implicit def"}, {"label" : "AssertZIOConstructor", "tail" : "(): WithOut[R, ZIO[R, E, A], ZSpec[R, E]]", "member" : "zio.test.TestConstructorLowPriority3.AssertZIOConstructor", "link" : "zio\/test\/TestConstructorLowPriority2.html#AssertZIOConstructor[R,E,A<:zio.test.Assert]:zio.test.TestConstructor.WithOut[R,zio.ZIO[R,E,A],zio.test.ZSpec[R,E]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestConstructorLowPriority2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestConstructorLowPriority2.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestConstructorLowPriority2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestConstructorLowPriority2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestConstructorLowPriority2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestConstructorLowPriority2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestConstructorLowPriority2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConstructorLowPriority2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConstructorLowPriority2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConstructorLowPriority2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestConstructorLowPriority2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestConstructorLowPriority2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestConstructorLowPriority2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestConstructorLowPriority2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestConstructorLowPriority2.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestConstructorLowPriority2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestConstructorLowPriority2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestConstructorLowPriority2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestConstructorLowPriority2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.TestConstructorLowPriority3", "trait" : "zio\/test\/TestConstructorLowPriority3.html", "kind" : "trait", "members_trait" : [{"label" : "AssertZIOConstructor", "tail" : "(): WithOut[R, ZIO[R, E, A], ZSpec[R, E]]", "member" : "zio.test.TestConstructorLowPriority3.AssertZIOConstructor", "link" : "zio\/test\/TestConstructorLowPriority3.html#AssertZIOConstructor[R,E,A<:zio.test.Assert]:zio.test.TestConstructor.WithOut[R,zio.ZIO[R,E,A],zio.test.ZSpec[R,E]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestConstructorLowPriority3.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestConstructorLowPriority3.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestConstructorLowPriority3.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestConstructorLowPriority3.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestConstructorLowPriority3.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestConstructorLowPriority3.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestConstructorLowPriority3.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConstructorLowPriority3.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConstructorLowPriority3.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestConstructorLowPriority3.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestConstructorLowPriority3.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestConstructorLowPriority3.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestConstructorLowPriority3.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestConstructorLowPriority3.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestConstructorLowPriority3.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestConstructorLowPriority3.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestConstructorLowPriority3.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestConstructorLowPriority3.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestConstructorLowPriority3.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.TestExecutor", "shortDescription" : "A TestExecutor[R, E] is capable of executing specs that require anenvironment R and may fail with an E.", "object" : "zio\/test\/TestExecutor$.html", "members_class" : [{"member" : "zio.test.TestExecutor#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestExecutor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestExecutor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestExecutor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestExecutor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestExecutor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestExecutor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestExecutor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestExecutor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestExecutor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestExecutor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestExecutor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestExecutor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestExecutor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestExecutor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestExecutor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestExecutor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestExecutor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestExecutor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestExecutor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "environment", "tail" : "(): Layer[Nothing, R]", "member" : "zio.test.TestExecutor.environment", "link" : "zio\/test\/TestExecutor.html#environment:zio.Layer[Nothing,R]", "kind" : "abstract def"}, {"label" : "run", "tail" : "(spec: ZSpec[R, E], defExec: ExecutionStrategy): UIO[ExecutedSpec[E]]", "member" : "zio.test.TestExecutor.run", "link" : "zio\/test\/TestExecutor.html#run(spec:zio.test.ZSpec[R,E],defExec:zio.ExecutionStrategy):zio.UIO[zio.test.ExecutedSpec[E]]", "kind" : "abstract def"}], "members_object" : [{"label" : "default", "tail" : "(env: Layer[Nothing, R]): TestExecutor[R, E]", "member" : "zio.test.TestExecutor.default", "link" : "zio\/test\/TestExecutor$.html#default[R<:zio.Has[zio.test.Annotations],E](env:zio.Layer[Nothing,R]):zio.test.TestExecutor[R,E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestExecutor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestExecutor$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestExecutor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestExecutor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestExecutor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestExecutor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestExecutor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestExecutor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestExecutor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestExecutor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestExecutor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestExecutor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestExecutor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestExecutor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestExecutor$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestExecutor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestExecutor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestExecutor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestExecutor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/TestExecutor.html", "kind" : "class"}, {"name" : "zio.test.TestFailure", "shortDescription" : "", "object" : "zio\/test\/TestFailure$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestFailure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestFailure.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestFailure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestFailure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestFailure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestFailure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestFailure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestFailure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestFailure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestFailure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestFailure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestFailure.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestFailure.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestFailure.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestFailure.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestFailure.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestFailure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestFailure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestFailure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "failCause", "tail" : "(cause: Cause[E]): TestFailure[E]", "member" : "zio.test.TestFailure.failCause", "link" : "zio\/test\/TestFailure$.html#failCause[E](cause:zio.Cause[E]):zio.test.TestFailure[E]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: E): TestFailure[E]", "member" : "zio.test.TestFailure.fail", "link" : "zio\/test\/TestFailure$.html#fail[E](e:E):zio.test.TestFailure[E]", "kind" : "def"}, {"label" : "die", "tail" : "(t: Throwable): TestFailure[Nothing]", "member" : "zio.test.TestFailure.die", "link" : "zio\/test\/TestFailure$.html#die(t:Throwable):zio.test.TestFailure[Nothing]", "kind" : "def"}, {"label" : "assertion", "tail" : "(result: TestResult): TestFailure[Nothing]", "member" : "zio.test.TestFailure.assertion", "link" : "zio\/test\/TestFailure$.html#assertion(result:zio.test.TestResult):zio.test.TestFailure[Nothing]", "kind" : "def"}, {"label" : "Runtime", "tail" : "", "member" : "zio.test.TestFailure.Runtime", "link" : "zio\/test\/TestFailure$.html#Runtime[+E]extendsTestFailure[E]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Assertion", "tail" : "", "member" : "zio.test.TestFailure.Assertion", "link" : "zio\/test\/TestFailure$.html#AssertionextendsTestFailure[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestFailure$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestFailure$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestFailure$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestFailure$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestFailure$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestFailure$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestFailure$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestFailure$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestFailure$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestFailure$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestFailure$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestFailure$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestFailure$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestFailure$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestFailure$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestFailure$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestFailure$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestFailure$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestFailure$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/TestFailure.html", "kind" : "class"}, {"name" : "zio.test.TestLogger", "object" : "zio\/test\/TestLogger$.html", "members_object" : [{"label" : "logLine", "tail" : "(line: String): URIO[Has[TestLogger], Unit]", "member" : "zio.test.TestLogger.logLine", "link" : "zio\/test\/TestLogger$.html#logLine(line:String):zio.URIO[zio.Has[zio.test.TestLogger],Unit]", "kind" : "def"}, {"label" : "fromConsole", "tail" : "(): ZLayer[Has[Console], Nothing, Has[TestLogger]]", "member" : "zio.test.TestLogger.fromConsole", "link" : "zio\/test\/TestLogger$.html#fromConsole:zio.ZLayer[zio.Has[zio.Console],Nothing,zio.Has[zio.test.TestLogger]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestLogger$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestLogger$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestLogger$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestLogger$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestLogger$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestLogger$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestLogger$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestLogger$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestLogger$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestLogger$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestLogger$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestLogger$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestLogger$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestLogger$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestLogger$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestLogger$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestLogger$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestLogger$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestLogger$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/TestLogger.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestLogger.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestLogger.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestLogger.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestLogger.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestLogger.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestLogger.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestLogger.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestLogger.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestLogger.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestLogger.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestLogger.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestLogger.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestLogger.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestLogger.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestLogger.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestLogger.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestLogger.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestLogger.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestLogger.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "logLine", "tail" : "(line: String): UIO[Unit]", "member" : "zio.test.TestLogger.logLine", "link" : "zio\/test\/TestLogger.html#logLine(line:String):zio.UIO[Unit]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.test.TestPlatform", "shortDescription" : "TestPlatform provides information about the platform tests are being runon to enable platform specific test configuration.", "object" : "zio\/test\/TestPlatform$.html", "members_object" : [{"label" : "isNative", "tail" : ": Boolean(false)", "member" : "zio.test.TestPlatform.isNative", "link" : "zio\/test\/TestPlatform$.html#isNative:Boolean(false)", "kind" : "final val"}, {"label" : "isJVM", "tail" : ": Boolean(true)", "member" : "zio.test.TestPlatform.isJVM", "link" : "zio\/test\/TestPlatform$.html#isJVM:Boolean(true)", "kind" : "final val"}, {"label" : "isJS", "tail" : ": Boolean(false)", "member" : "zio.test.TestPlatform.isJS", "link" : "zio\/test\/TestPlatform$.html#isJS:Boolean(false)", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestPlatform$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestPlatform$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestPlatform$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestPlatform$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestPlatform$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestPlatform$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestPlatform$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestPlatform$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestPlatform$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestPlatform$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestPlatform$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestPlatform$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestPlatform$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestPlatform$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestPlatform$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestPlatform$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestPlatform$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestPlatform$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestPlatform$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.TestReporter", "shortDescription" : "", "object" : "zio\/test\/package$$TestReporter$.html", "members_object" : [{"label" : "silent", "tail" : ": TestReporter[Any]", "member" : "zio.test.TestReporter.silent", "link" : "zio\/test\/package$$TestReporter$.html#silent:zio.test.package.TestReporter[Any]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/package$$TestReporter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/package$$TestReporter$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/package$$TestReporter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/package$$TestReporter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/package$$TestReporter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/package$$TestReporter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/package$$TestReporter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/package$$TestReporter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/package$$TestReporter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/package$$TestReporter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/package$$TestReporter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/package$$TestReporter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/package$$TestReporter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/package$$TestReporter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/package$$TestReporter$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/package$$TestReporter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/package$$TestReporter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/package$$TestReporter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/package$$TestReporter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.TestResult", "shortDescription" : "", "object" : "zio\/test\/package$$TestResult$.html", "members_object" : [{"label" : "trace2TestResult", "tail" : "(assert: Assert): TestResult", "member" : "zio.test.TestResult.trace2TestResult", "link" : "zio\/test\/package$$TestResult$.html#trace2TestResult(assert:zio.test.Assert):zio.test.package.TestResult", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/package$$TestResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/package$$TestResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/package$$TestResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/package$$TestResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/package$$TestResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/package$$TestResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/package$$TestResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/package$$TestResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/package$$TestResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/package$$TestResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/package$$TestResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/package$$TestResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/package$$TestResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/package$$TestResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/package$$TestResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/package$$TestResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/package$$TestResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/package$$TestResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/package$$TestResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.TestRunner", "shortDescription" : "A TestRunner[R, E] encapsulates all the logic necessary to run specs thatrequire an environment R and may fail with an error E.", "members_case class" : [{"label" : "withRuntimeConfig", "tail" : "(f: (RuntimeConfig) => RuntimeConfig): TestRunner[R, E]", "member" : "zio.test.TestRunner.withRuntimeConfig", "link" : "zio\/test\/TestRunner.html#withRuntimeConfig(f:zio.RuntimeConfig=>zio.RuntimeConfig):zio.test.TestRunner[R,E]", "kind" : "def"}, {"label" : "withReporter", "tail" : "(reporter: TestReporter[E1]): TestRunner[R, E]", "member" : "zio.test.TestRunner.withReporter", "link" : "zio\/test\/TestRunner.html#withReporter[E1>:E](reporter:zio.test.TestReporter[E1]):zio.test.TestRunner[R,E]", "kind" : "def"}, {"label" : "withPlatform", "tail" : "(f: (Platform) => Platform): TestRunner[R, E]", "member" : "zio.test.TestRunner.withPlatform", "link" : "zio\/test\/TestRunner.html#withPlatform(f:zio.internal.Platform=>zio.internal.Platform):zio.test.TestRunner[R,E]", "kind" : "def"}, {"label" : "unsafeRunSync", "tail" : "(spec: ZSpec[R, E]): Exit[Nothing, ExecutedSpec[E]]", "member" : "zio.test.TestRunner.unsafeRunSync", "link" : "zio\/test\/TestRunner.html#unsafeRunSync(spec:zio.test.ZSpec[R,E]):zio.Exit[Nothing,zio.test.ExecutedSpec[E]]", "kind" : "def"}, {"label" : "unsafeRunAsync", "tail" : "(spec: ZSpec[R, E])(k: (ExecutedSpec[E]) => Unit): Unit", "member" : "zio.test.TestRunner.unsafeRunAsync", "link" : "zio\/test\/TestRunner.html#unsafeRunAsync(spec:zio.test.ZSpec[R,E])(k:zio.test.ExecutedSpec[E]=>Unit):Unit", "kind" : "def"}, {"label" : "unsafeRun", "tail" : "(spec: ZSpec[R, E]): ExecutedSpec[E]", "member" : "zio.test.TestRunner.unsafeRun", "link" : "zio\/test\/TestRunner.html#unsafeRun(spec:zio.test.ZSpec[R,E]):zio.test.ExecutedSpec[E]", "kind" : "def"}, {"label" : "run", "tail" : "(spec: ZSpec[R, E]): URIO[Has[TestLogger] with Has[Clock], ExecutedSpec[E]]", "member" : "zio.test.TestRunner.run", "link" : "zio\/test\/TestRunner.html#run(spec:zio.test.ZSpec[R,E]):zio.URIO[zio.Has[zio.test.TestLogger]withzio.Has[zio.Clock],zio.test.ExecutedSpec[E]]", "kind" : "def"}, {"label" : "runtime", "tail" : ": Runtime[Unit]", "member" : "zio.test.TestRunner.runtime", "link" : "zio\/test\/TestRunner.html#runtime:zio.Runtime[Unit]", "kind" : "lazy val"}, {"member" : "zio.test.TestRunner#<init>", "error" : "unsupported entity"}, {"label" : "bootstrap", "tail" : ": Layer[Nothing, Has[TestLogger] with Has[Clock]]", "member" : "zio.test.TestRunner.bootstrap", "link" : "zio\/test\/TestRunner.html#bootstrap:zio.Layer[Nothing,zio.Has[zio.test.TestLogger]withzio.Has[zio.Clock]]", "kind" : "val"}, {"label" : "reporter", "tail" : ": TestReporter[E]", "member" : "zio.test.TestRunner.reporter", "link" : "zio\/test\/TestRunner.html#reporter:zio.test.TestReporter[E]", "kind" : "val"}, {"label" : "runtimeConfig", "tail" : ": RuntimeConfig", "member" : "zio.test.TestRunner.runtimeConfig", "link" : "zio\/test\/TestRunner.html#runtimeConfig:zio.RuntimeConfig", "kind" : "val"}, {"label" : "executor", "tail" : ": TestExecutor[R, E]", "member" : "zio.test.TestRunner.executor", "link" : "zio\/test\/TestRunner.html#executor:zio.test.TestExecutor[R,E]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/TestRunner.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestRunner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestRunner.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestRunner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestRunner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestRunner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestRunner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestRunner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestRunner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestRunner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestRunner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestRunner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestRunner.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestRunner.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestRunner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestRunner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestRunner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/test\/TestRunner.html", "kind" : "case class"}, {"name" : "zio.test.TestSuccess", "shortDescription" : "", "object" : "zio\/test\/TestSuccess$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestSuccess.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestSuccess.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestSuccess.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestSuccess.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestSuccess.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestSuccess.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestSuccess.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestSuccess.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestSuccess.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestSuccess.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestSuccess.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestSuccess.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestSuccess.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestSuccess.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestSuccess.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestSuccess.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestSuccess.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestSuccess.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestSuccess.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Ignored", "tail" : "", "member" : "zio.test.TestSuccess.Ignored", "link" : "zio\/test\/TestSuccess$.html#Ignored", "kind" : "case object"}, {"label" : "Succeeded", "tail" : "", "member" : "zio.test.TestSuccess.Succeeded", "link" : "zio\/test\/TestSuccess$.html#SucceededextendsTestSuccesswithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestSuccess$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestSuccess$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestSuccess$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestSuccess$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestSuccess$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestSuccess$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestSuccess$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestSuccess$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestSuccess$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestSuccess$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestSuccess$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestSuccess$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestSuccess$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestSuccess$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestSuccess$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestSuccess$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestSuccess$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestSuccess$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestSuccess$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/test\/TestSuccess.html", "kind" : "class"}, {"name" : "zio.test.TestTimeoutException", "shortDescription" : "", "members_case class" : [{"member" : "zio.test.TestTimeoutException#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "zio.test.TestTimeoutException.message", "link" : "zio\/test\/TestTimeoutException.html#message:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/test\/TestTimeoutException.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "zio\/test\/TestTimeoutException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "zio\/test\/TestTimeoutException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "zio\/test\/TestTimeoutException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "zio\/test\/TestTimeoutException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "zio\/test\/TestTimeoutException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "zio\/test\/TestTimeoutException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "zio\/test\/TestTimeoutException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "zio\/test\/TestTimeoutException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "zio\/test\/TestTimeoutException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "zio\/test\/TestTimeoutException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "zio\/test\/TestTimeoutException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "zio\/test\/TestTimeoutException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "zio\/test\/TestTimeoutException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestTimeoutException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestTimeoutException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestTimeoutException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestTimeoutException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestTimeoutException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestTimeoutException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestTimeoutException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestTimeoutException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestTimeoutException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestTimeoutException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestTimeoutException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestTimeoutException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestTimeoutException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestTimeoutException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestTimeoutException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestTimeoutException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/test\/TestTimeoutException.html", "kind" : "case class"}, {"name" : "zio.test.TestVersion", "shortDescription" : "TestVersion provides information about the Scala version tests are beingrun on to enable platform specific test configuration.", "object" : "zio\/test\/TestVersion$.html", "members_object" : [{"label" : "isScala213", "tail" : ": Boolean", "member" : "zio.test.TestVersion.isScala213", "link" : "zio\/test\/TestVersion$.html#isScala213:Boolean", "kind" : "val"}, {"label" : "isScala212", "tail" : ": Boolean", "member" : "zio.test.TestVersion.isScala212", "link" : "zio\/test\/TestVersion$.html#isScala212:Boolean", "kind" : "val"}, {"label" : "isScala211", "tail" : ": Boolean", "member" : "zio.test.TestVersion.isScala211", "link" : "zio\/test\/TestVersion$.html#isScala211:Boolean", "kind" : "val"}, {"label" : "isScala2", "tail" : ": Boolean", "member" : "zio.test.TestVersion.isScala2", "link" : "zio\/test\/TestVersion$.html#isScala2:Boolean", "kind" : "val"}, {"label" : "isDotty", "tail" : ": Boolean", "member" : "zio.test.TestVersion.isDotty", "link" : "zio\/test\/TestVersion$.html#isDotty:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TestVersion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TestVersion$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TestVersion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TestVersion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TestVersion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TestVersion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TestVersion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestVersion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestVersion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TestVersion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TestVersion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TestVersion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TestVersion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TestVersion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TestVersion$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TestVersion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TestVersion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TestVersion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TestVersion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.test.TimeoutVariants", "trait" : "zio\/test\/TimeoutVariants.html", "kind" : "trait", "members_trait" : [{"label" : "timeoutWarning", "tail" : "(duration: zio.Duration): TestAspect[Nothing, Has[Live], Nothing, Any]", "member" : "zio.test.TimeoutVariants.timeoutWarning", "link" : "zio\/test\/TimeoutVariants.html#timeoutWarning(duration:zio.Duration):zio.test.TestAspect[Nothing,zio.Has[zio.test.environment.Live],Nothing,Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TimeoutVariants.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TimeoutVariants.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TimeoutVariants.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TimeoutVariants.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TimeoutVariants.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TimeoutVariants.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TimeoutVariants.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TimeoutVariants.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TimeoutVariants.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TimeoutVariants.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TimeoutVariants.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TimeoutVariants.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TimeoutVariants.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TimeoutVariants.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TimeoutVariants.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TimeoutVariants.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TimeoutVariants.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TimeoutVariants.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TimeoutVariants.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.TimeVariants", "trait" : "zio\/test\/TimeVariants.html", "kind" : "trait", "members_trait" : [{"label" : "zoneOffset", "tail" : "(): Gen[Has[Random], ZoneOffset]", "member" : "zio.test.TimeVariants.zoneOffset", "link" : "zio\/test\/TimeVariants.html#zoneOffset:zio.test.Gen[zio.Has[zio.Random],java.time.ZoneOffset]", "kind" : "final def"}, {"label" : "zoneId", "tail" : "(): Gen[Has[Random], ZoneId]", "member" : "zio.test.TimeVariants.zoneId", "link" : "zio\/test\/TimeVariants.html#zoneId:zio.test.Gen[zio.Has[zio.Random],java.time.ZoneId]", "kind" : "final def"}, {"label" : "zonedDateTime", "tail" : "(): Gen[Has[Random], ZonedDateTime]", "member" : "zio.test.TimeVariants.zonedDateTime", "link" : "zio\/test\/TimeVariants.html#zonedDateTime:zio.test.Gen[zio.Has[zio.Random],java.time.ZonedDateTime]", "kind" : "final def"}, {"label" : "yearMonth", "tail" : "(): Gen[Has[Random], YearMonth]", "member" : "zio.test.TimeVariants.yearMonth", "link" : "zio\/test\/TimeVariants.html#yearMonth:zio.test.Gen[zio.Has[zio.Random],java.time.YearMonth]", "kind" : "final def"}, {"label" : "year", "tail" : "(): Gen[Has[Random], Year]", "member" : "zio.test.TimeVariants.year", "link" : "zio\/test\/TimeVariants.html#year:zio.test.Gen[zio.Has[zio.Random],java.time.Year]", "kind" : "final def"}, {"label" : "period", "tail" : "(): Gen[Has[Random], Period]", "member" : "zio.test.TimeVariants.period", "link" : "zio\/test\/TimeVariants.html#period:zio.test.Gen[zio.Has[zio.Random],java.time.Period]", "kind" : "final def"}, {"label" : "offsetTime", "tail" : "(): Gen[Has[Random], OffsetTime]", "member" : "zio.test.TimeVariants.offsetTime", "link" : "zio\/test\/TimeVariants.html#offsetTime:zio.test.Gen[zio.Has[zio.Random],java.time.OffsetTime]", "kind" : "final def"}, {"label" : "offsetDateTime", "tail" : "(min: OffsetDateTime, max: OffsetDateTime): Gen[Has[Random], OffsetDateTime]", "member" : "zio.test.TimeVariants.offsetDateTime", "link" : "zio\/test\/TimeVariants.html#offsetDateTime(min:java.time.OffsetDateTime,max:java.time.OffsetDateTime):zio.test.Gen[zio.Has[zio.Random],java.time.OffsetDateTime]", "kind" : "final def"}, {"label" : "offsetDateTime", "tail" : "(): Gen[Has[Random], OffsetDateTime]", "member" : "zio.test.TimeVariants.offsetDateTime", "link" : "zio\/test\/TimeVariants.html#offsetDateTime:zio.test.Gen[zio.Has[zio.Random],java.time.OffsetDateTime]", "kind" : "final def"}, {"label" : "monthDay", "tail" : "(): Gen[Has[Random], MonthDay]", "member" : "zio.test.TimeVariants.monthDay", "link" : "zio\/test\/TimeVariants.html#monthDay:zio.test.Gen[zio.Has[zio.Random],java.time.MonthDay]", "kind" : "final def"}, {"label" : "month", "tail" : "(): Gen[Has[Random], Month]", "member" : "zio.test.TimeVariants.month", "link" : "zio\/test\/TimeVariants.html#month:zio.test.Gen[zio.Has[zio.Random],java.time.Month]", "kind" : "final def"}, {"label" : "localTime", "tail" : "(): Gen[Has[Random], LocalTime]", "member" : "zio.test.TimeVariants.localTime", "link" : "zio\/test\/TimeVariants.html#localTime:zio.test.Gen[zio.Has[zio.Random],java.time.LocalTime]", "kind" : "final def"}, {"label" : "localDateTime", "tail" : "(min: LocalDateTime, max: LocalDateTime): Gen[Has[Random], LocalDateTime]", "member" : "zio.test.TimeVariants.localDateTime", "link" : "zio\/test\/TimeVariants.html#localDateTime(min:java.time.LocalDateTime,max:java.time.LocalDateTime):zio.test.Gen[zio.Has[zio.Random],java.time.LocalDateTime]", "kind" : "final def"}, {"label" : "localDateTime", "tail" : "(): Gen[Has[Random], LocalDateTime]", "member" : "zio.test.TimeVariants.localDateTime", "link" : "zio\/test\/TimeVariants.html#localDateTime:zio.test.Gen[zio.Has[zio.Random],java.time.LocalDateTime]", "kind" : "final def"}, {"label" : "localDate", "tail" : "(): Gen[Has[Random], LocalDate]", "member" : "zio.test.TimeVariants.localDate", "link" : "zio\/test\/TimeVariants.html#localDate:zio.test.Gen[zio.Has[zio.Random],java.time.LocalDate]", "kind" : "final def"}, {"label" : "instant", "tail" : "(min: Instant, max: Instant): Gen[Has[Random], Instant]", "member" : "zio.test.TimeVariants.instant", "link" : "zio\/test\/TimeVariants.html#instant(min:java.time.Instant,max:java.time.Instant):zio.test.Gen[zio.Has[zio.Random],java.time.Instant]", "kind" : "final def"}, {"label" : "instant", "tail" : "(): Gen[Has[Random], Instant]", "member" : "zio.test.TimeVariants.instant", "link" : "zio\/test\/TimeVariants.html#instant:zio.test.Gen[zio.Has[zio.Random],java.time.Instant]", "kind" : "final def"}, {"label" : "finiteDuration", "tail" : "(min: zio.Duration, max: zio.Duration): Gen[Has[Random], zio.Duration]", "member" : "zio.test.TimeVariants.finiteDuration", "link" : "zio\/test\/TimeVariants.html#finiteDuration(min:zio.Duration,max:zio.Duration):zio.test.Gen[zio.Has[zio.Random],zio.Duration]", "kind" : "final def"}, {"label" : "finiteDuration", "tail" : "(): Gen[Has[Random], zio.Duration]", "member" : "zio.test.TimeVariants.finiteDuration", "link" : "zio\/test\/TimeVariants.html#finiteDuration:zio.test.Gen[zio.Has[zio.Random],zio.Duration]", "kind" : "final def"}, {"label" : "dayOfWeek", "tail" : "(): Gen[Has[Random], DayOfWeek]", "member" : "zio.test.TimeVariants.dayOfWeek", "link" : "zio\/test\/TimeVariants.html#dayOfWeek:zio.test.Gen[zio.Has[zio.Random],java.time.DayOfWeek]", "kind" : "final def"}, {"label" : "anyZoneOffset", "tail" : "(): Gen[Has[Random], ZoneOffset]", "member" : "zio.test.TimeVariants.anyZoneOffset", "link" : "zio\/test\/TimeVariants.html#anyZoneOffset:zio.test.Gen[zio.Has[zio.Random],java.time.ZoneOffset]", "kind" : "final def"}, {"label" : "anyZoneId", "tail" : "(): Gen[Has[Random], ZoneId]", "member" : "zio.test.TimeVariants.anyZoneId", "link" : "zio\/test\/TimeVariants.html#anyZoneId:zio.test.Gen[zio.Has[zio.Random],java.time.ZoneId]", "kind" : "final def"}, {"label" : "anyZonedDateTime", "tail" : "(): Gen[Has[Random], ZonedDateTime]", "member" : "zio.test.TimeVariants.anyZonedDateTime", "link" : "zio\/test\/TimeVariants.html#anyZonedDateTime:zio.test.Gen[zio.Has[zio.Random],java.time.ZonedDateTime]", "kind" : "final def"}, {"label" : "anyYearMonth", "tail" : "(): Gen[Has[Random], YearMonth]", "member" : "zio.test.TimeVariants.anyYearMonth", "link" : "zio\/test\/TimeVariants.html#anyYearMonth:zio.test.Gen[zio.Has[zio.Random],java.time.YearMonth]", "kind" : "final def"}, {"label" : "anyYear", "tail" : "(): Gen[Has[Random], Year]", "member" : "zio.test.TimeVariants.anyYear", "link" : "zio\/test\/TimeVariants.html#anyYear:zio.test.Gen[zio.Has[zio.Random],java.time.Year]", "kind" : "final def"}, {"label" : "anyPeriod", "tail" : "(): Gen[Has[Random], Period]", "member" : "zio.test.TimeVariants.anyPeriod", "link" : "zio\/test\/TimeVariants.html#anyPeriod:zio.test.Gen[zio.Has[zio.Random],java.time.Period]", "kind" : "final def"}, {"label" : "anyOffsetTime", "tail" : "(): Gen[Has[Random], OffsetTime]", "member" : "zio.test.TimeVariants.anyOffsetTime", "link" : "zio\/test\/TimeVariants.html#anyOffsetTime:zio.test.Gen[zio.Has[zio.Random],java.time.OffsetTime]", "kind" : "final def"}, {"label" : "anyOffsetDateTime", "tail" : "(): Gen[Has[Random], OffsetDateTime]", "member" : "zio.test.TimeVariants.anyOffsetDateTime", "link" : "zio\/test\/TimeVariants.html#anyOffsetDateTime:zio.test.Gen[zio.Has[zio.Random],java.time.OffsetDateTime]", "kind" : "final def"}, {"label" : "anyMonthDay", "tail" : "(): Gen[Has[Random], MonthDay]", "member" : "zio.test.TimeVariants.anyMonthDay", "link" : "zio\/test\/TimeVariants.html#anyMonthDay:zio.test.Gen[zio.Has[zio.Random],java.time.MonthDay]", "kind" : "final def"}, {"label" : "anyMonth", "tail" : "(): Gen[Has[Random], Month]", "member" : "zio.test.TimeVariants.anyMonth", "link" : "zio\/test\/TimeVariants.html#anyMonth:zio.test.Gen[zio.Has[zio.Random],java.time.Month]", "kind" : "final def"}, {"label" : "anyLocalDateTime", "tail" : "(): Gen[Has[Random], LocalDateTime]", "member" : "zio.test.TimeVariants.anyLocalDateTime", "link" : "zio\/test\/TimeVariants.html#anyLocalDateTime:zio.test.Gen[zio.Has[zio.Random],java.time.LocalDateTime]", "kind" : "final def"}, {"label" : "anyLocalTime", "tail" : "(): Gen[Has[Random], LocalTime]", "member" : "zio.test.TimeVariants.anyLocalTime", "link" : "zio\/test\/TimeVariants.html#anyLocalTime:zio.test.Gen[zio.Has[zio.Random],java.time.LocalTime]", "kind" : "final def"}, {"label" : "anyLocalDate", "tail" : "(): Gen[Has[Random], LocalDate]", "member" : "zio.test.TimeVariants.anyLocalDate", "link" : "zio\/test\/TimeVariants.html#anyLocalDate:zio.test.Gen[zio.Has[zio.Random],java.time.LocalDate]", "kind" : "final def"}, {"label" : "anyInstant", "tail" : "(): Gen[Has[Random], Instant]", "member" : "zio.test.TimeVariants.anyInstant", "link" : "zio\/test\/TimeVariants.html#anyInstant:zio.test.Gen[zio.Has[zio.Random],java.time.Instant]", "kind" : "final def"}, {"label" : "anyFiniteDuration", "tail" : "(): Gen[Has[Random], zio.Duration]", "member" : "zio.test.TimeVariants.anyFiniteDuration", "link" : "zio\/test\/TimeVariants.html#anyFiniteDuration:zio.test.Gen[zio.Has[zio.Random],zio.Duration]", "kind" : "final def"}, {"label" : "anyDayOfWeek", "tail" : "(): Gen[Has[Random], DayOfWeek]", "member" : "zio.test.TimeVariants.anyDayOfWeek", "link" : "zio\/test\/TimeVariants.html#anyDayOfWeek:zio.test.Gen[zio.Has[zio.Random],java.time.DayOfWeek]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/TimeVariants.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/TimeVariants.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/TimeVariants.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/TimeVariants.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/TimeVariants.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/TimeVariants.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/TimeVariants.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TimeVariants.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TimeVariants.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/TimeVariants.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/TimeVariants.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/TimeVariants.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/TimeVariants.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/TimeVariants.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/TimeVariants.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/TimeVariants.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/TimeVariants.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/TimeVariants.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/TimeVariants.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.test.Trace", "object" : "zio\/test\/Trace$.html", "members_object" : [{"label" : "Succeed", "tail" : "", "member" : "zio.test.Trace.Succeed", "link" : "zio\/test\/Trace$.html#Succeed", "kind" : "object"}, {"label" : "Fail", "tail" : "", "member" : "zio.test.Trace.Fail", "link" : "zio\/test\/Trace$.html#Fail", "kind" : "object"}, {"label" : "Halt", "tail" : "", "member" : "zio.test.Trace.Halt", "link" : "zio\/test\/Trace$.html#Halt", "kind" : "object"}, {"label" : "die", "tail" : "(throwable: Throwable): Trace[Nothing]", "member" : "zio.test.Trace.die", "link" : "zio\/test\/Trace$.html#die(throwable:Throwable):zio.test.Trace[Nothing]", "kind" : "def"}, {"label" : "boolean", "tail" : "(value: Boolean)(message: ErrorMessage): Trace[Boolean]", "member" : "zio.test.Trace.boolean", "link" : "zio\/test\/Trace$.html#boolean(value:Boolean)(message:zio.test.ErrorMessage):zio.test.Trace[Boolean]", "kind" : "def"}, {"label" : "succeed", "tail" : "(value: A): Trace[A]", "member" : "zio.test.Trace.succeed", "link" : "zio\/test\/Trace$.html#succeed[A](value:A):zio.test.Trace[A]", "kind" : "def"}, {"label" : "halt", "tail" : "(message: ErrorMessage): Trace[Nothing]", "member" : "zio.test.Trace.halt", "link" : "zio\/test\/Trace$.html#halt(message:zio.test.ErrorMessage):zio.test.Trace[Nothing]", "kind" : "def"}, {"label" : "halt", "tail" : "(message: String): Trace[Nothing]", "member" : "zio.test.Trace.halt", "link" : "zio\/test\/Trace$.html#halt(message:String):zio.test.Trace[Nothing]", "kind" : "def"}, {"label" : "halt", "tail" : "(): Trace[Nothing]", "member" : "zio.test.Trace.halt", "link" : "zio\/test\/Trace$.html#halt:zio.test.Trace[Nothing]", "kind" : "def"}, {"label" : "Annotation", "tail" : "", "member" : "zio.test.Trace.Annotation", "link" : "zio\/test\/Trace$.html#Annotation", "kind" : "object"}, {"label" : "Annotation", "tail" : "", "member" : "zio.test.Trace.Annotation", "link" : "zio\/test\/Trace$.html#AnnotationextendsAnyRef", "kind" : "sealed trait"}, {"label" : "prune", "tail" : "(trace: Trace[Boolean], negated: Boolean): Option[Trace[Boolean]]", "member" : "zio.test.Trace.prune", "link" : "zio\/test\/Trace$.html#prune(trace:zio.test.Trace[Boolean],negated:Boolean):Option[zio.test.Trace[Boolean]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Trace$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Trace$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Trace$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Trace$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Trace$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Trace$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Trace$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Trace$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Trace$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Trace$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Trace$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Trace$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Trace$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Trace$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Trace$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Trace$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Trace$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Trace$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Trace$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/test\/Trace.html", "kind" : "trait", "members_trait" : [{"label" : ">>>", "tail" : "(that: Trace[B]): Trace[B]", "member" : "zio.test.Trace.>>>", "link" : "zio\/test\/Trace.html#>>>[B](that:zio.test.Trace[B]):zio.test.Trace[B]", "kind" : "final def"}, {"label" : "unary_!", "tail" : "(ev: <:<[A, Boolean]): Trace[Boolean]", "member" : "zio.test.Trace.unary_!", "link" : "zio\/test\/Trace.html#unary_!(implicitev:A<:<Boolean):zio.test.Trace[Boolean]", "kind" : "final def"}, {"label" : "||", "tail" : "(that: Trace[Boolean])(ev: <:<[A, Boolean]): Trace[Boolean]", "member" : "zio.test.Trace.||", "link" : "zio\/test\/Trace.html#||(that:zio.test.Trace[Boolean])(implicitev:A<:<Boolean):zio.test.Trace[Boolean]", "kind" : "final def"}, {"label" : "&&", "tail" : "(that: Trace[Boolean])(ev: <:<[A, Boolean]): Trace[Boolean]", "member" : "zio.test.Trace.&&", "link" : "zio\/test\/Trace.html#&&(that:zio.test.Trace[Boolean])(implicitev:A<:<Boolean):zio.test.Trace[Boolean]", "kind" : "final def"}, {"label" : "<==>", "tail" : "(that: Trace[Boolean])(ev: <:<[A, Boolean]): Trace[Boolean]", "member" : "zio.test.Trace.<==>", "link" : "zio\/test\/Trace.html#<==>(that:zio.test.Trace[Boolean])(implicitev:A<:<Boolean):zio.test.Trace[Boolean]", "kind" : "final def"}, {"label" : "==>", "tail" : "(that: Trace[Boolean])(ev: <:<[A, Boolean]): Trace[Boolean]", "member" : "zio.test.Trace.==>", "link" : "zio\/test\/Trace.html#==>(that:zio.test.Trace[Boolean])(implicitev:A<:<Boolean):zio.test.Trace[Boolean]", "kind" : "final def"}, {"label" : "implies", "tail" : "(that: Trace[Boolean])(ev: <:<[A, Boolean]): Trace[Boolean]", "member" : "zio.test.Trace.implies", "link" : "zio\/test\/Trace.html#implies(that:zio.test.Trace[Boolean])(implicitev:A<:<Boolean):zio.test.Trace[Boolean]", "kind" : "final def"}, {"label" : "annotate", "tail" : "(annotation: Annotation*): Trace[A]", "member" : "zio.test.Trace.annotate", "link" : "zio\/test\/Trace.html#annotate(annotation:zio.test.Trace.Annotation*):zio.test.Trace[A]", "kind" : "final def"}, {"label" : "withCode", "tail" : "(code: Option[String]): Trace[A]", "member" : "zio.test.Trace.withCode", "link" : "zio\/test\/Trace.html#withCode(code:Option[String]):zio.test.Trace[A]", "kind" : "final def"}, {"label" : "withLocation", "tail" : "(location: Option[String]): Trace[A]", "member" : "zio.test.Trace.withLocation", "link" : "zio\/test\/Trace.html#withLocation(location:Option[String]):zio.test.Trace[A]", "kind" : "def"}, {"label" : "withParentSpan", "tail" : "(span: Option[Span]): Trace[A]", "member" : "zio.test.Trace.withParentSpan", "link" : "zio\/test\/Trace.html#withParentSpan(span:Option[zio.test.Arrow.Span]):zio.test.Trace[A]", "kind" : "def"}, {"label" : "withSpan", "tail" : "(span: Option[Span]): Trace[A]", "member" : "zio.test.Trace.withSpan", "link" : "zio\/test\/Trace.html#withSpan(span:Option[zio.test.Arrow.Span]):zio.test.Trace[A]", "kind" : "final def"}, {"label" : "isSuccess", "tail" : "(): Boolean", "member" : "zio.test.Trace.isSuccess", "link" : "zio\/test\/Trace.html#isSuccess:Boolean", "kind" : "def"}, {"label" : "isFailure", "tail" : "(): Boolean", "member" : "zio.test.Trace.isFailure", "link" : "zio\/test\/Trace.html#isFailure:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/Trace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/Trace.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/Trace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/Trace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/Trace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/Trace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/Trace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Trace.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Trace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/Trace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/Trace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/Trace.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/Trace.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/Trace.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/Trace.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/Trace.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/Trace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/Trace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/Trace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "result", "tail" : "(): Result[A]", "member" : "zio.test.Trace.result", "link" : "zio\/test\/Trace.html#result:zio.test.Result[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.test.ZIOSpec", "shortDescription" : "", "members_class" : [{"label" : "tag", "tail" : ": zio.Tag[R]", "member" : "zio.test.ZIOSpec.tag", "link" : "zio\/test\/ZIOSpec.html#tag:zio.Tag[R]", "kind" : "final val"}, {"label" : "Environment", "tail" : "", "member" : "zio.test.ZIOSpec.Environment", "link" : "zio\/test\/ZIOSpec.html#Environment=R", "kind" : "type"}, {"member" : "zio.test.ZIOSpec#<init>", "error" : "unsupported entity"}, {"label" : "runtime", "tail" : "(): Runtime[zio.ZEnv]", "member" : "zio.ZIOApp.runtime", "link" : "zio\/test\/ZIOSpec.html#runtime:zio.Runtime[zio.ZEnv]", "kind" : "def"}, {"label" : "main", "tail" : "(args0: Array[String]): Unit", "member" : "zio.ZIOApp.main", "link" : "zio\/test\/ZIOSpec.html#main(args0:Array[String]):Unit", "kind" : "final def"}, {"label" : "invoke", "tail" : "(args: Chunk[String]): ZIO[zio.ZEnv, Nothing, ExitCode]", "member" : "zio.ZIOApp.invoke", "link" : "zio\/test\/ZIOSpec.html#invoke(args:zio.Chunk[String]):zio.ZIO[zio.ZEnv,Nothing,zio.ExitCode]", "kind" : "final def"}, {"label" : "hook", "tail" : "(): RuntimeConfigAspect", "member" : "zio.ZIOApp.hook", "link" : "zio\/test\/ZIOSpec.html#hook:zio.RuntimeConfigAspect", "kind" : "def"}, {"label" : "exit", "tail" : "(code: ExitCode): UIO[Unit]", "member" : "zio.ZIOApp.exit", "link" : "zio\/test\/ZIOSpec.html#exit(code:zio.ExitCode):zio.UIO[Unit]", "kind" : "final def"}, {"label" : "args", "tail" : "(): ZIO[Has[ZIOAppArgs], Nothing, Chunk[String]]", "member" : "zio.ZIOApp.args", "link" : "zio\/test\/ZIOSpec.html#args:zio.ZIO[zio.Has[zio.ZIOAppArgs],Nothing,zio.Chunk[String]]", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: ZIOApp): ZIOApp", "member" : "zio.ZIOApp.<>", "link" : "zio\/test\/ZIOSpec.html#<>(that:zio.ZIOApp):zio.ZIOApp", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/ZIOSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/ZIOSpec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/ZIOSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/ZIOSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/ZIOSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/ZIOSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/ZIOSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ZIOSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ZIOSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ZIOSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/ZIOSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/ZIOSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/ZIOSpec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/ZIOSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/ZIOSpec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/ZIOSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/ZIOSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/ZIOSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/ZIOSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(): ZIO[Environment with zio.ZEnv with Has[ZIOAppArgs], Any, Any]", "member" : "zio.ZIOApp.run", "link" : "zio\/test\/ZIOSpec.html#run:zio.ZIO[ZIOApp.this.Environmentwithzio.ZEnvwithzio.Has[zio.ZIOAppArgs],Any,Any]", "kind" : "abstract def"}, {"label" : "layer", "tail" : "(): ZLayer[Has[ZIOAppArgs], Any, Environment]", "member" : "zio.ZIOApp.layer", "link" : "zio\/test\/ZIOSpec.html#layer:zio.ZLayer[zio.Has[zio.ZIOAppArgs],Any,ZIOApp.this.Environment]", "kind" : "abstract def"}], "class" : "zio\/test\/ZIOSpec.html", "kind" : "class"}, {"name" : "zio.test.ZIOSpecAbstract", "shortDescription" : "", "members_class" : [{"label" : "runSpec", "tail" : "(): ZIO[Environment with environment.TestEnvironment with Has[ZIOAppArgs], Any, Any]", "member" : "zio.test.ZIOSpecAbstract.runSpec", "link" : "zio\/test\/ZIOSpecAbstract.html#runSpec:zio.ZIO[ZIOSpecAbstract.this.Environmentwithzio.test.environment.TestEnvironmentwithzio.Has[zio.ZIOAppArgs],Any,Any]", "kind" : "def"}, {"label" : "<>", "tail" : "(that: ZIOSpecAbstract): ZIOSpecAbstract", "member" : "zio.test.ZIOSpecAbstract.<>", "link" : "zio\/test\/ZIOSpecAbstract.html#<>(that:zio.test.ZIOSpecAbstract):zio.test.ZIOSpecAbstract", "kind" : "final def"}, {"label" : "run", "tail" : "(): ZIO[zio.ZEnv with Has[ZIOAppArgs], Any, Any]", "member" : "zio.test.ZIOSpecAbstract.run", "link" : "zio\/test\/ZIOSpecAbstract.html#run:zio.ZIO[zio.ZEnvwithzio.Has[zio.ZIOAppArgs],Any,Any]", "kind" : "final def"}, {"label" : "aspects", "tail" : "(): Chunk[TestAspect[Nothing, Environment with environment.TestEnvironment with Has[ZIOAppArgs], Nothing, Any]]", "member" : "zio.test.ZIOSpecAbstract.aspects", "link" : "zio\/test\/ZIOSpecAbstract.html#aspects:zio.Chunk[zio.test.TestAspect[Nothing,ZIOSpecAbstract.this.Environmentwithzio.test.environment.TestEnvironmentwithzio.Has[zio.ZIOAppArgs],Nothing,Any]]", "kind" : "def"}, {"member" : "zio.test.ZIOSpecAbstract#<init>", "error" : "unsupported entity"}, {"label" : "runtime", "tail" : "(): Runtime[zio.ZEnv]", "member" : "zio.ZIOApp.runtime", "link" : "zio\/test\/ZIOSpecAbstract.html#runtime:zio.Runtime[zio.ZEnv]", "kind" : "def"}, {"label" : "main", "tail" : "(args0: Array[String]): Unit", "member" : "zio.ZIOApp.main", "link" : "zio\/test\/ZIOSpecAbstract.html#main(args0:Array[String]):Unit", "kind" : "final def"}, {"label" : "invoke", "tail" : "(args: Chunk[String]): ZIO[zio.ZEnv, Nothing, ExitCode]", "member" : "zio.ZIOApp.invoke", "link" : "zio\/test\/ZIOSpecAbstract.html#invoke(args:zio.Chunk[String]):zio.ZIO[zio.ZEnv,Nothing,zio.ExitCode]", "kind" : "final def"}, {"label" : "hook", "tail" : "(): RuntimeConfigAspect", "member" : "zio.ZIOApp.hook", "link" : "zio\/test\/ZIOSpecAbstract.html#hook:zio.RuntimeConfigAspect", "kind" : "def"}, {"label" : "exit", "tail" : "(code: ExitCode): UIO[Unit]", "member" : "zio.ZIOApp.exit", "link" : "zio\/test\/ZIOSpecAbstract.html#exit(code:zio.ExitCode):zio.UIO[Unit]", "kind" : "final def"}, {"label" : "args", "tail" : "(): ZIO[Has[ZIOAppArgs], Nothing, Chunk[String]]", "member" : "zio.ZIOApp.args", "link" : "zio\/test\/ZIOSpecAbstract.html#args:zio.ZIO[zio.Has[zio.ZIOAppArgs],Nothing,zio.Chunk[String]]", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: ZIOApp): ZIOApp", "member" : "zio.ZIOApp.<>", "link" : "zio\/test\/ZIOSpecAbstract.html#<>(that:zio.ZIOApp):zio.ZIOApp", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/ZIOSpecAbstract.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/ZIOSpecAbstract.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/ZIOSpecAbstract.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/ZIOSpecAbstract.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/ZIOSpecAbstract.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/ZIOSpecAbstract.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/ZIOSpecAbstract.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ZIOSpecAbstract.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ZIOSpecAbstract.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ZIOSpecAbstract.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/ZIOSpecAbstract.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/ZIOSpecAbstract.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/ZIOSpecAbstract.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/ZIOSpecAbstract.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/ZIOSpecAbstract.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/ZIOSpecAbstract.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/ZIOSpecAbstract.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/ZIOSpecAbstract.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/ZIOSpecAbstract.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "spec", "tail" : "(): ZSpec[Environment with environment.TestEnvironment with Has[ZIOAppArgs], Any]", "member" : "zio.test.ZIOSpecAbstract.spec", "link" : "zio\/test\/ZIOSpecAbstract.html#spec:zio.test.ZSpec[ZIOSpecAbstract.this.Environmentwithzio.test.environment.TestEnvironmentwithzio.Has[zio.ZIOAppArgs],Any]", "kind" : "abstract def"}, {"label" : "layer", "tail" : "(): ZLayer[Has[ZIOAppArgs], Any, Environment]", "member" : "zio.ZIOApp.layer", "link" : "zio\/test\/ZIOSpecAbstract.html#layer:zio.ZLayer[zio.Has[zio.ZIOAppArgs],Any,ZIOApp.this.Environment]", "kind" : "abstract def"}, {"member" : "zio.ZIOApp.Environment", "error" : "unsupported entity"}, {"label" : "tag", "tail" : "(): zio.Tag[Environment]", "member" : "zio.ZIOApp.tag", "link" : "zio\/test\/ZIOSpecAbstract.html#tag:zio.Tag[ZIOApp.this.Environment]", "kind" : "implicit abstract def"}], "class" : "zio\/test\/ZIOSpecAbstract.html", "kind" : "class"}, {"name" : "zio.test.ZIOSpecDefault", "shortDescription" : "", "members_class" : [{"label" : "testLayer", "tail" : ": ZLayer[environment.TestEnvironment, Any, environment.TestEnvironment]", "member" : "zio.test.ZIOSpecDefault.testLayer", "link" : "zio\/test\/ZIOSpecDefault.html#testLayer:zio.ZLayer[zio.test.environment.TestEnvironment,Any,zio.test.environment.TestEnvironment]", "kind" : "final val"}, {"member" : "zio.test.ZIOSpecDefault#<init>", "error" : "unsupported entity"}, {"label" : "tag", "tail" : ": zio.Tag[environment.TestEnvironment]", "member" : "zio.test.ZIOSpec.tag", "link" : "zio\/test\/ZIOSpecDefault.html#tag:zio.Tag[R]", "kind" : "final val"}, {"label" : "Environment", "tail" : "", "member" : "zio.test.ZIOSpec.Environment", "link" : "zio\/test\/ZIOSpecDefault.html#Environment=R", "kind" : "type"}, {"label" : "runtime", "tail" : "(): Runtime[zio.ZEnv]", "member" : "zio.ZIOApp.runtime", "link" : "zio\/test\/ZIOSpecDefault.html#runtime:zio.Runtime[zio.ZEnv]", "kind" : "def"}, {"label" : "main", "tail" : "(args0: Array[String]): Unit", "member" : "zio.ZIOApp.main", "link" : "zio\/test\/ZIOSpecDefault.html#main(args0:Array[String]):Unit", "kind" : "final def"}, {"label" : "invoke", "tail" : "(args: Chunk[String]): ZIO[zio.ZEnv, Nothing, ExitCode]", "member" : "zio.ZIOApp.invoke", "link" : "zio\/test\/ZIOSpecDefault.html#invoke(args:zio.Chunk[String]):zio.ZIO[zio.ZEnv,Nothing,zio.ExitCode]", "kind" : "final def"}, {"label" : "hook", "tail" : "(): RuntimeConfigAspect", "member" : "zio.ZIOApp.hook", "link" : "zio\/test\/ZIOSpecDefault.html#hook:zio.RuntimeConfigAspect", "kind" : "def"}, {"label" : "exit", "tail" : "(code: ExitCode): UIO[Unit]", "member" : "zio.ZIOApp.exit", "link" : "zio\/test\/ZIOSpecDefault.html#exit(code:zio.ExitCode):zio.UIO[Unit]", "kind" : "final def"}, {"label" : "args", "tail" : "(): ZIO[Has[ZIOAppArgs], Nothing, Chunk[String]]", "member" : "zio.ZIOApp.args", "link" : "zio\/test\/ZIOSpecDefault.html#args:zio.ZIO[zio.Has[zio.ZIOAppArgs],Nothing,zio.Chunk[String]]", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: ZIOApp): ZIOApp", "member" : "zio.ZIOApp.<>", "link" : "zio\/test\/ZIOSpecDefault.html#<>(that:zio.ZIOApp):zio.ZIOApp", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/ZIOSpecDefault.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/ZIOSpecDefault.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/ZIOSpecDefault.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/ZIOSpecDefault.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/ZIOSpecDefault.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/ZIOSpecDefault.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/ZIOSpecDefault.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ZIOSpecDefault.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ZIOSpecDefault.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/ZIOSpecDefault.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/ZIOSpecDefault.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/ZIOSpecDefault.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/ZIOSpecDefault.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/ZIOSpecDefault.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/ZIOSpecDefault.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/ZIOSpecDefault.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/ZIOSpecDefault.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/ZIOSpecDefault.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/ZIOSpecDefault.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "spec", "tail" : "(): ZSpec[environment.TestEnvironment, Any]", "member" : "zio.test.ZIOSpecDefault.spec", "link" : "zio\/test\/ZIOSpecDefault.html#spec:zio.test.ZSpec[zio.test.environment.TestEnvironment,Any]", "kind" : "abstract def"}, {"label" : "run", "tail" : "(): ZIO[Environment with zio.ZEnv with Has[ZIOAppArgs], Any, Any]", "member" : "zio.ZIOApp.run", "link" : "zio\/test\/ZIOSpecDefault.html#run:zio.ZIO[ZIOApp.this.Environmentwithzio.ZEnvwithzio.Has[zio.ZIOAppArgs],Any,Any]", "kind" : "abstract def"}, {"label" : "layer", "tail" : "(): ZLayer[Has[ZIOAppArgs], Any, Environment]", "member" : "zio.ZIOApp.layer", "link" : "zio\/test\/ZIOSpecDefault.html#layer:zio.ZLayer[zio.Has[zio.ZIOAppArgs],Any,ZIOApp.this.Environment]", "kind" : "abstract def"}], "class" : "zio\/test\/ZIOSpecDefault.html", "kind" : "class"}, {"name" : "zio.test.ZTest", "shortDescription" : "", "object" : "zio\/test\/package$$ZTest$.html", "members_object" : [{"label" : "apply", "tail" : "(label: String, assertion: => ZIO[R, E, TestResult]): ZIO[R, TestFailure[E], TestSuccess]", "member" : "zio.test.ZTest.apply", "link" : "zio\/test\/package$$ZTest$.html#apply[R,E](label:String,assertion:=>zio.ZIO[R,E,zio.test.package.TestResult]):zio.ZIO[R,zio.test.TestFailure[E],zio.test.TestSuccess]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/test\/package$$ZTest$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/test\/package$$ZTest$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/test\/package$$ZTest$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/test\/package$$ZTest$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/test\/package$$ZTest$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/test\/package$$ZTest$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/test\/package$$ZTest$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/package$$ZTest$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/package$$ZTest$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/test\/package$$ZTest$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/test\/package$$ZTest$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/test\/package$$ZTest$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/test\/package$$ZTest$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/test\/package$$ZTest$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/test\/package$$ZTest$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/test\/package$$ZTest$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/test\/package$$ZTest$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/test\/package$$ZTest$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/test\/package$$ZTest$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};