"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[6993],{3905:function(e,n,t){t.d(n,{Zo:function(){return y},kt:function(){return u}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},y=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,y=s(e,["components","mdxType","originalType","parentName"]),d=p(t),u=r,g=d["".concat(l,".").concat(u)]||d[u]||c[u]||o;return t?a.createElement(g,i(i({ref:n},y),{},{components:t})):a.createElement(g,i({ref:n},y))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7369:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return y},default:function(){return d}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],s={id:"hasmany",title:"HasMany"},l=void 0,p={unversionedId:"datatypes/contextual/hasmany",id:"datatypes/contextual/hasmany",isDocsHomePage:!1,title:"HasMany",description:"The HasMany[K, A] data type is used with the ZIO environment to express an effect's dependency on multiple services of type A which are keyed by type A.",source:"@site/docs/datatypes/contextual/hasmany.md",sourceDirName:"datatypes/contextual",slug:"/datatypes/contextual/hasmany",permalink:"/datatypes/contextual/hasmany",tags:[],version:"current",frontMatter:{id:"hasmany",title:"HasMany"},sidebar:"datatypes-sidebar",previous:{title:"Has",permalink:"/datatypes/contextual/has"},next:{title:"ZLayer",permalink:"/datatypes/contextual/zlayer"}},y=[{value:"Providing Multiple Instance of the Same Interface",id:"providing-multiple-instance-of-the-same-interface",children:[],level:2},{value:"Example",id:"example",children:[],level:2}],c={toc:y};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"HasMany[K, A]")," data type is used with the ZIO environment to express an effect's dependency on multiple services of type ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," which are keyed by type ",(0,o.kt)("inlineCode",{parentName:"p"},"A"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"HasMany[K, A]")," is a type alias for ",(0,o.kt)("inlineCode",{parentName:"p"},"Has[Map[K, A]]")," data type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"type HasMany[K, A] = Has[Map[K, A]]\n")),(0,o.kt)("h2",{id:"providing-multiple-instance-of-the-same-interface"},"Providing Multiple Instance of the Same Interface"),(0,o.kt)("p",null,"In ordinary ",(0,o.kt)("inlineCode",{parentName:"p"},"Has[A]")," data type, when we want to express dependencies of type ",(0,o.kt)("inlineCode",{parentName:"p"},"Console"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Database")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Logging"),", we use\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"Has[Console] with Has[Database] with Has[Logging]")," data type. This is convenient, where each type uniquely\nidentifies one service."),(0,o.kt)("p",null,"What about those cases where we need to express multiple services of the same type, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"Database"),"? To deal with such\ncases we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"HasMany")," data type. So in these cases the environment type would be something\nlike ",(0,o.kt)("inlineCode",{parentName:"p"},"Has[Console] with HasMany[String, Database] with Has[Logging]"),"."),(0,o.kt)("p",null,"To access the specified service correspond to a key, we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO.serviceAt[Service](key)")," constructor. For\nexample, to access a ",(0,o.kt)("inlineCode",{parentName:"p"},"Database"),' service which is specified by the "inmemory" key, we can write:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'val database: URIO[HasMany[String, Database], Option[Database]] =\n  ZIO.serviceAt[Database]("persistent")\n')),(0,o.kt)("p",null,"A service can be updated at the specified key with the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO#updateServiceAt")," operator."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Here is an example of multiple instances of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Database")," interface that are provided to the ZIO environment:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'trait Database {\n  def add(key: String, value: Array[Byte]): ZIO[Any, Throwable, Unit]\n\n  def get(key: String): ZIO[Any, Throwable, Array[Byte]]\n}\n\nobject Database {\n  val layer: URLayer[Has[Logging], HasMany[String, Database]] = { (logger: Logging) =>\n    Map(\n      "persistent" -> PersistentDatabase(logger),\n      "inmemory" -> InmemoryDatabase(logger)\n    )\n  }.toLayer\n}\n\ntrait Logging {\n  def log(line: Any): ZIO[Any, Throwable, Unit]\n}\n\ncase class ConsoleLogger(console: Console) extends Logging {\n  override def log(line: Any): ZIO[Any, Throwable, Unit] =\n    console.printLine(s"ConsoleLogger -- $line")\n}\n\nobject ConsoleLogger {\n  val layer: URLayer[Has[Console], Has[Logging]] =\n    (ConsoleLogger.apply _).toLayer[Logging]\n}\n\ncase class InmemoryDatabase(logger: Logging) extends Database {\n  override def add(key: String, value: Array[Byte]): ZIO[Any, Throwable, Unit] =\n    ZIO.unit <* logger.log(s"new $key added to the inmemory database")\n\n  override def get(key: String): ZIO[Any, Throwable, Array[Byte]] =\n    ZIO(Array.empty[Byte]) <* logger.log(s"retrieving value of $key key from inmemory database")\n}\n\nobject InmemoryDatabase {\n  val layer: URLayer[Has[Logging], Has[Database]] =\n    (InmemoryDatabase.apply _).toLayer[Database]\n}\n\ncase class PersistentDatabase(logger: Logging) extends Database {\n  override def add(key: String, value: Array[Byte]): ZIO[Any, Throwable, Unit] =\n    ZIO.unit <* logger.log(s"new $key added to the persistent database")\n\n  override def get(key: String): ZIO[Any, Throwable, Array[Byte]] =\n    ZIO.succeed(Array.empty[Byte]) <* logger.log(s"retrieving value of $key key from persistent database")\n}\n\nobject PersistentDatabase {\n  def layer: URLayer[Has[Logging], Has[Database]] = (PersistentDatabase.apply _).toLayer[Database]\n}\n\nobject HasManyExample extends ZIOAppDefault {\n  val myApp = for {\n    inmemory <- ZIO.serviceAt[Database]("inmemory").flatMap(x => ZIO.fromOption[Database](x))\n    persistent <- ZIO.serviceAt[Database]("persistent").flatMap(x => ZIO.fromOption[Database](x))\n    _ <- inmemory.add("key1", "value1".getBytes)\n    _ <- persistent.add("key2", "value2".getBytes)\n  } yield ()\n\n  def run =\n    myApp.injectCustom(\n      Database.layer,\n      ConsoleLogger.layer\n    )\n}\n')))}d.isMDXComponent=!0}}]);