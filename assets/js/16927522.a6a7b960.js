"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[1260],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(t),d=a,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9240:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={id:"tranzactio",title:"TranzactIO"},c=void 0,l={unversionedId:"resources/ecosystem/community/tranzactio",id:"resources/ecosystem/community/tranzactio",isDocsHomePage:!1,title:"TranzactIO",description:"TranzactIO is a ZIO wrapper for some Scala database access libraries, currently for Doobie and Anorm.",source:"@site/docs/resources/ecosystem/community/tranzactio.md",sourceDirName:"resources/ecosystem/community",slug:"/resources/ecosystem/community/tranzactio",permalink:"/resources/ecosystem/community/tranzactio",tags:[],version:"current",frontMatter:{id:"tranzactio",title:"TranzactIO"},sidebar:"resources-sidebar",previous:{title:"Rezilience",permalink:"/resources/ecosystem/community/rezilience"},next:{title:"ZIO AMQP",permalink:"/resources/ecosystem/community/zio-amqp"}},p=[{value:"Introduction",id:"introduction",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Example",id:"example",children:[]}],u={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/gaelrenoux/tranzactio"},"TranzactIO")," is a ZIO wrapper for some Scala database access libraries, currently for ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tpolecat/doobie"},"Doobie")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/playframework/anorm"},"Anorm"),"."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Using functional effect database access libraries like ",(0,o.kt)("em",{parentName:"p"},"Doobie")," enforces us to use their specialized monads like ",(0,o.kt)("inlineCode",{parentName:"p"},"ConnectionIO")," for ",(0,o.kt)("em",{parentName:"p"},"Doobie"),". The goal of ",(0,o.kt)("em",{parentName:"p"},"TranzactIO")," is to provide seamless integration with these libraries to help us to stay in the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO")," world."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"In order to use this library, we need to add the following line in our ",(0,o.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "io.github.gaelrenoux" %% "tranzactio" % "2.1.0"\n')),(0,o.kt)("p",null,"In addition, we need to declare the database access library we are using. For example, for the next example we need to add following dependencies for ",(0,o.kt)("em",{parentName:"p"},"Doobie")," integration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "org.tpolecat" %% "doobie-core" % "0.13.4"\nlibraryDependencies += "org.tpolecat" %% "doobie-h2"   % "0.13.4"\n')),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Let's try an example of simple ",(0,o.kt)("em",{parentName:"p"},"Doobie")," program:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import doobie.implicits._\nimport io.github.gaelrenoux.tranzactio.doobie\nimport io.github.gaelrenoux.tranzactio.doobie.{Connection, Database, TranzactIO, tzio}\nimport org.h2.jdbcx.JdbcDataSource\nimport zio.blocking.Blocking\nimport zio.clock.Clock\nimport zio.console.{Console, putStrLn}\nimport zio.{ExitCode, Has, URIO, ZIO, ZLayer, blocking}\n\nimport javax.sql.DataSource\n\nobject TranzactIOExample extends zio.App {\n\n  val query: ZIO[Connection with Console, Throwable, Unit] = for {\n    _ <- PersonQuery.setup\n    _ <- PersonQuery.insert(Person("William", "Stewart"))\n    _ <- PersonQuery.insert(Person("Michelle", "Streeter"))\n    _ <- PersonQuery.insert(Person("Johnathon", "Martinez"))\n    users <- PersonQuery.list\n    _ <- putStrLn(users.toString)\n  } yield ()\n\n  val myApp: ZIO[zio.ZEnv, Throwable, Unit] =\n    Database.transactionOrWidenR(query).provideCustomLayer(services.database)\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp.exitCode\n}\n\ncase class Person(firstName: String, lastName: String)\n\nobject PersonQuery {\n  def list: TranzactIO[List[Person]] = tzio {\n    sql"""SELECT first_name, last_name FROM person""".query[Person].to[List]\n  }\n\n  def setup: TranzactIO[Unit] = tzio {\n    sql"""\n        CREATE TABLE person (\n          first_name VARCHAR NOT NULL,\n          last_name VARCHAR NOT NULL\n        )\n        """.update.run.map(_ => ())\n  }\n\n  def insert(p: Person): TranzactIO[Unit] = tzio {\n    sql"""INSERT INTO person (first_name, last_name) VALUES (${p.firstName}, ${p.lastName})""".update.run\n      .map(_ => ())\n  }\n}\n\nobject services {\n  val datasource: ZLayer[Blocking, Throwable, Has[DataSource]] =\n    ZLayer.fromEffect(\n      blocking.effectBlocking {\n        val ds = new JdbcDataSource\n        ds.setURL(s"jdbc:h2:mem:mydb;DB_CLOSE_DELAY=10")\n        ds.setUser("sa")\n        ds.setPassword("sa")\n        ds\n      }\n    )\n\n  val database: ZLayer[Any, Throwable, doobie.Database.Database] =\n    (Blocking.live >>> datasource ++ Blocking.live ++ Clock.live) >>> Database.fromDatasource\n}\n')))}m.isMDXComponent=!0}}]);