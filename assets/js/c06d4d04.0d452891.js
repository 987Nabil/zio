"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[854],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return b}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),f=l(n),b=a,d=f["".concat(c,".").concat(b)]||f[b]||p[b]||i;return n?r.createElement(d,o(o({ref:t},s),{},{components:n})):r.createElement(d,o({ref:t},s))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:a,o[1]=u;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8242:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return f}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],u={id:"fiberstatus",title:"Fiber.Status"},c=void 0,l={unversionedId:"datatypes/fiber/fiberstatus",id:"datatypes/fiber/fiberstatus",isDocsHomePage:!1,title:"Fiber.Status",description:"Fiber.Status describe the current status of a Fiber.",source:"@site/docs/datatypes/fiber/fiberstatus.md",sourceDirName:"datatypes/fiber",slug:"/datatypes/fiber/fiberstatus",permalink:"/datatypes/fiber/fiberstatus",tags:[],version:"current",frontMatter:{id:"fiberstatus",title:"Fiber.Status"},sidebar:"datatypes-sidebar",previous:{title:"FiberId",permalink:"/datatypes/fiber/fiberid"},next:{title:"Introduction",permalink:"/datatypes/concurrency/index"}},s=[],p={toc:s};function f(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Fiber.Status")," describe the current status of a ",(0,i.kt)("a",{parentName:"p",href:"/datatypes/fiber/fiber"},"Fiber"),"."),(0,i.kt)("p",null,"Each fiber can be in one of the following statues:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Done"),(0,i.kt)("li",{parentName:"ul"},"Finishing"),(0,i.kt)("li",{parentName:"ul"},"Running"),(0,i.kt)("li",{parentName:"ul"},"Suspended")),(0,i.kt)("p",null,"In the following example, we are going to ",(0,i.kt)("inlineCode",{parentName:"p"},"await")," on a never-ending fiber and determine the id of that fiber, which we are blocking on:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nfor {\n  f1 <- ZIO.never.fork\n  f2 <- f1.await.fork\n  blockingOn <- f2.status\n    .collect(()) { case Fiber.Status.Suspended(_, _, _, blockingOn, _) =>\n      blockingOn\n    }\n    .eventually\n} yield (assert(blockingOn == f1.id))\n")))}f.isMDXComponent=!0}}]);